// Generated by Haxe 4.1.3
(function ($hx_exports, $global) { "use strict";
$hx_exports["lime"] = $hx_exports["lime"] || {};
$hx_exports["zygame"] = $hx_exports["zygame"] || {};
$hx_exports["zygame"]["utils"] = $hx_exports["zygame"]["utils"] || {};
var $hxClasses = {},$estr = function() { return js_Boot.__string_rec(this,''); },$hxEnums = $hxEnums || {},$_;
function $extend(from, fields) {
	var proto = Object.create(from);
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var lime_app_IModule = function() { };
$hxClasses["lime.app.IModule"] = lime_app_IModule;
lime_app_IModule.__name__ = "lime.app.IModule";
lime_app_IModule.__isInterface__ = true;
lime_app_IModule.prototype = {
	__registerLimeModule: null
	,__unregisterLimeModule: null
	,__class__: lime_app_IModule
};
var lime_app_Module = function() {
	this.onExit = new lime_app__$Event_$Int_$Void();
};
$hxClasses["lime.app.Module"] = lime_app_Module;
lime_app_Module.__name__ = "lime.app.Module";
lime_app_Module.__interfaces__ = [lime_app_IModule];
lime_app_Module.prototype = {
	onExit: null
	,__registerLimeModule: function(application) {
	}
	,__unregisterLimeModule: function(application) {
	}
	,__class__: lime_app_Module
};
var lime__$internal_backend_html5_HTML5Application = function(parent) {
	this.gameDeviceCache = new haxe_ds_IntMap();
	this.parent = parent;
	this.currentUpdate = 0;
	this.lastUpdate = 0;
	this.nextUpdate = 0;
	this.framePeriod = -1;
	lime_media_AudioManager.init();
	this.accelerometer = lime_system_Sensor.registerSensor(lime_system_SensorType.ACCELEROMETER,0);
};
$hxClasses["lime._internal.backend.html5.HTML5Application"] = lime__$internal_backend_html5_HTML5Application;
lime__$internal_backend_html5_HTML5Application.__name__ = "lime._internal.backend.html5.HTML5Application";
lime__$internal_backend_html5_HTML5Application.prototype = {
	gameDeviceCache: null
	,accelerometer: null
	,currentUpdate: null
	,deltaTime: null
	,framePeriod: null
	,lastUpdate: null
	,nextUpdate: null
	,parent: null
	,convertKeyCode: function(keyCode) {
		if(keyCode >= 65 && keyCode <= 90) {
			return keyCode + 32;
		}
		switch(keyCode) {
		case 12:
			return 1073741980;
		case 16:
			return 1073742049;
		case 17:
			return 1073742048;
		case 18:
			return 1073742050;
		case 19:
			return 1073741896;
		case 20:
			return 1073741881;
		case 33:
			return 1073741899;
		case 34:
			return 1073741902;
		case 35:
			return 1073741901;
		case 36:
			return 1073741898;
		case 37:
			return 1073741904;
		case 38:
			return 1073741906;
		case 39:
			return 1073741903;
		case 40:
			return 1073741905;
		case 41:
			return 1073741943;
		case 43:
			return 1073741940;
		case 44:
			return 1073741894;
		case 45:
			return 1073741897;
		case 46:
			return 127;
		case 91:
			return 1073742051;
		case 92:
			return 1073742055;
		case 93:
			return 1073742055;
		case 95:
			return 1073742106;
		case 96:
			return 1073741922;
		case 97:
			return 1073741913;
		case 98:
			return 1073741914;
		case 99:
			return 1073741915;
		case 100:
			return 1073741916;
		case 101:
			return 1073741917;
		case 102:
			return 1073741918;
		case 103:
			return 1073741919;
		case 104:
			return 1073741920;
		case 105:
			return 1073741921;
		case 106:
			return 1073741909;
		case 107:
			return 1073741911;
		case 108:
			return 1073741923;
		case 109:
			return 1073741910;
		case 110:
			return 1073741923;
		case 111:
			return 1073741908;
		case 112:
			return 1073741882;
		case 113:
			return 1073741883;
		case 114:
			return 1073741884;
		case 115:
			return 1073741885;
		case 116:
			return 1073741886;
		case 117:
			return 1073741887;
		case 118:
			return 1073741888;
		case 119:
			return 1073741889;
		case 120:
			return 1073741890;
		case 121:
			return 1073741891;
		case 122:
			return 1073741892;
		case 123:
			return 1073741893;
		case 124:
			return 1073741928;
		case 125:
			return 1073741929;
		case 126:
			return 1073741930;
		case 127:
			return 1073741931;
		case 128:
			return 1073741932;
		case 129:
			return 1073741933;
		case 130:
			return 1073741934;
		case 131:
			return 1073741935;
		case 132:
			return 1073741936;
		case 133:
			return 1073741937;
		case 134:
			return 1073741938;
		case 135:
			return 1073741939;
		case 144:
			return 1073741907;
		case 145:
			return 1073741895;
		case 160:
			return 94;
		case 161:
			return 33;
		case 163:
			return 35;
		case 164:
			return 36;
		case 166:
			return 1073742094;
		case 167:
			return 1073742095;
		case 168:
			return 1073742097;
		case 169:
			return 41;
		case 170:
			return 42;
		case 171:
			return 96;
		case 172:
			return 1073741898;
		case 173:
			return 45;
		case 174:
			return 1073741953;
		case 175:
			return 1073741952;
		case 176:
			return 1073742082;
		case 177:
			return 1073742083;
		case 178:
			return 1073742084;
		case 179:
			return 1073742085;
		case 180:
			return 1073742089;
		case 181:
			return 1073742086;
		case 182:
			return 1073741953;
		case 183:
			return 1073741952;
		case 186:
			return 59;
		case 187:
			return 61;
		case 188:
			return 44;
		case 189:
			return 45;
		case 190:
			return 46;
		case 191:
			return 47;
		case 192:
			return 96;
		case 193:
			return 63;
		case 194:
			return 1073741923;
		case 219:
			return 91;
		case 220:
			return 92;
		case 221:
			return 93;
		case 222:
			return 39;
		case 223:
			return 96;
		case 224:
			return 1073742051;
		case 226:
			return 92;
		}
		return keyCode;
	}
	,exec: function() {
		window.addEventListener("keydown",$bind(this,this.handleKeyEvent),false);
		window.addEventListener("keyup",$bind(this,this.handleKeyEvent),false);
		window.addEventListener("focus",$bind(this,this.handleWindowEvent),false);
		window.addEventListener("blur",$bind(this,this.handleWindowEvent),false);
		window.addEventListener("resize",$bind(this,this.handleWindowEvent),false);
		window.addEventListener("beforeunload",$bind(this,this.handleWindowEvent),false);
		window.addEventListener("devicemotion",$bind(this,this.handleSensorEvent),false);
		
			if (!CanvasRenderingContext2D.prototype.isPointInStroke) {
				CanvasRenderingContext2D.prototype.isPointInStroke = function (path, x, y) {
					return false;
				};
			}
			if (!CanvasRenderingContext2D.prototype.isPointInPath) {
				CanvasRenderingContext2D.prototype.isPointInPath = function (path, x, y) {
					return false;
				};
			}

			if ('performance' in window == false) {
				window.performance = {};
			}

			if ('now' in window.performance == false) {
				var offset = Date.now();
				if (performance.timing && performance.timing.navigationStart) {
					offset = performance.timing.navigationStart
				}
				window.performance.now = function now() {
					return Date.now() - offset;
				}
			}

			var lastTime = 0;
			var vendors = ['ms', 'moz', 'webkit', 'o'];
			for (var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {
				window.requestAnimationFrame = window[vendors[x]+'RequestAnimationFrame'];
				window.cancelAnimationFrame = window[vendors[x]+'CancelAnimationFrame'] || window[vendors[x]+'CancelRequestAnimationFrame'];
			}

			if (!window.requestAnimationFrame)
				window.requestAnimationFrame = function(callback, element) {
					var currTime = new Date().getTime();
					var timeToCall = Math.max(0, 16 - (currTime - lastTime));
					var id = window.setTimeout(function() { callback(currTime + timeToCall); },
					  timeToCall);
					lastTime = currTime + timeToCall;
					return id;
				};

			if (!window.cancelAnimationFrame)
				window.cancelAnimationFrame = function(id) {
					clearTimeout(id);
				};

			window.requestAnimFrame = window.requestAnimationFrame;
		;
		this.lastUpdate = new Date().getTime();
		this.handleApplicationEvent();
		return 0;
	}
	,exit: function() {
	}
	,handleApplicationEvent: function(__) {
		var _g = 0;
		var _g1 = this.parent.__windows;
		while(_g < _g1.length) {
			var $window = _g1[_g];
			++_g;
			$window.__backend.updateSize();
		}
		this.updateGameDevices();
		this.currentUpdate = new Date().getTime();
		if(this.currentUpdate >= this.nextUpdate) {
			this.deltaTime = this.currentUpdate - this.lastUpdate;
			var _g = 0;
			var _g1 = this.parent.__windows;
			while(_g < _g1.length) {
				var $window = _g1[_g];
				++_g;
				this.parent.onUpdate.dispatch(this.deltaTime | 0);
				if($window.context != null) {
					$window.onRender.dispatch($window.context);
				}
			}
			if(this.framePeriod < 0) {
				this.nextUpdate = this.currentUpdate;
			} else {
				this.nextUpdate = this.currentUpdate - this.currentUpdate % this.framePeriod + this.framePeriod;
			}
			this.lastUpdate = this.currentUpdate;
		}
		window.requestAnimationFrame($bind(this,this.handleApplicationEvent));
	}
	,handleKeyEvent: function(event) {
		if(this.parent.__window != null) {
			var keyCode = this.convertKeyCode(event.keyCode != null ? event.keyCode : event.which);
			var modifier = (event.shiftKey ? 3 : 0) | (event.ctrlKey ? 192 : 0) | (event.altKey ? 768 : 0) | (event.metaKey ? 3072 : 0);
			if(event.type == "keydown") {
				this.parent.__window.onKeyDown.dispatch(keyCode,modifier);
				if(this.parent.__window.onKeyDown.canceled && event.cancelable) {
					event.preventDefault();
				}
			} else {
				this.parent.__window.onKeyUp.dispatch(keyCode,modifier);
				if(this.parent.__window.onKeyUp.canceled && event.cancelable) {
					event.preventDefault();
				}
			}
		}
	}
	,handleSensorEvent: function(event) {
		this.accelerometer.onUpdate.dispatch(event.accelerationIncludingGravity.x,event.accelerationIncludingGravity.y,event.accelerationIncludingGravity.z);
	}
	,handleWindowEvent: function(event) {
		if(this.parent.__window != null) {
			switch(event.type) {
			case "beforeunload":
				break;
			case "blur":
				this.parent.__window.onFocusOut.dispatch();
				this.parent.__window.onDeactivate.dispatch();
				break;
			case "focus":
				this.parent.__window.onFocusIn.dispatch();
				this.parent.__window.onActivate.dispatch();
				break;
			case "resize":
				this.parent.__window.__backend.handleResizeEvent(event);
				break;
			}
		}
	}
	,updateGameDevices: function() {
		var devices = lime_ui_Joystick.__getDeviceData();
		if(devices == null) {
			return;
		}
		var id;
		var gamepad;
		var joystick;
		var data;
		var cache;
		var _g = 0;
		var _g1 = devices.length;
		while(_g < _g1) {
			var i = _g++;
			id = i;
			data = devices[id];
			if(data == null) {
				continue;
			}
			if(!this.gameDeviceCache.h.hasOwnProperty(id)) {
				cache = new lime__$internal_backend_html5_GameDeviceData();
				cache.id = id;
				cache.connected = data.connected;
				var _g2 = 0;
				var _g3 = data.buttons.length;
				while(_g2 < _g3) {
					var i1 = _g2++;
					cache.buttons.push(data.buttons[i1].value);
				}
				var _g4 = 0;
				var _g5 = data.axes.length;
				while(_g4 < _g5) {
					var i2 = _g4++;
					cache.axes.push(data.axes[i2]);
				}
				if(data.mapping == "standard") {
					cache.isGamepad = true;
				}
				this.gameDeviceCache.h[id] = cache;
				if(data.connected) {
					lime_ui_Joystick.__connect(id);
					if(cache.isGamepad) {
						lime_ui_Gamepad.__connect(id);
					}
				}
			}
			cache = this.gameDeviceCache.h[id];
			joystick = lime_ui_Joystick.devices.h[id];
			gamepad = lime_ui_Gamepad.devices.h[id];
			if(data.connected) {
				var button;
				var value;
				var _g6 = 0;
				var _g7 = data.buttons.length;
				while(_g6 < _g7) {
					var i3 = _g6++;
					value = data.buttons[i3].value;
					if(value != cache.buttons[i3]) {
						if(i3 == 6) {
							joystick.onAxisMove.dispatch(data.axes.length,value);
							if(gamepad != null) {
								gamepad.onAxisMove.dispatch(4,value);
							}
						} else if(i3 == 7) {
							joystick.onAxisMove.dispatch(data.axes.length + 1,value);
							if(gamepad != null) {
								gamepad.onAxisMove.dispatch(5,value);
							}
						} else {
							if(value > 0) {
								joystick.onButtonDown.dispatch(i3);
							} else {
								joystick.onButtonUp.dispatch(i3);
							}
							if(gamepad != null) {
								switch(i3) {
								case 0:
									button = 0;
									break;
								case 1:
									button = 1;
									break;
								case 2:
									button = 2;
									break;
								case 3:
									button = 3;
									break;
								case 4:
									button = 9;
									break;
								case 5:
									button = 10;
									break;
								case 8:
									button = 4;
									break;
								case 9:
									button = 6;
									break;
								case 10:
									button = 7;
									break;
								case 11:
									button = 8;
									break;
								case 12:
									button = 11;
									break;
								case 13:
									button = 12;
									break;
								case 14:
									button = 13;
									break;
								case 15:
									button = 14;
									break;
								case 16:
									button = 5;
									break;
								default:
									continue;
								}
								if(value > 0) {
									gamepad.onButtonDown.dispatch(button);
								} else {
									gamepad.onButtonUp.dispatch(button);
								}
							}
						}
						cache.buttons[i3] = value;
					}
				}
				var _g8 = 0;
				var _g9 = data.axes.length;
				while(_g8 < _g9) {
					var i4 = _g8++;
					if(data.axes[i4] != cache.axes[i4]) {
						joystick.onAxisMove.dispatch(i4,data.axes[i4]);
						if(gamepad != null) {
							gamepad.onAxisMove.dispatch(i4,data.axes[i4]);
						}
						cache.axes[i4] = data.axes[i4];
					}
				}
			} else if(cache.connected) {
				cache.connected = false;
				lime_ui_Joystick.__disconnect(id);
				lime_ui_Gamepad.__disconnect(id);
			}
		}
	}
	,__class__: lime__$internal_backend_html5_HTML5Application
};
var lime_app_Application = function() {
	this.onCreateWindow = new lime_app__$Event_$lime_$ui_$Window_$Void();
	this.onUpdate = new lime_app__$Event_$Int_$Void();
	lime_app_Module.call(this);
	if(lime_app_Application.current == null) {
		lime_app_Application.current = this;
	}
	this.meta = new haxe_ds_StringMap();
	this.modules = [];
	this.__windowByID = new haxe_ds_IntMap();
	this.__windows = [];
	this.__backend = new lime__$internal_backend_html5_HTML5Application(this);
	this.__registerLimeModule(this);
	this.__preloader = new lime_utils_Preloader();
	this.__preloader.onProgress.add($bind(this,this.onPreloadProgress));
	this.__preloader.onComplete.add($bind(this,this.onPreloadComplete));
};
$hxClasses["lime.app.Application"] = lime_app_Application;
lime_app_Application.__name__ = "lime.app.Application";
lime_app_Application.__super__ = lime_app_Module;
lime_app_Application.prototype = $extend(lime_app_Module.prototype,{
	meta: null
	,modules: null
	,onUpdate: null
	,onCreateWindow: null
	,preloader: null
	,window: null
	,windows: null
	,__backend: null
	,__preloader: null
	,__window: null
	,__windowByID: null
	,__windows: null
	,addModule: function(module) {
		module.__registerLimeModule(this);
		this.modules.push(module);
	}
	,createWindow: function(attributes) {
		var $window = this.__createWindow(attributes);
		this.__addWindow($window);
		return $window;
	}
	,exec: function() {
		lime_app_Application.current = this;
		return this.__backend.exec();
	}
	,onGamepadAxisMove: function(gamepad,axis,value) {
	}
	,onGamepadButtonDown: function(gamepad,button) {
	}
	,onGamepadButtonUp: function(gamepad,button) {
	}
	,onGamepadConnect: function(gamepad) {
	}
	,onGamepadDisconnect: function(gamepad) {
	}
	,onJoystickAxisMove: function(joystick,axis,value) {
	}
	,onJoystickButtonDown: function(joystick,button) {
	}
	,onJoystickButtonUp: function(joystick,button) {
	}
	,onJoystickConnect: function(joystick) {
	}
	,onJoystickDisconnect: function(joystick) {
	}
	,onJoystickHatMove: function(joystick,hat,position) {
	}
	,onJoystickTrackballMove: function(joystick,trackball,x,y) {
	}
	,onKeyDown: function(keyCode,modifier) {
	}
	,onKeyUp: function(keyCode,modifier) {
	}
	,onModuleExit: function(code) {
	}
	,onMouseDown: function(x,y,button) {
	}
	,onMouseMove: function(x,y) {
	}
	,onMouseMoveRelative: function(x,y) {
	}
	,onMouseUp: function(x,y,button) {
	}
	,onMouseWheel: function(deltaX,deltaY,deltaMode) {
	}
	,onPreloadComplete: function() {
	}
	,onPreloadProgress: function(loaded,total) {
	}
	,onRenderContextLost: function() {
	}
	,onRenderContextRestored: function(context) {
	}
	,onTextEdit: function(text,start,length) {
	}
	,onTextInput: function(text) {
	}
	,onTouchCancel: function(touch) {
	}
	,onTouchEnd: function(touch) {
	}
	,onTouchMove: function(touch) {
	}
	,onTouchStart: function(touch) {
	}
	,onWindowActivate: function() {
	}
	,onWindowClose: function() {
	}
	,onWindowCreate: function() {
	}
	,onWindowDeactivate: function() {
	}
	,onWindowDropFile: function(file) {
	}
	,onWindowEnter: function() {
	}
	,onWindowExpose: function() {
	}
	,onWindowFocusIn: function() {
	}
	,onWindowFocusOut: function() {
	}
	,onWindowFullscreen: function() {
	}
	,onWindowLeave: function() {
	}
	,onWindowMove: function(x,y) {
	}
	,onWindowMinimize: function() {
	}
	,onWindowResize: function(width,height) {
	}
	,onWindowRestore: function() {
	}
	,removeModule: function(module) {
		if(module != null) {
			module.__unregisterLimeModule(this);
			HxOverrides.remove(this.modules,module);
		}
	}
	,render: function(context) {
	}
	,update: function(deltaTime) {
	}
	,__addWindow: function($window) {
		if($window != null) {
			this.__windows.push($window);
			this.__windowByID.h[$window.id] = $window;
			var _g = $bind(this,this.__onWindowClose);
			var window1 = $window;
			var tmp = function() {
				_g(window1);
			};
			$window.onClose.add(tmp,false,-10000);
			if(this.__window == null) {
				this.__window = $window;
				$window.onActivate.add($bind(this,this.onWindowActivate));
				$window.onRenderContextLost.add($bind(this,this.onRenderContextLost));
				$window.onRenderContextRestored.add($bind(this,this.onRenderContextRestored));
				$window.onDeactivate.add($bind(this,this.onWindowDeactivate));
				$window.onDropFile.add($bind(this,this.onWindowDropFile));
				$window.onEnter.add($bind(this,this.onWindowEnter));
				$window.onExpose.add($bind(this,this.onWindowExpose));
				$window.onFocusIn.add($bind(this,this.onWindowFocusIn));
				$window.onFocusOut.add($bind(this,this.onWindowFocusOut));
				$window.onFullscreen.add($bind(this,this.onWindowFullscreen));
				$window.onKeyDown.add($bind(this,this.onKeyDown));
				$window.onKeyUp.add($bind(this,this.onKeyUp));
				$window.onLeave.add($bind(this,this.onWindowLeave));
				$window.onMinimize.add($bind(this,this.onWindowMinimize));
				$window.onMouseDown.add($bind(this,this.onMouseDown));
				$window.onMouseMove.add($bind(this,this.onMouseMove));
				$window.onMouseMoveRelative.add($bind(this,this.onMouseMoveRelative));
				$window.onMouseUp.add($bind(this,this.onMouseUp));
				$window.onMouseWheel.add($bind(this,this.onMouseWheel));
				$window.onMove.add($bind(this,this.onWindowMove));
				$window.onRender.add($bind(this,this.render));
				$window.onResize.add($bind(this,this.onWindowResize));
				$window.onRestore.add($bind(this,this.onWindowRestore));
				$window.onTextEdit.add($bind(this,this.onTextEdit));
				$window.onTextInput.add($bind(this,this.onTextInput));
				this.onWindowCreate();
			}
			this.onCreateWindow.dispatch($window);
		}
	}
	,__createWindow: function(attributes) {
		var $window = new lime_ui_Window(this,attributes);
		if($window.id == -1) {
			return null;
		}
		return $window;
	}
	,__registerLimeModule: function(application) {
		application.onUpdate.add($bind(this,this.update));
		application.onExit.add($bind(this,this.onModuleExit),false,0);
		application.onExit.add($bind(this,this.__onModuleExit),false,0);
		var gamepad = lime_ui_Gamepad.devices.iterator();
		while(gamepad.hasNext()) {
			var gamepad1 = gamepad.next();
			this.__onGamepadConnect(gamepad1);
		}
		lime_ui_Gamepad.onConnect.add($bind(this,this.__onGamepadConnect));
		var joystick = lime_ui_Joystick.devices.iterator();
		while(joystick.hasNext()) {
			var joystick1 = joystick.next();
			this.__onJoystickConnect(joystick1);
		}
		lime_ui_Joystick.onConnect.add($bind(this,this.__onJoystickConnect));
		lime_ui_Touch.onCancel.add($bind(this,this.onTouchCancel));
		lime_ui_Touch.onStart.add($bind(this,this.onTouchStart));
		lime_ui_Touch.onMove.add($bind(this,this.onTouchMove));
		lime_ui_Touch.onEnd.add($bind(this,this.onTouchEnd));
	}
	,__removeWindow: function($window) {
		if($window != null && this.__windowByID.h.hasOwnProperty($window.id)) {
			if(this.__window == $window) {
				this.__window = null;
			}
			HxOverrides.remove(this.__windows,$window);
			this.__windowByID.remove($window.id);
			$window.close();
			if(this.__windows.length == 0) {
				lime_system_System.exit(0);
			}
		}
	}
	,__onGamepadConnect: function(gamepad) {
		this.onGamepadConnect(gamepad);
		var _g = $bind(this,this.onGamepadAxisMove);
		var gamepad1 = gamepad;
		var tmp = function(axis,value) {
			_g(gamepad1,axis,value);
		};
		gamepad.onAxisMove.add(tmp);
		var _g1 = $bind(this,this.onGamepadButtonDown);
		var gamepad2 = gamepad;
		var tmp = function(button) {
			_g1(gamepad2,button);
		};
		gamepad.onButtonDown.add(tmp);
		var _g2 = $bind(this,this.onGamepadButtonUp);
		var gamepad3 = gamepad;
		var tmp = function(button) {
			_g2(gamepad3,button);
		};
		gamepad.onButtonUp.add(tmp);
		var _g3 = $bind(this,this.onGamepadDisconnect);
		var gamepad4 = gamepad;
		var tmp = function() {
			_g3(gamepad4);
		};
		gamepad.onDisconnect.add(tmp);
	}
	,__onJoystickConnect: function(joystick) {
		this.onJoystickConnect(joystick);
		var _g = $bind(this,this.onJoystickAxisMove);
		var joystick1 = joystick;
		var tmp = function(axis,value) {
			_g(joystick1,axis,value);
		};
		joystick.onAxisMove.add(tmp);
		var _g1 = $bind(this,this.onJoystickButtonDown);
		var joystick2 = joystick;
		var tmp = function(button) {
			_g1(joystick2,button);
		};
		joystick.onButtonDown.add(tmp);
		var _g2 = $bind(this,this.onJoystickButtonUp);
		var joystick3 = joystick;
		var tmp = function(button) {
			_g2(joystick3,button);
		};
		joystick.onButtonUp.add(tmp);
		var _g3 = $bind(this,this.onJoystickDisconnect);
		var joystick4 = joystick;
		var tmp = function() {
			_g3(joystick4);
		};
		joystick.onDisconnect.add(tmp);
		var _g4 = $bind(this,this.onJoystickHatMove);
		var joystick5 = joystick;
		var tmp = function(hat,position) {
			_g4(joystick5,hat,position);
		};
		joystick.onHatMove.add(tmp);
		var _g5 = $bind(this,this.onJoystickTrackballMove);
		var joystick6 = joystick;
		var tmp = function(trackball,x,y) {
			_g5(joystick6,trackball,x,y);
		};
		joystick.onTrackballMove.add(tmp);
	}
	,__onModuleExit: function(code) {
		this.__backend.exit();
	}
	,__onWindowClose: function($window) {
		if(this.__window == $window) {
			this.onWindowClose();
		}
		this.__removeWindow($window);
	}
	,__unregisterLimeModule: function(application) {
		application.onUpdate.remove($bind(this,this.update));
		application.onExit.remove($bind(this,this.__onModuleExit));
		application.onExit.remove($bind(this,this.onModuleExit));
		lime_ui_Gamepad.onConnect.remove($bind(this,this.__onGamepadConnect));
		lime_ui_Joystick.onConnect.remove($bind(this,this.__onJoystickConnect));
		lime_ui_Touch.onCancel.remove($bind(this,this.onTouchCancel));
		lime_ui_Touch.onStart.remove($bind(this,this.onTouchStart));
		lime_ui_Touch.onMove.remove($bind(this,this.onTouchMove));
		lime_ui_Touch.onEnd.remove($bind(this,this.onTouchEnd));
		this.onModuleExit(0);
	}
	,get_preloader: function() {
		return this.__preloader;
	}
	,get_window: function() {
		return this.__window;
	}
	,get_windows: function() {
		return this.__windows;
	}
	,__class__: lime_app_Application
	,__properties__: {get_windows:"get_windows",get_window:"get_window",get_preloader:"get_preloader"}
});
var ApplicationMain = function() { };
$hxClasses["ApplicationMain"] = ApplicationMain;
ApplicationMain.__name__ = "ApplicationMain";
ApplicationMain.main = function() {
	lime_system_System.__registerEntryPoint("ZYGameEngineHaxe",ApplicationMain.create);
};
ApplicationMain.create = function(config) {
	var app = new openfl_display_Application();
	ManifestResources.init(config);
	app.meta.h["build"] = "3";
	app.meta.h["company"] = "";
	app.meta.h["file"] = "ZYGameEngineHaxe";
	app.meta.h["name"] = "MyApplication";
	app.meta.h["packageName"] = "com.example.myapp";
	app.meta.h["version"] = "1.0.0";
	var attributes = { allowHighDPI : true, alwaysOnTop : false, borderless : false, element : null, frameRate : 60, height : 0, hidden : false, maximized : false, minimized : false, parameters : { }, resizable : true, title : "MyApplication", width : 0, x : null, y : null};
	attributes.context = { antialiasing : 0, background : 16777215, colorDepth : 32, depth : true, hardware : true, stencil : true, type : null, vsync : true};
	if(app.__window == null) {
		if(config != null) {
			var _g = 0;
			var _g1 = Reflect.fields(config);
			while(_g < _g1.length) {
				var field = _g1[_g];
				++_g;
				if(Object.prototype.hasOwnProperty.call(attributes,field)) {
					attributes[field] = Reflect.field(config,field);
				} else if(Object.prototype.hasOwnProperty.call(attributes.context,field)) {
					attributes.context[field] = Reflect.field(config,field);
				}
			}
		}
	}
	app.createWindow(attributes);
	var preloader = new openfl_display_Preloader(new openfl_display_DefaultPreloader());
	app.__preloader.onProgress.add(function(loaded,total) {
		preloader.update(loaded,total);
	});
	app.__preloader.onComplete.add(function() {
		preloader.start();
	});
	var stage = (js_Boot.__cast(app.__window , openfl_display_Window)).stage;
	var tmp = function() {
		ApplicationMain.start(stage);
	};
	preloader.onComplete.add(tmp);
	var _g = 0;
	var _g1 = ManifestResources.preloadLibraries;
	while(_g < _g1.length) {
		var library = _g1[_g];
		++_g;
		app.__preloader.addLibrary(library);
	}
	var _g = 0;
	var _g1 = ManifestResources.preloadLibraryNames;
	while(_g < _g1.length) {
		var name = _g1[_g];
		++_g;
		app.__preloader.addLibraryName(name);
	}
	app.__preloader.load();
	var result = app.exec();
};
ApplicationMain.start = function(stage) {
	try {
		var current = stage.getChildAt(0);
		if(current == null || !((current) instanceof openfl_display_DisplayObjectContainer)) {
			current = new openfl_display_MovieClip();
			stage.addChild(current);
		}
		new DocumentClass(current);
		stage.dispatchEvent(new openfl_events_Event("resize",false,false));
		if(stage.window.__fullscreen) {
			stage.dispatchEvent(new openfl_events_FullScreenEvent("fullScreen",false,false,true,true));
		}
	} catch( _g ) {
		haxe_NativeStackTrace.lastError = _g;
		var e = haxe_Exception.caught(_g).unwrap();
		stage.__handleError(e);
	}
};
var openfl_events_IEventDispatcher = function() { };
$hxClasses["openfl.events.IEventDispatcher"] = openfl_events_IEventDispatcher;
openfl_events_IEventDispatcher.__name__ = "openfl.events.IEventDispatcher";
openfl_events_IEventDispatcher.__isInterface__ = true;
openfl_events_IEventDispatcher.prototype = {
	addEventListener: null
	,dispatchEvent: null
	,hasEventListener: null
	,removeEventListener: null
	,willTrigger: null
	,__class__: openfl_events_IEventDispatcher
};
var openfl_events_EventDispatcher = function(target) {
	if(target != null) {
		this.__targetDispatcher = target;
	}
};
$hxClasses["openfl.events.EventDispatcher"] = openfl_events_EventDispatcher;
openfl_events_EventDispatcher.__name__ = "openfl.events.EventDispatcher";
openfl_events_EventDispatcher.__interfaces__ = [openfl_events_IEventDispatcher];
openfl_events_EventDispatcher.prototype = {
	__eventMap: null
	,__iterators: null
	,__targetDispatcher: null
	,addEventListener: function(type,listener,useCapture,priority,useWeakReference) {
		if(useWeakReference == null) {
			useWeakReference = false;
		}
		if(priority == null) {
			priority = 0;
		}
		if(useCapture == null) {
			useCapture = false;
		}
		if(listener == null) {
			return;
		}
		if(this.__eventMap == null) {
			this.__eventMap = new haxe_ds_StringMap();
			this.__iterators = new haxe_ds_StringMap();
		}
		if(!Object.prototype.hasOwnProperty.call(this.__eventMap.h,type)) {
			var list = [];
			list.push(new openfl_events__$EventDispatcher_Listener(listener,useCapture,priority));
			var iterator = new openfl_events__$EventDispatcher_DispatchIterator(list);
			this.__eventMap.h[type] = list;
			this.__iterators.h[type] = [iterator];
		} else {
			var list = this.__eventMap.h[type];
			var _g = 0;
			var _g1 = list.length;
			while(_g < _g1) {
				var i = _g++;
				if(list[i].match(listener,useCapture)) {
					return;
				}
			}
			var iterators = this.__iterators.h[type];
			var _g = 0;
			while(_g < iterators.length) {
				var iterator = iterators[_g];
				++_g;
				if(iterator.active) {
					iterator.copy();
				}
			}
			this.__addListenerByPriority(list,new openfl_events__$EventDispatcher_Listener(listener,useCapture,priority));
		}
	}
	,dispatchEvent: function(event) {
		if(this.__targetDispatcher != null) {
			event.target = this.__targetDispatcher;
		} else {
			event.target = this;
		}
		return this.__dispatchEvent(event);
	}
	,hasEventListener: function(type) {
		if(this.__eventMap == null) {
			return false;
		}
		return Object.prototype.hasOwnProperty.call(this.__eventMap.h,type);
	}
	,removeEventListener: function(type,listener,useCapture) {
		if(useCapture == null) {
			useCapture = false;
		}
		if(this.__eventMap == null || listener == null) {
			return;
		}
		var list = this.__eventMap.h[type];
		if(list == null) {
			return;
		}
		var iterators = this.__iterators.h[type];
		var _g = 0;
		var _g1 = list.length;
		while(_g < _g1) {
			var i = _g++;
			if(list[i].match(listener,useCapture)) {
				var _g2 = 0;
				while(_g2 < iterators.length) {
					var iterator = iterators[_g2];
					++_g2;
					iterator.remove(list[i],i);
				}
				list.splice(i,1);
				break;
			}
		}
		if(list.length == 0) {
			var _this = this.__eventMap;
			if(Object.prototype.hasOwnProperty.call(_this.h,type)) {
				delete(_this.h[type]);
			}
			var _this = this.__iterators;
			if(Object.prototype.hasOwnProperty.call(_this.h,type)) {
				delete(_this.h[type]);
			}
		}
		if(!haxe_ds_StringMap.valueIterator(this.__eventMap.h).hasNext()) {
			this.__eventMap = null;
			this.__iterators = null;
		}
	}
	,toString: function() {
		var c = js_Boot.getClass(this);
		var full = c.__name__;
		var short = full.split(".").pop();
		return "[object " + short + "]";
	}
	,willTrigger: function(type) {
		return this.hasEventListener(type);
	}
	,__dispatchEvent: function(event) {
		if(this.__eventMap == null || event == null) {
			return true;
		}
		var type = event.type;
		var list = this.__eventMap.h[type];
		if(list == null) {
			return true;
		}
		if(event.target == null) {
			if(this.__targetDispatcher != null) {
				event.target = this.__targetDispatcher;
			} else {
				event.target = this;
			}
		}
		event.currentTarget = this;
		var capture = event.eventPhase == 1;
		var iterators = this.__iterators.h[type];
		var iterator = iterators[0];
		if(iterator.active) {
			iterator = new openfl_events__$EventDispatcher_DispatchIterator(list);
			iterators.push(iterator);
		}
		iterator.start();
		var listener = iterator;
		while(listener.hasNext()) {
			var listener1 = listener.next();
			if(listener1 == null) {
				continue;
			}
			if(listener1.useCapture == capture) {
				listener1.callback(event);
				if(event.__isCanceledNow) {
					break;
				}
			}
		}
		iterator.stop();
		if(iterator != iterators[0]) {
			HxOverrides.remove(iterators,iterator);
		} else {
			iterator.reset(list);
		}
		return !event.isDefaultPrevented();
	}
	,__removeAllListeners: function() {
		this.__eventMap = null;
		this.__iterators = null;
	}
	,__addListenerByPriority: function(list,listener) {
		var numElements = list.length;
		var addAtPosition = numElements;
		var _g = 0;
		var _g1 = numElements;
		while(_g < _g1) {
			var i = _g++;
			if(list[i].priority < listener.priority) {
				addAtPosition = i;
				break;
			}
		}
		list.splice(addAtPosition,0,listener);
	}
	,__class__: openfl_events_EventDispatcher
};
var openfl_display_IBitmapDrawable = function() { };
$hxClasses["openfl.display.IBitmapDrawable"] = openfl_display_IBitmapDrawable;
openfl_display_IBitmapDrawable.__name__ = "openfl.display.IBitmapDrawable";
openfl_display_IBitmapDrawable.__isInterface__ = true;
openfl_display_IBitmapDrawable.prototype = {
	__blendMode: null
	,__isMask: null
	,__renderable: null
	,__renderTransform: null
	,__transform: null
	,__worldAlpha: null
	,__worldColorTransform: null
	,__worldTransform: null
	,__getBounds: null
	,__renderCairo: null
	,__renderCairoMask: null
	,__renderCanvas: null
	,__renderCanvasMask: null
	,__renderDOM: null
	,__renderGL: null
	,__renderGLMask: null
	,__update: null
	,__updateTransforms: null
	,__mask: null
	,__scrollRect: null
	,__class__: openfl_display_IBitmapDrawable
};
var openfl_Vector = {};
openfl_Vector.__properties__ = {set_length:"set_length",get_length:"get_length",set_fixed:"set_fixed",get_fixed:"get_fixed"};
openfl_Vector.concat = function(this1,vec) {
	return this1.concat(vec);
};
openfl_Vector.copy = function(this1) {
	return this1.copy();
};
openfl_Vector.filter = function(this1,callback) {
	return this1.filter(callback);
};
openfl_Vector.get = function(this1,index) {
	return this1.get(index);
};
openfl_Vector.indexOf = function(this1,searchElement,fromIndex) {
	if(fromIndex == null) {
		fromIndex = 0;
	}
	return this1.indexOf(searchElement,fromIndex);
};
openfl_Vector.insertAt = function(this1,index,element) {
	this1.insertAt(index,element);
};
openfl_Vector.iterator = function(this1) {
	return this1.iterator();
};
openfl_Vector.join = function(this1,sep) {
	if(sep == null) {
		sep = ",";
	}
	return this1.join(sep);
};
openfl_Vector.lastIndexOf = function(this1,searchElement,fromIndex) {
	return this1.lastIndexOf(searchElement,fromIndex);
};
openfl_Vector.pop = function(this1) {
	return this1.pop();
};
openfl_Vector.push = function(this1,value) {
	return this1.push(value);
};
openfl_Vector.removeAt = function(this1,index) {
	return this1.removeAt(index);
};
openfl_Vector.reverse = function(this1) {
	return this1.reverse();
};
openfl_Vector.set = function(this1,index,value) {
	return this1.set(index,value);
};
openfl_Vector.shift = function(this1) {
	return this1.shift();
};
openfl_Vector.slice = function(this1,startIndex,endIndex) {
	if(startIndex == null) {
		startIndex = 0;
	}
	return this1.slice(startIndex,endIndex);
};
openfl_Vector.sort = function(this1,sortBehavior) {
	this1.sort(sortBehavior);
};
openfl_Vector.splice = function(this1,startIndex,deleteCount) {
	return this1.splice(startIndex,deleteCount);
};
openfl_Vector.toString = function(this1) {
	if(this1 != null) {
		return this1.toString();
	} else {
		return null;
	}
};
openfl_Vector.unshift = function(this1,value) {
	this1.unshift(value);
};
openfl_Vector.convert = function(vec) {
	return vec;
};
openfl_Vector.toBoolVector = function(t,length,fixed,array) {
	return new openfl__$Vector_BoolVector(length,fixed,array);
};
openfl_Vector.toIntVector = function(t,length,fixed,array) {
	return new openfl__$Vector_IntVector(length,fixed,array);
};
openfl_Vector.toFloatVector = function(t,length,fixed,array) {
	return new openfl__$Vector_FloatVector(length,fixed,array,true);
};
openfl_Vector.toFunctionVector = function(t,length,fixed,array) {
	return new openfl__$Vector_FunctionVector(length,fixed,array);
};
openfl_Vector.toObjectVector = function(t,length,fixed,array) {
	return new openfl__$Vector_ObjectVector(length,fixed,array,true);
};
openfl_Vector.toNullVector = function(t,length,fixed,array) {
	return new openfl__$Vector_ObjectVector(length,fixed,array,true);
};
openfl_Vector.fromBoolVector = function(vector) {
	return vector;
};
openfl_Vector.fromIntVector = function(vector) {
	return vector;
};
openfl_Vector.fromFloatVector = function(vector) {
	return vector;
};
openfl_Vector.fromFunctionVector = function(vector) {
	return vector;
};
openfl_Vector.fromObjectVector = function(vector) {
	return vector;
};
openfl_Vector.get_fixed = function(this1) {
	return this1.fixed;
};
openfl_Vector.set_fixed = function(this1,value) {
	return this1.fixed = value;
};
openfl_Vector.get_length = function(this1) {
	return this1.get_length();
};
openfl_Vector.set_length = function(this1,value) {
	return this1.set_length(value);
};
var lime_utils_ObjectPool = function(create,clean,size) {
	this.__pool = new haxe_ds_ObjectMap();
	this.activeObjects = 0;
	this.inactiveObjects = 0;
	this.__inactiveObject0 = null;
	this.__inactiveObject1 = null;
	this.__inactiveObjectList = new haxe_ds_List();
	if(create != null) {
		this.create = create;
	}
	if(clean != null) {
		this.clean = clean;
	}
	if(size != null) {
		this.set_size(size);
	}
};
$hxClasses["lime.utils.ObjectPool"] = lime_utils_ObjectPool;
lime_utils_ObjectPool.__name__ = "lime.utils.ObjectPool";
lime_utils_ObjectPool.prototype = {
	activeObjects: null
	,inactiveObjects: null
	,__inactiveObject0: null
	,__inactiveObject1: null
	,__inactiveObjectList: null
	,__pool: null
	,__size: null
	,add: function(object) {
		if(!this.__pool.exists(object)) {
			this.__pool.set(object,false);
			this.clean(object);
			if(this.__inactiveObject0 == null) {
				this.__inactiveObject0 = object;
			} else if(this.__inactiveObject1 == null) {
				this.__inactiveObject1 = object;
			} else {
				this.__inactiveObjectList.add(object);
			}
			this.inactiveObjects++;
		}
	}
	,clean: function(object) {
	}
	,clear: function() {
		this.__pool = new haxe_ds_ObjectMap();
		this.activeObjects = 0;
		this.inactiveObjects = 0;
		this.__inactiveObject0 = null;
		this.__inactiveObject1 = null;
		this.__inactiveObjectList.clear();
	}
	,create: function() {
		return null;
	}
	,get: function() {
		var object = null;
		if(this.inactiveObjects > 0) {
			var object1 = null;
			if(this.__inactiveObject0 != null) {
				object1 = this.__inactiveObject0;
				this.__inactiveObject0 = null;
			} else if(this.__inactiveObject1 != null) {
				object1 = this.__inactiveObject1;
				this.__inactiveObject1 = null;
			} else {
				object1 = this.__inactiveObjectList.pop();
				if(this.__inactiveObjectList.length > 0) {
					this.__inactiveObject0 = this.__inactiveObjectList.pop();
				}
				if(this.__inactiveObjectList.length > 0) {
					this.__inactiveObject1 = this.__inactiveObjectList.pop();
				}
			}
			this.inactiveObjects--;
			this.activeObjects++;
			object = object1;
		} else if(this.__size == null || this.activeObjects < this.__size) {
			object = this.create();
			if(object != null) {
				this.__pool.set(object,true);
				this.activeObjects++;
			}
		}
		return object;
	}
	,release: function(object) {
		this.activeObjects--;
		if(this.__size == null || this.activeObjects + this.inactiveObjects < this.__size) {
			this.clean(object);
			if(this.__inactiveObject0 == null) {
				this.__inactiveObject0 = object;
			} else if(this.__inactiveObject1 == null) {
				this.__inactiveObject1 = object;
			} else {
				this.__inactiveObjectList.add(object);
			}
			this.inactiveObjects++;
		} else {
			this.__pool.remove(object);
		}
	}
	,remove: function(object) {
		if(this.__pool.exists(object)) {
			this.__pool.remove(object);
			if(this.__inactiveObject0 == object) {
				this.__inactiveObject0 = null;
				this.inactiveObjects--;
			} else if(this.__inactiveObject1 == object) {
				this.__inactiveObject1 = null;
				this.inactiveObjects--;
			} else if(this.__inactiveObjectList.remove(object)) {
				this.inactiveObjects--;
			} else {
				this.activeObjects--;
			}
		}
	}
	,__addInactive: function(object) {
		if(this.__inactiveObject0 == null) {
			this.__inactiveObject0 = object;
		} else if(this.__inactiveObject1 == null) {
			this.__inactiveObject1 = object;
		} else {
			this.__inactiveObjectList.add(object);
		}
		this.inactiveObjects++;
	}
	,__getInactive: function() {
		var object = null;
		if(this.__inactiveObject0 != null) {
			object = this.__inactiveObject0;
			this.__inactiveObject0 = null;
		} else if(this.__inactiveObject1 != null) {
			object = this.__inactiveObject1;
			this.__inactiveObject1 = null;
		} else {
			object = this.__inactiveObjectList.pop();
			if(this.__inactiveObjectList.length > 0) {
				this.__inactiveObject0 = this.__inactiveObjectList.pop();
			}
			if(this.__inactiveObjectList.length > 0) {
				this.__inactiveObject1 = this.__inactiveObjectList.pop();
			}
		}
		this.inactiveObjects--;
		this.activeObjects++;
		return object;
	}
	,__removeInactive: function(count) {
		if(count <= 0 || this.inactiveObjects == 0) {
			return;
		}
		if(this.__inactiveObject0 != null) {
			this.__pool.remove(this.__inactiveObject0);
			this.__inactiveObject0 = null;
			this.inactiveObjects--;
			--count;
		}
		if(count == 0 || this.inactiveObjects == 0) {
			return;
		}
		if(this.__inactiveObject1 != null) {
			this.__pool.remove(this.__inactiveObject1);
			this.__inactiveObject1 = null;
			this.inactiveObjects--;
			--count;
		}
		if(count == 0 || this.inactiveObjects == 0) {
			return;
		}
		var _g_head = this.__inactiveObjectList.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var object = val;
			this.__pool.remove(object);
			this.__inactiveObjectList.remove(object);
			this.inactiveObjects--;
			--count;
			if(count == 0 || this.inactiveObjects == 0) {
				return;
			}
		}
	}
	,get_size: function() {
		return this.__size;
	}
	,set_size: function(value) {
		if(value == null) {
			this.__size = null;
		} else {
			var current = this.inactiveObjects + this.activeObjects;
			this.__size = value;
			if(current > value) {
				this.__removeInactive(current - value);
			} else if(value > current) {
				var object;
				var _g = 0;
				var _g1 = value - current;
				while(_g < _g1) {
					var i = _g++;
					object = this.create();
					if(object != null) {
						this.__pool.set(object,false);
						this.__inactiveObjectList.add(object);
						this.inactiveObjects++;
					} else {
						break;
					}
				}
			}
		}
		return value;
	}
	,__class__: lime_utils_ObjectPool
	,__properties__: {set_size:"set_size",get_size:"get_size"}
};
var haxe_IMap = function() { };
$hxClasses["haxe.IMap"] = haxe_IMap;
haxe_IMap.__name__ = "haxe.IMap";
haxe_IMap.__isInterface__ = true;
haxe_IMap.prototype = {
	get: null
	,set: null
	,exists: null
	,remove: null
	,keys: null
	,iterator: null
	,keyValueIterator: null
	,__class__: haxe_IMap
};
var haxe_ds_ObjectMap = function() {
	this.h = { __keys__ : { }};
};
$hxClasses["haxe.ds.ObjectMap"] = haxe_ds_ObjectMap;
haxe_ds_ObjectMap.__name__ = "haxe.ds.ObjectMap";
haxe_ds_ObjectMap.__interfaces__ = [haxe_IMap];
haxe_ds_ObjectMap.prototype = {
	h: null
	,set: function(key,value) {
		var id = key.__id__;
		if(id == null) {
			id = (key.__id__ = $global.$haxeUID++);
		}
		this.h[id] = value;
		this.h.__keys__[id] = key;
	}
	,get: function(key) {
		return this.h[key.__id__];
	}
	,exists: function(key) {
		return this.h.__keys__[key.__id__] != null;
	}
	,remove: function(key) {
		var id = key.__id__;
		if(this.h.__keys__[id] == null) {
			return false;
		}
		delete(this.h[id]);
		delete(this.h.__keys__[id]);
		return true;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h.__keys__ ) {
		if(this.h.hasOwnProperty(key)) {
			a.push(this.h.__keys__[key]);
		}
		}
		return new haxe_iterators_ArrayIterator(a);
	}
	,iterator: function() {
		return { ref : this.h, it : this.keys(), hasNext : function() {
			return this.it.hasNext();
		}, next : function() {
			var i = this.it.next();
			return this.ref[i.__id__];
		}};
	}
	,keyValueIterator: function() {
		return new haxe_iterators_MapKeyValueIterator(this);
	}
	,toString: function() {
		var s_b = "";
		s_b += "{";
		var it = this.keys();
		var i = it;
		while(i.hasNext()) {
			var i1 = i.next();
			s_b += Std.string(Std.string(i1));
			s_b += " => ";
			s_b += Std.string(Std.string(this.h[i1.__id__]));
			if(it.hasNext()) {
				s_b += ", ";
			}
		}
		s_b += "}";
		return s_b;
	}
	,__class__: haxe_ds_ObjectMap
};
var haxe_ds_List = function() {
	this.length = 0;
};
$hxClasses["haxe.ds.List"] = haxe_ds_List;
haxe_ds_List.__name__ = "haxe.ds.List";
haxe_ds_List.prototype = {
	h: null
	,q: null
	,length: null
	,add: function(item) {
		var x = new haxe_ds__$List_ListNode(item,null);
		if(this.h == null) {
			this.h = x;
		} else {
			this.q.next = x;
		}
		this.q = x;
		this.length++;
	}
	,push: function(item) {
		var x = new haxe_ds__$List_ListNode(item,this.h);
		this.h = x;
		if(this.q == null) {
			this.q = x;
		}
		this.length++;
	}
	,pop: function() {
		if(this.h == null) {
			return null;
		}
		var x = this.h.item;
		this.h = this.h.next;
		if(this.h == null) {
			this.q = null;
		}
		this.length--;
		return x;
	}
	,clear: function() {
		this.h = null;
		this.q = null;
		this.length = 0;
	}
	,remove: function(v) {
		var prev = null;
		var l = this.h;
		while(l != null) {
			if(l.item == v) {
				if(prev == null) {
					this.h = l.next;
				} else {
					prev.next = l.next;
				}
				if(this.q == l) {
					this.q = prev;
				}
				this.length--;
				return true;
			}
			prev = l;
			l = l.next;
		}
		return false;
	}
	,iterator: function() {
		return new haxe_ds__$List_ListIterator(this.h);
	}
	,__class__: haxe_ds_List
};
var openfl_display_DisplayObject = function() {
	openfl_events_EventDispatcher.call(this);
	this.__alpha = 1;
	this.__blendMode = 10;
	this.__cacheAsBitmap = false;
	this.__transform = new openfl_geom_Matrix();
	this.__visible = true;
	this.__rotation = 0;
	this.__rotationSine = 0;
	this.__rotationCosine = 1;
	this.__scaleX = 1;
	this.__scaleY = 1;
	this.__worldAlpha = 1;
	this.__worldBlendMode = 10;
	this.__worldTransform = new openfl_geom_Matrix();
	this.__worldColorTransform = new openfl_geom_ColorTransform();
	this.__renderTransform = new openfl_geom_Matrix();
	this.__worldVisible = true;
	this.set_name("instance" + ++openfl_display_DisplayObject.__instanceCount);
	if(openfl_display_DisplayObject.__initStage != null) {
		this.stage = openfl_display_DisplayObject.__initStage;
		openfl_display_DisplayObject.__initStage = null;
		this.stage.addChild(this);
	}
};
$hxClasses["openfl.display.DisplayObject"] = openfl_display_DisplayObject;
openfl_display_DisplayObject.__name__ = "openfl.display.DisplayObject";
openfl_display_DisplayObject.__interfaces__ = [openfl_display_IBitmapDrawable];
openfl_display_DisplayObject.__calculateAbsoluteTransform = function(local,parentTransform,target) {
	target.a = local.a * parentTransform.a + local.b * parentTransform.c;
	target.b = local.a * parentTransform.b + local.b * parentTransform.d;
	target.c = local.c * parentTransform.a + local.d * parentTransform.c;
	target.d = local.c * parentTransform.b + local.d * parentTransform.d;
	target.tx = local.tx * parentTransform.a + local.ty * parentTransform.c + parentTransform.tx;
	target.ty = local.tx * parentTransform.b + local.ty * parentTransform.d + parentTransform.ty;
};
openfl_display_DisplayObject.__super__ = openfl_events_EventDispatcher;
openfl_display_DisplayObject.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	opaqueBackground: null
	,parent: null
	,stage: null
	,__alpha: null
	,__blendMode: null
	,__cacheAsBitmap: null
	,__cacheAsBitmapMatrix: null
	,__cacheBitmap: null
	,__cacheBitmapBackground: null
	,__cacheBitmapColorTransform: null
	,__cacheBitmapData: null
	,__cacheBitmapData2: null
	,__cacheBitmapData3: null
	,__cacheBitmapMatrix: null
	,__cacheBitmapRenderer: null
	,__cairo: null
	,__children: null
	,__customRenderClear: null
	,__customRenderEvent: null
	,__filters: null
	,__graphics: null
	,__interactive: null
	,__isCacheBitmapRender: null
	,__isMask: null
	,__loaderInfo: null
	,__mask: null
	,__maskTarget: null
	,__name: null
	,__objectTransform: null
	,__renderable: null
	,__renderDirty: null
	,__renderParent: null
	,__renderTransform: null
	,__renderTransformCache: null
	,__renderTransformChanged: null
	,__rotation: null
	,__rotationCosine: null
	,__rotationSine: null
	,__scale9Grid: null
	,__scaleX: null
	,__scaleY: null
	,__scrollRect: null
	,__shader: null
	,__tempPoint: null
	,__transform: null
	,__transformDirty: null
	,__visible: null
	,__worldAlpha: null
	,__worldAlphaChanged: null
	,__worldBlendMode: null
	,__worldClip: null
	,__worldClipChanged: null
	,__worldColorTransform: null
	,__worldShader: null
	,__worldScale9Grid: null
	,__worldTransform: null
	,__worldVisible: null
	,__worldVisibleChanged: null
	,__worldTransformInvalid: null
	,__worldZ: null
	,__canvas: null
	,__context: null
	,__style: null
	,addEventListener: function(type,listener,useCapture,priority,useWeakReference) {
		if(useWeakReference == null) {
			useWeakReference = false;
		}
		if(priority == null) {
			priority = 0;
		}
		if(useCapture == null) {
			useCapture = false;
		}
		switch(type) {
		case "activate":case "deactivate":case "enterFrame":case "exitFrame":case "frameConstructed":case "render":
			if(!Object.prototype.hasOwnProperty.call(openfl_display_DisplayObject.__broadcastEvents.h,type)) {
				openfl_display_DisplayObject.__broadcastEvents.h[type] = [];
			}
			var dispatchers = openfl_display_DisplayObject.__broadcastEvents.h[type];
			if(dispatchers.indexOf(this) == -1) {
				dispatchers.push(this);
			}
			break;
		case "clearDOM":case "renderCairo":case "renderCanvas":case "renderDOM":case "renderOpenGL":
			if(this.__customRenderEvent == null) {
				this.__customRenderEvent = new openfl_events_RenderEvent(null);
				this.__customRenderEvent.objectColorTransform = new openfl_geom_ColorTransform();
				this.__customRenderEvent.objectMatrix = new openfl_geom_Matrix();
				this.__customRenderClear = true;
			}
			break;
		default:
		}
		openfl_events_EventDispatcher.prototype.addEventListener.call(this,type,listener,useCapture,priority,useWeakReference);
	}
	,dispatchEvent: function(event) {
		if(((event) instanceof openfl_events_MouseEvent)) {
			var mouseEvent = event;
			var _this = this.__getRenderTransform();
			mouseEvent.stageX = mouseEvent.localX * _this.a + mouseEvent.localY * _this.c + _this.tx;
			var _this = this.__getRenderTransform();
			mouseEvent.stageY = mouseEvent.localX * _this.b + mouseEvent.localY * _this.d + _this.ty;
		} else if(((event) instanceof openfl_events_TouchEvent)) {
			var touchEvent = event;
			var _this = this.__getRenderTransform();
			touchEvent.stageX = touchEvent.localX * _this.a + touchEvent.localY * _this.c + _this.tx;
			var _this = this.__getRenderTransform();
			touchEvent.stageY = touchEvent.localX * _this.b + touchEvent.localY * _this.d + _this.ty;
		}
		event.target = this;
		return this.__dispatchWithCapture(event);
	}
	,getBounds: function(targetCoordinateSpace) {
		var matrix = openfl_geom_Matrix.__pool.get();
		if(targetCoordinateSpace != null && targetCoordinateSpace != this) {
			matrix.copyFrom(this.__getWorldTransform());
			var targetMatrix = openfl_geom_Matrix.__pool.get();
			targetMatrix.copyFrom(targetCoordinateSpace.__getWorldTransform());
			targetMatrix.invert();
			matrix.concat(targetMatrix);
			openfl_geom_Matrix.__pool.release(targetMatrix);
		} else {
			matrix.identity();
		}
		var bounds = new openfl_geom_Rectangle();
		this.__getBounds(bounds,matrix);
		openfl_geom_Matrix.__pool.release(matrix);
		return bounds;
	}
	,getRect: function(targetCoordinateSpace) {
		return this.getBounds(targetCoordinateSpace);
	}
	,globalToLocal: function(pos) {
		return this.__globalToLocal(pos,new openfl_geom_Point());
	}
	,hitTestObject: function(obj) {
		if(obj != null && obj.parent != null && this.parent != null) {
			var currentBounds = this.getBounds(this);
			var targetBounds = obj.getBounds(this);
			return currentBounds.intersects(targetBounds);
		}
		return false;
	}
	,hitTestPoint: function(x,y,shapeFlag) {
		if(shapeFlag == null) {
			shapeFlag = false;
		}
		if(this.stage != null) {
			return this.__hitTest(x,y,shapeFlag,null,false,this);
		} else {
			return false;
		}
	}
	,invalidate: function() {
		if(!this.__renderDirty) {
			this.__renderDirty = true;
			this.__setParentRenderDirty();
		}
	}
	,localToGlobal: function(point) {
		return this.__getRenderTransform().transformPoint(point);
	}
	,removeEventListener: function(type,listener,useCapture) {
		if(useCapture == null) {
			useCapture = false;
		}
		openfl_events_EventDispatcher.prototype.removeEventListener.call(this,type,listener,useCapture);
		switch(type) {
		case "activate":case "deactivate":case "enterFrame":case "exitFrame":case "frameConstructed":case "render":
			if(!this.hasEventListener(type)) {
				if(Object.prototype.hasOwnProperty.call(openfl_display_DisplayObject.__broadcastEvents.h,type)) {
					HxOverrides.remove(openfl_display_DisplayObject.__broadcastEvents.h[type],this);
				}
			}
			break;
		case "clearDOM":case "renderCairo":case "renderCanvas":case "renderDOM":case "renderOpenGL":
			if(!this.hasEventListener("clearDOM") && !this.hasEventListener("renderCairo") && !this.hasEventListener("renderCanvas") && !this.hasEventListener("renderDOM") && !this.hasEventListener("renderOpenGL")) {
				this.__customRenderEvent = null;
			}
			break;
		default:
		}
	}
	,__cleanup: function() {
		this.__cairo = null;
		this.__canvas = null;
		this.__context = null;
		if(this.__graphics != null) {
			this.__graphics.__cleanup();
		}
		if(this.__cacheBitmap != null) {
			this.__cacheBitmap.__cleanup();
			this.__cacheBitmap = null;
		}
		if(this.__cacheBitmapData != null) {
			this.__cacheBitmapData.dispose();
			this.__cacheBitmapData = null;
		}
	}
	,__dispatch: function(event) {
		if(this.__eventMap != null && this.hasEventListener(event.type)) {
			var result = openfl_events_EventDispatcher.prototype.__dispatchEvent.call(this,event);
			if(event.__isCanceled) {
				return true;
			}
			return result;
		}
		return true;
	}
	,__dispatchChildren: function(event) {
	}
	,__dispatchEvent: function(event) {
		var parent = event.bubbles ? this.parent : null;
		var result = openfl_events_EventDispatcher.prototype.__dispatchEvent.call(this,event);
		if(event.__isCanceled) {
			return true;
		}
		if(parent != null && parent != this) {
			event.eventPhase = 3;
			if(event.target == null) {
				event.target = this;
			}
			parent.__dispatchEvent(event);
		}
		return result;
	}
	,__dispatchWithCapture: function(event) {
		if(event.target == null) {
			event.target = this;
		}
		if(this.parent != null) {
			event.eventPhase = 1;
			if(this.parent == this.stage) {
				this.parent.__dispatch(event);
			} else {
				var stack = openfl_display_DisplayObject.__tempStack.get();
				var parent = this.parent;
				var i = 0;
				while(parent != null) {
					stack.set(i,parent);
					parent = parent.parent;
					++i;
				}
				var _g = 0;
				var _g1 = i;
				while(_g < _g1) {
					var j = _g++;
					stack.get(i - j - 1).__dispatch(event);
				}
				openfl_display_DisplayObject.__tempStack.release(stack);
			}
		}
		event.eventPhase = 2;
		return this.__dispatchEvent(event);
	}
	,__enterFrame: function(deltaTime) {
	}
	,__getBounds: function(rect,matrix) {
		if(this.__graphics != null) {
			this.__graphics.__getBounds(rect,matrix);
		}
	}
	,__getCursor: function() {
		return null;
	}
	,__getFilterBounds: function(rect,matrix) {
		this.__getRenderBounds(rect,matrix);
		if(this.__filters != null) {
			var extension = openfl_geom_Rectangle.__pool.get();
			var _g = 0;
			var _g1 = this.__filters;
			while(_g < _g1.length) {
				var filter = _g1[_g];
				++_g;
				extension.__expand(-filter.__leftExtension,-filter.__topExtension,filter.__leftExtension + filter.__rightExtension,filter.__topExtension + filter.__bottomExtension);
			}
			rect.width += extension.width;
			rect.height += extension.height;
			rect.x += extension.x;
			rect.y += extension.y;
			openfl_geom_Rectangle.__pool.release(extension);
		}
	}
	,__getInteractive: function(stack) {
		return false;
	}
	,__getLocalBounds: function(rect) {
		this.__getBounds(rect,this.__transform);
		rect.x -= this.__transform.tx;
		rect.y -= this.__transform.ty;
	}
	,__getRenderBounds: function(rect,matrix) {
		if(this.__scrollRect == null) {
			this.__getBounds(rect,matrix);
		} else {
			var r = openfl_geom_Rectangle.__pool.get();
			r.copyFrom(this.__scrollRect);
			r.__transform(r,matrix);
			rect.__expand(r.x,r.y,r.width,r.height);
			openfl_geom_Rectangle.__pool.release(r);
		}
	}
	,__getRenderTransform: function() {
		this.__getWorldTransform();
		return this.__renderTransform;
	}
	,__getWorldTransform: function() {
		var transformDirty = this.__transformDirty || this.__worldTransformInvalid;
		if(transformDirty) {
			var list = [];
			var current = this;
			if(this.parent == null) {
				this.__update(true,false);
			} else {
				while(current != this.stage) {
					list.push(current);
					current = current.parent;
					if(current == null) {
						break;
					}
				}
			}
			var i = list.length;
			while(--i >= 0) {
				current = list[i];
				current.__update(true,false);
			}
		}
		return this.__worldTransform;
	}
	,__globalToLocal: function(global,local) {
		this.__getRenderTransform();
		if(global == local) {
			var _this = this.__renderTransform;
			var norm = _this.a * _this.d - _this.b * _this.c;
			if(norm == 0) {
				global.x = -_this.tx;
				global.y = -_this.ty;
			} else {
				var px = 1.0 / norm * (_this.c * (_this.ty - global.y) + _this.d * (global.x - _this.tx));
				global.y = 1.0 / norm * (_this.a * (global.y - _this.ty) + _this.b * (_this.tx - global.x));
				global.x = px;
			}
		} else {
			var _this = this.__renderTransform;
			var norm = _this.a * _this.d - _this.b * _this.c;
			local.x = norm == 0 ? -_this.tx : 1.0 / norm * (_this.c * (_this.ty - global.y) + _this.d * (global.x - _this.tx));
			var _this = this.__renderTransform;
			var norm = _this.a * _this.d - _this.b * _this.c;
			local.y = norm == 0 ? -_this.ty : 1.0 / norm * (_this.a * (global.y - _this.ty) + _this.b * (_this.tx - global.x));
		}
		return local;
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly,hitObject) {
		if(this.__graphics != null) {
			if(!hitObject.__visible || this.__isMask) {
				return false;
			}
			if(this.get_mask() != null && !this.get_mask().__hitTestMask(x,y)) {
				return false;
			}
			if(this.__graphics.__hitTest(x,y,shapeFlag,this.__getRenderTransform())) {
				if(stack != null && !interactiveOnly) {
					stack.push(hitObject);
				}
				return true;
			}
		}
		return false;
	}
	,__hitTestMask: function(x,y) {
		if(this.__graphics != null) {
			if(this.__graphics.__hitTest(x,y,true,this.__getRenderTransform())) {
				return true;
			}
		}
		return false;
	}
	,__readGraphicsData: function(graphicsData,recurse) {
		if(this.__graphics != null) {
			this.__graphics.__readGraphicsData(graphicsData);
		}
	}
	,__renderCairo: function(renderer) {
	}
	,__renderCairoMask: function(renderer) {
	}
	,__renderCanvas: function(renderer) {
		if(this.get_mask() == null || this.get_mask().get_width() > 0 && this.get_mask().get_height() > 0) {
			this.__updateCacheBitmap(renderer,false);
			if(this.__cacheBitmap != null && !this.__isCacheBitmapRender) {
				var bitmap = this.__cacheBitmap;
				if(bitmap.__renderable) {
					var alpha = renderer.__getAlpha(bitmap.__worldAlpha);
					if(alpha > 0 && bitmap.__bitmapData != null && bitmap.__bitmapData.__isValid && bitmap.__bitmapData.readable) {
						var context = renderer.context;
						renderer.__setBlendMode(bitmap.__worldBlendMode);
						renderer.__pushMaskObject(bitmap,false);
						lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(bitmap.__bitmapData.image);
						context.globalAlpha = alpha;
						var scrollRect = bitmap.__scrollRect;
						renderer.setTransform(bitmap.__renderTransform,context);
						if(!renderer.__allowSmoothing || !bitmap.smoothing) {
							context.imageSmoothingEnabled = false;
						}
						if(scrollRect == null) {
							context.drawImage(bitmap.__bitmapData.image.get_src(),0,0,bitmap.__bitmapData.image.width,bitmap.__bitmapData.image.height);
						} else {
							context.drawImage(bitmap.__bitmapData.image.get_src(),scrollRect.x,scrollRect.y,scrollRect.width,scrollRect.height);
						}
						if(!renderer.__allowSmoothing || !bitmap.smoothing) {
							context.imageSmoothingEnabled = true;
						}
						renderer.__popMaskObject(bitmap,false);
					}
				}
			} else if(!(this.opaqueBackground == null && this.__graphics == null)) {
				if(this.__renderable) {
					var alpha = renderer.__getAlpha(this.__worldAlpha);
					if(!(alpha <= 0)) {
						if(this.opaqueBackground != null && !this.__isCacheBitmapRender && this.get_width() > 0 && this.get_height() > 0) {
							renderer.__setBlendMode(this.__worldBlendMode);
							renderer.__pushMaskObject(this);
							var context = renderer.context;
							renderer.setTransform(this.__renderTransform,context);
							var color = this.opaqueBackground;
							context.fillStyle = "rgb(" + (color >>> 16 & 255) + "," + (color >>> 8 & 255) + "," + (color & 255) + ")";
							context.fillRect(0,0,this.get_width(),this.get_height());
							renderer.__popMaskObject(this);
						}
						if(this.__graphics != null) {
							if(this.__renderable) {
								var alpha = renderer.__getAlpha(this.__worldAlpha);
								if(!(alpha <= 0)) {
									var graphics = this.__graphics;
									if(graphics != null) {
										openfl__$internal_renderer_canvas_CanvasGraphics.render(graphics,renderer);
										var width = graphics.__width;
										var height = graphics.__height;
										var canvas = graphics.__canvas;
										if(canvas != null && graphics.__visible && width >= 1 && height >= 1) {
											var transform = graphics.__worldTransform;
											var context = renderer.context;
											var scrollRect = this.__scrollRect;
											var scale9Grid = this.__worldScale9Grid;
											if(scrollRect == null || scrollRect.width > 0 && scrollRect.height > 0) {
												renderer.__setBlendMode(this.__worldBlendMode);
												renderer.__pushMaskObject(this);
												context.globalAlpha = alpha;
												if(scale9Grid != null && transform.b == 0 && transform.c == 0) {
													context.setTransform(1,0,0,1,transform.tx,transform.ty);
													var bounds = graphics.__bounds;
													var scaleX = graphics.__renderTransform.a;
													var scaleY = graphics.__renderTransform.d;
													var renderScaleX = transform.a;
													var renderScaleY = transform.d;
													var left = Math.max(1,Math.round(scale9Grid.x * scaleX));
													var top = Math.round(scale9Grid.y * scaleY);
													var right = Math.max(1,Math.round((bounds.get_right() - scale9Grid.get_right()) * scaleX));
													var bottom = Math.round((bounds.get_bottom() - scale9Grid.get_bottom()) * scaleY);
													var centerWidth = Math.round(scale9Grid.width * scaleX);
													var centerHeight = Math.round(scale9Grid.height * scaleY);
													var renderLeft = Math.round(scale9Grid.x * renderScaleX);
													var renderTop = Math.round(scale9Grid.y * renderScaleY);
													var renderRight = Math.round((bounds.get_right() - scale9Grid.get_right()) * renderScaleX);
													var renderBottom = Math.round((bounds.get_bottom() - scale9Grid.get_bottom()) * renderScaleY);
													var renderCenterWidth = Math.round(width * renderScaleX) - renderLeft - renderRight;
													var renderCenterHeight = Math.round(height * renderScaleY) - renderTop - renderBottom;
													renderer.applySmoothing(context,false);
													if(centerWidth != 0 && centerHeight != 0) {
														context.drawImage(canvas,0,0,left,top,0,0,renderLeft,renderTop);
														context.drawImage(canvas,left,0,centerWidth,top,renderLeft,0,renderCenterWidth,renderTop);
														context.drawImage(canvas,left + centerWidth,0,right,top,renderLeft + renderCenterWidth,0,renderRight,renderTop);
														context.drawImage(canvas,0,top,left,centerHeight,0,renderTop,renderLeft,renderCenterHeight);
														context.drawImage(canvas,left,top,centerWidth,centerHeight,renderLeft,renderTop,renderCenterWidth,renderCenterHeight);
														context.drawImage(canvas,left + centerWidth,top,right,centerHeight,renderLeft + renderCenterWidth,renderTop,renderRight,renderCenterHeight);
														context.drawImage(canvas,0,top + centerHeight,left,bottom,0,renderTop + renderCenterHeight,renderLeft,renderBottom);
														context.drawImage(canvas,left,top + centerHeight,centerWidth,bottom,renderLeft,renderTop + renderCenterHeight,renderCenterWidth,renderBottom);
														context.drawImage(canvas,left + centerWidth,top + centerHeight,right,bottom,renderLeft + renderCenterWidth,renderTop + renderCenterHeight,renderRight,renderBottom);
													} else if(centerWidth == 0 && centerHeight != 0) {
														var renderWidth = renderLeft + renderCenterWidth + renderRight;
														context.drawImage(canvas,0,0,width,top,0,0,renderWidth,renderTop);
														context.drawImage(canvas,0,top,width,centerHeight,0,renderTop,renderWidth,renderCenterHeight);
														context.drawImage(canvas,0,top + centerHeight,width,bottom,0,renderTop + renderCenterHeight,renderWidth,renderBottom);
													} else if(centerHeight == 0 && centerWidth != 0) {
														var renderHeight = renderTop + renderCenterHeight + renderBottom;
														context.drawImage(canvas,0,0,left,height,0,0,renderLeft,renderHeight);
														context.drawImage(canvas,left,0,centerWidth,height,renderLeft,0,renderCenterWidth,renderHeight);
														context.drawImage(canvas,left + centerWidth,0,right,height,renderLeft + renderCenterWidth,0,renderRight,renderHeight);
													}
												} else {
													renderer.setTransform(transform,context);
													if(renderer.__isDOM) {
														var reverseScale = 1 / renderer.pixelRatio;
														context.scale(reverseScale,reverseScale);
													}
													context.drawImage(canvas,0,0,width,height);
												}
												renderer.__popMaskObject(this);
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
		this.__renderEvent(renderer);
	}
	,__renderCanvasMask: function(renderer) {
		if(this.__graphics != null) {
			openfl__$internal_renderer_canvas_CanvasGraphics.renderMask(this.__graphics,renderer);
		}
	}
	,__renderDOM: function(renderer) {
		this.__updateCacheBitmap(renderer,false);
		if(this.__cacheBitmap != null && !this.__isCacheBitmapRender) {
			this.__renderDOMClear(renderer);
			this.__cacheBitmap.stage = this.stage;
			var bitmap = this.__cacheBitmap;
			if(bitmap.stage != null && bitmap.__worldVisible && bitmap.__renderable && bitmap.__bitmapData != null && bitmap.__bitmapData.__isValid && bitmap.__bitmapData.readable) {
				renderer.__pushMaskObject(bitmap);
				if(bitmap.__bitmapData.image.buffer.__srcImage != null) {
					openfl__$internal_renderer_dom_DOMBitmap.renderImage(bitmap,renderer);
				} else {
					openfl__$internal_renderer_dom_DOMBitmap.renderCanvas(bitmap,renderer);
				}
				renderer.__popMaskObject(bitmap);
			} else {
				openfl__$internal_renderer_dom_DOMBitmap.clear(bitmap,renderer);
			}
		} else {
			var tmp = this.opaqueBackground != null && !this.__isCacheBitmapRender && this.get_width() > 0 && this.get_height() > 0;
			var graphics = this.__graphics;
			if(this.stage != null && this.__worldVisible && this.__renderable && graphics != null) {
				openfl__$internal_renderer_canvas_CanvasGraphics.render(graphics,renderer.__canvasRenderer);
				if(graphics.__softwareDirty || this.__worldAlphaChanged || this.__canvas != graphics.__canvas) {
					if(graphics.__canvas != null) {
						if(this.__canvas != graphics.__canvas) {
							if(this.__canvas != null) {
								renderer.element.removeChild(this.__canvas);
							}
							this.__canvas = graphics.__canvas;
							this.__context = graphics.__context;
							renderer.__initializeElement(this,this.__canvas);
						}
					} else {
						openfl__$internal_renderer_dom_DOMShape.clear(this,renderer);
					}
				}
				if(this.__canvas != null) {
					renderer.__pushMaskObject(this);
					var cacheTransform = this.__renderTransform;
					this.__renderTransform = graphics.__worldTransform;
					if(graphics.__transformDirty) {
						graphics.__transformDirty = false;
						this.__renderTransformChanged = true;
					}
					renderer.__updateClip(this);
					renderer.__applyStyle(this,true,true,true);
					this.__renderTransform = cacheTransform;
					renderer.__popMaskObject(this);
				}
			} else {
				openfl__$internal_renderer_dom_DOMShape.clear(this,renderer);
			}
		}
		this.__renderEvent(renderer);
	}
	,__renderDOMClear: function(renderer) {
		openfl__$internal_renderer_dom_DOMDisplayObject.clear(this,renderer);
	}
	,__renderEvent: function(renderer) {
		if(this.__customRenderEvent != null && this.__renderable) {
			this.__customRenderEvent.allowSmoothing = renderer.__allowSmoothing;
			this.__customRenderEvent.objectMatrix.copyFrom(this.__renderTransform);
			this.__customRenderEvent.objectColorTransform.__copyFrom(this.__worldColorTransform);
			this.__customRenderEvent.renderer = renderer;
			switch(renderer.__type) {
			case "cairo":
				this.__customRenderEvent.type = "renderCairo";
				break;
			case "canvas":
				this.__customRenderEvent.type = "renderCanvas";
				break;
			case "dom":
				if(this.stage != null && this.__worldVisible) {
					this.__customRenderEvent.type = "renderDOM";
				} else {
					this.__customRenderEvent.type = "clearDOM";
				}
				break;
			case "opengl":
				if(!renderer.__cleared) {
					renderer.__clear();
				}
				var renderer1 = renderer;
				renderer1.setShader(this.__worldShader);
				renderer1.__context3D.__flushGL();
				this.__customRenderEvent.type = "renderOpenGL";
				break;
			default:
				return;
			}
			renderer.__setBlendMode(this.__worldBlendMode);
			renderer.__pushMaskObject(this);
			this.dispatchEvent(this.__customRenderEvent);
			renderer.__popMaskObject(this);
			if(renderer.__type == "opengl") {
				var renderer1 = renderer;
				renderer1.setViewport();
			}
		}
	}
	,__renderGL: function(renderer) {
		this.__updateCacheBitmap(renderer,false);
		if(this.__cacheBitmap != null && !this.__isCacheBitmapRender) {
			openfl__$internal_renderer_context3D_Context3DBitmap.render(this.__cacheBitmap,renderer);
		} else if(!(this.opaqueBackground == null && this.__graphics == null)) {
			if(!(!this.__renderable || this.__worldAlpha <= 0)) {
				if(this.opaqueBackground != null && !this.__isCacheBitmapRender && this.get_width() > 0 && this.get_height() > 0) {
					renderer.__setBlendMode(this.__worldBlendMode);
					renderer.__pushMaskObject(this);
					var context = renderer.__context3D;
					var rect = openfl_geom_Rectangle.__pool.get();
					rect.setTo(0,0,this.get_width(),this.get_height());
					renderer.__pushMaskRect(rect,this.__renderTransform);
					var color = this.opaqueBackground;
					context.clear((color >>> 16 & 255) / 255,(color >>> 8 & 255) / 255,(color & 255) / 255,1,0,0,1);
					renderer.__popMaskRect();
					renderer.__popMaskObject(this);
					openfl_geom_Rectangle.__pool.release(rect);
				}
				if(this.__graphics != null) {
					openfl__$internal_renderer_context3D_Context3DShape.render(this,renderer);
				}
			}
		}
		this.__renderEvent(renderer);
	}
	,__renderGLMask: function(renderer) {
		if(this.__graphics != null) {
			openfl__$internal_renderer_context3D_Context3DShape.renderMask(this,renderer);
		}
	}
	,__setParentRenderDirty: function() {
		var renderParent = this.__renderParent != null ? this.__renderParent : this.parent;
		if(renderParent != null && !renderParent.__renderDirty) {
			renderParent.__renderDirty = true;
			renderParent.__setParentRenderDirty();
		}
	}
	,__setRenderDirty: function() {
		if(!this.__renderDirty) {
			this.__renderDirty = true;
			this.__setParentRenderDirty();
		}
	}
	,__setStageReference: function(stage) {
		this.stage = stage;
	}
	,__setTransformDirty: function() {
		if(!this.__transformDirty) {
			this.__transformDirty = true;
			this.__setWorldTransformInvalid();
			this.__setParentRenderDirty();
		}
	}
	,__setWorldTransformInvalid: function() {
		this.__worldTransformInvalid = true;
	}
	,__shouldCacheHardware: function(value) {
		if(value == true || this.__filters != null) {
			return true;
		}
		if(value == false || this.__graphics != null && !openfl__$internal_renderer_context3D_Context3DGraphics.isCompatible(this.__graphics)) {
			return false;
		}
		return null;
	}
	,__stopAllMovieClips: function() {
	}
	,__update: function(transformOnly,updateChildren) {
		var renderParent = this.__renderParent != null ? this.__renderParent : this.parent;
		if(this.__isMask && renderParent == null) {
			renderParent = this.__maskTarget;
		}
		this.__renderable = this.__visible && this.__scaleX != 0 && this.__scaleY != 0 && !this.__isMask && (renderParent == null || !renderParent.__isMask);
		this.__updateTransforms();
		this.__transformDirty = false;
		this.__worldTransformInvalid = false;
		if(!transformOnly) {
			if(openfl_display_DisplayObject.__supportDOM) {
				this.__renderTransformChanged = !this.__renderTransform.equals(this.__renderTransformCache);
				if(this.__renderTransformCache == null) {
					this.__renderTransformCache = this.__renderTransform.clone();
				} else {
					this.__renderTransformCache.copyFrom(this.__renderTransform);
				}
			}
			if(renderParent != null) {
				if(openfl_display_DisplayObject.__supportDOM) {
					var worldVisible = renderParent.__worldVisible && this.__visible;
					this.__worldVisibleChanged = this.__worldVisible != worldVisible;
					this.__worldVisible = worldVisible;
					var worldAlpha = this.get_alpha() * renderParent.__worldAlpha;
					this.__worldAlphaChanged = this.__worldAlpha != worldAlpha;
					this.__worldAlpha = worldAlpha;
				} else {
					this.__worldAlpha = this.get_alpha() * renderParent.__worldAlpha;
				}
				if(this.__objectTransform != null) {
					this.__worldColorTransform.__copyFrom(this.__objectTransform.get_colorTransform());
					this.__worldColorTransform.__combine(renderParent.__worldColorTransform);
				} else {
					this.__worldColorTransform.__copyFrom(renderParent.__worldColorTransform);
				}
				if(this.__blendMode == null || this.__blendMode == 10) {
					this.__worldBlendMode = renderParent.__worldBlendMode;
				} else {
					this.__worldBlendMode = this.__blendMode;
				}
				if(this.__shader == null) {
					this.__worldShader = renderParent.__shader;
				} else {
					this.__worldShader = this.__shader;
				}
				if(this.__scale9Grid == null) {
					this.__worldScale9Grid = renderParent.__scale9Grid;
				} else {
					this.__worldScale9Grid = this.__scale9Grid;
				}
			} else {
				this.__worldAlpha = this.get_alpha();
				if(openfl_display_DisplayObject.__supportDOM) {
					this.__worldVisibleChanged = this.__worldVisible != this.__visible;
					this.__worldVisible = this.__visible;
					this.__worldAlphaChanged = this.__worldAlpha != this.get_alpha();
				}
				if(this.__objectTransform != null) {
					this.__worldColorTransform.__copyFrom(this.__objectTransform.get_colorTransform());
				} else {
					this.__worldColorTransform.__identity();
				}
				this.__worldBlendMode = this.__blendMode;
				this.__worldShader = this.__shader;
				this.__worldScale9Grid = this.__scale9Grid;
			}
		}
		if(updateChildren && this.get_mask() != null) {
			this.get_mask().__update(transformOnly,true);
		}
	}
	,__updateCacheBitmap: function(renderer,force) {
		if(this.__isCacheBitmapRender) {
			return false;
		}
		var colorTransform = openfl_geom_ColorTransform.__pool.get();
		colorTransform.__copyFrom(this.__worldColorTransform);
		if(renderer.__worldColorTransform != null) {
			colorTransform.__combine(renderer.__worldColorTransform);
		}
		var updated = false;
		if(this.get_cacheAsBitmap() || renderer.__type != "opengl" && !colorTransform.__isDefault(true)) {
			var rect = null;
			var needRender = this.__cacheBitmap == null || this.__renderDirty && (force || this.__children != null && this.__children.length > 0) || this.opaqueBackground != this.__cacheBitmapBackground;
			var softwareDirty = needRender || this.__graphics != null && this.__graphics.__softwareDirty || !this.__cacheBitmapColorTransform.__equals(colorTransform,true);
			var hardwareDirty = needRender || this.__graphics != null && this.__graphics.__hardwareDirty;
			var renderType = renderer.__type;
			if(softwareDirty || hardwareDirty) {
				if(renderType == "opengl") {
					if(this.__shouldCacheHardware(null) == false) {
						renderType = "canvas";
					}
				}
				if(softwareDirty && (renderType == "canvas" || renderType == "cairo")) {
					needRender = true;
				}
				if(hardwareDirty && renderType == "opengl") {
					needRender = true;
				}
			}
			var updateTransform = needRender || !this.__cacheBitmap.__worldTransform.equals(this.__worldTransform);
			var hasFilters = this.__filters != null;
			if(hasFilters && !needRender) {
				var _g = 0;
				var _g1 = this.__filters;
				while(_g < _g1.length) {
					var filter = _g1[_g];
					++_g;
					if(filter.__renderDirty) {
						needRender = true;
						break;
					}
				}
			}
			if(this.__cacheBitmapMatrix == null) {
				this.__cacheBitmapMatrix = new openfl_geom_Matrix();
			}
			var bitmapMatrix = this.__cacheAsBitmapMatrix != null ? this.__cacheAsBitmapMatrix : this.__renderTransform;
			if(!needRender && (bitmapMatrix.a != this.__cacheBitmapMatrix.a || bitmapMatrix.b != this.__cacheBitmapMatrix.b || bitmapMatrix.c != this.__cacheBitmapMatrix.c || bitmapMatrix.d != this.__cacheBitmapMatrix.d)) {
				needRender = true;
			}
			if(!needRender && renderer.__type != "opengl" && this.__cacheBitmapData != null && this.__cacheBitmapData.image != null && this.__cacheBitmapData.image.version < this.__cacheBitmapData.__textureVersion) {
				needRender = true;
			}
			this.__cacheBitmapMatrix.copyFrom(bitmapMatrix);
			this.__cacheBitmapMatrix.tx = 0;
			this.__cacheBitmapMatrix.ty = 0;
			var bitmapWidth = 0;
			var bitmapHeight = 0;
			var filterWidth = 0;
			var filterHeight = 0;
			var offsetX = 0.;
			var offsetY = 0.;
			if(updateTransform || needRender) {
				rect = openfl_geom_Rectangle.__pool.get();
				this.__getFilterBounds(rect,this.__cacheBitmapMatrix);
				filterWidth = Math.ceil(rect.width);
				filterHeight = Math.ceil(rect.height);
				offsetX = rect.x > 0 ? Math.ceil(rect.x) : Math.floor(rect.x);
				offsetY = rect.y > 0 ? Math.ceil(rect.y) : Math.floor(rect.y);
				if(this.__cacheBitmapData != null) {
					if(filterWidth > this.__cacheBitmapData.width || filterHeight > this.__cacheBitmapData.height) {
						bitmapWidth = Math.ceil(Math.max(filterWidth * 1.25,this.__cacheBitmapData.width));
						bitmapHeight = Math.ceil(Math.max(filterHeight * 1.25,this.__cacheBitmapData.height));
						needRender = true;
					} else {
						bitmapWidth = this.__cacheBitmapData.width;
						bitmapHeight = this.__cacheBitmapData.height;
					}
				} else {
					bitmapWidth = filterWidth;
					bitmapHeight = filterHeight;
				}
			}
			if(needRender) {
				updateTransform = true;
				this.__cacheBitmapBackground = this.opaqueBackground;
				if(filterWidth >= 0.5 && filterHeight >= 0.5) {
					var needsFill = this.opaqueBackground != null && (bitmapWidth != filterWidth || bitmapHeight != filterHeight);
					var fillColor = this.opaqueBackground != null ? -16777216 | this.opaqueBackground : 0;
					var bitmapColor = needsFill ? 0 : fillColor;
					var allowFramebuffer = renderer.__type == "opengl";
					if(this.__cacheBitmapData == null || bitmapWidth > this.__cacheBitmapData.width || bitmapHeight > this.__cacheBitmapData.height) {
						this.__cacheBitmapData = new openfl_display_BitmapData(bitmapWidth,bitmapHeight,true,bitmapColor);
						if(this.__cacheBitmap == null) {
							this.__cacheBitmap = new openfl_display_Bitmap();
						}
						this.__cacheBitmap.__bitmapData = this.__cacheBitmapData;
						this.__cacheBitmapRenderer = null;
					} else {
						this.__cacheBitmapData.__fillRect(this.__cacheBitmapData.rect,bitmapColor,allowFramebuffer);
					}
					if(needsFill) {
						rect.setTo(0,0,filterWidth,filterHeight);
						this.__cacheBitmapData.__fillRect(rect,fillColor,allowFramebuffer);
					}
				} else {
					openfl_geom_ColorTransform.__pool.release(colorTransform);
					this.__cacheBitmap = null;
					this.__cacheBitmapData = null;
					this.__cacheBitmapData2 = null;
					this.__cacheBitmapData3 = null;
					this.__cacheBitmapRenderer = null;
					return true;
				}
			} else {
				this.__cacheBitmapData = this.__cacheBitmap.get_bitmapData();
				this.__cacheBitmapData2 = null;
				this.__cacheBitmapData3 = null;
			}
			if(updateTransform || needRender) {
				this.__cacheBitmap.__worldTransform.copyFrom(this.__worldTransform);
				if(bitmapMatrix == this.__renderTransform) {
					this.__cacheBitmap.__renderTransform.identity();
					this.__cacheBitmap.__renderTransform.tx = this.__renderTransform.tx + offsetX;
					this.__cacheBitmap.__renderTransform.ty = this.__renderTransform.ty + offsetY;
				} else {
					this.__cacheBitmap.__renderTransform.copyFrom(this.__cacheBitmapMatrix);
					this.__cacheBitmap.__renderTransform.invert();
					this.__cacheBitmap.__renderTransform.concat(this.__renderTransform);
					this.__cacheBitmap.__renderTransform.tx += offsetX;
					this.__cacheBitmap.__renderTransform.ty += offsetY;
				}
			}
			this.__cacheBitmap.smoothing = renderer.__allowSmoothing;
			this.__cacheBitmap.__renderable = this.__renderable;
			this.__cacheBitmap.__worldAlpha = this.__worldAlpha;
			this.__cacheBitmap.__worldBlendMode = this.__worldBlendMode;
			this.__cacheBitmap.__worldShader = this.__worldShader;
			this.__cacheBitmap.set_mask(this.__mask);
			if(needRender) {
				if(this.__cacheBitmapRenderer == null || renderType != this.__cacheBitmapRenderer.__type) {
					if(renderType == "opengl") {
						this.__cacheBitmapRenderer = new openfl_display_OpenGLRenderer((js_Boot.__cast(renderer , openfl_display_OpenGLRenderer)).__context3D,this.__cacheBitmapData);
					} else {
						if(this.__cacheBitmapData.image == null) {
							var color = this.opaqueBackground != null ? -16777216 | this.opaqueBackground : 0;
							this.__cacheBitmapData = new openfl_display_BitmapData(bitmapWidth,bitmapHeight,true,color);
							this.__cacheBitmap.__bitmapData = this.__cacheBitmapData;
						}
						lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(this.__cacheBitmapData.image);
						this.__cacheBitmapRenderer = new openfl_display_CanvasRenderer(this.__cacheBitmapData.image.buffer.__srcContext);
					}
					this.__cacheBitmapRenderer.__worldTransform = new openfl_geom_Matrix();
					this.__cacheBitmapRenderer.__worldColorTransform = new openfl_geom_ColorTransform();
				}
				if(this.__cacheBitmapColorTransform == null) {
					this.__cacheBitmapColorTransform = new openfl_geom_ColorTransform();
				}
				this.__cacheBitmapRenderer.__stage = this.stage;
				this.__cacheBitmapRenderer.__allowSmoothing = renderer.__allowSmoothing;
				this.__cacheBitmapRenderer.__setBlendMode(10);
				this.__cacheBitmapRenderer.__worldAlpha = 1 / this.__worldAlpha;
				this.__cacheBitmapRenderer.__worldTransform.copyFrom(this.__renderTransform);
				this.__cacheBitmapRenderer.__worldTransform.invert();
				this.__cacheBitmapRenderer.__worldTransform.concat(this.__cacheBitmapMatrix);
				this.__cacheBitmapRenderer.__worldTransform.tx -= offsetX;
				this.__cacheBitmapRenderer.__worldTransform.ty -= offsetY;
				this.__cacheBitmapRenderer.__worldColorTransform.__copyFrom(colorTransform);
				this.__cacheBitmapRenderer.__worldColorTransform.__invert();
				this.__isCacheBitmapRender = true;
				if(this.__cacheBitmapRenderer.__type == "opengl") {
					var parentRenderer = renderer;
					var childRenderer = this.__cacheBitmapRenderer;
					var context = childRenderer.__context3D;
					var cacheRTT = context.__state.renderToTexture;
					var cacheRTTDepthStencil = context.__state.renderToTextureDepthStencil;
					var cacheRTTAntiAlias = context.__state.renderToTextureAntiAlias;
					var cacheRTTSurfaceSelector = context.__state.renderToTextureSurfaceSelector;
					var cacheBlendMode = parentRenderer.__blendMode;
					parentRenderer.__suspendClipAndMask();
					childRenderer.__copyShader(parentRenderer);
					this.__cacheBitmapData.__setUVRect(context,0,0,filterWidth,filterHeight);
					childRenderer.__setRenderTarget(this.__cacheBitmapData);
					if(this.__cacheBitmapData.image != null) {
						this.__cacheBitmapData.__textureVersion = this.__cacheBitmapData.image.version + 1;
					}
					this.__cacheBitmapData.__drawGL(this,childRenderer);
					if(hasFilters) {
						var needSecondBitmapData = true;
						var needCopyOfOriginal = false;
						var _g = 0;
						var _g1 = this.__filters;
						while(_g < _g1.length) {
							var filter = _g1[_g];
							++_g;
							if(filter.__preserveObject) {
								needCopyOfOriginal = true;
							}
						}
						var bitmap = this.__cacheBitmapData;
						var bitmap2 = null;
						var bitmap3 = null;
						if(this.__cacheBitmapData2 == null || bitmapWidth > this.__cacheBitmapData2.width || bitmapHeight > this.__cacheBitmapData2.height) {
							this.__cacheBitmapData2 = new openfl_display_BitmapData(bitmapWidth,bitmapHeight,true,0);
						} else {
							this.__cacheBitmapData2.fillRect(this.__cacheBitmapData2.rect,0);
							if(this.__cacheBitmapData2.image != null) {
								this.__cacheBitmapData2.__textureVersion = this.__cacheBitmapData2.image.version + 1;
							}
						}
						this.__cacheBitmapData2.__setUVRect(context,0,0,filterWidth,filterHeight);
						bitmap2 = this.__cacheBitmapData2;
						if(needCopyOfOriginal) {
							if(this.__cacheBitmapData3 == null || bitmapWidth > this.__cacheBitmapData3.width || bitmapHeight > this.__cacheBitmapData3.height) {
								this.__cacheBitmapData3 = new openfl_display_BitmapData(bitmapWidth,bitmapHeight,true,0);
							} else {
								this.__cacheBitmapData3.fillRect(this.__cacheBitmapData3.rect,0);
								if(this.__cacheBitmapData3.image != null) {
									this.__cacheBitmapData3.__textureVersion = this.__cacheBitmapData3.image.version + 1;
								}
							}
							this.__cacheBitmapData3.__setUVRect(context,0,0,filterWidth,filterHeight);
							bitmap3 = this.__cacheBitmapData3;
						}
						childRenderer.__setBlendMode(10);
						childRenderer.__worldAlpha = 1;
						childRenderer.__worldTransform.identity();
						childRenderer.__worldColorTransform.__identity();
						var shader;
						var cacheBitmap;
						var _g = 0;
						var _g1 = this.__filters;
						while(_g < _g1.length) {
							var filter = _g1[_g];
							++_g;
							if(filter.__preserveObject) {
								childRenderer.__setRenderTarget(bitmap3);
								childRenderer.__renderFilterPass(bitmap,childRenderer.__defaultDisplayShader,filter.__smooth);
							}
							var _g2 = 0;
							var _g3 = filter.__numShaderPasses;
							while(_g2 < _g3) {
								var i = _g2++;
								shader = filter.__initShader(childRenderer,i);
								childRenderer.__setBlendMode(filter.__shaderBlendMode);
								childRenderer.__setRenderTarget(bitmap2);
								childRenderer.__renderFilterPass(bitmap,shader,filter.__smooth);
								cacheBitmap = bitmap;
								bitmap = bitmap2;
								bitmap2 = cacheBitmap;
							}
							if(filter.__preserveObject) {
								childRenderer.__setBlendMode(10);
								childRenderer.__setRenderTarget(bitmap);
								childRenderer.__renderFilterPass(bitmap3,childRenderer.__defaultDisplayShader,filter.__smooth,false);
							}
							filter.__renderDirty = false;
						}
						this.__cacheBitmap.__bitmapData = bitmap;
					}
					parentRenderer.__blendMode = 10;
					parentRenderer.__setBlendMode(cacheBlendMode);
					parentRenderer.__copyShader(childRenderer);
					if(cacheRTT != null) {
						context.setRenderToTexture(cacheRTT,cacheRTTDepthStencil,cacheRTTAntiAlias,cacheRTTSurfaceSelector);
					} else {
						context.setRenderToBackBuffer();
					}
					parentRenderer.__resumeClipAndMask(childRenderer);
					parentRenderer.setViewport();
					this.__cacheBitmapColorTransform.__copyFrom(colorTransform);
				} else {
					this.__cacheBitmapData.__drawCanvas(this,this.__cacheBitmapRenderer);
					if(hasFilters) {
						var needSecondBitmapData = false;
						var needCopyOfOriginal = false;
						var _g = 0;
						var _g1 = this.__filters;
						while(_g < _g1.length) {
							var filter = _g1[_g];
							++_g;
							if(filter.__needSecondBitmapData) {
								needSecondBitmapData = true;
							}
							if(filter.__preserveObject) {
								needCopyOfOriginal = true;
							}
						}
						var bitmap = this.__cacheBitmapData;
						var bitmap2 = null;
						var bitmap3 = null;
						if(needSecondBitmapData) {
							if(this.__cacheBitmapData2 == null || this.__cacheBitmapData2.image == null || bitmapWidth > this.__cacheBitmapData2.width || bitmapHeight > this.__cacheBitmapData2.height) {
								this.__cacheBitmapData2 = new openfl_display_BitmapData(bitmapWidth,bitmapHeight,true,0);
							} else {
								this.__cacheBitmapData2.fillRect(this.__cacheBitmapData2.rect,0);
							}
							bitmap2 = this.__cacheBitmapData2;
						} else {
							bitmap2 = bitmap;
						}
						if(needCopyOfOriginal) {
							if(this.__cacheBitmapData3 == null || this.__cacheBitmapData3.image == null || bitmapWidth > this.__cacheBitmapData3.width || bitmapHeight > this.__cacheBitmapData3.height) {
								this.__cacheBitmapData3 = new openfl_display_BitmapData(bitmapWidth,bitmapHeight,true,0);
							} else {
								this.__cacheBitmapData3.fillRect(this.__cacheBitmapData3.rect,0);
							}
							bitmap3 = this.__cacheBitmapData3;
						}
						if(this.__tempPoint == null) {
							this.__tempPoint = new openfl_geom_Point();
						}
						var destPoint = this.__tempPoint;
						var cacheBitmap;
						var lastBitmap;
						var _g = 0;
						var _g1 = this.__filters;
						while(_g < _g1.length) {
							var filter = _g1[_g];
							++_g;
							if(filter.__preserveObject) {
								bitmap3.copyPixels(bitmap,bitmap.rect,destPoint);
							}
							lastBitmap = filter.__applyFilter(bitmap2,bitmap,bitmap.rect,destPoint);
							if(filter.__preserveObject) {
								lastBitmap.draw(bitmap3,null,this.__objectTransform != null ? this.__objectTransform.get_colorTransform() : null);
							}
							filter.__renderDirty = false;
							if(needSecondBitmapData && lastBitmap == bitmap2) {
								cacheBitmap = bitmap;
								bitmap = bitmap2;
								bitmap2 = cacheBitmap;
							}
						}
						if(this.__cacheBitmapData != bitmap) {
							cacheBitmap = this.__cacheBitmapData;
							this.__cacheBitmapData = bitmap;
							this.__cacheBitmapData2 = cacheBitmap;
							this.__cacheBitmap.__bitmapData = this.__cacheBitmapData;
							this.__cacheBitmapRenderer = null;
						}
						this.__cacheBitmap.__imageVersion = this.__cacheBitmapData.__textureVersion;
					}
					this.__cacheBitmapColorTransform.__copyFrom(colorTransform);
					if(!this.__cacheBitmapColorTransform.__isDefault(true)) {
						this.__cacheBitmapColorTransform.alphaMultiplier = 1;
						this.__cacheBitmapData.colorTransform(this.__cacheBitmapData.rect,this.__cacheBitmapColorTransform);
					}
				}
				this.__isCacheBitmapRender = false;
			}
			if(updateTransform || needRender) {
				openfl_geom_Rectangle.__pool.release(rect);
			}
			updated = updateTransform;
		} else if(this.__cacheBitmap != null) {
			if(renderer.__type == "dom") {
				this.__cacheBitmap.__renderDOMClear(renderer);
			}
			this.__cacheBitmap = null;
			this.__cacheBitmapData = null;
			this.__cacheBitmapData2 = null;
			this.__cacheBitmapData3 = null;
			this.__cacheBitmapColorTransform = null;
			this.__cacheBitmapRenderer = null;
			updated = true;
		}
		openfl_geom_ColorTransform.__pool.release(colorTransform);
		return updated;
	}
	,__updateTransforms: function(overrideTransform) {
		var overrided = overrideTransform != null;
		var local = overrided ? overrideTransform : this.__transform;
		if(this.__worldTransform == null) {
			this.__worldTransform = new openfl_geom_Matrix();
		}
		if(this.__renderTransform == null) {
			this.__renderTransform = new openfl_geom_Matrix();
		}
		var renderParent = this.__renderParent != null ? this.__renderParent : this.parent;
		if(!overrided && this.parent != null) {
			var parentTransform = this.parent.__worldTransform;
			var target = this.__worldTransform;
			target.a = local.a * parentTransform.a + local.b * parentTransform.c;
			target.b = local.a * parentTransform.b + local.b * parentTransform.d;
			target.c = local.c * parentTransform.a + local.d * parentTransform.c;
			target.d = local.c * parentTransform.b + local.d * parentTransform.d;
			target.tx = local.tx * parentTransform.a + local.ty * parentTransform.c + parentTransform.tx;
			target.ty = local.tx * parentTransform.b + local.ty * parentTransform.d + parentTransform.ty;
		} else {
			this.__worldTransform.copyFrom(local);
		}
		if(!overrided && renderParent != null) {
			var parentTransform = renderParent.__renderTransform;
			var target = this.__renderTransform;
			target.a = local.a * parentTransform.a + local.b * parentTransform.c;
			target.b = local.a * parentTransform.b + local.b * parentTransform.d;
			target.c = local.c * parentTransform.a + local.d * parentTransform.c;
			target.d = local.c * parentTransform.b + local.d * parentTransform.d;
			target.tx = local.tx * parentTransform.a + local.ty * parentTransform.c + parentTransform.tx;
			target.ty = local.tx * parentTransform.b + local.ty * parentTransform.d + parentTransform.ty;
		} else {
			this.__renderTransform.copyFrom(local);
		}
		if(this.__scrollRect != null) {
			var _this = this.__renderTransform;
			var px = -this.__scrollRect.x;
			var py = -this.__scrollRect.y;
			_this.tx = px * _this.a + py * _this.c + _this.tx;
			_this.ty = px * _this.b + py * _this.d + _this.ty;
		}
	}
	,get_alpha: function() {
		return this.__alpha;
	}
	,set_alpha: function(value) {
		if(value > 1.0) {
			value = 1.0;
		}
		if(value < 0.0) {
			value = 0.0;
		}
		if(value != this.__alpha && !this.get_cacheAsBitmap()) {
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		return this.__alpha = value;
	}
	,get_blendMode: function() {
		return this.__blendMode;
	}
	,set_blendMode: function(value) {
		if(value == null) {
			value = 10;
		}
		if(value != this.__blendMode) {
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		return this.__blendMode = value;
	}
	,get_cacheAsBitmap: function() {
		if(this.__filters == null) {
			return this.__cacheAsBitmap;
		} else {
			return true;
		}
	}
	,set_cacheAsBitmap: function(value) {
		if(value != this.__cacheAsBitmap) {
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		return this.__cacheAsBitmap = value;
	}
	,get_cacheAsBitmapMatrix: function() {
		return this.__cacheAsBitmapMatrix;
	}
	,set_cacheAsBitmapMatrix: function(value) {
		if(!this.__renderDirty) {
			this.__renderDirty = true;
			this.__setParentRenderDirty();
		}
		return this.__cacheAsBitmapMatrix = value != null ? value.clone() : value;
	}
	,get_filters: function() {
		if(this.__filters == null) {
			return [];
		} else {
			return this.__filters.slice();
		}
	}
	,set_filters: function(value) {
		if(value != null && value.length > 0) {
			this.__filters = value;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		} else if(this.__filters != null) {
			this.__filters = null;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		return value;
	}
	,get_height: function() {
		var rect = openfl_geom_Rectangle.__pool.get();
		this.__getLocalBounds(rect);
		var height = rect.height;
		openfl_geom_Rectangle.__pool.release(rect);
		return height;
	}
	,set_height: function(value) {
		var rect = openfl_geom_Rectangle.__pool.get();
		var matrix = openfl_geom_Matrix.__pool.get();
		matrix.identity();
		this.__getBounds(rect,matrix);
		if(value != rect.height) {
			this.set_scaleY(value / rect.height);
		} else {
			this.set_scaleY(1);
		}
		openfl_geom_Rectangle.__pool.release(rect);
		openfl_geom_Matrix.__pool.release(matrix);
		return value;
	}
	,get_loaderInfo: function() {
		if(this.stage != null) {
			return openfl__$internal_Lib.current.__loaderInfo;
		}
		return null;
	}
	,get_mask: function() {
		return this.__mask;
	}
	,set_mask: function(value) {
		if(value == this.__mask) {
			return value;
		}
		if(value != this.__mask) {
			this.__setTransformDirty();
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		if(this.__mask != null) {
			this.__mask.__isMask = false;
			this.__mask.__maskTarget = null;
			this.__mask.__setTransformDirty();
			var _this = this.__mask;
			if(!_this.__renderDirty) {
				_this.__renderDirty = true;
				_this.__setParentRenderDirty();
			}
		}
		if(value != null) {
			value.__isMask = true;
			value.__maskTarget = this;
			value.__setWorldTransformInvalid();
		}
		if(this.__cacheBitmap != null && this.__cacheBitmap.get_mask() != value) {
			this.__cacheBitmap.set_mask(value);
		}
		return this.__mask = value;
	}
	,get_mouseX: function() {
		var mouseX = this.stage != null ? this.stage.__mouseX : openfl__$internal_Lib.current.stage.__mouseX;
		var mouseY = this.stage != null ? this.stage.__mouseY : openfl__$internal_Lib.current.stage.__mouseY;
		var _this = this.__getRenderTransform();
		var norm = _this.a * _this.d - _this.b * _this.c;
		if(norm == 0) {
			return -_this.tx;
		} else {
			return 1.0 / norm * (_this.c * (_this.ty - mouseY) + _this.d * (mouseX - _this.tx));
		}
	}
	,get_mouseY: function() {
		var mouseX = this.stage != null ? this.stage.__mouseX : openfl__$internal_Lib.current.stage.__mouseX;
		var mouseY = this.stage != null ? this.stage.__mouseY : openfl__$internal_Lib.current.stage.__mouseY;
		var _this = this.__getRenderTransform();
		var norm = _this.a * _this.d - _this.b * _this.c;
		if(norm == 0) {
			return -_this.ty;
		} else {
			return 1.0 / norm * (_this.a * (mouseY - _this.ty) + _this.b * (_this.tx - mouseX));
		}
	}
	,get_name: function() {
		return this.__name;
	}
	,set_name: function(value) {
		return this.__name = value;
	}
	,get_root: function() {
		if(this.stage != null) {
			return openfl__$internal_Lib.current;
		}
		return null;
	}
	,get_rotation: function() {
		return this.__rotation;
	}
	,set_rotation: function(value) {
		if(value != this.__rotation) {
			this.__rotation = value;
			var radians = this.__rotation * (Math.PI / 180);
			this.__rotationSine = Math.sin(radians);
			this.__rotationCosine = Math.cos(radians);
			this.__transform.a = this.__rotationCosine * this.__scaleX;
			this.__transform.b = this.__rotationSine * this.__scaleX;
			this.__transform.c = -this.__rotationSine * this.__scaleY;
			this.__transform.d = this.__rotationCosine * this.__scaleY;
			this.__setTransformDirty();
		}
		return value;
	}
	,get_scale9Grid: function() {
		if(this.__scale9Grid == null) {
			return null;
		}
		return this.__scale9Grid.clone();
	}
	,set_scale9Grid: function(value) {
		if(value == null && this.__scale9Grid == null) {
			return value;
		}
		if(value != null && this.__scale9Grid != null && this.__scale9Grid.equals(value)) {
			return value;
		}
		if(value != null) {
			if(this.__scale9Grid == null) {
				this.__scale9Grid = new openfl_geom_Rectangle();
			}
			this.__scale9Grid.copyFrom(value);
		} else {
			this.__scale9Grid = null;
		}
		if(!this.__renderDirty) {
			this.__renderDirty = true;
			this.__setParentRenderDirty();
		}
		return value;
	}
	,get_scaleX: function() {
		return this.__scaleX;
	}
	,set_scaleX: function(value) {
		if(value != this.__scaleX) {
			this.__scaleX = value;
			if(this.__transform.b == 0) {
				if(value != this.__transform.a) {
					this.__setTransformDirty();
				}
				this.__transform.a = value;
			} else {
				var a = this.__rotationCosine * value;
				var b = this.__rotationSine * value;
				if(this.__transform.a != a || this.__transform.b != b) {
					this.__setTransformDirty();
				}
				this.__transform.a = a;
				this.__transform.b = b;
			}
		}
		return value;
	}
	,get_scaleY: function() {
		return this.__scaleY;
	}
	,set_scaleY: function(value) {
		if(value != this.__scaleY) {
			this.__scaleY = value;
			if(this.__transform.c == 0) {
				if(value != this.__transform.d) {
					this.__setTransformDirty();
				}
				this.__transform.d = value;
			} else {
				var c = -this.__rotationSine * value;
				var d = this.__rotationCosine * value;
				if(this.__transform.d != d || this.__transform.c != c) {
					this.__setTransformDirty();
				}
				this.__transform.c = c;
				this.__transform.d = d;
			}
		}
		return value;
	}
	,get_scrollRect: function() {
		if(this.__scrollRect == null) {
			return null;
		}
		return this.__scrollRect.clone();
	}
	,set_scrollRect: function(value) {
		if(value == null && this.__scrollRect == null) {
			return value;
		}
		if(value != null && this.__scrollRect != null && this.__scrollRect.equals(value)) {
			return value;
		}
		if(value != null) {
			if(this.__scrollRect == null) {
				this.__scrollRect = new openfl_geom_Rectangle();
			}
			this.__scrollRect.copyFrom(value);
		} else {
			this.__scrollRect = null;
		}
		this.__setTransformDirty();
		if(openfl_display_DisplayObject.__supportDOM) {
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		return value;
	}
	,get_shader: function() {
		return this.__shader;
	}
	,set_shader: function(value) {
		this.__shader = value;
		if(!this.__renderDirty) {
			this.__renderDirty = true;
			this.__setParentRenderDirty();
		}
		return value;
	}
	,get_transform: function() {
		if(this.__objectTransform == null) {
			this.__objectTransform = new openfl_geom_Transform(this);
		}
		return this.__objectTransform;
	}
	,set_transform: function(value) {
		if(value == null) {
			throw haxe_Exception.thrown(new openfl_errors_TypeError("Parameter transform must be non-null."));
		}
		if(this.__objectTransform == null) {
			this.__objectTransform = new openfl_geom_Transform(this);
		}
		this.__setTransformDirty();
		this.__objectTransform.set_matrix(value.get_matrix());
		if(!this.__objectTransform.get_colorTransform().__equals(value.get_colorTransform(),true) || !this.get_cacheAsBitmap() && this.__objectTransform.get_colorTransform().alphaMultiplier != value.get_colorTransform().alphaMultiplier) {
			this.__objectTransform.get_colorTransform().__copyFrom(value.get_colorTransform());
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		return this.__objectTransform;
	}
	,get_visible: function() {
		return this.__visible;
	}
	,set_visible: function(value) {
		if(value != this.__visible) {
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		return this.__visible = value;
	}
	,get_width: function() {
		var rect = openfl_geom_Rectangle.__pool.get();
		this.__getLocalBounds(rect);
		var width = rect.width;
		openfl_geom_Rectangle.__pool.release(rect);
		return width;
	}
	,set_width: function(value) {
		var rect = openfl_geom_Rectangle.__pool.get();
		var matrix = openfl_geom_Matrix.__pool.get();
		matrix.identity();
		this.__getBounds(rect,matrix);
		if(value != rect.width) {
			this.set_scaleX(value / rect.width);
		} else {
			this.set_scaleX(1);
		}
		openfl_geom_Rectangle.__pool.release(rect);
		openfl_geom_Matrix.__pool.release(matrix);
		return value;
	}
	,get_x: function() {
		return this.__transform.tx;
	}
	,set_x: function(value) {
		if(value != this.__transform.tx) {
			this.__setTransformDirty();
		}
		return this.__transform.tx = value;
	}
	,get_y: function() {
		return this.__transform.ty;
	}
	,set_y: function(value) {
		if(value != this.__transform.ty) {
			this.__setTransformDirty();
		}
		return this.__transform.ty = value;
	}
	,__class__: openfl_display_DisplayObject
	,__properties__: {set_y:"set_y",get_y:"get_y",set_x:"set_x",get_x:"get_x",set_width:"set_width",get_width:"get_width",set_visible:"set_visible",get_visible:"get_visible",set_transform:"set_transform",get_transform:"get_transform",set_shader:"set_shader",get_shader:"get_shader",set_scrollRect:"set_scrollRect",get_scrollRect:"get_scrollRect",set_scaleY:"set_scaleY",get_scaleY:"get_scaleY",set_scaleX:"set_scaleX",get_scaleX:"get_scaleX",set_scale9Grid:"set_scale9Grid",get_scale9Grid:"get_scale9Grid",set_rotation:"set_rotation",get_rotation:"get_rotation",get_root:"get_root",set_name:"set_name",get_name:"get_name",get_mouseY:"get_mouseY",get_mouseX:"get_mouseX",set_mask:"set_mask",get_mask:"get_mask",get_loaderInfo:"get_loaderInfo",set_height:"set_height",get_height:"get_height",set_filters:"set_filters",get_filters:"get_filters",set_cacheAsBitmapMatrix:"set_cacheAsBitmapMatrix",get_cacheAsBitmapMatrix:"get_cacheAsBitmapMatrix",set_cacheAsBitmap:"set_cacheAsBitmap",get_cacheAsBitmap:"get_cacheAsBitmap",set_blendMode:"set_blendMode",get_blendMode:"get_blendMode",set_alpha:"set_alpha",get_alpha:"get_alpha"}
});
var openfl_display_InteractiveObject = function() {
	openfl_display_DisplayObject.call(this);
	this.doubleClickEnabled = false;
	this.mouseEnabled = true;
	this.needsSoftKeyboard = false;
	this.__tabEnabled = null;
	this.__tabIndex = -1;
};
$hxClasses["openfl.display.InteractiveObject"] = openfl_display_InteractiveObject;
openfl_display_InteractiveObject.__name__ = "openfl.display.InteractiveObject";
openfl_display_InteractiveObject.__super__ = openfl_display_DisplayObject;
openfl_display_InteractiveObject.prototype = $extend(openfl_display_DisplayObject.prototype,{
	doubleClickEnabled: null
	,focusRect: null
	,mouseEnabled: null
	,needsSoftKeyboard: null
	,softKeyboardInputAreaOfInterest: null
	,__tabEnabled: null
	,__tabIndex: null
	,requestSoftKeyboard: function() {
		openfl__$internal_Lib.notImplemented({ fileName : "openfl/display/InteractiveObject.hx", lineNumber : 1251, className : "openfl.display.InteractiveObject", methodName : "requestSoftKeyboard"});
		return false;
	}
	,__allowMouseFocus: function() {
		return this.get_tabEnabled();
	}
	,__getInteractive: function(stack) {
		if(stack != null) {
			stack.push(this);
			if(this.parent != null) {
				this.parent.__getInteractive(stack);
			}
		}
		return true;
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly,hitObject) {
		if(!hitObject.get_visible() || this.__isMask || interactiveOnly && !this.mouseEnabled) {
			return false;
		}
		return openfl_display_DisplayObject.prototype.__hitTest.call(this,x,y,shapeFlag,stack,interactiveOnly,hitObject);
	}
	,__tabTest: function(stack) {
		if(this.get_tabEnabled()) {
			stack.push(this);
		}
	}
	,get_tabEnabled: function() {
		if(this.__tabEnabled == true) {
			return true;
		} else {
			return false;
		}
	}
	,set_tabEnabled: function(value) {
		if(this.__tabEnabled != value) {
			this.__tabEnabled = value;
			this.dispatchEvent(new openfl_events_Event("tabEnabledChange",true,false));
		}
		return this.__tabEnabled;
	}
	,get_tabIndex: function() {
		return this.__tabIndex;
	}
	,set_tabIndex: function(value) {
		if(this.__tabIndex != value) {
			if(value < -1) {
				throw haxe_Exception.thrown(new openfl_errors_RangeError("Parameter tabIndex must be a non-negative number; got " + value));
			}
			this.__tabIndex = value;
			this.dispatchEvent(new openfl_events_Event("tabIndexChange",true,false));
		}
		return this.__tabIndex;
	}
	,__class__: openfl_display_InteractiveObject
	,__properties__: $extend(openfl_display_DisplayObject.prototype.__properties__,{set_tabIndex:"set_tabIndex",get_tabIndex:"get_tabIndex",set_tabEnabled:"set_tabEnabled",get_tabEnabled:"get_tabEnabled"})
});
var openfl_display_DisplayObjectContainer = function() {
	openfl_display_InteractiveObject.call(this);
	this.mouseChildren = true;
	this.__tabChildren = true;
	this.__children = [];
	this.__removedChildren = openfl_Vector.toObjectVector(null);
};
$hxClasses["openfl.display.DisplayObjectContainer"] = openfl_display_DisplayObjectContainer;
openfl_display_DisplayObjectContainer.__name__ = "openfl.display.DisplayObjectContainer";
openfl_display_DisplayObjectContainer.__super__ = openfl_display_InteractiveObject;
openfl_display_DisplayObjectContainer.prototype = $extend(openfl_display_InteractiveObject.prototype,{
	mouseChildren: null
	,__removedChildren: null
	,__tabChildren: null
	,addChild: function(child) {
		return this.addChildAt(child,this.get_numChildren());
	}
	,addChildAt: function(child,index) {
		if(child == null) {
			var error = new openfl_errors_TypeError("Error #2007: Parameter child must be non-null.");
			error.errorID = 2007;
			throw haxe_Exception.thrown(error);
		} else if(child.stage == child) {
			var error = new openfl_errors_ArgumentError("Error #3783: A Stage object cannot be added as the child of another object.");
			error.errorID = 3783;
			throw haxe_Exception.thrown(error);
		}
		if(index > this.__children.length || index < 0) {
			throw haxe_Exception.thrown("Invalid index position " + index);
		}
		if(child.parent == this) {
			if(this.__children[index] != child) {
				HxOverrides.remove(this.__children,child);
				this.__children.splice(index,0,child);
				if(!this.__renderDirty) {
					this.__renderDirty = true;
					this.__setParentRenderDirty();
				}
			}
		} else {
			if(child.parent != null) {
				child.parent.removeChild(child);
			}
			this.__children.splice(index,0,child);
			child.parent = this;
			var addedToStage = this.stage != null && child.stage == null;
			if(addedToStage) {
				this.__setStageReference(this.stage);
			}
			child.__setTransformDirty();
			if(!child.__renderDirty) {
				child.__renderDirty = true;
				child.__setParentRenderDirty();
			}
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
			var event = openfl_events_Event.__pool.get();
			event.type = "added";
			event.bubbles = true;
			event.target = child;
			child.__dispatchWithCapture(event);
			openfl_events_Event.__pool.release(event);
			if(addedToStage) {
				event = new openfl_events_Event("addedToStage",false,false);
				child.__dispatchWithCapture(event);
				child.__dispatchChildren(event);
			}
		}
		return child;
	}
	,areInaccessibleObjectsUnderPoint: function(point) {
		return false;
	}
	,contains: function(child) {
		while(child != this && child != null) child = child.parent;
		return child == this;
	}
	,getChildAt: function(index) {
		if(index >= 0 && index < this.__children.length) {
			return this.__children[index];
		}
		return null;
	}
	,getChildByName: function(name) {
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.get_name() == name) {
				return child;
			}
		}
		return null;
	}
	,getChildIndex: function(child) {
		var _g = 0;
		var _g1 = this.__children.length;
		while(_g < _g1) {
			var i = _g++;
			if(this.__children[i] == child) {
				return i;
			}
		}
		return -1;
	}
	,getObjectsUnderPoint: function(point) {
		var stack = [];
		this.__hitTest(point.x,point.y,false,stack,false,this);
		stack.reverse();
		return stack;
	}
	,removeChild: function(child) {
		if(child != null && child.parent == this) {
			child.__setTransformDirty();
			if(!child.__renderDirty) {
				child.__renderDirty = true;
				child.__setParentRenderDirty();
			}
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
			var event = new openfl_events_Event("removed",true);
			child.__dispatchWithCapture(event);
			if(this.stage != null) {
				if(child.stage != null && this.stage.get_focus() == child) {
					this.stage.set_focus(null);
				}
				var event = new openfl_events_Event("removedFromStage",false,false);
				child.__dispatchWithCapture(event);
				child.__dispatchChildren(event);
				child.__setStageReference(null);
			}
			child.parent = null;
			HxOverrides.remove(this.__children,child);
			this.__removedChildren.push(child);
			child.__setTransformDirty();
		}
		return child;
	}
	,removeChildAt: function(index) {
		if(index >= 0 && index < this.__children.length) {
			return this.removeChild(this.__children[index]);
		}
		return null;
	}
	,removeChildren: function(beginIndex,endIndex) {
		if(endIndex == null) {
			endIndex = 2147483647;
		}
		if(beginIndex == null) {
			beginIndex = 0;
		}
		if(endIndex == 2147483647) {
			endIndex = this.__children.length - 1;
			if(endIndex < 0) {
				return;
			}
		}
		if(beginIndex > this.__children.length - 1) {
			return;
		} else if(endIndex < beginIndex || beginIndex < 0 || endIndex > this.__children.length) {
			throw haxe_Exception.thrown(new openfl_errors_RangeError("The supplied index is out of bounds."));
		}
		var numRemovals = endIndex - beginIndex;
		while(numRemovals >= 0) {
			this.removeChildAt(beginIndex);
			--numRemovals;
		}
	}
	,resolve: function(fieldName) {
		if(this.__children == null) {
			return null;
		}
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.get_name() == fieldName) {
				return child;
			}
		}
		return null;
	}
	,setChildIndex: function(child,index) {
		if(index >= 0 && index <= this.__children.length && child.parent == this) {
			HxOverrides.remove(this.__children,child);
			this.__children.splice(index,0,child);
		}
	}
	,stopAllMovieClips: function() {
		this.__stopAllMovieClips();
	}
	,swapChildren: function(child1,child2) {
		if(child1.parent == this && child2.parent == this) {
			var index1 = this.__children.indexOf(child1);
			var index2 = this.__children.indexOf(child2);
			this.__children[index1] = child2;
			this.__children[index2] = child1;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
	}
	,swapChildrenAt: function(index1,index2) {
		var swap = this.__children[index1];
		this.__children[index1] = this.__children[index2];
		this.__children[index2] = swap;
		swap = null;
		if(!this.__renderDirty) {
			this.__renderDirty = true;
			this.__setParentRenderDirty();
		}
	}
	,__cleanup: function() {
		openfl_display_InteractiveObject.prototype.__cleanup.call(this);
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.__cleanup();
		}
		var orphan = this.__removedChildren.iterator();
		while(orphan.hasNext()) {
			var orphan1 = orphan.next();
			if(orphan1.stage == null) {
				orphan1.__cleanup();
			}
		}
		this.__removedChildren.set_length(0);
	}
	,__cleanupRemovedChildren: function() {
		var orphan = this.__removedChildren.iterator();
		while(orphan.hasNext()) {
			var orphan1 = orphan.next();
			if(orphan1.stage == null) {
				orphan1.__cleanup();
			}
		}
		this.__removedChildren.set_length(0);
	}
	,__dispatchChildren: function(event) {
		if(this.__children != null) {
			var _g = 0;
			var _g1 = this.__children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				event.target = child;
				if(!child.__dispatchWithCapture(event)) {
					break;
				}
				child.__dispatchChildren(event);
			}
		}
	}
	,__enterFrame: function(deltaTime) {
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.__enterFrame(deltaTime);
		}
	}
	,__getBounds: function(rect,matrix) {
		openfl_display_InteractiveObject.prototype.__getBounds.call(this,rect,matrix);
		if(this.__children.length == 0) {
			return;
		}
		var childWorldTransform = openfl_geom_Matrix.__pool.get();
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.__scaleX == 0 || child.__scaleY == 0) {
				continue;
			}
			var local = child.__transform;
			childWorldTransform.a = local.a * matrix.a + local.b * matrix.c;
			childWorldTransform.b = local.a * matrix.b + local.b * matrix.d;
			childWorldTransform.c = local.c * matrix.a + local.d * matrix.c;
			childWorldTransform.d = local.c * matrix.b + local.d * matrix.d;
			childWorldTransform.tx = local.tx * matrix.a + local.ty * matrix.c + matrix.tx;
			childWorldTransform.ty = local.tx * matrix.b + local.ty * matrix.d + matrix.ty;
			child.__getBounds(rect,childWorldTransform);
		}
		openfl_geom_Matrix.__pool.release(childWorldTransform);
	}
	,__getFilterBounds: function(rect,matrix) {
		openfl_display_InteractiveObject.prototype.__getFilterBounds.call(this,rect,matrix);
		if(this.__scrollRect != null) {
			return;
		}
		if(this.__children.length == 0) {
			return;
		}
		var childWorldTransform = openfl_geom_Matrix.__pool.get();
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.__scaleX == 0 || child.__scaleY == 0 || child.__isMask) {
				continue;
			}
			var local = child.__transform;
			childWorldTransform.a = local.a * matrix.a + local.b * matrix.c;
			childWorldTransform.b = local.a * matrix.b + local.b * matrix.d;
			childWorldTransform.c = local.c * matrix.a + local.d * matrix.c;
			childWorldTransform.d = local.c * matrix.b + local.d * matrix.d;
			childWorldTransform.tx = local.tx * matrix.a + local.ty * matrix.c + matrix.tx;
			childWorldTransform.ty = local.tx * matrix.b + local.ty * matrix.d + matrix.ty;
			child.__getFilterBounds(rect,childWorldTransform);
		}
		openfl_geom_Matrix.__pool.release(childWorldTransform);
	}
	,__getRenderBounds: function(rect,matrix) {
		if(this.__scrollRect != null) {
			openfl_display_InteractiveObject.prototype.__getRenderBounds.call(this,rect,matrix);
			return;
		} else {
			openfl_display_InteractiveObject.prototype.__getBounds.call(this,rect,matrix);
		}
		if(this.__children.length == 0) {
			return;
		}
		var childWorldTransform = openfl_geom_Matrix.__pool.get();
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.__scaleX == 0 || child.__scaleY == 0 || child.__isMask) {
				continue;
			}
			var local = child.__transform;
			childWorldTransform.a = local.a * matrix.a + local.b * matrix.c;
			childWorldTransform.b = local.a * matrix.b + local.b * matrix.d;
			childWorldTransform.c = local.c * matrix.a + local.d * matrix.c;
			childWorldTransform.d = local.c * matrix.b + local.d * matrix.d;
			childWorldTransform.tx = local.tx * matrix.a + local.ty * matrix.c + matrix.tx;
			childWorldTransform.ty = local.tx * matrix.b + local.ty * matrix.d + matrix.ty;
			child.__getRenderBounds(rect,childWorldTransform);
		}
		openfl_geom_Matrix.__pool.release(childWorldTransform);
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly,hitObject) {
		if(!hitObject.get_visible() || this.__isMask || interactiveOnly && !this.mouseEnabled && !this.mouseChildren) {
			return false;
		}
		if(this.get_mask() != null && !this.get_mask().__hitTestMask(x,y)) {
			return false;
		}
		if(this.__scrollRect != null) {
			var point = openfl_geom_Point.__pool.get();
			point.setTo(x,y);
			var _this = this.__getRenderTransform();
			var norm = _this.a * _this.d - _this.b * _this.c;
			if(norm == 0) {
				point.x = -_this.tx;
				point.y = -_this.ty;
			} else {
				var px = 1.0 / norm * (_this.c * (_this.ty - point.y) + _this.d * (point.x - _this.tx));
				point.y = 1.0 / norm * (_this.a * (point.y - _this.ty) + _this.b * (_this.tx - point.x));
				point.x = px;
			}
			if(!this.__scrollRect.containsPoint(point)) {
				openfl_geom_Point.__pool.release(point);
				return false;
			}
			openfl_geom_Point.__pool.release(point);
		}
		var i = this.__children.length;
		if(interactiveOnly) {
			if(stack == null || !this.mouseChildren) {
				while(--i >= 0) if(this.__children[i].__hitTest(x,y,shapeFlag,null,true,this.__children[i])) {
					if(stack != null) {
						stack.push(hitObject);
					}
					return true;
				}
			} else if(stack != null) {
				var length = stack.length;
				var interactive = false;
				var hitTest = false;
				while(--i >= 0) {
					interactive = this.__children[i].__getInteractive(null);
					if(interactive || this.mouseEnabled && !hitTest) {
						if(this.__children[i].__hitTest(x,y,shapeFlag,stack,true,this.__children[i])) {
							hitTest = true;
							if(interactive && stack.length > length) {
								break;
							}
						}
					}
				}
				if(hitTest) {
					stack.splice(length,0,hitObject);
					return true;
				}
			}
		} else {
			var hitTest = false;
			while(--i >= 0) if(this.__children[i].__hitTest(x,y,shapeFlag,stack,false,this.__children[i])) {
				hitTest = true;
				if(stack == null) {
					break;
				}
			}
			return hitTest;
		}
		return false;
	}
	,__hitTestMask: function(x,y) {
		var i = this.__children.length;
		while(--i >= 0) if(this.__children[i].__hitTestMask(x,y)) {
			return true;
		}
		return false;
	}
	,__readGraphicsData: function(graphicsData,recurse) {
		openfl_display_InteractiveObject.prototype.__readGraphicsData.call(this,graphicsData,recurse);
		if(recurse) {
			var _g = 0;
			var _g1 = this.__children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.__readGraphicsData(graphicsData,recurse);
			}
		}
	}
	,__renderCairo: function(renderer) {
	}
	,__renderCairoMask: function(renderer) {
	}
	,__renderCanvas: function(renderer) {
		var orphan = this.__removedChildren.iterator();
		while(orphan.hasNext()) {
			var orphan1 = orphan.next();
			if(orphan1.stage == null) {
				orphan1.__cleanup();
			}
		}
		this.__removedChildren.set_length(0);
		if(!this.__renderable || this.__worldAlpha <= 0 || this.get_mask() != null && (this.get_mask().get_width() <= 0 || this.get_mask().get_height() <= 0)) {
			return;
		}
		openfl_display_InteractiveObject.prototype.__renderCanvas.call(this,renderer);
		if(this.__cacheBitmap != null && !this.__isCacheBitmapRender) {
			return;
		}
		renderer.__pushMaskObject(this);
		if(renderer.__stage != null) {
			var _g = 0;
			var _g1 = this.__children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.__renderCanvas(renderer);
				child.__renderDirty = false;
			}
			this.__renderDirty = false;
		} else {
			var _g = 0;
			var _g1 = this.__children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.__renderCanvas(renderer);
			}
		}
		renderer.__popMaskObject(this);
	}
	,__renderCanvasMask: function(renderer) {
		var orphan = this.__removedChildren.iterator();
		while(orphan.hasNext()) {
			var orphan1 = orphan.next();
			if(orphan1.stage == null) {
				orphan1.__cleanup();
			}
		}
		this.__removedChildren.set_length(0);
		if(this.__graphics != null) {
			openfl__$internal_renderer_canvas_CanvasGraphics.renderMask(this.__graphics,renderer);
		}
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.__renderCanvasMask(renderer);
		}
	}
	,__renderDOM: function(renderer) {
		var orphan = this.__removedChildren.iterator();
		while(orphan.hasNext()) {
			var orphan1 = orphan.next();
			if(orphan1.stage == null) {
				orphan1.__renderDOM(renderer);
			}
		}
		var orphan = this.__removedChildren.iterator();
		while(orphan.hasNext()) {
			var orphan1 = orphan.next();
			if(orphan1.stage == null) {
				orphan1.__cleanup();
			}
		}
		this.__removedChildren.set_length(0);
		openfl_display_InteractiveObject.prototype.__renderDOM.call(this,renderer);
		if(this.__cacheBitmap != null && !this.__isCacheBitmapRender) {
			return;
		}
		renderer.__pushMaskObject(this);
		if(renderer.__stage != null) {
			var _g = 0;
			var _g1 = this.__children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.__renderDOM(renderer);
				child.__renderDirty = false;
			}
			this.__renderDirty = false;
		} else {
			var _g = 0;
			var _g1 = this.__children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.__renderDOM(renderer);
			}
		}
		renderer.__popMaskObject(this);
	}
	,__renderDOMClear: function(renderer) {
		var orphan = this.__removedChildren.iterator();
		while(orphan.hasNext()) {
			var orphan1 = orphan.next();
			if(orphan1.stage == null) {
				orphan1.__renderDOMClear(renderer);
			}
		}
		var orphan = this.__removedChildren.iterator();
		while(orphan.hasNext()) {
			var orphan1 = orphan.next();
			if(orphan1.stage == null) {
				orphan1.__cleanup();
			}
		}
		this.__removedChildren.set_length(0);
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.__renderDOMClear(renderer);
		}
	}
	,__renderGL: function(renderer) {
		var orphan = this.__removedChildren.iterator();
		while(orphan.hasNext()) {
			var orphan1 = orphan.next();
			if(orphan1.stage == null) {
				orphan1.__cleanup();
			}
		}
		this.__removedChildren.set_length(0);
		if(!this.__renderable || this.__worldAlpha <= 0) {
			return;
		}
		openfl_display_InteractiveObject.prototype.__renderGL.call(this,renderer);
		if(this.__cacheBitmap != null && !this.__isCacheBitmapRender) {
			return;
		}
		if(this.__children.length > 0) {
			renderer.__pushMaskObject(this);
			if(renderer.__stage != null) {
				var _g = 0;
				var _g1 = this.__children;
				while(_g < _g1.length) {
					var child = _g1[_g];
					++_g;
					child.__renderGL(renderer);
					child.__renderDirty = false;
				}
				this.__renderDirty = false;
			} else {
				var _g = 0;
				var _g1 = this.__children;
				while(_g < _g1.length) {
					var child = _g1[_g];
					++_g;
					child.__renderGL(renderer);
				}
			}
		}
		if(this.__children.length > 0) {
			renderer.__popMaskObject(this);
		}
	}
	,__renderGLMask: function(renderer) {
		var orphan = this.__removedChildren.iterator();
		while(orphan.hasNext()) {
			var orphan1 = orphan.next();
			if(orphan1.stage == null) {
				orphan1.__cleanup();
			}
		}
		this.__removedChildren.set_length(0);
		if(this.__graphics != null) {
			openfl__$internal_renderer_context3D_Context3DShape.renderMask(this,renderer);
		}
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.__renderGLMask(renderer);
		}
	}
	,__setStageReference: function(stage) {
		openfl_display_InteractiveObject.prototype.__setStageReference.call(this,stage);
		if(this.__children != null) {
			var _g = 0;
			var _g1 = this.__children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.__setStageReference(stage);
			}
		}
	}
	,__setWorldTransformInvalid: function() {
		if(!this.__worldTransformInvalid) {
			this.__worldTransformInvalid = true;
			if(this.__children != null) {
				var _g = 0;
				var _g1 = this.__children;
				while(_g < _g1.length) {
					var child = _g1[_g];
					++_g;
					child.__setWorldTransformInvalid();
				}
			}
		}
	}
	,__shouldCacheHardware: function(value) {
		if(value == true) {
			return true;
		}
		value = openfl_display_InteractiveObject.prototype.__shouldCacheHardware.call(this,value);
		if(value == true) {
			return true;
		}
		if(this.__children != null) {
			var _g = 0;
			var _g1 = this.__children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				value = child.__shouldCacheHardware(value);
				if(value == true) {
					return true;
				}
			}
		}
		return value;
	}
	,__stopAllMovieClips: function() {
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.__stopAllMovieClips();
		}
	}
	,__tabTest: function(stack) {
		openfl_display_InteractiveObject.prototype.__tabTest.call(this,stack);
		if(!this.get_tabChildren()) {
			return;
		}
		var interactive = false;
		var interactiveObject = null;
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			interactive = child.__getInteractive(null);
			if(interactive) {
				interactiveObject = child;
				interactiveObject.__tabTest(stack);
			}
		}
	}
	,__update: function(transformOnly,updateChildren) {
		openfl_display_InteractiveObject.prototype.__update.call(this,transformOnly,updateChildren);
		if(updateChildren) {
			var _g = 0;
			var _g1 = this.__children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.__update(transformOnly,true);
			}
		}
	}
	,get_numChildren: function() {
		return this.__children.length;
	}
	,get_tabChildren: function() {
		return this.__tabChildren;
	}
	,set_tabChildren: function(value) {
		if(this.__tabChildren != value) {
			this.__tabChildren = value;
			this.dispatchEvent(new openfl_events_Event("tabChildrenChange",true,false));
		}
		return this.__tabChildren;
	}
	,__class__: openfl_display_DisplayObjectContainer
	,__properties__: $extend(openfl_display_InteractiveObject.prototype.__properties__,{set_tabChildren:"set_tabChildren",get_tabChildren:"get_tabChildren",get_numChildren:"get_numChildren"})
});
var openfl_display_Sprite = function() {
	openfl_display_DisplayObjectContainer.call(this);
	this.__buttonMode = false;
	this.useHandCursor = true;
};
$hxClasses["openfl.display.Sprite"] = openfl_display_Sprite;
openfl_display_Sprite.__name__ = "openfl.display.Sprite";
openfl_display_Sprite.__super__ = openfl_display_DisplayObjectContainer;
openfl_display_Sprite.prototype = $extend(openfl_display_DisplayObjectContainer.prototype,{
	dropTarget: null
	,hitArea: null
	,useHandCursor: null
	,__buttonMode: null
	,startDrag: function(lockCenter,bounds) {
		if(lockCenter == null) {
			lockCenter = false;
		}
		if(this.stage != null) {
			this.stage.__startDrag(this,lockCenter,bounds);
		}
	}
	,stopDrag: function() {
		if(this.stage != null) {
			this.stage.__stopDrag(this);
		}
	}
	,__getCursor: function() {
		if(this.__buttonMode && this.useHandCursor) {
			return "button";
		} else {
			return null;
		}
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly,hitObject) {
		if(interactiveOnly && !this.mouseEnabled && !this.mouseChildren) {
			return false;
		}
		if(!hitObject.get_visible() || this.__isMask) {
			return this.__hitTestHitArea(x,y,shapeFlag,stack,interactiveOnly,hitObject);
		}
		if(this.get_mask() != null && !this.get_mask().__hitTestMask(x,y)) {
			return this.__hitTestHitArea(x,y,shapeFlag,stack,interactiveOnly,hitObject);
		}
		if(this.__scrollRect != null) {
			var point = openfl_geom_Point.__pool.get();
			point.setTo(x,y);
			var _this = this.__getRenderTransform();
			var norm = _this.a * _this.d - _this.b * _this.c;
			if(norm == 0) {
				point.x = -_this.tx;
				point.y = -_this.ty;
			} else {
				var px = 1.0 / norm * (_this.c * (_this.ty - point.y) + _this.d * (point.x - _this.tx));
				point.y = 1.0 / norm * (_this.a * (point.y - _this.ty) + _this.b * (_this.tx - point.x));
				point.x = px;
			}
			if(!this.__scrollRect.containsPoint(point)) {
				openfl_geom_Point.__pool.release(point);
				return this.__hitTestHitArea(x,y,shapeFlag,stack,true,hitObject);
			}
			openfl_geom_Point.__pool.release(point);
		}
		if(openfl_display_DisplayObjectContainer.prototype.__hitTest.call(this,x,y,shapeFlag,stack,interactiveOnly,hitObject)) {
			if(stack != null) {
				return interactiveOnly;
			} else {
				return true;
			}
		} else if(this.hitArea == null && this.__graphics != null && this.__graphics.__hitTest(x,y,shapeFlag,this.__getRenderTransform())) {
			if(stack != null && (!interactiveOnly || this.mouseEnabled)) {
				stack.push(hitObject);
			}
			return true;
		}
		return this.__hitTestHitArea(x,y,shapeFlag,stack,interactiveOnly,hitObject);
	}
	,__hitTestHitArea: function(x,y,shapeFlag,stack,interactiveOnly,hitObject) {
		if(this.hitArea != null) {
			if(!this.hitArea.mouseEnabled) {
				this.hitArea.mouseEnabled = true;
				var hitTest = this.hitArea.__hitTest(x,y,shapeFlag,null,true,hitObject);
				this.hitArea.mouseEnabled = false;
				if(stack != null && hitTest) {
					stack[stack.length] = hitObject;
				}
				return hitTest;
			}
		}
		return false;
	}
	,__hitTestMask: function(x,y) {
		if(openfl_display_DisplayObjectContainer.prototype.__hitTestMask.call(this,x,y)) {
			return true;
		} else if(this.__graphics != null && this.__graphics.__hitTest(x,y,true,this.__getRenderTransform())) {
			return true;
		}
		return false;
	}
	,get_graphics: function() {
		if(this.__graphics == null) {
			this.__graphics = new openfl_display_Graphics(this);
		}
		return this.__graphics;
	}
	,get_tabEnabled: function() {
		if(this.__tabEnabled == null) {
			return this.__buttonMode;
		} else {
			return this.__tabEnabled;
		}
	}
	,get_buttonMode: function() {
		return this.__buttonMode;
	}
	,set_buttonMode: function(value) {
		return this.__buttonMode = value;
	}
	,__class__: openfl_display_Sprite
	,__properties__: $extend(openfl_display_DisplayObjectContainer.prototype.__properties__,{get_graphics:"get_graphics",set_buttonMode:"set_buttonMode",get_buttonMode:"get_buttonMode"})
});
var zygame_mini_MiniExtend = function() { };
$hxClasses["zygame.mini.MiniExtend"] = zygame_mini_MiniExtend;
zygame_mini_MiniExtend.__name__ = "zygame.mini.MiniExtend";
zygame_mini_MiniExtend.__isInterface__ = true;
zygame_mini_MiniExtend.prototype = {
	baseBuilder: null
	,__class__: zygame_mini_MiniExtend
};
var zygame_core_Refresher = function() { };
$hxClasses["zygame.core.Refresher"] = zygame_core_Refresher;
zygame_core_Refresher.__name__ = "zygame.core.Refresher";
zygame_core_Refresher.__isInterface__ = true;
zygame_core_Refresher.prototype = {
	onFrame: null
	,__class__: zygame_core_Refresher
};
var zygame_display_DisplayObjectContainer = function() {
	this._vAlign = "top";
	this._hAlign = "left";
	this.bindType = null;
	this.subtractionHeight = 0;
	this.isInit = false;
	openfl_display_Sprite.call(this);
	this.addEventListener("addedToStage",$bind(this,this.onInitEvent));
	this.addEventListener("removed",$bind(this,this.onSelftRemove));
	this.addEventListener("removedFromStage",$bind(this,this.onRemoveEvent));
};
$hxClasses["zygame.display.DisplayObjectContainer"] = zygame_display_DisplayObjectContainer;
zygame_display_DisplayObjectContainer.__name__ = "zygame.display.DisplayObjectContainer";
zygame_display_DisplayObjectContainer.__interfaces__ = [zygame_mini_MiniExtend,zygame_core_Refresher];
zygame_display_DisplayObjectContainer.__super__ = openfl_display_Sprite;
zygame_display_DisplayObjectContainer.prototype = $extend(openfl_display_Sprite.prototype,{
	customData: null
	,baseBuilder: null
	,isInit: null
	,subtractionHeight: null
	,bindType: null
	,_hAlign: null
	,get_hAlign: function() {
		return this._hAlign;
	}
	,set_hAlign: function(value) {
		this._hAlign = value;
		this.alignPivot(this._vAlign,this._hAlign);
		return value;
	}
	,_vAlign: null
	,get_vAlign: function() {
		return this._vAlign;
	}
	,set_vAlign: function(value) {
		this._vAlign = value;
		this.alignPivot(this._vAlign,this._hAlign);
		return value;
	}
	,onSelftRemove: function(e) {
		this.onRemove();
	}
	,onInitEvent: function(e) {
		if(!this.isInit) {
			this.isInit = true;
			this.onInit();
		}
		this.onAddToStage();
	}
	,onInit: function() {
		if(this.baseBuilder != null) {
			var call = this.baseBuilder.getFunction("onInit");
			if(call != null) {
				call();
			}
		}
	}
	,onFrame: function() {
		if(this.baseBuilder != null) {
			var call = this.baseBuilder.getFunction("onFrame");
			if(call != null) {
				call();
			}
		}
	}
	,getStageWidth: function() {
		return zygame_core_Start.stageWidth;
	}
	,getStageHeight: function() {
		return zygame_core_Start.stageHeight - this.subtractionHeight;
	}
	,getTopView: function() {
		return zygame_core_Start.current.topView;
	}
	,getSubtractionHeight: function() {
		return this.subtractionHeight;
	}
	,setSubtractionStageHeight: function(height) {
		this.subtractionHeight = height;
	}
	,alignPivot: function(v,h) {
		this._vAlign = v;
		this._hAlign = h;
	}
	,setFrameEvent: function(listen) {
		if(listen) {
			zygame_core_Start.current.addToUpdate(this);
		} else {
			zygame_core_Start.current.removeToUpdate(this);
		}
	}
	,onRemoveEvent: function(e) {
		this.onRemoveToStage();
	}
	,scale: function(f) {
		this.set_scaleX(f);
		this.set_scaleY(f);
		return this;
	}
	,log: function(a,b,c,d,e,f) {
		if(f == null) {
			f = "";
		}
		if(e == null) {
			e = "";
		}
		if(d == null) {
			d = "";
		}
		if(c == null) {
			c = "";
		}
		if(b == null) {
			b = "";
		}
		haxe_Log.trace(a,{ fileName : "Source/zygame/display/DisplayObjectContainer.hx", lineNumber : 195, className : "zygame.display.DisplayObjectContainer", methodName : "log", customParams : [b,c,d,e,f]});
	}
	,destroy: function() {
		var _g = 0;
		var _g1 = this.get_numChildren();
		while(_g < _g1) {
			var i = _g++;
			var child = this.getChildAt(i);
			if(((child) instanceof zygame_display_DisplayObjectContainer)) {
				(js_Boot.__cast(child , zygame_display_DisplayObjectContainer)).destroy();
			}
		}
	}
	,onRemove: function() {
	}
	,onRemoveToStage: function() {
	}
	,onAddToStage: function() {
	}
	,getAspectRatio: function() {
		return zygame_core_Start.current.stage.stageWidth / zygame_core_Start.current.stage.stageHeight;
	}
	,getBounds: function(target) {
		var rect = openfl_display_Sprite.prototype.getBounds.call(this,target);
		return rect;
	}
	,__class__: zygame_display_DisplayObjectContainer
	,__properties__: $extend(openfl_display_Sprite.prototype.__properties__,{set_vAlign:"set_vAlign",get_vAlign:"get_vAlign",set_hAlign:"set_hAlign",get_hAlign:"get_hAlign"})
});
var zygame_display_TouchDisplayObjectContainer = function() {
	this.mouseEvent = true;
	this.isTouch = false;
	zygame_display_DisplayObjectContainer.call(this);
};
$hxClasses["zygame.display.TouchDisplayObjectContainer"] = zygame_display_TouchDisplayObjectContainer;
zygame_display_TouchDisplayObjectContainer.__name__ = "zygame.display.TouchDisplayObjectContainer";
zygame_display_TouchDisplayObjectContainer.__super__ = zygame_display_DisplayObjectContainer;
zygame_display_TouchDisplayObjectContainer.prototype = $extend(zygame_display_DisplayObjectContainer.prototype,{
	isTouch: null
	,mouseEvent: null
	,setTouchEvent: function(listen,userCapture,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(userCapture == null) {
			userCapture = false;
		}
		this.isTouch = listen;
		openfl_ui_Multitouch.inputMode = 2;
		if(listen) {
			this.addEventListener("mouseDown",$bind(this,this.onMouseDown),userCapture,priority);
			zygame_core_Start.current.stage.addEventListener("mouseUp",$bind(this,this.onMouseUp));
			this.addEventListener("mouseMove",$bind(this,this.onMouseMove),userCapture,priority);
			this.addEventListener("mouseOut",$bind(this,this.onTouchOut),userCapture,priority);
			this.addEventListener("mouseOver",$bind(this,this.onTouchOver),userCapture,priority);
		} else {
			this.removeEventListener("mouseDown",$bind(this,this.onMouseDown));
			zygame_core_Start.current.stage.removeEventListener("mouseUp",$bind(this,this.onMouseUp));
			this.removeEventListener("mouseMove",$bind(this,this.onMouseMove));
			this.removeEventListener("mouseOut",$bind(this,this.onTouchOut));
			this.removeEventListener("mouseOver",$bind(this,this.onTouchOver));
		}
	}
	,onMouseDown: function(e) {
		var event = new openfl_events_TouchEvent("touchBegin",false,false,0,false,e.localX,e.localY,0,0,0);
		event.stageX = e.stageX;
		event.stageY = e.stageY;
		event.target = e.target;
		event.currentTarget = e.currentTarget;
		this.onTouchBegin(event);
	}
	,onMouseMove: function(e) {
		var event = new openfl_events_TouchEvent("touchMove",false,false,0,false,e.localX,e.localY,0,0,0);
		event.stageX = e.stageX;
		event.stageY = e.stageY;
		event.target = e.target;
		event.currentTarget = e.currentTarget;
		this.onTouchMove(event);
	}
	,onMouseUp: function(e) {
		var event = new openfl_events_TouchEvent("touchEnd",false,false,0,false,e.localX,e.localY,0,0,0);
		event.stageX = e.stageX;
		event.stageY = e.stageY;
		event.target = e.target;
		event.currentTarget = e.currentTarget;
		this.onTouchEnd(event);
	}
	,onTouchBegin: function(e) {
		if(this.baseBuilder != null) {
			var call = this.baseBuilder.getFunction("onTouchBegin");
			if(call != null) {
				call([e]);
			}
		}
	}
	,onTouchEnd: function(e) {
		if(this.baseBuilder != null) {
			var call = this.baseBuilder.getFunction("onTouchEnd");
			if(call != null) {
				call([e]);
			}
		}
	}
	,onTouchMove: function(e) {
		if(this.baseBuilder != null) {
			var call = this.baseBuilder.getFunction("onTouchMove");
			if(call != null) {
				call([e]);
			}
		}
	}
	,onTouchOut: function(e) {
	}
	,onTouchOver: function(e) {
	}
	,onInitEvent: function(e) {
		zygame_display_DisplayObjectContainer.prototype.onInitEvent.call(this,e);
		this.setTouchEvent(this.isTouch);
	}
	,onRemoveEvent: function(e) {
		zygame_display_DisplayObjectContainer.prototype.onRemoveEvent.call(this,e);
		var _isTouch = this.isTouch;
		this.setTouchEvent(false);
		this.isTouch = _isTouch;
	}
	,__class__: zygame_display_TouchDisplayObjectContainer
});
var zygame_components_base_Component = function() {
	zygame_display_TouchDisplayObjectContainer.call(this);
	this.childComponents = [];
};
$hxClasses["zygame.components.base.Component"] = zygame_components_base_Component;
zygame_components_base_Component.__name__ = "zygame.components.base.Component";
zygame_components_base_Component.__super__ = zygame_display_TouchDisplayObjectContainer;
zygame_components_base_Component.prototype = $extend(zygame_display_TouchDisplayObjectContainer.prototype,{
	childComponents: null
	,onInit: function() {
		zygame_display_TouchDisplayObjectContainer.prototype.onInit.call(this);
		this.initComponents();
	}
	,initComponents: function() {
		throw haxe_Exception.thrown("请不要直接使用Component类，它不能直接被初始化！每个新的组件都要重写该方法。");
	}
	,updateComponents: function() {
	}
	,findComponent: function(pname) {
		var _g = 0;
		var _g1 = this.childComponents.length;
		while(_g < _g1) {
			var i = _g++;
			if(this.childComponents[i].get_name() == pname) {
				return this.childComponents[i];
			}
		}
		return null;
	}
	,addComponent: function(child,pname) {
		if(child.parent == null) {
			this.addChild(child);
		}
		child.set_name(pname);
		this.childComponents.push(child);
		return child;
	}
	,_skin: null
	,set_skin: function(s) {
		if(this._skin != null) {
			this._skin.removeEventListener("change",$bind(this,this._onSkinChange));
		}
		this._skin = s;
		this._skin.addEventListener("change",$bind(this,this._onSkinChange));
		this.updateComponents();
		return s;
	}
	,get_skin: function() {
		return this._skin;
	}
	,_onSkinChange: function(e) {
		this.updateComponents();
	}
	,set_x: function(value) {
		zygame_display_TouchDisplayObjectContainer.prototype.set_x.call(this,value);
		return value;
	}
	,set_y: function(value) {
		zygame_display_TouchDisplayObjectContainer.prototype.set_y.call(this,value);
		return value;
	}
	,_layoutData: null
	,get_layoutData: function() {
		if(this._layoutData == null) {
			this._layoutData = { };
		}
		return this._layoutData;
	}
	,set_layoutData: function(data) {
		this._layoutData = data;
		return this._layoutData;
	}
	,hasLayoutData: function() {
		return this._layoutData != null;
	}
	,__class__: zygame_components_base_Component
	,__properties__: $extend(zygame_display_TouchDisplayObjectContainer.prototype.__properties__,{set_layoutData:"set_layoutData",get_layoutData:"get_layoutData",set_skin:"set_skin",get_skin:"get_skin"})
});
var zygame_components_ZBox = function() {
	this._componentHeight = 0;
	this._componentWidth = 0;
	zygame_components_base_Component.call(this);
	this.childs = [];
};
$hxClasses["zygame.components.ZBox"] = zygame_components_ZBox;
zygame_components_ZBox.__name__ = "zygame.components.ZBox";
zygame_components_ZBox.__super__ = zygame_components_base_Component;
zygame_components_ZBox.prototype = $extend(zygame_components_base_Component.prototype,{
	childs: null
	,initComponents: function() {
	}
	,updateComponents: function() {
		if(this.get_layout() != null) {
			this.get_layout().layout(this);
		}
	}
	,addChild: function(display) {
		return zygame_components_base_Component.prototype.addChild.call(this,display);
	}
	,addChildAt: function(display,index) {
		this.childs.push(display);
		var child = zygame_components_base_Component.prototype.addChildAt.call(this,display,index);
		this.updateComponents();
		return child;
	}
	,addChildSuper: function(display) {
		this.childs.push(display);
		return zygame_components_base_Component.prototype.addChildAt.call(this,display,this.get_numChildren());
	}
	,removeChildSuper: function(display) {
		HxOverrides.remove(this.childs,display);
		return zygame_components_base_Component.prototype.removeChild.call(this,display);
	}
	,removeChild: function(display) {
		HxOverrides.remove(this.childs,display);
		this.updateComponents();
		return zygame_components_base_Component.prototype.removeChild.call(this,display);
	}
	,_layout: null
	,get_layout: function() {
		return this._layout;
	}
	,set_layout: function(value) {
		if(this.stage == null) {
			throw haxe_Exception.thrown("请在组件初始化完毕后调用。");
		}
		this._layout = value;
		this.updateComponents();
		return value;
	}
	,_componentWidth: null
	,_componentHeight: null
	,set_width: function(value) {
		this._componentWidth = value;
		return value;
	}
	,set_height: function(value) {
		this._componentHeight = value;
		return value;
	}
	,get_width: function() {
		if(this._componentWidth == 0) {
			return Math.abs(zygame_components_base_Component.prototype.get_width.call(this));
		}
		return this._componentWidth;
	}
	,get_height: function() {
		if(this._componentHeight == 0) {
			return Math.abs(zygame_components_base_Component.prototype.get_height.call(this));
		}
		return this._componentHeight;
	}
	,isAutoWidth: function() {
		return this._componentWidth == 0;
	}
	,isAutoHeight: function() {
		return this._componentHeight == 0;
	}
	,align: function(obj,leftPx,rightPx,topPx,bottomPx,centerX,centerY) {
		if(centerY == null) {
			centerY = 0;
		}
		if(centerX == null) {
			centerX = 0;
		}
		if(typeof(leftPx) == "string") {
			leftPx = Std.parseInt(leftPx);
		}
		if(typeof(rightPx) == "string") {
			rightPx = Std.parseInt(rightPx);
		}
		if(typeof(topPx) == "string") {
			topPx = Std.parseInt(topPx);
		}
		if(typeof(bottomPx) == "string") {
			bottomPx = Std.parseInt(bottomPx);
		}
		if(typeof(centerX) == "string") {
			centerX = Std.parseInt(centerX);
		}
		if(typeof(centerY) == "string") {
			centerY = Std.parseInt(centerY);
		}
		var rect = obj.getBounds(obj.parent);
		var pos = new openfl_geom_Point(rect.x,rect.y);
		pos.x -= obj.get_x();
		pos.y -= obj.get_y();
		pos.x *= -1;
		pos.y *= -1;
		if(leftPx != null) {
			obj.set_x(js_Boot.__cast(leftPx , Int) + pos.x);
		} else if(rightPx != null) {
			obj.set_x(this.get_width() - js_Boot.__cast(rightPx , Int) + pos.x - rect.width);
		} else if(centerX != null) {
			obj.set_x(this.get_width() / 2 + js_Boot.__cast(centerX , Int) + pos.x - rect.width / 2);
		}
		if(topPx != null) {
			obj.set_y(js_Boot.__cast(topPx , Int) + pos.y);
		} else if(bottomPx != null) {
			obj.set_y(this.get_height() - js_Boot.__cast(bottomPx , Int) + pos.y - rect.height);
		} else if(centerY != null) {
			obj.set_y(this.get_height() / 2 + js_Boot.__cast(centerY , Int) + pos.y - rect.height / 2);
		}
	}
	,__class__: zygame_components_ZBox
	,__properties__: $extend(zygame_components_base_Component.prototype.__properties__,{set_layout:"set_layout",get_layout:"get_layout"})
});
var zygame_components_ZScene = function() {
	zygame_components_ZBox.call(this);
};
$hxClasses["zygame.components.ZScene"] = zygame_components_ZScene;
zygame_components_ZScene.__name__ = "zygame.components.ZScene";
zygame_components_ZScene.__super__ = zygame_components_ZBox;
zygame_components_ZScene.prototype = $extend(zygame_components_ZBox.prototype,{
	onSceneReset: function() {
	}
	,onSceneRelease: function() {
		this.setFrameEvent(false);
		this.setTouchEvent(false);
	}
	,createScene: function(cName) {
		return zygame_utils_ZSceneManager.get_current().createScene(cName);
	}
	,replaceScene: function(cName,isReleaseScene) {
		if(isReleaseScene == null) {
			isReleaseScene = false;
		}
		return zygame_utils_ZSceneManager.get_current().replaceScene(cName,isReleaseScene);
	}
	,get_width: function() {
		return this.getStageWidth();
	}
	,get_height: function() {
		return this.getStageHeight();
	}
	,__class__: zygame_components_ZScene
});
var zygame_core_Start = function(HDWidth,HDHeight,isDebug) {
	if(isDebug == null) {
		isDebug = false;
	}
	if(HDHeight == null) {
		HDHeight = 480;
	}
	if(HDWidth == null) {
		HDWidth = 800;
	}
	this._lockLandscape = false;
	this.isFrameing = false;
	this.updateStatsList = [];
	this.fps60 = new zygame_utils_FPSUtil(61);
	this.isDebug = false;
	this.HDWidth = 0;
	this.HDHeight = 0;
	zygame_components_ZScene.call(this);
	zygame_net_UDP.init();
	zygame_components_ZBuilder.init();
	zygame_utils_Log.clear();
	this.HDHeight = HDHeight;
	this.HDWidth = HDWidth;
	this.isDebug = isDebug;
	this.updates = openfl_Vector.toObjectVector(null);
	zygame_core_Start.current = this;
	this.log("[zygameui] build time:","2020-08-15 19:11:44");
	this.log("[zygameui] channel=" + zygame_utils_Lib.getChannel() + " render=" + zygame_utils_Lib.getRenderMode());
	zygame_cmnt_Cmnt.initUserData();
	var defines = JSON.parse("{\"zybuild\":\"1\",\"pomelo_haxe\":\"0.6.6\",\"js\":\"1\",\"utf16\":\"1\",\"no-compilation\":\"1\",\"hscript\":\"2.4.0\",\"lime_html5\":\"1\",\"source-header\":\"Generated by Haxe 4.1.3\",\"haxe4\":\"1\",\"haxe_ver\":\"4.103\",\"lime_webgl\":\"1\",\"true\":\"1\",\"lime-webgl\":\"1\",\"js_es\":\"5\",\"haxe\":\"4.1.3\",\"target.name\":\"js\",\"lime-canvas\":\"1\",\"castle\":\"1.6.1\",\"maplive\":\"1\",\"lime-dom\":\"1\",\"pomelo-haxe\":\"0.6.6\",\"lime_canvas\":\"1\",\"js_es5\":\"1\",\"lime_dom\":\"1\",\"openfl-html5\":\"1\",\"no_compilation\":\"1\",\"lime\":\"7.7.2\",\"json2object\":\"3.8.0\",\"smoothing\":\"1\",\"dce\":\"std\",\"haxe3\":\"1\",\"target.utf16\":\"true\",\"html5_platform\":\"1\",\"spine_hx\":\"3.6.0\",\"hxjsonast\":\"1.0.1\",\"lime-html5\":\"1\",\"js-es5\":\"1\",\"spine-hx\":\"3.6.0\",\"builddoc\":\"1\",\"html5-platform\":\"1\",\"tweenxcore\":\"1.0.4\",\"lime_howlerjs\":\"1\",\"differ\":\"1.3.0\",\"gl_stats\":\"1\",\"openfl_html5\":\"1\",\"openfl\":\"8.9.8\",\"web\":\"1\",\"html5\":\"1\",\"howlerjs\":\"1\",\"tools\":\"7.7.2\",\"lime-howlerjs\":\"1\",\"target.unicode\":\"true\",\"zygame\":\"1\"}");
	this.log(defines);
	var keys = Reflect.fields(defines);
	var _g = 0;
	while(_g < keys.length) {
		var key = keys[_g];
		++_g;
		zygame_components_ZBuilder.defineValue(key,Reflect.getProperty(defines,key));
	}
	if(this.stage.application.__window.context.webgl != null) {
		var createTextureCall = ($_=this.stage.application.__window.context.webgl,$bind($_,$_.createTexture));
		this.stage.application.__window.context.webgl.createTexture = function() {
			zygame_core_Start.TEXTURE_COUNT++;
			return createTextureCall();
		};
		var deleteTextureCall = ($_=this.stage.application.__window.context.webgl,$bind($_,$_.deleteTexture));
		this.stage.application.__window.context.webgl.deleteTexture = function(texture) {
			zygame_core_Start.TEXTURE_COUNT--;
			deleteTextureCall(texture);
		};
	}
	window.URL2 = window.URL;
	window.Blob2 = window.Blob;
	if(window.URL == null) {
		window.URL = { createObjectURL : function(file) {
			return null;
		}};
	} else {
		window.URL.createObjectURL = function(file) {
			return null;
		};
	}
	window.Blob = function() {
	};
	if(window.localStorage != null) {
		window.localStorage.removeItem = function() {
		};
	}
};
$hxClasses["zygame.core.Start"] = zygame_core_Start;
zygame_core_Start.__name__ = "zygame.core.Start";
zygame_core_Start.__super__ = zygame_components_ZScene;
zygame_core_Start.prototype = $extend(zygame_components_ZScene.prototype,{
	HDHeight: null
	,HDWidth: null
	,isDebug: null
	,updates: null
	,fps60: null
	,fps: null
	,topView: null
	,updateStatsList: null
	,isFrameing: null
	,_lockLandscape: null
	,lockLandscape: function() {
		this._lockLandscape = true;
	}
	,superInitEvent: function(e) {
		zygame_components_ZScene.prototype.onInitEvent.call(this,e);
		haxe_Log.trace("[zygameui stage size]",{ fileName : "Source/zygame/core/Start.hx", lineNumber : 197, className : "zygame.core.Start", methodName : "superInitEvent", customParams : ["width:",this.getStageWidth(),"height:",this.getStageHeight()]});
	}
	,onInitEvent: function(e) {
		if(zygame_components_ZQuad.quadBitmapData == null) {
			zygame_components_ZQuad.quadBitmapData = new openfl_display_BitmapData(1,1,false,16777215);
			this.superInitEvent(e);
		} else {
			this.superInitEvent(e);
		}
	}
	,view3d: null
	,super3d: function(pclass) {
		throw haxe_Exception.thrown("请引入zygameui-3d库，才能使用super3d方法。");
	}
	,onInit: function() {
		var _gthis = this;
		this.stage.set_frameRate(60);
		zygame_utils_SpineManager.init(this.stage);
		this.topView = new zygame_display_DisplayObjectContainer();
		this.stage.addChild(this.topView);
		this.onStageSizeChange();
		this.topView.set_scaleX(this.get_scaleX());
		this.topView.set_scaleY(this.get_scaleY());
		this.fps = new zygame_utils_FPSDebug();
		this.topView.addChild(this.fps);
		this.fps.set_visible(this.isDebug);
		this.stage.set_quality(1);
		this.addEventListener("enterFrame",$bind(this,this.onFrameEvent));
		this.stage.addEventListener("resize",$bind(this,this.onResize));
		this.stage.addEventListener("click",$bind(this,this.onStageMouseClick));
		if(document.addEventListener != null) {
			document.addEventListener("visibilitychange",function() {
				var isHidden = document.hidden;
				if(isHidden) {
					_gthis.onDeActivate(null);
				} else {
					_gthis.onActivate(null);
				}
			});
		}
		this.stage.addEventListener("activate",$bind(this,this.onActivate));
		this.stage.addEventListener("deactivate",$bind(this,this.onDeActivate));
	}
	,onStageMouseClick: function(e) {
		var oldfocus = zygame_core_Start.focus;
		zygame_core_Start.focus = e.target;
		if(oldfocus == zygame_core_Start.focus) {
			return;
		}
		if(((oldfocus) instanceof zygame_components_ZLabel)) {
			var oldlabel = js_Boot.__cast(oldfocus , zygame_components_ZLabel);
			oldlabel.setSelectQuadVisible(false);
		}
	}
	,onDeActivate: function(e) {
		zygame_core_Start.isActivate = false;
		haxe_Log.trace("返回至后台",{ fileName : "Source/zygame/core/Start.hx", lineNumber : 309, className : "zygame.core.Start", methodName : "onDeActivate"});
		zygame_media_SoundChannelManager.current().stopAllEffectAndMusic();
	}
	,onActivate: function(e) {
		zygame_core_Start.isActivate = true;
		haxe_Log.trace("返回至前台",{ fileName : "Source/zygame/core/Start.hx", lineNumber : 316, className : "zygame.core.Start", methodName : "onActivate"});
		zygame_utils_Lib.onResume();
		zygame_media_SoundChannelManager.current().resumeMusic();
	}
	,onStageSizeChange: function() {
		if(this.HDWidth == 0 && this.HDHeight == 0) {
			zygame_core_Start.stageWidth = (this.stage.stageWidth / this.get_scaleX() | 0) + 1;
			zygame_core_Start.stageHeight = (this.stage.stageHeight / this.get_scaleY() | 0) + 1;
			this.onSceneSizeChange();
			return;
		}
		var wscale = 1;
		var hscale = 1;
		if(this._lockLandscape && this.stage.stageWidth < this.stage.stageHeight) {
			hscale = Math.round(this.stage.stageWidth / this.HDHeight * 100) / 100;
			wscale = Math.round(this.stage.stageHeight / this.HDWidth * 100) / 100;
		} else {
			wscale = Math.round(this.stage.stageWidth / this.HDWidth * 100) / 100;
			hscale = Math.round(this.stage.stageHeight / this.HDHeight * 100) / 100;
		}
		if(wscale < hscale) {
			this.set_scaleX(wscale);
			this.set_scaleY(wscale);
			zygame_core_Start.currentScale = wscale;
		} else {
			this.set_scaleX(hscale);
			this.set_scaleY(hscale);
			zygame_core_Start.currentScale = hscale;
		}
		window.currentScale=zygame_core_Start.currentScale;
		this.log("适配结果：",wscale,hscale);
		zygame_core_Start.stageWidth = (this.stage.stageWidth / this.get_scaleX() | 0) + 1;
		zygame_core_Start.stageHeight = (this.stage.stageHeight / this.get_scaleY() | 0) + 1;
		this.set_rotation(0);
		this.topView.set_rotation(0);
		this.set_x(0);
		this.topView.set_x(0);
		if(this._lockLandscape && zygame_core_Start.stageWidth < zygame_core_Start.stageHeight) {
			zygame_core_Start.stageWidth = (this.stage.stageHeight / this.get_scaleY() | 0) + 1;
			zygame_core_Start.stageHeight = (this.stage.stageWidth / this.get_scaleX() | 0) + 1;
			this.set_rotation(90);
			this.set_x(this.stage.stageWidth);
			this.topView.set_rotation(90);
			this.topView.set_x(this.stage.stageHeight);
		}
		this.onSceneSizeChange();
		this.log("适配" + this.HDHeight + "x" + this.HDWidth,this.stage.stageHeight + "x" + this.stage.stageWidth,zygame_core_Start.currentScale);
	}
	,onSceneSizeChange: function() {
		var _g = 0;
		var _g1 = this.get_numChildren();
		while(_g < _g1) {
			var i = _g++;
			if(((this.getChildAt(i)) instanceof zygame_components_ZScene)) {
				var scene = this.getChildAt(i);
				if(scene != null) {
					scene.updateComponents();
				}
			}
		}
	}
	,onResize: function(e) {
		this.onStageSizeChange();
	}
	,getUpdateLength: function() {
		return this.updates.get_length();
	}
	,onFrameEvent: function(e) {
		if(this.fps.getFps() < 61 || this.fps60.update()) {
			this.onFrame();
			this.isFrameing = true;
			var _g = 0;
			var _g1 = this.updates.get_length();
			while(_g < _g1) {
				var i = _g++;
				this.updates.get(i).onFrame();
			}
			this.isFrameing = false;
			var _g = 0;
			var _g1 = this.updateStatsList.length;
			while(_g < _g1) {
				var i = _g++;
				if(this.updateStatsList[i].action == 0) {
					this.addToUpdate(this.updateStatsList[i].display);
				} else {
					this.removeToUpdate(this.updateStatsList[i].display);
				}
			}
			if(this.updateStatsList.length > 0) {
				this.updateStatsList = [];
			}
			zygame_utils_ZGC.onFrame();
			zygame_utils_Lib.onFrame();
		}
	}
	,addToUpdate: function(display) {
		if(this.isFrameing) {
			this.updateStatsList.push(new zygame_core_UpdateStats(display,0));
		} else if(this.updates.indexOf(display,0) == -1) {
			this.updates.push(display);
		}
	}
	,removeToUpdate: function(display) {
		if(this.isFrameing) {
			this.updateStatsList.push(new zygame_core_UpdateStats(display,1));
		} else {
			var index = this.updates.indexOf(display,0);
			if(index != -1) {
				this.updates.removeAt(index);
			}
		}
	}
	,onFrame: function() {
	}
	,__class__: zygame_core_Start
});
var dialog_Main = function(HDWidth,HDHeight,isDebug) {
	zygame_core_Start.call(this,HDWidth,HDHeight,isDebug);
};
$hxClasses["dialog.Main"] = dialog_Main;
dialog_Main.__name__ = "dialog.Main";
dialog_Main.__super__ = zygame_core_Start;
dialog_Main.prototype = $extend(zygame_core_Start.prototype,{
	onInit: function() {
		zygame_core_Start.prototype.onInit.call(this);
		this.addChild(new zygame_components_ZModel(300,64));
		zygame_components_ZModel.showTextModel("我是测试文案，怎么了！？");
		this.stage.addEventListener("click",function(e) {
			zygame_components_ZModel.showTextModel("我是" + Std.random(999) + "，怎么了！？");
		});
		var button = zygame_components_ZButton.createModelButton("测试按钮");
		this.addChild(button);
		button.set_y(300);
		var json = new AutoJsonTest();
		haxe_Log.trace(json.getDataArrayByType(2),{ fileName : "Demo/dialog/Main.hx", lineNumber : 25, className : "dialog.Main", methodName : "onInit"});
		this.addChild(new dialog_Scene());
	}
	,__class__: dialog_Main
});
var DocumentClass = function(current) {
	current.addChild(this);
	dialog_Main.call(this);
	this.dispatchEvent(new openfl_events_Event("addedToStage",false,false));
};
$hxClasses["DocumentClass"] = DocumentClass;
DocumentClass.__name__ = "DocumentClass";
DocumentClass.__super__ = dialog_Main;
DocumentClass.prototype = $extend(dialog_Main.prototype,{
	__class__: DocumentClass
});
var AutoJsonTest = function() {
	this.data = [{ id : 1, type : 1, data : "数据A"},{ id : 2, type : 2, data : "数据B"},{ id : 3, type : 2, data : "数据C"}];
};
$hxClasses["AutoJsonTest"] = AutoJsonTest;
AutoJsonTest.__name__ = "AutoJsonTest";
AutoJsonTest.prototype = {
	data_type_TypeMaps: null
	,getDataArrayByType: function(name) {
		if(this.data_type_TypeMaps == null) {
			this.data_type_TypeMaps = new haxe_ds_StringMap();
			var array = this.data;
			var _g = 0;
			while(_g < array.length) {
				var item = array[_g];
				++_g;
				var type = Reflect.getProperty(item,"type");
				var array1 = this.data_type_TypeMaps.h[type];
				if(array1 == null) {
					array1 = [];
					this.data_type_TypeMaps.h[type == null ? "null" : "" + type] = array1;
				}
				array1.push(item);
			}
		}
		return this.data_type_TypeMaps.h[Std.string(name)];
	}
	,data: null
	,__class__: AutoJsonTest
};
var EReg = function(r,opt) {
	this.r = new RegExp(r,opt.split("u").join(""));
};
$hxClasses["EReg"] = EReg;
EReg.__name__ = "EReg";
EReg.prototype = {
	r: null
	,match: function(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,matched: function(n) {
		if(this.r.m != null && n >= 0 && n < this.r.m.length) {
			return this.r.m[n];
		} else {
			throw haxe_Exception.thrown("EReg::matched");
		}
	}
	,matchedRight: function() {
		if(this.r.m == null) {
			throw haxe_Exception.thrown("No string matched");
		}
		var sz = this.r.m.index + this.r.m[0].length;
		return HxOverrides.substr(this.r.s,sz,this.r.s.length - sz);
	}
	,matchedPos: function() {
		if(this.r.m == null) {
			throw haxe_Exception.thrown("No string matched");
		}
		return { pos : this.r.m.index, len : this.r.m[0].length};
	}
	,matchSub: function(s,pos,len) {
		if(len == null) {
			len = -1;
		}
		if(this.r.global) {
			this.r.lastIndex = pos;
			this.r.m = this.r.exec(len < 0 ? s : HxOverrides.substr(s,0,pos + len));
			var b = this.r.m != null;
			if(b) {
				this.r.s = s;
			}
			return b;
		} else {
			var b = this.match(len < 0 ? HxOverrides.substr(s,pos,null) : HxOverrides.substr(s,pos,len));
			if(b) {
				this.r.s = s;
				this.r.m.index += pos;
			}
			return b;
		}
	}
	,split: function(s) {
		var d = "#__delim__#";
		return s.replace(this.r,d).split(d);
	}
	,map: function(s,f) {
		var offset = 0;
		var buf_b = "";
		while(true) {
			if(offset >= s.length) {
				break;
			} else if(!this.matchSub(s,offset)) {
				buf_b += Std.string(HxOverrides.substr(s,offset,null));
				break;
			}
			var p = this.matchedPos();
			buf_b += Std.string(HxOverrides.substr(s,offset,p.pos - offset));
			buf_b += Std.string(f(this));
			if(p.len == 0) {
				buf_b += Std.string(HxOverrides.substr(s,p.pos,1));
				offset = p.pos + 1;
			} else {
				offset = p.pos + p.len;
			}
			if(!this.r.global) {
				break;
			}
		}
		if(!this.r.global && offset > 0 && offset < s.length) {
			buf_b += Std.string(HxOverrides.substr(s,offset,null));
		}
		return buf_b;
	}
	,__class__: EReg
};
var HxOverrides = function() { };
$hxClasses["HxOverrides"] = HxOverrides;
HxOverrides.__name__ = "HxOverrides";
HxOverrides.strDate = function(s) {
	switch(s.length) {
	case 8:
		var k = s.split(":");
		var d = new Date();
		d["setTime"](0);
		d["setUTCHours"](k[0]);
		d["setUTCMinutes"](k[1]);
		d["setUTCSeconds"](k[2]);
		return d;
	case 10:
		var k = s.split("-");
		return new Date(k[0],k[1] - 1,k[2],0,0,0);
	case 19:
		var k = s.split(" ");
		var y = k[0].split("-");
		var t = k[1].split(":");
		return new Date(y[0],y[1] - 1,y[2],t[0],t[1],t[2]);
	default:
		throw haxe_Exception.thrown("Invalid date format : " + s);
	}
};
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.remove = function(a,obj) {
	var i = a.indexOf(obj);
	if(i == -1) {
		return false;
	}
	a.splice(i,1);
	return true;
};
HxOverrides.now = function() {
	return Date.now();
};
var IntIterator = function(min,max) {
	this.min = min;
	this.max = max;
};
$hxClasses["IntIterator"] = IntIterator;
IntIterator.__name__ = "IntIterator";
IntIterator.prototype = {
	min: null
	,max: null
	,hasNext: function() {
		return this.min < this.max;
	}
	,next: function() {
		return this.min++;
	}
	,__class__: IntIterator
};
var Lambda = function() { };
$hxClasses["Lambda"] = Lambda;
Lambda.__name__ = "Lambda";
Lambda.array = function(it) {
	var a = [];
	var i = $getIterator(it);
	while(i.hasNext()) {
		var i1 = i.next();
		a.push(i1);
	}
	return a;
};
var ManifestResources = function() { };
$hxClasses["ManifestResources"] = ManifestResources;
ManifestResources.__name__ = "ManifestResources";
ManifestResources.init = function(config) {
	ManifestResources.preloadLibraries = [];
	ManifestResources.preloadLibraryNames = [];
	ManifestResources.rootPath = null;
	if(config != null && Object.prototype.hasOwnProperty.call(config,"rootPath")) {
		ManifestResources.rootPath = Reflect.field(config,"rootPath");
	}
	if(ManifestResources.rootPath == null) {
		ManifestResources.rootPath = "./";
	}
	var bundle;
	var data = "{\"name\":null,\"assets\":\"aoy4:pathy7:1px.pngy4:sizei82y4:typey5:IMAGEy2:idR1y7:preloadtgoR0y32:assets%2Fui%2FGameStatsAtlas.xmlR2i1159R3y4:TEXTR5R7goR0y32:assets%2Fui%2FGameStatsAtlas.pngR2i64086R3R4R5R9goR0y27:assets%2Fui%2FIconAtlas.xmlR2i1006R3R8R5R10goR0y27:assets%2Fui%2FIconAtlas.pngR2i61180R3R4R5R11goR0y28:assets%2Fui%2FPutUpAtlas.pngR2i64483R3R4R5R12goR0y28:assets%2Fui%2FPutUpAtlas.xmlR2i2121R3R8R5R13goR0y28:assets%2Fui%2FDiaryAtlas.pngR2i39389R3R4R5R14goR0y31:assets%2Fui%2FOverViewAtlas.pngR2i67943R3R4R5R15goR0y28:assets%2Fui%2FDiaryAtlas.xmlR2i1105R3R8R5R16goR0y31:assets%2Fui%2FOverViewAtlas.xmlR2i813R3R8R5R17goR0y30:assets%2Fui%2FMailBoxAtlas.pngR2i52517R3R4R5R18goR0y30:assets%2Fui%2FMailBoxAtlas.xmlR2i925R3R8R5R19goR0y27:assets%2Fui%2FRankAtlas.pngR2i75469R3R4R5R20goR0y27:assets%2Fui%2FRankAtlas.xmlR2i1756R3R8R5R21goR0y31:assets%2Fui%2FGameFontAtlas.xmlR2i4310R3R8R5R22goR0y31:assets%2Fui%2FGameFontAtlas.pngR2i100383R3R4R5R23goR0y32:assets%2Fui%2FAdventureAtlas.pngR2i764666R3R4R5R24goR0y32:assets%2Fui%2FAdventureAtlas.xmlR2i534R3R8R5R25goR0y32:assets%2Fui%2FMainSceneAtlas.xmlR2i795R3R8R5R26goR0y33:assets%2Fui%2FDiaryGoodsAtlas.pngR2i52534R3R4R5R27goR0y33:assets%2Fui%2FDiaryGoodsAtlas.xmlR2i1370R3R8R5R28goR0y32:assets%2Fui%2FMainSceneAtlas.pngR2i32010R3R4R5R29goR0y34:assets%2Fui%2FGoodLevelUpAtlas.xmlR2i391R3R8R5R30goR0y34:assets%2Fui%2FGoodLevelUpAtlas.pngR2i21757R3R4R5R31goR0y32:assets%2Fui%2FLoadSceneAtlas.xmlR2i658R3R8R5R32goR0y32:assets%2Fui%2FLoadSceneAtlas.pngR2i312949R3R4R5R33goR0y30:assets%2Fviews%2FLoadScene.xmlR2i804R3R8R5R34goR0y30:assets%2Fviews%2FGameStats.xmlR2i903R3R8R5R35goR0y29:assets%2Fviews%2FOverView.xmlR2i1712R3R8R5R36goR0y28:assets%2Fviews%2FMailBox.xmlR2i1372R3R8R5R37goR0y33:assets%2Fviews%2FGameExitView.xmlR2i899R3R8R5R38goR0y30:assets%2Fviews%2FAdventure.xmlR2i453R3R8R5R39goR0y30:assets%2Fviews%2FDiaryItem.xmlR2i1041R3R8R5R40goR0y26:assets%2Fviews%2FPutUp.xmlR2i5114R3R8R5R41goR0y26:assets%2Fviews%2FDiary.xmlR2i592R3R8R5R42goR0y25:assets%2Fviews%2FRank.xmlR2i1206R3R8R5R43goR0y29:assets%2Fviews%2FGameOver.xmlR2i318R3R8R5R44goR0y30:assets%2Fviews%2FMainScene.xmlR2i1652R3R8R5R45goR0y32:assets%2Fviews%2FGoodLevelUp.xmlR2i736R3R8R5R46goR0y31:assets%2Fviews%2FDiaryGoods.xmlR2i682R3R8R5R47goR0y34:assets%2Fviews%2FAdventureItem.xmlR2i774R3R8R5R48goR0y29:assets%2Fviews%2FRankItem.xmlR2i838R3R8R5R49goR0y35:assets%2Fviews%2FDiaryGoodsItem.xmlR2i1482R3R8R5R50gh\",\"rootPath\":null,\"version\":2,\"libraryArgs\":[],\"libraryType\":null}";
	var manifest = lime_utils_AssetManifest.parse(data,ManifestResources.rootPath);
	var library = lime_utils_AssetLibrary.fromManifest(manifest);
	lime_utils_Assets.registerLibrary("default",library);
	library = lime_utils_Assets.getLibrary("default");
	if(library != null) {
		ManifestResources.preloadLibraries.push(library);
	} else {
		ManifestResources.preloadLibraryNames.push("default");
	}
};
Math.__name__ = "Math";
var R = function() {
};
$hxClasses["R"] = R;
R.__name__ = "R";
R.prototype = {
	__class__: R
};
var Reflect = function() { };
$hxClasses["Reflect"] = Reflect;
Reflect.__name__ = "Reflect";
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( _g ) {
		haxe_NativeStackTrace.lastError = _g;
		return null;
	}
};
Reflect.getProperty = function(o,field) {
	var tmp;
	if(o == null) {
		return null;
	} else {
		var tmp1;
		if(o.__properties__) {
			tmp = o.__properties__["get_" + field];
			tmp1 = tmp;
		} else {
			tmp1 = false;
		}
		if(tmp1) {
			return o[tmp]();
		} else {
			return o[field];
		}
	}
};
Reflect.setProperty = function(o,field,value) {
	var tmp;
	var tmp1;
	if(o.__properties__) {
		tmp = o.__properties__["set_" + field];
		tmp1 = tmp;
	} else {
		tmp1 = false;
	}
	if(tmp1) {
		o[tmp](value);
	} else {
		o[field] = value;
	}
};
Reflect.fields = function(o) {
	var a = [];
	if(o != null) {
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		for( var f in o ) {
		if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) {
			a.push(f);
		}
		}
	}
	return a;
};
Reflect.isFunction = function(f) {
	if(typeof(f) == "function") {
		return !(f.__name__ || f.__ename__);
	} else {
		return false;
	}
};
Reflect.compare = function(a,b) {
	if(a == b) {
		return 0;
	} else if(a > b) {
		return 1;
	} else {
		return -1;
	}
};
Reflect.compareMethods = function(f1,f2) {
	if(f1 == f2) {
		return true;
	}
	if(!Reflect.isFunction(f1) || !Reflect.isFunction(f2)) {
		return false;
	}
	if(f1.scope == f2.scope && f1.method == f2.method) {
		return f1.method != null;
	} else {
		return false;
	}
};
Reflect.isObject = function(v) {
	if(v == null) {
		return false;
	}
	var t = typeof(v);
	if(!(t == "string" || t == "object" && v.__enum__ == null)) {
		if(t == "function") {
			return (v.__name__ || v.__ename__) != null;
		} else {
			return false;
		}
	} else {
		return true;
	}
};
Reflect.isEnumValue = function(v) {
	if(v != null) {
		return v.__enum__ != null;
	} else {
		return false;
	}
};
Reflect.deleteField = function(o,field) {
	if(!Object.prototype.hasOwnProperty.call(o,field)) {
		return false;
	}
	delete(o[field]);
	return true;
};
Reflect.makeVarArgs = function(f) {
	return function() {
		var a = Array.prototype.slice;
		var a1 = arguments;
		var a2 = a.call(a1);
		return f(a2);
	};
};
var Std = function() { };
$hxClasses["Std"] = Std;
Std.__name__ = "Std";
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.parseInt = function(x) {
	if(x != null) {
		var _g = 0;
		var _g1 = x.length;
		while(_g < _g1) {
			var i = _g++;
			var c = x.charCodeAt(i);
			if(c <= 8 || c >= 14 && c != 32 && c != 45) {
				var nc = x.charCodeAt(i + 1);
				var v = parseInt(x,nc == 120 || nc == 88 ? 16 : 10);
				if(isNaN(v)) {
					return null;
				} else {
					return v;
				}
			}
		}
	}
	return null;
};
Std.random = function(x) {
	if(x <= 0) {
		return 0;
	} else {
		return Math.floor(Math.random() * x);
	}
};
var _$String_String_$Impl_$ = function() { };
$hxClasses["_String.String_Impl_"] = _$String_String_$Impl_$;
_$String_String_$Impl_$.__name__ = "_String.String_Impl_";
_$String_String_$Impl_$.fromCharCode = function(code) {
	return String.fromCodePoint(code);
};
var StringBuf = function() {
	this.b = "";
};
$hxClasses["StringBuf"] = StringBuf;
StringBuf.__name__ = "StringBuf";
StringBuf.prototype = {
	b: null
	,__class__: StringBuf
};
var StringTools = function() { };
$hxClasses["StringTools"] = StringTools;
StringTools.__name__ = "StringTools";
StringTools.htmlEscape = function(s,quotes) {
	var buf_b = "";
	var _g_offset = 0;
	var _g_s = s;
	while(_g_offset < _g_s.length) {
		var s = _g_s;
		var index = _g_offset++;
		var c = s.charCodeAt(index);
		if(c >= 55296 && c <= 56319) {
			c = c - 55232 << 10 | s.charCodeAt(index + 1) & 1023;
		}
		var c1 = c;
		if(c1 >= 65536) {
			++_g_offset;
		}
		var code = c1;
		switch(code) {
		case 34:
			if(quotes) {
				buf_b += "&quot;";
			} else {
				buf_b += String.fromCodePoint(code);
			}
			break;
		case 38:
			buf_b += "&amp;";
			break;
		case 39:
			if(quotes) {
				buf_b += "&#039;";
			} else {
				buf_b += String.fromCodePoint(code);
			}
			break;
		case 60:
			buf_b += "&lt;";
			break;
		case 62:
			buf_b += "&gt;";
			break;
		default:
			buf_b += String.fromCodePoint(code);
		}
	}
	return buf_b;
};
StringTools.startsWith = function(s,start) {
	if(s.length >= start.length) {
		return s.lastIndexOf(start,0) == 0;
	} else {
		return false;
	}
};
StringTools.endsWith = function(s,end) {
	var elen = end.length;
	var slen = s.length;
	if(slen >= elen) {
		return s.indexOf(end,slen - elen) == slen - elen;
	} else {
		return false;
	}
};
StringTools.isSpace = function(s,pos) {
	var c = HxOverrides.cca(s,pos);
	if(!(c > 8 && c < 14)) {
		return c == 32;
	} else {
		return true;
	}
};
StringTools.ltrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,r)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,r,l - r);
	} else {
		return s;
	}
};
StringTools.rtrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,0,l - r);
	} else {
		return s;
	}
};
StringTools.trim = function(s) {
	return StringTools.ltrim(StringTools.rtrim(s));
};
StringTools.replace = function(s,sub,by) {
	return s.split(sub).join(by);
};
StringTools.hex = function(n,digits) {
	var s = "";
	var hexChars = "0123456789ABCDEF";
	while(true) {
		s = hexChars.charAt(n & 15) + s;
		n >>>= 4;
		if(!(n > 0)) {
			break;
		}
	}
	if(digits != null) {
		while(s.length < digits) s = "0" + s;
	}
	return s;
};
var ValueType = $hxEnums["ValueType"] = { __ename__ : "ValueType", __constructs__ : ["TNull","TInt","TFloat","TBool","TObject","TFunction","TClass","TEnum","TUnknown"]
	,TNull: {_hx_index:0,__enum__:"ValueType",toString:$estr}
	,TInt: {_hx_index:1,__enum__:"ValueType",toString:$estr}
	,TFloat: {_hx_index:2,__enum__:"ValueType",toString:$estr}
	,TBool: {_hx_index:3,__enum__:"ValueType",toString:$estr}
	,TObject: {_hx_index:4,__enum__:"ValueType",toString:$estr}
	,TFunction: {_hx_index:5,__enum__:"ValueType",toString:$estr}
	,TClass: ($_=function(c) { return {_hx_index:6,c:c,__enum__:"ValueType",toString:$estr}; },$_.__params__ = ["c"],$_)
	,TEnum: ($_=function(e) { return {_hx_index:7,e:e,__enum__:"ValueType",toString:$estr}; },$_.__params__ = ["e"],$_)
	,TUnknown: {_hx_index:8,__enum__:"ValueType",toString:$estr}
};
var Type = function() { };
$hxClasses["Type"] = Type;
Type.__name__ = "Type";
Type.resolveEnum = function(name) {
	return $hxEnums[name];
};
Type.createInstance = function(cl,args) {
	var ctor = Function.prototype.bind.apply(cl,[null].concat(args));
	return new (ctor);
};
Type.createEnum = function(e,constr,params) {
	var f = Reflect.field(e,constr);
	if(f == null) {
		throw haxe_Exception.thrown("No such constructor " + constr);
	}
	if(Reflect.isFunction(f)) {
		if(params == null) {
			throw haxe_Exception.thrown("Constructor " + constr + " need parameters");
		}
		return f.apply(e,params);
	}
	if(params != null && params.length != 0) {
		throw haxe_Exception.thrown("Constructor " + constr + " does not need parameters");
	}
	return f;
};
Type.getInstanceFields = function(c) {
	var a = [];
	for(var i in c.prototype) a.push(i);
	HxOverrides.remove(a,"__class__");
	HxOverrides.remove(a,"__properties__");
	return a;
};
Type.typeof = function(v) {
	switch(typeof(v)) {
	case "boolean":
		return ValueType.TBool;
	case "function":
		if(v.__name__ || v.__ename__) {
			return ValueType.TObject;
		}
		return ValueType.TFunction;
	case "number":
		if(Math.ceil(v) == v % 2147483648.0) {
			return ValueType.TInt;
		}
		return ValueType.TFloat;
	case "object":
		if(v == null) {
			return ValueType.TNull;
		}
		var e = v.__enum__;
		if(e != null) {
			return ValueType.TEnum($hxEnums[e]);
		}
		var c = js_Boot.getClass(v);
		if(c != null) {
			return ValueType.TClass(c);
		}
		return ValueType.TObject;
	case "string":
		return ValueType.TClass(String);
	case "undefined":
		return ValueType.TNull;
	default:
		return ValueType.TUnknown;
	}
};
Type.enumEq = function(a,b) {
	if(a == b) {
		return true;
	}
	try {
		var e = a.__enum__;
		if(e == null || e != b.__enum__) {
			return false;
		}
		if(a._hx_index != b._hx_index) {
			return false;
		}
		var enm = $hxEnums[e];
		var ctorName = enm.__constructs__[a._hx_index];
		var params = enm[ctorName].__params__;
		var _g = 0;
		while(_g < params.length) {
			var f = params[_g];
			++_g;
			if(!Type.enumEq(a[f],b[f])) {
				return false;
			}
		}
	} catch( _g ) {
		haxe_NativeStackTrace.lastError = _g;
		return false;
	}
	return true;
};
Type.enumParameters = function(e) {
	var enm = $hxEnums[e.__enum__];
	var ctorName = enm.__constructs__[e._hx_index];
	var params = enm[ctorName].__params__;
	if(params != null) {
		var _g = [];
		var _g1 = 0;
		while(_g1 < params.length) {
			var p = params[_g1];
			++_g1;
			_g.push(e[p]);
		}
		return _g;
	} else {
		return [];
	}
};
var UInt = {};
UInt.gt = function(a,b) {
	var aNeg = a < 0;
	var bNeg = b < 0;
	if(aNeg != bNeg) {
		return aNeg;
	} else {
		return a > b;
	}
};
UInt.toFloat = function(this1) {
	var int = this1;
	if(int < 0) {
		return 4294967296.0 + int;
	} else {
		return int + 0.0;
	}
};
var XmlType = {};
XmlType.toString = function(this1) {
	switch(this1) {
	case 0:
		return "Element";
	case 1:
		return "PCData";
	case 2:
		return "CData";
	case 3:
		return "Comment";
	case 4:
		return "DocType";
	case 5:
		return "ProcessingInstruction";
	case 6:
		return "Document";
	}
};
var Xml = function(nodeType) {
	this.nodeType = nodeType;
	this.children = [];
	this.attributeMap = new haxe_ds_StringMap();
};
$hxClasses["Xml"] = Xml;
Xml.__name__ = "Xml";
Xml.parse = function(str) {
	return haxe_xml_Parser.parse(str);
};
Xml.createElement = function(name) {
	var xml = new Xml(Xml.Element);
	if(xml.nodeType != Xml.Element) {
		throw haxe_Exception.thrown("Bad node type, expected Element but found " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
	}
	xml.nodeName = name;
	return xml;
};
Xml.createPCData = function(data) {
	var xml = new Xml(Xml.PCData);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw haxe_Exception.thrown("Bad node type, unexpected " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createCData = function(data) {
	var xml = new Xml(Xml.CData);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw haxe_Exception.thrown("Bad node type, unexpected " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createComment = function(data) {
	var xml = new Xml(Xml.Comment);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw haxe_Exception.thrown("Bad node type, unexpected " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createDocType = function(data) {
	var xml = new Xml(Xml.DocType);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw haxe_Exception.thrown("Bad node type, unexpected " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createProcessingInstruction = function(data) {
	var xml = new Xml(Xml.ProcessingInstruction);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw haxe_Exception.thrown("Bad node type, unexpected " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createDocument = function() {
	return new Xml(Xml.Document);
};
Xml.prototype = {
	nodeType: null
	,nodeName: null
	,nodeValue: null
	,parent: null
	,children: null
	,attributeMap: null
	,get: function(att) {
		if(this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		return this.attributeMap.h[att];
	}
	,set: function(att,value) {
		if(this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		this.attributeMap.h[att] = value;
	}
	,exists: function(att) {
		if(this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		return Object.prototype.hasOwnProperty.call(this.attributeMap.h,att);
	}
	,attributes: function() {
		if(this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		return haxe_ds_StringMap.keysIterator(this.attributeMap.h);
	}
	,elements: function() {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		var _g = [];
		var _g1 = 0;
		var _g2 = this.children;
		while(_g1 < _g2.length) {
			var child = _g2[_g1];
			++_g1;
			if(child.nodeType == Xml.Element) {
				_g.push(child);
			}
		}
		var ret = _g;
		return new haxe_iterators_ArrayIterator(ret);
	}
	,elementsNamed: function(name) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		var _g = [];
		var _g1 = 0;
		var _g2 = this.children;
		while(_g1 < _g2.length) {
			var child = _g2[_g1];
			++_g1;
			var tmp;
			if(child.nodeType == Xml.Element) {
				if(child.nodeType != Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, expected Element but found " + (child.nodeType == null ? "null" : XmlType.toString(child.nodeType)));
				}
				tmp = child.nodeName == name;
			} else {
				tmp = false;
			}
			if(tmp) {
				_g.push(child);
			}
		}
		var ret = _g;
		return new haxe_iterators_ArrayIterator(ret);
	}
	,firstElement: function() {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.nodeType == Xml.Element) {
				return child;
			}
		}
		return null;
	}
	,addChild: function(x) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		if(x.parent != null) {
			x.parent.removeChild(x);
		}
		this.children.push(x);
		x.parent = this;
	}
	,removeChild: function(x) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		if(HxOverrides.remove(this.children,x)) {
			x.parent = null;
			return true;
		}
		return false;
	}
	,insertChild: function(x,pos) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		if(x.parent != null) {
			HxOverrides.remove(x.parent.children,x);
		}
		this.children.splice(pos,0,x);
		x.parent = this;
	}
	,toString: function() {
		return haxe_xml_Printer.print(this);
	}
	,__class__: Xml
};
var cdb_ColumnType = $hxEnums["cdb.ColumnType"] = { __ename__ : "cdb.ColumnType", __constructs__ : ["TId","TString","TBool","TInt","TFloat","TEnum","TRef","TImage","TList","TCustom","TFlags","TColor","TLayer","TFile","TTilePos","TTileLayer","TDynamic","TProperties"]
	,TId: {_hx_index:0,__enum__:"cdb.ColumnType",toString:$estr}
	,TString: {_hx_index:1,__enum__:"cdb.ColumnType",toString:$estr}
	,TBool: {_hx_index:2,__enum__:"cdb.ColumnType",toString:$estr}
	,TInt: {_hx_index:3,__enum__:"cdb.ColumnType",toString:$estr}
	,TFloat: {_hx_index:4,__enum__:"cdb.ColumnType",toString:$estr}
	,TEnum: ($_=function(values) { return {_hx_index:5,values:values,__enum__:"cdb.ColumnType",toString:$estr}; },$_.__params__ = ["values"],$_)
	,TRef: ($_=function(sheet) { return {_hx_index:6,sheet:sheet,__enum__:"cdb.ColumnType",toString:$estr}; },$_.__params__ = ["sheet"],$_)
	,TImage: {_hx_index:7,__enum__:"cdb.ColumnType",toString:$estr}
	,TList: {_hx_index:8,__enum__:"cdb.ColumnType",toString:$estr}
	,TCustom: ($_=function(name) { return {_hx_index:9,name:name,__enum__:"cdb.ColumnType",toString:$estr}; },$_.__params__ = ["name"],$_)
	,TFlags: ($_=function(values) { return {_hx_index:10,values:values,__enum__:"cdb.ColumnType",toString:$estr}; },$_.__params__ = ["values"],$_)
	,TColor: {_hx_index:11,__enum__:"cdb.ColumnType",toString:$estr}
	,TLayer: ($_=function(type) { return {_hx_index:12,type:type,__enum__:"cdb.ColumnType",toString:$estr}; },$_.__params__ = ["type"],$_)
	,TFile: {_hx_index:13,__enum__:"cdb.ColumnType",toString:$estr}
	,TTilePos: {_hx_index:14,__enum__:"cdb.ColumnType",toString:$estr}
	,TTileLayer: {_hx_index:15,__enum__:"cdb.ColumnType",toString:$estr}
	,TDynamic: {_hx_index:16,__enum__:"cdb.ColumnType",toString:$estr}
	,TProperties: {_hx_index:17,__enum__:"cdb.ColumnType",toString:$estr}
};
var cdb_TileMode = {};
cdb_TileMode._new = function(s) {
	var this1 = s;
	return this1;
};
cdb_TileMode.ofString = function(s) {
	return cdb_TileMode._new(s);
};
cdb_TileMode.toString = function(this1) {
	return this1;
};
var cdb_Parser = function() { };
$hxClasses["cdb.Parser"] = cdb_Parser;
cdb_Parser.__name__ = "cdb.Parser";
cdb_Parser.saveType = function(t) {
	switch(t._hx_index) {
	case 5:
		var values = t.values;
		return t._hx_index + ":" + values.join(",");
	case 6:
		var _g = t.sheet;
		return t._hx_index + ":" + Std.string(Type.enumParameters(t)[0]);
	case 0:case 1:case 2:case 3:case 4:case 7:case 8:case 11:case 13:case 14:case 15:case 16:case 17:
		if(t._hx_index == null) {
			return "null";
		} else {
			return "" + t._hx_index;
		}
		break;
	case 9:
		var _g = t.name;
		return t._hx_index + ":" + Std.string(Type.enumParameters(t)[0]);
	case 10:
		var values = t.values;
		return t._hx_index + ":" + values.join(",");
	case 12:
		var _g = t.type;
		return t._hx_index + ":" + Std.string(Type.enumParameters(t)[0]);
	}
};
cdb_Parser.getType = function(str) {
	var _g = Std.parseInt(str);
	if(_g == null) {
		throw haxe_Exception.thrown("Unknown type " + str);
	} else {
		switch(_g) {
		case 0:
			return cdb_ColumnType.TId;
		case 1:
			return cdb_ColumnType.TString;
		case 2:
			return cdb_ColumnType.TBool;
		case 3:
			return cdb_ColumnType.TInt;
		case 4:
			return cdb_ColumnType.TFloat;
		case 5:
			return cdb_ColumnType.TEnum(HxOverrides.substr(str,str.indexOf(":") + 1,null).split(","));
		case 6:
			return cdb_ColumnType.TRef(HxOverrides.substr(str,str.indexOf(":") + 1,null));
		case 7:
			return cdb_ColumnType.TImage;
		case 8:
			return cdb_ColumnType.TList;
		case 9:
			return cdb_ColumnType.TCustom(HxOverrides.substr(str,str.indexOf(":") + 1,null));
		case 10:
			return cdb_ColumnType.TFlags(HxOverrides.substr(str,str.indexOf(":") + 1,null).split(","));
		case 11:
			return cdb_ColumnType.TColor;
		case 12:
			return cdb_ColumnType.TLayer(HxOverrides.substr(str,str.indexOf(":") + 1,null));
		case 13:
			return cdb_ColumnType.TFile;
		case 14:
			return cdb_ColumnType.TTilePos;
		case 15:
			return cdb_ColumnType.TTileLayer;
		case 16:
			return cdb_ColumnType.TDynamic;
		case 17:
			return cdb_ColumnType.TProperties;
		default:
			throw haxe_Exception.thrown("Unknown type " + str);
		}
	}
};
cdb_Parser.parse = function(content) {
	if(content == null) {
		throw haxe_Exception.thrown("CDB content is null");
	}
	var data = JSON.parse(content);
	var _g = 0;
	var _g1 = data.sheets;
	while(_g < _g1.length) {
		var s = _g1[_g];
		++_g;
		var _g2 = 0;
		var _g3 = s.columns;
		while(_g2 < _g3.length) {
			var c = _g3[_g2];
			++_g2;
			c.type = cdb_Parser.getType(c.typeStr);
			c.typeStr = null;
		}
	}
	var _g = 0;
	var _g1 = data.customTypes;
	while(_g < _g1.length) {
		var t = _g1[_g];
		++_g;
		var _g2 = 0;
		var _g3 = t.cases;
		while(_g2 < _g3.length) {
			var c = _g3[_g2];
			++_g2;
			var _g4 = 0;
			var _g5 = c.args;
			while(_g4 < _g5.length) {
				var a = _g5[_g4];
				++_g4;
				a.type = cdb_Parser.getType(a.typeStr);
				a.typeStr = null;
			}
		}
	}
	return data;
};
cdb_Parser.save = function(data) {
	var save = [];
	var _g = 0;
	var _g1 = data.sheets;
	while(_g < _g1.length) {
		var s = _g1[_g];
		++_g;
		var _g2 = 0;
		var _g3 = s.columns;
		while(_g2 < _g3.length) {
			var c = _g3[_g2];
			++_g2;
			save.push(c.type);
			if(c.typeStr == null) {
				c.typeStr = cdb_Parser.saveType(c.type);
			}
			Reflect.deleteField(c,"type");
		}
	}
	var _g = 0;
	var _g1 = data.customTypes;
	while(_g < _g1.length) {
		var t = _g1[_g];
		++_g;
		var _g2 = 0;
		var _g3 = t.cases;
		while(_g2 < _g3.length) {
			var c = _g3[_g2];
			++_g2;
			var _g4 = 0;
			var _g5 = c.args;
			while(_g4 < _g5.length) {
				var a = _g5[_g4];
				++_g4;
				save.push(a.type);
				if(a.typeStr == null) {
					a.typeStr = cdb_Parser.saveType(a.type);
				}
				Reflect.deleteField(a,"type");
			}
		}
	}
	var str = JSON.stringify(data,null,"\t");
	var _g = 0;
	var _g1 = data.sheets;
	while(_g < _g1.length) {
		var s = _g1[_g];
		++_g;
		var _g2 = 0;
		var _g3 = s.columns;
		while(_g2 < _g3.length) {
			var c = _g3[_g2];
			++_g2;
			c.type = save.shift();
		}
	}
	var _g = 0;
	var _g1 = data.customTypes;
	while(_g < _g1.length) {
		var t = _g1[_g];
		++_g;
		var _g2 = 0;
		var _g3 = t.cases;
		while(_g2 < _g3.length) {
			var c = _g3[_g2];
			++_g2;
			var _g4 = 0;
			var _g5 = c.args;
			while(_g4 < _g5.length) {
				var a = _g5[_g4];
				++_g4;
				a.type = save.shift();
			}
		}
	}
	return str;
};
var zygame_components_ZBuilderScene = function(xmlPath) {
	zygame_components_ZScene.call(this);
	this.assetsBuilder = zygame_components_ZBuilder.createAssetsBuilder(xmlPath,this);
};
$hxClasses["zygame.components.ZBuilderScene"] = zygame_components_ZBuilderScene;
zygame_components_ZBuilderScene.__name__ = "zygame.components.ZBuilderScene";
zygame_components_ZBuilderScene.__super__ = zygame_components_ZScene;
zygame_components_ZBuilderScene.prototype = $extend(zygame_components_ZScene.prototype,{
	assetsBuilder: null
	,get: function(id,type) {
		return this.assetsBuilder.get(id,type);
	}
	,onInit: function() {
		var _gthis = this;
		zygame_components_ZScene.prototype.onInit.call(this);
		var bg = new zygame_components_ZQuad();
		this.addChild(bg);
		bg.set_alpha(0);
		bg.set_width(this.getStageWidth());
		bg.set_height(this.getStageHeight());
		this.onLoad();
		this.assetsBuilder.build(function(bool) {
			if(bool) {
				zygame_components_ZBuilder.bindAssets(_gthis.assetsBuilder.assets);
				_gthis.onBuilded();
			} else {
				_gthis.onBuildError();
			}
		},$bind(this,this.onLoaded));
	}
	,onLoad: function() {
	}
	,onLoaded: function() {
	}
	,onBuilded: function() {
	}
	,onBuildError: function() {
	}
	,onSceneRelease: function() {
		zygame_components_ZScene.prototype.onSceneRelease.call(this);
		zygame_components_ZBuilder.unbindAssets(this.assetsBuilder.assets);
		this.assetsBuilder.dispose();
		this.assetsBuilder = null;
	}
	,__class__: zygame_components_ZBuilderScene
});
var dialog_Scene = function() {
	zygame_components_ZBuilderScene.call(this,"assets/views/Adventure.xml");
	var textures = [{ png : "assets/ui/AdventureAtlas.png", xml : "assets/ui/AdventureAtlas.xml"},{ png : "assets/ui/GameFontAtlas.png", xml : "assets/ui/GameFontAtlas.xml"}];
	var _g = 0;
	while(_g < textures.length) {
		var item = textures[_g];
		++_g;
		if(zygame_components_ZBuilder.getBaseTextureAtlas(zygame_utils_StringUtils.getName(item.png)) == null) {
			this.assetsBuilder.loadTextures(item.png,item.xml);
		}
	}
};
$hxClasses["dialog.Scene"] = dialog_Scene;
dialog_Scene.__name__ = "dialog.Scene";
dialog_Scene.__super__ = zygame_components_ZBuilderScene;
dialog_Scene.prototype = $extend(zygame_components_ZBuilderScene.prototype,{
	onBuilded: function() {
		zygame_components_ZBuilderScene.prototype.onBuilded.call(this);
		haxe_Log.trace("list = ",{ fileName : "Demo/dialog/Scene.hx", lineNumber : 10, className : "dialog.Scene", methodName : "onBuilded", customParams : [this.assetsBuilder.ids.h["list"]]});
	}
	,list: null
	,get_list: function() {
		return this.assetsBuilder.ids.h["list"];
	}
	,close: null
	,get_close: function() {
		return this.assetsBuilder.ids.h["close"];
	}
	,__class__: dialog_Scene
	,__properties__: $extend(zygame_components_ZBuilderScene.prototype.__properties__,{get_close:"get_close",get_list:"get_list"})
});
var haxe_StackItem = $hxEnums["haxe.StackItem"] = { __ename__ : "haxe.StackItem", __constructs__ : ["CFunction","Module","FilePos","Method","LocalFunction"]
	,CFunction: {_hx_index:0,__enum__:"haxe.StackItem",toString:$estr}
	,Module: ($_=function(m) { return {_hx_index:1,m:m,__enum__:"haxe.StackItem",toString:$estr}; },$_.__params__ = ["m"],$_)
	,FilePos: ($_=function(s,file,line,column) { return {_hx_index:2,s:s,file:file,line:line,column:column,__enum__:"haxe.StackItem",toString:$estr}; },$_.__params__ = ["s","file","line","column"],$_)
	,Method: ($_=function(classname,method) { return {_hx_index:3,classname:classname,method:method,__enum__:"haxe.StackItem",toString:$estr}; },$_.__params__ = ["classname","method"],$_)
	,LocalFunction: ($_=function(v) { return {_hx_index:4,v:v,__enum__:"haxe.StackItem",toString:$estr}; },$_.__params__ = ["v"],$_)
};
var haxe_CallStack = {};
haxe_CallStack.callStack = function() {
	return haxe_NativeStackTrace.toHaxe(haxe_NativeStackTrace.callStack());
};
haxe_CallStack.exceptionStack = function() {
	var eStack = haxe_NativeStackTrace.toHaxe(haxe_NativeStackTrace.exceptionStack());
	return haxe_CallStack.subtract(eStack,haxe_CallStack.callStack());
};
haxe_CallStack.toString = function(stack) {
	var b = new StringBuf();
	var _g = 0;
	var _g1 = stack;
	while(_g < _g1.length) {
		var s = _g1[_g];
		++_g;
		b.b += "\nCalled from ";
		haxe_CallStack.itemToString(b,s);
	}
	return b.b;
};
haxe_CallStack.subtract = function(this1,stack) {
	var startIndex = -1;
	var i = -1;
	while(++i < this1.length) {
		var _g = 0;
		var _g1 = stack.length;
		while(_g < _g1) {
			var j = _g++;
			if(haxe_CallStack.equalItems(this1[i],stack[j])) {
				if(startIndex < 0) {
					startIndex = i;
				}
				++i;
				if(i >= this1.length) {
					break;
				}
			} else {
				startIndex = -1;
			}
		}
		if(startIndex >= 0) {
			break;
		}
	}
	if(startIndex >= 0) {
		return this1.slice(0,startIndex);
	} else {
		return this1;
	}
};
haxe_CallStack.equalItems = function(item1,item2) {
	if(item1 == null) {
		if(item2 == null) {
			return true;
		} else {
			return false;
		}
	} else {
		switch(item1._hx_index) {
		case 0:
			if(item2 == null) {
				return false;
			} else if(item2._hx_index == 0) {
				return true;
			} else {
				return false;
			}
			break;
		case 1:
			if(item2 == null) {
				return false;
			} else if(item2._hx_index == 1) {
				var m1 = item1.m;
				var m2 = item2.m;
				return m1 == m2;
			} else {
				return false;
			}
			break;
		case 2:
			if(item2 == null) {
				return false;
			} else if(item2._hx_index == 2) {
				var item11 = item1.s;
				var file1 = item1.file;
				var line1 = item1.line;
				var col1 = item1.column;
				var col2 = item2.column;
				var line2 = item2.line;
				var file2 = item2.file;
				var item21 = item2.s;
				if(file1 == file2 && line1 == line2 && col1 == col2) {
					return haxe_CallStack.equalItems(item11,item21);
				} else {
					return false;
				}
			} else {
				return false;
			}
			break;
		case 3:
			if(item2 == null) {
				return false;
			} else if(item2._hx_index == 3) {
				var class1 = item1.classname;
				var method1 = item1.method;
				var method2 = item2.method;
				var class2 = item2.classname;
				if(class1 == class2) {
					return method1 == method2;
				} else {
					return false;
				}
			} else {
				return false;
			}
			break;
		case 4:
			if(item2 == null) {
				return false;
			} else if(item2._hx_index == 4) {
				var v1 = item1.v;
				var v2 = item2.v;
				return v1 == v2;
			} else {
				return false;
			}
			break;
		}
	}
};
haxe_CallStack.itemToString = function(b,s) {
	switch(s._hx_index) {
	case 0:
		b.b += "a C function";
		break;
	case 1:
		var m = s.m;
		b.b += "module ";
		b.b += m == null ? "null" : "" + m;
		break;
	case 2:
		var col = s.column;
		var line = s.line;
		var file = s.file;
		var s1 = s.s;
		if(s1 != null) {
			haxe_CallStack.itemToString(b,s1);
			b.b += " (";
		}
		b.b += file == null ? "null" : "" + file;
		b.b += " line ";
		b.b += line == null ? "null" : "" + line;
		if(col != null) {
			b.b += " column ";
			b.b += col == null ? "null" : "" + col;
		}
		if(s1 != null) {
			b.b += ")";
		}
		break;
	case 3:
		var meth = s.method;
		var cname = s.classname;
		b.b += Std.string(cname == null ? "<unknown>" : cname);
		b.b += ".";
		b.b += meth == null ? "null" : "" + meth;
		break;
	case 4:
		var n = s.v;
		b.b += "local function #";
		b.b += n == null ? "null" : "" + n;
		break;
	}
};
var haxe_Exception = function(message,previous,native) {
	Error.call(this,message);
	this.message = message;
	this.__previousException = previous;
	this.__nativeException = native != null ? native : this;
	this.__skipStack = 0;
	var old = Error.prepareStackTrace;
	Error.prepareStackTrace = function(e) { return e.stack; }
	if(((native) instanceof Error)) {
		this.stack = native.stack;
	} else {
		var e = null;
		if(Error.captureStackTrace) {
			Error.captureStackTrace(this,haxe_Exception);
			e = this;
		} else {
			e = new Error();
			if(typeof(e.stack) == "undefined") {
				try { throw e; } catch(_) {}
				this.__skipStack++;
			}
		}
		this.stack = e.stack;
	}
	Error.prepareStackTrace = old;
};
$hxClasses["haxe.Exception"] = haxe_Exception;
haxe_Exception.__name__ = "haxe.Exception";
haxe_Exception.caught = function(value) {
	if(((value) instanceof haxe_Exception)) {
		return value;
	} else if(((value) instanceof Error)) {
		return new haxe_Exception(value.message,null,value);
	} else {
		return new haxe_ValueException(value,null,value);
	}
};
haxe_Exception.thrown = function(value) {
	if(((value) instanceof haxe_Exception)) {
		return value.get_native();
	} else if(((value) instanceof Error)) {
		return value;
	} else {
		var e = new haxe_ValueException(value);
		e.__skipStack++;
		return e;
	}
};
haxe_Exception.__super__ = Error;
haxe_Exception.prototype = $extend(Error.prototype,{
	__skipStack: null
	,__nativeException: null
	,__previousException: null
	,unwrap: function() {
		return this.__nativeException;
	}
	,toString: function() {
		return this.get_message();
	}
	,__shiftStack: function() {
		this.__skipStack++;
	}
	,get_message: function() {
		return this.message;
	}
	,get_native: function() {
		return this.__nativeException;
	}
	,get_stack: function() {
		var _g = this.__exceptionStack;
		if(_g == null) {
			var value = haxe_NativeStackTrace.toHaxe(haxe_NativeStackTrace.normalize(this.stack),this.__skipStack);
			this.setProperty("__exceptionStack",value);
			return value;
		} else {
			var s = _g;
			return s;
		}
	}
	,setProperty: function(name,value) {
		try {
			Object.defineProperty(this,name,{ value : value});
		} catch( _g ) {
			this[name] = value;
		}
	}
	,__class__: haxe_Exception
	,__properties__: {get_native:"get_native",get_stack:"get_stack",get_message:"get_message"}
});
var haxe__$Int64__$_$_$Int64 = function(high,low) {
	this.high = high;
	this.low = low;
};
$hxClasses["haxe._Int64.___Int64"] = haxe__$Int64__$_$_$Int64;
haxe__$Int64__$_$_$Int64.__name__ = "haxe._Int64.___Int64";
haxe__$Int64__$_$_$Int64.prototype = {
	high: null
	,low: null
	,__class__: haxe__$Int64__$_$_$Int64
};
var haxe_Log = function() { };
$hxClasses["haxe.Log"] = haxe_Log;
haxe_Log.__name__ = "haxe.Log";
haxe_Log.formatOutput = function(v,infos) {
	var str = Std.string(v);
	if(infos == null) {
		return str;
	}
	var pstr = infos.fileName + ":" + infos.lineNumber;
	if(infos.customParams != null) {
		var _g = 0;
		var _g1 = infos.customParams;
		while(_g < _g1.length) {
			var v = _g1[_g];
			++_g;
			str += ", " + Std.string(v);
		}
	}
	return pstr + ": " + str;
};
haxe_Log.trace = function(v,infos) {
	var str = haxe_Log.formatOutput(v,infos);
	if(typeof(console) != "undefined" && console.log != null) {
		console.log(str);
	}
};
var haxe_NativeStackTrace = function() { };
$hxClasses["haxe.NativeStackTrace"] = haxe_NativeStackTrace;
haxe_NativeStackTrace.__name__ = "haxe.NativeStackTrace";
haxe_NativeStackTrace.saveStack = function(e) {
	haxe_NativeStackTrace.lastError = e;
};
haxe_NativeStackTrace.callStack = function() {
	var e = new Error("");
	var stack = haxe_NativeStackTrace.tryHaxeStack(e);
	if(typeof(stack) == "undefined") {
		try {
			throw e;
		} catch( _g ) {
		}
		stack = e.stack;
	}
	return haxe_NativeStackTrace.normalize(stack,2);
};
haxe_NativeStackTrace.exceptionStack = function() {
	return haxe_NativeStackTrace.normalize(haxe_NativeStackTrace.tryHaxeStack(haxe_NativeStackTrace.lastError));
};
haxe_NativeStackTrace.toHaxe = function(s,skip) {
	if(skip == null) {
		skip = 0;
	}
	if(s == null) {
		return [];
	} else if(typeof(s) == "string") {
		var stack = s.split("\n");
		if(stack[0] == "Error") {
			stack.shift();
		}
		var m = [];
		var _g = 0;
		var _g1 = stack.length;
		while(_g < _g1) {
			var i = _g++;
			if(skip > i) {
				continue;
			}
			var line = stack[i];
			var matched = line.match(/^    at ([A-Za-z0-9_. ]+) \(([^)]+):([0-9]+):([0-9]+)\)$/);
			if(matched != null) {
				var path = matched[1].split(".");
				if(path[0] == "$hxClasses") {
					path.shift();
				}
				var meth = path.pop();
				var file = matched[2];
				var line1 = Std.parseInt(matched[3]);
				var column = Std.parseInt(matched[4]);
				m.push(haxe_StackItem.FilePos(meth == "Anonymous function" ? haxe_StackItem.LocalFunction() : meth == "Global code" ? null : haxe_StackItem.Method(path.join("."),meth),file,line1,column));
			} else {
				m.push(haxe_StackItem.Module(StringTools.trim(line)));
			}
		}
		return m;
	} else if(skip > 0 && Array.isArray(s)) {
		return s.slice(skip);
	} else {
		return s;
	}
};
haxe_NativeStackTrace.tryHaxeStack = function(e) {
	if(e == null) {
		return [];
	}
	var oldValue = Error.prepareStackTrace;
	Error.prepareStackTrace = haxe_NativeStackTrace.prepareHxStackTrace;
	var stack = e.stack;
	Error.prepareStackTrace = oldValue;
	return stack;
};
haxe_NativeStackTrace.prepareHxStackTrace = function(e,callsites) {
	var stack = [];
	var _g = 0;
	while(_g < callsites.length) {
		var site = callsites[_g];
		++_g;
		if(haxe_NativeStackTrace.wrapCallSite != null) {
			site = haxe_NativeStackTrace.wrapCallSite(site);
		}
		var method = null;
		var fullName = site.getFunctionName();
		if(fullName != null) {
			var idx = fullName.lastIndexOf(".");
			if(idx >= 0) {
				var className = fullName.substring(0,idx);
				var methodName = fullName.substring(idx + 1);
				method = haxe_StackItem.Method(className,methodName);
			} else {
				method = haxe_StackItem.Method(null,fullName);
			}
		}
		var fileName = site.getFileName();
		var fileAddr = fileName == null ? -1 : fileName.indexOf("file:");
		if(haxe_NativeStackTrace.wrapCallSite != null && fileAddr > 0) {
			fileName = fileName.substring(fileAddr + 6);
		}
		stack.push(haxe_StackItem.FilePos(method,fileName,site.getLineNumber(),site.getColumnNumber()));
	}
	return stack;
};
haxe_NativeStackTrace.normalize = function(stack,skipItems) {
	if(skipItems == null) {
		skipItems = 0;
	}
	if(Array.isArray(stack) && skipItems > 0) {
		return stack.slice(skipItems);
	} else if(typeof(stack) == "string") {
		switch(stack.substring(0,6)) {
		case "Error\n":case "Error:":
			++skipItems;
			break;
		default:
		}
		return haxe_NativeStackTrace.skipLines(stack,skipItems);
	} else {
		return stack;
	}
};
haxe_NativeStackTrace.skipLines = function(stack,skip,pos) {
	if(pos == null) {
		pos = 0;
	}
	if(skip > 0) {
		pos = stack.indexOf("\n",pos);
		if(pos < 0) {
			return "";
		} else {
			return haxe_NativeStackTrace.skipLines(stack,--skip,pos + 1);
		}
	} else {
		return stack.substring(pos);
	}
};
var haxe_Serializer = function() {
	this.buf = new StringBuf();
	this.cache = [];
	this.useCache = haxe_Serializer.USE_CACHE;
	this.useEnumIndex = haxe_Serializer.USE_ENUM_INDEX;
	this.shash = new haxe_ds_StringMap();
	this.scount = 0;
};
$hxClasses["haxe.Serializer"] = haxe_Serializer;
haxe_Serializer.__name__ = "haxe.Serializer";
haxe_Serializer.run = function(v) {
	var s = new haxe_Serializer();
	s.serialize(v);
	return s.toString();
};
haxe_Serializer.prototype = {
	buf: null
	,cache: null
	,shash: null
	,scount: null
	,useCache: null
	,useEnumIndex: null
	,toString: function() {
		return this.buf.b;
	}
	,serializeString: function(s) {
		var x = this.shash.h[s];
		if(x != null) {
			this.buf.b += "R";
			this.buf.b += x == null ? "null" : "" + x;
			return;
		}
		this.shash.h[s] = this.scount++;
		this.buf.b += "y";
		s = encodeURIComponent(s);
		this.buf.b += Std.string(s.length);
		this.buf.b += ":";
		this.buf.b += s == null ? "null" : "" + s;
	}
	,serializeRef: function(v) {
		var vt = typeof(v);
		var _g = 0;
		var _g1 = this.cache.length;
		while(_g < _g1) {
			var i = _g++;
			var ci = this.cache[i];
			if(typeof(ci) == vt && ci == v) {
				this.buf.b += "r";
				this.buf.b += i == null ? "null" : "" + i;
				return true;
			}
		}
		this.cache.push(v);
		return false;
	}
	,serializeFields: function(v) {
		var _g = 0;
		var _g1 = Reflect.fields(v);
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			this.serializeString(f);
			this.serialize(Reflect.field(v,f));
		}
		this.buf.b += "g";
	}
	,serialize: function(v) {
		var _g = Type.typeof(v);
		switch(_g._hx_index) {
		case 0:
			this.buf.b += "n";
			break;
		case 1:
			var v1 = v;
			if(v1 == 0) {
				this.buf.b += "z";
				return;
			}
			this.buf.b += "i";
			this.buf.b += v1 == null ? "null" : "" + v1;
			break;
		case 2:
			var v1 = v;
			if(isNaN(v1)) {
				this.buf.b += "k";
			} else if(!isFinite(v1)) {
				this.buf.b += v1 < 0 ? "m" : "p";
			} else {
				this.buf.b += "d";
				this.buf.b += v1 == null ? "null" : "" + v1;
			}
			break;
		case 3:
			this.buf.b += v ? "t" : "f";
			break;
		case 4:
			if(js_Boot.__instanceof(v,Class)) {
				var className = v.__name__;
				this.buf.b += "A";
				this.serializeString(className);
			} else if(js_Boot.__instanceof(v,Enum)) {
				this.buf.b += "B";
				this.serializeString(v.__ename__);
			} else {
				if(this.useCache && this.serializeRef(v)) {
					return;
				}
				this.buf.b += "o";
				this.serializeFields(v);
			}
			break;
		case 5:
			throw haxe_Exception.thrown("Cannot serialize function");
		case 6:
			var c = _g.c;
			if(c == String) {
				this.serializeString(v);
				return;
			}
			if(this.useCache && this.serializeRef(v)) {
				return;
			}
			switch(c) {
			case Array:
				var ucount = 0;
				this.buf.b += "a";
				var l = v["length"];
				var _g1 = 0;
				var _g2 = l;
				while(_g1 < _g2) {
					var i = _g1++;
					if(v[i] == null) {
						++ucount;
					} else {
						if(ucount > 0) {
							if(ucount == 1) {
								this.buf.b += "n";
							} else {
								this.buf.b += "u";
								this.buf.b += ucount == null ? "null" : "" + ucount;
							}
							ucount = 0;
						}
						this.serialize(v[i]);
					}
				}
				if(ucount > 0) {
					if(ucount == 1) {
						this.buf.b += "n";
					} else {
						this.buf.b += "u";
						this.buf.b += ucount == null ? "null" : "" + ucount;
					}
				}
				this.buf.b += "h";
				break;
			case Date:
				var d = v;
				this.buf.b += "v";
				this.buf.b += Std.string(d.getTime());
				break;
			case haxe_ds_IntMap:
				this.buf.b += "q";
				var v1 = v;
				var k = v1.keys();
				while(k.hasNext()) {
					var k1 = k.next();
					this.buf.b += ":";
					this.buf.b += k1 == null ? "null" : "" + k1;
					this.serialize(v1.h[k1]);
				}
				this.buf.b += "h";
				break;
			case haxe_ds_List:
				this.buf.b += "l";
				var v1 = v;
				var _g_head = v1.h;
				while(_g_head != null) {
					var val = _g_head.item;
					_g_head = _g_head.next;
					var i = val;
					this.serialize(i);
				}
				this.buf.b += "h";
				break;
			case haxe_ds_ObjectMap:
				this.buf.b += "M";
				var v1 = v;
				var k = v1.keys();
				while(k.hasNext()) {
					var k1 = k.next();
					var id = Reflect.field(k1,"__id__");
					Reflect.deleteField(k1,"__id__");
					this.serialize(k1);
					k1["__id__"] = id;
					this.serialize(v1.h[k1.__id__]);
				}
				this.buf.b += "h";
				break;
			case haxe_ds_StringMap:
				this.buf.b += "b";
				var v1 = v;
				var k = haxe_ds_StringMap.keysIterator(v1.h);
				while(k.hasNext()) {
					var k1 = k.next();
					this.serializeString(k1);
					this.serialize(v1.h[k1]);
				}
				this.buf.b += "h";
				break;
			case haxe_io_Bytes:
				var v1 = v;
				this.buf.b += "s";
				this.buf.b += Std.string(Math.ceil(v1.length * 8 / 6));
				this.buf.b += ":";
				var i = 0;
				var max = v1.length - 2;
				var b64 = haxe_Serializer.BASE64_CODES;
				if(b64 == null) {
					var this1 = new Array(haxe_Serializer.BASE64.length);
					b64 = this1;
					var _g1 = 0;
					var _g2 = haxe_Serializer.BASE64.length;
					while(_g1 < _g2) {
						var i1 = _g1++;
						b64[i1] = HxOverrides.cca(haxe_Serializer.BASE64,i1);
					}
					haxe_Serializer.BASE64_CODES = b64;
				}
				while(i < max) {
					var b1 = v1.b[i++];
					var b2 = v1.b[i++];
					var b3 = v1.b[i++];
					this.buf.b += String.fromCodePoint(b64[b1 >> 2]);
					this.buf.b += String.fromCodePoint(b64[(b1 << 4 | b2 >> 4) & 63]);
					this.buf.b += String.fromCodePoint(b64[(b2 << 2 | b3 >> 6) & 63]);
					this.buf.b += String.fromCodePoint(b64[b3 & 63]);
				}
				if(i == max) {
					var b1 = v1.b[i++];
					var b2 = v1.b[i++];
					this.buf.b += String.fromCodePoint(b64[b1 >> 2]);
					this.buf.b += String.fromCodePoint(b64[(b1 << 4 | b2 >> 4) & 63]);
					this.buf.b += String.fromCodePoint(b64[b2 << 2 & 63]);
				} else if(i == max + 1) {
					var b1 = v1.b[i++];
					this.buf.b += String.fromCodePoint(b64[b1 >> 2]);
					this.buf.b += String.fromCodePoint(b64[b1 << 4 & 63]);
				}
				break;
			default:
				if(this.useCache) {
					this.cache.pop();
				}
				if(v.hxSerialize != null) {
					this.buf.b += "C";
					this.serializeString(c.__name__);
					if(this.useCache) {
						this.cache.push(v);
					}
					v.hxSerialize(this);
					this.buf.b += "g";
				} else {
					this.buf.b += "c";
					this.serializeString(c.__name__);
					if(this.useCache) {
						this.cache.push(v);
					}
					this.serializeFields(v);
				}
			}
			break;
		case 7:
			var e = _g.e;
			if(this.useCache) {
				if(this.serializeRef(v)) {
					return;
				}
				this.cache.pop();
			}
			this.buf.b += Std.string(this.useEnumIndex ? "j" : "w");
			this.serializeString(e.__ename__);
			if(this.useEnumIndex) {
				this.buf.b += ":";
				this.buf.b += Std.string(v._hx_index);
			} else {
				var e = v;
				this.serializeString($hxEnums[e.__enum__].__constructs__[e._hx_index]);
			}
			this.buf.b += ":";
			var params = Type.enumParameters(v);
			this.buf.b += Std.string(params.length);
			var _g = 0;
			while(_g < params.length) {
				var p = params[_g];
				++_g;
				this.serialize(p);
			}
			if(this.useCache) {
				this.cache.push(v);
			}
			break;
		default:
			throw haxe_Exception.thrown("Cannot serialize " + Std.string(v));
		}
	}
	,__class__: haxe_Serializer
};
var haxe_Timer = function(time_ms) {
	var me = this;
	this.id = setInterval(function() {
		me.run();
	},time_ms);
};
$hxClasses["haxe.Timer"] = haxe_Timer;
haxe_Timer.__name__ = "haxe.Timer";
haxe_Timer.delay = function(f,time_ms) {
	var t = new haxe_Timer(time_ms);
	t.run = function() {
		t.stop();
		f();
	};
	return t;
};
haxe_Timer.measure = function(f,pos) {
	var t0 = new Date().getTime() / 1000;
	var r = f();
	haxe_Log.trace(new Date().getTime() / 1000 - t0 + "s",pos);
	return r;
};
haxe_Timer.stamp = function() {
	return new Date().getTime() / 1000;
};
haxe_Timer.prototype = {
	id: null
	,stop: function() {
		if(this.id == null) {
			return;
		}
		clearInterval(this.id);
		this.id = null;
	}
	,run: function() {
	}
	,__class__: haxe_Timer
};
var haxe__$Unserializer_DefaultResolver = function() {
};
$hxClasses["haxe._Unserializer.DefaultResolver"] = haxe__$Unserializer_DefaultResolver;
haxe__$Unserializer_DefaultResolver.__name__ = "haxe._Unserializer.DefaultResolver";
haxe__$Unserializer_DefaultResolver.prototype = {
	resolveClass: function(name) {
		return $hxClasses[name];
	}
	,resolveEnum: function(name) {
		return $hxEnums[name];
	}
	,__class__: haxe__$Unserializer_DefaultResolver
};
var haxe_Unserializer = function(buf) {
	this.buf = buf;
	this.length = buf.length;
	this.pos = 0;
	this.scache = [];
	this.cache = [];
	var r = haxe_Unserializer.DEFAULT_RESOLVER;
	if(r == null) {
		r = new haxe__$Unserializer_DefaultResolver();
		haxe_Unserializer.DEFAULT_RESOLVER = r;
	}
	this.resolver = r;
};
$hxClasses["haxe.Unserializer"] = haxe_Unserializer;
haxe_Unserializer.__name__ = "haxe.Unserializer";
haxe_Unserializer.initCodes = function() {
	var codes = [];
	var _g = 0;
	var _g1 = haxe_Unserializer.BASE64.length;
	while(_g < _g1) {
		var i = _g++;
		codes[haxe_Unserializer.BASE64.charCodeAt(i)] = i;
	}
	return codes;
};
haxe_Unserializer.run = function(v) {
	return new haxe_Unserializer(v).unserialize();
};
haxe_Unserializer.prototype = {
	buf: null
	,pos: null
	,length: null
	,cache: null
	,scache: null
	,resolver: null
	,setResolver: function(r) {
		if(r == null) {
			if(haxe__$Unserializer_NullResolver.instance == null) {
				haxe__$Unserializer_NullResolver.instance = new haxe__$Unserializer_NullResolver();
			}
			this.resolver = haxe__$Unserializer_NullResolver.instance;
		} else {
			this.resolver = r;
		}
	}
	,readDigits: function() {
		var k = 0;
		var s = false;
		var fpos = this.pos;
		while(true) {
			var c = this.buf.charCodeAt(this.pos);
			if(c != c) {
				break;
			}
			if(c == 45) {
				if(this.pos != fpos) {
					break;
				}
				s = true;
				this.pos++;
				continue;
			}
			if(c < 48 || c > 57) {
				break;
			}
			k = k * 10 + (c - 48);
			this.pos++;
		}
		if(s) {
			k *= -1;
		}
		return k;
	}
	,readFloat: function() {
		var p1 = this.pos;
		while(true) {
			var c = this.buf.charCodeAt(this.pos);
			if(c != c) {
				break;
			}
			if(c >= 43 && c < 58 || c == 101 || c == 69) {
				this.pos++;
			} else {
				break;
			}
		}
		return parseFloat(HxOverrides.substr(this.buf,p1,this.pos - p1));
	}
	,unserializeObject: function(o) {
		while(true) {
			if(this.pos >= this.length) {
				throw haxe_Exception.thrown("Invalid object");
			}
			if(this.buf.charCodeAt(this.pos) == 103) {
				break;
			}
			var k = this.unserialize();
			if(typeof(k) != "string") {
				throw haxe_Exception.thrown("Invalid object key");
			}
			var v = this.unserialize();
			o[k] = v;
		}
		this.pos++;
	}
	,unserializeEnum: function(edecl,tag) {
		if(this.buf.charCodeAt(this.pos++) != 58) {
			throw haxe_Exception.thrown("Invalid enum format");
		}
		var nargs = this.readDigits();
		if(nargs == 0) {
			return Type.createEnum(edecl,tag);
		}
		var args = [];
		while(nargs-- > 0) args.push(this.unserialize());
		return Type.createEnum(edecl,tag,args);
	}
	,unserialize: function() {
		switch(this.buf.charCodeAt(this.pos++)) {
		case 65:
			var name = this.unserialize();
			var cl = this.resolver.resolveClass(name);
			if(cl == null) {
				throw haxe_Exception.thrown("Class not found " + name);
			}
			return cl;
		case 66:
			var name = this.unserialize();
			var e = this.resolver.resolveEnum(name);
			if(e == null) {
				throw haxe_Exception.thrown("Enum not found " + name);
			}
			return e;
		case 67:
			var name = this.unserialize();
			var cl = this.resolver.resolveClass(name);
			if(cl == null) {
				throw haxe_Exception.thrown("Class not found " + name);
			}
			var o = Object.create(cl.prototype);
			this.cache.push(o);
			o.hxUnserialize(this);
			if(this.buf.charCodeAt(this.pos++) != 103) {
				throw haxe_Exception.thrown("Invalid custom data");
			}
			return o;
		case 77:
			var h = new haxe_ds_ObjectMap();
			this.cache.push(h);
			var buf = this.buf;
			while(this.buf.charCodeAt(this.pos) != 104) {
				var s = this.unserialize();
				h.set(s,this.unserialize());
			}
			this.pos++;
			return h;
		case 82:
			var n = this.readDigits();
			if(n < 0 || n >= this.scache.length) {
				throw haxe_Exception.thrown("Invalid string reference");
			}
			return this.scache[n];
		case 97:
			var buf = this.buf;
			var a = [];
			this.cache.push(a);
			while(true) {
				var c = this.buf.charCodeAt(this.pos);
				if(c == 104) {
					this.pos++;
					break;
				}
				if(c == 117) {
					this.pos++;
					var n = this.readDigits();
					a[a.length + n - 1] = null;
				} else {
					a.push(this.unserialize());
				}
			}
			return a;
		case 98:
			var h = new haxe_ds_StringMap();
			this.cache.push(h);
			var buf = this.buf;
			while(this.buf.charCodeAt(this.pos) != 104) {
				var s = this.unserialize();
				var value = this.unserialize();
				h.h[s] = value;
			}
			this.pos++;
			return h;
		case 99:
			var name = this.unserialize();
			var cl = this.resolver.resolveClass(name);
			if(cl == null) {
				throw haxe_Exception.thrown("Class not found " + name);
			}
			var o = Object.create(cl.prototype);
			this.cache.push(o);
			this.unserializeObject(o);
			return o;
		case 100:
			return this.readFloat();
		case 102:
			return false;
		case 105:
			return this.readDigits();
		case 106:
			var name = this.unserialize();
			var edecl = this.resolver.resolveEnum(name);
			if(edecl == null) {
				throw haxe_Exception.thrown("Enum not found " + name);
			}
			this.pos++;
			var index = this.readDigits();
			var tag = edecl.__constructs__.slice()[index];
			if(tag == null) {
				throw haxe_Exception.thrown("Unknown enum index " + name + "@" + index);
			}
			var e = this.unserializeEnum(edecl,tag);
			this.cache.push(e);
			return e;
		case 107:
			return NaN;
		case 108:
			var l = new haxe_ds_List();
			this.cache.push(l);
			var buf = this.buf;
			while(this.buf.charCodeAt(this.pos) != 104) l.add(this.unserialize());
			this.pos++;
			return l;
		case 109:
			return -Infinity;
		case 110:
			return null;
		case 111:
			var o = { };
			this.cache.push(o);
			this.unserializeObject(o);
			return o;
		case 112:
			return Infinity;
		case 113:
			var h = new haxe_ds_IntMap();
			this.cache.push(h);
			var buf = this.buf;
			var c = this.buf.charCodeAt(this.pos++);
			while(c == 58) {
				var i = this.readDigits();
				var value = this.unserialize();
				h.h[i] = value;
				c = this.buf.charCodeAt(this.pos++);
			}
			if(c != 104) {
				throw haxe_Exception.thrown("Invalid IntMap format");
			}
			return h;
		case 114:
			var n = this.readDigits();
			if(n < 0 || n >= this.cache.length) {
				throw haxe_Exception.thrown("Invalid reference");
			}
			return this.cache[n];
		case 115:
			var len = this.readDigits();
			var buf = this.buf;
			if(this.buf.charCodeAt(this.pos++) != 58 || this.length - this.pos < len) {
				throw haxe_Exception.thrown("Invalid bytes length");
			}
			var codes = haxe_Unserializer.CODES;
			if(codes == null) {
				codes = haxe_Unserializer.initCodes();
				haxe_Unserializer.CODES = codes;
			}
			var i = this.pos;
			var rest = len & 3;
			var size = (len >> 2) * 3 + (rest >= 2 ? rest - 1 : 0);
			var max = i + (len - rest);
			var bytes = new haxe_io_Bytes(new ArrayBuffer(size));
			var bpos = 0;
			while(i < max) {
				var c1 = codes[buf.charCodeAt(i++)];
				var c2 = codes[buf.charCodeAt(i++)];
				bytes.b[bpos++] = (c1 << 2 | c2 >> 4) & 255;
				var c3 = codes[buf.charCodeAt(i++)];
				bytes.b[bpos++] = (c2 << 4 | c3 >> 2) & 255;
				var c4 = codes[buf.charCodeAt(i++)];
				bytes.b[bpos++] = (c3 << 6 | c4) & 255;
			}
			if(rest >= 2) {
				var c1 = codes[buf.charCodeAt(i++)];
				var c2 = codes[buf.charCodeAt(i++)];
				bytes.b[bpos++] = (c1 << 2 | c2 >> 4) & 255;
				if(rest == 3) {
					var c3 = codes[buf.charCodeAt(i++)];
					bytes.b[bpos++] = (c2 << 4 | c3 >> 2) & 255;
				}
			}
			this.pos += len;
			this.cache.push(bytes);
			return bytes;
		case 116:
			return true;
		case 118:
			var d;
			if(this.buf.charCodeAt(this.pos) >= 48 && this.buf.charCodeAt(this.pos) <= 57 && this.buf.charCodeAt(this.pos + 1) >= 48 && this.buf.charCodeAt(this.pos + 1) <= 57 && this.buf.charCodeAt(this.pos + 2) >= 48 && this.buf.charCodeAt(this.pos + 2) <= 57 && this.buf.charCodeAt(this.pos + 3) >= 48 && this.buf.charCodeAt(this.pos + 3) <= 57 && this.buf.charCodeAt(this.pos + 4) == 45) {
				d = HxOverrides.strDate(HxOverrides.substr(this.buf,this.pos,19));
				this.pos += 19;
			} else {
				d = new Date(this.readFloat());
			}
			this.cache.push(d);
			return d;
		case 119:
			var name = this.unserialize();
			var edecl = this.resolver.resolveEnum(name);
			if(edecl == null) {
				throw haxe_Exception.thrown("Enum not found " + name);
			}
			var e = this.unserializeEnum(edecl,this.unserialize());
			this.cache.push(e);
			return e;
		case 120:
			throw haxe_Exception.thrown(this.unserialize());
		case 121:
			var len = this.readDigits();
			if(this.buf.charCodeAt(this.pos++) != 58 || this.length - this.pos < len) {
				throw haxe_Exception.thrown("Invalid string length");
			}
			var s = HxOverrides.substr(this.buf,this.pos,len);
			this.pos += len;
			s = decodeURIComponent(s.split("+").join(" "));
			this.scache.push(s);
			return s;
		case 122:
			return 0;
		default:
		}
		this.pos--;
		throw haxe_Exception.thrown("Invalid char " + this.buf.charAt(this.pos) + " at position " + this.pos);
	}
	,__class__: haxe_Unserializer
};
var haxe__$Unserializer_NullResolver = function() {
};
$hxClasses["haxe._Unserializer.NullResolver"] = haxe__$Unserializer_NullResolver;
haxe__$Unserializer_NullResolver.__name__ = "haxe._Unserializer.NullResolver";
haxe__$Unserializer_NullResolver.prototype = {
	resolveClass: function(name) {
		return null;
	}
	,resolveEnum: function(name) {
		return null;
	}
	,__class__: haxe__$Unserializer_NullResolver
};
var haxe_ValueException = function(value,previous,native) {
	haxe_Exception.call(this,String(value),previous,native);
	this.value = value;
	this.__skipStack++;
};
$hxClasses["haxe.ValueException"] = haxe_ValueException;
haxe_ValueException.__name__ = "haxe.ValueException";
haxe_ValueException.__super__ = haxe_Exception;
haxe_ValueException.prototype = $extend(haxe_Exception.prototype,{
	value: null
	,unwrap: function() {
		return this.value;
	}
	,__class__: haxe_ValueException
});
var haxe_crypto_Adler32 = function() {
	this.a1 = 1;
	this.a2 = 0;
};
$hxClasses["haxe.crypto.Adler32"] = haxe_crypto_Adler32;
haxe_crypto_Adler32.__name__ = "haxe.crypto.Adler32";
haxe_crypto_Adler32.read = function(i) {
	var a = new haxe_crypto_Adler32();
	var a2a = i.readByte();
	var a2b = i.readByte();
	var a1a = i.readByte();
	var a1b = i.readByte();
	a.a1 = a1a << 8 | a1b;
	a.a2 = a2a << 8 | a2b;
	return a;
};
haxe_crypto_Adler32.prototype = {
	a1: null
	,a2: null
	,update: function(b,pos,len) {
		var a1 = this.a1;
		var a2 = this.a2;
		var _g = pos;
		var _g1 = pos + len;
		while(_g < _g1) {
			var p = _g++;
			var c = b.b[p];
			a1 = (a1 + c) % 65521;
			a2 = (a2 + a1) % 65521;
		}
		this.a1 = a1;
		this.a2 = a2;
	}
	,equals: function(a) {
		if(a.a1 == this.a1) {
			return a.a2 == this.a2;
		} else {
			return false;
		}
	}
	,__class__: haxe_crypto_Adler32
};
var haxe_io_Bytes = function(data) {
	this.length = data.byteLength;
	this.b = new Uint8Array(data);
	this.b.bufferValue = data;
	data.hxBytes = this;
	data.bytes = this.b;
};
$hxClasses["haxe.io.Bytes"] = haxe_io_Bytes;
haxe_io_Bytes.__name__ = "haxe.io.Bytes";
haxe_io_Bytes.alloc = function(length) {
	return new haxe_io_Bytes(new ArrayBuffer(length));
};
haxe_io_Bytes.ofString = function(s,encoding) {
	var a = [];
	var i = 0;
	while(i < s.length) {
		var c = s.charCodeAt(i++);
		if(55296 <= c && c <= 56319) {
			c = c - 55232 << 10 | s.charCodeAt(i++) & 1023;
		}
		if(c <= 127) {
			a.push(c);
		} else if(c <= 2047) {
			a.push(192 | c >> 6);
			a.push(128 | c & 63);
		} else if(c <= 65535) {
			a.push(224 | c >> 12);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		} else {
			a.push(240 | c >> 18);
			a.push(128 | c >> 12 & 63);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		}
	}
	return new haxe_io_Bytes(new Uint8Array(a).buffer);
};
haxe_io_Bytes.ofData = function(b) {
	var hb = b.hxBytes;
	if(hb != null) {
		return hb;
	}
	return new haxe_io_Bytes(b);
};
haxe_io_Bytes.ofHex = function(s) {
	if((s.length & 1) != 0) {
		throw haxe_Exception.thrown("Not a hex string (odd number of digits)");
	}
	var a = [];
	var i = 0;
	var len = s.length >> 1;
	while(i < len) {
		var high = s.charCodeAt(i * 2);
		var low = s.charCodeAt(i * 2 + 1);
		high = (high & 15) + ((high & 64) >> 6) * 9;
		low = (low & 15) + ((low & 64) >> 6) * 9;
		a.push((high << 4 | low) & 255);
		++i;
	}
	return new haxe_io_Bytes(new Uint8Array(a).buffer);
};
haxe_io_Bytes.fastGet = function(b,pos) {
	return b.bytes[pos];
};
haxe_io_Bytes.prototype = {
	length: null
	,b: null
	,data: null
	,get: function(pos) {
		return this.b[pos];
	}
	,set: function(pos,v) {
		this.b[pos] = v & 255;
	}
	,blit: function(pos,src,srcpos,len) {
		if(pos < 0 || srcpos < 0 || len < 0 || pos + len > this.length || srcpos + len > src.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		if(srcpos == 0 && len == src.b.byteLength) {
			this.b.set(src.b,pos);
		} else {
			this.b.set(src.b.subarray(srcpos,srcpos + len),pos);
		}
	}
	,fill: function(pos,len,value) {
		var _g = 0;
		var _g1 = len;
		while(_g < _g1) {
			var i = _g++;
			this.b[pos++] = value & 255;
		}
	}
	,sub: function(pos,len) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		return new haxe_io_Bytes(this.b.buffer.slice(pos + this.b.byteOffset,pos + this.b.byteOffset + len));
	}
	,compare: function(other) {
		var b1 = this.b;
		var b2 = other.b;
		var len = this.length < other.length ? this.length : other.length;
		var _g = 0;
		var _g1 = len;
		while(_g < _g1) {
			var i = _g++;
			if(b1[i] != b2[i]) {
				return b1[i] - b2[i];
			}
		}
		return this.length - other.length;
	}
	,initData: function() {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
	}
	,getDouble: function(pos) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		return this.data.getFloat64(pos,true);
	}
	,getFloat: function(pos) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		return this.data.getFloat32(pos,true);
	}
	,setDouble: function(pos,v) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		this.data.setFloat64(pos,v,true);
	}
	,setFloat: function(pos,v) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		this.data.setFloat32(pos,v,true);
	}
	,getUInt16: function(pos) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		return this.data.getUint16(pos,true);
	}
	,setUInt16: function(pos,v) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		this.data.setUint16(pos,v,true);
	}
	,getInt32: function(pos) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		return this.data.getInt32(pos,true);
	}
	,setInt32: function(pos,v) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		this.data.setInt32(pos,v,true);
	}
	,getInt64: function(pos) {
		var this1 = new haxe__$Int64__$_$_$Int64(this.getInt32(pos + 4),this.getInt32(pos));
		return this1;
	}
	,setInt64: function(pos,v) {
		this.setInt32(pos,v.low);
		this.setInt32(pos + 4,v.high);
	}
	,getString: function(pos,len,encoding) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		var s = "";
		var b = this.b;
		var fcc = _$String_String_$Impl_$.fromCharCode;
		var i = pos;
		var max = pos + len;
		while(i < max) {
			var c = b[i++];
			if(c < 128) {
				if(c == 0) {
					break;
				}
				s += fcc(c);
			} else if(c < 224) {
				s += fcc((c & 63) << 6 | b[i++] & 127);
			} else if(c < 240) {
				var c2 = b[i++];
				s += fcc((c & 31) << 12 | (c2 & 127) << 6 | b[i++] & 127);
			} else {
				var c21 = b[i++];
				var c3 = b[i++];
				var u = (c & 15) << 18 | (c21 & 127) << 12 | (c3 & 127) << 6 | b[i++] & 127;
				s += fcc((u >> 10) + 55232);
				s += fcc(u & 1023 | 56320);
			}
		}
		return s;
	}
	,readString: function(pos,len) {
		return this.getString(pos,len);
	}
	,toString: function() {
		return this.getString(0,this.length);
	}
	,toHex: function() {
		var s_b = "";
		var chars = [];
		var str = "0123456789abcdef";
		var _g = 0;
		var _g1 = str.length;
		while(_g < _g1) {
			var i = _g++;
			chars.push(HxOverrides.cca(str,i));
		}
		var _g = 0;
		var _g1 = this.length;
		while(_g < _g1) {
			var i = _g++;
			var c = this.b[i];
			s_b += String.fromCodePoint(chars[c >> 4]);
			s_b += String.fromCodePoint(chars[c & 15]);
		}
		return s_b;
	}
	,getData: function() {
		return this.b.bufferValue;
	}
	,__class__: haxe_io_Bytes
};
var haxe_crypto_Base64 = function() { };
$hxClasses["haxe.crypto.Base64"] = haxe_crypto_Base64;
haxe_crypto_Base64.__name__ = "haxe.crypto.Base64";
haxe_crypto_Base64.encode = function(bytes,complement) {
	if(complement == null) {
		complement = true;
	}
	var str = new haxe_crypto_BaseCode(haxe_crypto_Base64.BYTES).encodeBytes(bytes).toString();
	if(complement) {
		switch(bytes.length % 3) {
		case 1:
			str += "==";
			break;
		case 2:
			str += "=";
			break;
		default:
		}
	}
	return str;
};
haxe_crypto_Base64.decode = function(str,complement) {
	if(complement == null) {
		complement = true;
	}
	if(complement) {
		while(HxOverrides.cca(str,str.length - 1) == 61) str = HxOverrides.substr(str,0,-1);
	}
	return new haxe_crypto_BaseCode(haxe_crypto_Base64.BYTES).decodeBytes(haxe_io_Bytes.ofString(str));
};
var haxe_crypto_BaseCode = function(base) {
	var len = base.length;
	var nbits = 1;
	while(len > 1 << nbits) ++nbits;
	if(nbits > 8 || len != 1 << nbits) {
		throw haxe_Exception.thrown("BaseCode : base length must be a power of two.");
	}
	this.base = base;
	this.nbits = nbits;
};
$hxClasses["haxe.crypto.BaseCode"] = haxe_crypto_BaseCode;
haxe_crypto_BaseCode.__name__ = "haxe.crypto.BaseCode";
haxe_crypto_BaseCode.prototype = {
	base: null
	,nbits: null
	,tbl: null
	,encodeBytes: function(b) {
		var nbits = this.nbits;
		var base = this.base;
		var size = b.length * 8 / nbits | 0;
		var out = new haxe_io_Bytes(new ArrayBuffer(size + (b.length * 8 % nbits == 0 ? 0 : 1)));
		var buf = 0;
		var curbits = 0;
		var mask = (1 << nbits) - 1;
		var pin = 0;
		var pout = 0;
		while(pout < size) {
			while(curbits < nbits) {
				curbits += 8;
				buf <<= 8;
				buf |= b.b[pin++];
			}
			curbits -= nbits;
			out.b[pout++] = base.b[buf >> curbits & mask] & 255;
		}
		if(curbits > 0) {
			out.b[pout++] = base.b[buf << nbits - curbits & mask] & 255;
		}
		return out;
	}
	,initTable: function() {
		var tbl = [];
		var _g = 0;
		while(_g < 256) {
			var i = _g++;
			tbl[i] = -1;
		}
		var _g = 0;
		var _g1 = this.base.length;
		while(_g < _g1) {
			var i = _g++;
			tbl[this.base.b[i]] = i;
		}
		this.tbl = tbl;
	}
	,decodeBytes: function(b) {
		var nbits = this.nbits;
		var base = this.base;
		if(this.tbl == null) {
			this.initTable();
		}
		var tbl = this.tbl;
		var size = b.length * nbits >> 3;
		var out = new haxe_io_Bytes(new ArrayBuffer(size));
		var buf = 0;
		var curbits = 0;
		var pin = 0;
		var pout = 0;
		while(pout < size) {
			while(curbits < 8) {
				curbits += nbits;
				buf <<= nbits;
				var i = tbl[b.b[pin++]];
				if(i == -1) {
					throw haxe_Exception.thrown("BaseCode : invalid encoded char");
				}
				buf |= i;
			}
			curbits -= 8;
			out.b[pout++] = buf >> curbits & 255 & 255;
		}
		return out;
	}
	,__class__: haxe_crypto_BaseCode
};
var haxe_crypto_Md5 = function() {
};
$hxClasses["haxe.crypto.Md5"] = haxe_crypto_Md5;
haxe_crypto_Md5.__name__ = "haxe.crypto.Md5";
haxe_crypto_Md5.encode = function(s) {
	var m = new haxe_crypto_Md5();
	var h = m.doEncode(haxe_crypto_Md5.str2blks(s));
	return m.hex(h);
};
haxe_crypto_Md5.str2blks = function(str) {
	var str1 = haxe_io_Bytes.ofString(str);
	var nblk = (str1.length + 8 >> 6) + 1;
	var blks = [];
	var blksSize = nblk * 16;
	var _g = 0;
	var _g1 = blksSize;
	while(_g < _g1) {
		var i = _g++;
		blks[i] = 0;
	}
	var i = 0;
	var max = str1.length;
	var l = max * 8;
	while(i < max) {
		blks[i >> 2] |= str1.b[i] << (l + i) % 4 * 8;
		++i;
	}
	blks[i >> 2] |= 128 << (l + i) % 4 * 8;
	var k = nblk * 16 - 2;
	blks[k] = l & 255;
	blks[k] |= (l >>> 8 & 255) << 8;
	blks[k] |= (l >>> 16 & 255) << 16;
	blks[k] |= (l >>> 24 & 255) << 24;
	return blks;
};
haxe_crypto_Md5.prototype = {
	bitOR: function(a,b) {
		var lsb = a & 1 | b & 1;
		var msb31 = a >>> 1 | b >>> 1;
		return msb31 << 1 | lsb;
	}
	,bitXOR: function(a,b) {
		var lsb = a & 1 ^ b & 1;
		var msb31 = a >>> 1 ^ b >>> 1;
		return msb31 << 1 | lsb;
	}
	,bitAND: function(a,b) {
		var lsb = a & 1 & (b & 1);
		var msb31 = a >>> 1 & b >>> 1;
		return msb31 << 1 | lsb;
	}
	,addme: function(x,y) {
		var lsw = (x & 65535) + (y & 65535);
		var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
		return msw << 16 | lsw & 65535;
	}
	,hex: function(a) {
		var str = "";
		var hex_chr = "0123456789abcdef";
		var _g = 0;
		while(_g < a.length) {
			var num = a[_g];
			++_g;
			str += hex_chr.charAt(num >> 4 & 15) + hex_chr.charAt(num & 15);
			str += hex_chr.charAt(num >> 12 & 15) + hex_chr.charAt(num >> 8 & 15);
			str += hex_chr.charAt(num >> 20 & 15) + hex_chr.charAt(num >> 16 & 15);
			str += hex_chr.charAt(num >> 28 & 15) + hex_chr.charAt(num >> 24 & 15);
		}
		return str;
	}
	,rol: function(num,cnt) {
		return num << cnt | num >>> 32 - cnt;
	}
	,cmn: function(q,a,b,x,s,t) {
		return this.addme(this.rol(this.addme(this.addme(a,q),this.addme(x,t)),s),b);
	}
	,ff: function(a,b,c,d,x,s,t) {
		return this.cmn(this.bitOR(this.bitAND(b,c),this.bitAND(~b,d)),a,b,x,s,t);
	}
	,gg: function(a,b,c,d,x,s,t) {
		return this.cmn(this.bitOR(this.bitAND(b,d),this.bitAND(c,~d)),a,b,x,s,t);
	}
	,hh: function(a,b,c,d,x,s,t) {
		return this.cmn(this.bitXOR(this.bitXOR(b,c),d),a,b,x,s,t);
	}
	,ii: function(a,b,c,d,x,s,t) {
		return this.cmn(this.bitXOR(c,this.bitOR(b,~d)),a,b,x,s,t);
	}
	,doEncode: function(x) {
		var a = 1732584193;
		var b = -271733879;
		var c = -1732584194;
		var d = 271733878;
		var step;
		var i = 0;
		while(i < x.length) {
			var olda = a;
			var oldb = b;
			var oldc = c;
			var oldd = d;
			step = 0;
			a = this.ff(a,b,c,d,x[i],7,-680876936);
			d = this.ff(d,a,b,c,x[i + 1],12,-389564586);
			c = this.ff(c,d,a,b,x[i + 2],17,606105819);
			b = this.ff(b,c,d,a,x[i + 3],22,-1044525330);
			a = this.ff(a,b,c,d,x[i + 4],7,-176418897);
			d = this.ff(d,a,b,c,x[i + 5],12,1200080426);
			c = this.ff(c,d,a,b,x[i + 6],17,-1473231341);
			b = this.ff(b,c,d,a,x[i + 7],22,-45705983);
			a = this.ff(a,b,c,d,x[i + 8],7,1770035416);
			d = this.ff(d,a,b,c,x[i + 9],12,-1958414417);
			c = this.ff(c,d,a,b,x[i + 10],17,-42063);
			b = this.ff(b,c,d,a,x[i + 11],22,-1990404162);
			a = this.ff(a,b,c,d,x[i + 12],7,1804603682);
			d = this.ff(d,a,b,c,x[i + 13],12,-40341101);
			c = this.ff(c,d,a,b,x[i + 14],17,-1502002290);
			b = this.ff(b,c,d,a,x[i + 15],22,1236535329);
			a = this.gg(a,b,c,d,x[i + 1],5,-165796510);
			d = this.gg(d,a,b,c,x[i + 6],9,-1069501632);
			c = this.gg(c,d,a,b,x[i + 11],14,643717713);
			b = this.gg(b,c,d,a,x[i],20,-373897302);
			a = this.gg(a,b,c,d,x[i + 5],5,-701558691);
			d = this.gg(d,a,b,c,x[i + 10],9,38016083);
			c = this.gg(c,d,a,b,x[i + 15],14,-660478335);
			b = this.gg(b,c,d,a,x[i + 4],20,-405537848);
			a = this.gg(a,b,c,d,x[i + 9],5,568446438);
			d = this.gg(d,a,b,c,x[i + 14],9,-1019803690);
			c = this.gg(c,d,a,b,x[i + 3],14,-187363961);
			b = this.gg(b,c,d,a,x[i + 8],20,1163531501);
			a = this.gg(a,b,c,d,x[i + 13],5,-1444681467);
			d = this.gg(d,a,b,c,x[i + 2],9,-51403784);
			c = this.gg(c,d,a,b,x[i + 7],14,1735328473);
			b = this.gg(b,c,d,a,x[i + 12],20,-1926607734);
			a = this.hh(a,b,c,d,x[i + 5],4,-378558);
			d = this.hh(d,a,b,c,x[i + 8],11,-2022574463);
			c = this.hh(c,d,a,b,x[i + 11],16,1839030562);
			b = this.hh(b,c,d,a,x[i + 14],23,-35309556);
			a = this.hh(a,b,c,d,x[i + 1],4,-1530992060);
			d = this.hh(d,a,b,c,x[i + 4],11,1272893353);
			c = this.hh(c,d,a,b,x[i + 7],16,-155497632);
			b = this.hh(b,c,d,a,x[i + 10],23,-1094730640);
			a = this.hh(a,b,c,d,x[i + 13],4,681279174);
			d = this.hh(d,a,b,c,x[i],11,-358537222);
			c = this.hh(c,d,a,b,x[i + 3],16,-722521979);
			b = this.hh(b,c,d,a,x[i + 6],23,76029189);
			a = this.hh(a,b,c,d,x[i + 9],4,-640364487);
			d = this.hh(d,a,b,c,x[i + 12],11,-421815835);
			c = this.hh(c,d,a,b,x[i + 15],16,530742520);
			b = this.hh(b,c,d,a,x[i + 2],23,-995338651);
			a = this.ii(a,b,c,d,x[i],6,-198630844);
			d = this.ii(d,a,b,c,x[i + 7],10,1126891415);
			c = this.ii(c,d,a,b,x[i + 14],15,-1416354905);
			b = this.ii(b,c,d,a,x[i + 5],21,-57434055);
			a = this.ii(a,b,c,d,x[i + 12],6,1700485571);
			d = this.ii(d,a,b,c,x[i + 3],10,-1894986606);
			c = this.ii(c,d,a,b,x[i + 10],15,-1051523);
			b = this.ii(b,c,d,a,x[i + 1],21,-2054922799);
			a = this.ii(a,b,c,d,x[i + 8],6,1873313359);
			d = this.ii(d,a,b,c,x[i + 15],10,-30611744);
			c = this.ii(c,d,a,b,x[i + 6],15,-1560198380);
			b = this.ii(b,c,d,a,x[i + 13],21,1309151649);
			a = this.ii(a,b,c,d,x[i + 4],6,-145523070);
			d = this.ii(d,a,b,c,x[i + 11],10,-1120210379);
			c = this.ii(c,d,a,b,x[i + 2],15,718787259);
			b = this.ii(b,c,d,a,x[i + 9],21,-343485551);
			a = this.addme(a,olda);
			b = this.addme(b,oldb);
			c = this.addme(c,oldc);
			d = this.addme(d,oldd);
			i += 16;
		}
		return [a,b,c,d];
	}
	,__class__: haxe_crypto_Md5
};
var haxe_ds_ArraySort = function() { };
$hxClasses["haxe.ds.ArraySort"] = haxe_ds_ArraySort;
haxe_ds_ArraySort.__name__ = "haxe.ds.ArraySort";
haxe_ds_ArraySort.sort = function(a,cmp) {
	haxe_ds_ArraySort.rec(a,cmp,0,a.length);
};
haxe_ds_ArraySort.rec = function(a,cmp,from,to) {
	var middle = from + to >> 1;
	if(to - from < 12) {
		if(to <= from) {
			return;
		}
		var _g = from + 1;
		var _g1 = to;
		while(_g < _g1) {
			var i = _g++;
			var j = i;
			while(j > from) {
				if(cmp(a[j],a[j - 1]) < 0) {
					haxe_ds_ArraySort.swap(a,j - 1,j);
				} else {
					break;
				}
				--j;
			}
		}
		return;
	}
	haxe_ds_ArraySort.rec(a,cmp,from,middle);
	haxe_ds_ArraySort.rec(a,cmp,middle,to);
	haxe_ds_ArraySort.doMerge(a,cmp,from,middle,to,middle - from,to - middle);
};
haxe_ds_ArraySort.doMerge = function(a,cmp,from,pivot,to,len1,len2) {
	var first_cut;
	var second_cut;
	var len11;
	var len22;
	if(len1 == 0 || len2 == 0) {
		return;
	}
	if(len1 + len2 == 2) {
		if(cmp(a[pivot],a[from]) < 0) {
			haxe_ds_ArraySort.swap(a,pivot,from);
		}
		return;
	}
	if(len1 > len2) {
		len11 = len1 >> 1;
		first_cut = from + len11;
		second_cut = haxe_ds_ArraySort.lower(a,cmp,pivot,to,first_cut);
		len22 = second_cut - pivot;
	} else {
		len22 = len2 >> 1;
		second_cut = pivot + len22;
		first_cut = haxe_ds_ArraySort.upper(a,cmp,from,pivot,second_cut);
		len11 = first_cut - from;
	}
	haxe_ds_ArraySort.rotate(a,cmp,first_cut,pivot,second_cut);
	var new_mid = first_cut + len22;
	haxe_ds_ArraySort.doMerge(a,cmp,from,first_cut,new_mid,len11,len22);
	haxe_ds_ArraySort.doMerge(a,cmp,new_mid,second_cut,to,len1 - len11,len2 - len22);
};
haxe_ds_ArraySort.rotate = function(a,cmp,from,mid,to) {
	if(from == mid || mid == to) {
		return;
	}
	var n = haxe_ds_ArraySort.gcd(to - from,mid - from);
	while(n-- != 0) {
		var val = a[from + n];
		var shift = mid - from;
		var p1 = from + n;
		var p2 = from + n + shift;
		while(p2 != from + n) {
			a[p1] = a[p2];
			p1 = p2;
			if(to - p2 > shift) {
				p2 += shift;
			} else {
				p2 = from + (shift - (to - p2));
			}
		}
		a[p1] = val;
	}
};
haxe_ds_ArraySort.gcd = function(m,n) {
	while(n != 0) {
		var t = m % n;
		m = n;
		n = t;
	}
	return m;
};
haxe_ds_ArraySort.upper = function(a,cmp,from,to,val) {
	var len = to - from;
	var half;
	var mid;
	while(len > 0) {
		half = len >> 1;
		mid = from + half;
		if(cmp(a[val],a[mid]) < 0) {
			len = half;
		} else {
			from = mid + 1;
			len = len - half - 1;
		}
	}
	return from;
};
haxe_ds_ArraySort.lower = function(a,cmp,from,to,val) {
	var len = to - from;
	var half;
	var mid;
	while(len > 0) {
		half = len >> 1;
		mid = from + half;
		if(cmp(a[mid],a[val]) < 0) {
			from = mid + 1;
			len = len - half - 1;
		} else {
			len = half;
		}
	}
	return from;
};
haxe_ds_ArraySort.swap = function(a,i,j) {
	var tmp = a[i];
	a[i] = a[j];
	a[j] = tmp;
};
var haxe_ds_BalancedTree = function() {
};
$hxClasses["haxe.ds.BalancedTree"] = haxe_ds_BalancedTree;
haxe_ds_BalancedTree.__name__ = "haxe.ds.BalancedTree";
haxe_ds_BalancedTree.__interfaces__ = [haxe_IMap];
haxe_ds_BalancedTree.iteratorLoop = function(node,acc) {
	if(node != null) {
		haxe_ds_BalancedTree.iteratorLoop(node.left,acc);
		acc.push(node.value);
		haxe_ds_BalancedTree.iteratorLoop(node.right,acc);
	}
};
haxe_ds_BalancedTree.prototype = {
	root: null
	,set: function(key,value) {
		this.root = this.setLoop(key,value,this.root);
	}
	,get: function(key) {
		var node = this.root;
		while(node != null) {
			var c = this.compare(key,node.key);
			if(c == 0) {
				return node.value;
			}
			if(c < 0) {
				node = node.left;
			} else {
				node = node.right;
			}
		}
		return null;
	}
	,remove: function(key) {
		try {
			this.root = this.removeLoop(key,this.root);
			return true;
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
			if(typeof(haxe_Exception.caught(_g).unwrap()) == "string") {
				return false;
			} else {
				throw _g;
			}
		}
	}
	,exists: function(key) {
		var node = this.root;
		while(node != null) {
			var c = this.compare(key,node.key);
			if(c == 0) {
				return true;
			} else if(c < 0) {
				node = node.left;
			} else {
				node = node.right;
			}
		}
		return false;
	}
	,iterator: function() {
		var ret = [];
		haxe_ds_BalancedTree.iteratorLoop(this.root,ret);
		return new haxe_iterators_ArrayIterator(ret);
	}
	,keyValueIterator: function() {
		return new haxe_iterators_MapKeyValueIterator(this);
	}
	,keys: function() {
		var ret = [];
		this.keysLoop(this.root,ret);
		return new haxe_iterators_ArrayIterator(ret);
	}
	,setLoop: function(k,v,node) {
		if(node == null) {
			return new haxe_ds_TreeNode(null,k,v,null);
		}
		var c = this.compare(k,node.key);
		if(c == 0) {
			return new haxe_ds_TreeNode(node.left,k,v,node.right,node == null ? 0 : node._height);
		} else if(c < 0) {
			var nl = this.setLoop(k,v,node.left);
			return this.balance(nl,node.key,node.value,node.right);
		} else {
			var nr = this.setLoop(k,v,node.right);
			return this.balance(node.left,node.key,node.value,nr);
		}
	}
	,removeLoop: function(k,node) {
		if(node == null) {
			throw haxe_Exception.thrown("Not_found");
		}
		var c = this.compare(k,node.key);
		if(c == 0) {
			return this.merge(node.left,node.right);
		} else if(c < 0) {
			return this.balance(this.removeLoop(k,node.left),node.key,node.value,node.right);
		} else {
			return this.balance(node.left,node.key,node.value,this.removeLoop(k,node.right));
		}
	}
	,keysLoop: function(node,acc) {
		if(node != null) {
			this.keysLoop(node.left,acc);
			acc.push(node.key);
			this.keysLoop(node.right,acc);
		}
	}
	,merge: function(t1,t2) {
		if(t1 == null) {
			return t2;
		}
		if(t2 == null) {
			return t1;
		}
		var t = this.minBinding(t2);
		return this.balance(t1,t.key,t.value,this.removeMinBinding(t2));
	}
	,minBinding: function(t) {
		if(t == null) {
			throw haxe_Exception.thrown("Not_found");
		} else if(t.left == null) {
			return t;
		} else {
			return this.minBinding(t.left);
		}
	}
	,removeMinBinding: function(t) {
		if(t.left == null) {
			return t.right;
		} else {
			return this.balance(this.removeMinBinding(t.left),t.key,t.value,t.right);
		}
	}
	,balance: function(l,k,v,r) {
		var hl = l == null ? 0 : l._height;
		var hr = r == null ? 0 : r._height;
		if(hl > hr + 2) {
			var _this = l.left;
			var _this1 = l.right;
			if((_this == null ? 0 : _this._height) >= (_this1 == null ? 0 : _this1._height)) {
				return new haxe_ds_TreeNode(l.left,l.key,l.value,new haxe_ds_TreeNode(l.right,k,v,r));
			} else {
				return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l.left,l.key,l.value,l.right.left),l.right.key,l.right.value,new haxe_ds_TreeNode(l.right.right,k,v,r));
			}
		} else if(hr > hl + 2) {
			var _this = r.right;
			var _this1 = r.left;
			if((_this == null ? 0 : _this._height) > (_this1 == null ? 0 : _this1._height)) {
				return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l,k,v,r.left),r.key,r.value,r.right);
			} else {
				return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l,k,v,r.left.left),r.left.key,r.left.value,new haxe_ds_TreeNode(r.left.right,r.key,r.value,r.right));
			}
		} else {
			return new haxe_ds_TreeNode(l,k,v,r,(hl > hr ? hl : hr) + 1);
		}
	}
	,compare: function(k1,k2) {
		return Reflect.compare(k1,k2);
	}
	,__class__: haxe_ds_BalancedTree
};
var haxe_ds_TreeNode = function(l,k,v,r,h) {
	if(h == null) {
		h = -1;
	}
	this.left = l;
	this.key = k;
	this.value = v;
	this.right = r;
	if(h == -1) {
		var tmp;
		var _this = this.left;
		var _this1 = this.right;
		if((_this == null ? 0 : _this._height) > (_this1 == null ? 0 : _this1._height)) {
			var _this = this.left;
			tmp = _this == null ? 0 : _this._height;
		} else {
			var _this = this.right;
			tmp = _this == null ? 0 : _this._height;
		}
		this._height = tmp + 1;
	} else {
		this._height = h;
	}
};
$hxClasses["haxe.ds.TreeNode"] = haxe_ds_TreeNode;
haxe_ds_TreeNode.__name__ = "haxe.ds.TreeNode";
haxe_ds_TreeNode.prototype = {
	left: null
	,right: null
	,key: null
	,value: null
	,_height: null
	,__class__: haxe_ds_TreeNode
};
var haxe_ds_EnumValueMap = function() {
	haxe_ds_BalancedTree.call(this);
};
$hxClasses["haxe.ds.EnumValueMap"] = haxe_ds_EnumValueMap;
haxe_ds_EnumValueMap.__name__ = "haxe.ds.EnumValueMap";
haxe_ds_EnumValueMap.__interfaces__ = [haxe_IMap];
haxe_ds_EnumValueMap.__super__ = haxe_ds_BalancedTree;
haxe_ds_EnumValueMap.prototype = $extend(haxe_ds_BalancedTree.prototype,{
	compare: function(k1,k2) {
		var d = k1._hx_index - k2._hx_index;
		if(d != 0) {
			return d;
		}
		var p1 = Type.enumParameters(k1);
		var p2 = Type.enumParameters(k2);
		if(p1.length == 0 && p2.length == 0) {
			return 0;
		}
		return this.compareArgs(p1,p2);
	}
	,compareArgs: function(a1,a2) {
		var ld = a1.length - a2.length;
		if(ld != 0) {
			return ld;
		}
		var _g = 0;
		var _g1 = a1.length;
		while(_g < _g1) {
			var i = _g++;
			var d = this.compareArg(a1[i],a2[i]);
			if(d != 0) {
				return d;
			}
		}
		return 0;
	}
	,compareArg: function(v1,v2) {
		if(Reflect.isEnumValue(v1) && Reflect.isEnumValue(v2)) {
			return this.compare(v1,v2);
		} else if(((v1) instanceof Array) && ((v2) instanceof Array)) {
			return this.compareArgs(v1,v2);
		} else {
			return Reflect.compare(v1,v2);
		}
	}
	,__class__: haxe_ds_EnumValueMap
});
var haxe_ds_GenericCell = function(elt,next) {
	this.elt = elt;
	this.next = next;
};
$hxClasses["haxe.ds.GenericCell"] = haxe_ds_GenericCell;
haxe_ds_GenericCell.__name__ = "haxe.ds.GenericCell";
haxe_ds_GenericCell.prototype = {
	elt: null
	,next: null
	,__class__: haxe_ds_GenericCell
};
var haxe_ds_GenericStack = function() {
};
$hxClasses["haxe.ds.GenericStack"] = haxe_ds_GenericStack;
haxe_ds_GenericStack.__name__ = "haxe.ds.GenericStack";
haxe_ds_GenericStack.prototype = {
	head: null
	,__class__: haxe_ds_GenericStack
};
var haxe_ds_IntMap = function() {
	this.h = { };
};
$hxClasses["haxe.ds.IntMap"] = haxe_ds_IntMap;
haxe_ds_IntMap.__name__ = "haxe.ds.IntMap";
haxe_ds_IntMap.__interfaces__ = [haxe_IMap];
haxe_ds_IntMap.prototype = {
	h: null
	,set: function(key,value) {
		this.h[key] = value;
	}
	,get: function(key) {
		return this.h[key];
	}
	,exists: function(key) {
		return this.h.hasOwnProperty(key);
	}
	,remove: function(key) {
		if(!this.h.hasOwnProperty(key)) {
			return false;
		}
		delete(this.h[key]);
		return true;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h ) if(this.h.hasOwnProperty(key)) a.push(key | 0);
		return new haxe_iterators_ArrayIterator(a);
	}
	,iterator: function() {
		return { ref : this.h, it : this.keys(), hasNext : function() {
			return this.it.hasNext();
		}, next : function() {
			var i = this.it.next();
			return this.ref[i];
		}};
	}
	,keyValueIterator: function() {
		return new haxe_iterators_MapKeyValueIterator(this);
	}
	,__class__: haxe_ds_IntMap
};
var haxe_ds__$List_ListNode = function(item,next) {
	this.item = item;
	this.next = next;
};
$hxClasses["haxe.ds._List.ListNode"] = haxe_ds__$List_ListNode;
haxe_ds__$List_ListNode.__name__ = "haxe.ds._List.ListNode";
haxe_ds__$List_ListNode.prototype = {
	item: null
	,next: null
	,__class__: haxe_ds__$List_ListNode
};
var haxe_ds__$List_ListIterator = function(head) {
	this.head = head;
};
$hxClasses["haxe.ds._List.ListIterator"] = haxe_ds__$List_ListIterator;
haxe_ds__$List_ListIterator.__name__ = "haxe.ds._List.ListIterator";
haxe_ds__$List_ListIterator.prototype = {
	head: null
	,hasNext: function() {
		return this.head != null;
	}
	,next: function() {
		var val = this.head.item;
		this.head = this.head.next;
		return val;
	}
	,__class__: haxe_ds__$List_ListIterator
};
var haxe_ds_StringMap = function() {
	this.h = Object.create(null);
};
$hxClasses["haxe.ds.StringMap"] = haxe_ds_StringMap;
haxe_ds_StringMap.__name__ = "haxe.ds.StringMap";
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.keysIterator = function(h) {
	var keys = Object.keys(h);
	var len = keys.length;
	var idx = 0;
	return { hasNext : function() {
		return idx < len;
	}, next : function() {
		idx += 1;
		return keys[idx - 1];
	}};
};
haxe_ds_StringMap.valueIterator = function(h) {
	var keys = Object.keys(h);
	var len = keys.length;
	var idx = 0;
	return { hasNext : function() {
		return idx < len;
	}, next : function() {
		idx += 1;
		return h[keys[idx - 1]];
	}};
};
haxe_ds_StringMap.kvIterator = function(h) {
	var keys = Object.keys(h);
	var len = keys.length;
	var idx = 0;
	return { hasNext : function() {
		return idx < len;
	}, next : function() {
		idx += 1;
		var k = keys[idx - 1];
		return { key : k, value : h[k]};
	}};
};
haxe_ds_StringMap.createCopy = function(h) {
	var copy = new haxe_ds_StringMap();
	for (var key in h) copy.h[key] = h[key];
	return copy;
};
haxe_ds_StringMap.stringify = function(h) {
	var s = "{";
	var first = true;
	for (var key in h) {
		if (first) first = false; else s += ',';
		s += key + ' => ' + Std.string(h[key]);
	}
	return s + "}";
};
haxe_ds_StringMap.prototype = {
	h: null
	,exists: function(key) {
		return Object.prototype.hasOwnProperty.call(this.h,key);
	}
	,get: function(key) {
		return this.h[key];
	}
	,set: function(key,value) {
		this.h[key] = value;
	}
	,remove: function(key) {
		if(Object.prototype.hasOwnProperty.call(this.h,key)) {
			delete(this.h[key]);
			return true;
		} else {
			return false;
		}
	}
	,keys: function() {
		return haxe_ds_StringMap.keysIterator(this.h);
	}
	,iterator: function() {
		return haxe_ds_StringMap.valueIterator(this.h);
	}
	,keyValueIterator: function() {
		return haxe_ds_StringMap.kvIterator(this.h);
	}
	,__class__: haxe_ds_StringMap
};
var haxe_io_BytesBuffer = function() {
	this.pos = 0;
	this.size = 0;
};
$hxClasses["haxe.io.BytesBuffer"] = haxe_io_BytesBuffer;
haxe_io_BytesBuffer.__name__ = "haxe.io.BytesBuffer";
haxe_io_BytesBuffer.prototype = {
	buffer: null
	,view: null
	,u8: null
	,pos: null
	,size: null
	,addByte: function(byte) {
		if(this.pos == this.size) {
			this.grow(1);
		}
		this.view.setUint8(this.pos++,byte);
	}
	,add: function(src) {
		if(this.pos + src.length > this.size) {
			this.grow(src.length);
		}
		if(this.size == 0) {
			return;
		}
		var sub = new Uint8Array(src.b.buffer,src.b.byteOffset,src.length);
		this.u8.set(sub,this.pos);
		this.pos += src.length;
	}
	,addBytes: function(src,pos,len) {
		if(pos < 0 || len < 0 || pos + len > src.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		if(this.pos + len > this.size) {
			this.grow(len);
		}
		if(this.size == 0) {
			return;
		}
		var sub = new Uint8Array(src.b.buffer,src.b.byteOffset + pos,len);
		this.u8.set(sub,this.pos);
		this.pos += len;
	}
	,grow: function(delta) {
		var req = this.pos + delta;
		var nsize = this.size == 0 ? 16 : this.size;
		while(nsize < req) nsize = nsize * 3 >> 1;
		var nbuf = new ArrayBuffer(nsize);
		var nu8 = new Uint8Array(nbuf);
		if(this.size > 0) {
			nu8.set(this.u8);
		}
		this.size = nsize;
		this.buffer = nbuf;
		this.u8 = nu8;
		this.view = new DataView(this.buffer);
	}
	,getBytes: function() {
		if(this.size == 0) {
			return new haxe_io_Bytes(new ArrayBuffer(0));
		}
		var b = new haxe_io_Bytes(this.buffer);
		b.length = this.pos;
		return b;
	}
	,__class__: haxe_io_BytesBuffer
};
var haxe_io_Input = function() { };
$hxClasses["haxe.io.Input"] = haxe_io_Input;
haxe_io_Input.__name__ = "haxe.io.Input";
haxe_io_Input.prototype = {
	bigEndian: null
	,readByte: function() {
		throw haxe_Exception.thrown("Not implemented");
	}
	,readBytes: function(s,pos,len) {
		var k = len;
		var b = s.b;
		if(pos < 0 || len < 0 || pos + len > s.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		try {
			while(k > 0) {
				b[pos] = this.readByte();
				++pos;
				--k;
			}
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
			if(!((haxe_Exception.caught(_g).unwrap()) instanceof haxe_io_Eof)) {
				throw _g;
			}
		}
		return len - k;
	}
	,readFullBytes: function(s,pos,len) {
		while(len > 0) {
			var k = this.readBytes(s,pos,len);
			if(k == 0) {
				throw haxe_Exception.thrown(haxe_io_Error.Blocked);
			}
			pos += k;
			len -= k;
		}
	}
	,read: function(nbytes) {
		var s = new haxe_io_Bytes(new ArrayBuffer(nbytes));
		var p = 0;
		while(nbytes > 0) {
			var k = this.readBytes(s,p,nbytes);
			if(k == 0) {
				throw haxe_Exception.thrown(haxe_io_Error.Blocked);
			}
			p += k;
			nbytes -= k;
		}
		return s;
	}
	,readInt16: function() {
		var ch1 = this.readByte();
		var ch2 = this.readByte();
		var n = this.bigEndian ? ch2 | ch1 << 8 : ch1 | ch2 << 8;
		if((n & 32768) != 0) {
			return n - 65536;
		}
		return n;
	}
	,readUInt16: function() {
		var ch1 = this.readByte();
		var ch2 = this.readByte();
		if(this.bigEndian) {
			return ch2 | ch1 << 8;
		} else {
			return ch1 | ch2 << 8;
		}
	}
	,readInt32: function() {
		var ch1 = this.readByte();
		var ch2 = this.readByte();
		var ch3 = this.readByte();
		var ch4 = this.readByte();
		if(this.bigEndian) {
			return ch4 | ch3 << 8 | ch2 << 16 | ch1 << 24;
		} else {
			return ch1 | ch2 << 8 | ch3 << 16 | ch4 << 24;
		}
	}
	,readString: function(len,encoding) {
		var b = new haxe_io_Bytes(new ArrayBuffer(len));
		this.readFullBytes(b,0,len);
		return b.getString(0,len,encoding);
	}
	,__class__: haxe_io_Input
};
var haxe_io_BytesInput = function(b,pos,len) {
	if(pos == null) {
		pos = 0;
	}
	if(len == null) {
		len = b.length - pos;
	}
	if(pos < 0 || len < 0 || pos + len > b.length) {
		throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
	}
	this.b = b.b;
	this.pos = pos;
	this.len = len;
	this.totlen = len;
};
$hxClasses["haxe.io.BytesInput"] = haxe_io_BytesInput;
haxe_io_BytesInput.__name__ = "haxe.io.BytesInput";
haxe_io_BytesInput.__super__ = haxe_io_Input;
haxe_io_BytesInput.prototype = $extend(haxe_io_Input.prototype,{
	b: null
	,pos: null
	,len: null
	,totlen: null
	,readByte: function() {
		if(this.len == 0) {
			throw haxe_Exception.thrown(new haxe_io_Eof());
		}
		this.len--;
		return this.b[this.pos++];
	}
	,readBytes: function(buf,pos,len) {
		if(pos < 0 || len < 0 || pos + len > buf.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		if(this.len == 0 && len > 0) {
			throw haxe_Exception.thrown(new haxe_io_Eof());
		}
		if(this.len < len) {
			len = this.len;
		}
		var b1 = this.b;
		var b2 = buf.b;
		var _g = 0;
		var _g1 = len;
		while(_g < _g1) {
			var i = _g++;
			b2[pos + i] = b1[this.pos + i];
		}
		this.pos += len;
		this.len -= len;
		return len;
	}
	,__class__: haxe_io_BytesInput
});
var haxe_io_Encoding = $hxEnums["haxe.io.Encoding"] = { __ename__ : "haxe.io.Encoding", __constructs__ : ["UTF8","RawNative"]
	,UTF8: {_hx_index:0,__enum__:"haxe.io.Encoding",toString:$estr}
	,RawNative: {_hx_index:1,__enum__:"haxe.io.Encoding",toString:$estr}
};
var haxe_io_Eof = function() {
};
$hxClasses["haxe.io.Eof"] = haxe_io_Eof;
haxe_io_Eof.__name__ = "haxe.io.Eof";
haxe_io_Eof.prototype = {
	toString: function() {
		return "Eof";
	}
	,__class__: haxe_io_Eof
};
var haxe_io_Error = $hxEnums["haxe.io.Error"] = { __ename__ : "haxe.io.Error", __constructs__ : ["Blocked","Overflow","OutsideBounds","Custom"]
	,Blocked: {_hx_index:0,__enum__:"haxe.io.Error",toString:$estr}
	,Overflow: {_hx_index:1,__enum__:"haxe.io.Error",toString:$estr}
	,OutsideBounds: {_hx_index:2,__enum__:"haxe.io.Error",toString:$estr}
	,Custom: ($_=function(e) { return {_hx_index:3,e:e,__enum__:"haxe.io.Error",toString:$estr}; },$_.__params__ = ["e"],$_)
};
var haxe_io_FPHelper = function() { };
$hxClasses["haxe.io.FPHelper"] = haxe_io_FPHelper;
haxe_io_FPHelper.__name__ = "haxe.io.FPHelper";
haxe_io_FPHelper.i32ToFloat = function(i) {
	haxe_io_FPHelper.helper.setInt32(0,i,true);
	return haxe_io_FPHelper.helper.getFloat32(0,true);
};
haxe_io_FPHelper.floatToI32 = function(f) {
	haxe_io_FPHelper.helper.setFloat32(0,f,true);
	return haxe_io_FPHelper.helper.getInt32(0,true);
};
haxe_io_FPHelper.i64ToDouble = function(low,high) {
	haxe_io_FPHelper.helper.setInt32(0,low,true);
	haxe_io_FPHelper.helper.setInt32(4,high,true);
	return haxe_io_FPHelper.helper.getFloat64(0,true);
};
haxe_io_FPHelper.doubleToI64 = function(v) {
	var i64 = haxe_io_FPHelper.i64tmp;
	haxe_io_FPHelper.helper.setFloat64(0,v,true);
	i64.low = haxe_io_FPHelper.helper.getInt32(0,true);
	i64.high = haxe_io_FPHelper.helper.getInt32(4,true);
	return i64;
};
var haxe_io_Path = function(path) {
	switch(path) {
	case ".":case "..":
		this.dir = path;
		this.file = "";
		return;
	}
	var c1 = path.lastIndexOf("/");
	var c2 = path.lastIndexOf("\\");
	if(c1 < c2) {
		this.dir = HxOverrides.substr(path,0,c2);
		path = HxOverrides.substr(path,c2 + 1,null);
		this.backslash = true;
	} else if(c2 < c1) {
		this.dir = HxOverrides.substr(path,0,c1);
		path = HxOverrides.substr(path,c1 + 1,null);
	} else {
		this.dir = null;
	}
	var cp = path.lastIndexOf(".");
	if(cp != -1) {
		this.ext = HxOverrides.substr(path,cp + 1,null);
		this.file = HxOverrides.substr(path,0,cp);
	} else {
		this.ext = null;
		this.file = path;
	}
};
$hxClasses["haxe.io.Path"] = haxe_io_Path;
haxe_io_Path.__name__ = "haxe.io.Path";
haxe_io_Path.withoutDirectory = function(path) {
	var s = new haxe_io_Path(path);
	s.dir = null;
	return s.toString();
};
haxe_io_Path.directory = function(path) {
	var s = new haxe_io_Path(path);
	if(s.dir == null) {
		return "";
	}
	return s.dir;
};
haxe_io_Path.prototype = {
	dir: null
	,file: null
	,ext: null
	,backslash: null
	,toString: function() {
		return (this.dir == null ? "" : this.dir + (this.backslash ? "\\" : "/")) + this.file + (this.ext == null ? "" : "." + this.ext);
	}
	,__class__: haxe_io_Path
};
var haxe_iterators_ArrayIterator = function(array) {
	this.current = 0;
	this.array = array;
};
$hxClasses["haxe.iterators.ArrayIterator"] = haxe_iterators_ArrayIterator;
haxe_iterators_ArrayIterator.__name__ = "haxe.iterators.ArrayIterator";
haxe_iterators_ArrayIterator.prototype = {
	array: null
	,current: null
	,hasNext: function() {
		return this.current < this.array.length;
	}
	,next: function() {
		return this.array[this.current++];
	}
	,__class__: haxe_iterators_ArrayIterator
};
var haxe_iterators_MapKeyValueIterator = function(map) {
	this.map = map;
	this.keys = map.keys();
};
$hxClasses["haxe.iterators.MapKeyValueIterator"] = haxe_iterators_MapKeyValueIterator;
haxe_iterators_MapKeyValueIterator.__name__ = "haxe.iterators.MapKeyValueIterator";
haxe_iterators_MapKeyValueIterator.prototype = {
	map: null
	,keys: null
	,hasNext: function() {
		return this.keys.hasNext();
	}
	,next: function() {
		var key = this.keys.next();
		return { value : this.map.get(key), key : key};
	}
	,__class__: haxe_iterators_MapKeyValueIterator
};
var haxe_macro_ComplexType = $hxEnums["haxe.macro.ComplexType"] = { __ename__ : "haxe.macro.ComplexType", __constructs__ : ["TPath","TFunction","TAnonymous","TParent","TExtend","TOptional","TNamed","TIntersection"]
	,TPath: ($_=function(p) { return {_hx_index:0,p:p,__enum__:"haxe.macro.ComplexType",toString:$estr}; },$_.__params__ = ["p"],$_)
	,TFunction: ($_=function(args,ret) { return {_hx_index:1,args:args,ret:ret,__enum__:"haxe.macro.ComplexType",toString:$estr}; },$_.__params__ = ["args","ret"],$_)
	,TAnonymous: ($_=function(fields) { return {_hx_index:2,fields:fields,__enum__:"haxe.macro.ComplexType",toString:$estr}; },$_.__params__ = ["fields"],$_)
	,TParent: ($_=function(t) { return {_hx_index:3,t:t,__enum__:"haxe.macro.ComplexType",toString:$estr}; },$_.__params__ = ["t"],$_)
	,TExtend: ($_=function(p,fields) { return {_hx_index:4,p:p,fields:fields,__enum__:"haxe.macro.ComplexType",toString:$estr}; },$_.__params__ = ["p","fields"],$_)
	,TOptional: ($_=function(t) { return {_hx_index:5,t:t,__enum__:"haxe.macro.ComplexType",toString:$estr}; },$_.__params__ = ["t"],$_)
	,TNamed: ($_=function(n,t) { return {_hx_index:6,n:n,t:t,__enum__:"haxe.macro.ComplexType",toString:$estr}; },$_.__params__ = ["n","t"],$_)
	,TIntersection: ($_=function(tl) { return {_hx_index:7,tl:tl,__enum__:"haxe.macro.ComplexType",toString:$estr}; },$_.__params__ = ["tl"],$_)
};
var haxe_macro_TypeParam = $hxEnums["haxe.macro.TypeParam"] = { __ename__ : "haxe.macro.TypeParam", __constructs__ : ["TPType","TPExpr"]
	,TPType: ($_=function(t) { return {_hx_index:0,t:t,__enum__:"haxe.macro.TypeParam",toString:$estr}; },$_.__params__ = ["t"],$_)
	,TPExpr: ($_=function(e) { return {_hx_index:1,e:e,__enum__:"haxe.macro.TypeParam",toString:$estr}; },$_.__params__ = ["e"],$_)
};
var haxe_macro_Access = $hxEnums["haxe.macro.Access"] = { __ename__ : "haxe.macro.Access", __constructs__ : ["APublic","APrivate","AStatic","AOverride","ADynamic","AInline","AMacro","AFinal","AExtern"]
	,APublic: {_hx_index:0,__enum__:"haxe.macro.Access",toString:$estr}
	,APrivate: {_hx_index:1,__enum__:"haxe.macro.Access",toString:$estr}
	,AStatic: {_hx_index:2,__enum__:"haxe.macro.Access",toString:$estr}
	,AOverride: {_hx_index:3,__enum__:"haxe.macro.Access",toString:$estr}
	,ADynamic: {_hx_index:4,__enum__:"haxe.macro.Access",toString:$estr}
	,AInline: {_hx_index:5,__enum__:"haxe.macro.Access",toString:$estr}
	,AMacro: {_hx_index:6,__enum__:"haxe.macro.Access",toString:$estr}
	,AFinal: {_hx_index:7,__enum__:"haxe.macro.Access",toString:$estr}
	,AExtern: {_hx_index:8,__enum__:"haxe.macro.Access",toString:$estr}
};
var haxe_macro_FieldType = $hxEnums["haxe.macro.FieldType"] = { __ename__ : "haxe.macro.FieldType", __constructs__ : ["FVar","FFun","FProp"]
	,FVar: ($_=function(t,e) { return {_hx_index:0,t:t,e:e,__enum__:"haxe.macro.FieldType",toString:$estr}; },$_.__params__ = ["t","e"],$_)
	,FFun: ($_=function(f) { return {_hx_index:1,f:f,__enum__:"haxe.macro.FieldType",toString:$estr}; },$_.__params__ = ["f"],$_)
	,FProp: ($_=function(get,set,t,e) { return {_hx_index:2,get:get,set:set,t:t,e:e,__enum__:"haxe.macro.FieldType",toString:$estr}; },$_.__params__ = ["get","set","t","e"],$_)
};
var haxe_xml_XmlParserException = function(message,xml,position) {
	this.xml = xml;
	this.message = message;
	this.position = position;
	this.lineNumber = 1;
	this.positionAtLine = 0;
	var _g = 0;
	var _g1 = position;
	while(_g < _g1) {
		var i = _g++;
		var c = xml.charCodeAt(i);
		if(c == 10) {
			this.lineNumber++;
			this.positionAtLine = 0;
		} else if(c != 13) {
			this.positionAtLine++;
		}
	}
};
$hxClasses["haxe.xml.XmlParserException"] = haxe_xml_XmlParserException;
haxe_xml_XmlParserException.__name__ = "haxe.xml.XmlParserException";
haxe_xml_XmlParserException.prototype = {
	message: null
	,lineNumber: null
	,positionAtLine: null
	,position: null
	,xml: null
	,toString: function() {
		var c = js_Boot.getClass(this);
		return c.__name__ + ": " + this.message + " at line " + this.lineNumber + " char " + this.positionAtLine;
	}
	,__class__: haxe_xml_XmlParserException
};
var haxe_xml_Parser = function() { };
$hxClasses["haxe.xml.Parser"] = haxe_xml_Parser;
haxe_xml_Parser.__name__ = "haxe.xml.Parser";
haxe_xml_Parser.parse = function(str,strict) {
	if(strict == null) {
		strict = false;
	}
	var doc = Xml.createDocument();
	haxe_xml_Parser.doParse(str,strict,0,doc);
	return doc;
};
haxe_xml_Parser.doParse = function(str,strict,p,parent) {
	if(p == null) {
		p = 0;
	}
	var xml = null;
	var state = 1;
	var next = 1;
	var aname = null;
	var start = 0;
	var nsubs = 0;
	var nbrackets = 0;
	var c = str.charCodeAt(p);
	var buf = new StringBuf();
	var escapeNext = 1;
	var attrValQuote = -1;
	while(c == c) {
		switch(state) {
		case 0:
			switch(c) {
			case 9:case 10:case 13:case 32:
				break;
			default:
				state = next;
				continue;
			}
			break;
		case 1:
			if(c == 60) {
				state = 0;
				next = 2;
			} else {
				start = p;
				state = 13;
				continue;
			}
			break;
		case 2:
			switch(c) {
			case 33:
				if(str.charCodeAt(p + 1) == 91) {
					p += 2;
					if(HxOverrides.substr(str,p,6).toUpperCase() != "CDATA[") {
						throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected <![CDATA[",str,p));
					}
					p += 5;
					state = 17;
					start = p + 1;
				} else if(str.charCodeAt(p + 1) == 68 || str.charCodeAt(p + 1) == 100) {
					if(HxOverrides.substr(str,p + 2,6).toUpperCase() != "OCTYPE") {
						throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected <!DOCTYPE",str,p));
					}
					p += 8;
					state = 16;
					start = p + 1;
				} else if(str.charCodeAt(p + 1) != 45 || str.charCodeAt(p + 2) != 45) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected <!--",str,p));
				} else {
					p += 2;
					state = 15;
					start = p + 1;
				}
				break;
			case 47:
				if(parent == null) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected node name",str,p));
				}
				start = p + 1;
				state = 0;
				next = 10;
				break;
			case 63:
				state = 14;
				start = p;
				break;
			default:
				state = 3;
				start = p;
				continue;
			}
			break;
		case 3:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				if(p == start) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected node name",str,p));
				}
				xml = Xml.createElement(HxOverrides.substr(str,start,p - start));
				parent.addChild(xml);
				++nsubs;
				state = 0;
				next = 4;
				continue;
			}
			break;
		case 4:
			switch(c) {
			case 47:
				state = 11;
				break;
			case 62:
				state = 9;
				break;
			default:
				state = 5;
				start = p;
				continue;
			}
			break;
		case 5:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				if(start == p) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected attribute name",str,p));
				}
				var tmp = HxOverrides.substr(str,start,p - start);
				aname = tmp;
				if(xml.exists(aname)) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Duplicate attribute [" + aname + "]",str,p));
				}
				state = 0;
				next = 6;
				continue;
			}
			break;
		case 6:
			if(c == 61) {
				state = 0;
				next = 7;
			} else {
				throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected =",str,p));
			}
			break;
		case 7:
			switch(c) {
			case 34:case 39:
				buf = new StringBuf();
				state = 8;
				start = p + 1;
				attrValQuote = c;
				break;
			default:
				throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected \"",str,p));
			}
			break;
		case 8:
			switch(c) {
			case 38:
				var len = p - start;
				buf.b += len == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len);
				state = 18;
				escapeNext = 8;
				start = p + 1;
				break;
			case 60:case 62:
				if(strict) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Invalid unescaped " + String.fromCodePoint(c) + " in attribute value",str,p));
				} else if(c == attrValQuote) {
					var len1 = p - start;
					buf.b += len1 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len1);
					var val = buf.b;
					buf = new StringBuf();
					xml.set(aname,val);
					state = 0;
					next = 4;
				}
				break;
			default:
				if(c == attrValQuote) {
					var len2 = p - start;
					buf.b += len2 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len2);
					var val1 = buf.b;
					buf = new StringBuf();
					xml.set(aname,val1);
					state = 0;
					next = 4;
				}
			}
			break;
		case 9:
			p = haxe_xml_Parser.doParse(str,strict,p,xml);
			start = p;
			state = 1;
			break;
		case 10:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				if(start == p) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected node name",str,p));
				}
				var v = HxOverrides.substr(str,start,p - start);
				if(parent == null || parent.nodeType != 0) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Unexpected </" + v + ">, tag is not open",str,p));
				}
				if(parent.nodeType != Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, expected Element but found " + (parent.nodeType == null ? "null" : XmlType.toString(parent.nodeType)));
				}
				if(v != parent.nodeName) {
					if(parent.nodeType != Xml.Element) {
						throw haxe_Exception.thrown("Bad node type, expected Element but found " + (parent.nodeType == null ? "null" : XmlType.toString(parent.nodeType)));
					}
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected </" + parent.nodeName + ">",str,p));
				}
				state = 0;
				next = 12;
				continue;
			}
			break;
		case 11:
			if(c == 62) {
				state = 1;
			} else {
				throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected >",str,p));
			}
			break;
		case 12:
			if(c == 62) {
				if(nsubs == 0) {
					parent.addChild(Xml.createPCData(""));
				}
				return p;
			} else {
				throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected >",str,p));
			}
			break;
		case 13:
			if(c == 60) {
				var len3 = p - start;
				buf.b += len3 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len3);
				var child = Xml.createPCData(buf.b);
				buf = new StringBuf();
				parent.addChild(child);
				++nsubs;
				state = 0;
				next = 2;
			} else if(c == 38) {
				var len4 = p - start;
				buf.b += len4 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len4);
				state = 18;
				escapeNext = 13;
				start = p + 1;
			}
			break;
		case 14:
			if(c == 63 && str.charCodeAt(p + 1) == 62) {
				++p;
				var str1 = HxOverrides.substr(str,start + 1,p - start - 2);
				parent.addChild(Xml.createProcessingInstruction(str1));
				++nsubs;
				state = 1;
			}
			break;
		case 15:
			if(c == 45 && str.charCodeAt(p + 1) == 45 && str.charCodeAt(p + 2) == 62) {
				parent.addChild(Xml.createComment(HxOverrides.substr(str,start,p - start)));
				++nsubs;
				p += 2;
				state = 1;
			}
			break;
		case 16:
			if(c == 91) {
				++nbrackets;
			} else if(c == 93) {
				--nbrackets;
			} else if(c == 62 && nbrackets == 0) {
				parent.addChild(Xml.createDocType(HxOverrides.substr(str,start,p - start)));
				++nsubs;
				state = 1;
			}
			break;
		case 17:
			if(c == 93 && str.charCodeAt(p + 1) == 93 && str.charCodeAt(p + 2) == 62) {
				var child1 = Xml.createCData(HxOverrides.substr(str,start,p - start));
				parent.addChild(child1);
				++nsubs;
				p += 2;
				state = 1;
			}
			break;
		case 18:
			if(c == 59) {
				var s = HxOverrides.substr(str,start,p - start);
				if(s.charCodeAt(0) == 35) {
					var c1 = s.charCodeAt(1) == 120 ? Std.parseInt("0" + HxOverrides.substr(s,1,s.length - 1)) : Std.parseInt(HxOverrides.substr(s,1,s.length - 1));
					buf.b += String.fromCodePoint(c1);
				} else if(!Object.prototype.hasOwnProperty.call(haxe_xml_Parser.escapes.h,s)) {
					if(strict) {
						throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Undefined entity: " + s,str,p));
					}
					buf.b += Std.string("&" + s + ";");
				} else {
					buf.b += Std.string(haxe_xml_Parser.escapes.h[s]);
				}
				start = p + 1;
				state = escapeNext;
			} else if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45) && c != 35) {
				if(strict) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Invalid character in entity: " + String.fromCodePoint(c),str,p));
				}
				buf.b += String.fromCodePoint(38);
				var len5 = p - start;
				buf.b += len5 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len5);
				--p;
				start = p + 1;
				state = escapeNext;
			}
			break;
		}
		c = str.charCodeAt(++p);
	}
	if(state == 1) {
		start = p;
		state = 13;
	}
	if(state == 13) {
		if(parent.nodeType == 0) {
			if(parent.nodeType != Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, expected Element but found " + (parent.nodeType == null ? "null" : XmlType.toString(parent.nodeType)));
			}
			throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Unclosed node <" + parent.nodeName + ">",str,p));
		}
		if(p != start || nsubs == 0) {
			var len = p - start;
			buf.b += len == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len);
			parent.addChild(Xml.createPCData(buf.b));
			++nsubs;
		}
		return p;
	}
	if(!strict && state == 18 && escapeNext == 13) {
		buf.b += String.fromCodePoint(38);
		var len = p - start;
		buf.b += len == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len);
		parent.addChild(Xml.createPCData(buf.b));
		++nsubs;
		return p;
	}
	throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Unexpected end",str,p));
};
var haxe_xml_Printer = function(pretty) {
	this.output = new StringBuf();
	this.pretty = pretty;
};
$hxClasses["haxe.xml.Printer"] = haxe_xml_Printer;
haxe_xml_Printer.__name__ = "haxe.xml.Printer";
haxe_xml_Printer.print = function(xml,pretty) {
	if(pretty == null) {
		pretty = false;
	}
	var printer = new haxe_xml_Printer(pretty);
	printer.writeNode(xml,"");
	return printer.output.b;
};
haxe_xml_Printer.prototype = {
	output: null
	,pretty: null
	,writeNode: function(value,tabs) {
		switch(value.nodeType) {
		case 0:
			this.output.b += Std.string(tabs + "<");
			if(value.nodeType != Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, expected Element but found " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
			}
			this.output.b += Std.string(value.nodeName);
			var attribute = value.attributes();
			while(attribute.hasNext()) {
				var attribute1 = attribute.next();
				this.output.b += Std.string(" " + attribute1 + "=\"");
				var input = StringTools.htmlEscape(value.get(attribute1),true);
				this.output.b += Std.string(input);
				this.output.b += "\"";
			}
			if(this.hasChildren(value)) {
				this.output.b += ">";
				if(this.pretty) {
					this.output.b += "\n";
				}
				if(value.nodeType != Xml.Document && value.nodeType != Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
				}
				var _g_current = 0;
				var _g_array = value.children;
				while(_g_current < _g_array.length) {
					var child = _g_array[_g_current++];
					this.writeNode(child,this.pretty ? tabs + "\t" : tabs);
				}
				this.output.b += Std.string(tabs + "</");
				if(value.nodeType != Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, expected Element but found " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
				}
				this.output.b += Std.string(value.nodeName);
				this.output.b += ">";
				if(this.pretty) {
					this.output.b += "\n";
				}
			} else {
				this.output.b += "/>";
				if(this.pretty) {
					this.output.b += "\n";
				}
			}
			break;
		case 1:
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, unexpected " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
			}
			var nodeValue = value.nodeValue;
			if(nodeValue.length != 0) {
				var input = tabs + StringTools.htmlEscape(nodeValue);
				this.output.b += Std.string(input);
				if(this.pretty) {
					this.output.b += "\n";
				}
			}
			break;
		case 2:
			this.output.b += Std.string(tabs + "<![CDATA[");
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, unexpected " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
			}
			this.output.b += Std.string(value.nodeValue);
			this.output.b += "]]>";
			if(this.pretty) {
				this.output.b += "\n";
			}
			break;
		case 3:
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, unexpected " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
			}
			var commentContent = value.nodeValue;
			var _this_r = new RegExp("[\n\r\t]+","g".split("u").join(""));
			commentContent = commentContent.replace(_this_r,"");
			commentContent = "<!--" + commentContent + "-->";
			this.output.b += tabs == null ? "null" : "" + tabs;
			var input = StringTools.trim(commentContent);
			this.output.b += Std.string(input);
			if(this.pretty) {
				this.output.b += "\n";
			}
			break;
		case 4:
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, unexpected " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
			}
			this.output.b += Std.string("<!DOCTYPE " + value.nodeValue + ">");
			if(this.pretty) {
				this.output.b += "\n";
			}
			break;
		case 5:
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, unexpected " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
			}
			this.output.b += Std.string("<?" + value.nodeValue + "?>");
			if(this.pretty) {
				this.output.b += "\n";
			}
			break;
		case 6:
			if(value.nodeType != Xml.Document && value.nodeType != Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
			}
			var _g_current = 0;
			var _g_array = value.children;
			while(_g_current < _g_array.length) {
				var child = _g_array[_g_current++];
				this.writeNode(child,tabs);
			}
			break;
		}
	}
	,hasChildren: function(value) {
		if(value.nodeType != Xml.Document && value.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
		}
		var _g_current = 0;
		var _g_array = value.children;
		while(_g_current < _g_array.length) {
			var child = _g_array[_g_current++];
			switch(child.nodeType) {
			case 0:case 1:
				return true;
			case 2:case 3:
				if(child.nodeType == Xml.Document || child.nodeType == Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, unexpected " + (child.nodeType == null ? "null" : XmlType.toString(child.nodeType)));
				}
				if(StringTools.ltrim(child.nodeValue).length != 0) {
					return true;
				}
				break;
			default:
			}
		}
		return false;
	}
	,__class__: haxe_xml_Printer
};
var haxe_zip_ExtraField = $hxEnums["haxe.zip.ExtraField"] = { __ename__ : "haxe.zip.ExtraField", __constructs__ : ["FUnknown","FInfoZipUnicodePath","FUtf8"]
	,FUnknown: ($_=function(tag,bytes) { return {_hx_index:0,tag:tag,bytes:bytes,__enum__:"haxe.zip.ExtraField",toString:$estr}; },$_.__params__ = ["tag","bytes"],$_)
	,FInfoZipUnicodePath: ($_=function(name,crc) { return {_hx_index:1,name:name,crc:crc,__enum__:"haxe.zip.ExtraField",toString:$estr}; },$_.__params__ = ["name","crc"],$_)
	,FUtf8: {_hx_index:2,__enum__:"haxe.zip.ExtraField",toString:$estr}
};
var haxe_zip_Huffman = $hxEnums["haxe.zip.Huffman"] = { __ename__ : "haxe.zip.Huffman", __constructs__ : ["Found","NeedBit","NeedBits"]
	,Found: ($_=function(i) { return {_hx_index:0,i:i,__enum__:"haxe.zip.Huffman",toString:$estr}; },$_.__params__ = ["i"],$_)
	,NeedBit: ($_=function(left,right) { return {_hx_index:1,left:left,right:right,__enum__:"haxe.zip.Huffman",toString:$estr}; },$_.__params__ = ["left","right"],$_)
	,NeedBits: ($_=function(n,table) { return {_hx_index:2,n:n,table:table,__enum__:"haxe.zip.Huffman",toString:$estr}; },$_.__params__ = ["n","table"],$_)
};
var haxe_zip_HuffTools = function() {
};
$hxClasses["haxe.zip.HuffTools"] = haxe_zip_HuffTools;
haxe_zip_HuffTools.__name__ = "haxe.zip.HuffTools";
haxe_zip_HuffTools.prototype = {
	treeDepth: function(t) {
		switch(t._hx_index) {
		case 0:
			var _g = t.i;
			return 0;
		case 1:
			var b = t.right;
			var a = t.left;
			var da = this.treeDepth(a);
			var db = this.treeDepth(b);
			return 1 + (da < db ? da : db);
		case 2:
			var _g = t.table;
			var _g = t.n;
			throw haxe_Exception.thrown("assert");
		}
	}
	,treeCompress: function(t) {
		var d = this.treeDepth(t);
		if(d == 0) {
			return t;
		}
		if(d == 1) {
			if(t._hx_index == 1) {
				var b = t.right;
				var a = t.left;
				return haxe_zip_Huffman.NeedBit(this.treeCompress(a),this.treeCompress(b));
			} else {
				throw haxe_Exception.thrown("assert");
			}
		}
		var size = 1 << d;
		var table = [];
		var _g = 0;
		var _g1 = size;
		while(_g < _g1) {
			var i = _g++;
			table.push(haxe_zip_Huffman.Found(-1));
		}
		this.treeWalk(table,0,0,d,t);
		return haxe_zip_Huffman.NeedBits(d,table);
	}
	,treeWalk: function(table,p,cd,d,t) {
		if(t._hx_index == 1) {
			var b = t.right;
			var a = t.left;
			if(d > 0) {
				this.treeWalk(table,p,cd + 1,d - 1,a);
				this.treeWalk(table,p | 1 << cd,cd + 1,d - 1,b);
			} else {
				table[p] = this.treeCompress(t);
			}
		} else {
			table[p] = this.treeCompress(t);
		}
	}
	,treeMake: function(bits,maxbits,v,len) {
		if(len > maxbits) {
			throw haxe_Exception.thrown("Invalid huffman");
		}
		var idx = v << 5 | len;
		if(bits.h.hasOwnProperty(idx)) {
			return haxe_zip_Huffman.Found(bits.h[idx]);
		}
		v <<= 1;
		++len;
		return haxe_zip_Huffman.NeedBit(this.treeMake(bits,maxbits,v,len),this.treeMake(bits,maxbits,v | 1,len));
	}
	,make: function(lengths,pos,nlengths,maxbits) {
		if(nlengths == 1) {
			return haxe_zip_Huffman.NeedBit(haxe_zip_Huffman.Found(0),haxe_zip_Huffman.Found(0));
		}
		var counts = [];
		var tmp = [];
		if(maxbits > 32) {
			throw haxe_Exception.thrown("Invalid huffman");
		}
		var _g = 0;
		var _g1 = maxbits;
		while(_g < _g1) {
			var i = _g++;
			counts.push(0);
			tmp.push(0);
		}
		var _g = 0;
		var _g1 = nlengths;
		while(_g < _g1) {
			var i = _g++;
			var p = lengths[i + pos];
			if(p >= maxbits) {
				throw haxe_Exception.thrown("Invalid huffman");
			}
			counts[p]++;
		}
		var code = 0;
		var _g = 1;
		var _g1 = maxbits - 1;
		while(_g < _g1) {
			var i = _g++;
			code = code + counts[i] << 1;
			tmp[i] = code;
		}
		var bits = new haxe_ds_IntMap();
		var _g = 0;
		var _g1 = nlengths;
		while(_g < _g1) {
			var i = _g++;
			var l = lengths[i + pos];
			if(l != 0) {
				var n = tmp[l - 1];
				tmp[l - 1] = n + 1;
				bits.h[n << 5 | l] = i;
			}
		}
		return this.treeCompress(haxe_zip_Huffman.NeedBit(this.treeMake(bits,maxbits,0,1),this.treeMake(bits,maxbits,1,1)));
	}
	,__class__: haxe_zip_HuffTools
};
var haxe_zip__$InflateImpl_Window = function(hasCrc) {
	this.buffer = new haxe_io_Bytes(new ArrayBuffer(65536));
	this.pos = 0;
	if(hasCrc) {
		this.crc = new haxe_crypto_Adler32();
	}
};
$hxClasses["haxe.zip._InflateImpl.Window"] = haxe_zip__$InflateImpl_Window;
haxe_zip__$InflateImpl_Window.__name__ = "haxe.zip._InflateImpl.Window";
haxe_zip__$InflateImpl_Window.prototype = {
	buffer: null
	,pos: null
	,crc: null
	,slide: function() {
		if(this.crc != null) {
			this.crc.update(this.buffer,0,32768);
		}
		var b = new haxe_io_Bytes(new ArrayBuffer(65536));
		this.pos -= 32768;
		b.blit(0,this.buffer,32768,this.pos);
		this.buffer = b;
	}
	,addBytes: function(b,p,len) {
		if(this.pos + len > 65536) {
			this.slide();
		}
		this.buffer.blit(this.pos,b,p,len);
		this.pos += len;
	}
	,addByte: function(c) {
		if(this.pos == 65536) {
			this.slide();
		}
		this.buffer.b[this.pos] = c & 255;
		this.pos++;
	}
	,getLastChar: function() {
		return this.buffer.b[this.pos - 1];
	}
	,available: function() {
		return this.pos;
	}
	,checksum: function() {
		if(this.crc != null) {
			this.crc.update(this.buffer,0,this.pos);
		}
		return this.crc;
	}
	,__class__: haxe_zip__$InflateImpl_Window
};
var haxe_zip__$InflateImpl_State = $hxEnums["haxe.zip._InflateImpl.State"] = { __ename__ : "haxe.zip._InflateImpl.State", __constructs__ : ["Head","Block","CData","Flat","Crc","Dist","DistOne","Done"]
	,Head: {_hx_index:0,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,Block: {_hx_index:1,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,CData: {_hx_index:2,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,Flat: {_hx_index:3,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,Crc: {_hx_index:4,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,Dist: {_hx_index:5,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,DistOne: {_hx_index:6,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,Done: {_hx_index:7,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
};
var haxe_zip_InflateImpl = function(i,header,crc) {
	if(crc == null) {
		crc = true;
	}
	if(header == null) {
		header = true;
	}
	this.isFinal = false;
	this.htools = new haxe_zip_HuffTools();
	this.huffman = this.buildFixedHuffman();
	this.huffdist = null;
	this.len = 0;
	this.dist = 0;
	this.state = header ? haxe_zip__$InflateImpl_State.Head : haxe_zip__$InflateImpl_State.Block;
	this.input = i;
	this.bits = 0;
	this.nbits = 0;
	this.needed = 0;
	this.output = null;
	this.outpos = 0;
	this.lengths = [];
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.window = new haxe_zip__$InflateImpl_Window(crc);
};
$hxClasses["haxe.zip.InflateImpl"] = haxe_zip_InflateImpl;
haxe_zip_InflateImpl.__name__ = "haxe.zip.InflateImpl";
haxe_zip_InflateImpl.prototype = {
	nbits: null
	,bits: null
	,state: null
	,isFinal: null
	,huffman: null
	,huffdist: null
	,htools: null
	,len: null
	,dist: null
	,needed: null
	,output: null
	,outpos: null
	,input: null
	,lengths: null
	,window: null
	,buildFixedHuffman: function() {
		if(haxe_zip_InflateImpl.FIXED_HUFFMAN != null) {
			return haxe_zip_InflateImpl.FIXED_HUFFMAN;
		}
		var a = [];
		var _g = 0;
		while(_g < 288) {
			var n = _g++;
			a.push(n <= 143 ? 8 : n <= 255 ? 9 : n <= 279 ? 7 : 8);
		}
		haxe_zip_InflateImpl.FIXED_HUFFMAN = this.htools.make(a,0,288,10);
		return haxe_zip_InflateImpl.FIXED_HUFFMAN;
	}
	,readBytes: function(b,pos,len) {
		this.needed = len;
		this.outpos = pos;
		this.output = b;
		if(len > 0) {
			while(this.inflateLoop()) {
			}
		}
		return len - this.needed;
	}
	,getBits: function(n) {
		while(this.nbits < n) {
			this.bits |= this.input.readByte() << this.nbits;
			this.nbits += 8;
		}
		var b = this.bits & (1 << n) - 1;
		this.nbits -= n;
		this.bits >>= n;
		return b;
	}
	,getBit: function() {
		if(this.nbits == 0) {
			this.nbits = 8;
			this.bits = this.input.readByte();
		}
		var b = (this.bits & 1) == 1;
		this.nbits--;
		this.bits >>= 1;
		return b;
	}
	,getRevBits: function(n) {
		if(n == 0) {
			return 0;
		} else if(this.getBit()) {
			return 1 << n - 1 | this.getRevBits(n - 1);
		} else {
			return this.getRevBits(n - 1);
		}
	}
	,resetBits: function() {
		this.bits = 0;
		this.nbits = 0;
	}
	,addBytes: function(b,p,len) {
		this.window.addBytes(b,p,len);
		this.output.blit(this.outpos,b,p,len);
		this.needed -= len;
		this.outpos += len;
	}
	,addByte: function(b) {
		this.window.addByte(b);
		this.output.b[this.outpos] = b & 255;
		this.needed--;
		this.outpos++;
	}
	,addDistOne: function(n) {
		var c = this.window.getLastChar();
		var _g = 0;
		var _g1 = n;
		while(_g < _g1) {
			var i = _g++;
			this.addByte(c);
		}
	}
	,addDist: function(d,len) {
		this.addBytes(this.window.buffer,this.window.pos - d,len);
	}
	,applyHuffman: function(h) {
		switch(h._hx_index) {
		case 0:
			var n = h.i;
			return n;
		case 1:
			var b = h.right;
			var a = h.left;
			return this.applyHuffman(this.getBit() ? b : a);
		case 2:
			var tbl = h.table;
			var n = h.n;
			return this.applyHuffman(tbl[this.getBits(n)]);
		}
	}
	,inflateLengths: function(a,max) {
		var i = 0;
		var prev = 0;
		while(i < max) {
			var n = this.applyHuffman(this.huffman);
			switch(n) {
			case 0:case 1:case 2:case 3:case 4:case 5:case 6:case 7:case 8:case 9:case 10:case 11:case 12:case 13:case 14:case 15:
				prev = n;
				a[i] = n;
				++i;
				break;
			case 16:
				var end = i + 3 + this.getBits(2);
				if(end > max) {
					throw haxe_Exception.thrown("Invalid data");
				}
				while(i < end) {
					a[i] = prev;
					++i;
				}
				break;
			case 17:
				i += 3 + this.getBits(3);
				if(i > max) {
					throw haxe_Exception.thrown("Invalid data");
				}
				break;
			case 18:
				i += 11 + this.getBits(7);
				if(i > max) {
					throw haxe_Exception.thrown("Invalid data");
				}
				break;
			default:
				throw haxe_Exception.thrown("Invalid data");
			}
		}
	}
	,inflateLoop: function() {
		switch(this.state._hx_index) {
		case 0:
			var cmf = this.input.readByte();
			var cm = cmf & 15;
			var cinfo = cmf >> 4;
			if(cm != 8) {
				throw haxe_Exception.thrown("Invalid data");
			}
			var flg = this.input.readByte();
			var fdict = (flg & 32) != 0;
			if(((cmf << 8) + flg) % 31 != 0) {
				throw haxe_Exception.thrown("Invalid data");
			}
			if(fdict) {
				throw haxe_Exception.thrown("Unsupported dictionary");
			}
			this.state = haxe_zip__$InflateImpl_State.Block;
			return true;
		case 1:
			this.isFinal = this.getBit();
			switch(this.getBits(2)) {
			case 0:
				this.len = this.input.readUInt16();
				var nlen = this.input.readUInt16();
				if(nlen != 65535 - this.len) {
					throw haxe_Exception.thrown("Invalid data");
				}
				this.state = haxe_zip__$InflateImpl_State.Flat;
				var r = this.inflateLoop();
				this.resetBits();
				return r;
			case 1:
				this.huffman = this.buildFixedHuffman();
				this.huffdist = null;
				this.state = haxe_zip__$InflateImpl_State.CData;
				return true;
			case 2:
				var hlit = this.getBits(5) + 257;
				var hdist = this.getBits(5) + 1;
				var hclen = this.getBits(4) + 4;
				var _g = 0;
				var _g1 = hclen;
				while(_g < _g1) {
					var i = _g++;
					this.lengths[haxe_zip_InflateImpl.CODE_LENGTHS_POS[i]] = this.getBits(3);
				}
				var _g = hclen;
				var _g1 = 19;
				while(_g < _g1) {
					var i = _g++;
					this.lengths[haxe_zip_InflateImpl.CODE_LENGTHS_POS[i]] = 0;
				}
				this.huffman = this.htools.make(this.lengths,0,19,8);
				var lengths = [];
				var _g = 0;
				var _g1 = hlit + hdist;
				while(_g < _g1) {
					var i = _g++;
					lengths.push(0);
				}
				this.inflateLengths(lengths,hlit + hdist);
				this.huffdist = this.htools.make(lengths,hlit,hdist,16);
				this.huffman = this.htools.make(lengths,0,hlit,16);
				this.state = haxe_zip__$InflateImpl_State.CData;
				return true;
			default:
				throw haxe_Exception.thrown("Invalid data");
			}
			break;
		case 2:
			var n = this.applyHuffman(this.huffman);
			if(n < 256) {
				this.addByte(n);
				return this.needed > 0;
			} else if(n == 256) {
				this.state = this.isFinal ? haxe_zip__$InflateImpl_State.Crc : haxe_zip__$InflateImpl_State.Block;
				return true;
			} else {
				n -= 257;
				var extra_bits = haxe_zip_InflateImpl.LEN_EXTRA_BITS_TBL[n];
				if(extra_bits == -1) {
					throw haxe_Exception.thrown("Invalid data");
				}
				this.len = haxe_zip_InflateImpl.LEN_BASE_VAL_TBL[n] + this.getBits(extra_bits);
				var dist_code = this.huffdist == null ? this.getRevBits(5) : this.applyHuffman(this.huffdist);
				extra_bits = haxe_zip_InflateImpl.DIST_EXTRA_BITS_TBL[dist_code];
				if(extra_bits == -1) {
					throw haxe_Exception.thrown("Invalid data");
				}
				this.dist = haxe_zip_InflateImpl.DIST_BASE_VAL_TBL[dist_code] + this.getBits(extra_bits);
				if(this.dist > this.window.available()) {
					throw haxe_Exception.thrown("Invalid data");
				}
				this.state = this.dist == 1 ? haxe_zip__$InflateImpl_State.DistOne : haxe_zip__$InflateImpl_State.Dist;
				return true;
			}
			break;
		case 3:
			var rlen = this.len < this.needed ? this.len : this.needed;
			var bytes = this.input.read(rlen);
			this.len -= rlen;
			this.addBytes(bytes,0,rlen);
			if(this.len == 0) {
				this.state = this.isFinal ? haxe_zip__$InflateImpl_State.Crc : haxe_zip__$InflateImpl_State.Block;
			}
			return this.needed > 0;
		case 4:
			var calc = this.window.checksum();
			if(calc == null) {
				this.state = haxe_zip__$InflateImpl_State.Done;
				return true;
			}
			var crc = haxe_crypto_Adler32.read(this.input);
			if(!calc.equals(crc)) {
				throw haxe_Exception.thrown("Invalid CRC");
			}
			this.state = haxe_zip__$InflateImpl_State.Done;
			return true;
		case 5:
			while(this.len > 0 && this.needed > 0) {
				var rdist = this.len < this.dist ? this.len : this.dist;
				var rlen = this.needed < rdist ? this.needed : rdist;
				this.addDist(this.dist,rlen);
				this.len -= rlen;
			}
			if(this.len == 0) {
				this.state = haxe_zip__$InflateImpl_State.CData;
			}
			return this.needed > 0;
		case 6:
			var rlen = this.len < this.needed ? this.len : this.needed;
			this.addDistOne(rlen);
			this.len -= rlen;
			if(this.len == 0) {
				this.state = haxe_zip__$InflateImpl_State.CData;
			}
			return this.needed > 0;
		case 7:
			return false;
		}
	}
	,__class__: haxe_zip_InflateImpl
};
var haxe_zip_Reader = function(i) {
	this.i = i;
};
$hxClasses["haxe.zip.Reader"] = haxe_zip_Reader;
haxe_zip_Reader.__name__ = "haxe.zip.Reader";
haxe_zip_Reader.readZip = function(i) {
	var r = new haxe_zip_Reader(i);
	return r.read();
};
haxe_zip_Reader.unzip = function(f) {
	if(!f.compressed) {
		return f.data;
	}
	throw haxe_Exception.thrown("No uncompress support");
};
haxe_zip_Reader.prototype = {
	i: null
	,readZipDate: function() {
		var t = this.i.readUInt16();
		var hour = t >> 11 & 31;
		var min = t >> 5 & 63;
		var sec = t & 31;
		var d = this.i.readUInt16();
		var year = d >> 9;
		var month = d >> 5 & 15;
		var day = d & 31;
		return new Date(year + 1980,month - 1,day,hour,min,sec << 1);
	}
	,readExtraFields: function(length) {
		var fields = new haxe_ds_List();
		while(length > 0) {
			if(length < 4) {
				throw haxe_Exception.thrown("Invalid extra fields data");
			}
			var tag = this.i.readUInt16();
			var len = this.i.readUInt16();
			if(length < len) {
				throw haxe_Exception.thrown("Invalid extra fields data");
			}
			if(tag == 28789) {
				var version = this.i.readByte();
				if(version != 1) {
					var data = new haxe_io_BytesBuffer();
					data.addByte(version);
					data.add(this.i.read(len - 1));
					fields.add(haxe_zip_ExtraField.FUnknown(tag,data.getBytes()));
				} else {
					var crc = this.i.readInt32();
					var name = this.i.read(len - 5).toString();
					fields.add(haxe_zip_ExtraField.FInfoZipUnicodePath(name,crc));
				}
			} else {
				fields.add(haxe_zip_ExtraField.FUnknown(tag,this.i.read(len)));
			}
			length -= 4 + len;
		}
		return fields;
	}
	,readEntryHeader: function() {
		var i = this.i;
		var h = i.readInt32();
		if(h == 33639248 || h == 101010256) {
			return null;
		}
		if(h != 67324752) {
			throw haxe_Exception.thrown("Invalid Zip Data");
		}
		var version = i.readUInt16();
		var flags = i.readUInt16();
		var utf8 = (flags & 2048) != 0;
		var compression = i.readUInt16();
		var compressed = compression != 0;
		if(compressed && compression != 8) {
			throw haxe_Exception.thrown("Unsupported compression " + compression);
		}
		var mtime = this.readZipDate();
		var crc32 = i.readInt32();
		var csize = i.readInt32();
		var usize = i.readInt32();
		var fnamelen = i.readInt16();
		var elen = i.readInt16();
		var fname = i.readString(fnamelen);
		var fields = this.readExtraFields(elen);
		if(utf8) {
			fields.push(haxe_zip_ExtraField.FUtf8);
		}
		var data = null;
		if((flags & 8) != 0) {
			csize = -1;
		}
		return { fileName : fname, fileSize : usize, fileTime : mtime, compressed : compressed, dataSize : csize, data : data, crc32 : crc32, extraFields : fields};
	}
	,read: function() {
		var l = new haxe_ds_List();
		var buf = null;
		var tmp = null;
		while(true) {
			var e = this.readEntryHeader();
			if(e == null) {
				break;
			}
			if(e.dataSize < 0) {
				var bufSize = 65536;
				if(tmp == null) {
					tmp = new haxe_io_Bytes(new ArrayBuffer(bufSize));
				}
				var out = new haxe_io_BytesBuffer();
				var z = new haxe_zip_InflateImpl(this.i,false,false);
				while(true) {
					var n = z.readBytes(tmp,0,bufSize);
					out.addBytes(tmp,0,n);
					if(n < bufSize) {
						break;
					}
				}
				e.data = out.getBytes();
				e.crc32 = this.i.readInt32();
				if(e.crc32 == 134695760) {
					e.crc32 = this.i.readInt32();
				}
				e.dataSize = this.i.readInt32();
				e.fileSize = this.i.readInt32();
				e.dataSize = e.fileSize;
				e.compressed = false;
			} else {
				e.data = this.i.read(e.dataSize);
			}
			l.add(e);
		}
		return l;
	}
	,__class__: haxe_zip_Reader
};
var haxe_zip_Uncompress = function(windowBits) {
	throw haxe_Exception.thrown("Not implemented for this platform");
};
$hxClasses["haxe.zip.Uncompress"] = haxe_zip_Uncompress;
haxe_zip_Uncompress.__name__ = "haxe.zip.Uncompress";
haxe_zip_Uncompress.prototype = {
	execute: function(src,srcPos,dst,dstPos) {
		return null;
	}
	,close: function() {
	}
	,__class__: haxe_zip_Uncompress
};
var hscript_Const = $hxEnums["hscript.Const"] = { __ename__ : "hscript.Const", __constructs__ : ["CInt","CFloat","CString"]
	,CInt: ($_=function(v) { return {_hx_index:0,v:v,__enum__:"hscript.Const",toString:$estr}; },$_.__params__ = ["v"],$_)
	,CFloat: ($_=function(f) { return {_hx_index:1,f:f,__enum__:"hscript.Const",toString:$estr}; },$_.__params__ = ["f"],$_)
	,CString: ($_=function(s) { return {_hx_index:2,s:s,__enum__:"hscript.Const",toString:$estr}; },$_.__params__ = ["s"],$_)
};
var hscript_Expr = $hxEnums["hscript.Expr"] = { __ename__ : "hscript.Expr", __constructs__ : ["EConst","EIdent","EVar","EParent","EBlock","EField","EBinop","EUnop","ECall","EIf","EWhile","EFor","EBreak","EContinue","EFunction","EReturn","EArray","EArrayDecl","ENew","EThrow","ETry","EObject","ETernary","ESwitch","EDoWhile","EMeta","ECheckType"]
	,EConst: ($_=function(c) { return {_hx_index:0,c:c,__enum__:"hscript.Expr",toString:$estr}; },$_.__params__ = ["c"],$_)
	,EIdent: ($_=function(v) { return {_hx_index:1,v:v,__enum__:"hscript.Expr",toString:$estr}; },$_.__params__ = ["v"],$_)
	,EVar: ($_=function(n,t,e) { return {_hx_index:2,n:n,t:t,e:e,__enum__:"hscript.Expr",toString:$estr}; },$_.__params__ = ["n","t","e"],$_)
	,EParent: ($_=function(e) { return {_hx_index:3,e:e,__enum__:"hscript.Expr",toString:$estr}; },$_.__params__ = ["e"],$_)
	,EBlock: ($_=function(e) { return {_hx_index:4,e:e,__enum__:"hscript.Expr",toString:$estr}; },$_.__params__ = ["e"],$_)
	,EField: ($_=function(e,f) { return {_hx_index:5,e:e,f:f,__enum__:"hscript.Expr",toString:$estr}; },$_.__params__ = ["e","f"],$_)
	,EBinop: ($_=function(op,e1,e2) { return {_hx_index:6,op:op,e1:e1,e2:e2,__enum__:"hscript.Expr",toString:$estr}; },$_.__params__ = ["op","e1","e2"],$_)
	,EUnop: ($_=function(op,prefix,e) { return {_hx_index:7,op:op,prefix:prefix,e:e,__enum__:"hscript.Expr",toString:$estr}; },$_.__params__ = ["op","prefix","e"],$_)
	,ECall: ($_=function(e,params) { return {_hx_index:8,e:e,params:params,__enum__:"hscript.Expr",toString:$estr}; },$_.__params__ = ["e","params"],$_)
	,EIf: ($_=function(cond,e1,e2) { return {_hx_index:9,cond:cond,e1:e1,e2:e2,__enum__:"hscript.Expr",toString:$estr}; },$_.__params__ = ["cond","e1","e2"],$_)
	,EWhile: ($_=function(cond,e) { return {_hx_index:10,cond:cond,e:e,__enum__:"hscript.Expr",toString:$estr}; },$_.__params__ = ["cond","e"],$_)
	,EFor: ($_=function(v,it,e) { return {_hx_index:11,v:v,it:it,e:e,__enum__:"hscript.Expr",toString:$estr}; },$_.__params__ = ["v","it","e"],$_)
	,EBreak: {_hx_index:12,__enum__:"hscript.Expr",toString:$estr}
	,EContinue: {_hx_index:13,__enum__:"hscript.Expr",toString:$estr}
	,EFunction: ($_=function(args,e,name,ret) { return {_hx_index:14,args:args,e:e,name:name,ret:ret,__enum__:"hscript.Expr",toString:$estr}; },$_.__params__ = ["args","e","name","ret"],$_)
	,EReturn: ($_=function(e) { return {_hx_index:15,e:e,__enum__:"hscript.Expr",toString:$estr}; },$_.__params__ = ["e"],$_)
	,EArray: ($_=function(e,index) { return {_hx_index:16,e:e,index:index,__enum__:"hscript.Expr",toString:$estr}; },$_.__params__ = ["e","index"],$_)
	,EArrayDecl: ($_=function(e) { return {_hx_index:17,e:e,__enum__:"hscript.Expr",toString:$estr}; },$_.__params__ = ["e"],$_)
	,ENew: ($_=function(cl,params) { return {_hx_index:18,cl:cl,params:params,__enum__:"hscript.Expr",toString:$estr}; },$_.__params__ = ["cl","params"],$_)
	,EThrow: ($_=function(e) { return {_hx_index:19,e:e,__enum__:"hscript.Expr",toString:$estr}; },$_.__params__ = ["e"],$_)
	,ETry: ($_=function(e,v,t,ecatch) { return {_hx_index:20,e:e,v:v,t:t,ecatch:ecatch,__enum__:"hscript.Expr",toString:$estr}; },$_.__params__ = ["e","v","t","ecatch"],$_)
	,EObject: ($_=function(fl) { return {_hx_index:21,fl:fl,__enum__:"hscript.Expr",toString:$estr}; },$_.__params__ = ["fl"],$_)
	,ETernary: ($_=function(cond,e1,e2) { return {_hx_index:22,cond:cond,e1:e1,e2:e2,__enum__:"hscript.Expr",toString:$estr}; },$_.__params__ = ["cond","e1","e2"],$_)
	,ESwitch: ($_=function(e,cases,defaultExpr) { return {_hx_index:23,e:e,cases:cases,defaultExpr:defaultExpr,__enum__:"hscript.Expr",toString:$estr}; },$_.__params__ = ["e","cases","defaultExpr"],$_)
	,EDoWhile: ($_=function(cond,e) { return {_hx_index:24,cond:cond,e:e,__enum__:"hscript.Expr",toString:$estr}; },$_.__params__ = ["cond","e"],$_)
	,EMeta: ($_=function(name,args,e) { return {_hx_index:25,name:name,args:args,e:e,__enum__:"hscript.Expr",toString:$estr}; },$_.__params__ = ["name","args","e"],$_)
	,ECheckType: ($_=function(e,t) { return {_hx_index:26,e:e,t:t,__enum__:"hscript.Expr",toString:$estr}; },$_.__params__ = ["e","t"],$_)
};
var hscript_CType = $hxEnums["hscript.CType"] = { __ename__ : "hscript.CType", __constructs__ : ["CTPath","CTFun","CTAnon","CTParent","CTOpt","CTNamed"]
	,CTPath: ($_=function(path,params) { return {_hx_index:0,path:path,params:params,__enum__:"hscript.CType",toString:$estr}; },$_.__params__ = ["path","params"],$_)
	,CTFun: ($_=function(args,ret) { return {_hx_index:1,args:args,ret:ret,__enum__:"hscript.CType",toString:$estr}; },$_.__params__ = ["args","ret"],$_)
	,CTAnon: ($_=function(fields) { return {_hx_index:2,fields:fields,__enum__:"hscript.CType",toString:$estr}; },$_.__params__ = ["fields"],$_)
	,CTParent: ($_=function(t) { return {_hx_index:3,t:t,__enum__:"hscript.CType",toString:$estr}; },$_.__params__ = ["t"],$_)
	,CTOpt: ($_=function(t) { return {_hx_index:4,t:t,__enum__:"hscript.CType",toString:$estr}; },$_.__params__ = ["t"],$_)
	,CTNamed: ($_=function(n,t) { return {_hx_index:5,n:n,t:t,__enum__:"hscript.CType",toString:$estr}; },$_.__params__ = ["n","t"],$_)
};
var hscript_Error = $hxEnums["hscript.Error"] = { __ename__ : "hscript.Error", __constructs__ : ["EInvalidChar","EUnexpected","EUnterminatedString","EUnterminatedComment","EInvalidPreprocessor","EUnknownVariable","EInvalidIterator","EInvalidOp","EInvalidAccess","ECustom"]
	,EInvalidChar: ($_=function(c) { return {_hx_index:0,c:c,__enum__:"hscript.Error",toString:$estr}; },$_.__params__ = ["c"],$_)
	,EUnexpected: ($_=function(s) { return {_hx_index:1,s:s,__enum__:"hscript.Error",toString:$estr}; },$_.__params__ = ["s"],$_)
	,EUnterminatedString: {_hx_index:2,__enum__:"hscript.Error",toString:$estr}
	,EUnterminatedComment: {_hx_index:3,__enum__:"hscript.Error",toString:$estr}
	,EInvalidPreprocessor: ($_=function(msg) { return {_hx_index:4,msg:msg,__enum__:"hscript.Error",toString:$estr}; },$_.__params__ = ["msg"],$_)
	,EUnknownVariable: ($_=function(v) { return {_hx_index:5,v:v,__enum__:"hscript.Error",toString:$estr}; },$_.__params__ = ["v"],$_)
	,EInvalidIterator: ($_=function(v) { return {_hx_index:6,v:v,__enum__:"hscript.Error",toString:$estr}; },$_.__params__ = ["v"],$_)
	,EInvalidOp: ($_=function(op) { return {_hx_index:7,op:op,__enum__:"hscript.Error",toString:$estr}; },$_.__params__ = ["op"],$_)
	,EInvalidAccess: ($_=function(f) { return {_hx_index:8,f:f,__enum__:"hscript.Error",toString:$estr}; },$_.__params__ = ["f"],$_)
	,ECustom: ($_=function(msg) { return {_hx_index:9,msg:msg,__enum__:"hscript.Error",toString:$estr}; },$_.__params__ = ["msg"],$_)
};
var hscript_ModuleDecl = $hxEnums["hscript.ModuleDecl"] = { __ename__ : "hscript.ModuleDecl", __constructs__ : ["DPackage","DImport","DClass","DTypedef"]
	,DPackage: ($_=function(path) { return {_hx_index:0,path:path,__enum__:"hscript.ModuleDecl",toString:$estr}; },$_.__params__ = ["path"],$_)
	,DImport: ($_=function(path,everything) { return {_hx_index:1,path:path,everything:everything,__enum__:"hscript.ModuleDecl",toString:$estr}; },$_.__params__ = ["path","everything"],$_)
	,DClass: ($_=function(c) { return {_hx_index:2,c:c,__enum__:"hscript.ModuleDecl",toString:$estr}; },$_.__params__ = ["c"],$_)
	,DTypedef: ($_=function(c) { return {_hx_index:3,c:c,__enum__:"hscript.ModuleDecl",toString:$estr}; },$_.__params__ = ["c"],$_)
};
var hscript_FieldAccess = $hxEnums["hscript.FieldAccess"] = { __ename__ : "hscript.FieldAccess", __constructs__ : ["APublic","APrivate","AInline","AOverride","AStatic","AMacro"]
	,APublic: {_hx_index:0,__enum__:"hscript.FieldAccess",toString:$estr}
	,APrivate: {_hx_index:1,__enum__:"hscript.FieldAccess",toString:$estr}
	,AInline: {_hx_index:2,__enum__:"hscript.FieldAccess",toString:$estr}
	,AOverride: {_hx_index:3,__enum__:"hscript.FieldAccess",toString:$estr}
	,AStatic: {_hx_index:4,__enum__:"hscript.FieldAccess",toString:$estr}
	,AMacro: {_hx_index:5,__enum__:"hscript.FieldAccess",toString:$estr}
};
var hscript_FieldKind = $hxEnums["hscript.FieldKind"] = { __ename__ : "hscript.FieldKind", __constructs__ : ["KFunction","KVar"]
	,KFunction: ($_=function(f) { return {_hx_index:0,f:f,__enum__:"hscript.FieldKind",toString:$estr}; },$_.__params__ = ["f"],$_)
	,KVar: ($_=function(v) { return {_hx_index:1,v:v,__enum__:"hscript.FieldKind",toString:$estr}; },$_.__params__ = ["v"],$_)
};
var hscript__$Interp_Stop = $hxEnums["hscript._Interp.Stop"] = { __ename__ : "hscript._Interp.Stop", __constructs__ : ["SBreak","SContinue","SReturn"]
	,SBreak: {_hx_index:0,__enum__:"hscript._Interp.Stop",toString:$estr}
	,SContinue: {_hx_index:1,__enum__:"hscript._Interp.Stop",toString:$estr}
	,SReturn: {_hx_index:2,__enum__:"hscript._Interp.Stop",toString:$estr}
};
var hscript_Interp = function() {
	this.locals = new haxe_ds_StringMap();
	this.declared = [];
	this.resetVariables();
	this.initOps();
};
$hxClasses["hscript.Interp"] = hscript_Interp;
hscript_Interp.__name__ = "hscript.Interp";
hscript_Interp.prototype = {
	variables: null
	,locals: null
	,binops: null
	,depth: null
	,inTry: null
	,declared: null
	,returnValue: null
	,resetVariables: function() {
		var _gthis = this;
		this.variables = new haxe_ds_StringMap();
		this.variables.h["null"] = null;
		this.variables.h["true"] = true;
		this.variables.h["false"] = false;
		var this1 = this.variables;
		var value = Reflect.makeVarArgs(function(el) {
			var inf = _gthis.posInfos();
			var v = el.shift();
			if(el.length > 0) {
				inf.customParams = el;
			}
			haxe_Log.trace(Std.string(v),inf);
		});
		this1.h["trace"] = value;
	}
	,posInfos: function() {
		return { fileName : "hscript", lineNumber : 0};
	}
	,initOps: function() {
		var me = this;
		this.binops = new haxe_ds_StringMap();
		this.binops.h["+"] = function(e1,e2) {
			return me.expr(e1) + me.expr(e2);
		};
		this.binops.h["-"] = function(e1,e2) {
			return me.expr(e1) - me.expr(e2);
		};
		this.binops.h["*"] = function(e1,e2) {
			return me.expr(e1) * me.expr(e2);
		};
		this.binops.h["/"] = function(e1,e2) {
			return me.expr(e1) / me.expr(e2);
		};
		this.binops.h["%"] = function(e1,e2) {
			return me.expr(e1) % me.expr(e2);
		};
		this.binops.h["&"] = function(e1,e2) {
			return me.expr(e1) & me.expr(e2);
		};
		this.binops.h["|"] = function(e1,e2) {
			return me.expr(e1) | me.expr(e2);
		};
		this.binops.h["^"] = function(e1,e2) {
			return me.expr(e1) ^ me.expr(e2);
		};
		this.binops.h["<<"] = function(e1,e2) {
			return me.expr(e1) << me.expr(e2);
		};
		this.binops.h[">>"] = function(e1,e2) {
			return me.expr(e1) >> me.expr(e2);
		};
		this.binops.h[">>>"] = function(e1,e2) {
			return me.expr(e1) >>> me.expr(e2);
		};
		this.binops.h["=="] = function(e1,e2) {
			return me.expr(e1) == me.expr(e2);
		};
		this.binops.h["!="] = function(e1,e2) {
			return me.expr(e1) != me.expr(e2);
		};
		this.binops.h[">="] = function(e1,e2) {
			return me.expr(e1) >= me.expr(e2);
		};
		this.binops.h["<="] = function(e1,e2) {
			return me.expr(e1) <= me.expr(e2);
		};
		this.binops.h[">"] = function(e1,e2) {
			return me.expr(e1) > me.expr(e2);
		};
		this.binops.h["<"] = function(e1,e2) {
			return me.expr(e1) < me.expr(e2);
		};
		this.binops.h["||"] = function(e1,e2) {
			if(me.expr(e1) != true) {
				return me.expr(e2) == true;
			} else {
				return true;
			}
		};
		this.binops.h["&&"] = function(e1,e2) {
			if(me.expr(e1) == true) {
				return me.expr(e2) == true;
			} else {
				return false;
			}
		};
		this.binops.h["="] = $bind(this,this.assign);
		this.binops.h["..."] = function(e1,e2) {
			return new IntIterator(me.expr(e1),me.expr(e2));
		};
		this.assignOp("+=",function(v1,v2) {
			return v1 + v2;
		});
		this.assignOp("-=",function(v1,v2) {
			return v1 - v2;
		});
		this.assignOp("*=",function(v1,v2) {
			return v1 * v2;
		});
		this.assignOp("/=",function(v1,v2) {
			return v1 / v2;
		});
		this.assignOp("%=",function(v1,v2) {
			return v1 % v2;
		});
		this.assignOp("&=",function(v1,v2) {
			return v1 & v2;
		});
		this.assignOp("|=",function(v1,v2) {
			return v1 | v2;
		});
		this.assignOp("^=",function(v1,v2) {
			return v1 ^ v2;
		});
		this.assignOp("<<=",function(v1,v2) {
			return v1 << v2;
		});
		this.assignOp(">>=",function(v1,v2) {
			return v1 >> v2;
		});
		this.assignOp(">>>=",function(v1,v2) {
			return v1 >>> v2;
		});
	}
	,assign: function(e1,e2) {
		var v = this.expr(e2);
		switch(e1._hx_index) {
		case 1:
			var id = e1.v;
			var l = this.locals.h[id];
			if(l == null) {
				this.variables.h[id] = v;
			} else {
				l.r = v;
			}
			break;
		case 5:
			var f = e1.f;
			var e = e1.e;
			v = this.set(this.expr(e),f,v);
			break;
		case 16:
			var index = e1.index;
			var e = e1.e;
			var arr = this.expr(e);
			var index1 = this.expr(index);
			if(js_Boot.__implements(arr,haxe_IMap)) {
				(js_Boot.__cast(arr , haxe_IMap)).set(index1,v);
			} else {
				arr[index1] = v;
			}
			break;
		default:
			var e = hscript_Error.EInvalidOp("=");
			throw haxe_Exception.thrown(e);
		}
		return v;
	}
	,assignOp: function(op,fop) {
		var me = this;
		this.binops.h[op] = function(e1,e2) {
			return me.evalAssignOp(op,fop,e1,e2);
		};
	}
	,evalAssignOp: function(op,fop,e1,e2) {
		var v;
		switch(e1._hx_index) {
		case 1:
			var id = e1.v;
			var l = this.locals.h[id];
			v = fop(this.expr(e1),this.expr(e2));
			if(l == null) {
				this.variables.h[id] = v;
			} else {
				l.r = v;
			}
			break;
		case 5:
			var f = e1.f;
			var e = e1.e;
			var obj = this.expr(e);
			v = fop(this.get(obj,f),this.expr(e2));
			v = this.set(obj,f,v);
			break;
		case 16:
			var index = e1.index;
			var e = e1.e;
			var arr = this.expr(e);
			var index1 = this.expr(index);
			if(js_Boot.__implements(arr,haxe_IMap)) {
				v = fop((js_Boot.__cast(arr , haxe_IMap)).get(index1),this.expr(e2));
				(js_Boot.__cast(arr , haxe_IMap)).set(index1,v);
			} else {
				v = fop(arr[index1],this.expr(e2));
				arr[index1] = v;
			}
			break;
		default:
			var e = hscript_Error.EInvalidOp(op);
			throw haxe_Exception.thrown(e);
		}
		return v;
	}
	,increment: function(e,prefix,delta) {
		switch(e._hx_index) {
		case 1:
			var id = e.v;
			var l = this.locals.h[id];
			var v = l == null ? this.variables.h[id] : l.r;
			if(prefix) {
				v += delta;
				if(l == null) {
					this.variables.h[id] = v;
				} else {
					l.r = v;
				}
			} else if(l == null) {
				this.variables.h[id] = v + delta;
			} else {
				l.r = v + delta;
			}
			return v;
		case 5:
			var f = e.f;
			var e1 = e.e;
			var obj = this.expr(e1);
			var v = this.get(obj,f);
			if(prefix) {
				v += delta;
				this.set(obj,f,v);
			} else {
				this.set(obj,f,v + delta);
			}
			return v;
		case 16:
			var index = e.index;
			var e1 = e.e;
			var arr = this.expr(e1);
			var index1 = this.expr(index);
			if(js_Boot.__implements(arr,haxe_IMap)) {
				var v = (js_Boot.__cast(arr , haxe_IMap)).get(index1);
				if(prefix) {
					v += delta;
					(js_Boot.__cast(arr , haxe_IMap)).set(index1,v);
				} else {
					(js_Boot.__cast(arr , haxe_IMap)).set(index1,v + delta);
				}
				return v;
			} else {
				var v = arr[index1];
				if(prefix) {
					v += delta;
					arr[index1] = v;
				} else {
					arr[index1] = v + delta;
				}
				return v;
			}
			break;
		default:
			var e = hscript_Error.EInvalidOp(delta > 0 ? "++" : "--");
			throw haxe_Exception.thrown(e);
		}
	}
	,execute: function(expr) {
		this.depth = 0;
		this.locals = new haxe_ds_StringMap();
		this.declared = [];
		return this.exprReturn(expr);
	}
	,exprReturn: function(e) {
		try {
			return this.expr(e);
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
			var _g1 = haxe_Exception.caught(_g).unwrap();
			if(js_Boot.__instanceof(_g1,hscript__$Interp_Stop)) {
				var e = _g1;
				switch(e._hx_index) {
				case 0:
					throw haxe_Exception.thrown("Invalid break");
				case 1:
					throw haxe_Exception.thrown("Invalid continue");
				case 2:
					var v = this.returnValue;
					this.returnValue = null;
					return v;
				}
			} else {
				throw _g;
			}
		}
	}
	,duplicate: function(h) {
		var h2 = new haxe_ds_StringMap();
		var k = haxe_ds_StringMap.keysIterator(h.h);
		while(k.hasNext()) {
			var k1 = k.next();
			h2.h[k1] = h.h[k1];
		}
		return h2;
	}
	,restore: function(old) {
		while(this.declared.length > old) {
			var d = this.declared.pop();
			this.locals.h[d.n] = d.old;
		}
	}
	,error: function(e,rethrow) {
		if(rethrow == null) {
			rethrow = false;
		}
		if(rethrow) {
			throw haxe_Exception.thrown(e);
		} else {
			throw haxe_Exception.thrown(e);
		}
	}
	,rethrow: function(e) {
		throw haxe_Exception.thrown(e);
	}
	,resolve: function(id) {
		var l = this.locals.h[id];
		if(l != null) {
			return l.r;
		}
		var v = this.variables.h[id];
		if(v == null && !Object.prototype.hasOwnProperty.call(this.variables.h,id)) {
			var e = hscript_Error.EUnknownVariable(id);
			throw haxe_Exception.thrown(e);
		}
		return v;
	}
	,expr: function(e) {
		var _gthis = this;
		switch(e._hx_index) {
		case 0:
			var c = e.c;
			switch(c._hx_index) {
			case 0:
				var v = c.v;
				return v;
			case 1:
				var f = c.f;
				return f;
			case 2:
				var s = c.s;
				return s;
			}
			break;
		case 1:
			var id = e.v;
			return this.resolve(id);
		case 2:
			var _g = e.t;
			var e1 = e.e;
			var n = e.n;
			this.declared.push({ n : n, old : this.locals.h[n]});
			var this1 = this.locals;
			var value = e1 == null ? null : this.expr(e1);
			this1.h[n] = { r : value};
			return null;
		case 3:
			var e1 = e.e;
			return this.expr(e1);
		case 4:
			var exprs = e.e;
			var old = this.declared.length;
			var v = null;
			var _g = 0;
			while(_g < exprs.length) {
				var e1 = exprs[_g];
				++_g;
				v = this.expr(e1);
			}
			this.restore(old);
			return v;
		case 5:
			var f = e.f;
			var e1 = e.e;
			return this.get(this.expr(e1),f);
		case 6:
			var e2 = e.e2;
			var e1 = e.e1;
			var op = e.op;
			var fop = this.binops.h[op];
			if(fop == null) {
				var e3 = hscript_Error.EInvalidOp(op);
				throw haxe_Exception.thrown(e3);
			}
			return fop(e1,e2);
		case 7:
			var e1 = e.e;
			var prefix = e.prefix;
			var op = e.op;
			switch(op) {
			case "!":
				return this.expr(e1) != true;
			case "++":
				return this.increment(e1,prefix,1);
			case "-":
				return -this.expr(e1);
			case "--":
				return this.increment(e1,prefix,-1);
			case "~":
				return ~this.expr(e1);
			default:
				var e1 = hscript_Error.EInvalidOp(op);
				throw haxe_Exception.thrown(e1);
			}
			break;
		case 8:
			var params = e.params;
			var e1 = e.e;
			var args = [];
			var _g = 0;
			while(_g < params.length) {
				var p = params[_g];
				++_g;
				args.push(this.expr(p));
			}
			if(e1._hx_index == 5) {
				var f = e1.f;
				var e2 = e1.e;
				var obj = this.expr(e2);
				if(obj == null) {
					var e2 = hscript_Error.EInvalidAccess(f);
					throw haxe_Exception.thrown(e2);
				}
				return this.fcall(obj,f,args);
			} else {
				return this.call(null,this.expr(e1),args);
			}
			break;
		case 9:
			var e2 = e.e2;
			var e1 = e.e1;
			var econd = e.cond;
			if(this.expr(econd) == true) {
				return this.expr(e1);
			} else if(e2 == null) {
				return null;
			} else {
				return this.expr(e2);
			}
			break;
		case 10:
			var e1 = e.e;
			var econd = e.cond;
			this.whileLoop(econd,e1);
			return null;
		case 11:
			var e1 = e.e;
			var it = e.it;
			var v = e.v;
			this.forLoop(v,it,e1);
			return null;
		case 12:
			throw haxe_Exception.thrown(hscript__$Interp_Stop.SBreak);
		case 13:
			throw haxe_Exception.thrown(hscript__$Interp_Stop.SContinue);
		case 14:
			var _g = e.ret;
			var name = e.name;
			var fexpr = e.e;
			var params = e.args;
			var capturedLocals = this.duplicate(this.locals);
			var me = this;
			var hasOpt = false;
			var minParams = 0;
			var _g = 0;
			while(_g < params.length) {
				var p = params[_g];
				++_g;
				if(p.opt) {
					hasOpt = true;
				} else {
					minParams += 1;
				}
			}
			var f = function(args) {
				if((args == null ? 0 : args.length) != params.length) {
					if(args.length < minParams) {
						var str = "Invalid number of parameters. Got " + args.length + ", required " + minParams;
						if(name != null) {
							str += " for function '" + name + "'";
						}
						var e = hscript_Error.ECustom(str);
						throw haxe_Exception.thrown(e);
					}
					var args2 = [];
					var extraParams = args.length - minParams;
					var pos = 0;
					var _g = 0;
					while(_g < params.length) {
						var p = params[_g];
						++_g;
						if(p.opt) {
							if(extraParams > 0) {
								args2.push(args[pos++]);
								--extraParams;
							} else {
								args2.push(null);
							}
						} else {
							args2.push(args[pos++]);
						}
					}
					args = args2;
				}
				var old = me.locals;
				var depth = me.depth;
				me.depth++;
				me.locals = me.duplicate(capturedLocals);
				var _g = 0;
				var _g1 = params.length;
				while(_g < _g1) {
					var i = _g++;
					me.locals.h[params[i].name] = { r : args[i]};
				}
				var r = null;
				if(_gthis.inTry) {
					try {
						r = me.exprReturn(fexpr);
					} catch( _g ) {
						haxe_NativeStackTrace.lastError = _g;
						var e = haxe_Exception.caught(_g).unwrap();
						me.locals = old;
						me.depth = depth;
						throw haxe_Exception.thrown(e);
					}
				} else {
					r = me.exprReturn(fexpr);
				}
				me.locals = old;
				me.depth = depth;
				return r;
			};
			var f1 = Reflect.makeVarArgs(f);
			if(name != null) {
				if(this.depth == 0) {
					this.variables.h[name] = f1;
				} else {
					this.declared.push({ n : name, old : this.locals.h[name]});
					var ref = { r : f1};
					this.locals.h[name] = ref;
					capturedLocals.h[name] = ref;
				}
			}
			return f1;
		case 15:
			var e1 = e.e;
			this.returnValue = e1 == null ? null : this.expr(e1);
			throw haxe_Exception.thrown(hscript__$Interp_Stop.SReturn);
		case 16:
			var index = e.index;
			var e1 = e.e;
			var arr = this.expr(e1);
			var index1 = this.expr(index);
			if(js_Boot.__implements(arr,haxe_IMap)) {
				return (js_Boot.__cast(arr , haxe_IMap)).get(index1);
			} else {
				return arr[index1];
			}
			break;
		case 17:
			var arr = e.e;
			var tmp;
			if(arr.length > 0) {
				var _g = arr[0];
				if(_g._hx_index == 6) {
					var _g1 = _g.e2;
					var _g1 = _g.e1;
					tmp = _g.op == "=>";
				} else {
					tmp = false;
				}
			} else {
				tmp = false;
			}
			if(tmp) {
				var isAllString = true;
				var isAllInt = true;
				var isAllObject = true;
				var isAllEnum = true;
				var keys = [];
				var values = [];
				var _g = 0;
				while(_g < arr.length) {
					var e1 = arr[_g];
					++_g;
					if(e1._hx_index == 6) {
						if(e1.op == "=>") {
							var eValue = e1.e2;
							var eKey = e1.e1;
							var key = this.expr(eKey);
							var value = this.expr(eValue);
							isAllString = isAllString && typeof(key) == "string";
							isAllInt = isAllInt && (typeof(key) == "number" && ((key | 0) === key));
							isAllObject = isAllObject && Reflect.isObject(key);
							isAllEnum = isAllEnum && Reflect.isEnumValue(key);
							keys.push(key);
							values.push(value);
						} else {
							throw haxe_Exception.thrown("=> expected");
						}
					} else {
						throw haxe_Exception.thrown("=> expected");
					}
				}
				var map;
				if(isAllInt) {
					map = new haxe_ds_IntMap();
				} else if(isAllString) {
					map = new haxe_ds_StringMap();
				} else if(isAllEnum) {
					map = new haxe_ds_EnumValueMap();
				} else if(isAllObject) {
					map = new haxe_ds_ObjectMap();
				} else {
					throw haxe_Exception.thrown("Inconsistent key types");
				}
				var _g = 0;
				var _g1 = keys.length;
				while(_g < _g1) {
					var n = _g++;
					(js_Boot.__cast(map , haxe_IMap)).set(keys[n],values[n]);
				}
				return map;
			} else {
				var a = [];
				var _g = 0;
				while(_g < arr.length) {
					var e1 = arr[_g];
					++_g;
					a.push(this.expr(e1));
				}
				return a;
			}
			break;
		case 18:
			var params1 = e.params;
			var cl = e.cl;
			var a = [];
			var _g = 0;
			while(_g < params1.length) {
				var e1 = params1[_g];
				++_g;
				a.push(this.expr(e1));
			}
			return this.cnew(cl,a);
		case 19:
			var e1 = e.e;
			throw haxe_Exception.thrown(this.expr(e1));
		case 20:
			var _g = e.t;
			var ecatch = e.ecatch;
			var n = e.v;
			var e1 = e.e;
			var old = this.declared.length;
			var oldTry = this.inTry;
			try {
				this.inTry = true;
				var v = this.expr(e1);
				this.restore(old);
				this.inTry = oldTry;
				return v;
			} catch( _g ) {
				haxe_NativeStackTrace.lastError = _g;
				var _g1 = haxe_Exception.caught(_g).unwrap();
				if(js_Boot.__instanceof(_g1,hscript__$Interp_Stop)) {
					var err = _g1;
					this.inTry = oldTry;
					throw haxe_Exception.thrown(err);
				} else {
					var err = _g1;
					this.restore(old);
					this.inTry = oldTry;
					this.declared.push({ n : n, old : this.locals.h[n]});
					this.locals.h[n] = { r : err};
					var v = this.expr(ecatch);
					this.restore(old);
					return v;
				}
			}
			break;
		case 21:
			var fl = e.fl;
			var o = { };
			var _g = 0;
			while(_g < fl.length) {
				var f = fl[_g];
				++_g;
				this.set(o,f.name,this.expr(f.e));
			}
			return o;
		case 22:
			var e2 = e.e2;
			var e1 = e.e1;
			var econd = e.cond;
			if(this.expr(econd) == true) {
				return this.expr(e1);
			} else {
				return this.expr(e2);
			}
			break;
		case 23:
			var def = e.defaultExpr;
			var cases = e.cases;
			var e1 = e.e;
			var val = this.expr(e1);
			var match = false;
			var _g = 0;
			while(_g < cases.length) {
				var c = cases[_g];
				++_g;
				var _g1 = 0;
				var _g2 = c.values;
				while(_g1 < _g2.length) {
					var v = _g2[_g1];
					++_g1;
					if(this.expr(v) == val) {
						match = true;
						break;
					}
				}
				if(match) {
					val = this.expr(c.expr);
					break;
				}
			}
			if(!match) {
				val = def == null ? null : this.expr(def);
			}
			return val;
		case 24:
			var e1 = e.e;
			var econd = e.cond;
			this.doWhileLoop(econd,e1);
			return null;
		case 25:
			var _g = e.args;
			var _g = e.name;
			var e1 = e.e;
			return this.expr(e1);
		case 26:
			var _g = e.t;
			var e1 = e.e;
			return this.expr(e1);
		}
	}
	,doWhileLoop: function(econd,e) {
		var old = this.declared.length;
		_hx_loop1: while(true) {
			try {
				this.expr(e);
			} catch( _g ) {
				haxe_NativeStackTrace.lastError = _g;
				var _g1 = haxe_Exception.caught(_g).unwrap();
				if(js_Boot.__instanceof(_g1,hscript__$Interp_Stop)) {
					var err = _g1;
					switch(err._hx_index) {
					case 0:
						break _hx_loop1;
					case 1:
						break;
					case 2:
						throw haxe_Exception.thrown(err);
					}
				} else {
					throw _g;
				}
			}
			if(!(this.expr(econd) == true)) {
				break;
			}
		}
		this.restore(old);
	}
	,whileLoop: function(econd,e) {
		var old = this.declared.length;
		_hx_loop1: while(this.expr(econd) == true) try {
			this.expr(e);
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
			var _g1 = haxe_Exception.caught(_g).unwrap();
			if(js_Boot.__instanceof(_g1,hscript__$Interp_Stop)) {
				var err = _g1;
				switch(err._hx_index) {
				case 0:
					break _hx_loop1;
				case 1:
					break;
				case 2:
					throw haxe_Exception.thrown(err);
				}
			} else {
				throw _g;
			}
		}
		this.restore(old);
	}
	,makeIterator: function(v) {
		try {
			v = $getIterator(v);
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
		}
		if(v.hasNext == null || v.next == null) {
			var e = hscript_Error.EInvalidIterator(v);
			throw haxe_Exception.thrown(e);
		}
		return v;
	}
	,forLoop: function(n,it,e) {
		var old = this.declared.length;
		this.declared.push({ n : n, old : this.locals.h[n]});
		var it1 = this.makeIterator(this.expr(it));
		_hx_loop1: while(it1.hasNext()) {
			var this1 = this.locals;
			var value = { r : it1.next()};
			this1.h[n] = value;
			try {
				this.expr(e);
			} catch( _g ) {
				haxe_NativeStackTrace.lastError = _g;
				var _g1 = haxe_Exception.caught(_g).unwrap();
				if(js_Boot.__instanceof(_g1,hscript__$Interp_Stop)) {
					var err = _g1;
					switch(err._hx_index) {
					case 0:
						break _hx_loop1;
					case 1:
						break;
					case 2:
						throw haxe_Exception.thrown(err);
					}
				} else {
					throw _g;
				}
			}
		}
		this.restore(old);
	}
	,isMap: function(o) {
		return js_Boot.__implements(o,haxe_IMap);
	}
	,getMapValue: function(map,key) {
		return (js_Boot.__cast(map , haxe_IMap)).get(key);
	}
	,setMapValue: function(map,key,value) {
		(js_Boot.__cast(map , haxe_IMap)).set(key,value);
	}
	,get: function(o,f) {
		if(o == null) {
			var e = hscript_Error.EInvalidAccess(f);
			throw haxe_Exception.thrown(e);
		}
		return Reflect.getProperty(o,f);
	}
	,set: function(o,f,v) {
		if(o == null) {
			var e = hscript_Error.EInvalidAccess(f);
			throw haxe_Exception.thrown(e);
		}
		Reflect.setProperty(o,f,v);
		return v;
	}
	,fcall: function(o,f,args) {
		return this.call(o,this.get(o,f),args);
	}
	,call: function(o,f,args) {
		return f.apply(o,args);
	}
	,cnew: function(cl,args) {
		var c = $hxClasses[cl];
		if(c == null) {
			c = this.resolve(cl);
		}
		return Type.createInstance(c,args);
	}
	,__class__: hscript_Interp
};
var hscript_Token = $hxEnums["hscript.Token"] = { __ename__ : "hscript.Token", __constructs__ : ["TEof","TConst","TId","TOp","TPOpen","TPClose","TBrOpen","TBrClose","TDot","TComma","TSemicolon","TBkOpen","TBkClose","TQuestion","TDoubleDot","TMeta","TPrepro"]
	,TEof: {_hx_index:0,__enum__:"hscript.Token",toString:$estr}
	,TConst: ($_=function(c) { return {_hx_index:1,c:c,__enum__:"hscript.Token",toString:$estr}; },$_.__params__ = ["c"],$_)
	,TId: ($_=function(s) { return {_hx_index:2,s:s,__enum__:"hscript.Token",toString:$estr}; },$_.__params__ = ["s"],$_)
	,TOp: ($_=function(s) { return {_hx_index:3,s:s,__enum__:"hscript.Token",toString:$estr}; },$_.__params__ = ["s"],$_)
	,TPOpen: {_hx_index:4,__enum__:"hscript.Token",toString:$estr}
	,TPClose: {_hx_index:5,__enum__:"hscript.Token",toString:$estr}
	,TBrOpen: {_hx_index:6,__enum__:"hscript.Token",toString:$estr}
	,TBrClose: {_hx_index:7,__enum__:"hscript.Token",toString:$estr}
	,TDot: {_hx_index:8,__enum__:"hscript.Token",toString:$estr}
	,TComma: {_hx_index:9,__enum__:"hscript.Token",toString:$estr}
	,TSemicolon: {_hx_index:10,__enum__:"hscript.Token",toString:$estr}
	,TBkOpen: {_hx_index:11,__enum__:"hscript.Token",toString:$estr}
	,TBkClose: {_hx_index:12,__enum__:"hscript.Token",toString:$estr}
	,TQuestion: {_hx_index:13,__enum__:"hscript.Token",toString:$estr}
	,TDoubleDot: {_hx_index:14,__enum__:"hscript.Token",toString:$estr}
	,TMeta: ($_=function(s) { return {_hx_index:15,s:s,__enum__:"hscript.Token",toString:$estr}; },$_.__params__ = ["s"],$_)
	,TPrepro: ($_=function(s) { return {_hx_index:16,s:s,__enum__:"hscript.Token",toString:$estr}; },$_.__params__ = ["s"],$_)
};
var hscript_Parser = function() {
	this.uid = 0;
	this.preprocesorValues = new haxe_ds_StringMap();
	this.line = 1;
	this.opChars = "+*/-=!><&|^%~";
	this.identChars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789_";
	var priorities = [["%"],["*","/"],["+","-"],["<<",">>",">>>"],["|","&","^"],["==","!=",">","<",">=","<="],["..."],["&&"],["||"],["=","+=","-=","*=","/=","%=","<<=",">>=",">>>=","|=","&=","^=","=>"]];
	this.opPriority = new haxe_ds_StringMap();
	this.opRightAssoc = new haxe_ds_StringMap();
	this.unops = new haxe_ds_StringMap();
	var _g = 0;
	var _g1 = priorities.length;
	while(_g < _g1) {
		var i = _g++;
		var _g2 = 0;
		var _g3 = priorities[i];
		while(_g2 < _g3.length) {
			var x = _g3[_g2];
			++_g2;
			this.opPriority.h[x] = i;
			if(i == 9) {
				this.opRightAssoc.h[x] = true;
			}
		}
	}
	var x = "!";
	this.unops.h[x] = x == "++" || x == "--";
	var x = "++";
	this.unops.h[x] = x == "++" || x == "--";
	var x = "--";
	this.unops.h[x] = x == "++" || x == "--";
	var x = "-";
	this.unops.h[x] = x == "++" || x == "--";
	var x = "~";
	this.unops.h[x] = x == "++" || x == "--";
};
$hxClasses["hscript.Parser"] = hscript_Parser;
hscript_Parser.__name__ = "hscript.Parser";
hscript_Parser.prototype = {
	line: null
	,opChars: null
	,identChars: null
	,opPriority: null
	,opRightAssoc: null
	,unops: null
	,preprocesorValues: null
	,allowJSON: null
	,allowTypes: null
	,allowMetadata: null
	,resumeErrors: null
	,input: null
	,readPos: null
	,char: null
	,ops: null
	,idents: null
	,uid: null
	,tokens: null
	,error: function(err,pmin,pmax) {
		if(!this.resumeErrors) {
			throw haxe_Exception.thrown(err);
		}
	}
	,invalidChar: function(c) {
		if(!this.resumeErrors) {
			throw haxe_Exception.thrown(hscript_Error.EInvalidChar(c));
		}
	}
	,initParser: function(origin) {
		this.preprocStack = [];
		this.tokens = new haxe_ds_GenericStack();
		this.char = -1;
		this.ops = [];
		this.idents = [];
		this.uid = 0;
		var _g = 0;
		var _g1 = this.opChars.length;
		while(_g < _g1) {
			var i = _g++;
			this.ops[HxOverrides.cca(this.opChars,i)] = true;
		}
		var _g = 0;
		var _g1 = this.identChars.length;
		while(_g < _g1) {
			var i = _g++;
			this.idents[HxOverrides.cca(this.identChars,i)] = true;
		}
	}
	,parseString: function(s,origin) {
		if(origin == null) {
			origin = "hscript";
		}
		this.initParser(origin);
		this.input = s;
		this.readPos = 0;
		var a = [];
		while(true) {
			var tk = this.token();
			if(tk == hscript_Token.TEof) {
				break;
			}
			var _this = this.tokens;
			_this.head = new haxe_ds_GenericCell(tk,_this.head);
			this.parseFullExpr(a);
		}
		if(a.length == 1) {
			return a[0];
		} else {
			return hscript_Expr.EBlock(a);
		}
	}
	,unexpected: function(tk) {
		var err = hscript_Error.EUnexpected(this.tokenString(tk));
		if(!this.resumeErrors) {
			throw haxe_Exception.thrown(err);
		}
		return null;
	}
	,push: function(tk) {
		var _this = this.tokens;
		_this.head = new haxe_ds_GenericCell(tk,_this.head);
	}
	,ensure: function(tk) {
		var t = this.token();
		if(t != tk) {
			this.unexpected(t);
		}
	}
	,ensureToken: function(tk) {
		var t = this.token();
		if(!Type.enumEq(t,tk)) {
			this.unexpected(t);
		}
	}
	,maybe: function(tk) {
		var t = this.token();
		if(Type.enumEq(t,tk)) {
			return true;
		}
		var _this = this.tokens;
		_this.head = new haxe_ds_GenericCell(t,_this.head);
		return false;
	}
	,getIdent: function() {
		var tk = this.token();
		if(tk == null) {
			this.unexpected(tk);
			return null;
		} else if(tk._hx_index == 2) {
			var id = tk.s;
			return id;
		} else {
			this.unexpected(tk);
			return null;
		}
	}
	,expr: function(e) {
		return e;
	}
	,pmin: function(e) {
		return 0;
	}
	,pmax: function(e) {
		return 0;
	}
	,mk: function(e,pmin,pmax) {
		return e;
	}
	,isBlock: function(e) {
		if(e == null) {
			return false;
		}
		switch(e._hx_index) {
		case 2:
			var _g = e.n;
			var e1 = e.e;
			var t = e.t;
			if(e1 != null) {
				return this.isBlock(e1);
			} else if(t != null) {
				if(t == null) {
					return false;
				} else if(t._hx_index == 2) {
					var _g = t.fields;
					return true;
				} else {
					return false;
				}
			} else {
				return false;
			}
			break;
		case 4:
			var _g = e.e;
			return true;
		case 6:
			var _g = e.e1;
			var _g = e.op;
			var e1 = e.e2;
			return this.isBlock(e1);
		case 7:
			var _g = e.op;
			var e1 = e.e;
			var prefix = e.prefix;
			if(!prefix) {
				return this.isBlock(e1);
			} else {
				return false;
			}
			break;
		case 9:
			var _g = e.cond;
			var e2 = e.e2;
			var e1 = e.e1;
			if(e2 != null) {
				return this.isBlock(e2);
			} else {
				return this.isBlock(e1);
			}
			break;
		case 10:
			var _g = e.cond;
			var e1 = e.e;
			return this.isBlock(e1);
		case 11:
			var _g = e.it;
			var _g = e.v;
			var e1 = e.e;
			return this.isBlock(e1);
		case 14:
			var _g = e.ret;
			var _g = e.name;
			var _g = e.args;
			var e1 = e.e;
			return this.isBlock(e1);
		case 15:
			var e1 = e.e;
			if(e1 != null) {
				return this.isBlock(e1);
			} else {
				return false;
			}
			break;
		case 20:
			var _g = e.t;
			var _g = e.v;
			var _g = e.e;
			var e1 = e.ecatch;
			return this.isBlock(e1);
		case 21:
			var _g = e.fl;
			return true;
		case 23:
			var _g = e.defaultExpr;
			var _g = e.cases;
			var _g = e.e;
			return true;
		case 24:
			var _g = e.cond;
			var e1 = e.e;
			return this.isBlock(e1);
		case 25:
			var _g = e.args;
			var _g = e.name;
			var e1 = e.e;
			return this.isBlock(e1);
		default:
			return false;
		}
	}
	,parseFullExpr: function(exprs) {
		var e = this.parseExpr();
		exprs.push(e);
		var tk = this.token();
		while(true) {
			var tmp;
			if(tk == hscript_Token.TComma && e != null) {
				if(e._hx_index == 2) {
					var _g = e.e;
					var _g1 = e.t;
					var _g2 = e.n;
					tmp = true;
				} else {
					tmp = false;
				}
			} else {
				tmp = false;
			}
			if(!tmp) {
				break;
			}
			e = this.parseStructure("var");
			exprs.push(e);
			tk = this.token();
		}
		if(tk != hscript_Token.TSemicolon && tk != hscript_Token.TEof) {
			if(this.isBlock(e)) {
				var _this = this.tokens;
				_this.head = new haxe_ds_GenericCell(tk,_this.head);
			} else {
				this.unexpected(tk);
			}
		}
	}
	,parseObject: function(p1) {
		var fl = [];
		_hx_loop1: while(true) {
			var tk = this.token();
			var id = null;
			if(tk == null) {
				this.unexpected(tk);
				break;
			} else {
				switch(tk._hx_index) {
				case 1:
					var c = tk.c;
					if(!this.allowJSON) {
						this.unexpected(tk);
					}
					if(c._hx_index == 2) {
						var s = c.s;
						id = s;
					} else {
						this.unexpected(tk);
					}
					break;
				case 2:
					var i = tk.s;
					id = i;
					break;
				case 7:
					break _hx_loop1;
				default:
					this.unexpected(tk);
					break _hx_loop1;
				}
			}
			var t = this.token();
			if(t != hscript_Token.TDoubleDot) {
				this.unexpected(t);
			}
			fl.push({ name : id, e : this.parseExpr()});
			tk = this.token();
			if(tk == null) {
				this.unexpected(tk);
			} else {
				switch(tk._hx_index) {
				case 7:
					break _hx_loop1;
				case 9:
					break;
				default:
					this.unexpected(tk);
				}
			}
		}
		return this.parseExprNext(hscript_Expr.EObject(fl));
	}
	,parseExpr: function() {
		var tk = this.token();
		if(tk == null) {
			return this.unexpected(tk);
		} else {
			switch(tk._hx_index) {
			case 1:
				var c = tk.c;
				return this.parseExprNext(hscript_Expr.EConst(c));
			case 2:
				var id = tk.s;
				var e = this.parseStructure(id);
				if(e == null) {
					e = hscript_Expr.EIdent(id);
				}
				return this.parseExprNext(e);
			case 3:
				var op = tk.s;
				if(Object.prototype.hasOwnProperty.call(this.unops.h,op)) {
					var start = 0;
					var e = this.parseExpr();
					if(op == "-" && e != null) {
						if(e._hx_index == 0) {
							var _g = e.c;
							switch(_g._hx_index) {
							case 0:
								var i = _g.v;
								return hscript_Expr.EConst(hscript_Const.CInt(-i));
							case 1:
								var f = _g.f;
								return hscript_Expr.EConst(hscript_Const.CFloat(-f));
							default:
							}
						}
					}
					return this.makeUnop(op,e);
				}
				return this.unexpected(tk);
			case 4:
				var e = this.parseExpr();
				tk = this.token();
				if(tk != null) {
					switch(tk._hx_index) {
					case 5:
						return this.parseExprNext(hscript_Expr.EParent(e));
					case 9:
						if(e._hx_index == 1) {
							var v = e.v;
							return this.parseLambda([{ name : v}],0);
						}
						break;
					case 14:
						var t = this.parseType();
						tk = this.token();
						if(tk != null) {
							switch(tk._hx_index) {
							case 5:
								return this.parseExprNext(hscript_Expr.ECheckType(e,t));
							case 9:
								if(e._hx_index == 1) {
									var v = e.v;
									return this.parseLambda([{ name : v, t : t}],0);
								}
								break;
							default:
							}
						}
						break;
					default:
					}
				}
				return this.unexpected(tk);
			case 6:
				tk = this.token();
				if(tk == null) {
					var _this = this.tokens;
					_this.head = new haxe_ds_GenericCell(tk,_this.head);
				} else {
					switch(tk._hx_index) {
					case 1:
						var c = tk.c;
						if(this.allowJSON) {
							if(c._hx_index == 2) {
								var _g = c.s;
								var tk2 = this.token();
								var _this = this.tokens;
								_this.head = new haxe_ds_GenericCell(tk2,_this.head);
								var _this = this.tokens;
								_this.head = new haxe_ds_GenericCell(tk,_this.head);
								if(tk2 != null) {
									if(tk2._hx_index == 14) {
										return this.parseExprNext(this.parseObject(0));
									}
								}
							} else {
								var _this = this.tokens;
								_this.head = new haxe_ds_GenericCell(tk,_this.head);
							}
						} else {
							var _this = this.tokens;
							_this.head = new haxe_ds_GenericCell(tk,_this.head);
						}
						break;
					case 2:
						var _g = tk.s;
						var tk2 = this.token();
						var _this = this.tokens;
						_this.head = new haxe_ds_GenericCell(tk2,_this.head);
						var _this = this.tokens;
						_this.head = new haxe_ds_GenericCell(tk,_this.head);
						if(tk2 != null) {
							if(tk2._hx_index == 14) {
								return this.parseExprNext(this.parseObject(0));
							}
						}
						break;
					case 7:
						return this.parseExprNext(hscript_Expr.EObject([]));
					default:
						var _this = this.tokens;
						_this.head = new haxe_ds_GenericCell(tk,_this.head);
					}
				}
				var a = [];
				while(true) {
					this.parseFullExpr(a);
					tk = this.token();
					if(tk == hscript_Token.TBrClose || this.resumeErrors && tk == hscript_Token.TEof) {
						break;
					}
					var _this = this.tokens;
					_this.head = new haxe_ds_GenericCell(tk,_this.head);
				}
				return hscript_Expr.EBlock(a);
			case 11:
				var a = [];
				tk = this.token();
				while(tk != hscript_Token.TBkClose && (!this.resumeErrors || tk != hscript_Token.TEof)) {
					var _this = this.tokens;
					_this.head = new haxe_ds_GenericCell(tk,_this.head);
					a.push(this.parseExpr());
					tk = this.token();
					if(tk == hscript_Token.TComma) {
						tk = this.token();
					}
				}
				if(a.length == 1 && a[0] != null) {
					var _g = a[0];
					switch(_g._hx_index) {
					case 10:
						var _g1 = _g.e;
						var _g1 = _g.cond;
						var tmp = "__a_" + this.uid++;
						var e = hscript_Expr.EBlock([hscript_Expr.EVar(tmp,null,hscript_Expr.EArrayDecl([])),this.mapCompr(tmp,a[0]),hscript_Expr.EIdent(tmp)]);
						return this.parseExprNext(e);
					case 11:
						var _g1 = _g.e;
						var _g1 = _g.it;
						var _g1 = _g.v;
						var tmp = "__a_" + this.uid++;
						var e = hscript_Expr.EBlock([hscript_Expr.EVar(tmp,null,hscript_Expr.EArrayDecl([])),this.mapCompr(tmp,a[0]),hscript_Expr.EIdent(tmp)]);
						return this.parseExprNext(e);
					case 24:
						var _g1 = _g.e;
						var _g1 = _g.cond;
						var tmp = "__a_" + this.uid++;
						var e = hscript_Expr.EBlock([hscript_Expr.EVar(tmp,null,hscript_Expr.EArrayDecl([])),this.mapCompr(tmp,a[0]),hscript_Expr.EIdent(tmp)]);
						return this.parseExprNext(e);
					default:
					}
				}
				return this.parseExprNext(hscript_Expr.EArrayDecl(a));
			case 15:
				var id = tk.s;
				if(this.allowMetadata) {
					var args = this.parseMetaArgs();
					return hscript_Expr.EMeta(id,args,this.parseExpr());
				} else {
					return this.unexpected(tk);
				}
				break;
			default:
				return this.unexpected(tk);
			}
		}
	}
	,parseLambda: function(args,pmin) {
		_hx_loop1: while(true) {
			var id = this.getIdent();
			var t = this.maybe(hscript_Token.TDoubleDot) ? this.parseType() : null;
			args.push({ name : id, t : t});
			var tk = this.token();
			if(tk == null) {
				this.unexpected(tk);
				break;
			} else {
				switch(tk._hx_index) {
				case 5:
					break _hx_loop1;
				case 9:
					break;
				default:
					this.unexpected(tk);
					break _hx_loop1;
				}
			}
		}
		var t = this.token();
		if(!Type.enumEq(t,hscript_Token.TOp("->"))) {
			this.unexpected(t);
		}
		var eret = this.parseExpr();
		return hscript_Expr.EFunction(args,hscript_Expr.EReturn(eret));
	}
	,parseMetaArgs: function() {
		var tk = this.token();
		if(tk != hscript_Token.TPOpen) {
			var _this = this.tokens;
			_this.head = new haxe_ds_GenericCell(tk,_this.head);
			return null;
		}
		var args = [];
		tk = this.token();
		if(tk != hscript_Token.TPClose) {
			var _this = this.tokens;
			_this.head = new haxe_ds_GenericCell(tk,_this.head);
			_hx_loop1: while(true) {
				args.push(this.parseExpr());
				var _g = this.token();
				if(_g == null) {
					var tk = _g;
					this.unexpected(tk);
				} else {
					switch(_g._hx_index) {
					case 5:
						break _hx_loop1;
					case 9:
						break;
					default:
						var tk1 = _g;
						this.unexpected(tk1);
					}
				}
			}
		}
		return args;
	}
	,mapCompr: function(tmp,e) {
		if(e == null) {
			return null;
		}
		var edef;
		switch(e._hx_index) {
		case 3:
			var e2 = e.e;
			edef = hscript_Expr.EParent(this.mapCompr(tmp,e2));
			break;
		case 4:
			var _g = e.e;
			if(_g.length == 1) {
				var e1 = _g[0];
				edef = hscript_Expr.EBlock([this.mapCompr(tmp,e1)]);
			} else {
				edef = hscript_Expr.ECall(hscript_Expr.EField(hscript_Expr.EIdent(tmp),"push"),[e]);
			}
			break;
		case 9:
			var e2 = e.e2;
			var e1 = e.e1;
			var cond = e.cond;
			edef = e2 == null ? hscript_Expr.EIf(cond,this.mapCompr(tmp,e1),null) : hscript_Expr.ECall(hscript_Expr.EField(hscript_Expr.EIdent(tmp),"push"),[e]);
			break;
		case 10:
			var e2 = e.e;
			var cond = e.cond;
			edef = hscript_Expr.EWhile(cond,this.mapCompr(tmp,e2));
			break;
		case 11:
			var e2 = e.e;
			var it = e.it;
			var v = e.v;
			edef = hscript_Expr.EFor(v,it,this.mapCompr(tmp,e2));
			break;
		case 24:
			var e2 = e.e;
			var cond = e.cond;
			edef = hscript_Expr.EDoWhile(cond,this.mapCompr(tmp,e2));
			break;
		default:
			edef = hscript_Expr.ECall(hscript_Expr.EField(hscript_Expr.EIdent(tmp),"push"),[e]);
		}
		return edef;
	}
	,makeUnop: function(op,e) {
		if(e == null && this.resumeErrors) {
			return null;
		}
		switch(e._hx_index) {
		case 6:
			var e2 = e.e2;
			var e1 = e.e1;
			var bop = e.op;
			return hscript_Expr.EBinop(bop,this.makeUnop(op,e1),e2);
		case 22:
			var e3 = e.e2;
			var e2 = e.e1;
			var e1 = e.cond;
			return hscript_Expr.ETernary(this.makeUnop(op,e1),e2,e3);
		default:
			return hscript_Expr.EUnop(op,true,e);
		}
	}
	,makeBinop: function(op,e1,e) {
		if(e == null && this.resumeErrors) {
			return hscript_Expr.EBinop(op,e1,e);
		}
		switch(e._hx_index) {
		case 6:
			var e3 = e.e2;
			var e2 = e.e1;
			var op2 = e.op;
			if(this.opPriority.h[op] <= this.opPriority.h[op2] && !Object.prototype.hasOwnProperty.call(this.opRightAssoc.h,op)) {
				return hscript_Expr.EBinop(op2,this.makeBinop(op,e1,e2),e3);
			} else {
				return hscript_Expr.EBinop(op,e1,e);
			}
			break;
		case 22:
			var e4 = e.e2;
			var e3 = e.e1;
			var e2 = e.cond;
			if(Object.prototype.hasOwnProperty.call(this.opRightAssoc.h,op)) {
				return hscript_Expr.EBinop(op,e1,e);
			} else {
				return hscript_Expr.ETernary(this.makeBinop(op,e1,e2),e3,e4);
			}
			break;
		default:
			return hscript_Expr.EBinop(op,e1,e);
		}
	}
	,parseStructure: function(id) {
		switch(id) {
		case "break":
			return hscript_Expr.EBreak;
		case "continue":
			return hscript_Expr.EContinue;
		case "do":
			var e = this.parseExpr();
			var tk = this.token();
			if(tk == null) {
				this.unexpected(tk);
			} else if(tk._hx_index == 2) {
				if(tk.s != "while") {
					this.unexpected(tk);
				}
			} else {
				this.unexpected(tk);
			}
			var econd = this.parseExpr();
			return hscript_Expr.EDoWhile(econd,e);
		case "else":
			return this.unexpected(hscript_Token.TId(id));
		case "for":
			var t = this.token();
			if(t != hscript_Token.TPOpen) {
				this.unexpected(t);
			}
			var vname = this.getIdent();
			var t = this.token();
			if(!Type.enumEq(t,hscript_Token.TId("in"))) {
				this.unexpected(t);
			}
			var eiter = this.parseExpr();
			var t = this.token();
			if(t != hscript_Token.TPClose) {
				this.unexpected(t);
			}
			var e = this.parseExpr();
			return hscript_Expr.EFor(vname,eiter,e);
		case "function":
			var tk = this.token();
			var name = null;
			if(tk == null) {
				var _this = this.tokens;
				_this.head = new haxe_ds_GenericCell(tk,_this.head);
			} else if(tk._hx_index == 2) {
				var id = tk.s;
				name = id;
			} else {
				var _this = this.tokens;
				_this.head = new haxe_ds_GenericCell(tk,_this.head);
			}
			var inf = this.parseFunctionDecl();
			return hscript_Expr.EFunction(inf.args,inf.body,name,inf.ret);
		case "if":
			var t = this.token();
			if(t != hscript_Token.TPOpen) {
				this.unexpected(t);
			}
			var cond = this.parseExpr();
			var t = this.token();
			if(t != hscript_Token.TPClose) {
				this.unexpected(t);
			}
			var e1 = this.parseExpr();
			var e2 = null;
			var semic = false;
			var tk = this.token();
			if(tk == hscript_Token.TSemicolon) {
				semic = true;
				tk = this.token();
			}
			if(Type.enumEq(tk,hscript_Token.TId("else"))) {
				e2 = this.parseExpr();
			} else {
				var _this = this.tokens;
				_this.head = new haxe_ds_GenericCell(tk,_this.head);
				if(semic) {
					var _this = this.tokens;
					_this.head = new haxe_ds_GenericCell(hscript_Token.TSemicolon,_this.head);
				}
			}
			return hscript_Expr.EIf(cond,e1,e2);
		case "inline":
			if(!this.maybe(hscript_Token.TId("function"))) {
				this.unexpected(hscript_Token.TId("inline"));
			}
			return this.parseStructure("function");
		case "new":
			var a = [];
			a.push(this.getIdent());
			_hx_loop1: while(true) {
				var tk = this.token();
				if(tk == null) {
					this.unexpected(tk);
					break;
				} else {
					switch(tk._hx_index) {
					case 4:
						break _hx_loop1;
					case 8:
						a.push(this.getIdent());
						break;
					default:
						this.unexpected(tk);
						break _hx_loop1;
					}
				}
			}
			var args = this.parseExprList(hscript_Token.TPClose);
			return hscript_Expr.ENew(a.join("."),args);
		case "return":
			var tk = this.token();
			var _this = this.tokens;
			_this.head = new haxe_ds_GenericCell(tk,_this.head);
			var e = tk == hscript_Token.TSemicolon ? null : this.parseExpr();
			return hscript_Expr.EReturn(e);
		case "switch":
			var e = this.parseExpr();
			var def = null;
			var cases = [];
			var t = this.token();
			if(t != hscript_Token.TBrOpen) {
				this.unexpected(t);
			}
			_hx_loop2: while(true) {
				var tk = this.token();
				if(tk == null) {
					this.unexpected(tk);
					break;
				} else {
					switch(tk._hx_index) {
					case 2:
						switch(tk.s) {
						case "case":
							var c = { values : [], expr : null};
							cases.push(c);
							_hx_loop3: while(true) {
								var e1 = this.parseExpr();
								c.values.push(e1);
								tk = this.token();
								if(tk == null) {
									this.unexpected(tk);
									break;
								} else {
									switch(tk._hx_index) {
									case 9:
										break;
									case 14:
										break _hx_loop3;
									default:
										this.unexpected(tk);
										break _hx_loop3;
									}
								}
							}
							var exprs = [];
							_hx_loop4: while(true) {
								tk = this.token();
								var _this = this.tokens;
								_this.head = new haxe_ds_GenericCell(tk,_this.head);
								if(tk == null) {
									this.parseFullExpr(exprs);
								} else {
									switch(tk._hx_index) {
									case 0:
										if(this.resumeErrors) {
											break _hx_loop4;
										} else {
											this.parseFullExpr(exprs);
										}
										break;
									case 2:
										switch(tk.s) {
										case "case":case "default":
											break _hx_loop4;
										default:
											this.parseFullExpr(exprs);
										}
										break;
									case 7:
										break _hx_loop4;
									default:
										this.parseFullExpr(exprs);
									}
								}
							}
							c.expr = exprs.length == 1 ? exprs[0] : exprs.length == 0 ? hscript_Expr.EBlock([]) : hscript_Expr.EBlock(exprs);
							break;
						case "default":
							if(def != null) {
								this.unexpected(tk);
							}
							var t = this.token();
							if(t != hscript_Token.TDoubleDot) {
								this.unexpected(t);
							}
							var exprs1 = [];
							_hx_loop5: while(true) {
								tk = this.token();
								var _this1 = this.tokens;
								_this1.head = new haxe_ds_GenericCell(tk,_this1.head);
								if(tk == null) {
									this.parseFullExpr(exprs1);
								} else {
									switch(tk._hx_index) {
									case 0:
										if(this.resumeErrors) {
											break _hx_loop5;
										} else {
											this.parseFullExpr(exprs1);
										}
										break;
									case 2:
										switch(tk.s) {
										case "case":case "default":
											break _hx_loop5;
										default:
											this.parseFullExpr(exprs1);
										}
										break;
									case 7:
										break _hx_loop5;
									default:
										this.parseFullExpr(exprs1);
									}
								}
							}
							def = exprs1.length == 1 ? exprs1[0] : exprs1.length == 0 ? hscript_Expr.EBlock([]) : hscript_Expr.EBlock(exprs1);
							break;
						default:
							this.unexpected(tk);
							break _hx_loop2;
						}
						break;
					case 7:
						break _hx_loop2;
					default:
						this.unexpected(tk);
						break _hx_loop2;
					}
				}
			}
			return hscript_Expr.ESwitch(e,cases,def);
		case "throw":
			var e = this.parseExpr();
			return hscript_Expr.EThrow(e);
		case "try":
			var e = this.parseExpr();
			var t = this.token();
			if(!Type.enumEq(t,hscript_Token.TId("catch"))) {
				this.unexpected(t);
			}
			var t = this.token();
			if(t != hscript_Token.TPOpen) {
				this.unexpected(t);
			}
			var vname = this.getIdent();
			var t = this.token();
			if(t != hscript_Token.TDoubleDot) {
				this.unexpected(t);
			}
			var t = null;
			if(this.allowTypes) {
				t = this.parseType();
			} else {
				var t1 = this.token();
				if(!Type.enumEq(t1,hscript_Token.TId("Dynamic"))) {
					this.unexpected(t1);
				}
			}
			var t1 = this.token();
			if(t1 != hscript_Token.TPClose) {
				this.unexpected(t1);
			}
			var ec = this.parseExpr();
			return hscript_Expr.ETry(e,vname,t,ec);
		case "var":
			var ident = this.getIdent();
			var tk = this.token();
			var t = null;
			if(tk == hscript_Token.TDoubleDot && this.allowTypes) {
				t = this.parseType();
				tk = this.token();
			}
			var e = null;
			if(Type.enumEq(tk,hscript_Token.TOp("="))) {
				e = this.parseExpr();
			} else {
				var _this = this.tokens;
				_this.head = new haxe_ds_GenericCell(tk,_this.head);
			}
			return hscript_Expr.EVar(ident,t,e);
		case "while":
			var econd = this.parseExpr();
			var e = this.parseExpr();
			return hscript_Expr.EWhile(econd,e);
		default:
			return null;
		}
	}
	,parseExprNext: function(e1) {
		var tk = this.token();
		if(tk == null) {
			var _this = this.tokens;
			_this.head = new haxe_ds_GenericCell(tk,_this.head);
			return e1;
		} else {
			switch(tk._hx_index) {
			case 3:
				var op = tk.s;
				if(op == "->") {
					switch(e1._hx_index) {
					case 1:
						var i = e1.v;
						var eret = this.parseExpr();
						return hscript_Expr.EFunction([{ name : i}],hscript_Expr.EReturn(eret));
					case 3:
						var _hx_tmp = e1.e;
						if(_hx_tmp._hx_index == 1) {
							var i = _hx_tmp.v;
							var eret = this.parseExpr();
							return hscript_Expr.EFunction([{ name : i}],hscript_Expr.EReturn(eret));
						}
						break;
					case 26:
						var _hx_tmp = e1.e;
						if(_hx_tmp._hx_index == 1) {
							var t = e1.t;
							var i = _hx_tmp.v;
							var eret = this.parseExpr();
							return hscript_Expr.EFunction([{ name : i, t : t}],hscript_Expr.EReturn(eret));
						}
						break;
					default:
					}
					this.unexpected(tk);
				}
				if(this.unops.h[op]) {
					var tmp;
					if(!this.isBlock(e1)) {
						if(e1._hx_index == 3) {
							var _g = e1.e;
							tmp = true;
						} else {
							tmp = false;
						}
					} else {
						tmp = true;
					}
					if(tmp) {
						var _this = this.tokens;
						_this.head = new haxe_ds_GenericCell(tk,_this.head);
						return e1;
					}
					return this.parseExprNext(hscript_Expr.EUnop(op,false,e1));
				}
				return this.makeBinop(op,e1,this.parseExpr());
			case 4:
				return this.parseExprNext(hscript_Expr.ECall(e1,this.parseExprList(hscript_Token.TPClose)));
			case 8:
				var field = this.getIdent();
				return this.parseExprNext(hscript_Expr.EField(e1,field));
			case 11:
				var e2 = this.parseExpr();
				var t = this.token();
				if(t != hscript_Token.TBkClose) {
					this.unexpected(t);
				}
				return this.parseExprNext(hscript_Expr.EArray(e1,e2));
			case 13:
				var e2 = this.parseExpr();
				var t = this.token();
				if(t != hscript_Token.TDoubleDot) {
					this.unexpected(t);
				}
				var e3 = this.parseExpr();
				return hscript_Expr.ETernary(e1,e2,e3);
			default:
				var _this = this.tokens;
				_this.head = new haxe_ds_GenericCell(tk,_this.head);
				return e1;
			}
		}
	}
	,parseFunctionArgs: function() {
		var args = [];
		var tk = this.token();
		if(tk != hscript_Token.TPClose) {
			var done = false;
			while(!done) {
				var name = null;
				var opt = false;
				if(tk != null) {
					if(tk._hx_index == 13) {
						opt = true;
						tk = this.token();
					}
				}
				if(tk == null) {
					this.unexpected(tk);
					break;
				} else if(tk._hx_index == 2) {
					var id = tk.s;
					name = id;
				} else {
					this.unexpected(tk);
					break;
				}
				var arg = { name : name};
				args.push(arg);
				if(opt) {
					arg.opt = true;
				}
				if(this.allowTypes) {
					if(this.maybe(hscript_Token.TDoubleDot)) {
						arg.t = this.parseType();
					}
					if(this.maybe(hscript_Token.TOp("="))) {
						arg.value = this.parseExpr();
					}
				}
				tk = this.token();
				if(tk == null) {
					this.unexpected(tk);
				} else {
					switch(tk._hx_index) {
					case 5:
						done = true;
						break;
					case 9:
						tk = this.token();
						break;
					default:
						this.unexpected(tk);
					}
				}
			}
		}
		return args;
	}
	,parseFunctionDecl: function() {
		var t = this.token();
		if(t != hscript_Token.TPOpen) {
			this.unexpected(t);
		}
		var args = this.parseFunctionArgs();
		var ret = null;
		if(this.allowTypes) {
			var tk = this.token();
			if(tk != hscript_Token.TDoubleDot) {
				var _this = this.tokens;
				_this.head = new haxe_ds_GenericCell(tk,_this.head);
			} else {
				ret = this.parseType();
			}
		}
		return { args : args, ret : ret, body : this.parseExpr()};
	}
	,parsePath: function() {
		var path = [this.getIdent()];
		while(true) {
			var t = this.token();
			if(t != hscript_Token.TDot) {
				var _this = this.tokens;
				_this.head = new haxe_ds_GenericCell(t,_this.head);
				break;
			}
			path.push(this.getIdent());
		}
		return path;
	}
	,parseType: function() {
		var _gthis = this;
		var t = this.token();
		if(t == null) {
			return this.unexpected(t);
		} else {
			switch(t._hx_index) {
			case 2:
				var v = t.s;
				var _this = this.tokens;
				_this.head = new haxe_ds_GenericCell(t,_this.head);
				var path = this.parsePath();
				var params = null;
				t = this.token();
				if(t == null) {
					var _this = this.tokens;
					_this.head = new haxe_ds_GenericCell(t,_this.head);
				} else if(t._hx_index == 3) {
					var op = t.s;
					if(op == "<") {
						params = [];
						_hx_loop1: while(true) {
							params.push(this.parseType());
							t = this.token();
							if(t != null) {
								switch(t._hx_index) {
								case 3:
									var op = t.s;
									if(op == ">") {
										break _hx_loop1;
									}
									if(HxOverrides.cca(op,0) == 62) {
										var _this = this.tokens;
										_this.head = new haxe_ds_GenericCell(hscript_Token.TOp(HxOverrides.substr(op,1,null)),_this.head);
										break _hx_loop1;
									}
									break;
								case 9:
									continue;
								default:
								}
							}
							this.unexpected(t);
							break;
						}
					} else {
						var _this = this.tokens;
						_this.head = new haxe_ds_GenericCell(t,_this.head);
					}
				} else {
					var _this = this.tokens;
					_this.head = new haxe_ds_GenericCell(t,_this.head);
				}
				return this.parseTypeNext(hscript_CType.CTPath(path,params));
			case 4:
				var a = this.token();
				var b = this.token();
				var _this = this.tokens;
				_this.head = new haxe_ds_GenericCell(b,_this.head);
				var _this = this.tokens;
				_this.head = new haxe_ds_GenericCell(a,_this.head);
				var withReturn = function(args) {
					var _g = _gthis.token();
					if(_g == null) {
						var t = _g;
						_gthis.unexpected(t);
					} else if(_g._hx_index == 3) {
						if(_g.s != "->") {
							var t = _g;
							_gthis.unexpected(t);
						}
					} else {
						var t = _g;
						_gthis.unexpected(t);
					}
					return hscript_CType.CTFun(args,_gthis.parseType());
				};
				if(a == null) {
					var t1 = this.parseType();
					var _g = this.token();
					if(_g == null) {
						var t2 = _g;
						return this.unexpected(t2);
					} else {
						switch(_g._hx_index) {
						case 5:
							return this.parseTypeNext(hscript_CType.CTParent(t1));
						case 9:
							var args = [t1];
							while(true) {
								args.push(this.parseType());
								if(!this.maybe(hscript_Token.TComma)) {
									break;
								}
							}
							var t1 = this.token();
							if(t1 != hscript_Token.TPClose) {
								this.unexpected(t1);
							}
							return withReturn(args);
						default:
							var t1 = _g;
							return this.unexpected(t1);
						}
					}
				} else {
					switch(a._hx_index) {
					case 2:
						var _g = a.s;
						if(b == null) {
							var t1 = this.parseType();
							var _g = this.token();
							if(_g == null) {
								var t2 = _g;
								return this.unexpected(t2);
							} else {
								switch(_g._hx_index) {
								case 5:
									return this.parseTypeNext(hscript_CType.CTParent(t1));
								case 9:
									var args = [t1];
									while(true) {
										args.push(this.parseType());
										if(!this.maybe(hscript_Token.TComma)) {
											break;
										}
									}
									var t1 = this.token();
									if(t1 != hscript_Token.TPClose) {
										this.unexpected(t1);
									}
									return withReturn(args);
								default:
									var t1 = _g;
									return this.unexpected(t1);
								}
							}
						} else if(b._hx_index == 14) {
							var _g = [];
							var _g1 = 0;
							var _g2 = this.parseFunctionArgs();
							while(_g1 < _g2.length) {
								var arg = _g2[_g1];
								++_g1;
								var _g3 = arg.value;
								if(_g3 != null) {
									var v = _g3;
									if(!this.resumeErrors) {
										throw haxe_Exception.thrown(hscript_Error.ECustom("Default values not allowed in function types"));
									}
								}
								_g.push(hscript_CType.CTNamed(arg.name,arg.opt ? hscript_CType.CTOpt(arg.t) : arg.t));
							}
							var args = _g;
							return withReturn(args);
						} else {
							var t1 = this.parseType();
							var _g = this.token();
							if(_g == null) {
								var t2 = _g;
								return this.unexpected(t2);
							} else {
								switch(_g._hx_index) {
								case 5:
									return this.parseTypeNext(hscript_CType.CTParent(t1));
								case 9:
									var args = [t1];
									while(true) {
										args.push(this.parseType());
										if(!this.maybe(hscript_Token.TComma)) {
											break;
										}
									}
									var t1 = this.token();
									if(t1 != hscript_Token.TPClose) {
										this.unexpected(t1);
									}
									return withReturn(args);
								default:
									var t1 = _g;
									return this.unexpected(t1);
								}
							}
						}
						break;
					case 5:
						var _g = [];
						var _g1 = 0;
						var _g2 = this.parseFunctionArgs();
						while(_g1 < _g2.length) {
							var arg = _g2[_g1];
							++_g1;
							var _g3 = arg.value;
							if(_g3 != null) {
								var v = _g3;
								if(!this.resumeErrors) {
									throw haxe_Exception.thrown(hscript_Error.ECustom("Default values not allowed in function types"));
								}
							}
							_g.push(hscript_CType.CTNamed(arg.name,arg.opt ? hscript_CType.CTOpt(arg.t) : arg.t));
						}
						var args = _g;
						return withReturn(args);
					default:
						var t1 = this.parseType();
						var _g = this.token();
						if(_g == null) {
							var t2 = _g;
							return this.unexpected(t2);
						} else {
							switch(_g._hx_index) {
							case 5:
								return this.parseTypeNext(hscript_CType.CTParent(t1));
							case 9:
								var args = [t1];
								while(true) {
									args.push(this.parseType());
									if(!this.maybe(hscript_Token.TComma)) {
										break;
									}
								}
								var t1 = this.token();
								if(t1 != hscript_Token.TPClose) {
									this.unexpected(t1);
								}
								return withReturn(args);
							default:
								var t1 = _g;
								return this.unexpected(t1);
							}
						}
					}
				}
				break;
			case 6:
				var fields = [];
				var meta = null;
				_hx_loop8: while(true) {
					t = this.token();
					if(t == null) {
						this.unexpected(t);
						break;
					} else {
						switch(t._hx_index) {
						case 2:
							var _g = t.s;
							if(_g == "var") {
								var name = this.getIdent();
								var t1 = this.token();
								if(t1 != hscript_Token.TDoubleDot) {
									this.unexpected(t1);
								}
								fields.push({ name : name, t : this.parseType(), meta : meta});
								meta = null;
								var t2 = this.token();
								if(t2 != hscript_Token.TSemicolon) {
									this.unexpected(t2);
								}
							} else {
								var name1 = _g;
								var t3 = this.token();
								if(t3 != hscript_Token.TDoubleDot) {
									this.unexpected(t3);
								}
								fields.push({ name : name1, t : this.parseType(), meta : meta});
								t = this.token();
								if(t == null) {
									this.unexpected(t);
								} else {
									switch(t._hx_index) {
									case 7:
										break _hx_loop8;
									case 9:
										break;
									default:
										this.unexpected(t);
									}
								}
							}
							break;
						case 7:
							break _hx_loop8;
						case 15:
							var name2 = t.s;
							if(meta == null) {
								meta = [];
							}
							meta.push({ name : name2, params : this.parseMetaArgs()});
							break;
						default:
							this.unexpected(t);
							break _hx_loop8;
						}
					}
				}
				return this.parseTypeNext(hscript_CType.CTAnon(fields));
			default:
				return this.unexpected(t);
			}
		}
	}
	,parseTypeNext: function(t) {
		var tk = this.token();
		if(tk == null) {
			var _this = this.tokens;
			_this.head = new haxe_ds_GenericCell(tk,_this.head);
			return t;
		} else if(tk._hx_index == 3) {
			var op = tk.s;
			if(op != "->") {
				var _this = this.tokens;
				_this.head = new haxe_ds_GenericCell(tk,_this.head);
				return t;
			}
		} else {
			var _this = this.tokens;
			_this.head = new haxe_ds_GenericCell(tk,_this.head);
			return t;
		}
		var t2 = this.parseType();
		if(t2._hx_index == 1) {
			var _g = t2.ret;
			var args = t2.args;
			args.unshift(t);
			return t2;
		} else {
			return hscript_CType.CTFun([t],t2);
		}
	}
	,parseExprList: function(etk) {
		var args = [];
		var tk = this.token();
		if(tk == etk) {
			return args;
		}
		var _this = this.tokens;
		_this.head = new haxe_ds_GenericCell(tk,_this.head);
		while(true) {
			args.push(this.parseExpr());
			tk = this.token();
			if(tk == null) {
				if(tk == etk) {
					break;
				}
				this.unexpected(tk);
				break;
			} else if(tk._hx_index != 9) {
				if(tk == etk) {
					break;
				}
				this.unexpected(tk);
				break;
			}
		}
		return args;
	}
	,parseModule: function(content,origin) {
		if(origin == null) {
			origin = "hscript";
		}
		this.initParser(origin);
		this.input = content;
		this.readPos = 0;
		this.allowTypes = true;
		this.allowMetadata = true;
		var decls = [];
		while(true) {
			var tk = this.token();
			if(tk == hscript_Token.TEof) {
				break;
			}
			var _this = this.tokens;
			_this.head = new haxe_ds_GenericCell(tk,_this.head);
			decls.push(this.parseModuleDecl());
		}
		return decls;
	}
	,parseMetadata: function() {
		var meta = [];
		while(true) {
			var tk = this.token();
			if(tk == null) {
				var _this = this.tokens;
				_this.head = new haxe_ds_GenericCell(tk,_this.head);
				break;
			} else if(tk._hx_index == 15) {
				var name = tk.s;
				meta.push({ name : name, params : this.parseMetaArgs()});
			} else {
				var _this1 = this.tokens;
				_this1.head = new haxe_ds_GenericCell(tk,_this1.head);
				break;
			}
		}
		return meta;
	}
	,parseParams: function() {
		if(this.maybe(hscript_Token.TOp("<"))) {
			if(!this.resumeErrors) {
				throw haxe_Exception.thrown(hscript_Error.EInvalidOp("Unsupported class type parameters"));
			}
		}
		return { };
	}
	,parseModuleDecl: function() {
		var meta = this.parseMetadata();
		var ident = this.getIdent();
		var isPrivate = false;
		var isExtern = false;
		_hx_loop1: while(true) {
			switch(ident) {
			case "extern":
				isExtern = true;
				break;
			case "private":
				isPrivate = true;
				break;
			default:
				break _hx_loop1;
			}
			ident = this.getIdent();
		}
		switch(ident) {
		case "class":
			var name = this.getIdent();
			var params = this.parseParams();
			var extend = null;
			var implement = [];
			_hx_loop2: while(true) {
				var t = this.token();
				if(t == null) {
					var _this = this.tokens;
					_this.head = new haxe_ds_GenericCell(t,_this.head);
					break;
				} else if(t._hx_index == 2) {
					switch(t.s) {
					case "extends":
						extend = this.parseType();
						break;
					case "implements":
						implement.push(this.parseType());
						break;
					default:
						var _this1 = this.tokens;
						_this1.head = new haxe_ds_GenericCell(t,_this1.head);
						break _hx_loop2;
					}
				} else {
					var _this2 = this.tokens;
					_this2.head = new haxe_ds_GenericCell(t,_this2.head);
					break;
				}
			}
			var fields = [];
			var t = this.token();
			if(t != hscript_Token.TBrOpen) {
				this.unexpected(t);
			}
			while(!this.maybe(hscript_Token.TBrClose)) fields.push(this.parseField());
			return hscript_ModuleDecl.DClass({ name : name, meta : meta, params : params, extend : extend, implement : implement, fields : fields, isPrivate : isPrivate, isExtern : isExtern});
		case "import":
			var path = [this.getIdent()];
			var star = false;
			while(true) {
				var t = this.token();
				if(t != hscript_Token.TDot) {
					var _this = this.tokens;
					_this.head = new haxe_ds_GenericCell(t,_this.head);
					break;
				}
				t = this.token();
				if(t == null) {
					this.unexpected(t);
				} else {
					switch(t._hx_index) {
					case 2:
						var id = t.s;
						path.push(id);
						break;
					case 3:
						if(t.s == "*") {
							star = true;
						} else {
							this.unexpected(t);
						}
						break;
					default:
						this.unexpected(t);
					}
				}
			}
			var t = this.token();
			if(t != hscript_Token.TSemicolon) {
				this.unexpected(t);
			}
			return hscript_ModuleDecl.DImport(path,star);
		case "package":
			var path = this.parsePath();
			var t = this.token();
			if(t != hscript_Token.TSemicolon) {
				this.unexpected(t);
			}
			return hscript_ModuleDecl.DPackage(path);
		case "typedef":
			var name = this.getIdent();
			var params = this.parseParams();
			var t = this.token();
			if(!Type.enumEq(t,hscript_Token.TOp("="))) {
				this.unexpected(t);
			}
			var t = this.parseType();
			return hscript_ModuleDecl.DTypedef({ name : name, meta : meta, params : params, isPrivate : isPrivate, t : t});
		default:
			this.unexpected(hscript_Token.TId(ident));
		}
		return null;
	}
	,parseField: function() {
		var meta = this.parseMetadata();
		var access = [];
		_hx_loop1: while(true) {
			var id = this.getIdent();
			switch(id) {
			case "function":
				var name = this.getIdent();
				var inf = this.parseFunctionDecl();
				return { name : name, meta : meta, access : access, kind : hscript_FieldKind.KFunction({ args : inf.args, expr : inf.body, ret : inf.ret})};
			case "inline":
				access.push(hscript_FieldAccess.AInline);
				break;
			case "macro":
				access.push(hscript_FieldAccess.AMacro);
				break;
			case "override":
				access.push(hscript_FieldAccess.AOverride);
				break;
			case "private":
				access.push(hscript_FieldAccess.APrivate);
				break;
			case "public":
				access.push(hscript_FieldAccess.APublic);
				break;
			case "static":
				access.push(hscript_FieldAccess.AStatic);
				break;
			case "var":
				var name1 = this.getIdent();
				var get = null;
				var set = null;
				if(this.maybe(hscript_Token.TPOpen)) {
					get = this.getIdent();
					var t = this.token();
					if(t != hscript_Token.TComma) {
						this.unexpected(t);
					}
					set = this.getIdent();
					var t1 = this.token();
					if(t1 != hscript_Token.TPClose) {
						this.unexpected(t1);
					}
				}
				var type = this.maybe(hscript_Token.TDoubleDot) ? this.parseType() : null;
				var expr = this.maybe(hscript_Token.TOp("=")) ? this.parseExpr() : null;
				if(expr != null) {
					if(this.isBlock(expr)) {
						this.maybe(hscript_Token.TSemicolon);
					} else {
						var t2 = this.token();
						if(t2 != hscript_Token.TSemicolon) {
							this.unexpected(t2);
						}
					}
				} else {
					var tmp;
					if(type != null) {
						if(type == null) {
							tmp = false;
						} else if(type._hx_index == 2) {
							var _g = type.fields;
							tmp = true;
						} else {
							tmp = false;
						}
					} else {
						tmp = false;
					}
					if(tmp) {
						this.maybe(hscript_Token.TSemicolon);
					} else {
						var t3 = this.token();
						if(t3 != hscript_Token.TSemicolon) {
							this.unexpected(t3);
						}
					}
				}
				return { name : name1, meta : meta, access : access, kind : hscript_FieldKind.KVar({ get : get, set : set, type : type, expr : expr})};
			default:
				this.unexpected(hscript_Token.TId(id));
				break _hx_loop1;
			}
		}
		return null;
	}
	,readChar: function() {
		return this.input.charCodeAt(this.readPos++);
	}
	,readString: function(until) {
		var c = 0;
		var b_b = "";
		var esc = false;
		var old = this.line;
		var s = this.input;
		while(true) {
			var c = this.input.charCodeAt(this.readPos++);
			if(c != c) {
				this.line = old;
				if(!this.resumeErrors) {
					throw haxe_Exception.thrown(hscript_Error.EUnterminatedString);
				}
				break;
			}
			if(esc) {
				esc = false;
				switch(c) {
				case 34:case 39:case 92:
					b_b += String.fromCodePoint(c);
					break;
				case 47:
					if(this.allowJSON) {
						b_b += String.fromCodePoint(c);
					} else {
						this.invalidChar(c);
					}
					break;
				case 110:
					b_b += String.fromCodePoint(10);
					break;
				case 114:
					b_b += String.fromCodePoint(13);
					break;
				case 116:
					b_b += String.fromCodePoint(9);
					break;
				case 117:
					if(!this.allowJSON) {
						this.invalidChar(c);
					}
					var k = 0;
					var _g = 0;
					while(_g < 4) {
						var i = _g++;
						k <<= 4;
						var char = this.input.charCodeAt(this.readPos++);
						switch(char) {
						case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:
							k += char - 48;
							break;
						case 65:case 66:case 67:case 68:case 69:case 70:
							k += char - 55;
							break;
						case 97:case 98:case 99:case 100:case 101:case 102:
							k += char - 87;
							break;
						default:
							if(char != char) {
								this.line = old;
								if(!this.resumeErrors) {
									throw haxe_Exception.thrown(hscript_Error.EUnterminatedString);
								}
							}
							this.invalidChar(char);
						}
					}
					b_b += String.fromCodePoint(k);
					break;
				default:
					this.invalidChar(c);
				}
			} else if(c == 92) {
				esc = true;
			} else if(c == until) {
				break;
			} else {
				if(c == 10) {
					this.line++;
				}
				b_b += String.fromCodePoint(c);
			}
		}
		return b_b;
	}
	,token: function() {
		if(this.tokens.head != null) {
			var _this = this.tokens;
			var k = _this.head;
			if(k == null) {
				return null;
			} else {
				_this.head = k.next;
				return k.elt;
			}
		}
		var char;
		if(this.char < 0) {
			char = this.input.charCodeAt(this.readPos++);
		} else {
			char = this.char;
			this.char = -1;
		}
		while(true) {
			if(char != char) {
				this.char = char;
				return hscript_Token.TEof;
			}
			switch(char) {
			case 0:
				return hscript_Token.TEof;
			case 10:
				this.line++;
				break;
			case 9:case 13:case 32:
				break;
			case 35:
				char = this.input.charCodeAt(this.readPos++);
				if(this.idents[char]) {
					var id = String.fromCodePoint(char);
					while(true) {
						char = this.input.charCodeAt(this.readPos++);
						if(!this.idents[char]) {
							this.char = char;
							return this.preprocess(id);
						}
						id += String.fromCodePoint(char);
					}
				}
				this.invalidChar(char);
				break;
			case 34:case 39:
				return hscript_Token.TConst(hscript_Const.CString(this.readString(char)));
			case 40:
				return hscript_Token.TPOpen;
			case 41:
				return hscript_Token.TPClose;
			case 44:
				return hscript_Token.TComma;
			case 46:
				char = this.input.charCodeAt(this.readPos++);
				switch(char) {
				case 46:
					char = this.input.charCodeAt(this.readPos++);
					if(char != 46) {
						this.invalidChar(char);
					}
					return hscript_Token.TOp("...");
				case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:
					var n = char - 48;
					var exp = 1;
					while(true) {
						char = this.input.charCodeAt(this.readPos++);
						exp *= 10;
						switch(char) {
						case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:
							n = n * 10 + (char - 48);
							break;
						default:
							this.char = char;
							return hscript_Token.TConst(hscript_Const.CFloat(n / exp));
						}
					}
					break;
				default:
					this.char = char;
					return hscript_Token.TDot;
				}
				break;
			case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:
				var n1 = (char - 48) * 1.0;
				var exp1 = 0.;
				while(true) {
					char = this.input.charCodeAt(this.readPos++);
					exp1 *= 10;
					switch(char) {
					case 46:
						if(exp1 > 0) {
							if(exp1 == 10 && this.input.charCodeAt(this.readPos++) == 46) {
								var _this = this.tokens;
								_this.head = new haxe_ds_GenericCell(hscript_Token.TOp("..."),_this.head);
								var i = n1 | 0;
								return hscript_Token.TConst(i == n1 ? hscript_Const.CInt(i) : hscript_Const.CFloat(n1));
							}
							this.invalidChar(char);
						}
						exp1 = 1.;
						break;
					case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:
						n1 = n1 * 10 + (char - 48);
						break;
					case 69:case 101:
						var tk = this.token();
						var pow = null;
						if(tk == null) {
							var _this1 = this.tokens;
							_this1.head = new haxe_ds_GenericCell(tk,_this1.head);
						} else {
							switch(tk._hx_index) {
							case 1:
								var _g = tk.c;
								if(_g._hx_index == 0) {
									var e = _g.v;
									pow = e;
								} else {
									var _this2 = this.tokens;
									_this2.head = new haxe_ds_GenericCell(tk,_this2.head);
								}
								break;
							case 3:
								if(tk.s == "-") {
									tk = this.token();
									if(tk == null) {
										var _this3 = this.tokens;
										_this3.head = new haxe_ds_GenericCell(tk,_this3.head);
									} else if(tk._hx_index == 1) {
										var _g1 = tk.c;
										if(_g1._hx_index == 0) {
											var e1 = _g1.v;
											pow = -e1;
										} else {
											var _this4 = this.tokens;
											_this4.head = new haxe_ds_GenericCell(tk,_this4.head);
										}
									} else {
										var _this5 = this.tokens;
										_this5.head = new haxe_ds_GenericCell(tk,_this5.head);
									}
								} else {
									var _this6 = this.tokens;
									_this6.head = new haxe_ds_GenericCell(tk,_this6.head);
								}
								break;
							default:
								var _this7 = this.tokens;
								_this7.head = new haxe_ds_GenericCell(tk,_this7.head);
							}
						}
						if(pow == null) {
							this.invalidChar(char);
						}
						return hscript_Token.TConst(hscript_Const.CFloat(Math.pow(10,pow) / exp1 * n1 * 10));
					case 120:
						if(n1 > 0 || exp1 > 0) {
							this.invalidChar(char);
						}
						var n2 = 0;
						while(true) {
							char = this.input.charCodeAt(this.readPos++);
							switch(char) {
							case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:
								n2 = (n2 << 4) + char - 48;
								break;
							case 65:case 66:case 67:case 68:case 69:case 70:
								n2 = (n2 << 4) + (char - 55);
								break;
							case 97:case 98:case 99:case 100:case 101:case 102:
								n2 = (n2 << 4) + (char - 87);
								break;
							default:
								this.char = char;
								return hscript_Token.TConst(hscript_Const.CInt(n2));
							}
						}
						break;
					default:
						this.char = char;
						var i1 = n1 | 0;
						return hscript_Token.TConst(exp1 > 0 ? hscript_Const.CFloat(n1 * 10 / exp1) : i1 == n1 ? hscript_Const.CInt(i1) : hscript_Const.CFloat(n1));
					}
				}
				break;
			case 58:
				return hscript_Token.TDoubleDot;
			case 59:
				return hscript_Token.TSemicolon;
			case 61:
				char = this.input.charCodeAt(this.readPos++);
				if(char == 61) {
					return hscript_Token.TOp("==");
				} else if(char == 62) {
					return hscript_Token.TOp("=>");
				}
				this.char = char;
				return hscript_Token.TOp("=");
			case 63:
				return hscript_Token.TQuestion;
			case 64:
				char = this.input.charCodeAt(this.readPos++);
				if(this.idents[char] || char == 58) {
					var id1 = String.fromCodePoint(char);
					while(true) {
						char = this.input.charCodeAt(this.readPos++);
						if(!this.idents[char]) {
							this.char = char;
							return hscript_Token.TMeta(id1);
						}
						id1 += String.fromCodePoint(char);
					}
				}
				this.invalidChar(char);
				break;
			case 91:
				return hscript_Token.TBkOpen;
			case 93:
				return hscript_Token.TBkClose;
			case 123:
				return hscript_Token.TBrOpen;
			case 125:
				return hscript_Token.TBrClose;
			default:
				if(this.ops[char]) {
					var op = String.fromCodePoint(char);
					var prev = -1;
					while(true) {
						char = this.input.charCodeAt(this.readPos++);
						if(char != char) {
							char = 0;
						}
						if(!this.ops[char] || prev == 61) {
							if(HxOverrides.cca(op,0) == 47) {
								return this.tokenComment(op,char);
							}
							this.char = char;
							return hscript_Token.TOp(op);
						}
						prev = char;
						op += String.fromCodePoint(char);
					}
				}
				if(this.idents[char]) {
					var id2 = String.fromCodePoint(char);
					while(true) {
						char = this.input.charCodeAt(this.readPos++);
						if(char != char) {
							char = 0;
						}
						if(!this.idents[char]) {
							this.char = char;
							return hscript_Token.TId(id2);
						}
						id2 += String.fromCodePoint(char);
					}
				}
				this.invalidChar(char);
			}
			char = this.input.charCodeAt(this.readPos++);
		}
	}
	,preprocValue: function(id) {
		return this.preprocesorValues.h[id];
	}
	,preprocStack: null
	,parsePreproCond: function() {
		var tk = this.token();
		if(tk == null) {
			return this.unexpected(tk);
		} else {
			switch(tk._hx_index) {
			case 2:
				var id = tk.s;
				return hscript_Expr.EIdent(id);
			case 3:
				if(tk.s == "!") {
					return hscript_Expr.EUnop("!",true,this.parsePreproCond());
				} else {
					return this.unexpected(tk);
				}
				break;
			case 4:
				var _this = this.tokens;
				_this.head = new haxe_ds_GenericCell(hscript_Token.TPOpen,_this.head);
				return this.parseExpr();
			default:
				return this.unexpected(tk);
			}
		}
	}
	,evalPreproCond: function(e) {
		switch(e._hx_index) {
		case 1:
			var id = e.v;
			return this.preprocValue(id) != null;
		case 3:
			var e1 = e.e;
			return this.evalPreproCond(e1);
		case 6:
			var _g = e.e2;
			var _g1 = e.e1;
			switch(e.op) {
			case "&&":
				var e2 = _g;
				var e1 = _g1;
				if(this.evalPreproCond(e1)) {
					return this.evalPreproCond(e2);
				} else {
					return false;
				}
				break;
			case "||":
				var e2 = _g;
				var e1 = _g1;
				if(!this.evalPreproCond(e1)) {
					return this.evalPreproCond(e2);
				} else {
					return true;
				}
				break;
			default:
				if(!this.resumeErrors) {
					throw haxe_Exception.thrown(hscript_Error.EInvalidPreprocessor("Can't eval " + $hxEnums[e.__enum__].__constructs__[e._hx_index]));
				}
				return false;
			}
			break;
		case 7:
			var _g = e.prefix;
			if(e.op == "!") {
				var e1 = e.e;
				return !this.evalPreproCond(e1);
			} else {
				if(!this.resumeErrors) {
					throw haxe_Exception.thrown(hscript_Error.EInvalidPreprocessor("Can't eval " + $hxEnums[e.__enum__].__constructs__[e._hx_index]));
				}
				return false;
			}
			break;
		default:
			if(!this.resumeErrors) {
				throw haxe_Exception.thrown(hscript_Error.EInvalidPreprocessor("Can't eval " + $hxEnums[e.__enum__].__constructs__[e._hx_index]));
			}
			return false;
		}
	}
	,preprocess: function(id) {
		switch(id) {
		case "else":case "elseif":
			if(this.preprocStack.length > 0) {
				if(this.preprocStack[this.preprocStack.length - 1].r) {
					this.preprocStack[this.preprocStack.length - 1].r = false;
					this.skipTokens();
					return this.token();
				} else if(id == "else") {
					this.preprocStack.pop();
					this.preprocStack.push({ r : true});
					return this.token();
				} else {
					this.preprocStack.pop();
					return this.preprocess("if");
				}
			} else {
				return hscript_Token.TPrepro(id);
			}
			break;
		case "end":
			if(this.preprocStack.length > 0) {
				this.preprocStack.pop();
				return this.token();
			} else {
				return hscript_Token.TPrepro(id);
			}
			break;
		case "if":
			var e = this.parsePreproCond();
			if(this.evalPreproCond(e)) {
				this.preprocStack.push({ r : true});
				return this.token();
			}
			this.preprocStack.push({ r : false});
			this.skipTokens();
			return this.token();
		default:
			return hscript_Token.TPrepro(id);
		}
	}
	,skipTokens: function() {
		var spos = this.preprocStack.length - 1;
		var obj = this.preprocStack[spos];
		var pos = this.readPos;
		while(true) {
			var tk = this.token();
			if(tk == hscript_Token.TEof) {
				if(!this.resumeErrors) {
					throw haxe_Exception.thrown(hscript_Error.EInvalidPreprocessor("Unclosed"));
				}
			}
			if(this.preprocStack[spos] != obj) {
				var _this = this.tokens;
				_this.head = new haxe_ds_GenericCell(tk,_this.head);
				break;
			}
		}
	}
	,tokenComment: function(op,char) {
		var c = HxOverrides.cca(op,1);
		var s = this.input;
		if(c == 47) {
			while(char != 13 && char != 10) {
				char = this.input.charCodeAt(this.readPos++);
				if(char != char) {
					break;
				}
			}
			this.char = char;
			return this.token();
		}
		if(c == 42) {
			var old = this.line;
			if(op == "/**/") {
				this.char = char;
				return this.token();
			}
			while(true) {
				while(char != 42) {
					if(char == 10) {
						this.line++;
					}
					char = this.input.charCodeAt(this.readPos++);
					if(char != char) {
						this.line = old;
						if(!this.resumeErrors) {
							throw haxe_Exception.thrown(hscript_Error.EUnterminatedComment);
						}
						break;
					}
				}
				char = this.input.charCodeAt(this.readPos++);
				if(char != char) {
					this.line = old;
					if(!this.resumeErrors) {
						throw haxe_Exception.thrown(hscript_Error.EUnterminatedComment);
					}
					break;
				}
				if(char == 47) {
					break;
				}
			}
			return this.token();
		}
		this.char = char;
		return hscript_Token.TOp(op);
	}
	,constString: function(c) {
		switch(c._hx_index) {
		case 0:
			var v = c.v;
			if(v == null) {
				return "null";
			} else {
				return "" + v;
			}
			break;
		case 1:
			var f = c.f;
			if(f == null) {
				return "null";
			} else {
				return "" + f;
			}
			break;
		case 2:
			var s = c.s;
			return s;
		}
	}
	,tokenString: function(t) {
		switch(t._hx_index) {
		case 0:
			return "<eof>";
		case 1:
			var c = t.c;
			return this.constString(c);
		case 2:
			var s = t.s;
			return s;
		case 3:
			var s = t.s;
			return s;
		case 4:
			return "(";
		case 5:
			return ")";
		case 6:
			return "{";
		case 7:
			return "}";
		case 8:
			return ".";
		case 9:
			return ",";
		case 10:
			return ";";
		case 11:
			return "[";
		case 12:
			return "]";
		case 13:
			return "?";
		case 14:
			return ":";
		case 15:
			var id = t.s;
			return "@" + id;
		case 16:
			var id = t.s;
			return "#" + id;
		}
	}
	,__class__: hscript_Parser
};
var hscript_Tools = function() { };
$hxClasses["hscript.Tools"] = hscript_Tools;
hscript_Tools.__name__ = "hscript.Tools";
hscript_Tools.iter = function(e,f) {
	switch(e._hx_index) {
	case 0:
		var _g = e.c;
		break;
	case 1:
		var _g = e.v;
		break;
	case 2:
		var _g = e.t;
		var _g = e.n;
		var e1 = e.e;
		if(e1 != null) {
			f(e1);
		}
		break;
	case 3:
		var e1 = e.e;
		f(e1);
		break;
	case 4:
		var el = e.e;
		var _g = 0;
		while(_g < el.length) {
			var e1 = el[_g];
			++_g;
			f(e1);
		}
		break;
	case 5:
		var _g = e.f;
		var e1 = e.e;
		f(e1);
		break;
	case 6:
		var _g = e.op;
		var e2 = e.e2;
		var e1 = e.e1;
		f(e1);
		f(e2);
		break;
	case 7:
		var _g = e.prefix;
		var _g = e.op;
		var e1 = e.e;
		f(e1);
		break;
	case 8:
		var args = e.params;
		var e1 = e.e;
		f(e1);
		var _g = 0;
		while(_g < args.length) {
			var a = args[_g];
			++_g;
			f(a);
		}
		break;
	case 9:
		var e2 = e.e2;
		var e1 = e.e1;
		var c = e.cond;
		f(c);
		f(e1);
		if(e2 != null) {
			f(e2);
		}
		break;
	case 10:
		var e1 = e.e;
		var c = e.cond;
		f(c);
		f(e1);
		break;
	case 11:
		var _g = e.v;
		var e1 = e.e;
		var it = e.it;
		f(it);
		f(e1);
		break;
	case 12:case 13:
		break;
	case 14:
		var _g = e.ret;
		var _g = e.name;
		var _g = e.args;
		var e1 = e.e;
		f(e1);
		break;
	case 15:
		var e1 = e.e;
		if(e1 != null) {
			f(e1);
		}
		break;
	case 16:
		var i = e.index;
		var e1 = e.e;
		f(e1);
		f(i);
		break;
	case 17:
		var el = e.e;
		var _g = 0;
		while(_g < el.length) {
			var e1 = el[_g];
			++_g;
			f(e1);
		}
		break;
	case 18:
		var _g = e.cl;
		var el = e.params;
		var _g = 0;
		while(_g < el.length) {
			var e1 = el[_g];
			++_g;
			f(e1);
		}
		break;
	case 19:
		var e1 = e.e;
		f(e1);
		break;
	case 20:
		var _g = e.t;
		var _g = e.v;
		var c = e.ecatch;
		var e1 = e.e;
		f(e1);
		f(c);
		break;
	case 21:
		var fl = e.fl;
		var _g = 0;
		while(_g < fl.length) {
			var fi = fl[_g];
			++_g;
			f(fi.e);
		}
		break;
	case 22:
		var e2 = e.e2;
		var e1 = e.e1;
		var c = e.cond;
		f(c);
		f(e1);
		f(e2);
		break;
	case 23:
		var def = e.defaultExpr;
		var cases = e.cases;
		var e1 = e.e;
		f(e1);
		var _g = 0;
		while(_g < cases.length) {
			var c = cases[_g];
			++_g;
			var _g1 = 0;
			var _g2 = c.values;
			while(_g1 < _g2.length) {
				var v = _g2[_g1];
				++_g1;
				f(v);
			}
			f(c.expr);
		}
		if(def != null) {
			f(def);
		}
		break;
	case 24:
		var e1 = e.e;
		var c = e.cond;
		f(c);
		f(e1);
		break;
	case 25:
		var e1 = e.e;
		var args = e.args;
		var name = e.name;
		if(args != null) {
			var _g = 0;
			while(_g < args.length) {
				var a = args[_g];
				++_g;
				f(a);
			}
		}
		f(e1);
		break;
	case 26:
		var _g = e.t;
		var e1 = e.e;
		f(e1);
		break;
	}
};
hscript_Tools.map = function(e,f) {
	var edef;
	switch(e._hx_index) {
	case 0:
		var _g = e.c;
		edef = e;
		break;
	case 1:
		var _g = e.v;
		edef = e;
		break;
	case 2:
		var e1 = e.e;
		var t = e.t;
		var n = e.n;
		edef = hscript_Expr.EVar(n,t,e1 != null ? f(e1) : null);
		break;
	case 3:
		var e1 = e.e;
		edef = hscript_Expr.EParent(f(e1));
		break;
	case 4:
		var el = e.e;
		var _g = [];
		var _g1 = 0;
		while(_g1 < el.length) {
			var e1 = el[_g1];
			++_g1;
			_g.push(f(e1));
		}
		edef = hscript_Expr.EBlock(_g);
		break;
	case 5:
		var fi = e.f;
		var e1 = e.e;
		edef = hscript_Expr.EField(f(e1),fi);
		break;
	case 6:
		var e2 = e.e2;
		var e1 = e.e1;
		var op = e.op;
		edef = hscript_Expr.EBinop(op,f(e1),f(e2));
		break;
	case 7:
		var e1 = e.e;
		var pre = e.prefix;
		var op = e.op;
		edef = hscript_Expr.EUnop(op,pre,f(e1));
		break;
	case 8:
		var args = e.params;
		var e1 = e.e;
		var edef1 = f(e1);
		var _g = [];
		var _g1 = 0;
		while(_g1 < args.length) {
			var a = args[_g1];
			++_g1;
			_g.push(f(a));
		}
		edef = hscript_Expr.ECall(edef1,_g);
		break;
	case 9:
		var e2 = e.e2;
		var e1 = e.e1;
		var c = e.cond;
		edef = hscript_Expr.EIf(f(c),f(e1),e2 != null ? f(e2) : null);
		break;
	case 10:
		var e1 = e.e;
		var c = e.cond;
		edef = hscript_Expr.EWhile(f(c),f(e1));
		break;
	case 11:
		var e1 = e.e;
		var it = e.it;
		var v = e.v;
		edef = hscript_Expr.EFor(v,f(it),f(e1));
		break;
	case 12:case 13:
		edef = e;
		break;
	case 14:
		var t = e.ret;
		var name = e.name;
		var e1 = e.e;
		var args = e.args;
		edef = hscript_Expr.EFunction(args,f(e1),name,t);
		break;
	case 15:
		var e1 = e.e;
		edef = hscript_Expr.EReturn(e1 != null ? f(e1) : null);
		break;
	case 16:
		var i = e.index;
		var e1 = e.e;
		edef = hscript_Expr.EArray(f(e1),f(i));
		break;
	case 17:
		var el = e.e;
		var _g = [];
		var _g1 = 0;
		while(_g1 < el.length) {
			var e1 = el[_g1];
			++_g1;
			_g.push(f(e1));
		}
		edef = hscript_Expr.EArrayDecl(_g);
		break;
	case 18:
		var el = e.params;
		var cl = e.cl;
		var _g = [];
		var _g1 = 0;
		while(_g1 < el.length) {
			var e1 = el[_g1];
			++_g1;
			_g.push(f(e1));
		}
		edef = hscript_Expr.ENew(cl,_g);
		break;
	case 19:
		var e1 = e.e;
		edef = hscript_Expr.EThrow(f(e1));
		break;
	case 20:
		var c = e.ecatch;
		var t = e.t;
		var v = e.v;
		var e1 = e.e;
		edef = hscript_Expr.ETry(f(e1),v,t,f(c));
		break;
	case 21:
		var fl = e.fl;
		var _g = [];
		var _g1 = 0;
		while(_g1 < fl.length) {
			var fi = fl[_g1];
			++_g1;
			_g.push({ name : fi.name, e : f(fi.e)});
		}
		edef = hscript_Expr.EObject(_g);
		break;
	case 22:
		var e2 = e.e2;
		var e1 = e.e1;
		var c = e.cond;
		edef = hscript_Expr.ETernary(f(c),f(e1),f(e2));
		break;
	case 23:
		var def = e.defaultExpr;
		var cases = e.cases;
		var e1 = e.e;
		var edef1 = f(e1);
		var _g = [];
		var _g1 = 0;
		while(_g1 < cases.length) {
			var c = cases[_g1];
			++_g1;
			var _g2 = [];
			var _g3 = 0;
			var _g4 = c.values;
			while(_g3 < _g4.length) {
				var v = _g4[_g3];
				++_g3;
				_g2.push(f(v));
			}
			_g.push({ values : _g2, expr : f(c.expr)});
		}
		edef = hscript_Expr.ESwitch(edef1,_g,def == null ? null : f(def));
		break;
	case 24:
		var e1 = e.e;
		var c = e.cond;
		edef = hscript_Expr.EDoWhile(f(c),f(e1));
		break;
	case 25:
		var e1 = e.e;
		var args = e.args;
		var name = e.name;
		var edef1;
		if(args == null) {
			edef1 = null;
		} else {
			var _g = [];
			var _g1 = 0;
			while(_g1 < args.length) {
				var a = args[_g1];
				++_g1;
				_g.push(f(a));
			}
			edef1 = _g;
		}
		edef = hscript_Expr.EMeta(name,edef1,f(e1));
		break;
	case 26:
		var t = e.t;
		var e1 = e.e;
		edef = hscript_Expr.ECheckType(f(e1),t);
		break;
	}
	return edef;
};
hscript_Tools.expr = function(e) {
	return e;
};
hscript_Tools.mk = function(e,p) {
	return e;
};
var js_Boot = function() { };
$hxClasses["js.Boot"] = js_Boot;
js_Boot.__name__ = "js.Boot";
js_Boot.getClass = function(o) {
	if(o == null) {
		return null;
	} else if(((o) instanceof Array)) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o.__enum__) {
			var e = $hxEnums[o.__enum__];
			var n = e.__constructs__[o._hx_index];
			var con = e[n];
			if(con.__params__) {
				s = s + "\t";
				return n + "(" + ((function($this) {
					var $r;
					var _g = [];
					{
						var _g1 = 0;
						var _g2 = con.__params__;
						while(true) {
							if(!(_g1 < _g2.length)) {
								break;
							}
							var p = _g2[_g1];
							_g1 = _g1 + 1;
							_g.push(js_Boot.__string_rec(o[p],s));
						}
					}
					$r = _g;
					return $r;
				}(this))).join(",") + ")";
			} else {
				return n;
			}
		}
		if(((o) instanceof Array)) {
			var str = "[";
			s += "\t";
			var _g = 0;
			var _g1 = o.length;
			while(_g < _g1) {
				var i = _g++;
				str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
			}
			str += "]";
			return str;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var str = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		var k = null;
		for( k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str.length != 2) {
			str += ", \n";
		}
		str += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str += "\n" + s + "}";
		return str;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g = 0;
		var _g1 = intf.length;
		while(_g < _g1) {
			var i = _g++;
			var i1 = intf[i];
			if(i1 == cl || js_Boot.__interfLoop(i1,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		return ((o) instanceof Array);
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return o != null;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return ((o | 0) === o);
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(js_Boot.__downcastCheck(o,cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(((o) instanceof cl)) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class ? o.__name__ != null : false) {
			return true;
		}
		if(cl == Enum ? o.__ename__ != null : false) {
			return true;
		}
		return o.__enum__ != null ? $hxEnums[o.__enum__] == cl : false;
	}
};
js_Boot.__downcastCheck = function(o,cl) {
	if(!((o) instanceof cl)) {
		if(cl.__isInterface__) {
			return js_Boot.__interfLoop(js_Boot.getClass(o),cl);
		} else {
			return false;
		}
	} else {
		return true;
	}
};
js_Boot.__implements = function(o,iface) {
	return js_Boot.__interfLoop(js_Boot.getClass(o),iface);
};
js_Boot.__cast = function(o,t) {
	if(o == null || js_Boot.__instanceof(o,t)) {
		return o;
	} else {
		throw haxe_Exception.thrown("Cannot cast " + Std.string(o) + " to " + Std.string(t));
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var js_Browser = function() { };
$hxClasses["js.Browser"] = js_Browser;
js_Browser.__name__ = "js.Browser";
js_Browser.getLocalStorage = function() {
	try {
		var s = window.localStorage;
		s.getItem("");
		if(s.length == 0) {
			var key = "_hx_" + Math.random();
			s.setItem(key,key);
			s.removeItem(key);
		}
		return s;
	} catch( _g ) {
		haxe_NativeStackTrace.lastError = _g;
		return null;
	}
};
var js_base_KeyboardInput = function() { };
$hxClasses["js.base.KeyboardInput"] = js_base_KeyboardInput;
js_base_KeyboardInput.__name__ = "js.base.KeyboardInput";
js_base_KeyboardInput.__isInterface__ = true;
js_base_KeyboardInput.prototype = {
	input: null
	,onKeyboardComplete: null
	,__class__: js_base_KeyboardInput
};
var js_html__$CanvasElement_CanvasUtil = function() { };
$hxClasses["js.html._CanvasElement.CanvasUtil"] = js_html__$CanvasElement_CanvasUtil;
js_html__$CanvasElement_CanvasUtil.__name__ = "js.html._CanvasElement.CanvasUtil";
js_html__$CanvasElement_CanvasUtil.getContextWebGL = function(canvas,attribs) {
	var name = "webgl";
	var ctx = canvas.getContext(name,attribs);
	if(ctx != null) {
		return ctx;
	}
	var name = "experimental-webgl";
	var ctx = canvas.getContext(name,attribs);
	if(ctx != null) {
		return ctx;
	}
	return null;
};
var js_lib__$ArrayBuffer_ArrayBufferCompat = function() { };
$hxClasses["js.lib._ArrayBuffer.ArrayBufferCompat"] = js_lib__$ArrayBuffer_ArrayBufferCompat;
js_lib__$ArrayBuffer_ArrayBufferCompat.__name__ = "js.lib._ArrayBuffer.ArrayBufferCompat";
js_lib__$ArrayBuffer_ArrayBufferCompat.sliceImpl = function(begin,end) {
	var u = new Uint8Array(this,begin,end == null ? null : end - begin);
	var resultArray = new Uint8Array(u.byteLength);
	resultArray.set(u);
	return resultArray.buffer;
};
var lime__$internal_backend_html5_GameDeviceData = function() {
	this.connected = true;
	this.buttons = [];
	this.axes = [];
};
$hxClasses["lime._internal.backend.html5.GameDeviceData"] = lime__$internal_backend_html5_GameDeviceData;
lime__$internal_backend_html5_GameDeviceData.__name__ = "lime._internal.backend.html5.GameDeviceData";
lime__$internal_backend_html5_GameDeviceData.prototype = {
	connected: null
	,id: null
	,isGamepad: null
	,buttons: null
	,axes: null
	,__class__: lime__$internal_backend_html5_GameDeviceData
};
var lime__$internal_backend_html5_HTML5AudioSource = function(parent) {
	this.parent = parent;
	this.id = -1;
	this.gain = 1;
	this.position = new lime_math_Vector4();
};
$hxClasses["lime._internal.backend.html5.HTML5AudioSource"] = lime__$internal_backend_html5_HTML5AudioSource;
lime__$internal_backend_html5_HTML5AudioSource.__name__ = "lime._internal.backend.html5.HTML5AudioSource";
lime__$internal_backend_html5_HTML5AudioSource.prototype = {
	completed: null
	,gain: null
	,id: null
	,length: null
	,loops: null
	,parent: null
	,playing: null
	,position: null
	,dispose: function() {
	}
	,init: function() {
	}
	,play: function() {
		if(this.playing || this.parent.buffer == null || this.parent.buffer.__srcHowl == null) {
			return;
		}
		this.playing = true;
		var time = this.getCurrentTime();
		this.completed = false;
		var cacheVolume = this.parent.buffer.__srcHowl._volume;
		this.parent.buffer.__srcHowl._volume = this.parent.get_gain();
		this.id = this.parent.buffer.__srcHowl.play();
		this.parent.buffer.__srcHowl._volume = cacheVolume;
		this.setPosition(this.parent.get_position());
		this.parent.buffer.__srcHowl.on("end",$bind(this,this.howl_onEnd),this.id);
		this.setCurrentTime(time);
	}
	,pause: function() {
		this.playing = false;
		if(this.parent.buffer != null && this.parent.buffer.__srcHowl != null) {
			this.parent.buffer.__srcHowl.pause(this.id);
		}
	}
	,stop: function() {
		this.playing = false;
		if(this.parent.buffer != null && this.parent.buffer.__srcHowl != null) {
			this.parent.buffer.__srcHowl.stop(this.id);
			this.parent.buffer.__srcHowl.off("end",$bind(this,this.howl_onEnd),this.id);
		}
	}
	,howl_onEnd: function() {
		this.playing = false;
		if(this.loops > 0) {
			this.loops--;
			this.stop();
			this.play();
			return;
		} else if(this.parent.buffer != null && this.parent.buffer.__srcHowl != null) {
			this.parent.buffer.__srcHowl.stop(this.id);
			this.parent.buffer.__srcHowl.off("end",$bind(this,this.howl_onEnd),this.id);
		}
		this.completed = true;
		this.parent.onComplete.dispatch();
	}
	,getCurrentTime: function() {
		if(this.id == -1) {
			return 0;
		}
		if(this.completed) {
			return this.getLength();
		} else if(this.parent.buffer != null && this.parent.buffer.__srcHowl != null) {
			var time = (this.parent.buffer.__srcHowl.seek(this.id) * 1000 | 0) - this.parent.offset;
			if(time < 0) {
				return 0;
			}
			return time;
		}
		return 0;
	}
	,setCurrentTime: function(value) {
		if(this.parent.buffer != null && this.parent.buffer.__srcHowl != null) {
			var pos = (value + this.parent.offset) / 1000;
			if(pos < 0) {
				pos = 0;
			}
			this.parent.buffer.__srcHowl.seek(pos,this.id);
		}
		return value;
	}
	,getGain: function() {
		return this.gain;
	}
	,setGain: function(value) {
		if(this.parent.buffer != null && this.parent.buffer.__srcHowl != null && this.id != -1) {
			this.parent.buffer.__srcHowl.volume(value,this.id);
		}
		return this.gain = value;
	}
	,getLength: function() {
		if(this.length != 0) {
			return this.length;
		}
		if(this.parent.buffer != null && this.parent.buffer.__srcHowl != null) {
			return this.parent.buffer.__srcHowl.duration() * 1000 | 0;
		}
		return 0;
	}
	,setLength: function(value) {
		return this.length = value;
	}
	,getLoops: function() {
		return this.loops;
	}
	,setLoops: function(value) {
		return this.loops = value;
	}
	,getPosition: function() {
		return this.position;
	}
	,setPosition: function(value) {
		this.position.x = value.x;
		this.position.y = value.y;
		this.position.z = value.z;
		this.position.w = value.w;
		if(this.parent.buffer.__srcHowl != null && this.parent.buffer.__srcHowl.pos != null) {
			this.parent.buffer.__srcHowl.pos(this.position.x,this.position.y,this.position.z,this.id);
		}
		return this.position;
	}
	,__class__: lime__$internal_backend_html5_HTML5AudioSource
};
var lime__$internal_backend_html5_HTML5HTTPRequest = function() {
	this.validStatus0 = new EReg("Tizen","gi").match(window.navigator.userAgent);
};
$hxClasses["lime._internal.backend.html5.HTML5HTTPRequest"] = lime__$internal_backend_html5_HTML5HTTPRequest;
lime__$internal_backend_html5_HTML5HTTPRequest.__name__ = "lime._internal.backend.html5.HTML5HTTPRequest";
lime__$internal_backend_html5_HTML5HTTPRequest.loadImage = function(uri) {
	var promise = new lime_app_Promise();
	if(lime__$internal_backend_html5_HTML5HTTPRequest.activeRequests < lime__$internal_backend_html5_HTML5HTTPRequest.requestLimit) {
		lime__$internal_backend_html5_HTML5HTTPRequest.activeRequests++;
		lime__$internal_backend_html5_HTML5HTTPRequest.__loadImage(uri,promise,0);
	} else {
		lime__$internal_backend_html5_HTML5HTTPRequest.requestQueue.add({ instance : null, uri : uri, promise : promise, type : "IMAGE", options : 0});
	}
	return promise.future;
};
lime__$internal_backend_html5_HTML5HTTPRequest.loadImageFromBytes = function(bytes,type) {
	var uri = URL.createObjectURL(new Blob([bytes.b.bufferValue],{ type : type}));
	if(uri != null) {
		var promise = new lime_app_Promise();
		if(lime__$internal_backend_html5_HTML5HTTPRequest.activeRequests < lime__$internal_backend_html5_HTML5HTTPRequest.requestLimit) {
			lime__$internal_backend_html5_HTML5HTTPRequest.activeRequests++;
			lime__$internal_backend_html5_HTML5HTTPRequest.__loadImage(uri,promise,1);
		} else {
			lime__$internal_backend_html5_HTML5HTTPRequest.requestQueue.add({ instance : null, uri : uri, promise : promise, type : "IMAGE", options : 1});
		}
		return promise.future;
	} else {
		return lime__$internal_backend_html5_HTML5HTTPRequest.loadImage("data:" + type + ";base64," + lime__$internal_format_Base64.encode(bytes));
	}
};
lime__$internal_backend_html5_HTML5HTTPRequest.processQueue = function() {
	if(lime__$internal_backend_html5_HTML5HTTPRequest.activeRequests < lime__$internal_backend_html5_HTML5HTTPRequest.requestLimit && lime__$internal_backend_html5_HTML5HTTPRequest.requestQueue.length > 0) {
		lime__$internal_backend_html5_HTML5HTTPRequest.activeRequests++;
		var queueItem = lime__$internal_backend_html5_HTML5HTTPRequest.requestQueue.pop();
		switch(queueItem.type) {
		case "BINARY":
			queueItem.instance.__loadData(queueItem.uri,queueItem.promise);
			break;
		case "IMAGE":
			lime__$internal_backend_html5_HTML5HTTPRequest.__loadImage(queueItem.uri,queueItem.promise,queueItem.options);
			break;
		case "TEXT":
			queueItem.instance.__loadText(queueItem.uri,queueItem.promise);
			break;
		default:
			lime__$internal_backend_html5_HTML5HTTPRequest.activeRequests--;
		}
	}
};
lime__$internal_backend_html5_HTML5HTTPRequest.__createBlobURIFromBytes = function(bytes,type) {
	return URL.createObjectURL(new Blob([bytes.b.bufferValue],{ type : type}));
};
lime__$internal_backend_html5_HTML5HTTPRequest.__fixHostname = function(hostname) {
	if(hostname == null) {
		return "";
	} else {
		return hostname;
	}
};
lime__$internal_backend_html5_HTML5HTTPRequest.__fixPort = function(port,protocol) {
	if(port == null || port == "") {
		switch(protocol) {
		case "ftp:":
			return "21";
		case "gopher:":
			return "70";
		case "http:":
			return "80";
		case "https:":
			return "443";
		case "ws:":
			return "80";
		case "wss:":
			return "443";
		default:
			return "";
		}
	}
	return port;
};
lime__$internal_backend_html5_HTML5HTTPRequest.__fixProtocol = function(protocol) {
	if(protocol == null || protocol == "") {
		return "http:";
	} else {
		return protocol;
	}
};
lime__$internal_backend_html5_HTML5HTTPRequest.__isInMemoryURI = function(uri) {
	if(!StringTools.startsWith(uri,"data:")) {
		return StringTools.startsWith(uri,"blob:");
	} else {
		return true;
	}
};
lime__$internal_backend_html5_HTML5HTTPRequest.__isSameOrigin = function(path) {
	if(path == null || path == "") {
		return true;
	}
	if(lime__$internal_backend_html5_HTML5HTTPRequest.__isInMemoryURI(path)) {
		return true;
	}
	if(lime__$internal_backend_html5_HTML5HTTPRequest.originElement == null) {
		lime__$internal_backend_html5_HTML5HTTPRequest.originElement = window.document.createElement("a");
		lime__$internal_backend_html5_HTML5HTTPRequest.originHostname = lime__$internal_backend_html5_HTML5HTTPRequest.__fixHostname($global.location.hostname);
		lime__$internal_backend_html5_HTML5HTTPRequest.originProtocol = lime__$internal_backend_html5_HTML5HTTPRequest.__fixProtocol($global.location.protocol);
		lime__$internal_backend_html5_HTML5HTTPRequest.originPort = lime__$internal_backend_html5_HTML5HTTPRequest.__fixPort($global.location.port,lime__$internal_backend_html5_HTML5HTTPRequest.originProtocol);
	}
	var a = lime__$internal_backend_html5_HTML5HTTPRequest.originElement;
	a.href = path;
	if(a.hostname == "") {
		a.href = a.href;
	}
	var hostname = lime__$internal_backend_html5_HTML5HTTPRequest.__fixHostname(a.hostname);
	var protocol = lime__$internal_backend_html5_HTML5HTTPRequest.__fixProtocol(a.protocol);
	var port = lime__$internal_backend_html5_HTML5HTTPRequest.__fixPort(a.port,protocol);
	var sameHost = hostname == "" || hostname == lime__$internal_backend_html5_HTML5HTTPRequest.originHostname;
	var samePort = port == "" || port == lime__$internal_backend_html5_HTML5HTTPRequest.originPort;
	if(protocol != "file:" && sameHost) {
		return samePort;
	} else {
		return false;
	}
};
lime__$internal_backend_html5_HTML5HTTPRequest.__loadImage = function(uri,promise,options) {
	var image = new Image();
	if(!lime__$internal_backend_html5_HTML5HTTPRequest.__isSameOrigin(uri)) {
		image.crossOrigin = "Anonymous";
	}
	if(lime__$internal_backend_html5_HTML5HTTPRequest.supportsImageProgress == null) {
		lime__$internal_backend_html5_HTML5HTTPRequest.supportsImageProgress = 'onprogress' in image;
	}
	if(lime__$internal_backend_html5_HTML5HTTPRequest.supportsImageProgress || lime__$internal_backend_html5_HTML5HTTPRequest.__isInMemoryURI(uri)) {
		image.addEventListener("load",function(event) {
			lime__$internal_backend_html5_HTML5HTTPRequest.__revokeBlobURI(uri,options);
			var buffer = new lime_graphics_ImageBuffer(null,image.width,image.height);
			buffer.__srcImage = image;
			lime__$internal_backend_html5_HTML5HTTPRequest.activeRequests--;
			lime__$internal_backend_html5_HTML5HTTPRequest.processQueue();
			promise.complete(new lime_graphics_Image(buffer));
		},false);
		image.addEventListener("progress",function(event) {
			promise.progress(event.loaded,event.total);
		},false);
		image.addEventListener("error",function(event) {
			lime__$internal_backend_html5_HTML5HTTPRequest.__revokeBlobURI(uri,options);
			lime__$internal_backend_html5_HTML5HTTPRequest.activeRequests--;
			lime__$internal_backend_html5_HTML5HTTPRequest.processQueue();
			promise.error(event.detail);
		},false);
		image.src = uri;
	} else {
		var request = new XMLHttpRequest();
		request.onload = function(_) {
			lime__$internal_backend_html5_HTML5HTTPRequest.activeRequests--;
			lime__$internal_backend_html5_HTML5HTTPRequest.processQueue();
			var img = new lime_graphics_Image();
			img.__fromBytes(haxe_io_Bytes.ofData(request.response),function(img) {
				promise.complete(img);
			});
		};
		request.onerror = function(event) {
			promise.error(event.message);
		};
		request.onprogress = function(event) {
			if(event.lengthComputable) {
				promise.progress(event.loaded,event.total);
			}
		};
		request.open("GET",uri,true);
		request.responseType = "arraybuffer";
		request.overrideMimeType("text/plain; charset=x-user-defined");
		request.send(null);
	}
};
lime__$internal_backend_html5_HTML5HTTPRequest.__revokeBlobURI = function(uri,options) {
	if((options & 1) != 0) {
		URL.revokeObjectURL(uri);
	}
};
lime__$internal_backend_html5_HTML5HTTPRequest.prototype = {
	binary: null
	,parent: null
	,request: null
	,validStatus0: null
	,cancel: function() {
		if(this.request != null) {
			this.request.abort();
		}
	}
	,init: function(parent) {
		this.parent = parent;
	}
	,load: function(uri,progress,readyStateChange) {
		this.request = new XMLHttpRequest();
		if(this.parent.method == "POST" && this.request.upload != null) {
			this.request.upload.addEventListener("progress",progress,false);
		} else {
			this.request.addEventListener("progress",progress,false);
		}
		this.request.onreadystatechange = readyStateChange;
		var query = "";
		if(this.parent.data == null) {
			var key = haxe_ds_StringMap.keysIterator(this.parent.formData.h);
			while(key.hasNext()) {
				var key1 = key.next();
				if(query.length > 0) {
					query += "&";
				}
				var value = this.parent.formData.h[key1];
				if(key1.indexOf("[]") > -1 && ((value) instanceof Array)) {
					var _g = [];
					var x = $getIterator(value);
					while(x.hasNext()) {
						var x1 = x.next();
						_g.push(encodeURIComponent(x1));
					}
					var arrayValue = _g.join("&amp;" + key1 + "=");
					query += encodeURIComponent(key1) + "=" + arrayValue;
				} else {
					var query1 = encodeURIComponent(key1) + "=";
					var s = Std.string(value);
					query += query1 + encodeURIComponent(s);
				}
			}
			if(this.parent.method == "GET" && query != "") {
				if(uri.indexOf("?") > -1) {
					uri += "&" + query;
				} else {
					uri += "?" + query;
				}
				query = "";
			}
		}
		this.request.open(Std.string(this.parent.method),uri,true);
		if(this.parent.timeout > 0) {
			this.request.timeout = this.parent.timeout;
		}
		if(this.binary) {
			this.request.responseType = "arraybuffer";
		}
		var contentType = null;
		var _g = 0;
		var _g1 = this.parent.headers;
		while(_g < _g1.length) {
			var header = _g1[_g];
			++_g;
			if(header.name == "Content-Type") {
				contentType = header.value;
			} else {
				this.request.setRequestHeader(header.name,header.value);
			}
		}
		if(this.parent.contentType != null) {
			contentType = this.parent.contentType;
		}
		if(contentType == null) {
			if(this.parent.data != null) {
				contentType = "application/octet-stream";
			} else if(query != "") {
				contentType = "application/x-www-form-urlencoded";
			}
		}
		if(contentType != null) {
			this.request.setRequestHeader("Content-Type",contentType);
		}
		if(this.parent.withCredentials) {
			this.request.withCredentials = true;
		}
		if(this.parent.data != null) {
			this.request.send(this.parent.data.b.bufferValue);
		} else {
			this.request.send(query);
		}
	}
	,loadData: function(uri) {
		var promise = new lime_app_Promise();
		if(lime__$internal_backend_html5_HTML5HTTPRequest.activeRequests < lime__$internal_backend_html5_HTML5HTTPRequest.requestLimit) {
			lime__$internal_backend_html5_HTML5HTTPRequest.activeRequests++;
			this.__loadData(uri,promise);
		} else {
			lime__$internal_backend_html5_HTML5HTTPRequest.requestQueue.add({ instance : this, uri : uri, promise : promise, type : "BINARY", options : 0});
		}
		return promise.future;
	}
	,loadText: function(uri) {
		var promise = new lime_app_Promise();
		if(lime__$internal_backend_html5_HTML5HTTPRequest.activeRequests < lime__$internal_backend_html5_HTML5HTTPRequest.requestLimit) {
			lime__$internal_backend_html5_HTML5HTTPRequest.activeRequests++;
			this.__loadText(uri,promise);
		} else {
			lime__$internal_backend_html5_HTML5HTTPRequest.requestQueue.add({ instance : this, uri : uri, promise : promise, type : "TEXT", options : 0});
		}
		return promise.future;
	}
	,processResponse: function() {
		if(this.parent.enableResponseHeaders) {
			this.parent.responseHeaders = [];
			var name;
			var value;
			var _g = 0;
			var _g1 = this.request.getAllResponseHeaders().split("\n");
			while(_g < _g1.length) {
				var line = _g1[_g];
				++_g;
				name = StringTools.trim(HxOverrides.substr(line,0,line.indexOf(":")));
				value = StringTools.trim(HxOverrides.substr(line,line.indexOf(":") + 1,null));
				if(name != "") {
					this.parent.responseHeaders.push(new lime_net_HTTPRequestHeader(name,value));
				}
			}
		}
		this.parent.responseStatus = this.request.status;
	}
	,__loadData: function(uri,promise) {
		var _gthis = this;
		var progress = function(event) {
			promise.progress(event.loaded,event.total);
		};
		var readyStateChange = function(event) {
			if(_gthis.request == null || _gthis.request.readyState != 4) {
				return;
			}
			if(_gthis.request.status != null && (_gthis.request.status >= 200 && _gthis.request.status < 400 || _gthis.validStatus0 && _gthis.request.status == 0)) {
				var bytes = null;
				if(_gthis.request.responseType == "") {
					if(_gthis.request.responseText != null) {
						bytes = haxe_io_Bytes.ofString(_gthis.request.responseText);
					}
				} else if(_gthis.request.response != null) {
					bytes = haxe_io_Bytes.ofData(_gthis.request.response);
				}
				_gthis.processResponse();
				promise.complete(bytes);
			} else {
				_gthis.processResponse();
				promise.error(_gthis.request.status);
			}
			_gthis.request = null;
			lime__$internal_backend_html5_HTML5HTTPRequest.activeRequests--;
			lime__$internal_backend_html5_HTML5HTTPRequest.processQueue();
		};
		this.binary = true;
		this.load(uri,progress,readyStateChange);
	}
	,__loadText: function(uri,promise) {
		var _gthis = this;
		var progress = function(event) {
			promise.progress(event.loaded,event.total);
		};
		var readyStateChange = function(event) {
			if(_gthis.request == null || _gthis.request.readyState != 4) {
				return;
			}
			if(_gthis.request.status != null && (_gthis.request.status >= 200 && _gthis.request.status <= 400 || _gthis.validStatus0 && _gthis.request.status == 0)) {
				_gthis.processResponse();
				promise.complete(_gthis.request.responseText);
			} else {
				_gthis.processResponse();
				promise.error(_gthis.request.status);
			}
			_gthis.request = null;
			lime__$internal_backend_html5_HTML5HTTPRequest.activeRequests--;
			lime__$internal_backend_html5_HTML5HTTPRequest.processQueue();
		};
		this.binary = false;
		this.load(uri,progress,readyStateChange);
	}
	,__class__: lime__$internal_backend_html5_HTML5HTTPRequest
};
var lime__$internal_backend_html5_HTML5Window = function(parent) {
	this.unusedTouchesPool = new haxe_ds_List();
	this.scale = 1.0;
	this.currentTouches = new haxe_ds_IntMap();
	this.parent = parent;
	this.cursor = lime_ui_MouseCursor.DEFAULT;
	this.cacheMouseX = 0;
	this.cacheMouseY = 0;
	var attributes = parent.__attributes;
	if(!Object.prototype.hasOwnProperty.call(attributes,"context")) {
		attributes.context = { };
	}
	this.renderType = attributes.context.type;
	if(Object.prototype.hasOwnProperty.call(attributes,"element")) {
		parent.element = attributes.element;
	}
	var element = parent.element;
	if(Object.prototype.hasOwnProperty.call(attributes,"allowHighDPI") && attributes.allowHighDPI && this.renderType != "dom") {
		this.scale = window.devicePixelRatio;
	}
	parent.__scale = this.scale;
	this.setWidth = Object.prototype.hasOwnProperty.call(attributes,"width") ? attributes.width : 0;
	this.setHeight = Object.prototype.hasOwnProperty.call(attributes,"height") ? attributes.height : 0;
	parent.__width = this.setWidth;
	parent.__height = this.setHeight;
	parent.id = lime__$internal_backend_html5_HTML5Window.windowID++;
	if(((element) instanceof HTMLCanvasElement)) {
		this.canvas = element;
	} else if(this.renderType == "dom") {
		this.div = window.document.createElement("div");
	} else {
		this.canvas = window.document.createElement("canvas");
	}
	if(this.canvas != null) {
		var style = this.canvas.style;
		style.setProperty("-webkit-transform","translateZ(0)",null);
		style.setProperty("transform","translateZ(0)",null);
	} else if(this.div != null) {
		var style = this.div.style;
		style.setProperty("-webkit-transform","translate3D(0,0,0)",null);
		style.setProperty("transform","translate3D(0,0,0)",null);
		style.position = "relative";
		style.overflow = "hidden";
		style.setProperty("-webkit-user-select","none",null);
		style.setProperty("-moz-user-select","none",null);
		style.setProperty("-ms-user-select","none",null);
		style.setProperty("-o-user-select","none",null);
	}
	if(parent.__width == 0 && parent.__height == 0) {
		if(element != null) {
			parent.__width = element.clientWidth;
			parent.__height = element.clientHeight;
		} else {
			parent.__width = window.innerWidth;
			parent.__height = window.innerHeight;
		}
		this.cacheElementWidth = parent.__width;
		this.cacheElementHeight = parent.__height;
		this.resizeElement = true;
	}
	if(this.canvas != null) {
		this.canvas.width = Math.round(parent.__width * this.scale);
		this.canvas.height = Math.round(parent.__height * this.scale);
		this.canvas.style.width = parent.__width + "px";
		this.canvas.style.height = parent.__height + "px";
	} else {
		this.div.style.width = parent.__width + "px";
		this.div.style.height = parent.__height + "px";
	}
	if(Object.prototype.hasOwnProperty.call(attributes,"resizable") && attributes.resizable || !Object.prototype.hasOwnProperty.call(attributes,"width") && this.setWidth == 0 && this.setHeight == 0) {
		parent.__resizable = true;
	}
	this.updateSize();
	if(element != null) {
		if(this.canvas != null) {
			if(element != this.canvas) {
				element.appendChild(this.canvas);
			}
		} else {
			element.appendChild(this.div);
		}
		var events = ["mousedown","mouseenter","mouseleave","mousemove","mouseup","wheel"];
		var _g = 0;
		while(_g < events.length) {
			var event = events[_g];
			++_g;
			element.addEventListener(event,$bind(this,this.handleMouseEvent),true);
		}
		element.addEventListener("contextmenu",$bind(this,this.handleContextMenuEvent),true);
		element.addEventListener("dragstart",$bind(this,this.handleDragEvent),true);
		element.addEventListener("dragover",$bind(this,this.handleDragEvent),true);
		element.addEventListener("drop",$bind(this,this.handleDragEvent),true);
		element.addEventListener("touchstart",$bind(this,this.handleTouchEvent),true);
		element.addEventListener("touchmove",$bind(this,this.handleTouchEvent),true);
		element.addEventListener("touchend",$bind(this,this.handleTouchEvent),true);
		element.addEventListener("touchcancel",$bind(this,this.handleTouchEvent),true);
		element.addEventListener("gamepadconnected",$bind(this,this.handleGamepadEvent),true);
		element.addEventListener("gamepaddisconnected",$bind(this,this.handleGamepadEvent),true);
	}
	this.createContext();
	if(parent.context.type == "webgl") {
		this.canvas.addEventListener("webglcontextlost",$bind(this,this.handleContextEvent),false);
		this.canvas.addEventListener("webglcontextrestored",$bind(this,this.handleContextEvent),false);
	}
};
$hxClasses["lime._internal.backend.html5.HTML5Window"] = lime__$internal_backend_html5_HTML5Window;
lime__$internal_backend_html5_HTML5Window.__name__ = "lime._internal.backend.html5.HTML5Window";
lime__$internal_backend_html5_HTML5Window.prototype = {
	canvas: null
	,div: null
	,cacheElementHeight: null
	,cacheElementWidth: null
	,cacheMouseX: null
	,cacheMouseY: null
	,cursor: null
	,currentTouches: null
	,isFullscreen: null
	,parent: null
	,primaryTouch: null
	,renderType: null
	,requestedFullscreen: null
	,resizeElement: null
	,scale: null
	,setHeight: null
	,setWidth: null
	,textInputEnabled: null
	,unusedTouchesPool: null
	,alert: function(message,title) {
		if(message != null) {
			window.alert(Std.string(message));
		}
	}
	,close: function() {
		this.parent.application.__removeWindow(this.parent);
	}
	,createContext: function() {
		var context = new lime_graphics_RenderContext();
		var contextAttributes = this.parent.__attributes.context;
		context.window = this.parent;
		context.attributes = contextAttributes;
		if(this.div != null) {
			context.dom = this.div;
			context.type = "dom";
			context.version = "";
		} else if(this.canvas != null) {
			var webgl = null;
			var forceCanvas = this.renderType == "canvas";
			var forceWebGL = this.renderType == "opengl" || this.renderType == "opengles" || this.renderType == "webgl";
			var allowWebGL2 = !Object.prototype.hasOwnProperty.call(contextAttributes,"version") || contextAttributes.version != "1";
			var isWebGL2 = false;
			if(forceWebGL || !forceCanvas && (!Object.prototype.hasOwnProperty.call(contextAttributes,"hardware") || contextAttributes.hardware)) {
				var transparentBackground = Object.prototype.hasOwnProperty.call(contextAttributes,"background") && contextAttributes.background == null;
				var colorDepth = Object.prototype.hasOwnProperty.call(contextAttributes,"colorDepth") ? contextAttributes.colorDepth : 16;
				var options = Object.prototype.hasOwnProperty.call(contextAttributes,"antialiasing") && contextAttributes.antialiasing > 0;
				var options1 = Object.prototype.hasOwnProperty.call(contextAttributes,"depth") ? contextAttributes.depth : true;
				var options2 = Object.prototype.hasOwnProperty.call(contextAttributes,"stencil") && contextAttributes.stencil;
				var options3 = { alpha : transparentBackground || colorDepth > 16, antialias : options, depth : options1, premultipliedAlpha : true, stencil : options2, preserveDrawingBuffer : false, failIfMajorPerformanceCaveat : true};
				var glContextType = ["webgl","experimental-webgl"];
				if(allowWebGL2) {
					glContextType.unshift("webgl2");
				}
				var _g = 0;
				while(_g < glContextType.length) {
					var name = glContextType[_g];
					++_g;
					webgl = this.canvas.getContext(name,options3);
					if(webgl != null && name == "webgl2") {
						isWebGL2 = true;
					}
					if(webgl != null) {
						break;
					}
				}
			}
			if(webgl == null) {
				context.canvas2D = this.canvas.getContext("2d");
				context.type = "canvas";
				context.version = "";
			} else {
				context.webgl = lime_graphics_WebGLRenderContext.fromWebGL2RenderContext(webgl);
				if(isWebGL2) {
					context.webgl2 = webgl;
				}
				if(lime_graphics_opengl_GL.context == null) {
					lime_graphics_opengl_GL.context = webgl;
					lime_graphics_opengl_GL.type = "webgl";
					lime_graphics_opengl_GL.version = isWebGL2 ? 2 : 1;
				}
				context.type = "webgl";
				context.version = isWebGL2 ? "2" : "1";
			}
		}
		this.parent.context = context;
	}
	,focus: function() {
	}
	,getCursor: function() {
		return this.cursor;
	}
	,getDisplay: function() {
		return lime_system_System.getDisplay(0);
	}
	,getDisplayMode: function() {
		return lime_system_System.getDisplay(0).currentMode;
	}
	,getFrameRate: function() {
		if(this.parent.application == null) {
			return 0;
		}
		if(this.parent.application.__backend.framePeriod < 0) {
			return 60;
		} else if(this.parent.application.__backend.framePeriod == 1000) {
			return 0;
		} else {
			return 1000 / this.parent.application.__backend.framePeriod;
		}
	}
	,getMouseLock: function() {
		return false;
	}
	,getTextInputEnabled: function() {
		return this.textInputEnabled;
	}
	,handleContextEvent: function(event) {
		switch(event.type) {
		case "webglcontextlost":
			if(event.cancelable) {
				event.preventDefault();
			}
			var tmp = lime_graphics_opengl_GL.context != null;
			this.parent.context = null;
			this.parent.onRenderContextLost.dispatch();
			break;
		case "webglcontextrestored":
			this.createContext();
			this.parent.onRenderContextRestored.dispatch(this.parent.context);
			break;
		default:
		}
	}
	,handleContextMenuEvent: function(event) {
		if((this.parent.onMouseUp.canceled || this.parent.onMouseDown.canceled) && event.cancelable) {
			event.preventDefault();
		}
	}
	,handleCutOrCopyEvent: function(event) {
		event.clipboardData.setData("text/plain",lime_system_Clipboard.get_text());
		if(event.cancelable) {
			event.preventDefault();
		}
	}
	,handleDragEvent: function(event) {
		switch(event.type) {
		case "dragover":
			event.preventDefault();
			return false;
		case "dragstart":
			if((js_Boot.__cast(event.target , HTMLElement)).nodeName.toLowerCase() == "img" && event.cancelable) {
				event.preventDefault();
				return false;
			}
			break;
		case "drop":
			if(event.dataTransfer != null && event.dataTransfer.files.length > 0) {
				this.parent.onDropFile.dispatch(event.dataTransfer.files);
				event.preventDefault();
				return false;
			}
			break;
		}
		return true;
	}
	,handleFocusEvent: function(event) {
		var _gthis = this;
		if(this.textInputEnabled) {
			if(event.relatedTarget == null || this.isDescendent(event.relatedTarget)) {
				haxe_Timer.delay(function() {
					if(_gthis.textInputEnabled) {
						lime__$internal_backend_html5_HTML5Window.textInput.focus();
					}
				},20);
			}
		}
	}
	,handleFullscreenEvent: function(event) {
		var fullscreenElement = document.fullscreenElement || document.mozFullScreenElement || document.webkitFullscreenElement || document.msFullscreenElement;
		if(fullscreenElement != null) {
			this.isFullscreen = true;
			this.parent.__fullscreen = true;
			if(this.requestedFullscreen) {
				this.requestedFullscreen = false;
				this.parent.onFullscreen.dispatch();
			}
		} else {
			this.isFullscreen = false;
			this.parent.__fullscreen = false;
			this.parent.onRestore.dispatch();
			var changeEvents = ["fullscreenchange","mozfullscreenchange","webkitfullscreenchange","MSFullscreenChange"];
			var errorEvents = ["fullscreenerror","mozfullscreenerror","webkitfullscreenerror","MSFullscreenError"];
			var _g = 0;
			var _g1 = changeEvents.length;
			while(_g < _g1) {
				var i = _g++;
				window.document.removeEventListener(changeEvents[i],$bind(this,this.handleFullscreenEvent),false);
				window.document.removeEventListener(errorEvents[i],$bind(this,this.handleFullscreenEvent),false);
			}
		}
	}
	,handleGamepadEvent: function(event) {
		switch(event.type) {
		case "gamepadconnected":
			lime_ui_Joystick.__connect(event.gamepad.index);
			if(event.gamepad.mapping == "standard") {
				lime_ui_Gamepad.__connect(event.gamepad.index);
			}
			break;
		case "gamepaddisconnected":
			lime_ui_Joystick.__disconnect(event.gamepad.index);
			lime_ui_Gamepad.__disconnect(event.gamepad.index);
			break;
		default:
		}
	}
	,handleInputEvent: function(event) {
		if(lime__$internal_backend_html5_HTML5Window.textInput.value != lime__$internal_backend_html5_HTML5Window.dummyCharacter) {
			var value = StringTools.replace(lime__$internal_backend_html5_HTML5Window.textInput.value,lime__$internal_backend_html5_HTML5Window.dummyCharacter,"");
			if(value.length > 0) {
				this.parent.onTextInput.dispatch(value);
			}
			lime__$internal_backend_html5_HTML5Window.textInput.value = lime__$internal_backend_html5_HTML5Window.dummyCharacter;
		}
	}
	,handleMouseEvent: function(event) {
		var x = 0.0;
		var y = 0.0;
		if(event.type != "wheel") {
			if(this.parent.element != null) {
				if(this.canvas != null) {
					var rect = this.canvas.getBoundingClientRect();
					x = (event.clientX - rect.left) * (this.parent.__width / rect.width);
					y = (event.clientY - rect.top) * (this.parent.__height / rect.height);
				} else if(this.div != null) {
					var rect = this.div.getBoundingClientRect();
					x = event.clientX - rect.left;
					y = event.clientY - rect.top;
				} else {
					var rect = this.parent.element.getBoundingClientRect();
					x = (event.clientX - rect.left) * (this.parent.__width / rect.width);
					y = (event.clientY - rect.top) * (this.parent.__height / rect.height);
				}
			} else {
				x = event.clientX;
				y = event.clientY;
			}
			switch(event.type) {
			case "mousedown":
				if(event.currentTarget == this.parent.element) {
					window.addEventListener("mouseup",$bind(this,this.handleMouseEvent));
				}
				this.parent.onMouseDown.dispatch(x,y,event.button);
				if(this.parent.onMouseDown.canceled && event.cancelable) {
					event.preventDefault();
				}
				break;
			case "mouseenter":
				if(event.target == this.parent.element) {
					this.parent.onEnter.dispatch();
					if(this.parent.onEnter.canceled && event.cancelable) {
						event.preventDefault();
					}
				}
				break;
			case "mouseleave":
				if(event.target == this.parent.element) {
					this.parent.onLeave.dispatch();
					if(this.parent.onLeave.canceled && event.cancelable) {
						event.preventDefault();
					}
				}
				break;
			case "mousemove":
				if(x != this.cacheMouseX || y != this.cacheMouseY) {
					this.parent.onMouseMove.dispatch(x,y);
					this.parent.onMouseMoveRelative.dispatch(x - this.cacheMouseX,y - this.cacheMouseY);
					if((this.parent.onMouseMove.canceled || this.parent.onMouseMoveRelative.canceled) && event.cancelable) {
						event.preventDefault();
					}
				}
				break;
			case "mouseup":
				window.removeEventListener("mouseup",$bind(this,this.handleMouseEvent));
				if(event.currentTarget == this.parent.element) {
					event.stopPropagation();
				}
				this.parent.onMouseUp.dispatch(x,y,event.button);
				if(this.parent.onMouseUp.canceled && event.cancelable) {
					event.preventDefault();
				}
				break;
			default:
			}
			this.cacheMouseX = x;
			this.cacheMouseY = y;
		} else {
			var deltaMode;
			switch(event.deltaMode) {
			case 0:
				deltaMode = lime_ui_MouseWheelMode.PIXELS;
				break;
			case 1:
				deltaMode = lime_ui_MouseWheelMode.LINES;
				break;
			case 2:
				deltaMode = lime_ui_MouseWheelMode.PAGES;
				break;
			default:
				deltaMode = lime_ui_MouseWheelMode.UNKNOWN;
			}
			this.parent.onMouseWheel.dispatch(event.deltaX,-event.deltaY,deltaMode);
			if(this.parent.onMouseWheel.canceled && event.cancelable) {
				event.preventDefault();
			}
		}
	}
	,handlePasteEvent: function(event) {
		if(event.clipboardData.types.indexOf("text/plain") > -1) {
			var text = event.clipboardData.getData("text/plain");
			lime_system_Clipboard.set_text(text);
			if(this.textInputEnabled) {
				this.parent.onTextInput.dispatch(text);
			}
			if(event.cancelable) {
				event.preventDefault();
			}
		}
	}
	,handleResizeEvent: function(event) {
		this.primaryTouch = null;
		this.updateSize();
	}
	,handleTouchEvent: function(event) {
		if(event.cancelable) {
			event.preventDefault();
		}
		var rect = null;
		if(this.parent.element != null) {
			if(this.canvas != null) {
				rect = this.canvas.getBoundingClientRect();
			} else if(this.div != null) {
				rect = this.div.getBoundingClientRect();
			} else {
				rect = this.parent.element.getBoundingClientRect();
			}
		}
		var windowWidth = this.setWidth;
		var windowHeight = this.setHeight;
		if(windowWidth == 0 || windowHeight == 0) {
			if(rect != null) {
				windowWidth = rect.width;
				windowHeight = rect.height;
			} else {
				windowWidth = 1;
				windowHeight = 1;
			}
		}
		var touch;
		var x;
		var y;
		var cacheX;
		var cacheY;
		var _g = 0;
		var _g1 = event.changedTouches;
		while(_g < _g1.length) {
			var data = _g1[_g];
			++_g;
			x = 0.0;
			y = 0.0;
			if(rect != null) {
				x = (data.clientX - rect.left) * (windowWidth / rect.width);
				y = (data.clientY - rect.top) * (windowHeight / rect.height);
			} else {
				x = data.clientX;
				y = data.clientY;
			}
			if(event.type == "touchstart") {
				touch = this.unusedTouchesPool.pop();
				if(touch == null) {
					touch = new lime_ui_Touch(x / windowWidth,y / windowHeight,data.identifier,0,0,data.force,this.parent.id);
				} else {
					touch.x = x / windowWidth;
					touch.y = y / windowHeight;
					touch.id = data.identifier;
					touch.dx = 0;
					touch.dy = 0;
					touch.pressure = data.force;
					touch.device = this.parent.id;
				}
				this.currentTouches.h[data.identifier] = touch;
				lime_ui_Touch.onStart.dispatch(touch);
				if(this.primaryTouch == null) {
					this.primaryTouch = touch;
				}
				if(touch == this.primaryTouch) {
					this.parent.onMouseDown.dispatch(x,y,0);
				}
			} else {
				touch = this.currentTouches.h[data.identifier];
				if(touch != null) {
					cacheX = touch.x;
					cacheY = touch.y;
					touch.x = x / windowWidth;
					touch.y = y / windowHeight;
					touch.dx = touch.x - cacheX;
					touch.dy = touch.y - cacheY;
					touch.pressure = data.force;
					switch(event.type) {
					case "touchcancel":
						lime_ui_Touch.onCancel.dispatch(touch);
						this.currentTouches.remove(data.identifier);
						this.unusedTouchesPool.add(touch);
						if(touch == this.primaryTouch) {
							this.primaryTouch = null;
						}
						break;
					case "touchend":
						lime_ui_Touch.onEnd.dispatch(touch);
						this.currentTouches.remove(data.identifier);
						this.unusedTouchesPool.add(touch);
						if(touch == this.primaryTouch) {
							this.parent.onMouseUp.dispatch(x,y,0);
							this.primaryTouch = null;
						}
						break;
					case "touchmove":
						lime_ui_Touch.onMove.dispatch(touch);
						if(touch == this.primaryTouch) {
							this.parent.onMouseMove.dispatch(x,y);
						}
						break;
					default:
					}
				}
			}
		}
	}
	,isDescendent: function(node) {
		if(node == this.parent.element) {
			return true;
		}
		while(node != null) {
			if(node.parentNode == this.parent.element) {
				return true;
			}
			node = node.parentNode;
		}
		return false;
	}
	,move: function(x,y) {
	}
	,readPixels: function(rect) {
		if(this.canvas != null) {
			var stageRect = new lime_math_Rectangle(0,0,this.canvas.width,this.canvas.height);
			if(rect == null) {
				rect = stageRect;
			} else {
				rect.intersection(stageRect,rect);
			}
			if(rect.width > 0 && rect.height > 0) {
				var canvas2 = window.document.createElement("canvas");
				canvas2.width = rect.width | 0;
				canvas2.height = rect.height | 0;
				var context = canvas2.getContext("2d");
				context.drawImage(this.canvas,-rect.x,-rect.y);
				return lime_graphics_Image.fromCanvas(canvas2);
			}
		}
		return null;
	}
	,resize: function(width,height) {
	}
	,setBorderless: function(value) {
		return value;
	}
	,setClipboard: function(value) {
		if(lime__$internal_backend_html5_HTML5Window.textArea == null) {
			lime__$internal_backend_html5_HTML5Window.textArea = window.document.createElement("textarea");
			lime__$internal_backend_html5_HTML5Window.textArea.style.height = "0px";
			lime__$internal_backend_html5_HTML5Window.textArea.style.left = "-100px";
			lime__$internal_backend_html5_HTML5Window.textArea.style.opacity = "0";
			lime__$internal_backend_html5_HTML5Window.textArea.style.position = "fixed";
			lime__$internal_backend_html5_HTML5Window.textArea.style.top = "-100px";
			lime__$internal_backend_html5_HTML5Window.textArea.style.width = "0px";
			window.document.body.appendChild(lime__$internal_backend_html5_HTML5Window.textArea);
		}
		lime__$internal_backend_html5_HTML5Window.textArea.value = value;
		lime__$internal_backend_html5_HTML5Window.textArea.focus();
		lime__$internal_backend_html5_HTML5Window.textArea.select();
		if(window.document.queryCommandEnabled("copy")) {
			window.document.execCommand("copy");
		}
	}
	,setCursor: function(value) {
		if(this.cursor != value) {
			if(value == null) {
				this.parent.element.style.cursor = "none";
			} else {
				var tmp;
				switch(value._hx_index) {
				case 0:
					tmp = "default";
					break;
				case 1:
					tmp = "crosshair";
					break;
				case 3:
					tmp = "move";
					break;
				case 4:
					tmp = "pointer";
					break;
				case 5:
					tmp = "nesw-resize";
					break;
				case 6:
					tmp = "ns-resize";
					break;
				case 7:
					tmp = "nwse-resize";
					break;
				case 8:
					tmp = "ew-resize";
					break;
				case 9:
					tmp = "text";
					break;
				case 10:
					tmp = "wait";
					break;
				case 11:
					tmp = "wait";
					break;
				default:
					tmp = "auto";
				}
				this.parent.element.style.cursor = tmp;
			}
			this.cursor = value;
		}
		return this.cursor;
	}
	,setDisplayMode: function(value) {
		return value;
	}
	,setFrameRate: function(value) {
		if(this.parent.application != null) {
			if(value >= 60) {
				if(this.parent == this.parent.application.__window) {
					this.parent.application.__backend.framePeriod = -1;
				}
			} else if(value > 0) {
				if(this.parent == this.parent.application.__window) {
					this.parent.application.__backend.framePeriod = 1000 / value;
				}
			} else if(this.parent == this.parent.application.__window) {
				this.parent.application.__backend.framePeriod = 1000;
			}
		}
		return value;
	}
	,setFullscreen: function(value) {
		if(value) {
			if(!this.requestedFullscreen && !this.isFullscreen) {
				this.requestedFullscreen = true;
				if(($_=this.parent.element,$bind($_,$_.requestFullscreen))) {
					document.addEventListener("fullscreenchange",$bind(this,this.handleFullscreenEvent),false);
					document.addEventListener("fullscreenerror",$bind(this,this.handleFullscreenEvent),false);
					this.parent.element.requestFullscreen();
				} else if(this.parent.element.mozRequestFullScreen) {
					document.addEventListener("mozfullscreenchange",$bind(this,this.handleFullscreenEvent),false);
					document.addEventListener("mozfullscreenerror",$bind(this,this.handleFullscreenEvent),false);
					this.parent.element.mozRequestFullScreen();
				} else if(this.parent.element.webkitRequestFullscreen) {
					document.addEventListener("webkitfullscreenchange",$bind(this,this.handleFullscreenEvent),false);
					document.addEventListener("webkitfullscreenerror",$bind(this,this.handleFullscreenEvent),false);
					this.parent.element.webkitRequestFullscreen();
				} else if(this.parent.element.msRequestFullscreen) {
					document.addEventListener("MSFullscreenChange",$bind(this,this.handleFullscreenEvent),false);
					document.addEventListener("MSFullscreenError",$bind(this,this.handleFullscreenEvent),false);
					this.parent.element.msRequestFullscreen();
				}
			}
		} else if(this.isFullscreen) {
			this.requestedFullscreen = false;
			if(document.exitFullscreen) {
				document.exitFullscreen();
			} else if(document.mozCancelFullScreen) {
				document.mozCancelFullScreen();
			} else if(document.webkitExitFullscreen) {
				document.webkitExitFullscreen();
			} else if(document.msExitFullscreen) {
				document.msExitFullscreen();
			}
		}
		return value;
	}
	,setIcon: function(image) {
		lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(image);
		var link = window.document.querySelector("link[rel*='icon']");
		if(link == null) {
			link = window.document.createElement("link");
		}
		link.type = "image/x-icon";
		link.rel = "shortcut icon";
		link.href = image.buffer.get_src().toDataURL("image/x-icon");
		window.document.getElementsByTagName("head")[0].appendChild(link);
	}
	,setMaximized: function(value) {
		return false;
	}
	,setMinimized: function(value) {
		return false;
	}
	,setMouseLock: function(value) {
	}
	,setResizable: function(value) {
		return value;
	}
	,setTextInputEnabled: function(value) {
		if(value) {
			if(lime__$internal_backend_html5_HTML5Window.textInput == null) {
				lime__$internal_backend_html5_HTML5Window.textInput = window.document.createElement("input");
				lime__$internal_backend_html5_HTML5Window.textInput.type = "text";
				lime__$internal_backend_html5_HTML5Window.textInput.style.position = "absolute";
				lime__$internal_backend_html5_HTML5Window.textInput.style.opacity = "0";
				lime__$internal_backend_html5_HTML5Window.textInput.style.color = "transparent";
				lime__$internal_backend_html5_HTML5Window.textInput.value = lime__$internal_backend_html5_HTML5Window.dummyCharacter;
				lime__$internal_backend_html5_HTML5Window.textInput.autocapitalize = "off";
				lime__$internal_backend_html5_HTML5Window.textInput.autocorrect = "off";
				lime__$internal_backend_html5_HTML5Window.textInput.autocomplete = "off";
				lime__$internal_backend_html5_HTML5Window.textInput.style.left = "0px";
				lime__$internal_backend_html5_HTML5Window.textInput.style.top = "50%";
				if(new EReg("(iPad|iPhone|iPod).*OS 8_","gi").match(window.navigator.userAgent)) {
					lime__$internal_backend_html5_HTML5Window.textInput.style.fontSize = "0px";
					lime__$internal_backend_html5_HTML5Window.textInput.style.width = "0px";
					lime__$internal_backend_html5_HTML5Window.textInput.style.height = "0px";
				} else {
					lime__$internal_backend_html5_HTML5Window.textInput.style.width = "1px";
					lime__$internal_backend_html5_HTML5Window.textInput.style.height = "1px";
				}
				lime__$internal_backend_html5_HTML5Window.textInput.style.pointerEvents = "none";
				lime__$internal_backend_html5_HTML5Window.textInput.style.zIndex = "-10000000";
			}
			if(lime__$internal_backend_html5_HTML5Window.textInput.parentNode == null) {
				this.parent.element.appendChild(lime__$internal_backend_html5_HTML5Window.textInput);
			}
			if(!this.textInputEnabled) {
				lime__$internal_backend_html5_HTML5Window.textInput.addEventListener("input",$bind(this,this.handleInputEvent),true);
				lime__$internal_backend_html5_HTML5Window.textInput.addEventListener("blur",$bind(this,this.handleFocusEvent),true);
				lime__$internal_backend_html5_HTML5Window.textInput.addEventListener("cut",$bind(this,this.handleCutOrCopyEvent),true);
				lime__$internal_backend_html5_HTML5Window.textInput.addEventListener("copy",$bind(this,this.handleCutOrCopyEvent),true);
				lime__$internal_backend_html5_HTML5Window.textInput.addEventListener("paste",$bind(this,this.handlePasteEvent),true);
			}
			lime__$internal_backend_html5_HTML5Window.textInput.focus();
			lime__$internal_backend_html5_HTML5Window.textInput.select();
		} else if(lime__$internal_backend_html5_HTML5Window.textInput != null) {
			lime__$internal_backend_html5_HTML5Window.textInput.removeEventListener("input",$bind(this,this.handleInputEvent),true);
			lime__$internal_backend_html5_HTML5Window.textInput.removeEventListener("blur",$bind(this,this.handleFocusEvent),true);
			lime__$internal_backend_html5_HTML5Window.textInput.removeEventListener("cut",$bind(this,this.handleCutOrCopyEvent),true);
			lime__$internal_backend_html5_HTML5Window.textInput.removeEventListener("copy",$bind(this,this.handleCutOrCopyEvent),true);
			lime__$internal_backend_html5_HTML5Window.textInput.removeEventListener("paste",$bind(this,this.handlePasteEvent),true);
			lime__$internal_backend_html5_HTML5Window.textInput.blur();
		}
		return this.textInputEnabled = value;
	}
	,setTitle: function(value) {
		if(value != null) {
			window.document.title = value;
		}
		return value;
	}
	,updateSize: function() {
		if(!this.parent.__resizable) {
			return;
		}
		var elementWidth;
		var elementHeight;
		if(this.parent.element != null) {
			elementWidth = this.parent.element.clientWidth;
			elementHeight = this.parent.element.clientHeight;
		} else {
			elementWidth = window.innerWidth;
			elementHeight = window.innerHeight;
		}
		if(elementWidth != this.cacheElementWidth || elementHeight != this.cacheElementHeight) {
			this.cacheElementWidth = elementWidth;
			this.cacheElementHeight = elementHeight;
			var stretch = this.resizeElement || this.setWidth == 0 && this.setHeight == 0;
			if(this.parent.element != null && (this.div == null || this.div != null && stretch)) {
				if(stretch) {
					if(this.parent.__width != elementWidth || this.parent.__height != elementHeight) {
						this.parent.__width = elementWidth;
						this.parent.__height = elementHeight;
						if(this.canvas != null) {
							if(this.parent.element != this.canvas) {
								this.canvas.width = Math.round(elementWidth * this.scale);
								this.canvas.height = Math.round(elementHeight * this.scale);
								this.canvas.style.width = elementWidth + "px";
								this.canvas.style.height = elementHeight + "px";
							}
						} else {
							this.div.style.width = elementWidth + "px";
							this.div.style.height = elementHeight + "px";
						}
						this.parent.onResize.dispatch(elementWidth,elementHeight);
					}
				} else {
					var scaleX = this.setWidth != 0 ? elementWidth / this.setWidth : 1;
					var scaleY = this.setHeight != 0 ? elementHeight / this.setHeight : 1;
					var targetWidth = elementWidth;
					var targetHeight = elementHeight;
					var marginLeft = 0;
					var marginTop = 0;
					if(scaleX < scaleY) {
						targetHeight = Math.floor(this.setHeight * scaleX);
						marginTop = Math.floor((elementHeight - targetHeight) / 2);
					} else {
						targetWidth = Math.floor(this.setWidth * scaleY);
						marginLeft = Math.floor((elementWidth - targetWidth) / 2);
					}
					if(this.canvas != null) {
						if(this.parent.element != this.canvas) {
							this.canvas.style.width = targetWidth + "px";
							this.canvas.style.height = targetHeight + "px";
							this.canvas.style.marginLeft = marginLeft + "px";
							this.canvas.style.marginTop = marginTop + "px";
						}
					} else {
						this.div.style.width = targetWidth + "px";
						this.div.style.height = targetHeight + "px";
						this.div.style.marginLeft = marginLeft + "px";
						this.div.style.marginTop = marginTop + "px";
					}
				}
			}
		}
	}
	,warpMouse: function(x,y) {
	}
	,__class__: lime__$internal_backend_html5_HTML5Window
};
var lime__$internal_backend_native_NativeCFFI = function() { };
$hxClasses["lime._internal.backend.native.NativeCFFI"] = lime__$internal_backend_native_NativeCFFI;
lime__$internal_backend_native_NativeCFFI.__name__ = "lime._internal.backend.native.NativeCFFI";
var lime__$internal_format_BMP = function() { };
$hxClasses["lime._internal.format.BMP"] = lime__$internal_format_BMP;
lime__$internal_format_BMP.__name__ = "lime._internal.format.BMP";
lime__$internal_format_BMP.encode = function(image,type) {
	if(image.get_premultiplied() || image.get_format() != 0) {
		image = image.clone();
		image.set_premultiplied(false);
		image.set_format(0);
	}
	if(type == null) {
		type = lime__$internal_format_BMPType.RGB;
	}
	var fileHeaderLength = 14;
	var infoHeaderLength = 40;
	var pixelValuesLength = image.width * image.height * 4;
	if(type != null) {
		switch(type._hx_index) {
		case 0:
			pixelValuesLength = (image.width * 3 + image.width * 3 % 4) * image.height;
			break;
		case 1:
			infoHeaderLength = 108;
			break;
		case 2:
			fileHeaderLength = 0;
			pixelValuesLength += image.width * image.height;
			break;
		}
	}
	var data = new haxe_io_Bytes(new ArrayBuffer(fileHeaderLength + infoHeaderLength + pixelValuesLength));
	var position = 0;
	if(fileHeaderLength > 0) {
		data.b[position++] = 66;
		data.b[position++] = 77;
		data.setInt32(position,data.length);
		position += 4;
		data.setUInt16(position,0);
		position += 2;
		data.setUInt16(position,0);
		position += 2;
		data.setInt32(position,fileHeaderLength + infoHeaderLength);
		position += 4;
	}
	data.setInt32(position,infoHeaderLength);
	position += 4;
	data.setInt32(position,image.width);
	position += 4;
	data.setInt32(position,type == lime__$internal_format_BMPType.ICO ? image.height * 2 : image.height);
	position += 4;
	data.setUInt16(position,1);
	position += 2;
	data.setUInt16(position,type == lime__$internal_format_BMPType.RGB ? 24 : 32);
	position += 2;
	data.setInt32(position,type == lime__$internal_format_BMPType.BITFIELD ? 3 : 0);
	position += 4;
	data.setInt32(position,pixelValuesLength);
	position += 4;
	data.setInt32(position,11824);
	position += 4;
	data.setInt32(position,11824);
	position += 4;
	data.setInt32(position,0);
	position += 4;
	data.setInt32(position,0);
	position += 4;
	if(type == lime__$internal_format_BMPType.BITFIELD) {
		data.setInt32(position,16711680);
		position += 4;
		data.setInt32(position,65280);
		position += 4;
		data.setInt32(position,255);
		position += 4;
		data.setInt32(position,-16777216);
		position += 4;
		data.b[position++] = 32;
		data.b[position++] = 110;
		data.b[position++] = 105;
		data.b[position++] = 87;
		var _g = 0;
		while(_g < 48) {
			var i = _g++;
			data.b[position++] = 0;
		}
	}
	var pixels = image.getPixels(new lime_math_Rectangle(0,0,image.width,image.height),1);
	var readPosition = 0;
	var a;
	var r;
	var g;
	var b;
	if(type != null) {
		switch(type._hx_index) {
		case 0:
			var _g = 0;
			var _g1 = image.height;
			while(_g < _g1) {
				var y = _g++;
				readPosition = (image.height - 1 - y) * 4 * image.width;
				var _g2 = 0;
				var _g3 = image.width;
				while(_g2 < _g3) {
					var x = _g2++;
					a = pixels.b[readPosition++];
					r = pixels.b[readPosition++];
					g = pixels.b[readPosition++];
					b = pixels.b[readPosition++];
					data.b[position++] = b & 255;
					data.b[position++] = g & 255;
					data.b[position++] = r & 255;
				}
				var _g4 = 0;
				var _g5 = image.width * 3 % 4;
				while(_g4 < _g5) {
					var i = _g4++;
					data.b[position++] = 0;
				}
			}
			break;
		case 1:
			var _g = 0;
			var _g1 = image.height;
			while(_g < _g1) {
				var y = _g++;
				readPosition = (image.height - 1 - y) * 4 * image.width;
				var _g2 = 0;
				var _g3 = image.width;
				while(_g2 < _g3) {
					var x = _g2++;
					a = pixels.b[readPosition++];
					r = pixels.b[readPosition++];
					g = pixels.b[readPosition++];
					b = pixels.b[readPosition++];
					data.b[position++] = b & 255;
					data.b[position++] = g & 255;
					data.b[position++] = r & 255;
					data.b[position++] = a & 255;
				}
			}
			break;
		case 2:
			var andMask = new haxe_io_Bytes(new ArrayBuffer(image.width * image.height));
			var maskPosition = 0;
			var _g = 0;
			var _g1 = image.height;
			while(_g < _g1) {
				var y = _g++;
				readPosition = (image.height - 1 - y) * 4 * image.width;
				var _g2 = 0;
				var _g3 = image.width;
				while(_g2 < _g3) {
					var x = _g2++;
					a = pixels.b[readPosition++];
					r = pixels.b[readPosition++];
					g = pixels.b[readPosition++];
					b = pixels.b[readPosition++];
					data.b[position++] = b & 255;
					data.b[position++] = g & 255;
					data.b[position++] = r & 255;
					data.b[position++] = a & 255;
					andMask.b[maskPosition++] = 0;
				}
			}
			data.blit(position,andMask,0,image.width * image.height);
			break;
		}
	}
	return data;
};
var lime__$internal_format_BMPType = $hxEnums["lime._internal.format.BMPType"] = { __ename__ : "lime._internal.format.BMPType", __constructs__ : ["RGB","BITFIELD","ICO"]
	,RGB: {_hx_index:0,__enum__:"lime._internal.format.BMPType",toString:$estr}
	,BITFIELD: {_hx_index:1,__enum__:"lime._internal.format.BMPType",toString:$estr}
	,ICO: {_hx_index:2,__enum__:"lime._internal.format.BMPType",toString:$estr}
};
var lime__$internal_format_Base64 = function() { };
$hxClasses["lime._internal.format.Base64"] = lime__$internal_format_Base64;
lime__$internal_format_Base64.__name__ = "lime._internal.format.Base64";
lime__$internal_format_Base64.decode = function(source) {
	return haxe_crypto_Base64.decode(source);
};
lime__$internal_format_Base64.encode = function(source) {
	var result = [];
	var dictionary = lime__$internal_format_Base64.DICTIONARY;
	var extendedDictionary = lime__$internal_format_Base64.EXTENDED_DICTIONARY;
	var numBytes = source.length;
	var numInputTriplets = Math.floor(numBytes / 3);
	var numChunksToWrite = numInputTriplets * 2;
	result.length = Math.ceil(numBytes / 3) * 2;
	var numBytesRead = 0;
	var numChunksWritten = 0;
	var inputTriplet;
	while(numChunksWritten < numChunksToWrite) {
		inputTriplet = source.b[numBytesRead] << 16 | source.b[numBytesRead + 1] << 8 | source.b[numBytesRead + 2];
		result[numChunksWritten] = extendedDictionary[inputTriplet >> 12 & 4095];
		result[numChunksWritten + 1] = extendedDictionary[inputTriplet & 4095];
		numBytesRead += 3;
		numChunksWritten += 2;
	}
	switch(numBytes - numInputTriplets * 3) {
	case 1:
		inputTriplet = source.b[numBytesRead] << 16;
		result[numChunksWritten] = extendedDictionary[inputTriplet >> 12 & 4095];
		result[numChunksWritten + 1] = "==";
		break;
	case 2:
		inputTriplet = source.b[numBytesRead] << 16 | source.b[numBytesRead + 1] << 8;
		result[numChunksWritten] = extendedDictionary[inputTriplet >> 12 & 4095];
		result[numChunksWritten + 1] = dictionary[inputTriplet >> 6 & 63] + "=";
		break;
	default:
	}
	return result.join("");
};
var lime__$internal_format_Deflate = function() { };
$hxClasses["lime._internal.format.Deflate"] = lime__$internal_format_Deflate;
lime__$internal_format_Deflate.__name__ = "lime._internal.format.Deflate";
lime__$internal_format_Deflate.compress = function(bytes) {
	var data = pako.deflateRaw(bytes.b.bufferValue);
	return haxe_io_Bytes.ofData(data);
};
lime__$internal_format_Deflate.decompress = function(bytes) {
	var data = pako.inflateRaw(bytes.b.bufferValue);
	return haxe_io_Bytes.ofData(data);
};
var lime__$internal_format_GZip = function() { };
$hxClasses["lime._internal.format.GZip"] = lime__$internal_format_GZip;
lime__$internal_format_GZip.__name__ = "lime._internal.format.GZip";
lime__$internal_format_GZip.compress = function(bytes) {
	var data = pako.gzip(bytes.b.bufferValue);
	return haxe_io_Bytes.ofData(data);
};
lime__$internal_format_GZip.decompress = function(bytes) {
	var data = pako.ungzip(bytes.b.bufferValue);
	return haxe_io_Bytes.ofData(data);
};
var lime__$internal_format_JPEG = function() { };
$hxClasses["lime._internal.format.JPEG"] = lime__$internal_format_JPEG;
lime__$internal_format_JPEG.__name__ = "lime._internal.format.JPEG";
lime__$internal_format_JPEG.decodeBytes = function(bytes,decodeData) {
	if(decodeData == null) {
		decodeData = true;
	}
	return null;
};
lime__$internal_format_JPEG.decodeFile = function(path,decodeData) {
	if(decodeData == null) {
		decodeData = true;
	}
	return null;
};
lime__$internal_format_JPEG.encode = function(image,quality) {
	if(image.get_premultiplied() || image.get_format() != 0) {
		image = image.clone();
		image.set_premultiplied(false);
		image.set_format(0);
	}
	lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(image,false);
	if(image.buffer.__srcCanvas != null) {
		var data = image.buffer.__srcCanvas.toDataURL("image/jpeg",quality / 100);
		var buffer = window.atob(data.split(";base64,")[1]);
		var bytes = new haxe_io_Bytes(new ArrayBuffer(buffer.length));
		var _g = 0;
		var _g1 = buffer.length;
		while(_g < _g1) {
			var i = _g++;
			bytes.b[i] = HxOverrides.cca(buffer,i) & 255;
		}
		return bytes;
	}
	return null;
};
var lime__$internal_format_LZMA = function() { };
$hxClasses["lime._internal.format.LZMA"] = lime__$internal_format_LZMA;
lime__$internal_format_LZMA.__name__ = "lime._internal.format.LZMA";
lime__$internal_format_LZMA.compress = function(bytes) {
	return null;
};
lime__$internal_format_LZMA.decompress = function(bytes) {
	return null;
};
var lime__$internal_format_PNG = function() { };
$hxClasses["lime._internal.format.PNG"] = lime__$internal_format_PNG;
lime__$internal_format_PNG.__name__ = "lime._internal.format.PNG";
lime__$internal_format_PNG.decodeBytes = function(bytes,decodeData) {
	if(decodeData == null) {
		decodeData = true;
	}
	return null;
};
lime__$internal_format_PNG.decodeFile = function(path,decodeData) {
	if(decodeData == null) {
		decodeData = true;
	}
	return null;
};
lime__$internal_format_PNG.encode = function(image) {
	if(image.get_premultiplied() || image.get_format() != 0) {
		image = image.clone();
		image.set_premultiplied(false);
		image.set_format(0);
	}
	lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(image,false);
	if(image.buffer.__srcCanvas != null) {
		var data = image.buffer.__srcCanvas.toDataURL("image/png");
		var buffer = window.atob(data.split(";base64,")[1]);
		var bytes = new haxe_io_Bytes(new ArrayBuffer(buffer.length));
		var _g = 0;
		var _g1 = buffer.length;
		while(_g < _g1) {
			var i = _g++;
			bytes.b[i] = HxOverrides.cca(buffer,i) & 255;
		}
		return bytes;
	}
	return null;
};
var lime__$internal_format_Zlib = function() { };
$hxClasses["lime._internal.format.Zlib"] = lime__$internal_format_Zlib;
lime__$internal_format_Zlib.__name__ = "lime._internal.format.Zlib";
lime__$internal_format_Zlib.compress = function(bytes) {
	var data = pako.deflate(bytes.b.bufferValue);
	return haxe_io_Bytes.ofData(data);
};
lime__$internal_format_Zlib.decompress = function(bytes) {
	var data = pako.inflate(bytes.b.bufferValue);
	return haxe_io_Bytes.ofData(data);
};
var lime__$internal_graphics_ImageCanvasUtil = function() { };
$hxClasses["lime._internal.graphics.ImageCanvasUtil"] = lime__$internal_graphics_ImageCanvasUtil;
lime__$internal_graphics_ImageCanvasUtil.__name__ = "lime._internal.graphics.ImageCanvasUtil";
lime__$internal_graphics_ImageCanvasUtil.colorTransform = function(image,rect,colorMatrix) {
	lime__$internal_graphics_ImageCanvasUtil.convertToData(image);
	lime__$internal_graphics_ImageDataUtil.colorTransform(image,rect,colorMatrix);
};
lime__$internal_graphics_ImageCanvasUtil.convertToCanvas = function(image,clear) {
	if(clear == null) {
		clear = false;
	}
	var buffer = image.buffer;
	if(buffer.__srcImage != null) {
		if(buffer.__srcCanvas == null) {
			lime__$internal_graphics_ImageCanvasUtil.createCanvas(image,buffer.__srcImage.width,buffer.__srcImage.height);
			buffer.__srcContext.drawImage(buffer.__srcImage,0,0);
		}
		buffer.__srcImage = null;
	} else if(buffer.__srcCanvas == null && buffer.data != null) {
		image.set_transparent(true);
		lime__$internal_graphics_ImageCanvasUtil.createCanvas(image,buffer.width,buffer.height);
		lime__$internal_graphics_ImageCanvasUtil.createImageData(image);
		buffer.__srcContext.putImageData(buffer.__srcImageData,0,0);
	} else if(image.type == lime_graphics_ImageType.DATA && buffer.__srcImageData != null && image.dirty) {
		buffer.__srcContext.putImageData(buffer.__srcImageData,0,0);
		image.dirty = false;
	}
	if(clear) {
		buffer.data = null;
		buffer.__srcImageData = null;
	} else if(buffer.data == null && buffer.__srcImageData != null) {
		buffer.data = buffer.__srcImageData.data;
	}
	image.type = lime_graphics_ImageType.CANVAS;
};
lime__$internal_graphics_ImageCanvasUtil.convertToData = function(image,clear) {
	if(clear == null) {
		clear = false;
	}
	var buffer = image.buffer;
	if(buffer.__srcImage != null) {
		lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(image);
	}
	if(buffer.__srcCanvas != null && buffer.data == null) {
		lime__$internal_graphics_ImageCanvasUtil.createImageData(image);
		if(image.type == lime_graphics_ImageType.CANVAS) {
			image.dirty = false;
		}
	} else if(image.type == lime_graphics_ImageType.CANVAS && buffer.__srcCanvas != null && image.dirty) {
		if(buffer.__srcImageData == null) {
			lime__$internal_graphics_ImageCanvasUtil.createImageData(image);
		} else {
			buffer.__srcImageData = buffer.__srcContext.getImageData(0,0,buffer.width,buffer.height);
			var elements = buffer.__srcImageData.data.buffer;
			var array = null;
			var vector = null;
			var view = null;
			var buffer1 = null;
			var len = null;
			var this1;
			if(elements != null) {
				this1 = new Uint8Array(elements);
			} else if(array != null) {
				this1 = new Uint8Array(array);
			} else if(vector != null) {
				this1 = new Uint8Array(vector.__array);
			} else if(view != null) {
				this1 = new Uint8Array(view);
			} else if(buffer1 != null) {
				if(len == null) {
					this1 = new Uint8Array(buffer1,0);
				} else {
					this1 = new Uint8Array(buffer1,0,len);
				}
			} else {
				this1 = null;
			}
			buffer.data = this1;
		}
		image.dirty = false;
	}
	if(clear) {
		image.buffer.__srcCanvas = null;
		image.buffer.__srcContext = null;
	}
	image.type = lime_graphics_ImageType.DATA;
};
lime__$internal_graphics_ImageCanvasUtil.copyChannel = function(image,sourceImage,sourceRect,destPoint,sourceChannel,destChannel) {
	lime__$internal_graphics_ImageCanvasUtil.convertToData(sourceImage);
	lime__$internal_graphics_ImageCanvasUtil.convertToData(image);
	lime__$internal_graphics_ImageDataUtil.copyChannel(image,sourceImage,sourceRect,destPoint,sourceChannel,destChannel);
};
lime__$internal_graphics_ImageCanvasUtil.copyPixels = function(image,sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha) {
	if(mergeAlpha == null) {
		mergeAlpha = false;
	}
	if(destPoint == null || destPoint.x >= image.width || destPoint.y >= image.height || sourceRect == null || sourceRect.width < 1 || sourceRect.height < 1) {
		return;
	}
	if(alphaImage != null && alphaImage.get_transparent()) {
		if(alphaPoint == null) {
			alphaPoint = new lime_math_Vector2();
		}
		var tempData = sourceImage.clone();
		tempData.copyChannel(alphaImage,new lime_math_Rectangle(sourceRect.x + alphaPoint.x,sourceRect.y + alphaPoint.y,sourceRect.width,sourceRect.height),new lime_math_Vector2(sourceRect.x,sourceRect.y),lime_graphics_ImageChannel.ALPHA,lime_graphics_ImageChannel.ALPHA);
		sourceImage = tempData;
	}
	lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(image,true);
	if(!mergeAlpha) {
		if(image.get_transparent() && sourceImage.get_transparent()) {
			image.buffer.__srcContext.clearRect(destPoint.x + image.offsetX,destPoint.y + image.offsetY,sourceRect.width + image.offsetX,sourceRect.height + image.offsetY);
		}
	}
	lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(sourceImage);
	if(sourceImage.buffer.get_src() != null) {
		image.buffer.__srcContext.globalCompositeOperation = "source-over";
		image.buffer.__srcContext.drawImage(sourceImage.buffer.get_src(),sourceRect.x + sourceImage.offsetX | 0,sourceRect.y + sourceImage.offsetY | 0,sourceRect.width | 0,sourceRect.height | 0,destPoint.x + image.offsetX | 0,destPoint.y + image.offsetY | 0,sourceRect.width | 0,sourceRect.height | 0);
	}
	image.dirty = true;
	image.version++;
};
lime__$internal_graphics_ImageCanvasUtil.createCanvas = function(image,width,height) {
	var buffer = image.buffer;
	if(buffer.__srcCanvas == null) {
		buffer.__srcCanvas = window.document.createElement("canvas");
		buffer.__srcCanvas.width = width;
		buffer.__srcCanvas.height = height;
		if(!image.get_transparent()) {
			if(!image.get_transparent()) {
				buffer.__srcCanvas.setAttribute("moz-opaque","true");
			}
			buffer.__srcContext = buffer.__srcCanvas.getContext ("2d", { alpha: false });
		} else {
			buffer.__srcContext = buffer.__srcCanvas.getContext("2d");
		}
	}
};
lime__$internal_graphics_ImageCanvasUtil.createImageData = function(image) {
	var buffer = image.buffer;
	if(buffer.__srcImageData == null) {
		if(buffer.data == null) {
			buffer.__srcImageData = buffer.__srcContext.getImageData(0,0,buffer.width,buffer.height);
		} else {
			buffer.__srcImageData = buffer.__srcContext.createImageData(buffer.width,buffer.height);
			buffer.__srcImageData.data.set(buffer.data);
		}
		var elements = buffer.__srcImageData.data.buffer;
		var array = null;
		var vector = null;
		var view = null;
		var buffer1 = null;
		var len = null;
		var this1;
		if(elements != null) {
			this1 = new Uint8Array(elements);
		} else if(array != null) {
			this1 = new Uint8Array(array);
		} else if(vector != null) {
			this1 = new Uint8Array(vector.__array);
		} else if(view != null) {
			this1 = new Uint8Array(view);
		} else if(buffer1 != null) {
			if(len == null) {
				this1 = new Uint8Array(buffer1,0);
			} else {
				this1 = new Uint8Array(buffer1,0,len);
			}
		} else {
			this1 = null;
		}
		buffer.data = this1;
	}
};
lime__$internal_graphics_ImageCanvasUtil.fillRect = function(image,rect,color,format) {
	lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(image);
	var r;
	var g;
	var b;
	var a;
	if(format == 1) {
		r = color >> 16 & 255;
		g = color >> 8 & 255;
		b = color & 255;
		a = image.get_transparent() ? color >> 24 & 255 : 255;
	} else {
		r = color >> 24 & 255;
		g = color >> 16 & 255;
		b = color >> 8 & 255;
		a = image.get_transparent() ? color & 255 : 255;
	}
	if(rect.x == 0 && rect.y == 0 && rect.width == image.width && rect.height == image.height) {
		if(image.get_transparent() && a == 0) {
			image.buffer.__srcCanvas.width = image.buffer.width;
			return;
		}
	}
	if(a < 255) {
		image.buffer.__srcContext.clearRect(rect.x + image.offsetX,rect.y + image.offsetY,rect.width + image.offsetX,rect.height + image.offsetY);
	}
	if(a > 0) {
		image.buffer.__srcContext.fillStyle = "rgba(" + r + ", " + g + ", " + b + ", " + a / 255 + ")";
		image.buffer.__srcContext.fillRect(rect.x + image.offsetX,rect.y + image.offsetY,rect.width + image.offsetX,rect.height + image.offsetY);
	}
	image.dirty = true;
	image.version++;
};
lime__$internal_graphics_ImageCanvasUtil.floodFill = function(image,x,y,color,format) {
	lime__$internal_graphics_ImageCanvasUtil.convertToData(image);
	lime__$internal_graphics_ImageDataUtil.floodFill(image,x,y,color,format);
};
lime__$internal_graphics_ImageCanvasUtil.getPixel = function(image,x,y,format) {
	lime__$internal_graphics_ImageCanvasUtil.convertToData(image);
	return lime__$internal_graphics_ImageDataUtil.getPixel(image,x,y,format);
};
lime__$internal_graphics_ImageCanvasUtil.getPixel32 = function(image,x,y,format) {
	lime__$internal_graphics_ImageCanvasUtil.convertToData(image);
	return lime__$internal_graphics_ImageDataUtil.getPixel32(image,x,y,format);
};
lime__$internal_graphics_ImageCanvasUtil.getPixels = function(image,rect,format) {
	lime__$internal_graphics_ImageCanvasUtil.convertToData(image);
	return lime__$internal_graphics_ImageDataUtil.getPixels(image,rect,format);
};
lime__$internal_graphics_ImageCanvasUtil.merge = function(image,sourceImage,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier) {
	lime__$internal_graphics_ImageCanvasUtil.convertToData(sourceImage);
	lime__$internal_graphics_ImageCanvasUtil.convertToData(image);
	lime__$internal_graphics_ImageDataUtil.merge(image,sourceImage,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier);
};
lime__$internal_graphics_ImageCanvasUtil.resize = function(image,newWidth,newHeight) {
	var buffer = image.buffer;
	if(buffer.__srcCanvas == null) {
		lime__$internal_graphics_ImageCanvasUtil.createCanvas(image,newWidth,newHeight);
		buffer.__srcContext.drawImage(buffer.get_src(),0,0,newWidth,newHeight);
	} else {
		lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(image,true);
		var sourceCanvas = buffer.__srcCanvas;
		buffer.__srcCanvas = null;
		lime__$internal_graphics_ImageCanvasUtil.createCanvas(image,newWidth,newHeight);
		buffer.__srcContext.drawImage(sourceCanvas,0,0,newWidth,newHeight);
	}
	buffer.__srcImageData = null;
	buffer.data = null;
	image.dirty = true;
	image.version++;
};
lime__$internal_graphics_ImageCanvasUtil.scroll = function(image,x,y) {
	if(x % image.width == 0 && y % image.height == 0) {
		return;
	}
	var copy = image.clone();
	lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(image,true);
	image.buffer.__srcContext.clearRect(x,y,image.width,image.height);
	image.buffer.__srcContext.drawImage(copy.get_src(),x,y);
	image.dirty = true;
	image.version++;
};
lime__$internal_graphics_ImageCanvasUtil.setPixel = function(image,x,y,color,format) {
	lime__$internal_graphics_ImageCanvasUtil.convertToData(image);
	lime__$internal_graphics_ImageDataUtil.setPixel(image,x,y,color,format);
};
lime__$internal_graphics_ImageCanvasUtil.setPixel32 = function(image,x,y,color,format) {
	lime__$internal_graphics_ImageCanvasUtil.convertToData(image);
	lime__$internal_graphics_ImageDataUtil.setPixel32(image,x,y,color,format);
};
lime__$internal_graphics_ImageCanvasUtil.setPixels = function(image,rect,bytePointer,format,endian) {
	lime__$internal_graphics_ImageCanvasUtil.convertToData(image);
	lime__$internal_graphics_ImageDataUtil.setPixels(image,rect,bytePointer,format,endian);
};
lime__$internal_graphics_ImageCanvasUtil.sync = function(image,clear) {
	if(image == null) {
		return;
	}
	if(image.type == lime_graphics_ImageType.CANVAS && (image.buffer.__srcCanvas != null || image.buffer.data != null)) {
		lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(image,clear);
	} else if(image.type == lime_graphics_ImageType.DATA) {
		lime__$internal_graphics_ImageCanvasUtil.convertToData(image,clear);
	}
};
var lime__$internal_graphics_ImageDataUtil = function() { };
$hxClasses["lime._internal.graphics.ImageDataUtil"] = lime__$internal_graphics_ImageDataUtil;
lime__$internal_graphics_ImageDataUtil.__name__ = "lime._internal.graphics.ImageDataUtil";
lime__$internal_graphics_ImageDataUtil.displaceMap = function(target,source,map,mapPoint,componentX,componentY,smooth) {
	var targetData = target.buffer.data;
	var sourceData = source.buffer.data;
	var mapData = map.buffer.data;
	var targetFormat = target.buffer.format;
	var sourceFormat = source.buffer.format;
	var mapFormat = map.buffer.format;
	var targetPremultiplied = target.get_premultiplied();
	var sourcePremultiplied = source.get_premultiplied();
	var mapPremultiplied = map.get_premultiplied();
	var sourceView = new lime__$internal_graphics__$ImageDataUtil_ImageDataView(source);
	var mapView = new lime__$internal_graphics__$ImageDataUtil_ImageDataView(map);
	var row;
	var sourceOffset;
	var sourcePixel;
	var mapPixel;
	var targetPixel;
	var mapPixelX;
	var mapPixelY;
	var mapPixelA;
	var s1;
	var s2;
	var s3;
	var s4;
	var mPointXFloor;
	var mPointYFloor;
	var disOffsetXFloor;
	var disOffsetYFloor;
	var disX;
	var disY;
	var _g = 0;
	var _g1 = sourceView.height;
	while(_g < _g1) {
		var y = _g++;
		row = sourceView.byteOffset + sourceView.stride * y;
		var _g2 = 0;
		var _g3 = sourceView.width;
		while(_g2 < _g3) {
			var x = _g2++;
			sourceOffset = row + x * 4;
			mPointXFloor = mapPoint.x | 0;
			mPointYFloor = mapPoint.y | 0;
			if(smooth) {
				var offset = sourceView.byteOffset + sourceView.stride * (y - mPointYFloor + 1) + (x - mPointXFloor) * 4;
				var format = mapFormat;
				var premultiplied = mapPremultiplied;
				if(premultiplied == null) {
					premultiplied = false;
				}
				if(format == null) {
					format = 0;
				}
				switch(format) {
				case 0:
					s1 = (mapData[offset] & 255) << 24 | (mapData[offset + 1] & 255) << 16 | (mapData[offset + 2] & 255) << 8 | mapData[offset + 3] & 255;
					break;
				case 1:
					s1 = (mapData[offset + 1] & 255) << 24 | (mapData[offset + 2] & 255) << 16 | (mapData[offset + 3] & 255) << 8 | mapData[offset] & 255;
					break;
				case 2:
					s1 = (mapData[offset + 2] & 255) << 24 | (mapData[offset + 1] & 255) << 16 | (mapData[offset] & 255) << 8 | mapData[offset + 3] & 255;
					break;
				}
				if(premultiplied) {
					if((s1 & 255) != 0 && (s1 & 255) != 255) {
						lime_math_RGBA.unmult = 255.0 / (s1 & 255);
						s1 = (lime_math_RGBA.__clamp[Math.round((s1 >>> 24 & 255) * lime_math_RGBA.unmult)] & 255) << 24 | (lime_math_RGBA.__clamp[Math.round((s1 >>> 16 & 255) * lime_math_RGBA.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.round((s1 >>> 8 & 255) * lime_math_RGBA.unmult)] & 255) << 8 | s1 & 255 & 255;
					}
				}
				var offset1 = sourceView.byteOffset + sourceView.stride * (y - mPointYFloor) + (x - mPointXFloor + 1) * 4;
				var format1 = mapFormat;
				var premultiplied1 = mapPremultiplied;
				if(premultiplied1 == null) {
					premultiplied1 = false;
				}
				if(format1 == null) {
					format1 = 0;
				}
				switch(format1) {
				case 0:
					s2 = (mapData[offset1] & 255) << 24 | (mapData[offset1 + 1] & 255) << 16 | (mapData[offset1 + 2] & 255) << 8 | mapData[offset1 + 3] & 255;
					break;
				case 1:
					s2 = (mapData[offset1 + 1] & 255) << 24 | (mapData[offset1 + 2] & 255) << 16 | (mapData[offset1 + 3] & 255) << 8 | mapData[offset1] & 255;
					break;
				case 2:
					s2 = (mapData[offset1 + 2] & 255) << 24 | (mapData[offset1 + 1] & 255) << 16 | (mapData[offset1] & 255) << 8 | mapData[offset1 + 3] & 255;
					break;
				}
				if(premultiplied1) {
					if((s2 & 255) != 0 && (s2 & 255) != 255) {
						lime_math_RGBA.unmult = 255.0 / (s2 & 255);
						s2 = (lime_math_RGBA.__clamp[Math.round((s2 >>> 24 & 255) * lime_math_RGBA.unmult)] & 255) << 24 | (lime_math_RGBA.__clamp[Math.round((s2 >>> 16 & 255) * lime_math_RGBA.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.round((s2 >>> 8 & 255) * lime_math_RGBA.unmult)] & 255) << 8 | s2 & 255 & 255;
					}
				}
				var offset2 = sourceView.byteOffset + sourceView.stride * (y - mPointYFloor + 1) + (x - mPointXFloor + 1) * 4;
				var format2 = mapFormat;
				var premultiplied2 = mapPremultiplied;
				if(premultiplied2 == null) {
					premultiplied2 = false;
				}
				if(format2 == null) {
					format2 = 0;
				}
				switch(format2) {
				case 0:
					s3 = (mapData[offset2] & 255) << 24 | (mapData[offset2 + 1] & 255) << 16 | (mapData[offset2 + 2] & 255) << 8 | mapData[offset2 + 3] & 255;
					break;
				case 1:
					s3 = (mapData[offset2 + 1] & 255) << 24 | (mapData[offset2 + 2] & 255) << 16 | (mapData[offset2 + 3] & 255) << 8 | mapData[offset2] & 255;
					break;
				case 2:
					s3 = (mapData[offset2 + 2] & 255) << 24 | (mapData[offset2 + 1] & 255) << 16 | (mapData[offset2] & 255) << 8 | mapData[offset2 + 3] & 255;
					break;
				}
				if(premultiplied2) {
					if((s3 & 255) != 0 && (s3 & 255) != 255) {
						lime_math_RGBA.unmult = 255.0 / (s3 & 255);
						s3 = (lime_math_RGBA.__clamp[Math.round((s3 >>> 24 & 255) * lime_math_RGBA.unmult)] & 255) << 24 | (lime_math_RGBA.__clamp[Math.round((s3 >>> 16 & 255) * lime_math_RGBA.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.round((s3 >>> 8 & 255) * lime_math_RGBA.unmult)] & 255) << 8 | s3 & 255 & 255;
					}
				}
				var offset3 = sourceView.byteOffset + sourceView.stride * (y - mPointYFloor) + (x - mPointXFloor) * 4;
				var format3 = mapFormat;
				var premultiplied3 = mapPremultiplied;
				if(premultiplied3 == null) {
					premultiplied3 = false;
				}
				if(format3 == null) {
					format3 = 0;
				}
				switch(format3) {
				case 0:
					s4 = (mapData[offset3] & 255) << 24 | (mapData[offset3 + 1] & 255) << 16 | (mapData[offset3 + 2] & 255) << 8 | mapData[offset3 + 3] & 255;
					break;
				case 1:
					s4 = (mapData[offset3 + 1] & 255) << 24 | (mapData[offset3 + 2] & 255) << 16 | (mapData[offset3 + 3] & 255) << 8 | mapData[offset3] & 255;
					break;
				case 2:
					s4 = (mapData[offset3 + 2] & 255) << 24 | (mapData[offset3 + 1] & 255) << 16 | (mapData[offset3] & 255) << 8 | mapData[offset3 + 3] & 255;
					break;
				}
				if(premultiplied3) {
					if((s4 & 255) != 0 && (s4 & 255) != 255) {
						lime_math_RGBA.unmult = 255.0 / (s4 & 255);
						s4 = (lime_math_RGBA.__clamp[Math.round((s4 >>> 24 & 255) * lime_math_RGBA.unmult)] & 255) << 24 | (lime_math_RGBA.__clamp[Math.round((s4 >>> 16 & 255) * lime_math_RGBA.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.round((s4 >>> 8 & 255) * lime_math_RGBA.unmult)] & 255) << 8 | s4 & 255 & 255;
					}
				}
				mapPixel = lime__$internal_graphics_ImageDataUtil.bilinear(s1,s2,s3,s4,mapPoint.x - mPointXFloor,mapPoint.y - mPointYFloor);
			} else {
				var offset4 = mapView.byteOffset + mapView.stride * (y - mPointYFloor) + (x - mPointXFloor) * 4;
				var format4 = mapFormat;
				var premultiplied4 = mapPremultiplied;
				if(premultiplied4 == null) {
					premultiplied4 = false;
				}
				if(format4 == null) {
					format4 = 0;
				}
				switch(format4) {
				case 0:
					mapPixel = (mapData[offset4] & 255) << 24 | (mapData[offset4 + 1] & 255) << 16 | (mapData[offset4 + 2] & 255) << 8 | mapData[offset4 + 3] & 255;
					break;
				case 1:
					mapPixel = (mapData[offset4 + 1] & 255) << 24 | (mapData[offset4 + 2] & 255) << 16 | (mapData[offset4 + 3] & 255) << 8 | mapData[offset4] & 255;
					break;
				case 2:
					mapPixel = (mapData[offset4 + 2] & 255) << 24 | (mapData[offset4 + 1] & 255) << 16 | (mapData[offset4] & 255) << 8 | mapData[offset4 + 3] & 255;
					break;
				}
				if(premultiplied4) {
					if((mapPixel & 255) != 0 && (mapPixel & 255) != 255) {
						lime_math_RGBA.unmult = 255.0 / (mapPixel & 255);
						mapPixel = (lime_math_RGBA.__clamp[Math.round((mapPixel >>> 24 & 255) * lime_math_RGBA.unmult)] & 255) << 24 | (lime_math_RGBA.__clamp[Math.round((mapPixel >>> 16 & 255) * lime_math_RGBA.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.round((mapPixel >>> 8 & 255) * lime_math_RGBA.unmult)] & 255) << 8 | mapPixel & 255 & 255;
					}
				}
			}
			mapPixelA = (mapPixel & 255) / 255.0;
			mapPixelX = ((mapPixel >>> 24 & 255) - 128) / 255.0 * mapPixelA;
			mapPixelY = ((mapPixel >>> 16 & 255) - 128) / 255.0 * mapPixelA;
			disX = mapPixelX * componentX.x + mapPixelY * componentY.x;
			disY = mapPixelX * componentX.y + mapPixelY * componentY.y;
			disOffsetXFloor = Math.floor(disX * sourceView.width);
			disOffsetYFloor = Math.floor(disY * sourceView.height);
			if(smooth) {
				var offset5 = sourceView.byteOffset + sourceView.stride * (y + disOffsetYFloor + 1) + (x + disOffsetXFloor) * 4;
				var format5 = sourceFormat;
				var premultiplied5 = sourcePremultiplied;
				if(premultiplied5 == null) {
					premultiplied5 = false;
				}
				if(format5 == null) {
					format5 = 0;
				}
				switch(format5) {
				case 0:
					s1 = (sourceData[offset5] & 255) << 24 | (sourceData[offset5 + 1] & 255) << 16 | (sourceData[offset5 + 2] & 255) << 8 | sourceData[offset5 + 3] & 255;
					break;
				case 1:
					s1 = (sourceData[offset5 + 1] & 255) << 24 | (sourceData[offset5 + 2] & 255) << 16 | (sourceData[offset5 + 3] & 255) << 8 | sourceData[offset5] & 255;
					break;
				case 2:
					s1 = (sourceData[offset5 + 2] & 255) << 24 | (sourceData[offset5 + 1] & 255) << 16 | (sourceData[offset5] & 255) << 8 | sourceData[offset5 + 3] & 255;
					break;
				}
				if(premultiplied5) {
					if((s1 & 255) != 0 && (s1 & 255) != 255) {
						lime_math_RGBA.unmult = 255.0 / (s1 & 255);
						s1 = (lime_math_RGBA.__clamp[Math.round((s1 >>> 24 & 255) * lime_math_RGBA.unmult)] & 255) << 24 | (lime_math_RGBA.__clamp[Math.round((s1 >>> 16 & 255) * lime_math_RGBA.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.round((s1 >>> 8 & 255) * lime_math_RGBA.unmult)] & 255) << 8 | s1 & 255 & 255;
					}
				}
				var offset6 = sourceView.byteOffset + sourceView.stride * (y + disOffsetYFloor) + (x + disOffsetXFloor + 1) * 4;
				var format6 = sourceFormat;
				var premultiplied6 = sourcePremultiplied;
				if(premultiplied6 == null) {
					premultiplied6 = false;
				}
				if(format6 == null) {
					format6 = 0;
				}
				switch(format6) {
				case 0:
					s2 = (sourceData[offset6] & 255) << 24 | (sourceData[offset6 + 1] & 255) << 16 | (sourceData[offset6 + 2] & 255) << 8 | sourceData[offset6 + 3] & 255;
					break;
				case 1:
					s2 = (sourceData[offset6 + 1] & 255) << 24 | (sourceData[offset6 + 2] & 255) << 16 | (sourceData[offset6 + 3] & 255) << 8 | sourceData[offset6] & 255;
					break;
				case 2:
					s2 = (sourceData[offset6 + 2] & 255) << 24 | (sourceData[offset6 + 1] & 255) << 16 | (sourceData[offset6] & 255) << 8 | sourceData[offset6 + 3] & 255;
					break;
				}
				if(premultiplied6) {
					if((s2 & 255) != 0 && (s2 & 255) != 255) {
						lime_math_RGBA.unmult = 255.0 / (s2 & 255);
						s2 = (lime_math_RGBA.__clamp[Math.round((s2 >>> 24 & 255) * lime_math_RGBA.unmult)] & 255) << 24 | (lime_math_RGBA.__clamp[Math.round((s2 >>> 16 & 255) * lime_math_RGBA.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.round((s2 >>> 8 & 255) * lime_math_RGBA.unmult)] & 255) << 8 | s2 & 255 & 255;
					}
				}
				var offset7 = sourceView.byteOffset + sourceView.stride * (y + disOffsetYFloor + 1) + (x + disOffsetXFloor + 1) * 4;
				var format7 = sourceFormat;
				var premultiplied7 = sourcePremultiplied;
				if(premultiplied7 == null) {
					premultiplied7 = false;
				}
				if(format7 == null) {
					format7 = 0;
				}
				switch(format7) {
				case 0:
					s3 = (sourceData[offset7] & 255) << 24 | (sourceData[offset7 + 1] & 255) << 16 | (sourceData[offset7 + 2] & 255) << 8 | sourceData[offset7 + 3] & 255;
					break;
				case 1:
					s3 = (sourceData[offset7 + 1] & 255) << 24 | (sourceData[offset7 + 2] & 255) << 16 | (sourceData[offset7 + 3] & 255) << 8 | sourceData[offset7] & 255;
					break;
				case 2:
					s3 = (sourceData[offset7 + 2] & 255) << 24 | (sourceData[offset7 + 1] & 255) << 16 | (sourceData[offset7] & 255) << 8 | sourceData[offset7 + 3] & 255;
					break;
				}
				if(premultiplied7) {
					if((s3 & 255) != 0 && (s3 & 255) != 255) {
						lime_math_RGBA.unmult = 255.0 / (s3 & 255);
						s3 = (lime_math_RGBA.__clamp[Math.round((s3 >>> 24 & 255) * lime_math_RGBA.unmult)] & 255) << 24 | (lime_math_RGBA.__clamp[Math.round((s3 >>> 16 & 255) * lime_math_RGBA.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.round((s3 >>> 8 & 255) * lime_math_RGBA.unmult)] & 255) << 8 | s3 & 255 & 255;
					}
				}
				var offset8 = sourceView.byteOffset + sourceView.stride * (y + disOffsetYFloor) + (x + disOffsetXFloor) * 4;
				var format8 = sourceFormat;
				var premultiplied8 = sourcePremultiplied;
				if(premultiplied8 == null) {
					premultiplied8 = false;
				}
				if(format8 == null) {
					format8 = 0;
				}
				switch(format8) {
				case 0:
					s4 = (sourceData[offset8] & 255) << 24 | (sourceData[offset8 + 1] & 255) << 16 | (sourceData[offset8 + 2] & 255) << 8 | sourceData[offset8 + 3] & 255;
					break;
				case 1:
					s4 = (sourceData[offset8 + 1] & 255) << 24 | (sourceData[offset8 + 2] & 255) << 16 | (sourceData[offset8 + 3] & 255) << 8 | sourceData[offset8] & 255;
					break;
				case 2:
					s4 = (sourceData[offset8 + 2] & 255) << 24 | (sourceData[offset8 + 1] & 255) << 16 | (sourceData[offset8] & 255) << 8 | sourceData[offset8 + 3] & 255;
					break;
				}
				if(premultiplied8) {
					if((s4 & 255) != 0 && (s4 & 255) != 255) {
						lime_math_RGBA.unmult = 255.0 / (s4 & 255);
						s4 = (lime_math_RGBA.__clamp[Math.round((s4 >>> 24 & 255) * lime_math_RGBA.unmult)] & 255) << 24 | (lime_math_RGBA.__clamp[Math.round((s4 >>> 16 & 255) * lime_math_RGBA.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.round((s4 >>> 8 & 255) * lime_math_RGBA.unmult)] & 255) << 8 | s4 & 255 & 255;
					}
				}
				sourcePixel = lime__$internal_graphics_ImageDataUtil.bilinear(s1,s2,s3,s4,disX * sourceView.width - disOffsetXFloor,disY * sourceView.height - disOffsetYFloor);
			} else {
				var offset9 = sourceView.byteOffset + sourceView.stride * (y + disOffsetYFloor) + (x + disOffsetXFloor) * 4;
				var format9 = sourceFormat;
				var premultiplied9 = sourcePremultiplied;
				if(premultiplied9 == null) {
					premultiplied9 = false;
				}
				if(format9 == null) {
					format9 = 0;
				}
				switch(format9) {
				case 0:
					sourcePixel = (sourceData[offset9] & 255) << 24 | (sourceData[offset9 + 1] & 255) << 16 | (sourceData[offset9 + 2] & 255) << 8 | sourceData[offset9 + 3] & 255;
					break;
				case 1:
					sourcePixel = (sourceData[offset9 + 1] & 255) << 24 | (sourceData[offset9 + 2] & 255) << 16 | (sourceData[offset9 + 3] & 255) << 8 | sourceData[offset9] & 255;
					break;
				case 2:
					sourcePixel = (sourceData[offset9 + 2] & 255) << 24 | (sourceData[offset9 + 1] & 255) << 16 | (sourceData[offset9] & 255) << 8 | sourceData[offset9 + 3] & 255;
					break;
				}
				if(premultiplied9) {
					if((sourcePixel & 255) != 0 && (sourcePixel & 255) != 255) {
						lime_math_RGBA.unmult = 255.0 / (sourcePixel & 255);
						sourcePixel = (lime_math_RGBA.__clamp[Math.round((sourcePixel >>> 24 & 255) * lime_math_RGBA.unmult)] & 255) << 24 | (lime_math_RGBA.__clamp[Math.round((sourcePixel >>> 16 & 255) * lime_math_RGBA.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.round((sourcePixel >>> 8 & 255) * lime_math_RGBA.unmult)] & 255) << 8 | sourcePixel & 255 & 255;
					}
				}
			}
			var format10 = targetFormat;
			var premultiplied10 = targetPremultiplied;
			if(premultiplied10 == null) {
				premultiplied10 = false;
			}
			if(format10 == null) {
				format10 = 0;
			}
			if(premultiplied10) {
				if((sourcePixel & 255) == 0) {
					if(sourcePixel != 0) {
						sourcePixel = 0;
					}
				} else if((sourcePixel & 255) != 255) {
					lime_math_RGBA.a16 = lime_math_RGBA.__alpha16[sourcePixel & 255];
					sourcePixel = ((sourcePixel >>> 24 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 24 | ((sourcePixel >>> 16 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 16 | ((sourcePixel >>> 8 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 8 | sourcePixel & 255 & 255;
				}
			}
			switch(format10) {
			case 0:
				targetData[sourceOffset] = sourcePixel >>> 24 & 255;
				targetData[sourceOffset + 1] = sourcePixel >>> 16 & 255;
				targetData[sourceOffset + 2] = sourcePixel >>> 8 & 255;
				targetData[sourceOffset + 3] = sourcePixel & 255;
				break;
			case 1:
				targetData[sourceOffset] = sourcePixel & 255;
				targetData[sourceOffset + 1] = sourcePixel >>> 24 & 255;
				targetData[sourceOffset + 2] = sourcePixel >>> 16 & 255;
				targetData[sourceOffset + 3] = sourcePixel >>> 8 & 255;
				break;
			case 2:
				targetData[sourceOffset] = sourcePixel >>> 8 & 255;
				targetData[sourceOffset + 1] = sourcePixel >>> 16 & 255;
				targetData[sourceOffset + 2] = sourcePixel >>> 24 & 255;
				targetData[sourceOffset + 3] = sourcePixel & 255;
				break;
			}
		}
	}
	target.dirty = true;
	target.version++;
};
lime__$internal_graphics_ImageDataUtil.bilinear = function(s1,s2,s3,s4,su,sv) {
	return lime__$internal_graphics_ImageDataUtil.lerpRGBA(lime__$internal_graphics_ImageDataUtil.lerpRGBA(s4,s2,su),lime__$internal_graphics_ImageDataUtil.lerpRGBA(s1,s3,su),sv);
};
lime__$internal_graphics_ImageDataUtil.lerpRGBA = function(v0,v1,x) {
	var this1 = 0;
	var result = this1;
	var value = Math.floor(lime__$internal_graphics_ImageDataUtil.lerp(v0 >>> 24 & 255,v1 >>> 24 & 255,x));
	result = (value & 255) << 24 | (result >>> 16 & 255 & 255) << 16 | (result >>> 8 & 255 & 255) << 8 | result & 255 & 255;
	var value = Math.floor(lime__$internal_graphics_ImageDataUtil.lerp(v0 >>> 16 & 255,v1 >>> 16 & 255,x));
	result = (result >>> 24 & 255 & 255) << 24 | (value & 255) << 16 | (result >>> 8 & 255 & 255) << 8 | result & 255 & 255;
	var value = Math.floor(lime__$internal_graphics_ImageDataUtil.lerp(v0 >>> 8 & 255,v1 >>> 8 & 255,x));
	result = (result >>> 24 & 255 & 255) << 24 | (result >>> 16 & 255 & 255) << 16 | (value & 255) << 8 | result & 255 & 255;
	var value = Math.floor(lime__$internal_graphics_ImageDataUtil.lerp(v0 & 255,v1 & 255,x));
	result = (result >>> 24 & 255 & 255) << 24 | (result >>> 16 & 255 & 255) << 16 | (result >>> 8 & 255 & 255) << 8 | value & 255;
	return result;
};
lime__$internal_graphics_ImageDataUtil.lerp4f = function(v0,v1,x) {
	return new lime_math_Vector4(lime__$internal_graphics_ImageDataUtil.lerp(v0.x,v1.x,x),lime__$internal_graphics_ImageDataUtil.lerp(v0.y,v1.y,x),lime__$internal_graphics_ImageDataUtil.lerp(v0.z,v1.z,x),lime__$internal_graphics_ImageDataUtil.lerp(v0.w,v1.w,x));
};
lime__$internal_graphics_ImageDataUtil.lerp = function(v0,v1,x) {
	return (1.0 - x) * v0 + x * v1;
};
lime__$internal_graphics_ImageDataUtil.colorTransform = function(image,rect,colorMatrix) {
	var data = image.buffer.data;
	if(data == null) {
		return;
	}
	var format = image.buffer.format;
	var premultiplied = image.buffer.premultiplied;
	var dataView = new lime__$internal_graphics__$ImageDataUtil_ImageDataView(image,rect);
	var alphaTable = lime_math_ColorMatrix.getAlphaTable(colorMatrix);
	var redTable = lime_math_ColorMatrix.getRedTable(colorMatrix);
	var greenTable = lime_math_ColorMatrix.getGreenTable(colorMatrix);
	var blueTable = lime_math_ColorMatrix.getBlueTable(colorMatrix);
	var row;
	var offset;
	var pixel;
	var _g = 0;
	var _g1 = dataView.height;
	while(_g < _g1) {
		var y = _g++;
		row = dataView.byteOffset + dataView.stride * y;
		var _g2 = 0;
		var _g3 = dataView.width;
		while(_g2 < _g3) {
			var x = _g2++;
			offset = row + x * 4;
			var format1 = format;
			var premultiplied1 = premultiplied;
			if(premultiplied1 == null) {
				premultiplied1 = false;
			}
			if(format1 == null) {
				format1 = 0;
			}
			switch(format1) {
			case 0:
				pixel = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
				break;
			case 1:
				pixel = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
				break;
			case 2:
				pixel = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
				break;
			}
			if(premultiplied1) {
				if((pixel & 255) != 0 && (pixel & 255) != 255) {
					lime_math_RGBA.unmult = 255.0 / (pixel & 255);
					pixel = (lime_math_RGBA.__clamp[Math.round((pixel >>> 24 & 255) * lime_math_RGBA.unmult)] & 255) << 24 | (lime_math_RGBA.__clamp[Math.round((pixel >>> 16 & 255) * lime_math_RGBA.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.round((pixel >>> 8 & 255) * lime_math_RGBA.unmult)] & 255) << 8 | pixel & 255 & 255;
				}
			}
			pixel = (redTable[pixel >>> 24 & 255] & 255) << 24 | (greenTable[pixel >>> 16 & 255] & 255) << 16 | (blueTable[pixel >>> 8 & 255] & 255) << 8 | alphaTable[pixel & 255] & 255;
			var format2 = format;
			var premultiplied2 = premultiplied;
			if(premultiplied2 == null) {
				premultiplied2 = false;
			}
			if(format2 == null) {
				format2 = 0;
			}
			if(premultiplied2) {
				if((pixel & 255) == 0) {
					if(pixel != 0) {
						pixel = 0;
					}
				} else if((pixel & 255) != 255) {
					lime_math_RGBA.a16 = lime_math_RGBA.__alpha16[pixel & 255];
					pixel = ((pixel >>> 24 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 24 | ((pixel >>> 16 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 16 | ((pixel >>> 8 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 8 | pixel & 255 & 255;
				}
			}
			switch(format2) {
			case 0:
				data[offset] = pixel >>> 24 & 255;
				data[offset + 1] = pixel >>> 16 & 255;
				data[offset + 2] = pixel >>> 8 & 255;
				data[offset + 3] = pixel & 255;
				break;
			case 1:
				data[offset] = pixel & 255;
				data[offset + 1] = pixel >>> 24 & 255;
				data[offset + 2] = pixel >>> 16 & 255;
				data[offset + 3] = pixel >>> 8 & 255;
				break;
			case 2:
				data[offset] = pixel >>> 8 & 255;
				data[offset + 1] = pixel >>> 16 & 255;
				data[offset + 2] = pixel >>> 24 & 255;
				data[offset + 3] = pixel & 255;
				break;
			}
		}
	}
	image.dirty = true;
	image.version++;
};
lime__$internal_graphics_ImageDataUtil.copyChannel = function(image,sourceImage,sourceRect,destPoint,sourceChannel,destChannel) {
	var destIdx;
	switch(destChannel._hx_index) {
	case 0:
		destIdx = 0;
		break;
	case 1:
		destIdx = 1;
		break;
	case 2:
		destIdx = 2;
		break;
	case 3:
		destIdx = 3;
		break;
	}
	var srcIdx;
	switch(sourceChannel._hx_index) {
	case 0:
		srcIdx = 0;
		break;
	case 1:
		srcIdx = 1;
		break;
	case 2:
		srcIdx = 2;
		break;
	case 3:
		srcIdx = 3;
		break;
	}
	var srcData = sourceImage.buffer.data;
	var destData = image.buffer.data;
	if(srcData == null || destData == null) {
		return;
	}
	var srcView = new lime__$internal_graphics__$ImageDataUtil_ImageDataView(sourceImage,sourceRect);
	var destView = new lime__$internal_graphics__$ImageDataUtil_ImageDataView(image,new lime_math_Rectangle(destPoint.x,destPoint.y,srcView.width,srcView.height));
	var srcFormat = sourceImage.buffer.format;
	var destFormat = image.buffer.format;
	var srcPremultiplied = sourceImage.buffer.premultiplied;
	var destPremultiplied = image.buffer.premultiplied;
	var srcPosition;
	var destPosition;
	var srcPixel;
	var destPixel;
	var value = 0;
	var _g = 0;
	var _g1 = destView.height;
	while(_g < _g1) {
		var y = _g++;
		srcPosition = srcView.byteOffset + srcView.stride * y;
		destPosition = destView.byteOffset + destView.stride * y;
		var _g2 = 0;
		var _g3 = destView.width;
		while(_g2 < _g3) {
			var x = _g2++;
			var format = srcFormat;
			var premultiplied = srcPremultiplied;
			if(premultiplied == null) {
				premultiplied = false;
			}
			if(format == null) {
				format = 0;
			}
			switch(format) {
			case 0:
				srcPixel = (srcData[srcPosition] & 255) << 24 | (srcData[srcPosition + 1] & 255) << 16 | (srcData[srcPosition + 2] & 255) << 8 | srcData[srcPosition + 3] & 255;
				break;
			case 1:
				srcPixel = (srcData[srcPosition + 1] & 255) << 24 | (srcData[srcPosition + 2] & 255) << 16 | (srcData[srcPosition + 3] & 255) << 8 | srcData[srcPosition] & 255;
				break;
			case 2:
				srcPixel = (srcData[srcPosition + 2] & 255) << 24 | (srcData[srcPosition + 1] & 255) << 16 | (srcData[srcPosition] & 255) << 8 | srcData[srcPosition + 3] & 255;
				break;
			}
			if(premultiplied) {
				if((srcPixel & 255) != 0 && (srcPixel & 255) != 255) {
					lime_math_RGBA.unmult = 255.0 / (srcPixel & 255);
					srcPixel = (lime_math_RGBA.__clamp[Math.round((srcPixel >>> 24 & 255) * lime_math_RGBA.unmult)] & 255) << 24 | (lime_math_RGBA.__clamp[Math.round((srcPixel >>> 16 & 255) * lime_math_RGBA.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.round((srcPixel >>> 8 & 255) * lime_math_RGBA.unmult)] & 255) << 8 | srcPixel & 255 & 255;
				}
			}
			var format1 = destFormat;
			var premultiplied1 = destPremultiplied;
			if(premultiplied1 == null) {
				premultiplied1 = false;
			}
			if(format1 == null) {
				format1 = 0;
			}
			switch(format1) {
			case 0:
				destPixel = (destData[destPosition] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition + 2] & 255) << 8 | destData[destPosition + 3] & 255;
				break;
			case 1:
				destPixel = (destData[destPosition + 1] & 255) << 24 | (destData[destPosition + 2] & 255) << 16 | (destData[destPosition + 3] & 255) << 8 | destData[destPosition] & 255;
				break;
			case 2:
				destPixel = (destData[destPosition + 2] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition] & 255) << 8 | destData[destPosition + 3] & 255;
				break;
			}
			if(premultiplied1) {
				if((destPixel & 255) != 0 && (destPixel & 255) != 255) {
					lime_math_RGBA.unmult = 255.0 / (destPixel & 255);
					destPixel = (lime_math_RGBA.__clamp[Math.round((destPixel >>> 24 & 255) * lime_math_RGBA.unmult)] & 255) << 24 | (lime_math_RGBA.__clamp[Math.round((destPixel >>> 16 & 255) * lime_math_RGBA.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.round((destPixel >>> 8 & 255) * lime_math_RGBA.unmult)] & 255) << 8 | destPixel & 255 & 255;
				}
			}
			switch(srcIdx) {
			case 0:
				value = srcPixel >>> 24 & 255;
				break;
			case 1:
				value = srcPixel >>> 16 & 255;
				break;
			case 2:
				value = srcPixel >>> 8 & 255;
				break;
			case 3:
				value = srcPixel & 255;
				break;
			}
			switch(destIdx) {
			case 0:
				destPixel = (value & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
				break;
			case 1:
				destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (value & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
				break;
			case 2:
				destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (value & 255) << 8 | destPixel & 255 & 255;
				break;
			case 3:
				destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | value & 255;
				break;
			}
			var format2 = destFormat;
			var premultiplied2 = destPremultiplied;
			if(premultiplied2 == null) {
				premultiplied2 = false;
			}
			if(format2 == null) {
				format2 = 0;
			}
			if(premultiplied2) {
				if((destPixel & 255) == 0) {
					if(destPixel != 0) {
						destPixel = 0;
					}
				} else if((destPixel & 255) != 255) {
					lime_math_RGBA.a16 = lime_math_RGBA.__alpha16[destPixel & 255];
					destPixel = ((destPixel >>> 24 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 24 | ((destPixel >>> 16 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 16 | ((destPixel >>> 8 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 8 | destPixel & 255 & 255;
				}
			}
			switch(format2) {
			case 0:
				destData[destPosition] = destPixel >>> 24 & 255;
				destData[destPosition + 1] = destPixel >>> 16 & 255;
				destData[destPosition + 2] = destPixel >>> 8 & 255;
				destData[destPosition + 3] = destPixel & 255;
				break;
			case 1:
				destData[destPosition] = destPixel & 255;
				destData[destPosition + 1] = destPixel >>> 24 & 255;
				destData[destPosition + 2] = destPixel >>> 16 & 255;
				destData[destPosition + 3] = destPixel >>> 8 & 255;
				break;
			case 2:
				destData[destPosition] = destPixel >>> 8 & 255;
				destData[destPosition + 1] = destPixel >>> 16 & 255;
				destData[destPosition + 2] = destPixel >>> 24 & 255;
				destData[destPosition + 3] = destPixel & 255;
				break;
			}
			srcPosition += 4;
			destPosition += 4;
		}
	}
	image.dirty = true;
	image.version++;
};
lime__$internal_graphics_ImageDataUtil.copyPixels = function(image,sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha) {
	if(mergeAlpha == null) {
		mergeAlpha = false;
	}
	if(image.width == sourceImage.width && image.height == sourceImage.height && sourceRect.width == sourceImage.width && sourceRect.height == sourceImage.height && sourceRect.x == 0 && sourceRect.y == 0 && destPoint.x == 0 && destPoint.y == 0 && alphaImage == null && alphaPoint == null && mergeAlpha == false && image.get_format() == sourceImage.get_format()) {
		image.buffer.data.set(sourceImage.buffer.data);
	} else {
		var sourceData = sourceImage.buffer.data;
		var destData = image.buffer.data;
		if(sourceData == null || destData == null) {
			return;
		}
		var sourceView = new lime__$internal_graphics__$ImageDataUtil_ImageDataView(sourceImage,sourceRect);
		var destRect = new lime_math_Rectangle(destPoint.x,destPoint.y,sourceView.width,sourceView.height);
		var destView = new lime__$internal_graphics__$ImageDataUtil_ImageDataView(image,destRect);
		var sourceFormat = sourceImage.buffer.format;
		var destFormat = image.buffer.format;
		var sourcePosition;
		var destPosition;
		var sourceAlpha;
		var destAlpha;
		var oneMinusSourceAlpha;
		var blendAlpha;
		var sourcePixel;
		var destPixel;
		var sourcePremultiplied = sourceImage.buffer.premultiplied;
		var destPremultiplied = image.buffer.premultiplied;
		var sourceBytesPerPixel = sourceImage.buffer.bitsPerPixel / 8 | 0;
		var destBytesPerPixel = image.buffer.bitsPerPixel / 8 | 0;
		var useAlphaImage = alphaImage != null && alphaImage.get_transparent();
		var blend = mergeAlpha || useAlphaImage && !image.get_transparent() || !mergeAlpha && !image.get_transparent() && sourceImage.get_transparent();
		if(!useAlphaImage) {
			if(blend) {
				var _g = 0;
				var _g1 = destView.height;
				while(_g < _g1) {
					var y = _g++;
					sourcePosition = sourceView.byteOffset + sourceView.stride * y;
					destPosition = destView.byteOffset + destView.stride * y;
					var _g2 = 0;
					var _g3 = destView.width;
					while(_g2 < _g3) {
						var x = _g2++;
						var format = sourceFormat;
						var premultiplied = sourcePremultiplied;
						if(premultiplied == null) {
							premultiplied = false;
						}
						if(format == null) {
							format = 0;
						}
						switch(format) {
						case 0:
							sourcePixel = (sourceData[sourcePosition] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition + 2] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
							break;
						case 1:
							sourcePixel = (sourceData[sourcePosition + 1] & 255) << 24 | (sourceData[sourcePosition + 2] & 255) << 16 | (sourceData[sourcePosition + 3] & 255) << 8 | sourceData[sourcePosition] & 255;
							break;
						case 2:
							sourcePixel = (sourceData[sourcePosition + 2] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
							break;
						}
						if(premultiplied) {
							if((sourcePixel & 255) != 0 && (sourcePixel & 255) != 255) {
								lime_math_RGBA.unmult = 255.0 / (sourcePixel & 255);
								sourcePixel = (lime_math_RGBA.__clamp[Math.round((sourcePixel >>> 24 & 255) * lime_math_RGBA.unmult)] & 255) << 24 | (lime_math_RGBA.__clamp[Math.round((sourcePixel >>> 16 & 255) * lime_math_RGBA.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.round((sourcePixel >>> 8 & 255) * lime_math_RGBA.unmult)] & 255) << 8 | sourcePixel & 255 & 255;
							}
						}
						var format1 = destFormat;
						var premultiplied1 = destPremultiplied;
						if(premultiplied1 == null) {
							premultiplied1 = false;
						}
						if(format1 == null) {
							format1 = 0;
						}
						switch(format1) {
						case 0:
							destPixel = (destData[destPosition] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition + 2] & 255) << 8 | destData[destPosition + 3] & 255;
							break;
						case 1:
							destPixel = (destData[destPosition + 1] & 255) << 24 | (destData[destPosition + 2] & 255) << 16 | (destData[destPosition + 3] & 255) << 8 | destData[destPosition] & 255;
							break;
						case 2:
							destPixel = (destData[destPosition + 2] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition] & 255) << 8 | destData[destPosition + 3] & 255;
							break;
						}
						if(premultiplied1) {
							if((destPixel & 255) != 0 && (destPixel & 255) != 255) {
								lime_math_RGBA.unmult = 255.0 / (destPixel & 255);
								destPixel = (lime_math_RGBA.__clamp[Math.round((destPixel >>> 24 & 255) * lime_math_RGBA.unmult)] & 255) << 24 | (lime_math_RGBA.__clamp[Math.round((destPixel >>> 16 & 255) * lime_math_RGBA.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.round((destPixel >>> 8 & 255) * lime_math_RGBA.unmult)] & 255) << 8 | destPixel & 255 & 255;
							}
						}
						sourceAlpha = (sourcePixel & 255) / 255.0;
						destAlpha = (destPixel & 255) / 255.0;
						oneMinusSourceAlpha = 1 - sourceAlpha;
						blendAlpha = sourceAlpha + destAlpha * oneMinusSourceAlpha;
						if(blendAlpha == 0) {
							destPixel = 0;
						} else {
							var value = lime_math_RGBA.__clamp[Math.round(((sourcePixel >>> 24 & 255) * sourceAlpha + (destPixel >>> 24 & 255) * destAlpha * oneMinusSourceAlpha) / blendAlpha)];
							destPixel = (value & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
							var value1 = lime_math_RGBA.__clamp[Math.round(((sourcePixel >>> 16 & 255) * sourceAlpha + (destPixel >>> 16 & 255) * destAlpha * oneMinusSourceAlpha) / blendAlpha)];
							destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (value1 & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
							var value2 = lime_math_RGBA.__clamp[Math.round(((sourcePixel >>> 8 & 255) * sourceAlpha + (destPixel >>> 8 & 255) * destAlpha * oneMinusSourceAlpha) / blendAlpha)];
							destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (value2 & 255) << 8 | destPixel & 255 & 255;
							var value3 = lime_math_RGBA.__clamp[Math.round(blendAlpha * 255.0)];
							destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | value3 & 255;
						}
						var format2 = destFormat;
						var premultiplied2 = destPremultiplied;
						if(premultiplied2 == null) {
							premultiplied2 = false;
						}
						if(format2 == null) {
							format2 = 0;
						}
						if(premultiplied2) {
							if((destPixel & 255) == 0) {
								if(destPixel != 0) {
									destPixel = 0;
								}
							} else if((destPixel & 255) != 255) {
								lime_math_RGBA.a16 = lime_math_RGBA.__alpha16[destPixel & 255];
								destPixel = ((destPixel >>> 24 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 24 | ((destPixel >>> 16 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 16 | ((destPixel >>> 8 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 8 | destPixel & 255 & 255;
							}
						}
						switch(format2) {
						case 0:
							destData[destPosition] = destPixel >>> 24 & 255;
							destData[destPosition + 1] = destPixel >>> 16 & 255;
							destData[destPosition + 2] = destPixel >>> 8 & 255;
							destData[destPosition + 3] = destPixel & 255;
							break;
						case 1:
							destData[destPosition] = destPixel & 255;
							destData[destPosition + 1] = destPixel >>> 24 & 255;
							destData[destPosition + 2] = destPixel >>> 16 & 255;
							destData[destPosition + 3] = destPixel >>> 8 & 255;
							break;
						case 2:
							destData[destPosition] = destPixel >>> 8 & 255;
							destData[destPosition + 1] = destPixel >>> 16 & 255;
							destData[destPosition + 2] = destPixel >>> 24 & 255;
							destData[destPosition + 3] = destPixel & 255;
							break;
						}
						sourcePosition += 4;
						destPosition += 4;
					}
				}
			} else if(sourceFormat == destFormat && sourcePremultiplied == destPremultiplied && sourceBytesPerPixel == destBytesPerPixel) {
				var _g = 0;
				var _g1 = destView.height;
				while(_g < _g1) {
					var y = _g++;
					sourcePosition = sourceView.byteOffset + sourceView.stride * y;
					destPosition = destView.byteOffset + destView.stride * y;
					destData.set(sourceData.subarray(sourcePosition,sourcePosition + destView.width * destBytesPerPixel),destPosition);
				}
			} else {
				var _g = 0;
				var _g1 = destView.height;
				while(_g < _g1) {
					var y = _g++;
					sourcePosition = sourceView.byteOffset + sourceView.stride * y;
					destPosition = destView.byteOffset + destView.stride * y;
					var _g2 = 0;
					var _g3 = destView.width;
					while(_g2 < _g3) {
						var x = _g2++;
						var format = sourceFormat;
						var premultiplied = sourcePremultiplied;
						if(premultiplied == null) {
							premultiplied = false;
						}
						if(format == null) {
							format = 0;
						}
						switch(format) {
						case 0:
							sourcePixel = (sourceData[sourcePosition] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition + 2] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
							break;
						case 1:
							sourcePixel = (sourceData[sourcePosition + 1] & 255) << 24 | (sourceData[sourcePosition + 2] & 255) << 16 | (sourceData[sourcePosition + 3] & 255) << 8 | sourceData[sourcePosition] & 255;
							break;
						case 2:
							sourcePixel = (sourceData[sourcePosition + 2] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
							break;
						}
						if(premultiplied) {
							if((sourcePixel & 255) != 0 && (sourcePixel & 255) != 255) {
								lime_math_RGBA.unmult = 255.0 / (sourcePixel & 255);
								sourcePixel = (lime_math_RGBA.__clamp[Math.round((sourcePixel >>> 24 & 255) * lime_math_RGBA.unmult)] & 255) << 24 | (lime_math_RGBA.__clamp[Math.round((sourcePixel >>> 16 & 255) * lime_math_RGBA.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.round((sourcePixel >>> 8 & 255) * lime_math_RGBA.unmult)] & 255) << 8 | sourcePixel & 255 & 255;
							}
						}
						var format1 = destFormat;
						var premultiplied1 = destPremultiplied;
						if(premultiplied1 == null) {
							premultiplied1 = false;
						}
						if(format1 == null) {
							format1 = 0;
						}
						if(premultiplied1) {
							if((sourcePixel & 255) == 0) {
								if(sourcePixel != 0) {
									sourcePixel = 0;
								}
							} else if((sourcePixel & 255) != 255) {
								lime_math_RGBA.a16 = lime_math_RGBA.__alpha16[sourcePixel & 255];
								sourcePixel = ((sourcePixel >>> 24 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 24 | ((sourcePixel >>> 16 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 16 | ((sourcePixel >>> 8 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 8 | sourcePixel & 255 & 255;
							}
						}
						switch(format1) {
						case 0:
							destData[destPosition] = sourcePixel >>> 24 & 255;
							destData[destPosition + 1] = sourcePixel >>> 16 & 255;
							destData[destPosition + 2] = sourcePixel >>> 8 & 255;
							destData[destPosition + 3] = sourcePixel & 255;
							break;
						case 1:
							destData[destPosition] = sourcePixel & 255;
							destData[destPosition + 1] = sourcePixel >>> 24 & 255;
							destData[destPosition + 2] = sourcePixel >>> 16 & 255;
							destData[destPosition + 3] = sourcePixel >>> 8 & 255;
							break;
						case 2:
							destData[destPosition] = sourcePixel >>> 8 & 255;
							destData[destPosition + 1] = sourcePixel >>> 16 & 255;
							destData[destPosition + 2] = sourcePixel >>> 24 & 255;
							destData[destPosition + 3] = sourcePixel & 255;
							break;
						}
						sourcePosition += 4;
						destPosition += 4;
					}
				}
			}
		} else {
			var alphaData = alphaImage.buffer.data;
			var alphaFormat = alphaImage.buffer.format;
			var alphaPosition;
			var alphaPixel;
			var alphaView = new lime__$internal_graphics__$ImageDataUtil_ImageDataView(alphaImage,new lime_math_Rectangle(sourceView.x + (alphaPoint == null ? 0 : alphaPoint.x),sourceView.y + (alphaPoint == null ? 0 : alphaPoint.y),sourceView.width,sourceView.height));
			destView.clip(destPoint.x | 0,destPoint.y | 0,alphaView.width,alphaView.height);
			if(blend) {
				var _g = 0;
				var _g1 = destView.height;
				while(_g < _g1) {
					var y = _g++;
					sourcePosition = sourceView.byteOffset + sourceView.stride * y;
					destPosition = destView.byteOffset + destView.stride * y;
					alphaPosition = alphaView.byteOffset + alphaView.stride * y;
					var _g2 = 0;
					var _g3 = destView.width;
					while(_g2 < _g3) {
						var x = _g2++;
						var format = sourceFormat;
						var premultiplied = sourcePremultiplied;
						if(premultiplied == null) {
							premultiplied = false;
						}
						if(format == null) {
							format = 0;
						}
						switch(format) {
						case 0:
							sourcePixel = (sourceData[sourcePosition] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition + 2] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
							break;
						case 1:
							sourcePixel = (sourceData[sourcePosition + 1] & 255) << 24 | (sourceData[sourcePosition + 2] & 255) << 16 | (sourceData[sourcePosition + 3] & 255) << 8 | sourceData[sourcePosition] & 255;
							break;
						case 2:
							sourcePixel = (sourceData[sourcePosition + 2] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
							break;
						}
						if(premultiplied) {
							if((sourcePixel & 255) != 0 && (sourcePixel & 255) != 255) {
								lime_math_RGBA.unmult = 255.0 / (sourcePixel & 255);
								sourcePixel = (lime_math_RGBA.__clamp[Math.round((sourcePixel >>> 24 & 255) * lime_math_RGBA.unmult)] & 255) << 24 | (lime_math_RGBA.__clamp[Math.round((sourcePixel >>> 16 & 255) * lime_math_RGBA.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.round((sourcePixel >>> 8 & 255) * lime_math_RGBA.unmult)] & 255) << 8 | sourcePixel & 255 & 255;
							}
						}
						var format1 = destFormat;
						var premultiplied1 = destPremultiplied;
						if(premultiplied1 == null) {
							premultiplied1 = false;
						}
						if(format1 == null) {
							format1 = 0;
						}
						switch(format1) {
						case 0:
							destPixel = (destData[destPosition] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition + 2] & 255) << 8 | destData[destPosition + 3] & 255;
							break;
						case 1:
							destPixel = (destData[destPosition + 1] & 255) << 24 | (destData[destPosition + 2] & 255) << 16 | (destData[destPosition + 3] & 255) << 8 | destData[destPosition] & 255;
							break;
						case 2:
							destPixel = (destData[destPosition + 2] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition] & 255) << 8 | destData[destPosition + 3] & 255;
							break;
						}
						if(premultiplied1) {
							if((destPixel & 255) != 0 && (destPixel & 255) != 255) {
								lime_math_RGBA.unmult = 255.0 / (destPixel & 255);
								destPixel = (lime_math_RGBA.__clamp[Math.round((destPixel >>> 24 & 255) * lime_math_RGBA.unmult)] & 255) << 24 | (lime_math_RGBA.__clamp[Math.round((destPixel >>> 16 & 255) * lime_math_RGBA.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.round((destPixel >>> 8 & 255) * lime_math_RGBA.unmult)] & 255) << 8 | destPixel & 255 & 255;
							}
						}
						var format2 = alphaFormat;
						var premultiplied2 = false;
						if(premultiplied2 == null) {
							premultiplied2 = false;
						}
						if(format2 == null) {
							format2 = 0;
						}
						switch(format2) {
						case 0:
							alphaPixel = (alphaData[alphaPosition] & 255) << 24 | (alphaData[alphaPosition + 1] & 255) << 16 | (alphaData[alphaPosition + 2] & 255) << 8 | alphaData[alphaPosition + 3] & 255;
							break;
						case 1:
							alphaPixel = (alphaData[alphaPosition + 1] & 255) << 24 | (alphaData[alphaPosition + 2] & 255) << 16 | (alphaData[alphaPosition + 3] & 255) << 8 | alphaData[alphaPosition] & 255;
							break;
						case 2:
							alphaPixel = (alphaData[alphaPosition + 2] & 255) << 24 | (alphaData[alphaPosition + 1] & 255) << 16 | (alphaData[alphaPosition] & 255) << 8 | alphaData[alphaPosition + 3] & 255;
							break;
						}
						if(premultiplied2) {
							if((alphaPixel & 255) != 0 && (alphaPixel & 255) != 255) {
								lime_math_RGBA.unmult = 255.0 / (alphaPixel & 255);
								alphaPixel = (lime_math_RGBA.__clamp[Math.round((alphaPixel >>> 24 & 255) * lime_math_RGBA.unmult)] & 255) << 24 | (lime_math_RGBA.__clamp[Math.round((alphaPixel >>> 16 & 255) * lime_math_RGBA.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.round((alphaPixel >>> 8 & 255) * lime_math_RGBA.unmult)] & 255) << 8 | alphaPixel & 255 & 255;
							}
						}
						sourceAlpha = (alphaPixel & 255) / 255.0 * ((sourcePixel & 255) / 255.0);
						if(sourceAlpha > 0) {
							destAlpha = (destPixel & 255) / 255.0;
							oneMinusSourceAlpha = 1 - sourceAlpha;
							blendAlpha = sourceAlpha + destAlpha * oneMinusSourceAlpha;
							var value = lime_math_RGBA.__clamp[Math.round(((sourcePixel >>> 24 & 255) * sourceAlpha + (destPixel >>> 24 & 255) * destAlpha * oneMinusSourceAlpha) / blendAlpha)];
							destPixel = (value & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
							var value1 = lime_math_RGBA.__clamp[Math.round(((sourcePixel >>> 16 & 255) * sourceAlpha + (destPixel >>> 16 & 255) * destAlpha * oneMinusSourceAlpha) / blendAlpha)];
							destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (value1 & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
							var value2 = lime_math_RGBA.__clamp[Math.round(((sourcePixel >>> 8 & 255) * sourceAlpha + (destPixel >>> 8 & 255) * destAlpha * oneMinusSourceAlpha) / blendAlpha)];
							destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (value2 & 255) << 8 | destPixel & 255 & 255;
							var value3 = lime_math_RGBA.__clamp[Math.round(blendAlpha * 255.0)];
							destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | value3 & 255;
							var format3 = destFormat;
							var premultiplied3 = destPremultiplied;
							if(premultiplied3 == null) {
								premultiplied3 = false;
							}
							if(format3 == null) {
								format3 = 0;
							}
							if(premultiplied3) {
								if((destPixel & 255) == 0) {
									if(destPixel != 0) {
										destPixel = 0;
									}
								} else if((destPixel & 255) != 255) {
									lime_math_RGBA.a16 = lime_math_RGBA.__alpha16[destPixel & 255];
									destPixel = ((destPixel >>> 24 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 24 | ((destPixel >>> 16 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 16 | ((destPixel >>> 8 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 8 | destPixel & 255 & 255;
								}
							}
							switch(format3) {
							case 0:
								destData[destPosition] = destPixel >>> 24 & 255;
								destData[destPosition + 1] = destPixel >>> 16 & 255;
								destData[destPosition + 2] = destPixel >>> 8 & 255;
								destData[destPosition + 3] = destPixel & 255;
								break;
							case 1:
								destData[destPosition] = destPixel & 255;
								destData[destPosition + 1] = destPixel >>> 24 & 255;
								destData[destPosition + 2] = destPixel >>> 16 & 255;
								destData[destPosition + 3] = destPixel >>> 8 & 255;
								break;
							case 2:
								destData[destPosition] = destPixel >>> 8 & 255;
								destData[destPosition + 1] = destPixel >>> 16 & 255;
								destData[destPosition + 2] = destPixel >>> 24 & 255;
								destData[destPosition + 3] = destPixel & 255;
								break;
							}
						}
						sourcePosition += 4;
						destPosition += 4;
						alphaPosition += 4;
					}
				}
			} else {
				var _g = 0;
				var _g1 = destView.height;
				while(_g < _g1) {
					var y = _g++;
					sourcePosition = sourceView.byteOffset + sourceView.stride * y;
					destPosition = destView.byteOffset + destView.stride * y;
					alphaPosition = alphaView.byteOffset + alphaView.stride * y;
					var _g2 = 0;
					var _g3 = destView.width;
					while(_g2 < _g3) {
						var x = _g2++;
						var format = sourceFormat;
						var premultiplied = sourcePremultiplied;
						if(premultiplied == null) {
							premultiplied = false;
						}
						if(format == null) {
							format = 0;
						}
						switch(format) {
						case 0:
							sourcePixel = (sourceData[sourcePosition] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition + 2] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
							break;
						case 1:
							sourcePixel = (sourceData[sourcePosition + 1] & 255) << 24 | (sourceData[sourcePosition + 2] & 255) << 16 | (sourceData[sourcePosition + 3] & 255) << 8 | sourceData[sourcePosition] & 255;
							break;
						case 2:
							sourcePixel = (sourceData[sourcePosition + 2] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
							break;
						}
						if(premultiplied) {
							if((sourcePixel & 255) != 0 && (sourcePixel & 255) != 255) {
								lime_math_RGBA.unmult = 255.0 / (sourcePixel & 255);
								sourcePixel = (lime_math_RGBA.__clamp[Math.round((sourcePixel >>> 24 & 255) * lime_math_RGBA.unmult)] & 255) << 24 | (lime_math_RGBA.__clamp[Math.round((sourcePixel >>> 16 & 255) * lime_math_RGBA.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.round((sourcePixel >>> 8 & 255) * lime_math_RGBA.unmult)] & 255) << 8 | sourcePixel & 255 & 255;
							}
						}
						var format1 = alphaFormat;
						var premultiplied1 = false;
						if(premultiplied1 == null) {
							premultiplied1 = false;
						}
						if(format1 == null) {
							format1 = 0;
						}
						switch(format1) {
						case 0:
							alphaPixel = (alphaData[alphaPosition] & 255) << 24 | (alphaData[alphaPosition + 1] & 255) << 16 | (alphaData[alphaPosition + 2] & 255) << 8 | alphaData[alphaPosition + 3] & 255;
							break;
						case 1:
							alphaPixel = (alphaData[alphaPosition + 1] & 255) << 24 | (alphaData[alphaPosition + 2] & 255) << 16 | (alphaData[alphaPosition + 3] & 255) << 8 | alphaData[alphaPosition] & 255;
							break;
						case 2:
							alphaPixel = (alphaData[alphaPosition + 2] & 255) << 24 | (alphaData[alphaPosition + 1] & 255) << 16 | (alphaData[alphaPosition] & 255) << 8 | alphaData[alphaPosition + 3] & 255;
							break;
						}
						if(premultiplied1) {
							if((alphaPixel & 255) != 0 && (alphaPixel & 255) != 255) {
								lime_math_RGBA.unmult = 255.0 / (alphaPixel & 255);
								alphaPixel = (lime_math_RGBA.__clamp[Math.round((alphaPixel >>> 24 & 255) * lime_math_RGBA.unmult)] & 255) << 24 | (lime_math_RGBA.__clamp[Math.round((alphaPixel >>> 16 & 255) * lime_math_RGBA.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.round((alphaPixel >>> 8 & 255) * lime_math_RGBA.unmult)] & 255) << 8 | alphaPixel & 255 & 255;
							}
						}
						var value = Math.round((sourcePixel & 255) * ((alphaPixel & 255) / 255));
						sourcePixel = (sourcePixel >>> 24 & 255 & 255) << 24 | (sourcePixel >>> 16 & 255 & 255) << 16 | (sourcePixel >>> 8 & 255 & 255) << 8 | value & 255;
						var format2 = destFormat;
						var premultiplied2 = destPremultiplied;
						if(premultiplied2 == null) {
							premultiplied2 = false;
						}
						if(format2 == null) {
							format2 = 0;
						}
						if(premultiplied2) {
							if((sourcePixel & 255) == 0) {
								if(sourcePixel != 0) {
									sourcePixel = 0;
								}
							} else if((sourcePixel & 255) != 255) {
								lime_math_RGBA.a16 = lime_math_RGBA.__alpha16[sourcePixel & 255];
								sourcePixel = ((sourcePixel >>> 24 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 24 | ((sourcePixel >>> 16 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 16 | ((sourcePixel >>> 8 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 8 | sourcePixel & 255 & 255;
							}
						}
						switch(format2) {
						case 0:
							destData[destPosition] = sourcePixel >>> 24 & 255;
							destData[destPosition + 1] = sourcePixel >>> 16 & 255;
							destData[destPosition + 2] = sourcePixel >>> 8 & 255;
							destData[destPosition + 3] = sourcePixel & 255;
							break;
						case 1:
							destData[destPosition] = sourcePixel & 255;
							destData[destPosition + 1] = sourcePixel >>> 24 & 255;
							destData[destPosition + 2] = sourcePixel >>> 16 & 255;
							destData[destPosition + 3] = sourcePixel >>> 8 & 255;
							break;
						case 2:
							destData[destPosition] = sourcePixel >>> 8 & 255;
							destData[destPosition + 1] = sourcePixel >>> 16 & 255;
							destData[destPosition + 2] = sourcePixel >>> 24 & 255;
							destData[destPosition + 3] = sourcePixel & 255;
							break;
						}
						sourcePosition += 4;
						destPosition += 4;
						alphaPosition += 4;
					}
				}
			}
		}
	}
	image.dirty = true;
	image.version++;
};
lime__$internal_graphics_ImageDataUtil.fillRect = function(image,rect,color,format) {
	var fillColor;
	switch(format) {
	case 1:
		var argb = color;
		var this1 = 0;
		var rgba = this1;
		rgba = (argb >>> 16 & 255 & 255) << 24 | (argb >>> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >>> 24 & 255 & 255;
		fillColor = rgba;
		break;
	case 2:
		var bgra = color;
		var this1 = 0;
		var rgba = this1;
		rgba = (bgra >>> 8 & 255 & 255) << 24 | (bgra >>> 16 & 255 & 255) << 16 | (bgra >>> 24 & 255 & 255) << 8 | bgra & 255 & 255;
		fillColor = rgba;
		break;
	default:
		fillColor = color;
	}
	if(!image.get_transparent()) {
		fillColor = (fillColor >>> 24 & 255 & 255) << 24 | (fillColor >>> 16 & 255 & 255) << 16 | (fillColor >>> 8 & 255 & 255) << 8 | 255;
	}
	var data = image.buffer.data;
	if(data == null) {
		return;
	}
	var format = image.buffer.format;
	var premultiplied = image.buffer.premultiplied;
	if(premultiplied) {
		if((fillColor & 255) == 0) {
			if(fillColor != 0) {
				fillColor = 0;
			}
		} else if((fillColor & 255) != 255) {
			lime_math_RGBA.a16 = lime_math_RGBA.__alpha16[fillColor & 255];
			fillColor = ((fillColor >>> 24 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 24 | ((fillColor >>> 16 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 16 | ((fillColor >>> 8 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 8 | fillColor & 255 & 255;
		}
	}
	var dataView = new lime__$internal_graphics__$ImageDataUtil_ImageDataView(image,rect);
	var row;
	var _g = 0;
	var _g1 = dataView.height;
	while(_g < _g1) {
		var y = _g++;
		row = dataView.byteOffset + dataView.stride * y;
		var _g2 = 0;
		var _g3 = dataView.width;
		while(_g2 < _g3) {
			var x = _g2++;
			var offset = row + x * 4;
			var format1 = format;
			var premultiplied = false;
			if(premultiplied == null) {
				premultiplied = false;
			}
			if(format1 == null) {
				format1 = 0;
			}
			if(premultiplied) {
				if((fillColor & 255) == 0) {
					if(fillColor != 0) {
						fillColor = 0;
					}
				} else if((fillColor & 255) != 255) {
					lime_math_RGBA.a16 = lime_math_RGBA.__alpha16[fillColor & 255];
					fillColor = ((fillColor >>> 24 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 24 | ((fillColor >>> 16 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 16 | ((fillColor >>> 8 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 8 | fillColor & 255 & 255;
				}
			}
			switch(format1) {
			case 0:
				data[offset] = fillColor >>> 24 & 255;
				data[offset + 1] = fillColor >>> 16 & 255;
				data[offset + 2] = fillColor >>> 8 & 255;
				data[offset + 3] = fillColor & 255;
				break;
			case 1:
				data[offset] = fillColor & 255;
				data[offset + 1] = fillColor >>> 24 & 255;
				data[offset + 2] = fillColor >>> 16 & 255;
				data[offset + 3] = fillColor >>> 8 & 255;
				break;
			case 2:
				data[offset] = fillColor >>> 8 & 255;
				data[offset + 1] = fillColor >>> 16 & 255;
				data[offset + 2] = fillColor >>> 24 & 255;
				data[offset + 3] = fillColor & 255;
				break;
			}
		}
	}
	image.dirty = true;
	image.version++;
};
lime__$internal_graphics_ImageDataUtil.floodFill = function(image,x,y,color,format) {
	var data = image.buffer.data;
	if(data == null) {
		return;
	}
	if(format == 1) {
		color = (color & 16777215) << 8 | color >> 24 & 255;
	}
	var format = image.buffer.format;
	var premultiplied = image.buffer.premultiplied;
	var fillColor = color;
	var hitColor;
	var offset = (y + image.offsetY) * (image.buffer.width * 4) + (x + image.offsetX) * 4;
	var format1 = format;
	var premultiplied1 = premultiplied;
	if(premultiplied1 == null) {
		premultiplied1 = false;
	}
	if(format1 == null) {
		format1 = 0;
	}
	switch(format1) {
	case 0:
		hitColor = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
		break;
	case 1:
		hitColor = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
		break;
	case 2:
		hitColor = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
		break;
	}
	if(premultiplied1) {
		if((hitColor & 255) != 0 && (hitColor & 255) != 255) {
			lime_math_RGBA.unmult = 255.0 / (hitColor & 255);
			hitColor = (lime_math_RGBA.__clamp[Math.round((hitColor >>> 24 & 255) * lime_math_RGBA.unmult)] & 255) << 24 | (lime_math_RGBA.__clamp[Math.round((hitColor >>> 16 & 255) * lime_math_RGBA.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.round((hitColor >>> 8 & 255) * lime_math_RGBA.unmult)] & 255) << 8 | hitColor & 255 & 255;
		}
	}
	if(!image.get_transparent()) {
		fillColor = (fillColor >>> 24 & 255 & 255) << 24 | (fillColor >>> 16 & 255 & 255) << 16 | (fillColor >>> 8 & 255 & 255) << 8 | 255;
		hitColor = (hitColor >>> 24 & 255 & 255) << 24 | (hitColor >>> 16 & 255 & 255) << 16 | (hitColor >>> 8 & 255 & 255) << 8 | 255;
	}
	if(fillColor == hitColor) {
		return;
	}
	if(premultiplied) {
		if((fillColor & 255) == 0) {
			if(fillColor != 0) {
				fillColor = 0;
			}
		} else if((fillColor & 255) != 255) {
			lime_math_RGBA.a16 = lime_math_RGBA.__alpha16[fillColor & 255];
			fillColor = ((fillColor >>> 24 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 24 | ((fillColor >>> 16 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 16 | ((fillColor >>> 8 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 8 | fillColor & 255 & 255;
		}
	}
	var dx = [0,-1,1,0];
	var dy = [-1,0,0,1];
	var minX = -image.offsetX;
	var minY = -image.offsetY;
	var maxX = minX + image.width;
	var maxY = minY + image.height;
	var queue = [];
	queue.push(x);
	queue.push(y);
	var curPointX;
	var curPointY;
	var nextPointX;
	var nextPointY;
	var nextPointOffset;
	var readColor;
	while(queue.length > 0) {
		curPointY = queue.pop();
		curPointX = queue.pop();
		var _g = 0;
		while(_g < 4) {
			var i = _g++;
			nextPointX = curPointX + dx[i];
			nextPointY = curPointY + dy[i];
			if(nextPointX < minX || nextPointY < minY || nextPointX >= maxX || nextPointY >= maxY) {
				continue;
			}
			nextPointOffset = (nextPointY * image.width + nextPointX) * 4;
			var format1 = format;
			var premultiplied1 = premultiplied;
			if(premultiplied1 == null) {
				premultiplied1 = false;
			}
			if(format1 == null) {
				format1 = 0;
			}
			switch(format1) {
			case 0:
				readColor = (data[nextPointOffset] & 255) << 24 | (data[nextPointOffset + 1] & 255) << 16 | (data[nextPointOffset + 2] & 255) << 8 | data[nextPointOffset + 3] & 255;
				break;
			case 1:
				readColor = (data[nextPointOffset + 1] & 255) << 24 | (data[nextPointOffset + 2] & 255) << 16 | (data[nextPointOffset + 3] & 255) << 8 | data[nextPointOffset] & 255;
				break;
			case 2:
				readColor = (data[nextPointOffset + 2] & 255) << 24 | (data[nextPointOffset + 1] & 255) << 16 | (data[nextPointOffset] & 255) << 8 | data[nextPointOffset + 3] & 255;
				break;
			}
			if(premultiplied1) {
				if((readColor & 255) != 0 && (readColor & 255) != 255) {
					lime_math_RGBA.unmult = 255.0 / (readColor & 255);
					readColor = (lime_math_RGBA.__clamp[Math.round((readColor >>> 24 & 255) * lime_math_RGBA.unmult)] & 255) << 24 | (lime_math_RGBA.__clamp[Math.round((readColor >>> 16 & 255) * lime_math_RGBA.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.round((readColor >>> 8 & 255) * lime_math_RGBA.unmult)] & 255) << 8 | readColor & 255 & 255;
				}
			}
			if(readColor == hitColor) {
				var format2 = format;
				var premultiplied2 = false;
				if(premultiplied2 == null) {
					premultiplied2 = false;
				}
				if(format2 == null) {
					format2 = 0;
				}
				if(premultiplied2) {
					if((fillColor & 255) == 0) {
						if(fillColor != 0) {
							fillColor = 0;
						}
					} else if((fillColor & 255) != 255) {
						lime_math_RGBA.a16 = lime_math_RGBA.__alpha16[fillColor & 255];
						fillColor = ((fillColor >>> 24 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 24 | ((fillColor >>> 16 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 16 | ((fillColor >>> 8 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 8 | fillColor & 255 & 255;
					}
				}
				switch(format2) {
				case 0:
					data[nextPointOffset] = fillColor >>> 24 & 255;
					data[nextPointOffset + 1] = fillColor >>> 16 & 255;
					data[nextPointOffset + 2] = fillColor >>> 8 & 255;
					data[nextPointOffset + 3] = fillColor & 255;
					break;
				case 1:
					data[nextPointOffset] = fillColor & 255;
					data[nextPointOffset + 1] = fillColor >>> 24 & 255;
					data[nextPointOffset + 2] = fillColor >>> 16 & 255;
					data[nextPointOffset + 3] = fillColor >>> 8 & 255;
					break;
				case 2:
					data[nextPointOffset] = fillColor >>> 8 & 255;
					data[nextPointOffset + 1] = fillColor >>> 16 & 255;
					data[nextPointOffset + 2] = fillColor >>> 24 & 255;
					data[nextPointOffset + 3] = fillColor & 255;
					break;
				}
				queue.push(nextPointX);
				queue.push(nextPointY);
			}
		}
	}
	image.dirty = true;
	image.version++;
};
lime__$internal_graphics_ImageDataUtil.gaussianBlur = function(image,sourceImage,sourceRect,destPoint,blurX,blurY,quality,strength,color) {
	if(strength == null) {
		strength = 1;
	}
	if(quality == null) {
		quality = 1;
	}
	if(blurY == null) {
		blurY = 4;
	}
	if(blurX == null) {
		blurX = 4;
	}
	var imagePremultiplied = image.get_premultiplied();
	if(imagePremultiplied) {
		image.set_premultiplied(false);
	}
	lime__$internal_graphics_StackBlur.blur(image,sourceImage,sourceRect,destPoint,blurX,blurY,quality);
	image.dirty = true;
	image.version++;
	if(imagePremultiplied) {
		image.set_premultiplied(true);
	}
	return image;
};
lime__$internal_graphics_ImageDataUtil.getColorBoundsRect = function(image,mask,color,findColor,format) {
	var left = image.width + 1;
	var right = 0;
	var top = image.height + 1;
	var bottom = 0;
	var _color;
	var _mask;
	switch(format) {
	case 1:
		var argb = color;
		var this1 = 0;
		var rgba = this1;
		rgba = (argb >>> 16 & 255 & 255) << 24 | (argb >>> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >>> 24 & 255 & 255;
		_color = rgba;
		var argb = mask;
		var this1 = 0;
		var rgba = this1;
		rgba = (argb >>> 16 & 255 & 255) << 24 | (argb >>> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >>> 24 & 255 & 255;
		_mask = rgba;
		break;
	case 2:
		var bgra = color;
		var this1 = 0;
		var rgba = this1;
		rgba = (bgra >>> 8 & 255 & 255) << 24 | (bgra >>> 16 & 255 & 255) << 16 | (bgra >>> 24 & 255 & 255) << 8 | bgra & 255 & 255;
		_color = rgba;
		var bgra = mask;
		var this1 = 0;
		var rgba = this1;
		rgba = (bgra >>> 8 & 255 & 255) << 24 | (bgra >>> 16 & 255 & 255) << 16 | (bgra >>> 24 & 255 & 255) << 8 | bgra & 255 & 255;
		_mask = rgba;
		break;
	default:
		_color = color;
		_mask = mask;
	}
	if(!image.get_transparent()) {
		_color = (_color >>> 24 & 255 & 255) << 24 | (_color >>> 16 & 255 & 255) << 16 | (_color >>> 8 & 255 & 255) << 8 | 255;
		_mask = (_mask >>> 24 & 255 & 255) << 24 | (_mask >>> 16 & 255 & 255) << 16 | (_mask >>> 8 & 255 & 255) << 8 | 255;
	}
	var pixel;
	var hit;
	var _g = 0;
	var _g1 = image.width;
	while(_g < _g1) {
		var x = _g++;
		hit = false;
		var _g2 = 0;
		var _g3 = image.height;
		while(_g2 < _g3) {
			var y = _g2++;
			pixel = image.getPixel32(x,y,0);
			hit = findColor ? (pixel & _mask) == _color : (pixel & _mask) != _color;
			if(hit) {
				if(x < left) {
					left = x;
				}
				break;
			}
		}
		if(hit) {
			break;
		}
	}
	var ix;
	var _g = 0;
	var _g1 = image.width;
	while(_g < _g1) {
		var x = _g++;
		ix = image.width - 1 - x;
		hit = false;
		var _g2 = 0;
		var _g3 = image.height;
		while(_g2 < _g3) {
			var y = _g2++;
			pixel = image.getPixel32(ix,y,0);
			hit = findColor ? (pixel & _mask) == _color : (pixel & _mask) != _color;
			if(hit) {
				if(ix > right) {
					right = ix;
				}
				break;
			}
		}
		if(hit) {
			break;
		}
	}
	var _g = 0;
	var _g1 = image.height;
	while(_g < _g1) {
		var y = _g++;
		hit = false;
		var _g2 = 0;
		var _g3 = image.width;
		while(_g2 < _g3) {
			var x = _g2++;
			pixel = image.getPixel32(x,y,0);
			hit = findColor ? (pixel & _mask) == _color : (pixel & _mask) != _color;
			if(hit) {
				if(y < top) {
					top = y;
				}
				break;
			}
		}
		if(hit) {
			break;
		}
	}
	var iy;
	var _g = 0;
	var _g1 = image.height;
	while(_g < _g1) {
		var y = _g++;
		iy = image.height - 1 - y;
		hit = false;
		var _g2 = 0;
		var _g3 = image.width;
		while(_g2 < _g3) {
			var x = _g2++;
			pixel = image.getPixel32(x,iy,0);
			hit = findColor ? (pixel & _mask) == _color : (pixel & _mask) != _color;
			if(hit) {
				if(iy > bottom) {
					bottom = iy;
				}
				break;
			}
		}
		if(hit) {
			break;
		}
	}
	var w = right - left;
	var h = bottom - top;
	if(w > 0) {
		++w;
	}
	if(h > 0) {
		++h;
	}
	if(w < 0) {
		w = 0;
	}
	if(h < 0) {
		h = 0;
	}
	if(left == right) {
		w = 1;
	}
	if(top == bottom) {
		h = 1;
	}
	if(left > image.width) {
		left = 0;
	}
	if(top > image.height) {
		top = 0;
	}
	return new lime_math_Rectangle(left,top,w,h);
};
lime__$internal_graphics_ImageDataUtil.getPixel = function(image,x,y,format) {
	var pixel;
	var data = image.buffer.data;
	var offset = 4 * (y + image.offsetY) * image.buffer.width + (x + image.offsetX) * 4;
	var format1 = image.buffer.format;
	var premultiplied = image.buffer.premultiplied;
	if(premultiplied == null) {
		premultiplied = false;
	}
	if(format1 == null) {
		format1 = 0;
	}
	switch(format1) {
	case 0:
		pixel = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
		break;
	case 1:
		pixel = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
		break;
	case 2:
		pixel = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
		break;
	}
	if(premultiplied) {
		if((pixel & 255) != 0 && (pixel & 255) != 255) {
			lime_math_RGBA.unmult = 255.0 / (pixel & 255);
			pixel = (lime_math_RGBA.__clamp[Math.round((pixel >>> 24 & 255) * lime_math_RGBA.unmult)] & 255) << 24 | (lime_math_RGBA.__clamp[Math.round((pixel >>> 16 & 255) * lime_math_RGBA.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.round((pixel >>> 8 & 255) * lime_math_RGBA.unmult)] & 255) << 8 | pixel & 255 & 255;
		}
	}
	pixel = (pixel >>> 24 & 255 & 255) << 24 | (pixel >>> 16 & 255 & 255) << 16 | (pixel >>> 8 & 255 & 255) << 8 | 0;
	switch(format) {
	case 1:
		var this1 = 0;
		var argb = this1;
		argb = (pixel & 255 & 255) << 24 | (pixel >>> 24 & 255 & 255) << 16 | (pixel >>> 16 & 255 & 255) << 8 | pixel >>> 8 & 255 & 255;
		return argb;
	case 2:
		var this1 = 0;
		var bgra = this1;
		bgra = (pixel >>> 8 & 255 & 255) << 24 | (pixel >>> 16 & 255 & 255) << 16 | (pixel >>> 24 & 255 & 255) << 8 | pixel & 255 & 255;
		return bgra;
	default:
		return pixel;
	}
};
lime__$internal_graphics_ImageDataUtil.getPixel32 = function(image,x,y,format) {
	var pixel;
	var data = image.buffer.data;
	var offset = 4 * (y + image.offsetY) * image.buffer.width + (x + image.offsetX) * 4;
	var format1 = image.buffer.format;
	var premultiplied = image.buffer.premultiplied;
	if(premultiplied == null) {
		premultiplied = false;
	}
	if(format1 == null) {
		format1 = 0;
	}
	switch(format1) {
	case 0:
		pixel = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
		break;
	case 1:
		pixel = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
		break;
	case 2:
		pixel = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
		break;
	}
	if(premultiplied) {
		if((pixel & 255) != 0 && (pixel & 255) != 255) {
			lime_math_RGBA.unmult = 255.0 / (pixel & 255);
			pixel = (lime_math_RGBA.__clamp[Math.round((pixel >>> 24 & 255) * lime_math_RGBA.unmult)] & 255) << 24 | (lime_math_RGBA.__clamp[Math.round((pixel >>> 16 & 255) * lime_math_RGBA.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.round((pixel >>> 8 & 255) * lime_math_RGBA.unmult)] & 255) << 8 | pixel & 255 & 255;
		}
	}
	switch(format) {
	case 1:
		var this1 = 0;
		var argb = this1;
		argb = (pixel & 255 & 255) << 24 | (pixel >>> 24 & 255 & 255) << 16 | (pixel >>> 16 & 255 & 255) << 8 | pixel >>> 8 & 255 & 255;
		return argb;
	case 2:
		var this1 = 0;
		var bgra = this1;
		bgra = (pixel >>> 8 & 255 & 255) << 24 | (pixel >>> 16 & 255 & 255) << 16 | (pixel >>> 24 & 255 & 255) << 8 | pixel & 255 & 255;
		return bgra;
	default:
		return pixel;
	}
};
lime__$internal_graphics_ImageDataUtil.getPixels = function(image,rect,format) {
	if(image.buffer.data == null) {
		return null;
	}
	var length = rect.width * rect.height | 0;
	var bytes = new haxe_io_Bytes(new ArrayBuffer(length * 4));
	var data = image.buffer.data;
	var sourceFormat = image.buffer.format;
	var premultiplied = image.buffer.premultiplied;
	var dataView = new lime__$internal_graphics__$ImageDataUtil_ImageDataView(image,rect);
	var position;
	var argb;
	var bgra;
	var pixel;
	var destPosition = 0;
	var _g = 0;
	var _g1 = dataView.height;
	while(_g < _g1) {
		var y = _g++;
		position = dataView.byteOffset + dataView.stride * y;
		var _g2 = 0;
		var _g3 = dataView.width;
		while(_g2 < _g3) {
			var x = _g2++;
			var format1 = sourceFormat;
			var premultiplied1 = premultiplied;
			if(premultiplied1 == null) {
				premultiplied1 = false;
			}
			if(format1 == null) {
				format1 = 0;
			}
			switch(format1) {
			case 0:
				pixel = (data[position] & 255) << 24 | (data[position + 1] & 255) << 16 | (data[position + 2] & 255) << 8 | data[position + 3] & 255;
				break;
			case 1:
				pixel = (data[position + 1] & 255) << 24 | (data[position + 2] & 255) << 16 | (data[position + 3] & 255) << 8 | data[position] & 255;
				break;
			case 2:
				pixel = (data[position + 2] & 255) << 24 | (data[position + 1] & 255) << 16 | (data[position] & 255) << 8 | data[position + 3] & 255;
				break;
			}
			if(premultiplied1) {
				if((pixel & 255) != 0 && (pixel & 255) != 255) {
					lime_math_RGBA.unmult = 255.0 / (pixel & 255);
					pixel = (lime_math_RGBA.__clamp[Math.round((pixel >>> 24 & 255) * lime_math_RGBA.unmult)] & 255) << 24 | (lime_math_RGBA.__clamp[Math.round((pixel >>> 16 & 255) * lime_math_RGBA.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.round((pixel >>> 8 & 255) * lime_math_RGBA.unmult)] & 255) << 8 | pixel & 255 & 255;
				}
			}
			switch(format) {
			case 1:
				var this1 = 0;
				var argb1 = this1;
				argb1 = (pixel & 255 & 255) << 24 | (pixel >>> 24 & 255 & 255) << 16 | (pixel >>> 16 & 255 & 255) << 8 | pixel >>> 8 & 255 & 255;
				argb = argb1;
				pixel = argb;
				break;
			case 2:
				var this2 = 0;
				var bgra1 = this2;
				bgra1 = (pixel >>> 8 & 255 & 255) << 24 | (pixel >>> 16 & 255 & 255) << 16 | (pixel >>> 24 & 255 & 255) << 8 | pixel & 255 & 255;
				bgra = bgra1;
				pixel = bgra;
				break;
			default:
			}
			bytes.b[destPosition++] = pixel >>> 24 & 255 & 255;
			bytes.b[destPosition++] = pixel >>> 16 & 255 & 255;
			bytes.b[destPosition++] = pixel >>> 8 & 255 & 255;
			bytes.b[destPosition++] = pixel & 255 & 255;
			position += 4;
		}
	}
	return bytes;
};
lime__$internal_graphics_ImageDataUtil.merge = function(image,sourceImage,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier) {
	if(image.buffer.data == null || sourceImage.buffer.data == null) {
		return;
	}
	var sourceView = new lime__$internal_graphics__$ImageDataUtil_ImageDataView(sourceImage,sourceRect);
	var destView = new lime__$internal_graphics__$ImageDataUtil_ImageDataView(image,new lime_math_Rectangle(destPoint.x,destPoint.y,sourceView.width,sourceView.height));
	var sourceData = sourceImage.buffer.data;
	var destData = image.buffer.data;
	var sourceFormat = sourceImage.buffer.format;
	var destFormat = image.buffer.format;
	var sourcePremultiplied = sourceImage.buffer.premultiplied;
	var destPremultiplied = image.buffer.premultiplied;
	var sourcePosition;
	var destPosition;
	var sourcePixel;
	var destPixel;
	var _g = 0;
	var _g1 = destView.height;
	while(_g < _g1) {
		var y = _g++;
		sourcePosition = sourceView.byteOffset + sourceView.stride * y;
		destPosition = destView.byteOffset + destView.stride * y;
		var _g2 = 0;
		var _g3 = destView.width;
		while(_g2 < _g3) {
			var x = _g2++;
			var format = sourceFormat;
			var premultiplied = sourcePremultiplied;
			if(premultiplied == null) {
				premultiplied = false;
			}
			if(format == null) {
				format = 0;
			}
			switch(format) {
			case 0:
				sourcePixel = (sourceData[sourcePosition] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition + 2] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
				break;
			case 1:
				sourcePixel = (sourceData[sourcePosition + 1] & 255) << 24 | (sourceData[sourcePosition + 2] & 255) << 16 | (sourceData[sourcePosition + 3] & 255) << 8 | sourceData[sourcePosition] & 255;
				break;
			case 2:
				sourcePixel = (sourceData[sourcePosition + 2] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
				break;
			}
			if(premultiplied) {
				if((sourcePixel & 255) != 0 && (sourcePixel & 255) != 255) {
					lime_math_RGBA.unmult = 255.0 / (sourcePixel & 255);
					sourcePixel = (lime_math_RGBA.__clamp[Math.round((sourcePixel >>> 24 & 255) * lime_math_RGBA.unmult)] & 255) << 24 | (lime_math_RGBA.__clamp[Math.round((sourcePixel >>> 16 & 255) * lime_math_RGBA.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.round((sourcePixel >>> 8 & 255) * lime_math_RGBA.unmult)] & 255) << 8 | sourcePixel & 255 & 255;
				}
			}
			var format1 = destFormat;
			var premultiplied1 = destPremultiplied;
			if(premultiplied1 == null) {
				premultiplied1 = false;
			}
			if(format1 == null) {
				format1 = 0;
			}
			switch(format1) {
			case 0:
				destPixel = (destData[destPosition] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition + 2] & 255) << 8 | destData[destPosition + 3] & 255;
				break;
			case 1:
				destPixel = (destData[destPosition + 1] & 255) << 24 | (destData[destPosition + 2] & 255) << 16 | (destData[destPosition + 3] & 255) << 8 | destData[destPosition] & 255;
				break;
			case 2:
				destPixel = (destData[destPosition + 2] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition] & 255) << 8 | destData[destPosition + 3] & 255;
				break;
			}
			if(premultiplied1) {
				if((destPixel & 255) != 0 && (destPixel & 255) != 255) {
					lime_math_RGBA.unmult = 255.0 / (destPixel & 255);
					destPixel = (lime_math_RGBA.__clamp[Math.round((destPixel >>> 24 & 255) * lime_math_RGBA.unmult)] & 255) << 24 | (lime_math_RGBA.__clamp[Math.round((destPixel >>> 16 & 255) * lime_math_RGBA.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.round((destPixel >>> 8 & 255) * lime_math_RGBA.unmult)] & 255) << 8 | destPixel & 255 & 255;
				}
			}
			var value = ((sourcePixel >>> 24 & 255) * redMultiplier + (destPixel >>> 24 & 255) * (256 - redMultiplier)) / 256 | 0;
			destPixel = (value & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
			var value1 = ((sourcePixel >>> 16 & 255) * greenMultiplier + (destPixel >>> 16 & 255) * (256 - greenMultiplier)) / 256 | 0;
			destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (value1 & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
			var value2 = ((sourcePixel >>> 8 & 255) * blueMultiplier + (destPixel >>> 8 & 255) * (256 - blueMultiplier)) / 256 | 0;
			destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (value2 & 255) << 8 | destPixel & 255 & 255;
			var value3 = ((sourcePixel & 255) * alphaMultiplier + (destPixel & 255) * (256 - alphaMultiplier)) / 256 | 0;
			destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | value3 & 255;
			var format2 = destFormat;
			var premultiplied2 = destPremultiplied;
			if(premultiplied2 == null) {
				premultiplied2 = false;
			}
			if(format2 == null) {
				format2 = 0;
			}
			if(premultiplied2) {
				if((destPixel & 255) == 0) {
					if(destPixel != 0) {
						destPixel = 0;
					}
				} else if((destPixel & 255) != 255) {
					lime_math_RGBA.a16 = lime_math_RGBA.__alpha16[destPixel & 255];
					destPixel = ((destPixel >>> 24 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 24 | ((destPixel >>> 16 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 16 | ((destPixel >>> 8 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 8 | destPixel & 255 & 255;
				}
			}
			switch(format2) {
			case 0:
				destData[destPosition] = destPixel >>> 24 & 255;
				destData[destPosition + 1] = destPixel >>> 16 & 255;
				destData[destPosition + 2] = destPixel >>> 8 & 255;
				destData[destPosition + 3] = destPixel & 255;
				break;
			case 1:
				destData[destPosition] = destPixel & 255;
				destData[destPosition + 1] = destPixel >>> 24 & 255;
				destData[destPosition + 2] = destPixel >>> 16 & 255;
				destData[destPosition + 3] = destPixel >>> 8 & 255;
				break;
			case 2:
				destData[destPosition] = destPixel >>> 8 & 255;
				destData[destPosition + 1] = destPixel >>> 16 & 255;
				destData[destPosition + 2] = destPixel >>> 24 & 255;
				destData[destPosition + 3] = destPixel & 255;
				break;
			}
			sourcePosition += 4;
			destPosition += 4;
		}
	}
	image.dirty = true;
	image.version++;
};
lime__$internal_graphics_ImageDataUtil.multiplyAlpha = function(image) {
	var data = image.buffer.data;
	if(data == null || !image.buffer.transparent) {
		return;
	}
	var format = image.buffer.format;
	var length = data.length / 4 | 0;
	var pixel;
	var _g = 0;
	var _g1 = length;
	while(_g < _g1) {
		var i = _g++;
		var offset = i * 4;
		var format1 = format;
		var premultiplied = false;
		if(premultiplied == null) {
			premultiplied = false;
		}
		if(format1 == null) {
			format1 = 0;
		}
		switch(format1) {
		case 0:
			pixel = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
			break;
		case 1:
			pixel = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
			break;
		case 2:
			pixel = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
			break;
		}
		if(premultiplied) {
			if((pixel & 255) != 0 && (pixel & 255) != 255) {
				lime_math_RGBA.unmult = 255.0 / (pixel & 255);
				pixel = (lime_math_RGBA.__clamp[Math.round((pixel >>> 24 & 255) * lime_math_RGBA.unmult)] & 255) << 24 | (lime_math_RGBA.__clamp[Math.round((pixel >>> 16 & 255) * lime_math_RGBA.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.round((pixel >>> 8 & 255) * lime_math_RGBA.unmult)] & 255) << 8 | pixel & 255 & 255;
			}
		}
		var offset1 = i * 4;
		var format2 = format;
		var premultiplied1 = true;
		if(premultiplied1 == null) {
			premultiplied1 = false;
		}
		if(format2 == null) {
			format2 = 0;
		}
		if(premultiplied1) {
			if((pixel & 255) == 0) {
				if(pixel != 0) {
					pixel = 0;
				}
			} else if((pixel & 255) != 255) {
				lime_math_RGBA.a16 = lime_math_RGBA.__alpha16[pixel & 255];
				pixel = ((pixel >>> 24 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 24 | ((pixel >>> 16 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 16 | ((pixel >>> 8 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 8 | pixel & 255 & 255;
			}
		}
		switch(format2) {
		case 0:
			data[offset1] = pixel >>> 24 & 255;
			data[offset1 + 1] = pixel >>> 16 & 255;
			data[offset1 + 2] = pixel >>> 8 & 255;
			data[offset1 + 3] = pixel & 255;
			break;
		case 1:
			data[offset1] = pixel & 255;
			data[offset1 + 1] = pixel >>> 24 & 255;
			data[offset1 + 2] = pixel >>> 16 & 255;
			data[offset1 + 3] = pixel >>> 8 & 255;
			break;
		case 2:
			data[offset1] = pixel >>> 8 & 255;
			data[offset1 + 1] = pixel >>> 16 & 255;
			data[offset1 + 2] = pixel >>> 24 & 255;
			data[offset1 + 3] = pixel & 255;
			break;
		}
	}
	image.buffer.premultiplied = true;
	image.dirty = true;
	image.version++;
};
lime__$internal_graphics_ImageDataUtil.resize = function(image,newWidth,newHeight) {
	var buffer = image.buffer;
	if(buffer.width == newWidth && buffer.height == newHeight) {
		return;
	}
	var elements = newWidth * newHeight * 4;
	var array = null;
	var vector = null;
	var view = null;
	var buffer1 = null;
	var len = null;
	var this1;
	if(elements != null) {
		this1 = new Uint8Array(elements);
	} else if(array != null) {
		this1 = new Uint8Array(array);
	} else if(vector != null) {
		this1 = new Uint8Array(vector.__array);
	} else if(view != null) {
		this1 = new Uint8Array(view);
	} else if(buffer1 != null) {
		if(len == null) {
			this1 = new Uint8Array(buffer1,0);
		} else {
			this1 = new Uint8Array(buffer1,0,len);
		}
	} else {
		this1 = null;
	}
	var newBuffer = new lime_graphics_ImageBuffer(this1,newWidth,newHeight);
	var imageWidth = image.width;
	var imageHeight = image.height;
	var data = image.get_data();
	var newData = newBuffer.data;
	var sourceIndex;
	var sourceIndexX;
	var sourceIndexY;
	var sourceIndexXY;
	var index;
	var sourceX;
	var sourceY;
	var u;
	var v;
	var uRatio;
	var vRatio;
	var uOpposite;
	var vOpposite;
	var _g = 0;
	var _g1 = newHeight;
	while(_g < _g1) {
		var y = _g++;
		var _g2 = 0;
		var _g3 = newWidth;
		while(_g2 < _g3) {
			var x = _g2++;
			u = (x + 0.5) / newWidth * imageWidth - 0.5;
			v = (y + 0.5) / newHeight * imageHeight - 0.5;
			sourceX = u | 0;
			sourceY = v | 0;
			sourceIndex = (sourceY * imageWidth + sourceX) * 4;
			sourceIndexX = sourceX < imageWidth - 1 ? sourceIndex + 4 : sourceIndex;
			sourceIndexY = sourceY < imageHeight - 1 ? sourceIndex + imageWidth * 4 : sourceIndex;
			sourceIndexXY = sourceIndexX != sourceIndex ? sourceIndexY + 4 : sourceIndexY;
			index = (y * newWidth + x) * 4;
			uRatio = u - sourceX;
			vRatio = v - sourceY;
			uOpposite = 1 - uRatio;
			vOpposite = 1 - vRatio;
			newData[index] = (UInt.toFloat(data[sourceIndex]) * uOpposite + UInt.toFloat(data[sourceIndexX]) * uRatio) * vOpposite + (UInt.toFloat(data[sourceIndexY]) * uOpposite + UInt.toFloat(data[sourceIndexXY]) * uRatio) * vRatio | 0;
			newData[index + 1] = (UInt.toFloat(data[sourceIndex + 1]) * uOpposite + UInt.toFloat(data[sourceIndexX + 1]) * uRatio) * vOpposite + (UInt.toFloat(data[sourceIndexY + 1]) * uOpposite + UInt.toFloat(data[sourceIndexXY + 1]) * uRatio) * vRatio | 0;
			newData[index + 2] = (UInt.toFloat(data[sourceIndex + 2]) * uOpposite + UInt.toFloat(data[sourceIndexX + 2]) * uRatio) * vOpposite + (UInt.toFloat(data[sourceIndexY + 2]) * uOpposite + UInt.toFloat(data[sourceIndexXY + 2]) * uRatio) * vRatio | 0;
			if(data[sourceIndexX + 3] == 0 || data[sourceIndexY + 3] == 0 || data[sourceIndexXY + 3] == 0) {
				newData[index + 3] = 0;
			} else {
				newData[index + 3] = data[sourceIndex + 3];
			}
		}
	}
	buffer.data = newBuffer.data;
	buffer.width = newWidth;
	buffer.height = newHeight;
	buffer.__srcImage = null;
	buffer.__srcImageData = null;
	buffer.__srcCanvas = null;
	buffer.__srcContext = null;
	image.dirty = true;
	image.version++;
};
lime__$internal_graphics_ImageDataUtil.resizeBuffer = function(image,newWidth,newHeight) {
	var buffer = image.buffer;
	var data = image.get_data();
	var elements = newWidth * newHeight * 4;
	var array = null;
	var vector = null;
	var view = null;
	var buffer1 = null;
	var len = null;
	var this1;
	if(elements != null) {
		this1 = new Uint8Array(elements);
	} else if(array != null) {
		this1 = new Uint8Array(array);
	} else if(vector != null) {
		this1 = new Uint8Array(vector.__array);
	} else if(view != null) {
		this1 = new Uint8Array(view);
	} else if(buffer1 != null) {
		if(len == null) {
			this1 = new Uint8Array(buffer1,0);
		} else {
			this1 = new Uint8Array(buffer1,0,len);
		}
	} else {
		this1 = null;
	}
	var newData = this1;
	var sourceIndex;
	var index;
	var _g = 0;
	var _g1 = buffer.height;
	while(_g < _g1) {
		var y = _g++;
		var _g2 = 0;
		var _g3 = buffer.width;
		while(_g2 < _g3) {
			var x = _g2++;
			sourceIndex = (y * buffer.width + x) * 4;
			index = (y * newWidth + x) * 4;
			newData[index] = data[sourceIndex];
			newData[index + 1] = data[sourceIndex + 1];
			newData[index + 2] = data[sourceIndex + 2];
			newData[index + 3] = data[sourceIndex + 3];
		}
	}
	buffer.data = newData;
	buffer.width = newWidth;
	buffer.height = newHeight;
	buffer.__srcImage = null;
	buffer.__srcImageData = null;
	buffer.__srcCanvas = null;
	buffer.__srcContext = null;
	image.dirty = true;
	image.version++;
};
lime__$internal_graphics_ImageDataUtil.setFormat = function(image,format) {
	var data = image.buffer.data;
	if(data == null) {
		return;
	}
	var index;
	var a16;
	var length = data.length / 4 | 0;
	var r1;
	var g1;
	var b1;
	var a1;
	var r2;
	var g2;
	var b2;
	var a2;
	var r;
	var g;
	var b;
	var a;
	switch(image.get_format()) {
	case 0:
		r1 = 0;
		g1 = 1;
		b1 = 2;
		a1 = 3;
		break;
	case 1:
		r1 = 1;
		g1 = 2;
		b1 = 3;
		a1 = 0;
		break;
	case 2:
		r1 = 2;
		g1 = 1;
		b1 = 0;
		a1 = 3;
		break;
	}
	switch(format) {
	case 0:
		r2 = 0;
		g2 = 1;
		b2 = 2;
		a2 = 3;
		break;
	case 1:
		r2 = 1;
		g2 = 2;
		b2 = 3;
		a2 = 0;
		break;
	case 2:
		r2 = 2;
		g2 = 1;
		b2 = 0;
		a2 = 3;
		break;
	}
	var _g = 0;
	var _g1 = length;
	while(_g < _g1) {
		var i = _g++;
		index = i * 4;
		r = data[index + r1];
		g = data[index + g1];
		b = data[index + b1];
		a = data[index + a1];
		data[index + r2] = r;
		data[index + g2] = g;
		data[index + b2] = b;
		data[index + a2] = a;
	}
	image.buffer.format = format;
	image.dirty = true;
	image.version++;
};
lime__$internal_graphics_ImageDataUtil.setPixel = function(image,x,y,color,format) {
	var pixel;
	switch(format) {
	case 1:
		var argb = color;
		var this1 = 0;
		var rgba = this1;
		rgba = (argb >>> 16 & 255 & 255) << 24 | (argb >>> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >>> 24 & 255 & 255;
		pixel = rgba;
		break;
	case 2:
		var bgra = color;
		var this1 = 0;
		var rgba = this1;
		rgba = (bgra >>> 8 & 255 & 255) << 24 | (bgra >>> 16 & 255 & 255) << 16 | (bgra >>> 24 & 255 & 255) << 8 | bgra & 255 & 255;
		pixel = rgba;
		break;
	default:
		pixel = color;
	}
	var this1 = 0;
	var source = this1;
	var data = image.buffer.data;
	var offset = 4 * (y + image.offsetY) * image.buffer.width + (x + image.offsetX) * 4;
	var format = image.buffer.format;
	var premultiplied = image.buffer.premultiplied;
	if(premultiplied == null) {
		premultiplied = false;
	}
	if(format == null) {
		format = 0;
	}
	switch(format) {
	case 0:
		source = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
		break;
	case 1:
		source = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
		break;
	case 2:
		source = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
		break;
	}
	if(premultiplied) {
		if((source & 255) != 0 && (source & 255) != 255) {
			lime_math_RGBA.unmult = 255.0 / (source & 255);
			source = (lime_math_RGBA.__clamp[Math.round((source >>> 24 & 255) * lime_math_RGBA.unmult)] & 255) << 24 | (lime_math_RGBA.__clamp[Math.round((source >>> 16 & 255) * lime_math_RGBA.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.round((source >>> 8 & 255) * lime_math_RGBA.unmult)] & 255) << 8 | source & 255 & 255;
		}
	}
	var value = source & 255;
	pixel = (pixel >>> 24 & 255 & 255) << 24 | (pixel >>> 16 & 255 & 255) << 16 | (pixel >>> 8 & 255 & 255) << 8 | value & 255;
	var data = image.buffer.data;
	var offset = 4 * (y + image.offsetY) * image.buffer.width + (x + image.offsetX) * 4;
	var format = image.buffer.format;
	var premultiplied = image.buffer.premultiplied;
	if(premultiplied == null) {
		premultiplied = false;
	}
	if(format == null) {
		format = 0;
	}
	if(premultiplied) {
		if((pixel & 255) == 0) {
			if(pixel != 0) {
				pixel = 0;
			}
		} else if((pixel & 255) != 255) {
			lime_math_RGBA.a16 = lime_math_RGBA.__alpha16[pixel & 255];
			pixel = ((pixel >>> 24 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 24 | ((pixel >>> 16 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 16 | ((pixel >>> 8 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 8 | pixel & 255 & 255;
		}
	}
	switch(format) {
	case 0:
		data[offset] = pixel >>> 24 & 255;
		data[offset + 1] = pixel >>> 16 & 255;
		data[offset + 2] = pixel >>> 8 & 255;
		data[offset + 3] = pixel & 255;
		break;
	case 1:
		data[offset] = pixel & 255;
		data[offset + 1] = pixel >>> 24 & 255;
		data[offset + 2] = pixel >>> 16 & 255;
		data[offset + 3] = pixel >>> 8 & 255;
		break;
	case 2:
		data[offset] = pixel >>> 8 & 255;
		data[offset + 1] = pixel >>> 16 & 255;
		data[offset + 2] = pixel >>> 24 & 255;
		data[offset + 3] = pixel & 255;
		break;
	}
	image.dirty = true;
	image.version++;
};
lime__$internal_graphics_ImageDataUtil.setPixel32 = function(image,x,y,color,format) {
	var pixel;
	switch(format) {
	case 1:
		var argb = color;
		var this1 = 0;
		var rgba = this1;
		rgba = (argb >>> 16 & 255 & 255) << 24 | (argb >>> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >>> 24 & 255 & 255;
		pixel = rgba;
		break;
	case 2:
		var bgra = color;
		var this1 = 0;
		var rgba = this1;
		rgba = (bgra >>> 8 & 255 & 255) << 24 | (bgra >>> 16 & 255 & 255) << 16 | (bgra >>> 24 & 255 & 255) << 8 | bgra & 255 & 255;
		pixel = rgba;
		break;
	default:
		pixel = color;
	}
	if(!image.get_transparent()) {
		pixel = (pixel >>> 24 & 255 & 255) << 24 | (pixel >>> 16 & 255 & 255) << 16 | (pixel >>> 8 & 255 & 255) << 8 | 255;
	}
	var data = image.buffer.data;
	var offset = 4 * (y + image.offsetY) * image.buffer.width + (x + image.offsetX) * 4;
	var format = image.buffer.format;
	var premultiplied = image.buffer.premultiplied;
	if(premultiplied == null) {
		premultiplied = false;
	}
	if(format == null) {
		format = 0;
	}
	if(premultiplied) {
		if((pixel & 255) == 0) {
			if(pixel != 0) {
				pixel = 0;
			}
		} else if((pixel & 255) != 255) {
			lime_math_RGBA.a16 = lime_math_RGBA.__alpha16[pixel & 255];
			pixel = ((pixel >>> 24 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 24 | ((pixel >>> 16 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 16 | ((pixel >>> 8 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 8 | pixel & 255 & 255;
		}
	}
	switch(format) {
	case 0:
		data[offset] = pixel >>> 24 & 255;
		data[offset + 1] = pixel >>> 16 & 255;
		data[offset + 2] = pixel >>> 8 & 255;
		data[offset + 3] = pixel & 255;
		break;
	case 1:
		data[offset] = pixel & 255;
		data[offset + 1] = pixel >>> 24 & 255;
		data[offset + 2] = pixel >>> 16 & 255;
		data[offset + 3] = pixel >>> 8 & 255;
		break;
	case 2:
		data[offset] = pixel >>> 8 & 255;
		data[offset + 1] = pixel >>> 16 & 255;
		data[offset + 2] = pixel >>> 24 & 255;
		data[offset + 3] = pixel & 255;
		break;
	}
	image.dirty = true;
	image.version++;
};
lime__$internal_graphics_ImageDataUtil.setPixels = function(image,rect,bytePointer,format,endian) {
	if(image.buffer.data == null) {
		return;
	}
	var data = image.buffer.data;
	var sourceFormat = image.buffer.format;
	var premultiplied = image.buffer.premultiplied;
	var dataView = new lime__$internal_graphics__$ImageDataUtil_ImageDataView(image,rect);
	var row;
	var color;
	var pixel;
	var transparent = image.get_transparent();
	var bytes = bytePointer.bytes;
	var dataPosition = bytePointer.offset;
	var littleEndian = endian != lime_system_Endian.BIG_ENDIAN;
	var _g = 0;
	var _g1 = dataView.height;
	while(_g < _g1) {
		var y = _g++;
		row = dataView.byteOffset + dataView.stride * y;
		var _g2 = 0;
		var _g3 = dataView.width;
		while(_g2 < _g3) {
			var x = _g2++;
			if(littleEndian) {
				color = bytes.getInt32(dataPosition);
			} else {
				color = bytes.b[dataPosition + 3] | bytes.b[dataPosition + 2] << 8 | bytes.b[dataPosition + 1] << 16 | bytes.b[dataPosition] << 24;
			}
			dataPosition += 4;
			switch(format) {
			case 1:
				var argb = color;
				var this1 = 0;
				var rgba = this1;
				rgba = (argb >>> 16 & 255 & 255) << 24 | (argb >>> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >>> 24 & 255 & 255;
				pixel = rgba;
				break;
			case 2:
				var bgra = color;
				var this2 = 0;
				var rgba1 = this2;
				rgba1 = (bgra >>> 8 & 255 & 255) << 24 | (bgra >>> 16 & 255 & 255) << 16 | (bgra >>> 24 & 255 & 255) << 8 | bgra & 255 & 255;
				pixel = rgba1;
				break;
			default:
				pixel = color;
			}
			if(!transparent) {
				pixel = (pixel >>> 24 & 255 & 255) << 24 | (pixel >>> 16 & 255 & 255) << 16 | (pixel >>> 8 & 255 & 255) << 8 | 255;
			}
			var offset = row + x * 4;
			var format1 = sourceFormat;
			var premultiplied1 = premultiplied;
			if(premultiplied1 == null) {
				premultiplied1 = false;
			}
			if(format1 == null) {
				format1 = 0;
			}
			if(premultiplied1) {
				if((pixel & 255) == 0) {
					if(pixel != 0) {
						pixel = 0;
					}
				} else if((pixel & 255) != 255) {
					lime_math_RGBA.a16 = lime_math_RGBA.__alpha16[pixel & 255];
					pixel = ((pixel >>> 24 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 24 | ((pixel >>> 16 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 16 | ((pixel >>> 8 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 8 | pixel & 255 & 255;
				}
			}
			switch(format1) {
			case 0:
				data[offset] = pixel >>> 24 & 255;
				data[offset + 1] = pixel >>> 16 & 255;
				data[offset + 2] = pixel >>> 8 & 255;
				data[offset + 3] = pixel & 255;
				break;
			case 1:
				data[offset] = pixel & 255;
				data[offset + 1] = pixel >>> 24 & 255;
				data[offset + 2] = pixel >>> 16 & 255;
				data[offset + 3] = pixel >>> 8 & 255;
				break;
			case 2:
				data[offset] = pixel >>> 8 & 255;
				data[offset + 1] = pixel >>> 16 & 255;
				data[offset + 2] = pixel >>> 24 & 255;
				data[offset + 3] = pixel & 255;
				break;
			}
		}
	}
	image.dirty = true;
	image.version++;
};
lime__$internal_graphics_ImageDataUtil.threshold = function(image,sourceImage,sourceRect,destPoint,operation,threshold,color,mask,copySource,format) {
	var _color;
	var _mask;
	var _threshold;
	switch(format) {
	case 1:
		var argb = color;
		var this1 = 0;
		var rgba = this1;
		rgba = (argb >>> 16 & 255 & 255) << 24 | (argb >>> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >>> 24 & 255 & 255;
		_color = rgba;
		var argb = mask;
		var this1 = 0;
		var rgba = this1;
		rgba = (argb >>> 16 & 255 & 255) << 24 | (argb >>> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >>> 24 & 255 & 255;
		_mask = rgba;
		var argb = threshold;
		var this1 = 0;
		var rgba = this1;
		rgba = (argb >>> 16 & 255 & 255) << 24 | (argb >>> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >>> 24 & 255 & 255;
		_threshold = rgba;
		break;
	case 2:
		var bgra = color;
		var this1 = 0;
		var rgba = this1;
		rgba = (bgra >>> 8 & 255 & 255) << 24 | (bgra >>> 16 & 255 & 255) << 16 | (bgra >>> 24 & 255 & 255) << 8 | bgra & 255 & 255;
		_color = rgba;
		var bgra = mask;
		var this1 = 0;
		var rgba = this1;
		rgba = (bgra >>> 8 & 255 & 255) << 24 | (bgra >>> 16 & 255 & 255) << 16 | (bgra >>> 24 & 255 & 255) << 8 | bgra & 255 & 255;
		_mask = rgba;
		var bgra = threshold;
		var this1 = 0;
		var rgba = this1;
		rgba = (bgra >>> 8 & 255 & 255) << 24 | (bgra >>> 16 & 255 & 255) << 16 | (bgra >>> 24 & 255 & 255) << 8 | bgra & 255 & 255;
		_threshold = rgba;
		break;
	default:
		_color = color;
		_mask = mask;
		_threshold = threshold;
	}
	var _operation;
	switch(operation) {
	case "!=":
		_operation = 0;
		break;
	case "<":
		_operation = 2;
		break;
	case "<=":
		_operation = 3;
		break;
	case "==":
		_operation = 1;
		break;
	case ">":
		_operation = 4;
		break;
	case ">=":
		_operation = 5;
		break;
	default:
		_operation = -1;
	}
	if(_operation == -1) {
		return 0;
	}
	var srcData = sourceImage.buffer.data;
	var destData = image.buffer.data;
	if(srcData == null || destData == null) {
		return 0;
	}
	var hits = 0;
	var srcView = new lime__$internal_graphics__$ImageDataUtil_ImageDataView(sourceImage,sourceRect);
	var destView = new lime__$internal_graphics__$ImageDataUtil_ImageDataView(image,new lime_math_Rectangle(destPoint.x,destPoint.y,srcView.width,srcView.height));
	var srcFormat = sourceImage.buffer.format;
	var destFormat = image.buffer.format;
	var srcPremultiplied = sourceImage.buffer.premultiplied;
	var destPremultiplied = image.buffer.premultiplied;
	var srcPosition;
	var destPosition;
	var srcPixel;
	var destPixel;
	var pixelMask;
	var test;
	var value;
	var _g = 0;
	var _g1 = destView.height;
	while(_g < _g1) {
		var y = _g++;
		srcPosition = srcView.byteOffset + srcView.stride * y;
		destPosition = destView.byteOffset + destView.stride * y;
		var _g2 = 0;
		var _g3 = destView.width;
		while(_g2 < _g3) {
			var x = _g2++;
			var format = srcFormat;
			var premultiplied = srcPremultiplied;
			if(premultiplied == null) {
				premultiplied = false;
			}
			if(format == null) {
				format = 0;
			}
			switch(format) {
			case 0:
				srcPixel = (srcData[srcPosition] & 255) << 24 | (srcData[srcPosition + 1] & 255) << 16 | (srcData[srcPosition + 2] & 255) << 8 | srcData[srcPosition + 3] & 255;
				break;
			case 1:
				srcPixel = (srcData[srcPosition + 1] & 255) << 24 | (srcData[srcPosition + 2] & 255) << 16 | (srcData[srcPosition + 3] & 255) << 8 | srcData[srcPosition] & 255;
				break;
			case 2:
				srcPixel = (srcData[srcPosition + 2] & 255) << 24 | (srcData[srcPosition + 1] & 255) << 16 | (srcData[srcPosition] & 255) << 8 | srcData[srcPosition + 3] & 255;
				break;
			}
			if(premultiplied) {
				if((srcPixel & 255) != 0 && (srcPixel & 255) != 255) {
					lime_math_RGBA.unmult = 255.0 / (srcPixel & 255);
					srcPixel = (lime_math_RGBA.__clamp[Math.round((srcPixel >>> 24 & 255) * lime_math_RGBA.unmult)] & 255) << 24 | (lime_math_RGBA.__clamp[Math.round((srcPixel >>> 16 & 255) * lime_math_RGBA.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.round((srcPixel >>> 8 & 255) * lime_math_RGBA.unmult)] & 255) << 8 | srcPixel & 255 & 255;
				}
			}
			pixelMask = srcPixel & _mask;
			var tmp1 = pixelMask >>> 24 & 255;
			var tmp2 = _threshold >>> 24 & 255;
			if(tmp1 != tmp2) {
				value = UInt.gt(tmp1,tmp2) ? 1 : -1;
			} else {
				tmp1 = pixelMask >>> 16 & 255;
				tmp2 = _threshold >>> 16 & 255;
				if(tmp1 != tmp2) {
					value = UInt.gt(tmp1,tmp2) ? 1 : -1;
				} else {
					tmp1 = pixelMask >>> 8 & 255;
					tmp2 = _threshold >>> 8 & 255;
					if(tmp1 != tmp2) {
						value = UInt.gt(tmp1,tmp2) ? 1 : -1;
					} else {
						tmp1 = pixelMask & 255;
						tmp2 = _threshold & 255;
						value = tmp1 != tmp2 ? UInt.gt(tmp1,tmp2) ? 1 : -1 : 0;
					}
				}
			}
			switch(_operation) {
			case 0:
				test = value != 0;
				break;
			case 1:
				test = value == 0;
				break;
			case 2:
				test = value == -1;
				break;
			case 3:
				test = value == 0 || value == -1;
				break;
			case 4:
				test = value == 1;
				break;
			case 5:
				test = value == 0 || value == 1;
				break;
			default:
				test = false;
			}
			if(test) {
				var format1 = destFormat;
				var premultiplied1 = destPremultiplied;
				if(premultiplied1 == null) {
					premultiplied1 = false;
				}
				if(format1 == null) {
					format1 = 0;
				}
				if(premultiplied1) {
					if((_color & 255) == 0) {
						if(_color != 0) {
							_color = 0;
						}
					} else if((_color & 255) != 255) {
						lime_math_RGBA.a16 = lime_math_RGBA.__alpha16[_color & 255];
						_color = ((_color >>> 24 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 24 | ((_color >>> 16 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 16 | ((_color >>> 8 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 8 | _color & 255 & 255;
					}
				}
				switch(format1) {
				case 0:
					destData[destPosition] = _color >>> 24 & 255;
					destData[destPosition + 1] = _color >>> 16 & 255;
					destData[destPosition + 2] = _color >>> 8 & 255;
					destData[destPosition + 3] = _color & 255;
					break;
				case 1:
					destData[destPosition] = _color & 255;
					destData[destPosition + 1] = _color >>> 24 & 255;
					destData[destPosition + 2] = _color >>> 16 & 255;
					destData[destPosition + 3] = _color >>> 8 & 255;
					break;
				case 2:
					destData[destPosition] = _color >>> 8 & 255;
					destData[destPosition + 1] = _color >>> 16 & 255;
					destData[destPosition + 2] = _color >>> 24 & 255;
					destData[destPosition + 3] = _color & 255;
					break;
				}
				++hits;
			} else if(copySource) {
				var format2 = destFormat;
				var premultiplied2 = destPremultiplied;
				if(premultiplied2 == null) {
					premultiplied2 = false;
				}
				if(format2 == null) {
					format2 = 0;
				}
				if(premultiplied2) {
					if((srcPixel & 255) == 0) {
						if(srcPixel != 0) {
							srcPixel = 0;
						}
					} else if((srcPixel & 255) != 255) {
						lime_math_RGBA.a16 = lime_math_RGBA.__alpha16[srcPixel & 255];
						srcPixel = ((srcPixel >>> 24 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 24 | ((srcPixel >>> 16 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 16 | ((srcPixel >>> 8 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 8 | srcPixel & 255 & 255;
					}
				}
				switch(format2) {
				case 0:
					destData[destPosition] = srcPixel >>> 24 & 255;
					destData[destPosition + 1] = srcPixel >>> 16 & 255;
					destData[destPosition + 2] = srcPixel >>> 8 & 255;
					destData[destPosition + 3] = srcPixel & 255;
					break;
				case 1:
					destData[destPosition] = srcPixel & 255;
					destData[destPosition + 1] = srcPixel >>> 24 & 255;
					destData[destPosition + 2] = srcPixel >>> 16 & 255;
					destData[destPosition + 3] = srcPixel >>> 8 & 255;
					break;
				case 2:
					destData[destPosition] = srcPixel >>> 8 & 255;
					destData[destPosition + 1] = srcPixel >>> 16 & 255;
					destData[destPosition + 2] = srcPixel >>> 24 & 255;
					destData[destPosition + 3] = srcPixel & 255;
					break;
				}
			}
			srcPosition += 4;
			destPosition += 4;
		}
	}
	if(hits > 0) {
		image.dirty = true;
		image.version++;
	}
	return hits;
};
lime__$internal_graphics_ImageDataUtil.unmultiplyAlpha = function(image) {
	var data = image.buffer.data;
	if(data == null) {
		return;
	}
	var format = image.buffer.format;
	var length = data.length / 4 | 0;
	var pixel;
	var _g = 0;
	var _g1 = length;
	while(_g < _g1) {
		var i = _g++;
		var offset = i * 4;
		var format1 = format;
		var premultiplied = true;
		if(premultiplied == null) {
			premultiplied = false;
		}
		if(format1 == null) {
			format1 = 0;
		}
		switch(format1) {
		case 0:
			pixel = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
			break;
		case 1:
			pixel = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
			break;
		case 2:
			pixel = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
			break;
		}
		if(premultiplied) {
			if((pixel & 255) != 0 && (pixel & 255) != 255) {
				lime_math_RGBA.unmult = 255.0 / (pixel & 255);
				pixel = (lime_math_RGBA.__clamp[Math.round((pixel >>> 24 & 255) * lime_math_RGBA.unmult)] & 255) << 24 | (lime_math_RGBA.__clamp[Math.round((pixel >>> 16 & 255) * lime_math_RGBA.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.round((pixel >>> 8 & 255) * lime_math_RGBA.unmult)] & 255) << 8 | pixel & 255 & 255;
			}
		}
		var offset1 = i * 4;
		var format2 = format;
		var premultiplied1 = false;
		if(premultiplied1 == null) {
			premultiplied1 = false;
		}
		if(format2 == null) {
			format2 = 0;
		}
		if(premultiplied1) {
			if((pixel & 255) == 0) {
				if(pixel != 0) {
					pixel = 0;
				}
			} else if((pixel & 255) != 255) {
				lime_math_RGBA.a16 = lime_math_RGBA.__alpha16[pixel & 255];
				pixel = ((pixel >>> 24 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 24 | ((pixel >>> 16 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 16 | ((pixel >>> 8 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 8 | pixel & 255 & 255;
			}
		}
		switch(format2) {
		case 0:
			data[offset1] = pixel >>> 24 & 255;
			data[offset1 + 1] = pixel >>> 16 & 255;
			data[offset1 + 2] = pixel >>> 8 & 255;
			data[offset1 + 3] = pixel & 255;
			break;
		case 1:
			data[offset1] = pixel & 255;
			data[offset1 + 1] = pixel >>> 24 & 255;
			data[offset1 + 2] = pixel >>> 16 & 255;
			data[offset1 + 3] = pixel >>> 8 & 255;
			break;
		case 2:
			data[offset1] = pixel >>> 8 & 255;
			data[offset1 + 1] = pixel >>> 16 & 255;
			data[offset1 + 2] = pixel >>> 24 & 255;
			data[offset1 + 3] = pixel & 255;
			break;
		}
	}
	image.buffer.premultiplied = false;
	image.dirty = true;
	image.version++;
};
lime__$internal_graphics_ImageDataUtil.__boxBlur = function(imgA,imgB,w,h,bx,by) {
	imgB.set(imgA);
	var bx1 = bx | 0;
	var by1 = by | 0;
	lime__$internal_graphics_ImageDataUtil.__boxBlurH(imgB,imgA,w,h,bx1,0);
	lime__$internal_graphics_ImageDataUtil.__boxBlurH(imgB,imgA,w,h,bx1,1);
	lime__$internal_graphics_ImageDataUtil.__boxBlurH(imgB,imgA,w,h,bx1,2);
	lime__$internal_graphics_ImageDataUtil.__boxBlurH(imgB,imgA,w,h,bx1,3);
	var iarr = 1 / (by1 + by1 + 1);
	var ws = w * 4;
	var ti;
	var li;
	var ri;
	var fv;
	var lv;
	var val;
	var _g = 0;
	var _g1 = w;
	while(_g < _g1) {
		var i = _g++;
		ti = i * 4;
		li = ti;
		ri = ti + by1 * ws;
		fv = imgA[ti];
		lv = imgA[ti + ws * (h - 1)];
		val = (by1 + 1) * fv;
		var _g2 = 0;
		var _g3 = by1;
		while(_g2 < _g3) {
			var j = _g2++;
			val = val + imgA[ti + j * ws];
		}
		var _g4 = 0;
		var _g5 = by1 + 1;
		while(_g4 < _g5) {
			var j1 = _g4++;
			val = val + (imgA[ri] - fv);
			imgB[ti] = Math.round(UInt.toFloat(val) * iarr);
			ri += ws;
			ti += ws;
		}
		var _g6 = by1 + 1;
		var _g7 = h - by1;
		while(_g6 < _g7) {
			var j2 = _g6++;
			val = val + (imgA[ri] - imgA[li]);
			imgB[ti] = Math.round(UInt.toFloat(val) * iarr);
			li += ws;
			ri += ws;
			ti += ws;
		}
		var _g8 = h - by1;
		var _g9 = h;
		while(_g8 < _g9) {
			var j3 = _g8++;
			val = val + (lv - imgA[li]);
			imgB[ti] = Math.round(UInt.toFloat(val) * iarr);
			li += ws;
			ti += ws;
		}
	}
	var iarr = 1 / (by1 + by1 + 1);
	var ws = w * 4;
	var ti;
	var li;
	var ri;
	var fv;
	var lv;
	var val;
	var _g = 0;
	var _g1 = w;
	while(_g < _g1) {
		var i = _g++;
		ti = i * 4 + 1;
		li = ti;
		ri = ti + by1 * ws;
		fv = imgA[ti];
		lv = imgA[ti + ws * (h - 1)];
		val = (by1 + 1) * fv;
		var _g2 = 0;
		var _g3 = by1;
		while(_g2 < _g3) {
			var j = _g2++;
			val = val + imgA[ti + j * ws];
		}
		var _g4 = 0;
		var _g5 = by1 + 1;
		while(_g4 < _g5) {
			var j1 = _g4++;
			val = val + (imgA[ri] - fv);
			imgB[ti] = Math.round(UInt.toFloat(val) * iarr);
			ri += ws;
			ti += ws;
		}
		var _g6 = by1 + 1;
		var _g7 = h - by1;
		while(_g6 < _g7) {
			var j2 = _g6++;
			val = val + (imgA[ri] - imgA[li]);
			imgB[ti] = Math.round(UInt.toFloat(val) * iarr);
			li += ws;
			ri += ws;
			ti += ws;
		}
		var _g8 = h - by1;
		var _g9 = h;
		while(_g8 < _g9) {
			var j3 = _g8++;
			val = val + (lv - imgA[li]);
			imgB[ti] = Math.round(UInt.toFloat(val) * iarr);
			li += ws;
			ti += ws;
		}
	}
	var iarr = 1 / (by1 + by1 + 1);
	var ws = w * 4;
	var ti;
	var li;
	var ri;
	var fv;
	var lv;
	var val;
	var _g = 0;
	var _g1 = w;
	while(_g < _g1) {
		var i = _g++;
		ti = i * 4 + 2;
		li = ti;
		ri = ti + by1 * ws;
		fv = imgA[ti];
		lv = imgA[ti + ws * (h - 1)];
		val = (by1 + 1) * fv;
		var _g2 = 0;
		var _g3 = by1;
		while(_g2 < _g3) {
			var j = _g2++;
			val = val + imgA[ti + j * ws];
		}
		var _g4 = 0;
		var _g5 = by1 + 1;
		while(_g4 < _g5) {
			var j1 = _g4++;
			val = val + (imgA[ri] - fv);
			imgB[ti] = Math.round(UInt.toFloat(val) * iarr);
			ri += ws;
			ti += ws;
		}
		var _g6 = by1 + 1;
		var _g7 = h - by1;
		while(_g6 < _g7) {
			var j2 = _g6++;
			val = val + (imgA[ri] - imgA[li]);
			imgB[ti] = Math.round(UInt.toFloat(val) * iarr);
			li += ws;
			ri += ws;
			ti += ws;
		}
		var _g8 = h - by1;
		var _g9 = h;
		while(_g8 < _g9) {
			var j3 = _g8++;
			val = val + (lv - imgA[li]);
			imgB[ti] = Math.round(UInt.toFloat(val) * iarr);
			li += ws;
			ti += ws;
		}
	}
	var iarr = 1 / (by1 + by1 + 1);
	var ws = w * 4;
	var ti;
	var li;
	var ri;
	var fv;
	var lv;
	var val;
	var _g = 0;
	var _g1 = w;
	while(_g < _g1) {
		var i = _g++;
		ti = i * 4 + 3;
		li = ti;
		ri = ti + by1 * ws;
		fv = imgA[ti];
		lv = imgA[ti + ws * (h - 1)];
		val = (by1 + 1) * fv;
		var _g2 = 0;
		var _g3 = by1;
		while(_g2 < _g3) {
			var j = _g2++;
			val = val + imgA[ti + j * ws];
		}
		var _g4 = 0;
		var _g5 = by1 + 1;
		while(_g4 < _g5) {
			var j1 = _g4++;
			val = val + (imgA[ri] - fv);
			imgB[ti] = Math.round(UInt.toFloat(val) * iarr);
			ri += ws;
			ti += ws;
		}
		var _g6 = by1 + 1;
		var _g7 = h - by1;
		while(_g6 < _g7) {
			var j2 = _g6++;
			val = val + (imgA[ri] - imgA[li]);
			imgB[ti] = Math.round(UInt.toFloat(val) * iarr);
			li += ws;
			ri += ws;
			ti += ws;
		}
		var _g8 = h - by1;
		var _g9 = h;
		while(_g8 < _g9) {
			var j3 = _g8++;
			val = val + (lv - imgA[li]);
			imgB[ti] = Math.round(UInt.toFloat(val) * iarr);
			li += ws;
			ti += ws;
		}
	}
};
lime__$internal_graphics_ImageDataUtil.__boxBlurH = function(imgA,imgB,w,h,r,off) {
	var iarr = 1 / (r + r + 1);
	var ti;
	var li;
	var ri;
	var fv;
	var lv;
	var val;
	var _g = 0;
	var _g1 = h;
	while(_g < _g1) {
		var i = _g++;
		ti = i * w;
		li = ti;
		ri = ti + r;
		fv = imgA[ti * 4 + off];
		lv = imgA[(ti + w - 1) * 4 + off];
		val = (r + 1) * fv;
		var _g2 = 0;
		var _g3 = r;
		while(_g2 < _g3) {
			var j = _g2++;
			val = val + imgA[(ti + j) * 4 + off];
		}
		var _g4 = 0;
		var _g5 = r + 1;
		while(_g4 < _g5) {
			var j1 = _g4++;
			val = val + (imgA[ri * 4 + off] - fv);
			imgB[ti * 4 + off] = Math.round(UInt.toFloat(val) * iarr);
			++ri;
			++ti;
		}
		var _g6 = r + 1;
		var _g7 = w - r;
		while(_g6 < _g7) {
			var j2 = _g6++;
			val = val + (imgA[ri * 4 + off] - imgA[li * 4 + off]);
			imgB[ti * 4 + off] = Math.round(UInt.toFloat(val) * iarr);
			++ri;
			++li;
			++ti;
		}
		var _g8 = w - r;
		var _g9 = w;
		while(_g8 < _g9) {
			var j3 = _g8++;
			val = val + (lv - imgA[li * 4 + off]);
			imgB[ti * 4 + off] = Math.round(UInt.toFloat(val) * iarr);
			++li;
			++ti;
		}
	}
};
lime__$internal_graphics_ImageDataUtil.__boxBlurT = function(imgA,imgB,w,h,r,off) {
	var iarr = 1 / (r + r + 1);
	var ws = w * 4;
	var ti;
	var li;
	var ri;
	var fv;
	var lv;
	var val;
	var _g = 0;
	var _g1 = w;
	while(_g < _g1) {
		var i = _g++;
		ti = i * 4 + off;
		li = ti;
		ri = ti + r * ws;
		fv = imgA[ti];
		lv = imgA[ti + ws * (h - 1)];
		val = (r + 1) * fv;
		var _g2 = 0;
		var _g3 = r;
		while(_g2 < _g3) {
			var j = _g2++;
			val = val + imgA[ti + j * ws];
		}
		var _g4 = 0;
		var _g5 = r + 1;
		while(_g4 < _g5) {
			var j1 = _g4++;
			val = val + (imgA[ri] - fv);
			imgB[ti] = Math.round(UInt.toFloat(val) * iarr);
			ri += ws;
			ti += ws;
		}
		var _g6 = r + 1;
		var _g7 = h - r;
		while(_g6 < _g7) {
			var j2 = _g6++;
			val = val + (imgA[ri] - imgA[li]);
			imgB[ti] = Math.round(UInt.toFloat(val) * iarr);
			li += ws;
			ri += ws;
			ti += ws;
		}
		var _g8 = h - r;
		var _g9 = h;
		while(_g8 < _g9) {
			var j3 = _g8++;
			val = val + (lv - imgA[li]);
			imgB[ti] = Math.round(UInt.toFloat(val) * iarr);
			li += ws;
			ti += ws;
		}
	}
};
lime__$internal_graphics_ImageDataUtil.__calculateSourceOffset = function(sourceRect,destPoint,destX,destY) {
	var sourceX = destX - (destPoint.x | 0);
	var sourceY = destY - (destPoint.y | 0);
	var offset = 0;
	if(sourceX < 0 || sourceY < 0 || sourceX >= sourceRect.width || sourceY >= sourceRect.height) {
		offset = -1;
	} else {
		offset = 4 * (sourceY * (sourceRect.width | 0) + sourceX);
	}
	return offset;
};
lime__$internal_graphics_ImageDataUtil.__getBoxesForGaussianBlur = function(sigma,n) {
	var wIdeal = Math.sqrt(12 * sigma * sigma / n + 1);
	var wl = Math.floor(wIdeal);
	if(wl % 2 == 0) {
		--wl;
	}
	var wu = wl + 2;
	var mIdeal = (12 * sigma * sigma - n * wl * wl - 4 * n * wl - 3 * n) / (-4 * wl - 4);
	var m = Math.round(mIdeal);
	var sizes = [];
	var _g = 0;
	var _g1 = n;
	while(_g < _g1) {
		var i = _g++;
		sizes.push(i < m ? wl : wu);
	}
	return sizes;
};
lime__$internal_graphics_ImageDataUtil.__pixelCompare = function(n1,n2) {
	var tmp1 = n1 >>> 24 & 255;
	var tmp2 = n2 >>> 24 & 255;
	if(tmp1 != tmp2) {
		if(UInt.gt(tmp1,tmp2)) {
			return 1;
		} else {
			return -1;
		}
	} else {
		tmp1 = n1 >>> 16 & 255;
		tmp2 = n2 >>> 16 & 255;
		if(tmp1 != tmp2) {
			if(UInt.gt(tmp1,tmp2)) {
				return 1;
			} else {
				return -1;
			}
		} else {
			tmp1 = n1 >>> 8 & 255;
			tmp2 = n2 >>> 8 & 255;
			if(tmp1 != tmp2) {
				if(UInt.gt(tmp1,tmp2)) {
					return 1;
				} else {
					return -1;
				}
			} else {
				tmp1 = n1 & 255;
				tmp2 = n2 & 255;
				if(tmp1 != tmp2) {
					if(UInt.gt(tmp1,tmp2)) {
						return 1;
					} else {
						return -1;
					}
				} else {
					return 0;
				}
			}
		}
	}
};
lime__$internal_graphics_ImageDataUtil.__translatePixel = function(imgB,sourceRect,destRect,destPoint,destX,destY,strength) {
	var d = 4 * (destY * (destRect.width | 0) + destX);
	var s = lime__$internal_graphics_ImageDataUtil.__calculateSourceOffset(sourceRect,destPoint,destX,destY);
	if(s < 0) {
		imgB[d] = imgB[d + 1] = imgB[d + 2] = imgB[d + 3] = 0;
	} else {
		imgB[d] = imgB[s];
		imgB[d + 1] = imgB[s + 1];
		imgB[d + 2] = imgB[s + 2];
		var a = UInt.toFloat(imgB[s + 3]) * strength | 0;
		imgB[d + 3] = a < 0 ? 0 : a > 255 ? 255 : a;
	}
};
var lime__$internal_graphics__$ImageDataUtil_ImageDataView = function(image,rect) {
	this.image = image;
	if(rect == null) {
		this.rect = image.get_rect();
	} else {
		if(rect.x < 0) {
			rect.x = 0;
		}
		if(rect.y < 0) {
			rect.y = 0;
		}
		if(rect.x + rect.width > image.width) {
			rect.width = image.width - rect.x;
		}
		if(rect.y + rect.height > image.height) {
			rect.height = image.height - rect.y;
		}
		if(rect.width < 0) {
			rect.width = 0;
		}
		if(rect.height < 0) {
			rect.height = 0;
		}
		this.rect = rect;
	}
	this.stride = image.buffer.get_stride();
	this.__update();
};
$hxClasses["lime._internal.graphics._ImageDataUtil.ImageDataView"] = lime__$internal_graphics__$ImageDataUtil_ImageDataView;
lime__$internal_graphics__$ImageDataUtil_ImageDataView.__name__ = "lime._internal.graphics._ImageDataUtil.ImageDataView";
lime__$internal_graphics__$ImageDataUtil_ImageDataView.prototype = {
	x: null
	,y: null
	,height: null
	,width: null
	,byteOffset: null
	,image: null
	,rect: null
	,stride: null
	,tempRect: null
	,clip: function(x,y,width,height) {
		if(this.tempRect == null) {
			this.tempRect = new lime_math_Rectangle();
		}
		this.tempRect.setTo(x,y,width,height);
		this.rect.intersection(this.tempRect,this.rect);
		this.__update();
	}
	,hasRow: function(y) {
		if(y >= 0) {
			return y < this.height;
		} else {
			return false;
		}
	}
	,offset: function(x,y) {
		if(x < 0) {
			this.rect.x += x;
			if(this.rect.x < 0) {
				this.rect.x = 0;
			}
		} else {
			this.rect.x += x;
			this.rect.width -= x;
		}
		if(y < 0) {
			this.rect.y += y;
			if(this.rect.y < 0) {
				this.rect.y = 0;
			}
		} else {
			this.rect.y += y;
			this.rect.height -= y;
		}
		this.__update();
	}
	,row: function(y) {
		return this.byteOffset + this.stride * y;
	}
	,__update: function() {
		this.x = Math.ceil(this.rect.x);
		this.y = Math.ceil(this.rect.y);
		this.width = Math.floor(this.rect.width);
		this.height = Math.floor(this.rect.height);
		this.byteOffset = this.stride * (this.y + this.image.offsetY) + (this.x + this.image.offsetX) * 4;
	}
	,__class__: lime__$internal_graphics__$ImageDataUtil_ImageDataView
};
var lime__$internal_graphics_StackBlur = function() { };
$hxClasses["lime._internal.graphics.StackBlur"] = lime__$internal_graphics_StackBlur;
lime__$internal_graphics_StackBlur.__name__ = "lime._internal.graphics.StackBlur";
lime__$internal_graphics_StackBlur.blur = function(dest,source,sourceRect,destPoint,blurX,blurY,quality) {
	dest.copyPixels(source,sourceRect,destPoint);
	lime__$internal_graphics_StackBlur.__stackBlurCanvasRGBA(dest,sourceRect.width | 0,sourceRect.height | 0,blurX,blurY,quality);
};
lime__$internal_graphics_StackBlur.__stackBlurCanvasRGBA = function(image,width,height,blurX,blurY,quality) {
	var radiusX = Math.round(blurX) >> 1;
	var radiusY = Math.round(blurY) >> 1;
	if(lime__$internal_graphics_StackBlur.MUL_TABLE == null) {
		return;
	}
	if(radiusX >= lime__$internal_graphics_StackBlur.MUL_TABLE.length) {
		radiusX = lime__$internal_graphics_StackBlur.MUL_TABLE.length - 1;
	}
	if(radiusY >= lime__$internal_graphics_StackBlur.MUL_TABLE.length) {
		radiusY = lime__$internal_graphics_StackBlur.MUL_TABLE.length - 1;
	}
	if(radiusX < 0 || radiusY < 0) {
		return;
	}
	var iterations = quality;
	if(iterations < 1) {
		iterations = 1;
	}
	if(iterations > 3) {
		iterations = 3;
	}
	var px = image.get_data();
	var x;
	var y;
	var i;
	var p;
	var yp;
	var yi;
	var yw;
	var r;
	var g;
	var b;
	var a;
	var pr;
	var pg;
	var pb;
	var pa;
	var f;
	var divx = radiusX + radiusX + 1;
	var divy = radiusY + radiusY + 1;
	var w = width;
	var h = height;
	var w1 = w - 1;
	var h1 = h - 1;
	var rxp1 = radiusX + 1;
	var ryp1 = radiusY + 1;
	var ssx = new lime__$internal_graphics_BlurStack();
	var sx = ssx;
	var _g = 1;
	var _g1 = divx;
	while(_g < _g1) {
		var i1 = _g++;
		sx = sx.n = new lime__$internal_graphics_BlurStack();
	}
	sx.n = ssx;
	var ssy = new lime__$internal_graphics_BlurStack();
	var sy = ssy;
	var _g = 1;
	var _g1 = divy;
	while(_g < _g1) {
		var i1 = _g++;
		sy = sy.n = new lime__$internal_graphics_BlurStack();
	}
	sy.n = ssy;
	var si = null;
	var mtx = lime__$internal_graphics_StackBlur.MUL_TABLE[radiusX];
	var stx = lime__$internal_graphics_StackBlur.SHG_TABLE[radiusX];
	var mty = lime__$internal_graphics_StackBlur.MUL_TABLE[radiusY];
	var sty = lime__$internal_graphics_StackBlur.SHG_TABLE[radiusY];
	while(iterations > 0) {
		--iterations;
		yi = 0;
		yw = yi;
		var ms = mtx;
		var ss = stx;
		y = h;
		while(true) {
			pr = px[yi];
			r = rxp1 * pr;
			pg = px[yi + 1];
			g = rxp1 * pg;
			pb = px[yi + 2];
			b = rxp1 * pb;
			pa = px[yi + 3];
			a = rxp1 * pa;
			sx = ssx;
			i = rxp1;
			while(true) {
				sx.r = pr;
				sx.g = pg;
				sx.b = pb;
				sx.a = pa;
				sx = sx.n;
				if(!(--i > -1)) {
					break;
				}
			}
			var _g = 1;
			var _g1 = rxp1;
			while(_g < _g1) {
				var i1 = _g++;
				p = yi + ((w1 < i1 ? w1 : i1) << 2);
				r += sx.r = px[p];
				g += sx.g = px[p + 1];
				b += sx.b = px[p + 2];
				a += sx.a = px[p + 3];
				sx = sx.n;
			}
			si = ssx;
			var _g2 = 0;
			var _g3 = w;
			while(_g2 < _g3) {
				var x = _g2++;
				px[yi++] = r * ms >>> ss;
				px[yi++] = g * ms >>> ss;
				px[yi++] = b * ms >>> ss;
				px[yi++] = a * ms >>> ss;
				p = x + radiusX + 1;
				p = yw + (p < w1 ? p : w1) << 2;
				r -= si.r - (si.r = px[p]);
				g -= si.g - (si.g = px[p + 1]);
				b -= si.b - (si.b = px[p + 2]);
				a -= si.a - (si.a = px[p + 3]);
				si = si.n;
			}
			yw += w;
			if(!(--y > 0)) {
				break;
			}
		}
		ms = mty;
		ss = sty;
		var _g4 = 0;
		var _g5 = w;
		while(_g4 < _g5) {
			var x1 = _g4++;
			yi = x1 << 2;
			pr = px[yi];
			r = ryp1 * pr;
			pg = px[yi + 1];
			g = ryp1 * pg;
			pb = px[yi + 2];
			b = ryp1 * pb;
			pa = px[yi + 3];
			a = ryp1 * pa;
			sy = ssy;
			var _g6 = 0;
			var _g7 = ryp1;
			while(_g6 < _g7) {
				var i2 = _g6++;
				sy.r = pr;
				sy.g = pg;
				sy.b = pb;
				sy.a = pa;
				sy = sy.n;
			}
			yp = w;
			var _g8 = 1;
			var _g9 = radiusY + 1;
			while(_g8 < _g9) {
				var i3 = _g8++;
				yi = yp + x1 << 2;
				r += sy.r = px[yi];
				g += sy.g = px[yi + 1];
				b += sy.b = px[yi + 2];
				a += sy.a = px[yi + 3];
				sy = sy.n;
				if(i3 < h1) {
					yp += w;
				}
			}
			yi = x1;
			si = ssy;
			if(iterations > 0) {
				var _g10 = 0;
				var _g11 = h;
				while(_g10 < _g11) {
					var y1 = _g10++;
					p = yi << 2;
					pa = a * ms >>> ss;
					px[p + 3] = pa;
					if(pa > 0) {
						px[p] = r * ms >>> ss;
						px[p + 1] = g * ms >>> ss;
						px[p + 2] = b * ms >>> ss;
					} else {
						px[p] = px[p + 1] = px[p + 2] = 0;
					}
					p = y1 + ryp1;
					p = x1 + (p < h1 ? p : h1) * w << 2;
					r -= si.r - (si.r = px[p]);
					g -= si.g - (si.g = px[p + 1]);
					b -= si.b - (si.b = px[p + 2]);
					a -= si.a - (si.a = px[p + 3]);
					si = si.n;
					yi += w;
				}
			} else {
				var _g12 = 0;
				var _g13 = h;
				while(_g12 < _g13) {
					var y2 = _g12++;
					p = yi << 2;
					pa = a * ms >>> ss;
					px[p + 3] = pa;
					if(pa > 0) {
						f = 255 / pa;
						pr = (r * ms >>> ss) * f | 0;
						pg = (g * ms >>> ss) * f | 0;
						pb = (b * ms >>> ss) * f | 0;
						px[p] = pr > 255 ? 255 : pr;
						px[p + 1] = pg > 255 ? 255 : pg;
						px[p + 2] = pb > 255 ? 255 : pb;
					} else {
						px[p] = px[p + 1] = px[p + 2] = 0;
					}
					p = y2 + ryp1;
					p = x1 + (p < h1 ? p : h1) * w << 2;
					r -= si.r - (si.r = px[p]);
					g -= si.g - (si.g = px[p + 1]);
					b -= si.b - (si.b = px[p + 2]);
					a -= si.a - (si.a = px[p + 3]);
					si = si.n;
					yi += w;
				}
			}
		}
	}
};
var lime__$internal_graphics_BlurStack = function() {
	this.r = 0;
	this.g = 0;
	this.b = 0;
	this.a = 0;
	this.n = null;
};
$hxClasses["lime._internal.graphics.BlurStack"] = lime__$internal_graphics_BlurStack;
lime__$internal_graphics_BlurStack.__name__ = "lime._internal.graphics.BlurStack";
lime__$internal_graphics_BlurStack.prototype = {
	r: null
	,g: null
	,b: null
	,a: null
	,n: null
	,__class__: lime__$internal_graphics_BlurStack
};
var lime__$internal_macros_AssetsMacro = function() { };
$hxClasses["lime._internal.macros.AssetsMacro"] = lime__$internal_macros_AssetsMacro;
lime__$internal_macros_AssetsMacro.__name__ = "lime._internal.macros.AssetsMacro";
var lime_app_Event = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app.Event"] = lime_app_Event;
lime_app_Event.__name__ = "lime.app.Event";
lime_app_Event.prototype = {
	canceled: null
	,__listeners: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,dispatch: null
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__class__: lime_app_Event
};
var lime_app_Future = function(work,async) {
	if(async == null) {
		async = false;
	}
	if(work != null) {
		if(async) {
			var promise = new lime_app_Promise();
			promise.future = this;
			lime_app__$Future_FutureWork.queue({ promise : promise, work : work});
		} else {
			try {
				this.value = work();
				this.isComplete = true;
			} catch( _g ) {
				haxe_NativeStackTrace.lastError = _g;
				var e = haxe_Exception.caught(_g).unwrap();
				this.error = e;
				this.isError = true;
			}
		}
	}
};
$hxClasses["lime.app.Future"] = lime_app_Future;
lime_app_Future.__name__ = "lime.app.Future";
lime_app_Future.ofEvents = function(onComplete,onError,onProgress) {
	var promise = new lime_app_Promise();
	onComplete.add(function(data) {
		promise.complete(data);
	},true);
	if(onError != null) {
		onError.add(function(error) {
			promise.error(error);
		},true);
	}
	if(onProgress != null) {
		onProgress.add(function(progress,total) {
			promise.progress(progress,total);
		},true);
	}
	return promise.future;
};
lime_app_Future.withError = function(error) {
	var future = new lime_app_Future();
	future.isError = true;
	future.error = error;
	return future;
};
lime_app_Future.withValue = function(value) {
	var future = new lime_app_Future();
	future.isComplete = true;
	future.value = value;
	return future;
};
lime_app_Future.prototype = {
	error: null
	,isComplete: null
	,isError: null
	,value: null
	,__completeListeners: null
	,__errorListeners: null
	,__progressListeners: null
	,onComplete: function(listener) {
		if(listener != null) {
			if(this.isComplete) {
				listener(this.value);
			} else if(!this.isError) {
				if(this.__completeListeners == null) {
					this.__completeListeners = [];
				}
				this.__completeListeners.push(listener);
			}
		}
		return this;
	}
	,onError: function(listener) {
		if(listener != null) {
			if(this.isError) {
				listener(this.error);
			} else if(!this.isComplete) {
				if(this.__errorListeners == null) {
					this.__errorListeners = [];
				}
				this.__errorListeners.push(listener);
			}
		}
		return this;
	}
	,onProgress: function(listener) {
		if(listener != null) {
			if(this.__progressListeners == null) {
				this.__progressListeners = [];
			}
			this.__progressListeners.push(listener);
		}
		return this;
	}
	,ready: function(waitTime) {
		if(waitTime == null) {
			waitTime = -1;
		}
		if(this.isComplete || this.isError) {
			return this;
		} else {
			lime_utils_Log.warn("Cannot block thread in JavaScript",{ fileName : "lime/app/Future.hx", lineNumber : 209, className : "lime.app.Future", methodName : "ready"});
			return this;
		}
	}
	,result: function(waitTime) {
		if(waitTime == null) {
			waitTime = -1;
		}
		this.ready(waitTime);
		if(this.isComplete) {
			return this.value;
		} else {
			return null;
		}
	}
	,then: function(next) {
		if(this.isComplete) {
			return next(this.value);
		} else if(this.isError) {
			var future = new lime_app_Future();
			future.isError = true;
			future.error = this.error;
			return future;
		} else {
			var promise = new lime_app_Promise();
			this.onError($bind(promise,promise.error));
			this.onProgress($bind(promise,promise.progress));
			this.onComplete(function(val) {
				var future = next(val);
				future.onError($bind(promise,promise.error));
				future.onComplete($bind(promise,promise.complete));
			});
			return promise.future;
		}
	}
	,__class__: lime_app_Future
};
var lime_app__$Future_FutureWork = function() { };
$hxClasses["lime.app._Future.FutureWork"] = lime_app__$Future_FutureWork;
lime_app__$Future_FutureWork.__name__ = "lime.app._Future.FutureWork";
lime_app__$Future_FutureWork.queue = function(state) {
	if(lime_app__$Future_FutureWork.threadPool == null) {
		lime_app__$Future_FutureWork.threadPool = new lime_system_ThreadPool();
		lime_app__$Future_FutureWork.threadPool.doWork.add(lime_app__$Future_FutureWork.threadPool_doWork);
		lime_app__$Future_FutureWork.threadPool.onComplete.add(lime_app__$Future_FutureWork.threadPool_onComplete);
		lime_app__$Future_FutureWork.threadPool.onError.add(lime_app__$Future_FutureWork.threadPool_onError);
	}
	lime_app__$Future_FutureWork.threadPool.queue(state);
};
lime_app__$Future_FutureWork.threadPool_doWork = function(state) {
	try {
		var result = state.work();
		lime_app__$Future_FutureWork.threadPool.sendComplete({ promise : state.promise, result : result});
	} catch( _g ) {
		haxe_NativeStackTrace.lastError = _g;
		var e = haxe_Exception.caught(_g).unwrap();
		lime_app__$Future_FutureWork.threadPool.sendError({ promise : state.promise, error : e});
	}
};
lime_app__$Future_FutureWork.threadPool_onComplete = function(state) {
	state.promise.complete(state.result);
};
lime_app__$Future_FutureWork.threadPool_onError = function(state) {
	state.promise.error(state.error);
};
var lime_app_Promise = function() {
	this.future = new lime_app_Future();
};
$hxClasses["lime.app.Promise"] = lime_app_Promise;
lime_app_Promise.__name__ = "lime.app.Promise";
lime_app_Promise.prototype = {
	future: null
	,isComplete: null
	,isError: null
	,complete: function(data) {
		if(!this.future.isError) {
			this.future.isComplete = true;
			this.future.value = data;
			if(this.future.__completeListeners != null) {
				var _g = 0;
				var _g1 = this.future.__completeListeners;
				while(_g < _g1.length) {
					var listener = _g1[_g];
					++_g;
					listener(data);
				}
				this.future.__completeListeners = null;
			}
		}
		return this;
	}
	,completeWith: function(future) {
		future.onComplete($bind(this,this.complete));
		future.onError($bind(this,this.error));
		future.onProgress($bind(this,this.progress));
		return this;
	}
	,error: function(msg) {
		if(!this.future.isComplete) {
			this.future.isError = true;
			this.future.error = msg;
			if(this.future.__errorListeners != null) {
				var _g = 0;
				var _g1 = this.future.__errorListeners;
				while(_g < _g1.length) {
					var listener = _g1[_g];
					++_g;
					listener(msg);
				}
				this.future.__errorListeners = null;
			}
		}
		return this;
	}
	,progress: function(progress,total) {
		if(!this.future.isError && !this.future.isComplete) {
			if(this.future.__progressListeners != null) {
				var _g = 0;
				var _g1 = this.future.__progressListeners;
				while(_g < _g1.length) {
					var listener = _g1[_g];
					++_g;
					listener(progress,total);
				}
			}
		}
		return this;
	}
	,get_isComplete: function() {
		return this.future.isComplete;
	}
	,get_isError: function() {
		return this.future.isError;
	}
	,__class__: lime_app_Promise
	,__properties__: {get_isError:"get_isError",get_isComplete:"get_isComplete"}
};
var lime_app__$Event_$Array_$String_$_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Array_String__Void"] = lime_app__$Event_$Array_$String_$_$Void;
lime_app__$Event_$Array_$String_$_$Void.__name__ = "lime.app._Event_Array_String__Void";
lime_app__$Event_$Array_$String_$_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$Array_$String_$_$Void
};
var lime_app__$Event_$Dynamic_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Dynamic_Void"] = lime_app__$Event_$Dynamic_$Void;
lime_app__$Event_$Dynamic_$Void.__name__ = "lime.app._Event_Dynamic_Void";
lime_app__$Event_$Dynamic_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$Dynamic_$Void
};
var lime_app__$Event_$Float_$Float_$Float_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Float_Float_Float_Void"] = lime_app__$Event_$Float_$Float_$Float_$Void;
lime_app__$Event_$Float_$Float_$Float_$Void.__name__ = "lime.app._Event_Float_Float_Float_Void";
lime_app__$Event_$Float_$Float_$Float_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a,a1,a2) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1,a2);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$Float_$Float_$Float_$Void
};
var lime_app__$Event_$Float_$Float_$Int_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Float_Float_Int_Void"] = lime_app__$Event_$Float_$Float_$Int_$Void;
lime_app__$Event_$Float_$Float_$Int_$Void.__name__ = "lime.app._Event_Float_Float_Int_Void";
lime_app__$Event_$Float_$Float_$Int_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a,a1,a2) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1,a2);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$Float_$Float_$Int_$Void
};
var lime_app__$Event_$Float_$Float_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Float_Float_Void"] = lime_app__$Event_$Float_$Float_$Void;
lime_app__$Event_$Float_$Float_$Void.__name__ = "lime.app._Event_Float_Float_Void";
lime_app__$Event_$Float_$Float_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a,a1) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$Float_$Float_$Void
};
var lime_app__$Event_$Float_$Float_$lime_$ui_$MouseButton_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Float_Float_lime_ui_MouseButton_Void"] = lime_app__$Event_$Float_$Float_$lime_$ui_$MouseButton_$Void;
lime_app__$Event_$Float_$Float_$lime_$ui_$MouseButton_$Void.__name__ = "lime.app._Event_Float_Float_lime_ui_MouseButton_Void";
lime_app__$Event_$Float_$Float_$lime_$ui_$MouseButton_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a,a1,a2) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1,a2);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$Float_$Float_$lime_$ui_$MouseButton_$Void
};
var lime_app__$Event_$Float_$Float_$lime_$ui_$MouseWheelMode_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Float_Float_lime_ui_MouseWheelMode_Void"] = lime_app__$Event_$Float_$Float_$lime_$ui_$MouseWheelMode_$Void;
lime_app__$Event_$Float_$Float_$lime_$ui_$MouseWheelMode_$Void.__name__ = "lime.app._Event_Float_Float_lime_ui_MouseWheelMode_Void";
lime_app__$Event_$Float_$Float_$lime_$ui_$MouseWheelMode_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a,a1,a2) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1,a2);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$Float_$Float_$lime_$ui_$MouseWheelMode_$Void
};
var lime_app__$Event_$Int_$Float_$Float_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Int_Float_Float_Void"] = lime_app__$Event_$Int_$Float_$Float_$Void;
lime_app__$Event_$Int_$Float_$Float_$Void.__name__ = "lime.app._Event_Int_Float_Float_Void";
lime_app__$Event_$Int_$Float_$Float_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a,a1,a2) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1,a2);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$Int_$Float_$Float_$Void
};
var lime_app__$Event_$Int_$Float_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Int_Float_Void"] = lime_app__$Event_$Int_$Float_$Void;
lime_app__$Event_$Int_$Float_$Void.__name__ = "lime.app._Event_Int_Float_Void";
lime_app__$Event_$Int_$Float_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a,a1) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$Int_$Float_$Void
};
var lime_app__$Event_$Int_$Int_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Int_Int_Void"] = lime_app__$Event_$Int_$Int_$Void;
lime_app__$Event_$Int_$Int_$Void.__name__ = "lime.app._Event_Int_Int_Void";
lime_app__$Event_$Int_$Int_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a,a1) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$Int_$Int_$Void
};
var lime_app__$Event_$Int_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Int_Void"] = lime_app__$Event_$Int_$Void;
lime_app__$Event_$Int_$Void.__name__ = "lime.app._Event_Int_Void";
lime_app__$Event_$Int_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$Int_$Void
};
var lime_app__$Event_$Int_$lime_$ui_$JoystickHatPosition_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Int_lime_ui_JoystickHatPosition_Void"] = lime_app__$Event_$Int_$lime_$ui_$JoystickHatPosition_$Void;
lime_app__$Event_$Int_$lime_$ui_$JoystickHatPosition_$Void.__name__ = "lime.app._Event_Int_lime_ui_JoystickHatPosition_Void";
lime_app__$Event_$Int_$lime_$ui_$JoystickHatPosition_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a,a1) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$Int_$lime_$ui_$JoystickHatPosition_$Void
};
var lime_app__$Event_$String_$Int_$Int_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_String_Int_Int_Void"] = lime_app__$Event_$String_$Int_$Int_$Void;
lime_app__$Event_$String_$Int_$Int_$Void.__name__ = "lime.app._Event_String_Int_Int_Void";
lime_app__$Event_$String_$Int_$Int_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a,a1,a2) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1,a2);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$String_$Int_$Int_$Void
};
var lime_app__$Event_$String_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_String_Void"] = lime_app__$Event_$String_$Void;
lime_app__$Event_$String_$Void.__name__ = "lime.app._Event_String_Void";
lime_app__$Event_$String_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$String_$Void
};
var lime_app__$Event_$Void_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Void_Void"] = lime_app__$Event_$Void_$Void;
lime_app__$Event_$Void_$Void.__name__ = "lime.app._Event_Void_Void";
lime_app__$Event_$Void_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function() {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i]();
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$Void_$Void
};
var lime_app__$Event_$lime_$graphics_$RenderContext_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_lime_graphics_RenderContext_Void"] = lime_app__$Event_$lime_$graphics_$RenderContext_$Void;
lime_app__$Event_$lime_$graphics_$RenderContext_$Void.__name__ = "lime.app._Event_lime_graphics_RenderContext_Void";
lime_app__$Event_$lime_$graphics_$RenderContext_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$lime_$graphics_$RenderContext_$Void
};
var lime_app__$Event_$lime_$ui_$GamepadAxis_$Float_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_lime_ui_GamepadAxis_Float_Void"] = lime_app__$Event_$lime_$ui_$GamepadAxis_$Float_$Void;
lime_app__$Event_$lime_$ui_$GamepadAxis_$Float_$Void.__name__ = "lime.app._Event_lime_ui_GamepadAxis_Float_Void";
lime_app__$Event_$lime_$ui_$GamepadAxis_$Float_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a,a1) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$lime_$ui_$GamepadAxis_$Float_$Void
};
var lime_app__$Event_$lime_$ui_$GamepadButton_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_lime_ui_GamepadButton_Void"] = lime_app__$Event_$lime_$ui_$GamepadButton_$Void;
lime_app__$Event_$lime_$ui_$GamepadButton_$Void.__name__ = "lime.app._Event_lime_ui_GamepadButton_Void";
lime_app__$Event_$lime_$ui_$GamepadButton_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$lime_$ui_$GamepadButton_$Void
};
var lime_app__$Event_$lime_$ui_$Gamepad_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_lime_ui_Gamepad_Void"] = lime_app__$Event_$lime_$ui_$Gamepad_$Void;
lime_app__$Event_$lime_$ui_$Gamepad_$Void.__name__ = "lime.app._Event_lime_ui_Gamepad_Void";
lime_app__$Event_$lime_$ui_$Gamepad_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$lime_$ui_$Gamepad_$Void
};
var lime_app__$Event_$lime_$ui_$Joystick_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_lime_ui_Joystick_Void"] = lime_app__$Event_$lime_$ui_$Joystick_$Void;
lime_app__$Event_$lime_$ui_$Joystick_$Void.__name__ = "lime.app._Event_lime_ui_Joystick_Void";
lime_app__$Event_$lime_$ui_$Joystick_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$lime_$ui_$Joystick_$Void
};
var lime_app__$Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_lime_ui_KeyCode_lime_ui_KeyModifier_Void"] = lime_app__$Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void;
lime_app__$Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void.__name__ = "lime.app._Event_lime_ui_KeyCode_lime_ui_KeyModifier_Void";
lime_app__$Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a,a1) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void
};
var lime_app__$Event_$lime_$ui_$Touch_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_lime_ui_Touch_Void"] = lime_app__$Event_$lime_$ui_$Touch_$Void;
lime_app__$Event_$lime_$ui_$Touch_$Void.__name__ = "lime.app._Event_lime_ui_Touch_Void";
lime_app__$Event_$lime_$ui_$Touch_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$lime_$ui_$Touch_$Void
};
var lime_app__$Event_$lime_$ui_$Window_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_lime_ui_Window_Void"] = lime_app__$Event_$lime_$ui_$Window_$Void;
lime_app__$Event_$lime_$ui_$Window_$Void.__name__ = "lime.app._Event_lime_ui_Window_Void";
lime_app__$Event_$lime_$ui_$Window_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$lime_$ui_$Window_$Void
};
var lime_app__$Event_$lime_$utils_$Resource_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_lime_utils_Resource_Void"] = lime_app__$Event_$lime_$utils_$Resource_$Void;
lime_app__$Event_$lime_$utils_$Resource_$Void.__name__ = "lime.app._Event_lime_utils_Resource_Void";
lime_app__$Event_$lime_$utils_$Resource_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$lime_$utils_$Resource_$Void
};
var lime_app__$Event_$ofEvents_$T_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_ofEvents_T_Void"] = lime_app__$Event_$ofEvents_$T_$Void;
lime_app__$Event_$ofEvents_$T_$Void.__name__ = "lime.app._Event_ofEvents_T_Void";
lime_app__$Event_$ofEvents_$T_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$ofEvents_$T_$Void
};
var lime_graphics_CairoRenderContext = {};
lime_graphics_CairoRenderContext.fromRenderContext = function(context) {
	return context.cairo;
};
var lime_graphics_Canvas2DRenderContext = {};
lime_graphics_Canvas2DRenderContext.fromRenderContext = function(context) {
	return context.canvas2D;
};
var lime_graphics_DOMRenderContext = {};
lime_graphics_DOMRenderContext.fromRenderContext = function(context) {
	return context.dom;
};
var lime_graphics_FlashRenderContext = {};
lime_graphics_FlashRenderContext.fromRenderContext = function(context) {
	return null;
};
var lime_graphics_Image = function(buffer,offsetX,offsetY,width,height,color,type) {
	if(height == null) {
		height = -1;
	}
	if(width == null) {
		width = -1;
	}
	if(offsetY == null) {
		offsetY = 0;
	}
	if(offsetX == null) {
		offsetX = 0;
	}
	this.offsetX = offsetX;
	this.offsetY = offsetY;
	this.width = width;
	this.height = height;
	this.version = 0;
	if(type == null) {
		type = lime_graphics_ImageType.CANVAS;
	}
	this.type = type;
	if(buffer == null) {
		if(width > 0 && height > 0) {
			switch(this.type._hx_index) {
			case 0:
				this.buffer = new lime_graphics_ImageBuffer(null,width,height);
				lime__$internal_graphics_ImageCanvasUtil.createCanvas(this,width,height);
				if(color != null && color != 0) {
					this.fillRect(new lime_math_Rectangle(0,0,width,height),color);
				}
				break;
			case 1:
				var elements = width * height * 4;
				var array = null;
				var vector = null;
				var view = null;
				var buffer1 = null;
				var len = null;
				var this1;
				if(elements != null) {
					this1 = new Uint8Array(elements);
				} else if(array != null) {
					this1 = new Uint8Array(array);
				} else if(vector != null) {
					this1 = new Uint8Array(vector.__array);
				} else if(view != null) {
					this1 = new Uint8Array(view);
				} else if(buffer1 != null) {
					if(len == null) {
						this1 = new Uint8Array(buffer1,0);
					} else {
						this1 = new Uint8Array(buffer1,0,len);
					}
				} else {
					this1 = null;
				}
				this.buffer = new lime_graphics_ImageBuffer(this1,width,height);
				if(color != null && color != 0) {
					this.fillRect(new lime_math_Rectangle(0,0,width,height),color);
				}
				break;
			case 2:
				break;
			default:
			}
		}
	} else {
		this.__fromImageBuffer(buffer);
	}
};
$hxClasses["lime.graphics.Image"] = lime_graphics_Image;
lime_graphics_Image.__name__ = "lime.graphics.Image";
lime_graphics_Image.fromBase64 = function(base64,type) {
	if(base64 == null) {
		return null;
	}
	var image = new lime_graphics_Image();
	image.__fromBase64(base64,type);
	return image;
};
lime_graphics_Image.fromBitmapData = function(bitmapData) {
	if(bitmapData == null) {
		return null;
	}
	return bitmapData.image;
};
lime_graphics_Image.fromBytes = function(bytes) {
	if(bytes == null) {
		return null;
	}
	var image = new lime_graphics_Image();
	if(image.__fromBytes(bytes)) {
		return image;
	} else {
		return null;
	}
};
lime_graphics_Image.fromCanvas = function(canvas) {
	if(canvas == null) {
		return null;
	}
	var buffer = new lime_graphics_ImageBuffer(null,canvas.width,canvas.height);
	buffer.set_src(canvas);
	var image = new lime_graphics_Image(buffer);
	image.type = lime_graphics_ImageType.CANVAS;
	return image;
};
lime_graphics_Image.fromFile = function(path) {
	if(path == null) {
		return null;
	}
	var image = new lime_graphics_Image();
	if(image.__fromFile(path)) {
		return image;
	} else {
		return null;
	}
};
lime_graphics_Image.fromImageElement = function(image) {
	if(image == null) {
		return null;
	}
	var buffer = new lime_graphics_ImageBuffer(null,image.width,image.height);
	buffer.set_src(image);
	var _image = new lime_graphics_Image(buffer);
	_image.type = lime_graphics_ImageType.CANVAS;
	return _image;
};
lime_graphics_Image.loadFromBase64 = function(base64,type) {
	if(base64 == null || type == null) {
		return lime_app_Future.withValue(null);
	}
	return lime__$internal_backend_html5_HTML5HTTPRequest.loadImage("data:" + type + ";base64," + base64);
};
lime_graphics_Image.loadFromBytes = function(bytes) {
	if(bytes == null) {
		return lime_app_Future.withValue(null);
	}
	var type = "";
	if(lime_graphics_Image.__isPNG(bytes)) {
		type = "image/png";
	} else if(lime_graphics_Image.__isJPG(bytes)) {
		type = "image/jpeg";
	} else if(lime_graphics_Image.__isGIF(bytes)) {
		type = "image/gif";
	} else if(lime_graphics_Image.__isWebP(bytes)) {
		type = "image/webp";
	} else {
		return lime_app_Future.withValue(null);
	}
	return lime__$internal_backend_html5_HTML5HTTPRequest.loadImageFromBytes(bytes,type);
};
lime_graphics_Image.loadFromFile = function(path) {
	if(path == null) {
		return lime_app_Future.withValue(null);
	}
	return lime__$internal_backend_html5_HTML5HTTPRequest.loadImage(path);
};
lime_graphics_Image.__isGIF = function(bytes) {
	if(bytes == null || bytes.length < 6) {
		return false;
	}
	var header = bytes.getString(0,6);
	if(header != "GIF87a") {
		return header == "GIF89a";
	} else {
		return true;
	}
};
lime_graphics_Image.__isJPG = function(bytes) {
	if(bytes == null || bytes.length < 4) {
		return false;
	}
	if(bytes.b[0] == 255 && bytes.b[1] == 216 && bytes.b[bytes.length - 2] == 255) {
		return bytes.b[bytes.length - 1] == 217;
	} else {
		return false;
	}
};
lime_graphics_Image.__isPNG = function(bytes) {
	if(bytes == null || bytes.length < 8) {
		return false;
	}
	if(bytes.b[0] == 137 && bytes.b[1] == 80 && bytes.b[2] == 78 && bytes.b[3] == 71 && bytes.b[4] == 13 && bytes.b[5] == 10 && bytes.b[6] == 26) {
		return bytes.b[7] == 10;
	} else {
		return false;
	}
};
lime_graphics_Image.__isWebP = function(bytes) {
	if(bytes == null || bytes.length < 16) {
		return false;
	}
	if(bytes.getString(0,4) == "RIFF") {
		return bytes.getString(8,4) == "WEBP";
	} else {
		return false;
	}
};
lime_graphics_Image.prototype = {
	buffer: null
	,dirty: null
	,height: null
	,offsetX: null
	,offsetY: null
	,rect: null
	,type: null
	,version: null
	,width: null
	,x: null
	,y: null
	,clone: function() {
		if(this.buffer != null) {
			if(this.type == lime_graphics_ImageType.CANVAS) {
				lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(this);
			} else {
				lime__$internal_graphics_ImageCanvasUtil.convertToData(this);
			}
			var image = new lime_graphics_Image(this.buffer.clone(),this.offsetX,this.offsetY,this.width,this.height,null,this.type);
			image.version = this.version;
			return image;
		} else {
			return new lime_graphics_Image(null,this.offsetX,this.offsetY,this.width,this.height,null,this.type);
		}
	}
	,colorTransform: function(rect,colorMatrix) {
		rect = this.__clipRect(rect);
		if(this.buffer == null || rect == null) {
			return;
		}
		switch(this.type._hx_index) {
		case 0:
			lime__$internal_graphics_ImageCanvasUtil.colorTransform(this,rect,colorMatrix);
			break;
		case 1:
			lime__$internal_graphics_ImageCanvasUtil.convertToData(this);
			lime__$internal_graphics_ImageDataUtil.colorTransform(this,rect,colorMatrix);
			break;
		case 2:
			rect.offset(this.offsetX,this.offsetY);
			this.buffer.__srcBitmapData.colorTransform(rect.__toFlashRectangle(),lime_math_ColorMatrix.__toFlashColorTransform(colorMatrix));
			break;
		default:
		}
	}
	,copyChannel: function(sourceImage,sourceRect,destPoint,sourceChannel,destChannel) {
		sourceRect = this.__clipRect(sourceRect);
		if(this.buffer == null || sourceRect == null) {
			return;
		}
		if(destChannel == lime_graphics_ImageChannel.ALPHA && !this.get_transparent()) {
			return;
		}
		if(sourceRect.width <= 0 || sourceRect.height <= 0) {
			return;
		}
		if(sourceRect.x + sourceRect.width > sourceImage.width) {
			sourceRect.width = sourceImage.width - sourceRect.x;
		}
		if(sourceRect.y + sourceRect.height > sourceImage.height) {
			sourceRect.height = sourceImage.height - sourceRect.y;
		}
		switch(this.type._hx_index) {
		case 0:
			lime__$internal_graphics_ImageCanvasUtil.copyChannel(this,sourceImage,sourceRect,destPoint,sourceChannel,destChannel);
			break;
		case 1:
			lime__$internal_graphics_ImageCanvasUtil.convertToData(this);
			lime__$internal_graphics_ImageCanvasUtil.convertToData(sourceImage);
			lime__$internal_graphics_ImageDataUtil.copyChannel(this,sourceImage,sourceRect,destPoint,sourceChannel,destChannel);
			break;
		case 2:
			var srcChannel;
			switch(sourceChannel._hx_index) {
			case 0:
				srcChannel = 1;
				break;
			case 1:
				srcChannel = 2;
				break;
			case 2:
				srcChannel = 4;
				break;
			case 3:
				srcChannel = 8;
				break;
			}
			var dstChannel;
			switch(destChannel._hx_index) {
			case 0:
				dstChannel = 1;
				break;
			case 1:
				dstChannel = 2;
				break;
			case 2:
				dstChannel = 4;
				break;
			case 3:
				dstChannel = 8;
				break;
			}
			sourceRect.offset(sourceImage.offsetX,sourceImage.offsetY);
			destPoint.offset(this.offsetX,this.offsetY);
			this.buffer.__srcBitmapData.copyChannel(sourceImage.buffer.get_src(),sourceRect.__toFlashRectangle(),destPoint.__toFlashPoint(),srcChannel,dstChannel);
			break;
		default:
		}
	}
	,copyPixels: function(sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha) {
		if(mergeAlpha == null) {
			mergeAlpha = false;
		}
		if(this.buffer == null || sourceImage == null) {
			return;
		}
		if(sourceRect.width <= 0 || sourceRect.height <= 0) {
			return;
		}
		if(this.width <= 0 || this.height <= 0) {
			return;
		}
		if(sourceRect.x + sourceRect.width > sourceImage.width) {
			sourceRect.width = sourceImage.width - sourceRect.x;
		}
		if(sourceRect.y + sourceRect.height > sourceImage.height) {
			sourceRect.height = sourceImage.height - sourceRect.y;
		}
		if(sourceRect.x < 0) {
			sourceRect.width += sourceRect.x;
			sourceRect.x = 0;
		}
		if(sourceRect.y < 0) {
			sourceRect.height += sourceRect.y;
			sourceRect.y = 0;
		}
		if(destPoint.x + sourceRect.width > this.width) {
			sourceRect.width = this.width - destPoint.x;
		}
		if(destPoint.y + sourceRect.height > this.height) {
			sourceRect.height = this.height - destPoint.y;
		}
		if(destPoint.x < 0) {
			sourceRect.width += destPoint.x;
			sourceRect.x -= destPoint.x;
			destPoint.x = 0;
		}
		if(destPoint.y < 0) {
			sourceRect.height += destPoint.y;
			sourceRect.y -= destPoint.y;
			destPoint.y = 0;
		}
		if(sourceImage == this && destPoint.x < sourceRect.get_right() && destPoint.y < sourceRect.get_bottom()) {
			sourceImage = this.clone();
		}
		if(alphaImage == sourceImage && (alphaPoint == null || alphaPoint.x == 0 && alphaPoint.y == 0)) {
			alphaImage = null;
			alphaPoint = null;
		}
		switch(this.type._hx_index) {
		case 0:
			if(alphaImage != null) {
				lime__$internal_graphics_ImageCanvasUtil.convertToData(this);
				lime__$internal_graphics_ImageCanvasUtil.convertToData(sourceImage);
				if(alphaImage != null) {
					lime__$internal_graphics_ImageCanvasUtil.convertToData(alphaImage);
				}
				lime__$internal_graphics_ImageDataUtil.copyPixels(this,sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha);
			} else {
				lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(this);
				lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(sourceImage);
				lime__$internal_graphics_ImageCanvasUtil.copyPixels(this,sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha);
			}
			break;
		case 1:
			lime__$internal_graphics_ImageCanvasUtil.convertToData(this);
			lime__$internal_graphics_ImageCanvasUtil.convertToData(sourceImage);
			if(alphaImage != null) {
				lime__$internal_graphics_ImageCanvasUtil.convertToData(alphaImage);
			}
			lime__$internal_graphics_ImageDataUtil.copyPixels(this,sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha);
			break;
		case 2:
			sourceRect.offset(sourceImage.offsetX,sourceImage.offsetY);
			destPoint.offset(this.offsetX,this.offsetY);
			if(alphaImage != null && alphaPoint != null) {
				alphaPoint.offset(alphaImage.offsetX,alphaImage.offsetY);
			}
			this.buffer.__srcBitmapData.copyPixels(sourceImage.buffer.__srcBitmapData,sourceRect.__toFlashRectangle(),destPoint.__toFlashPoint(),alphaImage != null ? alphaImage.buffer.get_src() : null,alphaPoint != null ? alphaPoint.__toFlashPoint() : null,mergeAlpha);
			break;
		default:
		}
	}
	,encode: function(format,quality) {
		if(quality == null) {
			quality = 90;
		}
		if(format == null) {
			return lime__$internal_format_PNG.encode(this);
		} else {
			switch(format._hx_index) {
			case 0:
				return lime__$internal_format_BMP.encode(this);
			case 1:
				return lime__$internal_format_JPEG.encode(this,quality);
			case 2:
				return lime__$internal_format_PNG.encode(this);
			}
		}
	}
	,fillRect: function(rect,color,format) {
		rect = this.__clipRect(rect);
		if(this.buffer == null || rect == null) {
			return;
		}
		switch(this.type._hx_index) {
		case 0:
			lime__$internal_graphics_ImageCanvasUtil.fillRect(this,rect,color,format);
			break;
		case 1:
			lime__$internal_graphics_ImageCanvasUtil.convertToData(this);
			if(this.buffer.data.length == 0) {
				return;
			}
			lime__$internal_graphics_ImageDataUtil.fillRect(this,rect,color,format);
			break;
		case 2:
			rect.offset(this.offsetX,this.offsetY);
			var argb;
			if(format == null) {
				var rgba = color;
				var this1 = 0;
				var argb1 = this1;
				argb1 = (rgba & 255 & 255) << 24 | (rgba >>> 24 & 255 & 255) << 16 | (rgba >>> 16 & 255 & 255) << 8 | rgba >>> 8 & 255 & 255;
				argb = argb1;
			} else {
				switch(format) {
				case 1:
					argb = color;
					break;
				case 2:
					var bgra = color;
					var this1 = 0;
					var argb1 = this1;
					argb1 = (bgra & 255 & 255) << 24 | (bgra >>> 8 & 255 & 255) << 16 | (bgra >>> 16 & 255 & 255) << 8 | bgra >>> 24 & 255 & 255;
					argb = argb1;
					break;
				default:
					var rgba = color;
					var this1 = 0;
					var argb1 = this1;
					argb1 = (rgba & 255 & 255) << 24 | (rgba >>> 24 & 255 & 255) << 16 | (rgba >>> 16 & 255 & 255) << 8 | rgba >>> 8 & 255 & 255;
					argb = argb1;
				}
			}
			this.buffer.__srcBitmapData.fillRect(rect.__toFlashRectangle(),argb);
			break;
		default:
		}
	}
	,floodFill: function(x,y,color,format) {
		if(this.buffer == null) {
			return;
		}
		switch(this.type._hx_index) {
		case 0:
			lime__$internal_graphics_ImageCanvasUtil.floodFill(this,x,y,color,format);
			break;
		case 1:
			lime__$internal_graphics_ImageCanvasUtil.convertToData(this);
			lime__$internal_graphics_ImageDataUtil.floodFill(this,x,y,color,format);
			break;
		case 2:
			var argb;
			if(format == null) {
				var rgba = color;
				var this1 = 0;
				var argb1 = this1;
				argb1 = (rgba & 255 & 255) << 24 | (rgba >>> 24 & 255 & 255) << 16 | (rgba >>> 16 & 255 & 255) << 8 | rgba >>> 8 & 255 & 255;
				argb = argb1;
			} else {
				switch(format) {
				case 1:
					argb = color;
					break;
				case 2:
					var bgra = color;
					var this1 = 0;
					var argb1 = this1;
					argb1 = (bgra & 255 & 255) << 24 | (bgra >>> 8 & 255 & 255) << 16 | (bgra >>> 16 & 255 & 255) << 8 | bgra >>> 24 & 255 & 255;
					argb = argb1;
					break;
				default:
					var rgba = color;
					var this1 = 0;
					var argb1 = this1;
					argb1 = (rgba & 255 & 255) << 24 | (rgba >>> 24 & 255 & 255) << 16 | (rgba >>> 16 & 255 & 255) << 8 | rgba >>> 8 & 255 & 255;
					argb = argb1;
				}
			}
			this.buffer.__srcBitmapData.floodFill(x + this.offsetX,y + this.offsetY,argb);
			break;
		default:
		}
	}
	,getColorBoundsRect: function(mask,color,findColor,format) {
		if(findColor == null) {
			findColor = true;
		}
		if(this.buffer == null) {
			return null;
		}
		switch(this.type._hx_index) {
		case 0:
			lime__$internal_graphics_ImageCanvasUtil.convertToData(this);
			return lime__$internal_graphics_ImageDataUtil.getColorBoundsRect(this,mask,color,findColor,format);
		case 1:
			return lime__$internal_graphics_ImageDataUtil.getColorBoundsRect(this,mask,color,findColor,format);
		case 2:
			var rect = this.buffer.__srcBitmapData.getColorBoundsRect(mask,color,findColor);
			return new lime_math_Rectangle(rect.x,rect.y,rect.width,rect.height);
		default:
			return null;
		}
	}
	,getPixel: function(x,y,format) {
		if(this.buffer == null || x < 0 || y < 0 || x >= this.width || y >= this.height) {
			return 0;
		}
		switch(this.type._hx_index) {
		case 0:
			return lime__$internal_graphics_ImageCanvasUtil.getPixel(this,x,y,format);
		case 1:
			lime__$internal_graphics_ImageCanvasUtil.convertToData(this);
			return lime__$internal_graphics_ImageDataUtil.getPixel(this,x,y,format);
		case 2:
			var color = this.buffer.__srcBitmapData.getPixel(x + this.offsetX,y + this.offsetY);
			if(format == null) {
				var this1 = 0;
				var rgba = this1;
				rgba = (color >>> 16 & 255 & 255) << 24 | (color >>> 8 & 255 & 255) << 16 | (color & 255 & 255) << 8 | color >>> 24 & 255 & 255;
				var rgba1 = rgba;
				return rgba1;
			} else {
				switch(format) {
				case 1:
					return color;
				case 2:
					var this1 = 0;
					var bgra = this1;
					bgra = (color & 255 & 255) << 24 | (color >>> 8 & 255 & 255) << 16 | (color >>> 16 & 255 & 255) << 8 | color >>> 24 & 255 & 255;
					var bgra1 = bgra;
					return bgra1;
				default:
					var this1 = 0;
					var rgba = this1;
					rgba = (color >>> 16 & 255 & 255) << 24 | (color >>> 8 & 255 & 255) << 16 | (color & 255 & 255) << 8 | color >>> 24 & 255 & 255;
					var rgba1 = rgba;
					return rgba1;
				}
			}
			break;
		default:
			return 0;
		}
	}
	,getPixel32: function(x,y,format) {
		if(this.buffer == null || x < 0 || y < 0 || x >= this.width || y >= this.height) {
			return 0;
		}
		switch(this.type._hx_index) {
		case 0:
			return lime__$internal_graphics_ImageCanvasUtil.getPixel32(this,x,y,format);
		case 1:
			lime__$internal_graphics_ImageCanvasUtil.convertToData(this);
			return lime__$internal_graphics_ImageDataUtil.getPixel32(this,x,y,format);
		case 2:
			var color = this.buffer.__srcBitmapData.getPixel32(x + this.offsetX,y + this.offsetY);
			if(format == null) {
				var this1 = 0;
				var rgba = this1;
				rgba = (color >>> 16 & 255 & 255) << 24 | (color >>> 8 & 255 & 255) << 16 | (color & 255 & 255) << 8 | color >>> 24 & 255 & 255;
				var rgba1 = rgba;
				return rgba1;
			} else {
				switch(format) {
				case 1:
					return color;
				case 2:
					var this1 = 0;
					var bgra = this1;
					bgra = (color & 255 & 255) << 24 | (color >>> 8 & 255 & 255) << 16 | (color >>> 16 & 255 & 255) << 8 | color >>> 24 & 255 & 255;
					var bgra1 = bgra;
					return bgra1;
				default:
					var this1 = 0;
					var rgba = this1;
					rgba = (color >>> 16 & 255 & 255) << 24 | (color >>> 8 & 255 & 255) << 16 | (color & 255 & 255) << 8 | color >>> 24 & 255 & 255;
					var rgba1 = rgba;
					return rgba1;
				}
			}
			break;
		default:
			return 0;
		}
	}
	,getPixels: function(rect,format) {
		if(this.buffer == null) {
			return null;
		}
		switch(this.type._hx_index) {
		case 0:
			return lime__$internal_graphics_ImageCanvasUtil.getPixels(this,rect,format);
		case 1:
			lime__$internal_graphics_ImageCanvasUtil.convertToData(this);
			return lime__$internal_graphics_ImageDataUtil.getPixels(this,rect,format);
		case 2:
			return null;
		default:
			return null;
		}
	}
	,merge: function(sourceImage,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier) {
		if(this.buffer == null || sourceImage == null) {
			return;
		}
		switch(this.type._hx_index) {
		case 0:
			lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(this);
			lime__$internal_graphics_ImageCanvasUtil.merge(this,sourceImage,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier);
			break;
		case 1:
			lime__$internal_graphics_ImageCanvasUtil.convertToData(this);
			lime__$internal_graphics_ImageCanvasUtil.convertToData(sourceImage);
			lime__$internal_graphics_ImageDataUtil.merge(this,sourceImage,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier);
			break;
		case 2:
			sourceRect.offset(this.offsetX,this.offsetY);
			this.buffer.__srcBitmapData.merge(sourceImage.buffer.__srcBitmapData,sourceRect.__toFlashRectangle(),destPoint.__toFlashPoint(),redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier);
			break;
		default:
			return;
		}
	}
	,resize: function(newWidth,newHeight) {
		switch(this.type._hx_index) {
		case 0:
			lime__$internal_graphics_ImageCanvasUtil.resize(this,newWidth,newHeight);
			break;
		case 1:
			lime__$internal_graphics_ImageDataUtil.resize(this,newWidth,newHeight);
			break;
		case 2:
			break;
		default:
		}
		this.buffer.width = newWidth;
		this.buffer.height = newHeight;
		this.offsetX = 0;
		this.offsetY = 0;
		this.width = newWidth;
		this.height = newHeight;
	}
	,scroll: function(x,y) {
		if(this.buffer == null) {
			return;
		}
		switch(this.type._hx_index) {
		case 0:
			lime__$internal_graphics_ImageCanvasUtil.scroll(this,x,y);
			break;
		case 1:
			this.copyPixels(this,this.get_rect(),new lime_math_Vector2(x,y));
			break;
		case 2:
			this.buffer.__srcBitmapData.scroll(x + this.offsetX,y + this.offsetX);
			break;
		default:
		}
	}
	,setPixel: function(x,y,color,format) {
		if(this.buffer == null || x < 0 || y < 0 || x >= this.width || y >= this.height) {
			return;
		}
		switch(this.type._hx_index) {
		case 0:
			lime__$internal_graphics_ImageCanvasUtil.setPixel(this,x,y,color,format);
			break;
		case 1:
			lime__$internal_graphics_ImageCanvasUtil.convertToData(this);
			lime__$internal_graphics_ImageDataUtil.setPixel(this,x,y,color,format);
			break;
		case 2:
			var argb;
			if(format == null) {
				var rgba = color;
				var this1 = 0;
				var argb1 = this1;
				argb1 = (rgba & 255 & 255) << 24 | (rgba >>> 24 & 255 & 255) << 16 | (rgba >>> 16 & 255 & 255) << 8 | rgba >>> 8 & 255 & 255;
				argb = argb1;
			} else {
				switch(format) {
				case 1:
					argb = color;
					break;
				case 2:
					var bgra = color;
					var this1 = 0;
					var argb1 = this1;
					argb1 = (bgra & 255 & 255) << 24 | (bgra >>> 8 & 255 & 255) << 16 | (bgra >>> 16 & 255 & 255) << 8 | bgra >>> 24 & 255 & 255;
					argb = argb1;
					break;
				default:
					var rgba = color;
					var this1 = 0;
					var argb1 = this1;
					argb1 = (rgba & 255 & 255) << 24 | (rgba >>> 24 & 255 & 255) << 16 | (rgba >>> 16 & 255 & 255) << 8 | rgba >>> 8 & 255 & 255;
					argb = argb1;
				}
			}
			this.buffer.__srcBitmapData.setPixel(x + this.offsetX,y + this.offsetX,argb);
			break;
		default:
		}
	}
	,setPixel32: function(x,y,color,format) {
		if(this.buffer == null || x < 0 || y < 0 || x >= this.width || y >= this.height) {
			return;
		}
		switch(this.type._hx_index) {
		case 0:
			lime__$internal_graphics_ImageCanvasUtil.setPixel32(this,x,y,color,format);
			break;
		case 1:
			lime__$internal_graphics_ImageCanvasUtil.convertToData(this);
			lime__$internal_graphics_ImageDataUtil.setPixel32(this,x,y,color,format);
			break;
		case 2:
			var argb;
			if(format == null) {
				var rgba = color;
				var this1 = 0;
				var argb1 = this1;
				argb1 = (rgba & 255 & 255) << 24 | (rgba >>> 24 & 255 & 255) << 16 | (rgba >>> 16 & 255 & 255) << 8 | rgba >>> 8 & 255 & 255;
				argb = argb1;
			} else {
				switch(format) {
				case 1:
					argb = color;
					break;
				case 2:
					var bgra = color;
					var this1 = 0;
					var argb1 = this1;
					argb1 = (bgra & 255 & 255) << 24 | (bgra >>> 8 & 255 & 255) << 16 | (bgra >>> 16 & 255 & 255) << 8 | bgra >>> 24 & 255 & 255;
					argb = argb1;
					break;
				default:
					var rgba = color;
					var this1 = 0;
					var argb1 = this1;
					argb1 = (rgba & 255 & 255) << 24 | (rgba >>> 24 & 255 & 255) << 16 | (rgba >>> 16 & 255 & 255) << 8 | rgba >>> 8 & 255 & 255;
					argb = argb1;
				}
			}
			this.buffer.__srcBitmapData.setPixel32(x + this.offsetX,y + this.offsetY,argb);
			break;
		default:
		}
	}
	,setPixels: function(rect,bytePointer,format,endian) {
		rect = this.__clipRect(rect);
		if(this.buffer == null || rect == null) {
			return;
		}
		if(endian == null) {
			endian = lime_system_Endian.BIG_ENDIAN;
		}
		switch(this.type._hx_index) {
		case 0:
			lime__$internal_graphics_ImageCanvasUtil.setPixels(this,rect,bytePointer,format,endian);
			break;
		case 1:
			lime__$internal_graphics_ImageCanvasUtil.convertToData(this);
			lime__$internal_graphics_ImageDataUtil.setPixels(this,rect,bytePointer,format,endian);
			break;
		case 2:
			break;
		default:
		}
	}
	,threshold: function(sourceImage,sourceRect,destPoint,operation,threshold,color,mask,copySource,format) {
		if(copySource == null) {
			copySource = false;
		}
		if(mask == null) {
			mask = -1;
		}
		if(color == null) {
			color = 0;
		}
		if(this.buffer == null || sourceImage == null || sourceRect == null) {
			return 0;
		}
		switch(this.type._hx_index) {
		case 0:case 1:
			lime__$internal_graphics_ImageCanvasUtil.convertToData(this);
			lime__$internal_graphics_ImageCanvasUtil.convertToData(sourceImage);
			return lime__$internal_graphics_ImageDataUtil.threshold(this,sourceImage,sourceRect,destPoint,operation,threshold,color,mask,copySource,format);
		case 2:
			var _color;
			if(format == null) {
				var rgba = color;
				var this1 = 0;
				var argb = this1;
				argb = (rgba & 255 & 255) << 24 | (rgba >>> 24 & 255 & 255) << 16 | (rgba >>> 16 & 255 & 255) << 8 | rgba >>> 8 & 255 & 255;
				_color = argb;
			} else {
				switch(format) {
				case 1:
					_color = color;
					break;
				case 2:
					var bgra = color;
					var this1 = 0;
					var argb = this1;
					argb = (bgra & 255 & 255) << 24 | (bgra >>> 8 & 255 & 255) << 16 | (bgra >>> 16 & 255 & 255) << 8 | bgra >>> 24 & 255 & 255;
					_color = argb;
					break;
				default:
					var rgba = color;
					var this1 = 0;
					var argb = this1;
					argb = (rgba & 255 & 255) << 24 | (rgba >>> 24 & 255 & 255) << 16 | (rgba >>> 16 & 255 & 255) << 8 | rgba >>> 8 & 255 & 255;
					_color = argb;
				}
			}
			var _mask;
			if(format == null) {
				var rgba = mask;
				var this1 = 0;
				var argb = this1;
				argb = (rgba & 255 & 255) << 24 | (rgba >>> 24 & 255 & 255) << 16 | (rgba >>> 16 & 255 & 255) << 8 | rgba >>> 8 & 255 & 255;
				_mask = argb;
			} else {
				switch(format) {
				case 1:
					_mask = mask;
					break;
				case 2:
					var bgra = mask;
					var this1 = 0;
					var argb = this1;
					argb = (bgra & 255 & 255) << 24 | (bgra >>> 8 & 255 & 255) << 16 | (bgra >>> 16 & 255 & 255) << 8 | bgra >>> 24 & 255 & 255;
					_mask = argb;
					break;
				default:
					var rgba = mask;
					var this1 = 0;
					var argb = this1;
					argb = (rgba & 255 & 255) << 24 | (rgba >>> 24 & 255 & 255) << 16 | (rgba >>> 16 & 255 & 255) << 8 | rgba >>> 8 & 255 & 255;
					_mask = argb;
				}
			}
			sourceRect.offset(sourceImage.offsetX,sourceImage.offsetY);
			destPoint.offset(this.offsetX,this.offsetY);
			return this.buffer.__srcBitmapData.threshold(sourceImage.buffer.get_src(),sourceRect.__toFlashRectangle(),destPoint.__toFlashPoint(),operation,threshold,_color,_mask,copySource);
		default:
		}
		return 0;
	}
	,__clipRect: function(r) {
		if(r == null) {
			return null;
		}
		if(r.x < 0) {
			r.width -= -r.x;
			r.x = 0;
			if(r.x + r.width <= 0) {
				return null;
			}
		}
		if(r.y < 0) {
			r.height -= -r.y;
			r.y = 0;
			if(r.y + r.height <= 0) {
				return null;
			}
		}
		if(r.x + r.width >= this.width) {
			r.width -= r.x + r.width - this.width;
			if(r.width <= 0) {
				return null;
			}
		}
		if(r.y + r.height >= this.height) {
			r.height -= r.y + r.height - this.height;
			if(r.height <= 0) {
				return null;
			}
		}
		return r;
	}
	,__fromBase64: function(base64,type,onload) {
		var _gthis = this;
		var image = new Image();
		var image_onLoaded = function(event) {
			_gthis.buffer = new lime_graphics_ImageBuffer(null,image.width,image.height);
			_gthis.buffer.__srcImage = image;
			_gthis.offsetX = 0;
			_gthis.offsetY = 0;
			_gthis.width = _gthis.buffer.width;
			_gthis.height = _gthis.buffer.height;
			if(onload != null) {
				onload(_gthis);
			}
		};
		image.addEventListener("load",image_onLoaded,false);
		image.src = "data:" + type + ";base64," + base64;
	}
	,__fromBytes: function(bytes,onload) {
		var type = "";
		if(lime_graphics_Image.__isPNG(bytes)) {
			type = "image/png";
		} else if(lime_graphics_Image.__isJPG(bytes)) {
			type = "image/jpeg";
		} else if(lime_graphics_Image.__isGIF(bytes)) {
			type = "image/gif";
		} else {
			return false;
		}
		this.__fromBase64(lime__$internal_format_Base64.encode(bytes),type,onload);
		return true;
	}
	,__fromFile: function(path,onload,onerror) {
		var _gthis = this;
		var image = new Image();
		if(!lime__$internal_backend_html5_HTML5HTTPRequest.__isSameOrigin(path)) {
			image.crossOrigin = "Anonymous";
		}
		image.onload = function(_) {
			_gthis.buffer = new lime_graphics_ImageBuffer(null,image.width,image.height);
			_gthis.buffer.__srcImage = image;
			_gthis.width = image.width;
			_gthis.height = image.height;
			if(onload != null) {
				onload(_gthis);
			}
		};
		image.onerror = function(_) {
			if(onerror != null) {
				onerror();
			}
		};
		image.src = path;
		var image1 = image.complete;
		return true;
	}
	,__fromImageBuffer: function(buffer) {
		this.buffer = buffer;
		if(buffer != null) {
			if(this.width == -1) {
				this.width = buffer.width;
			}
			if(this.height == -1) {
				this.height = buffer.height;
			}
		}
	}
	,get_data: function() {
		if(this.buffer.data == null && this.buffer.width > 0 && this.buffer.height > 0) {
			lime__$internal_graphics_ImageCanvasUtil.convertToData(this);
		}
		return this.buffer.data;
	}
	,set_data: function(value) {
		return this.buffer.data = value;
	}
	,get_format: function() {
		return this.buffer.format;
	}
	,set_format: function(value) {
		if(this.buffer.format != value) {
			if(this.type._hx_index == 1) {
				lime__$internal_graphics_ImageDataUtil.setFormat(this,value);
			}
		}
		return this.buffer.format = value;
	}
	,get_powerOfTwo: function() {
		if(this.buffer.width != 0 && (this.buffer.width & ~this.buffer.width + 1) == this.buffer.width) {
			if(this.buffer.height != 0) {
				return (this.buffer.height & ~this.buffer.height + 1) == this.buffer.height;
			} else {
				return false;
			}
		} else {
			return false;
		}
	}
	,set_powerOfTwo: function(value) {
		if(value != this.get_powerOfTwo()) {
			var newWidth = 1;
			var newHeight = 1;
			while(newWidth < this.buffer.width) newWidth <<= 1;
			while(newHeight < this.buffer.height) newHeight <<= 1;
			if(newWidth == this.buffer.width && newHeight == this.buffer.height) {
				return value;
			}
			switch(this.type._hx_index) {
			case 0:
				lime__$internal_graphics_ImageCanvasUtil.convertToData(this);
				lime__$internal_graphics_ImageDataUtil.resizeBuffer(this,newWidth,newHeight);
				break;
			case 1:
				lime__$internal_graphics_ImageDataUtil.resizeBuffer(this,newWidth,newHeight);
				break;
			case 2:
				break;
			default:
			}
		}
		return value;
	}
	,get_premultiplied: function() {
		return this.buffer.premultiplied;
	}
	,set_premultiplied: function(value) {
		if(value && !this.buffer.premultiplied) {
			switch(this.type._hx_index) {
			case 0:case 1:
				lime__$internal_graphics_ImageCanvasUtil.convertToData(this);
				lime__$internal_graphics_ImageDataUtil.multiplyAlpha(this);
				break;
			default:
			}
		} else if(!value && this.buffer.premultiplied) {
			if(this.type._hx_index == 1) {
				lime__$internal_graphics_ImageCanvasUtil.convertToData(this);
				lime__$internal_graphics_ImageDataUtil.unmultiplyAlpha(this);
			}
		}
		return value;
	}
	,get_rect: function() {
		return new lime_math_Rectangle(0,0,this.width,this.height);
	}
	,get_src: function() {
		if(this.buffer.__srcCanvas == null && (this.buffer.data != null || this.type == lime_graphics_ImageType.DATA)) {
			lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(this);
		}
		return this.buffer.get_src();
	}
	,set_src: function(value) {
		return this.buffer.set_src(value);
	}
	,get_transparent: function() {
		if(this.buffer == null) {
			return false;
		}
		return this.buffer.transparent;
	}
	,set_transparent: function(value) {
		if(this.buffer == null) {
			return false;
		}
		return this.buffer.transparent = value;
	}
	,__class__: lime_graphics_Image
	,__properties__: {set_transparent:"set_transparent",get_transparent:"get_transparent",set_src:"set_src",get_src:"get_src",get_rect:"get_rect",set_premultiplied:"set_premultiplied",get_premultiplied:"get_premultiplied",set_powerOfTwo:"set_powerOfTwo",get_powerOfTwo:"get_powerOfTwo",set_format:"set_format",get_format:"get_format",set_data:"set_data",get_data:"get_data"}
};
var lime_graphics_ImageBuffer = function(data,width,height,bitsPerPixel,format) {
	if(bitsPerPixel == null) {
		bitsPerPixel = 32;
	}
	if(height == null) {
		height = 0;
	}
	if(width == null) {
		width = 0;
	}
	this.data = data;
	this.width = width;
	this.height = height;
	this.bitsPerPixel = bitsPerPixel;
	this.format = format == null ? 0 : format;
	this.premultiplied = false;
	this.transparent = true;
};
$hxClasses["lime.graphics.ImageBuffer"] = lime_graphics_ImageBuffer;
lime_graphics_ImageBuffer.__name__ = "lime.graphics.ImageBuffer";
lime_graphics_ImageBuffer.prototype = {
	bitsPerPixel: null
	,data: null
	,format: null
	,height: null
	,premultiplied: null
	,transparent: null
	,width: null
	,__srcBitmapData: null
	,__srcCanvas: null
	,__srcContext: null
	,__srcCustom: null
	,__srcImage: null
	,__srcImageData: null
	,clone: function() {
		var buffer = new lime_graphics_ImageBuffer(this.data,this.width,this.height,this.bitsPerPixel);
		if(this.data != null) {
			var elements = this.data.byteLength;
			var array = null;
			var vector = null;
			var view = null;
			var buffer1 = null;
			var len = null;
			var this1;
			if(elements != null) {
				this1 = new Uint8Array(elements);
			} else if(array != null) {
				this1 = new Uint8Array(array);
			} else if(vector != null) {
				this1 = new Uint8Array(vector.__array);
			} else if(view != null) {
				this1 = new Uint8Array(view);
			} else if(buffer1 != null) {
				if(len == null) {
					this1 = new Uint8Array(buffer1,0);
				} else {
					this1 = new Uint8Array(buffer1,0,len);
				}
			} else {
				this1 = null;
			}
			buffer.data = this1;
			var elements = null;
			var array = null;
			var vector = null;
			var view = this.data;
			var buffer1 = null;
			var len = null;
			var this1;
			if(elements != null) {
				this1 = new Uint8Array(elements);
			} else if(array != null) {
				this1 = new Uint8Array(array);
			} else if(vector != null) {
				this1 = new Uint8Array(vector.__array);
			} else if(view != null) {
				this1 = new Uint8Array(view);
			} else if(buffer1 != null) {
				if(len == null) {
					this1 = new Uint8Array(buffer1,0);
				} else {
					this1 = new Uint8Array(buffer1,0,len);
				}
			} else {
				this1 = null;
			}
			var copy = this1;
			buffer.data.set(copy);
		} else if(this.__srcImageData != null) {
			buffer.__srcCanvas = window.document.createElement("canvas");
			buffer.__srcContext = buffer.__srcCanvas.getContext("2d");
			buffer.__srcCanvas.width = this.__srcImageData.width;
			buffer.__srcCanvas.height = this.__srcImageData.height;
			buffer.__srcImageData = buffer.__srcContext.createImageData(this.__srcImageData.width,this.__srcImageData.height);
			var copy = new Uint8ClampedArray(this.__srcImageData.data);
			buffer.__srcImageData.data.set(copy);
		} else if(this.__srcCanvas != null) {
			buffer.__srcCanvas = window.document.createElement("canvas");
			buffer.__srcContext = buffer.__srcCanvas.getContext("2d");
			buffer.__srcCanvas.width = this.__srcCanvas.width;
			buffer.__srcCanvas.height = this.__srcCanvas.height;
			buffer.__srcContext.drawImage(this.__srcCanvas,0,0);
		} else {
			buffer.__srcImage = this.__srcImage;
		}
		buffer.bitsPerPixel = this.bitsPerPixel;
		buffer.format = this.format;
		buffer.premultiplied = this.premultiplied;
		buffer.transparent = this.transparent;
		return buffer;
	}
	,get_src: function() {
		if(this.__srcImage != null) {
			return this.__srcImage;
		}
		return this.__srcCanvas;
	}
	,set_src: function(value) {
		if(((value) instanceof Image)) {
			this.__srcImage = value;
		} else if(((value) instanceof HTMLCanvasElement)) {
			this.__srcCanvas = value;
			this.__srcContext = this.__srcCanvas.getContext("2d");
		}
		return value;
	}
	,get_stride: function() {
		return this.width * (this.bitsPerPixel / 8 | 0);
	}
	,__class__: lime_graphics_ImageBuffer
	,__properties__: {get_stride:"get_stride",set_src:"set_src",get_src:"get_src"}
};
var lime_graphics_ImageChannel = $hxEnums["lime.graphics.ImageChannel"] = { __ename__ : "lime.graphics.ImageChannel", __constructs__ : ["RED","GREEN","BLUE","ALPHA"]
	,RED: {_hx_index:0,__enum__:"lime.graphics.ImageChannel",toString:$estr}
	,GREEN: {_hx_index:1,__enum__:"lime.graphics.ImageChannel",toString:$estr}
	,BLUE: {_hx_index:2,__enum__:"lime.graphics.ImageChannel",toString:$estr}
	,ALPHA: {_hx_index:3,__enum__:"lime.graphics.ImageChannel",toString:$estr}
};
var lime_graphics_ImageFileFormat = $hxEnums["lime.graphics.ImageFileFormat"] = { __ename__ : "lime.graphics.ImageFileFormat", __constructs__ : ["BMP","JPEG","PNG"]
	,BMP: {_hx_index:0,__enum__:"lime.graphics.ImageFileFormat",toString:$estr}
	,JPEG: {_hx_index:1,__enum__:"lime.graphics.ImageFileFormat",toString:$estr}
	,PNG: {_hx_index:2,__enum__:"lime.graphics.ImageFileFormat",toString:$estr}
};
var lime_graphics_ImageType = $hxEnums["lime.graphics.ImageType"] = { __ename__ : "lime.graphics.ImageType", __constructs__ : ["CANVAS","DATA","FLASH","CUSTOM"]
	,CANVAS: {_hx_index:0,__enum__:"lime.graphics.ImageType",toString:$estr}
	,DATA: {_hx_index:1,__enum__:"lime.graphics.ImageType",toString:$estr}
	,FLASH: {_hx_index:2,__enum__:"lime.graphics.ImageType",toString:$estr}
	,CUSTOM: {_hx_index:3,__enum__:"lime.graphics.ImageType",toString:$estr}
};
var lime_graphics_OpenGLES2RenderContext = {};
lime_graphics_OpenGLES2RenderContext.fromGL = function(gl) {
	return null;
};
lime_graphics_OpenGLES2RenderContext.fromOpenGLES3RenderContext = function(gl) {
	return null;
};
lime_graphics_OpenGLES2RenderContext.fromRenderContext = function(context) {
	return null;
};
lime_graphics_OpenGLES2RenderContext.fromWebGLRenderContext = function(gl) {
	return null;
};
var lime_graphics_OpenGLES3RenderContext = {};
lime_graphics_OpenGLES3RenderContext.fromRenderContext = function(context) {
	return null;
};
lime_graphics_OpenGLES3RenderContext.fromGL = function(gl) {
	return null;
};
lime_graphics_OpenGLES3RenderContext.fromOpenGLES2RenderContext = function(context) {
	return null;
};
lime_graphics_OpenGLES3RenderContext.fromWebGLRenderContext = function(context) {
	return null;
};
lime_graphics_OpenGLES3RenderContext.fromWebGL2RenderContext = function(context) {
	return null;
};
var lime_graphics_OpenGLRenderContext = {};
lime_graphics_OpenGLRenderContext.fromRenderContext = function(context) {
	return null;
};
var lime_graphics_RenderContext = function() {
};
$hxClasses["lime.graphics.RenderContext"] = lime_graphics_RenderContext;
lime_graphics_RenderContext.__name__ = "lime.graphics.RenderContext";
lime_graphics_RenderContext.prototype = {
	attributes: null
	,cairo: null
	,canvas2D: null
	,dom: null
	,flash: null
	,gl: null
	,gles2: null
	,gles3: null
	,type: null
	,version: null
	,webgl: null
	,webgl2: null
	,window: null
	,__class__: lime_graphics_RenderContext
};
var lime_graphics_WebGL2RenderContext = {};
lime_graphics_WebGL2RenderContext.bufferData = function(this1,target,srcData,usage,srcOffset,length) {
	if(srcOffset != null) {
		this1.bufferData(target,srcData,usage,srcOffset,length);
	} else {
		this1.bufferData(target,srcData,usage);
	}
};
lime_graphics_WebGL2RenderContext.bufferSubData = function(this1,target,dstByteOffset,srcData,srcOffset,length) {
	if(srcOffset != null) {
		this1.bufferSubData(target,dstByteOffset,srcData,srcOffset,length);
	} else {
		this1.bufferSubData(target,dstByteOffset,srcData);
	}
};
lime_graphics_WebGL2RenderContext.compressedTexImage2D = function(this1,target,level,internalformat,width,height,border,srcData,srcOffset,srcLengthOverride) {
	if(srcOffset != null) {
		this1.compressedTexImage2D(target,level,internalformat,width,height,border,srcData,srcOffset,srcLengthOverride);
	} else {
		this1.compressedTexImage2D(target,level,internalformat,width,height,border,srcData);
	}
};
lime_graphics_WebGL2RenderContext.compressedTexSubImage2D = function(this1,target,level,xoffset,yoffset,width,height,format,srcData,srcOffset,srcLengthOverride) {
	if(srcOffset != null) {
		this1.compressedTexSubImage2D(target,level,xoffset,yoffset,width,height,format,srcData,srcOffset,srcLengthOverride);
	} else {
		this1.compressedTexSubImage2D(target,level,xoffset,yoffset,width,height,format,srcData);
	}
};
lime_graphics_WebGL2RenderContext.getBufferSubData = function(this1,target,srcByteOffset,dstData,srcOffset,length) {
	if(srcOffset != null) {
		this1.getBufferSubData(target,srcByteOffset,dstData,srcOffset,length);
	} else {
		this1.getBufferSubData(target,srcByteOffset,dstData);
	}
};
lime_graphics_WebGL2RenderContext.readPixels = function(this1,x,y,width,height,format,type,pixels,dstOffset) {
	if(dstOffset != null) {
		this1.readPixels(x,y,width,height,format,type,pixels,dstOffset);
	} else {
		this1.readPixels(x,y,width,height,format,type,pixels);
	}
};
lime_graphics_WebGL2RenderContext.texImage2D = function(this1,target,level,internalformat,width,height,border,format,type,srcData,srcOffset) {
	if(srcOffset != null) {
		this1.texImage2D(target,level,internalformat,width,height,border,format,type,srcData,srcOffset);
	} else if(format != null) {
		this1.texImage2D(target,level,internalformat,width,height,border,format,type,srcData);
	} else {
		this1.texImage2D(target,level,internalformat,width,height,border);
	}
};
lime_graphics_WebGL2RenderContext.texSubImage2D = function(this1,target,level,xoffset,yoffset,width,height,format,type,srcData,srcOffset) {
	if(srcOffset != null) {
		this1.texSubImage2D(target,level,xoffset,yoffset,width,height,format,type,srcData,srcOffset);
	} else if(type != null) {
		this1.texSubImage2D(target,level,xoffset,yoffset,width,height,format,type,srcData);
	} else {
		this1.texSubImage2D(target,level,xoffset,yoffset,width,height,format);
	}
};
lime_graphics_WebGL2RenderContext.uniform1fv = function(this1,location,data,srcOffset,srcLength) {
	if(srcOffset != null) {
		this1.uniform1fv(location,data,srcOffset,srcLength);
	} else {
		this1.uniform1fv(location,data);
	}
};
lime_graphics_WebGL2RenderContext.uniform1iv = function(this1,location,data,srcOffset,srcLength) {
	if(srcOffset != null) {
		this1.uniform1iv(location,data,srcOffset,srcLength);
	} else {
		this1.uniform1iv(location,data);
	}
};
lime_graphics_WebGL2RenderContext.uniform2fv = function(this1,location,data,srcOffset,srcLength) {
	if(srcOffset != null) {
		this1.uniform2fv(location,data,srcOffset,srcLength);
	} else {
		this1.uniform2fv(location,data);
	}
};
lime_graphics_WebGL2RenderContext.uniform2iv = function(this1,location,data,srcOffset,srcLength) {
	if(srcOffset != null) {
		this1.uniform2iv(location,data,srcOffset,srcLength);
	} else {
		this1.uniform2iv(location,data);
	}
};
lime_graphics_WebGL2RenderContext.uniform3fv = function(this1,location,data,srcOffset,srcLength) {
	if(srcOffset != null) {
		this1.uniform3fv(location,data,srcOffset,srcLength);
	} else {
		this1.uniform3fv(location,data);
	}
};
lime_graphics_WebGL2RenderContext.uniform3iv = function(this1,location,data,srcOffset,srcLength) {
	if(srcOffset != null) {
		this1.uniform3iv(location,data,srcOffset,srcLength);
	} else {
		this1.uniform3iv(location,data);
	}
};
lime_graphics_WebGL2RenderContext.uniform4fv = function(this1,location,data,srcOffset,srcLength) {
	if(srcOffset != null) {
		this1.uniform4fv(location,data,srcOffset,srcLength);
	} else {
		this1.uniform4fv(location,data);
	}
};
lime_graphics_WebGL2RenderContext.uniform4iv = function(this1,location,data,srcOffset,srcLength) {
	if(srcOffset != null) {
		this1.uniform4iv(location,data,srcOffset,srcLength);
	} else {
		this1.uniform4iv(location,data);
	}
};
lime_graphics_WebGL2RenderContext.uniformMatrix2fv = function(this1,location,transpose,data,srcOffset,srcLength) {
	if(srcOffset != null) {
		this1.uniformMatrix2fv(location,transpose,data,srcOffset,srcLength);
	} else {
		this1.uniformMatrix2fv(location,transpose,data);
	}
};
lime_graphics_WebGL2RenderContext.uniformMatrix3fv = function(this1,location,transpose,data,srcOffset,srcLength) {
	if(srcOffset != null) {
		this1.uniformMatrix3fv(location,transpose,data,srcOffset,srcLength);
	} else {
		this1.uniformMatrix3fv(location,transpose,data);
	}
};
lime_graphics_WebGL2RenderContext.uniformMatrix4fv = function(this1,location,transpose,data,srcOffset,srcLength) {
	if(srcOffset != null) {
		this1.uniformMatrix4fv(location,transpose,data,srcOffset,srcLength);
	} else {
		this1.uniformMatrix4fv(location,transpose,data);
	}
};
lime_graphics_WebGL2RenderContext.fromGL = function(gl) {
	return null;
};
lime_graphics_WebGL2RenderContext.fromRenderContext = function(context) {
	return context.webgl2;
};
lime_graphics_WebGL2RenderContext.toWebGLRenderContext = function(gl) {
	return gl;
};
var lime_graphics_WebGLRenderContext = {};
lime_graphics_WebGLRenderContext.bufferData = function(this1,target,srcData,usage) {
	var srcOffset = null;
	if(srcOffset != null) {
		this1.bufferData(target,srcData,usage,srcOffset,null);
	} else {
		this1.bufferData(target,srcData,usage);
	}
};
lime_graphics_WebGLRenderContext.bufferSubData = function(this1,target,offset,srcData) {
	var srcOffset = null;
	if(srcOffset != null) {
		this1.bufferSubData(target,offset,srcData,srcOffset,null);
	} else {
		this1.bufferSubData(target,offset,srcData);
	}
};
lime_graphics_WebGLRenderContext.compressedTexImage2D = function(this1,target,level,internalformat,width,height,border,srcData) {
	var srcOffset = null;
	if(srcOffset != null) {
		this1.compressedTexImage2D(target,level,internalformat,width,height,border,srcData,srcOffset,null);
	} else {
		this1.compressedTexImage2D(target,level,internalformat,width,height,border,srcData);
	}
};
lime_graphics_WebGLRenderContext.compressedTexSubImage2D = function(this1,target,level,xoffset,yoffset,width,height,format,srcData) {
	var srcOffset = null;
	if(srcOffset != null) {
		this1.compressedTexSubImage2D(target,level,xoffset,yoffset,width,height,format,srcData,srcOffset,null);
	} else {
		this1.compressedTexSubImage2D(target,level,xoffset,yoffset,width,height,format,srcData);
	}
};
lime_graphics_WebGLRenderContext.readPixels = function(this1,x,y,width,height,format,type,pixels) {
	var dstOffset = null;
	if(dstOffset != null) {
		this1.readPixels(x,y,width,height,format,type,pixels,dstOffset);
	} else {
		this1.readPixels(x,y,width,height,format,type,pixels);
	}
};
lime_graphics_WebGLRenderContext.texImage2D = function(this1,target,level,internalformat,width,height,border,format,type,srcData) {
	var srcOffset = null;
	if(srcOffset != null) {
		this1.texImage2D(target,level,internalformat,width,height,border,format,type,srcData,srcOffset);
	} else if(format != null) {
		this1.texImage2D(target,level,internalformat,width,height,border,format,type,srcData);
	} else {
		this1.texImage2D(target,level,internalformat,width,height,border);
	}
};
lime_graphics_WebGLRenderContext.texSubImage2D = function(this1,target,level,xoffset,yoffset,width,height,format,type,srcData) {
	var srcOffset = null;
	if(srcOffset != null) {
		this1.texSubImage2D(target,level,xoffset,yoffset,width,height,format,type,srcData,srcOffset);
	} else if(type != null) {
		this1.texSubImage2D(target,level,xoffset,yoffset,width,height,format,type,srcData);
	} else {
		this1.texSubImage2D(target,level,xoffset,yoffset,width,height,format);
	}
};
lime_graphics_WebGLRenderContext.uniformMatrix2fv = function(this1,location,transpose,v) {
	var data = v;
	var srcOffset = null;
	if(srcOffset != null) {
		this1.uniformMatrix2fv(location,transpose,data,srcOffset,null);
	} else {
		this1.uniformMatrix2fv(location,transpose,data);
	}
};
lime_graphics_WebGLRenderContext.uniformMatrix3fv = function(this1,location,transpose,v) {
	var data = v;
	var srcOffset = null;
	if(srcOffset != null) {
		this1.uniformMatrix3fv(location,transpose,data,srcOffset,null);
	} else {
		this1.uniformMatrix3fv(location,transpose,data);
	}
};
lime_graphics_WebGLRenderContext.uniformMatrix4fv = function(this1,location,transpose,v) {
	var data = v;
	var srcOffset = null;
	if(srcOffset != null) {
		this1.uniformMatrix4fv(location,transpose,data,srcOffset,null);
	} else {
		this1.uniformMatrix4fv(location,transpose,data);
	}
};
lime_graphics_WebGLRenderContext.fromWebGL2RenderContext = function(gl) {
	return gl;
};
lime_graphics_WebGLRenderContext.fromRenderContext = function(context) {
	return context.webgl;
};
lime_graphics_WebGLRenderContext.fromGL = function(gl) {
	return lime_graphics_opengl_GL.context;
};
var lime_graphics_cairo_Cairo = function(surface) {
	var tmp = surface != null;
};
$hxClasses["lime.graphics.cairo.Cairo"] = lime_graphics_cairo_Cairo;
lime_graphics_cairo_Cairo.__name__ = "lime.graphics.cairo.Cairo";
lime_graphics_cairo_Cairo.__properties__ = {get_versionString:"get_versionString",get_version:"get_version"};
lime_graphics_cairo_Cairo.get_version = function() {
	return 0;
};
lime_graphics_cairo_Cairo.get_versionString = function() {
	return "";
};
lime_graphics_cairo_Cairo.prototype = {
	target: null
	,userData: null
	,handle: null
	,arc: function(xc,yc,radius,angle1,angle2) {
	}
	,arcNegative: function(xc,yc,radius,angle1,angle2) {
	}
	,clip: function() {
	}
	,clipExtents: function(x1,y1,x2,y2) {
	}
	,clipPreserve: function() {
	}
	,closePath: function() {
	}
	,copyPage: function() {
	}
	,curveTo: function(x1,y1,x2,y2,x3,y3) {
	}
	,fill: function() {
	}
	,fillExtents: function(x1,y1,x2,y2) {
	}
	,fillPreserve: function() {
	}
	,getOperator: function() {
		return 0;
	}
	,identityMatrix: function() {
	}
	,inClip: function(x,y) {
		return false;
	}
	,inFill: function(x,y) {
		return false;
	}
	,inStroke: function(x,y) {
		return false;
	}
	,lineTo: function(x,y) {
	}
	,mask: function(pattern) {
	}
	,maskSurface: function(surface,x,y) {
	}
	,moveTo: function(x,y) {
	}
	,newPath: function() {
	}
	,paint: function() {
	}
	,paintWithAlpha: function(alpha) {
	}
	,popGroup: function() {
		return null;
	}
	,popGroupToSource: function() {
	}
	,pushGroup: function() {
	}
	,pushGroupWithContent: function(content) {
	}
	,recreate: function(surface) {
	}
	,rectangle: function(x,y,width,height) {
	}
	,relCurveTo: function(dx1,dy1,dx2,dy2,dx3,dy3) {
	}
	,relLineTo: function(dx,dy) {
	}
	,relMoveTo: function(dx,dy) {
	}
	,resetClip: function() {
	}
	,restore: function() {
	}
	,rotate: function(amount) {
	}
	,save: function() {
	}
	,scale: function(x,y) {
	}
	,setFontSize: function(size) {
	}
	,setOperator: function(value) {
		return value;
	}
	,setSourceRGB: function(r,g,b) {
	}
	,setSourceRGBA: function(r,g,b,a) {
	}
	,setSourceSurface: function(surface,x,y) {
	}
	,showGlyphs: function(glyphs) {
	}
	,showPage: function() {
	}
	,showText: function(utf8) {
	}
	,status: function() {
		return 0;
	}
	,stroke: function() {
	}
	,strokeExtents: function(x1,y1,x2,y2) {
	}
	,strokePreserve: function() {
	}
	,textPath: function(utf8) {
	}
	,transform: function(matrix) {
	}
	,translate: function(x,y) {
	}
	,get_antialias: function() {
		return 0;
	}
	,set_antialias: function(value) {
		return value;
	}
	,get_currentPoint: function() {
		return null;
	}
	,get_dash: function() {
		return [];
	}
	,set_dash: function(value) {
		return value;
	}
	,get_dashCount: function() {
		return 0;
	}
	,get_fillRule: function() {
		return 0;
	}
	,set_fillRule: function(value) {
		return value;
	}
	,get_fontFace: function() {
		return 0;
	}
	,set_fontFace: function(value) {
		return value;
	}
	,get_fontOptions: function() {
		return null;
	}
	,set_fontOptions: function(value) {
		return value;
	}
	,get_groupTarget: function() {
		return 0;
	}
	,get_hasCurrentPoint: function() {
		return false;
	}
	,get_lineCap: function() {
		return 0;
	}
	,set_lineCap: function(value) {
		return value;
	}
	,get_lineJoin: function() {
		return 0;
	}
	,set_lineJoin: function(value) {
		return value;
	}
	,get_lineWidth: function() {
		return 0;
	}
	,set_lineWidth: function(value) {
		return value;
	}
	,get_matrix: function() {
		return null;
	}
	,set_matrix: function(value) {
		return value;
	}
	,get_miterLimit: function() {
		return 0;
	}
	,set_miterLimit: function(value) {
		return value;
	}
	,get_source: function() {
		return 0;
	}
	,set_source: function(value) {
		return value;
	}
	,get_target: function() {
		return 0;
	}
	,get_tolerance: function() {
		return 0;
	}
	,set_tolerance: function(value) {
		return value;
	}
	,__class__: lime_graphics_cairo_Cairo
	,__properties__: {set_tolerance:"set_tolerance",get_tolerance:"get_tolerance",get_target:"get_target",set_source:"set_source",get_source:"get_source",set_miterLimit:"set_miterLimit",get_miterLimit:"get_miterLimit",set_matrix:"set_matrix",get_matrix:"get_matrix",set_lineWidth:"set_lineWidth",get_lineWidth:"get_lineWidth",set_lineJoin:"set_lineJoin",get_lineJoin:"get_lineJoin",set_lineCap:"set_lineCap",get_lineCap:"get_lineCap",get_hasCurrentPoint:"get_hasCurrentPoint",get_groupTarget:"get_groupTarget",set_fontOptions:"set_fontOptions",get_fontOptions:"get_fontOptions",set_fontFace:"set_fontFace",get_fontFace:"get_fontFace",set_fillRule:"set_fillRule",get_fillRule:"get_fillRule",get_dashCount:"get_dashCount",set_dash:"set_dash",get_dash:"get_dash",get_currentPoint:"get_currentPoint",set_antialias:"set_antialias",get_antialias:"get_antialias"}
};
var lime_graphics_cairo_CairoFTFontFace = {};
lime_graphics_cairo_CairoFTFontFace._new = function() {
	var this1 = 0;
	return this1;
};
lime_graphics_cairo_CairoFTFontFace.create = function(face,loadFlags) {
	return 0;
};
var lime_graphics_cairo_CairoFontFace = {};
lime_graphics_cairo_CairoFontFace._new = function() {
	var this1 = null;
	return this1;
};
lime_graphics_cairo_CairoFontFace.status = function(this1) {
	return 0;
};
var lime_graphics_cairo_CairoFontOptions = {};
lime_graphics_cairo_CairoFontOptions.__properties__ = {set_subpixelOrder:"set_subpixelOrder",get_subpixelOrder:"get_subpixelOrder",set_hintStyle:"set_hintStyle",get_hintStyle:"get_hintStyle",set_hintMetrics:"set_hintMetrics",get_hintMetrics:"get_hintMetrics",set_antialias:"set_antialias",get_antialias:"get_antialias"};
lime_graphics_cairo_CairoFontOptions._new = function() {
	var this1 = null;
	return this1;
};
lime_graphics_cairo_CairoFontOptions.get_antialias = function(this1) {
	return 0;
};
lime_graphics_cairo_CairoFontOptions.set_antialias = function(this1,value) {
	return value;
};
lime_graphics_cairo_CairoFontOptions.get_hintMetrics = function(this1) {
	return 0;
};
lime_graphics_cairo_CairoFontOptions.set_hintMetrics = function(this1,value) {
	return value;
};
lime_graphics_cairo_CairoFontOptions.get_hintStyle = function(this1) {
	return 0;
};
lime_graphics_cairo_CairoFontOptions.set_hintStyle = function(this1,value) {
	return value;
};
lime_graphics_cairo_CairoFontOptions.get_subpixelOrder = function(this1) {
	return 0;
};
lime_graphics_cairo_CairoFontOptions.set_subpixelOrder = function(this1,value) {
	return value;
};
var lime_graphics_cairo_CairoGlyph = function(index,x,y) {
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.index = index;
	this.x = x;
	this.y = y;
};
$hxClasses["lime.graphics.cairo.CairoGlyph"] = lime_graphics_cairo_CairoGlyph;
lime_graphics_cairo_CairoGlyph.__name__ = "lime.graphics.cairo.CairoGlyph";
lime_graphics_cairo_CairoGlyph.prototype = {
	index: null
	,x: null
	,y: null
	,__class__: lime_graphics_cairo_CairoGlyph
};
var lime_graphics_cairo_CairoImageSurface = {};
lime_graphics_cairo_CairoImageSurface.__properties__ = {get_width:"get_width",get_stride:"get_stride",get_height:"get_height",get_format:"get_format",get_data:"get_data"};
lime_graphics_cairo_CairoImageSurface._new = function(format,width,height) {
	var this1 = 0;
	return this1;
};
lime_graphics_cairo_CairoImageSurface.create = function(data,format,width,height,stride) {
	return 0;
};
lime_graphics_cairo_CairoImageSurface.fromImage = function(image) {
	return null;
};
lime_graphics_cairo_CairoImageSurface.get_data = function(this1) {
	return lime_utils_DataPointer.fromFloat(0);
};
lime_graphics_cairo_CairoImageSurface.get_format = function(this1) {
	return 0;
};
lime_graphics_cairo_CairoImageSurface.get_height = function(this1) {
	return 0;
};
lime_graphics_cairo_CairoImageSurface.get_stride = function(this1) {
	return 0;
};
lime_graphics_cairo_CairoImageSurface.get_width = function(this1) {
	return 0;
};
var lime_graphics_cairo_CairoPattern = {};
lime_graphics_cairo_CairoPattern.__properties__ = {set_matrix:"set_matrix",get_matrix:"get_matrix",set_filter:"set_filter",get_filter:"get_filter",set_extend:"set_extend",get_extend:"get_extend",get_colorStopCount:"get_colorStopCount"};
lime_graphics_cairo_CairoPattern._new = function(handle) {
	var this1 = handle;
	return this1;
};
lime_graphics_cairo_CairoPattern.addColorStopRGB = function(this1,offset,r,g,b) {
};
lime_graphics_cairo_CairoPattern.addColorStopRGBA = function(this1,offset,r,g,b,a) {
};
lime_graphics_cairo_CairoPattern.createForSurface = function(surface) {
	return 0;
};
lime_graphics_cairo_CairoPattern.createLinear = function(x0,y0,x1,y1) {
	return 0;
};
lime_graphics_cairo_CairoPattern.createRadial = function(cx0,cy0,radius0,cx1,cy1,radius1) {
	return 0;
};
lime_graphics_cairo_CairoPattern.createRGB = function(r,g,b) {
	return 0;
};
lime_graphics_cairo_CairoPattern.createRGBA = function(r,g,b,a) {
	return 0;
};
lime_graphics_cairo_CairoPattern.get_colorStopCount = function(this1) {
	return 0;
};
lime_graphics_cairo_CairoPattern.get_extend = function(this1) {
	return 0;
};
lime_graphics_cairo_CairoPattern.set_extend = function(this1,value) {
	return value;
};
lime_graphics_cairo_CairoPattern.get_filter = function(this1) {
	return 0;
};
lime_graphics_cairo_CairoPattern.set_filter = function(this1,value) {
	return value;
};
lime_graphics_cairo_CairoPattern.get_matrix = function(this1) {
	return null;
};
lime_graphics_cairo_CairoPattern.set_matrix = function(this1,value) {
	return value;
};
var lime_graphics_cairo_CairoSurface = {};
lime_graphics_cairo_CairoSurface.flush = function(this1) {
};
var lime_graphics_opengl_GL = function() { };
$hxClasses["lime.graphics.opengl.GL"] = lime_graphics_opengl_GL;
lime_graphics_opengl_GL.__name__ = "lime.graphics.opengl.GL";
lime_graphics_opengl_GL.activeTexture = function(texture) {
	lime_graphics_opengl_GL.context.activeTexture(texture);
};
lime_graphics_opengl_GL.attachShader = function(program,shader) {
	lime_graphics_opengl_GL.context.attachShader(program,shader);
};
lime_graphics_opengl_GL.beginQuery = function(target,query) {
	lime_graphics_opengl_GL.context.beginQuery(target,query);
};
lime_graphics_opengl_GL.beginTransformFeedback = function(primitiveNode) {
	lime_graphics_opengl_GL.context.beginTransformFeedback(primitiveNode);
};
lime_graphics_opengl_GL.bindAttribLocation = function(program,index,name) {
	lime_graphics_opengl_GL.context.bindAttribLocation(program,index,name);
};
lime_graphics_opengl_GL.bindBuffer = function(target,buffer) {
	lime_graphics_opengl_GL.context.bindBuffer(target,buffer);
};
lime_graphics_opengl_GL.bindBufferBase = function(target,index,buffer) {
	lime_graphics_opengl_GL.context.bindBufferBase(target,index,buffer);
};
lime_graphics_opengl_GL.bindBufferRange = function(target,index,buffer,offset,size) {
	lime_graphics_opengl_GL.context.bindBufferRange(target,index,buffer,offset,lime_utils_DataPointer.fromFloat(size));
};
lime_graphics_opengl_GL.bindFramebuffer = function(target,framebuffer) {
	lime_graphics_opengl_GL.context.bindFramebuffer(target,framebuffer);
};
lime_graphics_opengl_GL.bindRenderbuffer = function(target,renderbuffer) {
	lime_graphics_opengl_GL.context.bindRenderbuffer(target,renderbuffer);
};
lime_graphics_opengl_GL.bindSampler = function(unit,sampler) {
	lime_graphics_opengl_GL.context.bindSampler(unit,sampler);
};
lime_graphics_opengl_GL.bindTexture = function(target,texture) {
	lime_graphics_opengl_GL.context.bindTexture(target,texture);
};
lime_graphics_opengl_GL.bindTransformFeedback = function(target,transformFeedback) {
	lime_graphics_opengl_GL.context.bindTransformFeedback(target,transformFeedback);
};
lime_graphics_opengl_GL.bindVertexArray = function(vertexArray) {
	lime_graphics_opengl_GL.context.bindVertexArray(vertexArray);
};
lime_graphics_opengl_GL.blitFramebuffer = function(srcX0,srcY0,srcX1,srcY1,dstX0,dstY0,dstX1,dstY1,mask,filter) {
	lime_graphics_opengl_GL.context.blitFramebuffer(srcX0,srcY0,srcX1,srcY1,dstX0,dstY0,dstX1,dstY1,mask,filter);
};
lime_graphics_opengl_GL.blendColor = function(red,green,blue,alpha) {
	lime_graphics_opengl_GL.context.blendColor(red,green,blue,alpha);
};
lime_graphics_opengl_GL.blendEquation = function(mode) {
	lime_graphics_opengl_GL.context.blendEquation(mode);
};
lime_graphics_opengl_GL.blendEquationSeparate = function(modeRGB,modeAlpha) {
	lime_graphics_opengl_GL.context.blendEquationSeparate(modeRGB,modeAlpha);
};
lime_graphics_opengl_GL.blendFunc = function(sfactor,dfactor) {
	lime_graphics_opengl_GL.context.blendFunc(sfactor,dfactor);
};
lime_graphics_opengl_GL.blendFuncSeparate = function(srcRGB,dstRGB,srcAlpha,dstAlpha) {
	lime_graphics_opengl_GL.context.blendFuncSeparate(srcRGB,dstRGB,srcAlpha,dstAlpha);
};
lime_graphics_opengl_GL.bufferDataWEBGL = function(target,srcData,usage,srcOffset,length) {
	var this1 = lime_graphics_opengl_GL.context;
	if(srcOffset != null) {
		this1.bufferData(target,srcData,usage,srcOffset,length);
	} else {
		this1.bufferData(target,srcData,usage);
	}
};
lime_graphics_opengl_GL.bufferSubDataWEBGL = function(target,dstByteOffset,srcData,srcOffset,length) {
	var this1 = lime_graphics_opengl_GL.context;
	if(srcOffset != null) {
		this1.bufferSubData(target,dstByteOffset,srcData,srcOffset,length);
	} else {
		this1.bufferSubData(target,dstByteOffset,srcData);
	}
};
lime_graphics_opengl_GL.checkFramebufferStatus = function(target) {
	return lime_graphics_opengl_GL.context.checkFramebufferStatus(target);
};
lime_graphics_opengl_GL.clear = function(mask) {
	lime_graphics_opengl_GL.context.clear(mask);
};
lime_graphics_opengl_GL.clearBufferfi = function(buffer,drawbuffer,depth,stencil) {
	lime_graphics_opengl_GL.context.clearBufferfi(buffer,drawbuffer,depth,stencil);
};
lime_graphics_opengl_GL.clearBufferfvWEBGL = function(buffer,drawbuffer,values,srcOffset) {
	lime_graphics_opengl_GL.context.clearBufferfv(buffer,drawbuffer,values,srcOffset);
};
lime_graphics_opengl_GL.clearBufferivWEBGL = function(buffer,drawbuffer,values,srcOffset) {
	lime_graphics_opengl_GL.context.clearBufferiv(buffer,drawbuffer,values,srcOffset);
};
lime_graphics_opengl_GL.clearBufferuivWEBGL = function(buffer,drawbuffer,values,srcOffset) {
	lime_graphics_opengl_GL.context.clearBufferuiv(buffer,drawbuffer,values,srcOffset);
};
lime_graphics_opengl_GL.clearColor = function(red,green,blue,alpha) {
	lime_graphics_opengl_GL.context.clearColor(red,green,blue,alpha);
};
lime_graphics_opengl_GL.clearDepth = function(depth) {
	lime_graphics_opengl_GL.context.clearDepth(depth);
};
lime_graphics_opengl_GL.clearStencil = function(s) {
	lime_graphics_opengl_GL.context.clearStencil(s);
};
lime_graphics_opengl_GL.clientWaitSync = function(sync,flags,timeout) {
	return lime_graphics_opengl_GL.context.clientWaitSync(sync,flags,timeout);
};
lime_graphics_opengl_GL.colorMask = function(red,green,blue,alpha) {
	lime_graphics_opengl_GL.context.colorMask(red,green,blue,alpha);
};
lime_graphics_opengl_GL.compileShader = function(shader) {
	lime_graphics_opengl_GL.context.compileShader(shader);
};
lime_graphics_opengl_GL.compressedTexImage2DWEBGL = function(target,level,internalformat,width,height,border,srcData,srcOffset,srcLengthOverride) {
	var this1 = lime_graphics_opengl_GL.context;
	if(srcOffset != null) {
		this1.compressedTexImage2D(target,level,internalformat,width,height,border,srcData,srcOffset,srcLengthOverride);
	} else {
		this1.compressedTexImage2D(target,level,internalformat,width,height,border,srcData);
	}
};
lime_graphics_opengl_GL.compressedTexImage3DWEBGL = function(target,level,internalformat,width,height,depth,border,srcData,srcOffset,srcLengthOverride) {
	lime_graphics_opengl_GL.context.compressedTexImage3D(target,level,internalformat,width,height,depth,border,srcData,srcOffset,srcLengthOverride);
};
lime_graphics_opengl_GL.compressedTexSubImage2DWEBGL = function(target,level,xoffset,yoffset,width,height,format,srcData,srcOffset,srcLengthOverride) {
	var this1 = lime_graphics_opengl_GL.context;
	if(srcOffset != null) {
		this1.compressedTexSubImage2D(target,level,xoffset,yoffset,width,height,format,srcData,srcOffset,srcLengthOverride);
	} else {
		this1.compressedTexSubImage2D(target,level,xoffset,yoffset,width,height,format,srcData);
	}
};
lime_graphics_opengl_GL.compressedTexSubImage3DWEBGL = function(target,level,xoffset,yoffset,zoffset,width,height,depth,format,srcData,srcOffset,srcLengthOverride) {
	lime_graphics_opengl_GL.context.compressedTexSubImage3D(target,level,xoffset,yoffset,zoffset,width,height,depth,format,srcData,srcOffset,srcLengthOverride);
};
lime_graphics_opengl_GL.copyTexImage2D = function(target,level,internalformat,x,y,width,height,border) {
	lime_graphics_opengl_GL.context.copyTexImage2D(target,level,internalformat,x,y,width,height,border);
};
lime_graphics_opengl_GL.copyTexSubImage2D = function(target,level,xoffset,yoffset,x,y,width,height) {
	lime_graphics_opengl_GL.context.copyTexSubImage2D(target,level,xoffset,yoffset,x,y,width,height);
};
lime_graphics_opengl_GL.copyTexSubImage3D = function(target,level,xoffset,yoffset,zoffset,x,y,width,height) {
	lime_graphics_opengl_GL.context.copyTexSubImage3D(target,level,xoffset,yoffset,zoffset,x,y,width,height);
};
lime_graphics_opengl_GL.createBuffer = function() {
	return lime_graphics_opengl_GL.context.createBuffer();
};
lime_graphics_opengl_GL.createFramebuffer = function() {
	return lime_graphics_opengl_GL.context.createFramebuffer();
};
lime_graphics_opengl_GL.createProgram = function() {
	return lime_graphics_opengl_GL.context.createProgram();
};
lime_graphics_opengl_GL.createQuery = function() {
	return lime_graphics_opengl_GL.context.createQuery();
};
lime_graphics_opengl_GL.createRenderbuffer = function() {
	return lime_graphics_opengl_GL.context.createRenderbuffer();
};
lime_graphics_opengl_GL.createSampler = function() {
	return lime_graphics_opengl_GL.context.createSampler();
};
lime_graphics_opengl_GL.createShader = function(type) {
	return lime_graphics_opengl_GL.context.createShader(type);
};
lime_graphics_opengl_GL.createTexture = function() {
	return lime_graphics_opengl_GL.context.createTexture();
};
lime_graphics_opengl_GL.createTransformFeedback = function() {
	return lime_graphics_opengl_GL.context.createTransformFeedback();
};
lime_graphics_opengl_GL.createVertexArray = function() {
	return lime_graphics_opengl_GL.context.createVertexArray();
};
lime_graphics_opengl_GL.cullFace = function(mode) {
	lime_graphics_opengl_GL.context.cullFace(mode);
};
lime_graphics_opengl_GL.deleteBuffer = function(buffer) {
	lime_graphics_opengl_GL.context.deleteBuffer(buffer);
};
lime_graphics_opengl_GL.deleteFramebuffer = function(framebuffer) {
	lime_graphics_opengl_GL.context.deleteFramebuffer(framebuffer);
};
lime_graphics_opengl_GL.deleteProgram = function(program) {
	lime_graphics_opengl_GL.context.deleteProgram(program);
};
lime_graphics_opengl_GL.deleteQuery = function(query) {
	lime_graphics_opengl_GL.context.deleteQuery(query);
};
lime_graphics_opengl_GL.deleteRenderbuffer = function(renderbuffer) {
	lime_graphics_opengl_GL.context.deleteRenderbuffer(renderbuffer);
};
lime_graphics_opengl_GL.deleteSampler = function(sampler) {
	lime_graphics_opengl_GL.context.deleteSampler(sampler);
};
lime_graphics_opengl_GL.deleteShader = function(shader) {
	lime_graphics_opengl_GL.context.deleteShader(shader);
};
lime_graphics_opengl_GL.deleteSync = function(sync) {
	lime_graphics_opengl_GL.context.deleteSync(sync);
};
lime_graphics_opengl_GL.deleteTexture = function(texture) {
	lime_graphics_opengl_GL.context.deleteTexture(texture);
};
lime_graphics_opengl_GL.deleteTransformFeedback = function(transformFeedback) {
	lime_graphics_opengl_GL.context.deleteTransformFeedback(transformFeedback);
};
lime_graphics_opengl_GL.deleteVertexArray = function(vertexArray) {
	lime_graphics_opengl_GL.context.deleteVertexArray(vertexArray);
};
lime_graphics_opengl_GL.depthFunc = function(func) {
	lime_graphics_opengl_GL.context.depthFunc(func);
};
lime_graphics_opengl_GL.depthMask = function(flag) {
	lime_graphics_opengl_GL.context.depthMask(flag);
};
lime_graphics_opengl_GL.depthRange = function(zNear,zFar) {
	lime_graphics_opengl_GL.context.depthRange(zNear,zFar);
};
lime_graphics_opengl_GL.detachShader = function(program,shader) {
	lime_graphics_opengl_GL.context.detachShader(program,shader);
};
lime_graphics_opengl_GL.disable = function(cap) {
	lime_graphics_opengl_GL.context.disable(cap);
};
lime_graphics_opengl_GL.disableVertexAttribArray = function(index) {
	lime_graphics_opengl_GL.context.disableVertexAttribArray(index);
};
lime_graphics_opengl_GL.drawArrays = function(mode,first,count) {
	lime_graphics_opengl_GL.context.drawArrays(mode,first,count);
};
lime_graphics_opengl_GL.drawArraysInstanced = function(mode,first,count,instanceCount) {
	lime_graphics_opengl_GL.context.drawArraysInstanced(mode,first,count,instanceCount);
};
lime_graphics_opengl_GL.drawBuffers = function(buffers) {
	lime_graphics_opengl_GL.context.drawBuffers(buffers);
};
lime_graphics_opengl_GL.drawElements = function(mode,count,type,offset) {
	lime_graphics_opengl_GL.context.drawElements(mode,count,type,offset);
};
lime_graphics_opengl_GL.drawElementsInstanced = function(mode,count,type,offset,instanceCount) {
	lime_graphics_opengl_GL.context.drawElementsInstanced(mode,count,type,offset,instanceCount);
};
lime_graphics_opengl_GL.drawRangeElements = function(mode,start,end,count,type,offset) {
	lime_graphics_opengl_GL.context.drawRangeElements(mode,start,end,count,type,offset);
};
lime_graphics_opengl_GL.enable = function(cap) {
	lime_graphics_opengl_GL.context.enable(cap);
};
lime_graphics_opengl_GL.enableVertexAttribArray = function(index) {
	lime_graphics_opengl_GL.context.enableVertexAttribArray(index);
};
lime_graphics_opengl_GL.endQuery = function(target) {
	lime_graphics_opengl_GL.context.endQuery(target);
};
lime_graphics_opengl_GL.endTransformFeedback = function() {
	lime_graphics_opengl_GL.context.endTransformFeedback();
};
lime_graphics_opengl_GL.fenceSync = function(condition,flags) {
	return lime_graphics_opengl_GL.context.fenceSync(condition,flags);
};
lime_graphics_opengl_GL.finish = function() {
	lime_graphics_opengl_GL.context.finish();
};
lime_graphics_opengl_GL.flush = function() {
	lime_graphics_opengl_GL.context.flush();
};
lime_graphics_opengl_GL.framebufferRenderbuffer = function(target,attachment,renderbuffertarget,renderbuffer) {
	lime_graphics_opengl_GL.context.framebufferRenderbuffer(target,attachment,renderbuffertarget,renderbuffer);
};
lime_graphics_opengl_GL.framebufferTexture2D = function(target,attachment,textarget,texture,level) {
	lime_graphics_opengl_GL.context.framebufferTexture2D(target,attachment,textarget,texture,level);
};
lime_graphics_opengl_GL.framebufferTextureLayer = function(target,attachment,texture,level,layer) {
	lime_graphics_opengl_GL.context.framebufferTextureLayer(target,attachment,texture,level,layer);
};
lime_graphics_opengl_GL.frontFace = function(mode) {
	lime_graphics_opengl_GL.context.frontFace(mode);
};
lime_graphics_opengl_GL.generateMipmap = function(target) {
	lime_graphics_opengl_GL.context.generateMipmap(target);
};
lime_graphics_opengl_GL.getActiveAttrib = function(program,index) {
	return lime_graphics_opengl_GL.context.getActiveAttrib(program,index);
};
lime_graphics_opengl_GL.getActiveUniform = function(program,index) {
	return lime_graphics_opengl_GL.context.getActiveUniform(program,index);
};
lime_graphics_opengl_GL.getActiveUniformBlockName = function(program,uniformBlockIndex) {
	return lime_graphics_opengl_GL.context.getActiveUniformBlockName(program,uniformBlockIndex);
};
lime_graphics_opengl_GL.getActiveUniformBlockParameter = function(program,uniformBlockIndex,pname) {
	return lime_graphics_opengl_GL.context.getActiveUniformBlockParameter(program,uniformBlockIndex,pname);
};
lime_graphics_opengl_GL.getActiveUniforms = function(program,uniformIndices,pname) {
	return lime_graphics_opengl_GL.context.getActiveUniforms(program,uniformIndices,pname);
};
lime_graphics_opengl_GL.getAttachedShaders = function(program) {
	return lime_graphics_opengl_GL.context.getAttachedShaders(program);
};
lime_graphics_opengl_GL.getAttribLocation = function(program,name) {
	return lime_graphics_opengl_GL.context.getAttribLocation(program,name);
};
lime_graphics_opengl_GL.getBufferParameter = function(target,pname) {
	return lime_graphics_opengl_GL.context.getBufferParameter(target,pname);
};
lime_graphics_opengl_GL.getBufferSubDataWEBGL = function(target,srcByteOffset,dstData,srcOffset,length) {
	var this1 = lime_graphics_opengl_GL.context;
	if(srcOffset != null) {
		this1.getBufferSubData(target,srcByteOffset,dstData,srcOffset,length);
	} else {
		this1.getBufferSubData(target,srcByteOffset,dstData);
	}
};
lime_graphics_opengl_GL.getContextAttributes = function() {
	return lime_graphics_opengl_GL.context.getContextAttributes();
};
lime_graphics_opengl_GL.getError = function() {
	return lime_graphics_opengl_GL.context.getError();
};
lime_graphics_opengl_GL.getExtension = function(name) {
	return lime_graphics_opengl_GL.context.getExtension(name);
};
lime_graphics_opengl_GL.getFragDataLocation = function(program,name) {
	return lime_graphics_opengl_GL.context.getFragDataLocation(program,name);
};
lime_graphics_opengl_GL.getFramebufferAttachmentParameter = function(target,attachment,pname) {
	return lime_graphics_opengl_GL.context.getFramebufferAttachmentParameter(target,attachment,pname);
};
lime_graphics_opengl_GL.getIndexedParameter = function(target,index) {
	return lime_graphics_opengl_GL.context.getIndexedParameter(target,index);
};
lime_graphics_opengl_GL.getInternalformatParameter = function(target,internalformat,pname) {
	return lime_graphics_opengl_GL.context.getInternalformatParameter(target,internalformat,pname);
};
lime_graphics_opengl_GL.getParameter = function(pname) {
	return lime_graphics_opengl_GL.context.getParameter(pname);
};
lime_graphics_opengl_GL.getProgramInfoLog = function(program) {
	return lime_graphics_opengl_GL.context.getProgramInfoLog(program);
};
lime_graphics_opengl_GL.getProgramParameter = function(program,pname) {
	return lime_graphics_opengl_GL.context.getProgramParameter(program,pname);
};
lime_graphics_opengl_GL.getQuery = function(target,pname) {
	return lime_graphics_opengl_GL.context.getQuery(target,pname);
};
lime_graphics_opengl_GL.getQueryParameter = function(query,pname) {
	return lime_graphics_opengl_GL.context.getQueryParameter(query,pname);
};
lime_graphics_opengl_GL.getRenderbufferParameter = function(target,pname) {
	return lime_graphics_opengl_GL.context.getRenderbufferParameter(target,pname);
};
lime_graphics_opengl_GL.getSamplerParameter = function(sampler,pname) {
	return lime_graphics_opengl_GL.context.getSamplerParameter(sampler,pname);
};
lime_graphics_opengl_GL.getShaderInfoLog = function(shader) {
	return lime_graphics_opengl_GL.context.getShaderInfoLog(shader);
};
lime_graphics_opengl_GL.getShaderParameter = function(shader,pname) {
	return lime_graphics_opengl_GL.context.getShaderParameter(shader,pname);
};
lime_graphics_opengl_GL.getShaderPrecisionFormat = function(shadertype,precisiontype) {
	return lime_graphics_opengl_GL.context.getShaderPrecisionFormat(shadertype,precisiontype);
};
lime_graphics_opengl_GL.getShaderSource = function(shader) {
	return lime_graphics_opengl_GL.context.getShaderSource(shader);
};
lime_graphics_opengl_GL.getSupportedExtensions = function() {
	return lime_graphics_opengl_GL.context.getSupportedExtensions();
};
lime_graphics_opengl_GL.getSyncParameter = function(sync,pname) {
	return lime_graphics_opengl_GL.context.getSyncParameter(sync,pname);
};
lime_graphics_opengl_GL.getTexParameter = function(target,pname) {
	return lime_graphics_opengl_GL.context.getTexParameter(target,pname);
};
lime_graphics_opengl_GL.getTransformFeedbackVarying = function(program,index) {
	return lime_graphics_opengl_GL.context.getTransformFeedbackVarying(program,index);
};
lime_graphics_opengl_GL.getUniform = function(program,location) {
	return lime_graphics_opengl_GL.context.getUniform(program,location);
};
lime_graphics_opengl_GL.getUniformBlockIndex = function(program,uniformBlockName) {
	return lime_graphics_opengl_GL.context.getUniformBlockIndex(program,uniformBlockName);
};
lime_graphics_opengl_GL.getUniformIndices = function(program,uniformNames) {
	return lime_graphics_opengl_GL.context.getUniformIndices(program,uniformNames);
};
lime_graphics_opengl_GL.getUniformLocation = function(program,name) {
	return lime_graphics_opengl_GL.context.getUniformLocation(program,name);
};
lime_graphics_opengl_GL.getVertexAttrib = function(index,pname) {
	return lime_graphics_opengl_GL.context.getVertexAttrib(index,pname);
};
lime_graphics_opengl_GL.getVertexAttribOffset = function(index,pname) {
	return lime_utils_DataPointer.fromFloat(lime_graphics_opengl_GL.context.getVertexAttribOffset(index,pname));
};
lime_graphics_opengl_GL.hint = function(target,mode) {
	lime_graphics_opengl_GL.context.hint(target,mode);
};
lime_graphics_opengl_GL.invalidateFramebuffer = function(target,attachments) {
	lime_graphics_opengl_GL.context.invalidateFramebuffer(target,attachments);
};
lime_graphics_opengl_GL.invalidateSubFramebuffer = function(target,attachments,x,y,width,height) {
	lime_graphics_opengl_GL.context.invalidateSubFramebuffer(target,attachments,x,y,width,height);
};
lime_graphics_opengl_GL.isBuffer = function(buffer) {
	return lime_graphics_opengl_GL.context.isBuffer(buffer);
};
lime_graphics_opengl_GL.isContextLost = function() {
	return lime_graphics_opengl_GL.context.isContextLost();
};
lime_graphics_opengl_GL.isEnabled = function(cap) {
	return lime_graphics_opengl_GL.context.isEnabled(cap);
};
lime_graphics_opengl_GL.isFramebuffer = function(framebuffer) {
	return lime_graphics_opengl_GL.context.isFramebuffer(framebuffer);
};
lime_graphics_opengl_GL.isProgram = function(program) {
	return lime_graphics_opengl_GL.context.isProgram(program);
};
lime_graphics_opengl_GL.isQuery = function(query) {
	return lime_graphics_opengl_GL.context.isQuery(query);
};
lime_graphics_opengl_GL.isRenderbuffer = function(renderbuffer) {
	return lime_graphics_opengl_GL.context.isRenderbuffer(renderbuffer);
};
lime_graphics_opengl_GL.isSampler = function(sampler) {
	return lime_graphics_opengl_GL.context.isSampler(sampler);
};
lime_graphics_opengl_GL.isShader = function(shader) {
	return lime_graphics_opengl_GL.context.isShader(shader);
};
lime_graphics_opengl_GL.isSync = function(sync) {
	return lime_graphics_opengl_GL.context.isSync(sync);
};
lime_graphics_opengl_GL.isTexture = function(texture) {
	return lime_graphics_opengl_GL.context.isTexture(texture);
};
lime_graphics_opengl_GL.isTransformFeedback = function(transformFeedback) {
	return lime_graphics_opengl_GL.context.isTransformFeedback(transformFeedback);
};
lime_graphics_opengl_GL.isVertexArray = function(vertexArray) {
	return lime_graphics_opengl_GL.context.isVertexArray(vertexArray);
};
lime_graphics_opengl_GL.lineWidth = function(width) {
	lime_graphics_opengl_GL.context.lineWidth(width);
};
lime_graphics_opengl_GL.linkProgram = function(program) {
	lime_graphics_opengl_GL.context.linkProgram(program);
};
lime_graphics_opengl_GL.pauseTransformFeedback = function() {
	lime_graphics_opengl_GL.context.pauseTransformFeedback();
};
lime_graphics_opengl_GL.pixelStorei = function(pname,param) {
	lime_graphics_opengl_GL.context.pixelStorei(pname,param);
};
lime_graphics_opengl_GL.polygonOffset = function(factor,units) {
	lime_graphics_opengl_GL.context.polygonOffset(factor,units);
};
lime_graphics_opengl_GL.readBuffer = function(src) {
	lime_graphics_opengl_GL.context.readBuffer(src);
};
lime_graphics_opengl_GL.readPixelsWEBGL = function(x,y,width,height,format,type,pixels,dstOffset) {
	var this1 = lime_graphics_opengl_GL.context;
	if(dstOffset != null) {
		this1.readPixels(x,y,width,height,format,type,pixels,dstOffset);
	} else {
		this1.readPixels(x,y,width,height,format,type,pixels);
	}
};
lime_graphics_opengl_GL.renderbufferStorage = function(target,internalformat,width,height) {
	lime_graphics_opengl_GL.context.renderbufferStorage(target,internalformat,width,height);
};
lime_graphics_opengl_GL.renderbufferStorageMultisample = function(target,samples,internalformat,width,height) {
	lime_graphics_opengl_GL.context.renderbufferStorageMultisample(target,samples,internalformat,width,height);
};
lime_graphics_opengl_GL.resumeTransformFeedback = function() {
	lime_graphics_opengl_GL.context.resumeTransformFeedback();
};
lime_graphics_opengl_GL.sampleCoverage = function(value,invert) {
	lime_graphics_opengl_GL.context.sampleCoverage(value,invert);
};
lime_graphics_opengl_GL.samplerParameterf = function(sampler,pname,param) {
	lime_graphics_opengl_GL.context.samplerParameterf(sampler,pname,param);
};
lime_graphics_opengl_GL.samplerParameteri = function(sampler,pname,param) {
	lime_graphics_opengl_GL.context.samplerParameteri(sampler,pname,param);
};
lime_graphics_opengl_GL.scissor = function(x,y,width,height) {
	lime_graphics_opengl_GL.context.scissor(x,y,width,height);
};
lime_graphics_opengl_GL.shaderSource = function(shader,source) {
	lime_graphics_opengl_GL.context.shaderSource(shader,source);
};
lime_graphics_opengl_GL.stencilFunc = function(func,ref,mask) {
	lime_graphics_opengl_GL.context.stencilFunc(func,ref,mask);
};
lime_graphics_opengl_GL.stencilFuncSeparate = function(face,func,ref,mask) {
	lime_graphics_opengl_GL.context.stencilFuncSeparate(face,func,ref,mask);
};
lime_graphics_opengl_GL.stencilMask = function(mask) {
	lime_graphics_opengl_GL.context.stencilMask(mask);
};
lime_graphics_opengl_GL.stencilMaskSeparate = function(face,mask) {
	lime_graphics_opengl_GL.context.stencilMaskSeparate(face,mask);
};
lime_graphics_opengl_GL.stencilOp = function(fail,zfail,zpass) {
	lime_graphics_opengl_GL.context.stencilOp(fail,zfail,zpass);
};
lime_graphics_opengl_GL.stencilOpSeparate = function(face,fail,zfail,zpass) {
	lime_graphics_opengl_GL.context.stencilOpSeparate(face,fail,zfail,zpass);
};
lime_graphics_opengl_GL.texImage2DWEBGL = function(target,level,internalformat,width,height,border,format,type,srcData,srcOffset) {
	var this1 = lime_graphics_opengl_GL.context;
	if(srcOffset != null) {
		this1.texImage2D(target,level,internalformat,width,height,border,format,type,srcData,srcOffset);
	} else if(format != null) {
		this1.texImage2D(target,level,internalformat,width,height,border,format,type,srcData);
	} else {
		this1.texImage2D(target,level,internalformat,width,height,border);
	}
};
lime_graphics_opengl_GL.texImage3DWEBGL = function(target,level,internalformat,width,height,depth,border,format,type,srcData,srcOffset) {
	lime_graphics_opengl_GL.context.texImage3D(target,level,internalformat,width,height,depth,border,format,type,srcData,srcOffset);
};
lime_graphics_opengl_GL.texStorage2D = function(target,level,internalformat,width,height) {
	lime_graphics_opengl_GL.context.texStorage2D(target,level,internalformat,width,height);
};
lime_graphics_opengl_GL.texStorage3D = function(target,level,internalformat,width,height,depth) {
	lime_graphics_opengl_GL.context.texStorage3D(target,level,internalformat,width,height,depth);
};
lime_graphics_opengl_GL.texParameterf = function(target,pname,param) {
	lime_graphics_opengl_GL.context.texParameterf(target,pname,param);
};
lime_graphics_opengl_GL.texParameteri = function(target,pname,param) {
	lime_graphics_opengl_GL.context.texParameteri(target,pname,param);
};
lime_graphics_opengl_GL.texSubImage2DWEBGL = function(target,level,xoffset,yoffset,width,height,format,type,srcData,srcOffset) {
	var this1 = lime_graphics_opengl_GL.context;
	if(srcOffset != null) {
		this1.texSubImage2D(target,level,xoffset,yoffset,width,height,format,type,srcData,srcOffset);
	} else if(type != null) {
		this1.texSubImage2D(target,level,xoffset,yoffset,width,height,format,type,srcData);
	} else {
		this1.texSubImage2D(target,level,xoffset,yoffset,width,height,format);
	}
};
lime_graphics_opengl_GL.texSubImage3DWEBGL = function(target,level,xoffset,yoffset,zoffset,width,height,depth,format,type,source,srcOffset) {
	lime_graphics_opengl_GL.context.texSubImage3D(target,level,xoffset,yoffset,zoffset,width,height,depth,format,type,source,srcOffset);
};
lime_graphics_opengl_GL.transformFeedbackVaryings = function(program,varyings,bufferMode) {
	lime_graphics_opengl_GL.context.transformFeedbackVaryings(program,varyings,bufferMode);
};
lime_graphics_opengl_GL.uniform1f = function(location,v0) {
	lime_graphics_opengl_GL.context.uniform1f(location,v0);
};
lime_graphics_opengl_GL.uniform1fvWEBGL = function(location,data,srcOffset,srcLength) {
	var this1 = lime_graphics_opengl_GL.context;
	if(srcOffset != null) {
		this1.uniform1fv(location,data,srcOffset,srcLength);
	} else {
		this1.uniform1fv(location,data);
	}
};
lime_graphics_opengl_GL.uniform1i = function(location,v0) {
	lime_graphics_opengl_GL.context.uniform1i(location,v0);
};
lime_graphics_opengl_GL.uniform1ivWEBGL = function(location,data,srcOffset,srcLength) {
	var this1 = lime_graphics_opengl_GL.context;
	if(srcOffset != null) {
		this1.uniform1iv(location,data,srcOffset,srcLength);
	} else {
		this1.uniform1iv(location,data);
	}
};
lime_graphics_opengl_GL.uniform1ui = function(location,v0) {
	lime_graphics_opengl_GL.context.uniform1ui(location,v0);
};
lime_graphics_opengl_GL.uniform1uivWEBGL = function(location,data,srcOffset,srcLength) {
	lime_graphics_opengl_GL.context.uniform1uiv(location,data,srcOffset,srcLength);
};
lime_graphics_opengl_GL.uniform2f = function(location,v0,v1) {
	lime_graphics_opengl_GL.context.uniform2f(location,v0,v1);
};
lime_graphics_opengl_GL.uniform2fvWEBGL = function(location,data,srcOffset,srcLength) {
	lime_graphics_WebGL2RenderContext.uniform2fv(lime_graphics_opengl_GL.context,location,data,srcOffset,srcLength);
};
lime_graphics_opengl_GL.uniform2i = function(location,x,y) {
	lime_graphics_opengl_GL.context.uniform2i(location,x,y);
};
lime_graphics_opengl_GL.uniform2ivWEBGL = function(location,data,srcOffset,srcLength) {
	var this1 = lime_graphics_opengl_GL.context;
	if(srcOffset != null) {
		this1.uniform2iv(location,data,srcOffset,srcLength);
	} else {
		this1.uniform2iv(location,data);
	}
};
lime_graphics_opengl_GL.uniform2ui = function(location,x,y) {
	lime_graphics_opengl_GL.context.uniform2ui(location,x,y);
};
lime_graphics_opengl_GL.uniform2uivWEBGL = function(location,data,srcOffset,srcLength) {
	lime_graphics_opengl_GL.context.uniform2uiv(location,data,srcOffset,srcLength);
};
lime_graphics_opengl_GL.uniform3f = function(location,v0,v1,v2) {
	lime_graphics_opengl_GL.context.uniform3f(location,v0,v1,v2);
};
lime_graphics_opengl_GL.uniform3fvWEBGL = function(location,data,srcOffset,srcLength) {
	var this1 = lime_graphics_opengl_GL.context;
	if(srcOffset != null) {
		this1.uniform3fv(location,data,srcOffset,srcLength);
	} else {
		this1.uniform3fv(location,data);
	}
};
lime_graphics_opengl_GL.uniform3i = function(location,v0,v1,v2) {
	lime_graphics_opengl_GL.context.uniform3i(location,v0,v1,v2);
};
lime_graphics_opengl_GL.uniform3ivWEBGL = function(location,data,srcOffset,srcLength) {
	var this1 = lime_graphics_opengl_GL.context;
	if(srcOffset != null) {
		this1.uniform3iv(location,data,srcOffset,srcLength);
	} else {
		this1.uniform3iv(location,data);
	}
};
lime_graphics_opengl_GL.uniform3ui = function(location,v0,v1,v2) {
	lime_graphics_opengl_GL.context.uniform3ui(location,v0,v1,v2);
};
lime_graphics_opengl_GL.uniform3uivWEBGL = function(location,data,srcOffset,srcLength) {
	lime_graphics_opengl_GL.context.uniform3uiv(location,data,srcOffset,srcLength);
};
lime_graphics_opengl_GL.uniform4f = function(location,v0,v1,v2,v3) {
	lime_graphics_opengl_GL.context.uniform4f(location,v0,v1,v2,v3);
};
lime_graphics_opengl_GL.uniform4fvWEBGL = function(location,data,srcOffset,srcLength) {
	var this1 = lime_graphics_opengl_GL.context;
	if(srcOffset != null) {
		this1.uniform4fv(location,data,srcOffset,srcLength);
	} else {
		this1.uniform4fv(location,data);
	}
};
lime_graphics_opengl_GL.uniform4i = function(location,v0,v1,v2,v3) {
	lime_graphics_opengl_GL.context.uniform4i(location,v0,v1,v2,v3);
};
lime_graphics_opengl_GL.uniform4ivWEBGL = function(location,data,srcOffset,srcLength) {
	var this1 = lime_graphics_opengl_GL.context;
	if(srcOffset != null) {
		this1.uniform4iv(location,data,srcOffset,srcLength);
	} else {
		this1.uniform4iv(location,data);
	}
};
lime_graphics_opengl_GL.uniform4ui = function(location,v0,v1,v2,v3) {
	lime_graphics_opengl_GL.context.uniform4ui(location,v0,v1,v2,v3);
};
lime_graphics_opengl_GL.uniform4uivWEBGL = function(location,data,srcOffset,srcLength) {
	lime_graphics_opengl_GL.context.uniform4uiv(location,data,srcOffset,srcLength);
};
lime_graphics_opengl_GL.uniformBlockBinding = function(program,uniformBlockIndex,uniformBlockBinding) {
	lime_graphics_opengl_GL.context.uniformBlockBinding(program,uniformBlockIndex,uniformBlockBinding);
};
lime_graphics_opengl_GL.uniformMatrix2fvWEBGL = function(location,transpose,v,srcOffset,srcLength) {
	var this1 = lime_graphics_opengl_GL.context;
	if(srcOffset != null) {
		this1.uniformMatrix2fv(location,transpose,v,srcOffset,srcLength);
	} else {
		this1.uniformMatrix2fv(location,transpose,v);
	}
};
lime_graphics_opengl_GL.uniformMatrix2x3fvWEBGL = function(location,transpose,v,srcOffset,srcLength) {
	lime_graphics_opengl_GL.context.uniformMatrix2x3fv(location,transpose,v,srcOffset,srcLength);
};
lime_graphics_opengl_GL.uniformMatrix2x4fvWEBGL = function(location,transpose,v,srcOffset,srcLength) {
	lime_graphics_opengl_GL.context.uniformMatrix2x4fv(location,transpose,v,srcOffset,srcLength);
};
lime_graphics_opengl_GL.uniformMatrix3fvWEBGL = function(location,transpose,v,srcOffset,srcLength) {
	var this1 = lime_graphics_opengl_GL.context;
	if(srcOffset != null) {
		this1.uniformMatrix3fv(location,transpose,v,srcOffset,srcLength);
	} else {
		this1.uniformMatrix3fv(location,transpose,v);
	}
};
lime_graphics_opengl_GL.uniformMatrix3x2fvWEBGL = function(location,transpose,v,srcOffset,srcLength) {
	lime_graphics_opengl_GL.context.uniformMatrix3x2fv(location,transpose,v,srcOffset,srcLength);
};
lime_graphics_opengl_GL.uniformMatrix3x4fvWEBGL = function(location,transpose,v,srcOffset,srcLength) {
	lime_graphics_opengl_GL.context.uniformMatrix3x4fv(location,transpose,v,srcOffset,srcLength);
};
lime_graphics_opengl_GL.uniformMatrix4fvWEBGL = function(location,transpose,v,srcOffset,srcLength) {
	var this1 = lime_graphics_opengl_GL.context;
	if(srcOffset != null) {
		this1.uniformMatrix4fv(location,transpose,v,srcOffset,srcLength);
	} else {
		this1.uniformMatrix4fv(location,transpose,v);
	}
};
lime_graphics_opengl_GL.uniformMatrix4x2fvWEBGL = function(location,transpose,v,srcOffset,srcLength) {
	lime_graphics_opengl_GL.context.uniformMatrix4x2fv(location,transpose,v,srcOffset,srcLength);
};
lime_graphics_opengl_GL.uniformMatrix4x3fvWEBGL = function(location,transpose,v,srcOffset,srcLength) {
	lime_graphics_opengl_GL.context.uniformMatrix4x3fv(location,transpose,v,srcOffset,srcLength);
};
lime_graphics_opengl_GL.useProgram = function(program) {
	lime_graphics_opengl_GL.context.useProgram(program);
};
lime_graphics_opengl_GL.validateProgram = function(program) {
	lime_graphics_opengl_GL.context.validateProgram(program);
};
lime_graphics_opengl_GL.vertexAttrib1f = function(index,v0) {
	lime_graphics_opengl_GL.context.vertexAttrib1f(index,v0);
};
lime_graphics_opengl_GL.vertexAttrib1fv = function(index,v) {
	lime_graphics_opengl_GL.context.vertexAttrib1fv(index,v);
};
lime_graphics_opengl_GL.vertexAttrib1fvWEBGL = function(index,v) {
	lime_graphics_opengl_GL.context.vertexAttrib1fv(index,v);
};
lime_graphics_opengl_GL.vertexAttrib2f = function(index,v0,v1) {
	lime_graphics_opengl_GL.context.vertexAttrib2f(index,v0,v1);
};
lime_graphics_opengl_GL.vertexAttrib2fv = function(index,v) {
	lime_graphics_opengl_GL.context.vertexAttrib2fv(index,v);
};
lime_graphics_opengl_GL.vertexAttrib2fvWEBGL = function(index,v) {
	lime_graphics_opengl_GL.context.vertexAttrib2fv(index,v);
};
lime_graphics_opengl_GL.vertexAttrib3f = function(index,v0,v1,v2) {
	lime_graphics_opengl_GL.context.vertexAttrib3f(index,v0,v1,v2);
};
lime_graphics_opengl_GL.vertexAttrib3fv = function(index,v) {
	lime_graphics_opengl_GL.context.vertexAttrib3fv(index,v);
};
lime_graphics_opengl_GL.vertexAttrib3fvWEBGL = function(index,v) {
	lime_graphics_opengl_GL.context.vertexAttrib3fv(index,v);
};
lime_graphics_opengl_GL.vertexAttrib4f = function(index,v0,v1,v2,v3) {
	lime_graphics_opengl_GL.context.vertexAttrib4f(index,v0,v1,v2,v3);
};
lime_graphics_opengl_GL.vertexAttrib4fv = function(index,v) {
	lime_graphics_opengl_GL.context.vertexAttrib4fv(index,v);
};
lime_graphics_opengl_GL.vertexAttrib4fvWEBGL = function(index,v) {
	lime_graphics_opengl_GL.context.vertexAttrib4fv(index,v);
};
lime_graphics_opengl_GL.vertexAttribDivisor = function(index,divisor) {
	lime_graphics_opengl_GL.context.vertexAttribDivisor(index,divisor);
};
lime_graphics_opengl_GL.vertexAttribI4i = function(index,v0,v1,v2,v3) {
	lime_graphics_opengl_GL.context.vertexAttribI4i(index,v0,v1,v2,v3);
};
lime_graphics_opengl_GL.vertexAttribI4iv = function(index,v) {
	lime_graphics_opengl_GL.context.vertexAttribI4iv(index,v);
};
lime_graphics_opengl_GL.vertexAttribI4ivWEBGL = function(index,v) {
	lime_graphics_opengl_GL.context.vertexAttribI4iv(index,v);
};
lime_graphics_opengl_GL.vertexAttribI4ui = function(index,v0,v1,v2,v3) {
	lime_graphics_opengl_GL.context.vertexAttribI4ui(index,v0,v1,v2,v3);
};
lime_graphics_opengl_GL.vertexAttribI4uiv = function(index,v) {
	lime_graphics_opengl_GL.context.vertexAttribI4uiv(index,v);
};
lime_graphics_opengl_GL.vertexAttribI4uivWEBGL = function(index,v) {
	lime_graphics_opengl_GL.context.vertexAttribI4uiv(index,v);
};
lime_graphics_opengl_GL.vertexAttribIPointer = function(index,size,type,stride,offset) {
	lime_graphics_opengl_GL.context.vertexAttribIPointer(index,size,type,stride,offset);
};
lime_graphics_opengl_GL.vertexAttribPointer = function(index,size,type,normalized,stride,offset) {
	lime_graphics_opengl_GL.context.vertexAttribPointer(index,size,type,normalized,stride,offset);
};
lime_graphics_opengl_GL.viewport = function(x,y,width,height) {
	lime_graphics_opengl_GL.context.viewport(x,y,width,height);
};
lime_graphics_opengl_GL.waitSync = function(sync,flags,timeout) {
	lime_graphics_opengl_GL.context.waitSync(sync,flags,timeout);
};
lime_graphics_opengl_GL.__getObjectID = function(object) {
	if(object == null) {
		return 0;
	} else {
		return object.id;
	}
};
var lime_graphics_opengl_GLProgram = {};
lime_graphics_opengl_GLProgram.fromSources = function(gl,vertexSource,fragmentSource) {
	var vertexShader = lime_graphics_opengl_GLShader.fromSource(gl,vertexSource,gl.VERTEX_SHADER);
	var fragmentShader = lime_graphics_opengl_GLShader.fromSource(gl,fragmentSource,gl.FRAGMENT_SHADER);
	var program = gl.createProgram();
	gl.attachShader(program,vertexShader);
	gl.attachShader(program,fragmentShader);
	gl.linkProgram(program);
	if(gl.getProgramParameter(program,35714) == 0) {
		var message = "Unable to initialize the shader program";
		message += "\n" + lime_graphics_opengl_GL.context.getProgramInfoLog(program);
		lime_utils_Log.error(message,{ fileName : "lime/graphics/opengl/GLProgram.hx", lineNumber : 39, className : "lime.graphics.opengl._GLProgram.GLProgram_Impl_", methodName : "fromSources"});
	}
	return program;
};
var lime_graphics_opengl_GLShader = {};
lime_graphics_opengl_GLShader.fromSource = function(gl,source,type) {
	var shader = gl.createShader(type);
	gl.shaderSource(shader,source);
	gl.compileShader(shader);
	if(gl.getShaderParameter(shader,gl.COMPILE_STATUS) == 0) {
		var message;
		if(type == gl.VERTEX_SHADER) {
			message = "Error compiling vertex shader";
		} else if(type == gl.FRAGMENT_SHADER) {
			message = "Error compiling fragment shader";
		} else {
			message = "Error compiling unknown shader type";
		}
		message += "\n" + gl.getShaderInfoLog(shader);
		lime_utils_Log.error(message,{ fileName : "lime/graphics/opengl/GLShader.hx", lineNumber : 40, className : "lime.graphics.opengl._GLShader.GLShader_Impl_", methodName : "fromSource"});
	}
	return shader;
};
var lime_graphics_opengl_ext_KHR_$debug = function() {
	this.STACK_UNDERFLOW = 1284;
	this.STACK_OVERFLOW = 1283;
	this.CONTEXT_FLAG_DEBUG_BIT = 2;
	this.DEBUG_OUTPUT = 37600;
	this.DEBUG_SEVERITY_LOW = 37192;
	this.DEBUG_SEVERITY_MEDIUM = 37191;
	this.DEBUG_SEVERITY_HIGH = 37190;
	this.DEBUG_LOGGED_MESSAGES = 37189;
	this.MAX_DEBUG_LOGGED_MESSAGES = 37188;
	this.MAX_DEBUG_MESSAGE_LENGTH = 37187;
	this.MAX_LABEL_LENGTH = 33512;
	this.SAMPLER = 33510;
	this.QUERY = 33507;
	this.PROGRAM = 33506;
	this.SHADER = 33505;
	this.BUFFER = 33504;
	this.DEBUG_GROUP_STACK_DEPTH = 33389;
	this.MAX_DEBUG_GROUP_STACK_DEPTH = 33388;
	this.DEBUG_SEVERITY_NOTIFICATION = 33387;
	this.DEBUG_TYPE_POP_GROUP = 33386;
	this.DEBUG_TYPE_PUSH_GROUP = 33385;
	this.DEBUG_TYPE_MARKER = 33384;
	this.DEBUG_TYPE_OTHER = 33361;
	this.DEBUG_TYPE_PERFORMANCE = 33360;
	this.DEBUG_TYPE_PORTABILITY = 33359;
	this.DEBUG_TYPE_UNDEFINED_BEHAVIOR = 33358;
	this.DEBUG_TYPE_DEPRECATED_BEHAVIOR = 33357;
	this.DEBUG_TYPE_ERROR = 33356;
	this.DEBUG_SOURCE_OTHER = 33355;
	this.DEBUG_SOURCE_APPLICATION = 33354;
	this.DEBUG_SOURCE_THIRD_PARTY = 33353;
	this.DEBUG_SOURCE_SHADER_COMPILER = 33352;
	this.DEBUG_SOURCE_WINDOW_SYSTEM = 33351;
	this.DEBUG_SOURCE_API = 33350;
	this.DEBUG_CALLBACK_USER_PARAM = 33349;
	this.DEBUG_CALLBACK_FUNCTION = 33348;
	this.DEBUG_NEXT_LOGGED_MESSAGE_LENGTH = 33347;
	this.DEBUG_OUTPUT_SYNCHRONOUS = 33346;
};
$hxClasses["lime.graphics.opengl.ext.KHR_debug"] = lime_graphics_opengl_ext_KHR_$debug;
lime_graphics_opengl_ext_KHR_$debug.__name__ = "lime.graphics.opengl.ext.KHR_debug";
lime_graphics_opengl_ext_KHR_$debug.prototype = {
	DEBUG_OUTPUT_SYNCHRONOUS: null
	,DEBUG_NEXT_LOGGED_MESSAGE_LENGTH: null
	,DEBUG_CALLBACK_FUNCTION: null
	,DEBUG_CALLBACK_USER_PARAM: null
	,DEBUG_SOURCE_API: null
	,DEBUG_SOURCE_WINDOW_SYSTEM: null
	,DEBUG_SOURCE_SHADER_COMPILER: null
	,DEBUG_SOURCE_THIRD_PARTY: null
	,DEBUG_SOURCE_APPLICATION: null
	,DEBUG_SOURCE_OTHER: null
	,DEBUG_TYPE_ERROR: null
	,DEBUG_TYPE_DEPRECATED_BEHAVIOR: null
	,DEBUG_TYPE_UNDEFINED_BEHAVIOR: null
	,DEBUG_TYPE_PORTABILITY: null
	,DEBUG_TYPE_PERFORMANCE: null
	,DEBUG_TYPE_OTHER: null
	,DEBUG_TYPE_MARKER: null
	,DEBUG_TYPE_PUSH_GROUP: null
	,DEBUG_TYPE_POP_GROUP: null
	,DEBUG_SEVERITY_NOTIFICATION: null
	,MAX_DEBUG_GROUP_STACK_DEPTH: null
	,DEBUG_GROUP_STACK_DEPTH: null
	,BUFFER: null
	,SHADER: null
	,PROGRAM: null
	,QUERY: null
	,SAMPLER: null
	,MAX_LABEL_LENGTH: null
	,MAX_DEBUG_MESSAGE_LENGTH: null
	,MAX_DEBUG_LOGGED_MESSAGES: null
	,DEBUG_LOGGED_MESSAGES: null
	,DEBUG_SEVERITY_HIGH: null
	,DEBUG_SEVERITY_MEDIUM: null
	,DEBUG_SEVERITY_LOW: null
	,DEBUG_OUTPUT: null
	,CONTEXT_FLAG_DEBUG_BIT: null
	,STACK_OVERFLOW: null
	,STACK_UNDERFLOW: null
	,__class__: lime_graphics_opengl_ext_KHR_$debug
};
var lime_math_ARGB = {};
lime_math_ARGB.__properties__ = {set_r:"set_r",get_r:"get_r",set_g:"set_g",get_g:"get_g",set_b:"set_b",get_b:"get_b",set_a:"set_a",get_a:"get_a"};
lime_math_ARGB._new = function(argb) {
	if(argb == null) {
		argb = 0;
	}
	var this1 = argb;
	return this1;
};
lime_math_ARGB.create = function(a,r,g,b) {
	var this1 = 0;
	var argb = this1;
	argb = (a & 255) << 24 | (r & 255) << 16 | (g & 255) << 8 | b & 255;
	return argb;
};
lime_math_ARGB.multiplyAlpha = function(this1) {
	if((this1 >>> 24 & 255) == 0) {
		this1 = 0;
	} else if((this1 >>> 24 & 255) != 255) {
		lime_math_ARGB.a16 = lime_math_RGBA.__alpha16[this1 >>> 24 & 255];
		this1 = (this1 >>> 24 & 255 & 255) << 24 | ((this1 >>> 16 & 255) * lime_math_ARGB.a16 >> 16 & 255) << 16 | ((this1 >>> 8 & 255) * lime_math_ARGB.a16 >> 16 & 255) << 8 | (this1 & 255) * lime_math_ARGB.a16 >> 16 & 255;
	}
};
lime_math_ARGB.readUInt8 = function(this1,data,offset,format,premultiplied) {
	if(premultiplied == null) {
		premultiplied = false;
	}
	if(format == null) {
		format = 0;
	}
	switch(format) {
	case 0:
		this1 = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
		break;
	case 1:
		this1 = (data[offset + 2] & 255) << 24 | (data[offset + 3] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 1] & 255;
		break;
	case 2:
		this1 = (data[offset + 1] & 255) << 24 | (data[offset] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset + 2] & 255;
		break;
	}
	if(premultiplied) {
		if((this1 >>> 24 & 255) != 0 && (this1 >>> 24 & 255) != 255) {
			lime_math_ARGB.unmult = 255.0 / (this1 >>> 24 & 255);
			this1 = (this1 >>> 24 & 255 & 255) << 24 | (lime_math_RGBA.__clamp[Math.floor((this1 >>> 16 & 255) * lime_math_ARGB.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.floor((this1 >>> 8 & 255) * lime_math_ARGB.unmult)] & 255) << 8 | lime_math_RGBA.__clamp[Math.floor((this1 & 255) * lime_math_ARGB.unmult)] & 255;
		}
	}
};
lime_math_ARGB.set = function(this1,a,r,g,b) {
	this1 = (a & 255) << 24 | (r & 255) << 16 | (g & 255) << 8 | b & 255;
};
lime_math_ARGB.unmultiplyAlpha = function(this1) {
	if((this1 >>> 24 & 255) != 0 && (this1 >>> 24 & 255) != 255) {
		lime_math_ARGB.unmult = 255.0 / (this1 >>> 24 & 255);
		this1 = (this1 >>> 24 & 255 & 255) << 24 | (lime_math_RGBA.__clamp[Math.floor((this1 >>> 16 & 255) * lime_math_ARGB.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.floor((this1 >>> 8 & 255) * lime_math_ARGB.unmult)] & 255) << 8 | lime_math_RGBA.__clamp[Math.floor((this1 & 255) * lime_math_ARGB.unmult)] & 255;
	}
};
lime_math_ARGB.writeUInt8 = function(this1,data,offset,format,premultiplied) {
	if(premultiplied == null) {
		premultiplied = false;
	}
	if(format == null) {
		format = 0;
	}
	if(premultiplied) {
		if((this1 >>> 24 & 255) == 0) {
			this1 = 0;
		} else if((this1 >>> 24 & 255) != 255) {
			lime_math_ARGB.a16 = lime_math_RGBA.__alpha16[this1 >>> 24 & 255];
			this1 = (this1 >>> 24 & 255 & 255) << 24 | ((this1 >>> 16 & 255) * lime_math_ARGB.a16 >> 16 & 255) << 16 | ((this1 >>> 8 & 255) * lime_math_ARGB.a16 >> 16 & 255) << 8 | (this1 & 255) * lime_math_ARGB.a16 >> 16 & 255;
		}
	}
	switch(format) {
	case 0:
		data[offset] = this1 >>> 16 & 255;
		data[offset + 1] = this1 >>> 8 & 255;
		data[offset + 2] = this1 & 255;
		data[offset + 3] = this1 >>> 24 & 255;
		break;
	case 1:
		data[offset] = this1 >>> 24 & 255;
		data[offset + 1] = this1 >>> 16 & 255;
		data[offset + 2] = this1 >>> 8 & 255;
		data[offset + 3] = this1 & 255;
		break;
	case 2:
		data[offset] = this1 & 255;
		data[offset + 1] = this1 >>> 8 & 255;
		data[offset + 2] = this1 >>> 16 & 255;
		data[offset + 3] = this1 >>> 24 & 255;
		break;
	}
};
lime_math_ARGB.__fromBGRA = function(bgra) {
	var this1 = 0;
	var argb = this1;
	argb = (bgra & 255 & 255) << 24 | (bgra >>> 8 & 255 & 255) << 16 | (bgra >>> 16 & 255 & 255) << 8 | bgra >>> 24 & 255 & 255;
	return argb;
};
lime_math_ARGB.__fromRGBA = function(rgba) {
	var this1 = 0;
	var argb = this1;
	argb = (rgba & 255 & 255) << 24 | (rgba >>> 24 & 255 & 255) << 16 | (rgba >>> 16 & 255 & 255) << 8 | rgba >>> 8 & 255 & 255;
	return argb;
};
lime_math_ARGB.get_a = function(this1) {
	return this1 >>> 24 & 255;
};
lime_math_ARGB.set_a = function(this1,value) {
	this1 = (value & 255) << 24 | (this1 >>> 16 & 255 & 255) << 16 | (this1 >>> 8 & 255 & 255) << 8 | this1 & 255 & 255;
	return value;
};
lime_math_ARGB.get_b = function(this1) {
	return this1 & 255;
};
lime_math_ARGB.set_b = function(this1,value) {
	this1 = (this1 >>> 24 & 255 & 255) << 24 | (this1 >>> 16 & 255 & 255) << 16 | (this1 >>> 8 & 255 & 255) << 8 | value & 255;
	return value;
};
lime_math_ARGB.get_g = function(this1) {
	return this1 >>> 8 & 255;
};
lime_math_ARGB.set_g = function(this1,value) {
	this1 = (this1 >>> 24 & 255 & 255) << 24 | (this1 >>> 16 & 255 & 255) << 16 | (value & 255) << 8 | this1 & 255 & 255;
	return value;
};
lime_math_ARGB.get_r = function(this1) {
	return this1 >>> 16 & 255;
};
lime_math_ARGB.set_r = function(this1,value) {
	this1 = (this1 >>> 24 & 255 & 255) << 24 | (value & 255) << 16 | (this1 >>> 8 & 255 & 255) << 8 | this1 & 255 & 255;
	return value;
};
var lime_math_BGRA = {};
lime_math_BGRA.__properties__ = {set_r:"set_r",get_r:"get_r",set_g:"set_g",get_g:"get_g",set_b:"set_b",get_b:"get_b",set_a:"set_a",get_a:"get_a"};
lime_math_BGRA._new = function(bgra) {
	if(bgra == null) {
		bgra = 0;
	}
	var this1 = bgra;
	return this1;
};
lime_math_BGRA.create = function(b,g,r,a) {
	var this1 = 0;
	var bgra = this1;
	bgra = (b & 255) << 24 | (g & 255) << 16 | (r & 255) << 8 | a & 255;
	return bgra;
};
lime_math_BGRA.multiplyAlpha = function(this1) {
	if((this1 & 255) == 0) {
		this1 = 0;
	} else if((this1 & 255) != 255) {
		lime_math_BGRA.a16 = lime_math_RGBA.__alpha16[this1 & 255];
		this1 = ((this1 >>> 24 & 255) * lime_math_BGRA.a16 >> 16 & 255) << 24 | ((this1 >>> 16 & 255) * lime_math_BGRA.a16 >> 16 & 255) << 16 | ((this1 >>> 8 & 255) * lime_math_BGRA.a16 >> 16 & 255) << 8 | this1 & 255 & 255;
	}
};
lime_math_BGRA.readUInt8 = function(this1,data,offset,format,premultiplied) {
	if(premultiplied == null) {
		premultiplied = false;
	}
	if(format == null) {
		format = 0;
	}
	switch(format) {
	case 0:
		this1 = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
		break;
	case 1:
		this1 = (data[offset + 3] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 1] & 255) << 8 | data[offset] & 255;
		break;
	case 2:
		this1 = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
		break;
	}
	if(premultiplied) {
		if((this1 & 255) != 0 && (this1 & 255) != 255) {
			lime_math_BGRA.unmult = 255.0 / (this1 & 255);
			this1 = (lime_math_RGBA.__clamp[Math.floor((this1 >>> 24 & 255) * lime_math_BGRA.unmult)] & 255) << 24 | (lime_math_RGBA.__clamp[Math.floor((this1 >>> 16 & 255) * lime_math_BGRA.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.floor((this1 >>> 8 & 255) * lime_math_BGRA.unmult)] & 255) << 8 | this1 & 255 & 255;
		}
	}
};
lime_math_BGRA.set = function(this1,b,g,r,a) {
	this1 = (b & 255) << 24 | (g & 255) << 16 | (r & 255) << 8 | a & 255;
};
lime_math_BGRA.unmultiplyAlpha = function(this1) {
	if((this1 & 255) != 0 && (this1 & 255) != 255) {
		lime_math_BGRA.unmult = 255.0 / (this1 & 255);
		this1 = (lime_math_RGBA.__clamp[Math.floor((this1 >>> 24 & 255) * lime_math_BGRA.unmult)] & 255) << 24 | (lime_math_RGBA.__clamp[Math.floor((this1 >>> 16 & 255) * lime_math_BGRA.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.floor((this1 >>> 8 & 255) * lime_math_BGRA.unmult)] & 255) << 8 | this1 & 255 & 255;
	}
};
lime_math_BGRA.writeUInt8 = function(this1,data,offset,format,premultiplied) {
	if(premultiplied == null) {
		premultiplied = false;
	}
	if(format == null) {
		format = 0;
	}
	if(premultiplied) {
		if((this1 & 255) == 0) {
			this1 = 0;
		} else if((this1 & 255) != 255) {
			lime_math_BGRA.a16 = lime_math_RGBA.__alpha16[this1 & 255];
			this1 = ((this1 >>> 24 & 255) * lime_math_BGRA.a16 >> 16 & 255) << 24 | ((this1 >>> 16 & 255) * lime_math_BGRA.a16 >> 16 & 255) << 16 | ((this1 >>> 8 & 255) * lime_math_BGRA.a16 >> 16 & 255) << 8 | this1 & 255 & 255;
		}
	}
	switch(format) {
	case 0:
		data[offset] = this1 >>> 8 & 255;
		data[offset + 1] = this1 >>> 16 & 255;
		data[offset + 2] = this1 >>> 24 & 255;
		data[offset + 3] = this1 & 255;
		break;
	case 1:
		data[offset] = this1 & 255;
		data[offset + 1] = this1 >>> 8 & 255;
		data[offset + 2] = this1 >>> 16 & 255;
		data[offset + 3] = this1 >>> 24 & 255;
		break;
	case 2:
		data[offset] = this1 >>> 24 & 255;
		data[offset + 1] = this1 >>> 16 & 255;
		data[offset + 2] = this1 >>> 8 & 255;
		data[offset + 3] = this1 & 255;
		break;
	}
};
lime_math_BGRA.__fromARGB = function(argb) {
	var this1 = 0;
	var bgra = this1;
	bgra = (argb & 255 & 255) << 24 | (argb >>> 8 & 255 & 255) << 16 | (argb >>> 16 & 255 & 255) << 8 | argb >>> 24 & 255 & 255;
	return bgra;
};
lime_math_BGRA.__fromRGBA = function(rgba) {
	var this1 = 0;
	var bgra = this1;
	bgra = (rgba >>> 8 & 255 & 255) << 24 | (rgba >>> 16 & 255 & 255) << 16 | (rgba >>> 24 & 255 & 255) << 8 | rgba & 255 & 255;
	return bgra;
};
lime_math_BGRA.get_a = function(this1) {
	return this1 & 255;
};
lime_math_BGRA.set_a = function(this1,value) {
	this1 = (this1 >>> 24 & 255 & 255) << 24 | (this1 >>> 16 & 255 & 255) << 16 | (this1 >>> 8 & 255 & 255) << 8 | value & 255;
	return value;
};
lime_math_BGRA.get_b = function(this1) {
	return this1 >>> 24 & 255;
};
lime_math_BGRA.set_b = function(this1,value) {
	this1 = (value & 255) << 24 | (this1 >>> 16 & 255 & 255) << 16 | (this1 >>> 8 & 255 & 255) << 8 | this1 & 255 & 255;
	return value;
};
lime_math_BGRA.get_g = function(this1) {
	return this1 >>> 16 & 255;
};
lime_math_BGRA.set_g = function(this1,value) {
	this1 = (this1 >>> 24 & 255 & 255) << 24 | (value & 255) << 16 | (this1 >>> 8 & 255 & 255) << 8 | this1 & 255 & 255;
	return value;
};
lime_math_BGRA.get_r = function(this1) {
	return this1 >>> 8 & 255;
};
lime_math_BGRA.set_r = function(this1,value) {
	this1 = (this1 >>> 24 & 255 & 255) << 24 | (this1 >>> 16 & 255 & 255) << 16 | (value & 255) << 8 | this1 & 255 & 255;
	return value;
};
var lime_math_ColorMatrix = {};
lime_math_ColorMatrix.__properties__ = {set_redOffset:"set_redOffset",get_redOffset:"get_redOffset",set_redMultiplier:"set_redMultiplier",get_redMultiplier:"get_redMultiplier",set_greenOffset:"set_greenOffset",get_greenOffset:"get_greenOffset",set_greenMultiplier:"set_greenMultiplier",get_greenMultiplier:"get_greenMultiplier",set_color:"set_color",get_color:"get_color",set_blueOffset:"set_blueOffset",get_blueOffset:"get_blueOffset",set_blueMultiplier:"set_blueMultiplier",get_blueMultiplier:"get_blueMultiplier",set_alphaOffset:"set_alphaOffset",get_alphaOffset:"get_alphaOffset",set_alphaMultiplier:"set_alphaMultiplier",get_alphaMultiplier:"get_alphaMultiplier"};
lime_math_ColorMatrix._new = function(data) {
	var this1;
	if(data != null && data.length == 20) {
		this1 = data;
	} else {
		var elements = null;
		var array = lime_math_ColorMatrix.__identity;
		var vector = null;
		var view = null;
		var buffer = null;
		var len = null;
		var this2;
		if(elements != null) {
			this2 = new Float32Array(elements);
		} else if(array != null) {
			this2 = new Float32Array(array);
		} else if(vector != null) {
			this2 = new Float32Array(vector.__array);
		} else if(view != null) {
			this2 = new Float32Array(view);
		} else if(buffer != null) {
			if(len == null) {
				this2 = new Float32Array(buffer,0);
			} else {
				this2 = new Float32Array(buffer,0,len);
			}
		} else {
			this2 = null;
		}
		this1 = this2;
	}
	return this1;
};
lime_math_ColorMatrix.clone = function(this1) {
	var elements = null;
	var array = null;
	var vector = null;
	var buffer = null;
	var len = null;
	var this2;
	if(elements != null) {
		this2 = new Float32Array(elements);
	} else if(array != null) {
		this2 = new Float32Array(array);
	} else if(vector != null) {
		this2 = new Float32Array(vector.__array);
	} else if(this1 != null) {
		this2 = new Float32Array(this1);
	} else if(buffer != null) {
		if(len == null) {
			this2 = new Float32Array(buffer,0);
		} else {
			this2 = new Float32Array(buffer,0,len);
		}
	} else {
		this2 = null;
	}
	return lime_math_ColorMatrix._new(this2);
};
lime_math_ColorMatrix.concat = function(this1,second) {
	this1[0] += second[0];
	this1[6] += second[6];
	this1[12] += second[12];
	this1[18] += second[18];
};
lime_math_ColorMatrix.copyFrom = function(this1,other) {
	this1.set(other);
};
lime_math_ColorMatrix.identity = function(this1) {
	this1[0] = 1;
	this1[1] = 0;
	this1[2] = 0;
	this1[3] = 0;
	this1[4] = 0;
	this1[5] = 0;
	this1[6] = 1;
	this1[7] = 0;
	this1[8] = 0;
	this1[9] = 0;
	this1[10] = 0;
	this1[11] = 0;
	this1[12] = 1;
	this1[13] = 0;
	this1[14] = 0;
	this1[15] = 0;
	this1[16] = 0;
	this1[17] = 0;
	this1[18] = 1;
	this1[19] = 0;
};
lime_math_ColorMatrix.getAlphaTable = function(this1) {
	if(lime_math_ColorMatrix.__alphaTable == null) {
		var array = null;
		var vector = null;
		var view = null;
		var buffer = null;
		var len = null;
		var this2 = new Uint8Array(256);
		lime_math_ColorMatrix.__alphaTable = this2;
	}
	var value;
	lime_math_ColorMatrix.__alphaTable[0] = 0;
	var _g = 1;
	while(_g < 256) {
		var i = _g++;
		value = Math.floor(i * this1[18] + this1[19] * 255);
		if(value > 255) {
			value = 255;
		}
		if(value < 0) {
			value = 0;
		}
		lime_math_ColorMatrix.__alphaTable[i] = value;
	}
	return lime_math_ColorMatrix.__alphaTable;
};
lime_math_ColorMatrix.getBlueTable = function(this1) {
	if(lime_math_ColorMatrix.__blueTable == null) {
		var array = null;
		var vector = null;
		var view = null;
		var buffer = null;
		var len = null;
		var this2 = new Uint8Array(256);
		lime_math_ColorMatrix.__blueTable = this2;
	}
	var value;
	var _g = 0;
	while(_g < 256) {
		var i = _g++;
		value = Math.floor(i * this1[12] + this1[14] * 255);
		if(value > 255) {
			value = 255;
		}
		if(value < 0) {
			value = 0;
		}
		lime_math_ColorMatrix.__blueTable[i] = value;
	}
	return lime_math_ColorMatrix.__blueTable;
};
lime_math_ColorMatrix.getGreenTable = function(this1) {
	if(lime_math_ColorMatrix.__greenTable == null) {
		var array = null;
		var vector = null;
		var view = null;
		var buffer = null;
		var len = null;
		var this2 = new Uint8Array(256);
		lime_math_ColorMatrix.__greenTable = this2;
	}
	var value;
	var _g = 0;
	while(_g < 256) {
		var i = _g++;
		value = Math.floor(i * this1[6] + this1[9] * 255);
		if(value > 255) {
			value = 255;
		}
		if(value < 0) {
			value = 0;
		}
		lime_math_ColorMatrix.__greenTable[i] = value;
	}
	return lime_math_ColorMatrix.__greenTable;
};
lime_math_ColorMatrix.getRedTable = function(this1) {
	if(lime_math_ColorMatrix.__redTable == null) {
		var array = null;
		var vector = null;
		var view = null;
		var buffer = null;
		var len = null;
		var this2 = new Uint8Array(256);
		lime_math_ColorMatrix.__redTable = this2;
	}
	var value;
	var _g = 0;
	while(_g < 256) {
		var i = _g++;
		value = Math.floor(i * this1[0] + this1[4] * 255);
		if(value > 255) {
			value = 255;
		}
		if(value < 0) {
			value = 0;
		}
		lime_math_ColorMatrix.__redTable[i] = value;
	}
	return lime_math_ColorMatrix.__redTable;
};
lime_math_ColorMatrix.__toFlashColorTransform = function(this1) {
	return null;
};
lime_math_ColorMatrix.get_alphaMultiplier = function(this1) {
	return this1[18];
};
lime_math_ColorMatrix.set_alphaMultiplier = function(this1,value) {
	return this1[18] = value;
};
lime_math_ColorMatrix.get_alphaOffset = function(this1) {
	return this1[19] * 255;
};
lime_math_ColorMatrix.set_alphaOffset = function(this1,value) {
	return this1[19] = value / 255;
};
lime_math_ColorMatrix.get_blueMultiplier = function(this1) {
	return this1[12];
};
lime_math_ColorMatrix.set_blueMultiplier = function(this1,value) {
	return this1[12] = value;
};
lime_math_ColorMatrix.get_blueOffset = function(this1) {
	return this1[14] * 255;
};
lime_math_ColorMatrix.set_blueOffset = function(this1,value) {
	return this1[14] = value / 255;
};
lime_math_ColorMatrix.get_color = function(this1) {
	return (this1[4] * 255 | 0) << 16 | (this1[9] * 255 | 0) << 8 | (this1[14] * 255 | 0);
};
lime_math_ColorMatrix.set_color = function(this1,value) {
	this1[4] = (value >> 16 & 255) / 255;
	this1[9] = (value >> 8 & 255) / 255;
	this1[14] = (value & 255) / 255;
	this1[0] = 0;
	this1[6] = 0;
	this1[12] = 0;
	return lime_math_ColorMatrix.get_color(this1);
};
lime_math_ColorMatrix.get_greenMultiplier = function(this1) {
	return this1[6];
};
lime_math_ColorMatrix.set_greenMultiplier = function(this1,value) {
	return this1[6] = value;
};
lime_math_ColorMatrix.get_greenOffset = function(this1) {
	return this1[9] * 255;
};
lime_math_ColorMatrix.set_greenOffset = function(this1,value) {
	return this1[9] = value / 255;
};
lime_math_ColorMatrix.get_redMultiplier = function(this1) {
	return this1[0];
};
lime_math_ColorMatrix.set_redMultiplier = function(this1,value) {
	return this1[0] = value;
};
lime_math_ColorMatrix.get_redOffset = function(this1) {
	return this1[4] * 255;
};
lime_math_ColorMatrix.set_redOffset = function(this1,value) {
	return this1[4] = value / 255;
};
lime_math_ColorMatrix.get = function(this1,index) {
	return this1[index];
};
lime_math_ColorMatrix.set = function(this1,index,value) {
	return this1[index] = value;
};
var lime_math_Matrix3 = function(a,b,c,d,tx,ty) {
	if(ty == null) {
		ty = 0;
	}
	if(tx == null) {
		tx = 0;
	}
	if(d == null) {
		d = 1;
	}
	if(c == null) {
		c = 0;
	}
	if(b == null) {
		b = 0;
	}
	if(a == null) {
		a = 1;
	}
	this.a = a;
	this.b = b;
	this.c = c;
	this.d = d;
	this.tx = tx;
	this.ty = ty;
};
$hxClasses["lime.math.Matrix3"] = lime_math_Matrix3;
lime_math_Matrix3.__name__ = "lime.math.Matrix3";
lime_math_Matrix3.prototype = {
	a: null
	,b: null
	,c: null
	,d: null
	,tx: null
	,ty: null
	,clone: function() {
		return new lime_math_Matrix3(this.a,this.b,this.c,this.d,this.tx,this.ty);
	}
	,concat: function(m) {
		var a1 = this.a * m.a + this.b * m.c;
		this.b = this.a * m.b + this.b * m.d;
		this.a = a1;
		var c1 = this.c * m.a + this.d * m.c;
		this.d = this.c * m.b + this.d * m.d;
		this.c = c1;
		var tx1 = this.tx * m.a + this.ty * m.c + m.tx;
		this.ty = this.tx * m.b + this.ty * m.d + m.ty;
		this.tx = tx1;
	}
	,copyColumnFrom: function(column,vector4) {
		if(column > 2) {
			throw haxe_Exception.thrown("Column " + column + " out of bounds (2)");
		} else if(column == 0) {
			this.a = vector4.x;
			this.b = vector4.y;
		} else if(column == 1) {
			this.c = vector4.x;
			this.d = vector4.y;
		} else {
			this.tx = vector4.x;
			this.ty = vector4.y;
		}
	}
	,copyColumnTo: function(column,vector4) {
		if(column > 2) {
			throw haxe_Exception.thrown("Column " + column + " out of bounds (2)");
		} else if(column == 0) {
			vector4.x = this.a;
			vector4.y = this.b;
			vector4.z = 0;
		} else if(column == 1) {
			vector4.x = this.c;
			vector4.y = this.d;
			vector4.z = 0;
		} else {
			vector4.x = this.tx;
			vector4.y = this.ty;
			vector4.z = 1;
		}
	}
	,copyFrom: function(sourceMatrix3) {
		this.a = sourceMatrix3.a;
		this.b = sourceMatrix3.b;
		this.c = sourceMatrix3.c;
		this.d = sourceMatrix3.d;
		this.tx = sourceMatrix3.tx;
		this.ty = sourceMatrix3.ty;
	}
	,copyRowFrom: function(row,vector4) {
		if(row > 2) {
			throw haxe_Exception.thrown("Row " + row + " out of bounds (2)");
		} else if(row == 0) {
			this.a = vector4.x;
			this.c = vector4.y;
			this.tx = vector4.z;
		} else if(row == 1) {
			this.b = vector4.x;
			this.d = vector4.y;
			this.ty = vector4.z;
		}
	}
	,copyRowTo: function(row,vector4) {
		if(row > 2) {
			throw haxe_Exception.thrown("Row " + row + " out of bounds (2)");
		} else if(row == 0) {
			vector4.x = this.a;
			vector4.y = this.c;
			vector4.z = this.tx;
		} else if(row == 1) {
			vector4.x = this.b;
			vector4.y = this.d;
			vector4.z = this.ty;
		} else {
			vector4.x = 0;
			vector4.y = 0;
			vector4.z = 1;
		}
	}
	,createBox: function(scaleX,scaleY,rotation,tx,ty) {
		if(ty == null) {
			ty = 0;
		}
		if(tx == null) {
			tx = 0;
		}
		if(rotation == null) {
			rotation = 0;
		}
		if(rotation != 0) {
			var cos = Math.cos(rotation);
			var sin = Math.sin(rotation);
			this.a = cos * scaleX;
			this.b = sin * scaleY;
			this.c = -sin * scaleX;
			this.d = cos * scaleY;
		} else {
			this.a = scaleX;
			this.b = 0;
			this.c = 0;
			this.d = scaleY;
		}
		this.tx = tx;
		this.ty = ty;
	}
	,createGradientBox: function(width,height,rotation,tx,ty) {
		if(ty == null) {
			ty = 0;
		}
		if(tx == null) {
			tx = 0;
		}
		if(rotation == null) {
			rotation = 0;
		}
		this.a = width / 1638.4;
		this.d = height / 1638.4;
		if(rotation != 0) {
			var cos = Math.cos(rotation);
			var sin = Math.sin(rotation);
			this.b = sin * this.d;
			this.c = -sin * this.a;
			this.a *= cos;
			this.d *= cos;
		} else {
			this.b = 0;
			this.c = 0;
		}
		this.tx = tx + width / 2;
		this.ty = ty + height / 2;
	}
	,equals: function(matrix3) {
		if(matrix3 != null && this.tx == matrix3.tx && this.ty == matrix3.ty && this.a == matrix3.a && this.b == matrix3.b && this.c == matrix3.c) {
			return this.d == matrix3.d;
		} else {
			return false;
		}
	}
	,deltaTransformVector: function(Vector2,result) {
		if(result == null) {
			result = new lime_math_Vector2();
		}
		result.x = Vector2.x * this.a + Vector2.y * this.c;
		result.y = Vector2.x * this.b + Vector2.y * this.d;
		return result;
	}
	,identity: function() {
		this.a = 1;
		this.b = 0;
		this.c = 0;
		this.d = 1;
		this.tx = 0;
		this.ty = 0;
	}
	,invert: function() {
		var norm = this.a * this.d - this.b * this.c;
		if(norm == 0) {
			this.a = this.b = this.c = this.d = 0;
			this.tx = -this.tx;
			this.ty = -this.ty;
		} else {
			norm = 1.0 / norm;
			var a1 = this.d * norm;
			this.d = this.a * norm;
			this.a = a1;
			this.b *= -norm;
			this.c *= -norm;
			var tx1 = -this.a * this.tx - this.c * this.ty;
			this.ty = -this.b * this.tx - this.d * this.ty;
			this.tx = tx1;
		}
		return this;
	}
	,rotate: function(theta) {
		var cos = Math.cos(theta);
		var sin = Math.sin(theta);
		var a1 = this.a * cos - this.b * sin;
		this.b = this.a * sin + this.b * cos;
		this.a = a1;
		var c1 = this.c * cos - this.d * sin;
		this.d = this.c * sin + this.d * cos;
		this.c = c1;
		var tx1 = this.tx * cos - this.ty * sin;
		this.ty = this.tx * sin + this.ty * cos;
		this.tx = tx1;
	}
	,scale: function(sx,sy) {
		this.a *= sx;
		this.b *= sy;
		this.c *= sx;
		this.d *= sy;
		this.tx *= sx;
		this.ty *= sy;
	}
	,setRotation: function(theta,scale) {
		if(scale == null) {
			scale = 1;
		}
		this.a = Math.cos(theta) * scale;
		this.c = Math.sin(theta) * scale;
		this.b = -this.c;
		this.d = this.a;
	}
	,setTo: function(a,b,c,d,tx,ty) {
		this.a = a;
		this.b = b;
		this.c = c;
		this.d = d;
		this.tx = tx;
		this.ty = ty;
	}
	,to3DString: function(roundPixels) {
		if(roundPixels == null) {
			roundPixels = false;
		}
		if(roundPixels) {
			return "matrix3d(" + this.a + ", " + this.b + ", " + "0, 0, " + this.c + ", " + this.d + ", " + "0, 0, 0, 0, 1, 0, " + (this.tx | 0) + ", " + (this.ty | 0) + ", 0, 1)";
		} else {
			return "matrix3d(" + this.a + ", " + this.b + ", " + "0, 0, " + this.c + ", " + this.d + ", " + "0, 0, 0, 0, 1, 0, " + this.tx + ", " + this.ty + ", 0, 1)";
		}
	}
	,toString: function() {
		return "matrix(" + this.a + ", " + this.b + ", " + this.c + ", " + this.d + ", " + this.tx + ", " + this.ty + ")";
	}
	,transformRect: function(rect,result) {
		if(result == null) {
			result = new lime_math_Rectangle();
		}
		var tx0 = this.a * rect.x + this.c * rect.y;
		var tx1 = tx0;
		var ty0 = this.b * rect.x + this.d * rect.y;
		var ty1 = ty0;
		var tx = this.a * (rect.x + rect.width) + this.c * rect.y;
		var ty = this.b * (rect.x + rect.width) + this.d * rect.y;
		if(tx < tx0) {
			tx0 = tx;
		}
		if(ty < ty0) {
			ty0 = ty;
		}
		if(tx > tx1) {
			tx1 = tx;
		}
		if(ty > ty1) {
			ty1 = ty;
		}
		tx = this.a * (rect.x + rect.width) + this.c * (rect.y + rect.height);
		ty = this.b * (rect.x + rect.width) + this.d * (rect.y + rect.height);
		if(tx < tx0) {
			tx0 = tx;
		}
		if(ty < ty0) {
			ty0 = ty;
		}
		if(tx > tx1) {
			tx1 = tx;
		}
		if(ty > ty1) {
			ty1 = ty;
		}
		tx = this.a * rect.x + this.c * (rect.y + rect.height);
		ty = this.b * rect.x + this.d * (rect.y + rect.height);
		if(tx < tx0) {
			tx0 = tx;
		}
		if(ty < ty0) {
			ty0 = ty;
		}
		if(tx > tx1) {
			tx1 = tx;
		}
		if(ty > ty1) {
			ty1 = ty;
		}
		result.setTo(tx0 + tx,ty0 + ty,tx1 - tx0,ty1 - ty0);
		return result;
	}
	,transformVector: function(pos,result) {
		if(result == null) {
			result = new lime_math_Vector2();
		}
		result.x = pos.x * this.a + pos.y * this.c + this.tx;
		result.y = pos.x * this.b + pos.y * this.d + this.ty;
		return result;
	}
	,translate: function(dx,dy) {
		this.tx += dx;
		this.ty += dy;
	}
	,__class__: lime_math_Matrix3
};
var lime_math_Matrix4 = {};
lime_math_Matrix4.__properties__ = {set_position:"set_position",get_position:"get_position",get_determinant:"get_determinant"};
lime_math_Matrix4._new = function(data) {
	var this1;
	if(data != null && data.length == 16) {
		this1 = data;
	} else {
		var elements = null;
		var array = lime_math_Matrix4.__identity;
		var vector = null;
		var view = null;
		var buffer = null;
		var len = null;
		var this2;
		if(elements != null) {
			this2 = new Float32Array(elements);
		} else if(array != null) {
			this2 = new Float32Array(array);
		} else if(vector != null) {
			this2 = new Float32Array(vector.__array);
		} else if(view != null) {
			this2 = new Float32Array(view);
		} else if(buffer != null) {
			if(len == null) {
				this2 = new Float32Array(buffer,0);
			} else {
				this2 = new Float32Array(buffer,0,len);
			}
		} else {
			this2 = null;
		}
		this1 = this2;
	}
	return this1;
};
lime_math_Matrix4.append = function(this1,lhs) {
	var m111 = this1[0];
	var m121 = this1[4];
	var m131 = this1[8];
	var m141 = this1[12];
	var m112 = this1[1];
	var m122 = this1[5];
	var m132 = this1[9];
	var m142 = this1[13];
	var m113 = this1[2];
	var m123 = this1[6];
	var m133 = this1[10];
	var m143 = this1[14];
	var m114 = this1[3];
	var m124 = this1[7];
	var m134 = this1[11];
	var m144 = this1[15];
	var m211 = lime_math_Matrix4.get(lhs,0);
	var m221 = lime_math_Matrix4.get(lhs,4);
	var m231 = lime_math_Matrix4.get(lhs,8);
	var m241 = lime_math_Matrix4.get(lhs,12);
	var m212 = lime_math_Matrix4.get(lhs,1);
	var m222 = lime_math_Matrix4.get(lhs,5);
	var m232 = lime_math_Matrix4.get(lhs,9);
	var m242 = lime_math_Matrix4.get(lhs,13);
	var m213 = lime_math_Matrix4.get(lhs,2);
	var m223 = lime_math_Matrix4.get(lhs,6);
	var m233 = lime_math_Matrix4.get(lhs,10);
	var m243 = lime_math_Matrix4.get(lhs,14);
	var m214 = lime_math_Matrix4.get(lhs,3);
	var m224 = lime_math_Matrix4.get(lhs,7);
	var m234 = lime_math_Matrix4.get(lhs,11);
	var m244 = lime_math_Matrix4.get(lhs,15);
	this1[0] = m111 * m211 + m112 * m221 + m113 * m231 + m114 * m241;
	this1[1] = m111 * m212 + m112 * m222 + m113 * m232 + m114 * m242;
	this1[2] = m111 * m213 + m112 * m223 + m113 * m233 + m114 * m243;
	this1[3] = m111 * m214 + m112 * m224 + m113 * m234 + m114 * m244;
	this1[4] = m121 * m211 + m122 * m221 + m123 * m231 + m124 * m241;
	this1[5] = m121 * m212 + m122 * m222 + m123 * m232 + m124 * m242;
	this1[6] = m121 * m213 + m122 * m223 + m123 * m233 + m124 * m243;
	this1[7] = m121 * m214 + m122 * m224 + m123 * m234 + m124 * m244;
	this1[8] = m131 * m211 + m132 * m221 + m133 * m231 + m134 * m241;
	this1[9] = m131 * m212 + m132 * m222 + m133 * m232 + m134 * m242;
	this1[10] = m131 * m213 + m132 * m223 + m133 * m233 + m134 * m243;
	this1[11] = m131 * m214 + m132 * m224 + m133 * m234 + m134 * m244;
	this1[12] = m141 * m211 + m142 * m221 + m143 * m231 + m144 * m241;
	this1[13] = m141 * m212 + m142 * m222 + m143 * m232 + m144 * m242;
	this1[14] = m141 * m213 + m142 * m223 + m143 * m233 + m144 * m243;
	this1[15] = m141 * m214 + m142 * m224 + m143 * m234 + m144 * m244;
};
lime_math_Matrix4.appendRotation = function(this1,degrees,axis,pivotPoint) {
	var m = lime_math_Matrix4.__getAxisRotation(this1,axis.x,axis.y,axis.z,degrees);
	if(pivotPoint != null) {
		var p = pivotPoint;
		lime_math_Matrix4.appendTranslation(m,p.x,p.y,p.z);
	}
	lime_math_Matrix4.append(this1,m);
};
lime_math_Matrix4.appendScale = function(this1,xScale,yScale,zScale) {
	var elements = null;
	var array = [xScale,0.0,0.0,0.0,0.0,yScale,0.0,0.0,0.0,0.0,zScale,0.0,0.0,0.0,0.0,1.0];
	var vector = null;
	var view = null;
	var buffer = null;
	var len = null;
	var this2;
	if(elements != null) {
		this2 = new Float32Array(elements);
	} else if(array != null) {
		this2 = new Float32Array(array);
	} else if(vector != null) {
		this2 = new Float32Array(vector.__array);
	} else if(view != null) {
		this2 = new Float32Array(view);
	} else if(buffer != null) {
		if(len == null) {
			this2 = new Float32Array(buffer,0);
		} else {
			this2 = new Float32Array(buffer,0,len);
		}
	} else {
		this2 = null;
	}
	lime_math_Matrix4.append(this1,lime_math_Matrix4._new(this2));
};
lime_math_Matrix4.appendTranslation = function(this1,x,y,z) {
	this1[12] += x;
	this1[13] += y;
	this1[14] += z;
};
lime_math_Matrix4.clone = function(this1) {
	var elements = null;
	var array = null;
	var vector = null;
	var buffer = null;
	var len = null;
	var this2;
	if(elements != null) {
		this2 = new Float32Array(elements);
	} else if(array != null) {
		this2 = new Float32Array(array);
	} else if(vector != null) {
		this2 = new Float32Array(vector.__array);
	} else if(this1 != null) {
		this2 = new Float32Array(this1);
	} else if(buffer != null) {
		if(len == null) {
			this2 = new Float32Array(buffer,0);
		} else {
			this2 = new Float32Array(buffer,0,len);
		}
	} else {
		this2 = null;
	}
	return lime_math_Matrix4._new(this2);
};
lime_math_Matrix4.copyColumnFrom = function(this1,column,vector) {
	switch(column) {
	case 0:
		this1[0] = vector.x;
		this1[1] = vector.y;
		this1[2] = vector.z;
		this1[3] = vector.w;
		break;
	case 1:
		this1[4] = vector.x;
		this1[5] = vector.y;
		this1[6] = vector.z;
		this1[7] = vector.w;
		break;
	case 2:
		this1[8] = vector.x;
		this1[9] = vector.y;
		this1[10] = vector.z;
		this1[11] = vector.w;
		break;
	case 3:
		this1[12] = vector.x;
		this1[13] = vector.y;
		this1[14] = vector.z;
		this1[15] = vector.w;
		break;
	default:
		lime_utils_Log.error("Column " + column + " out of bounds [0, ..., 3]",{ fileName : "lime/math/Matrix4.hx", lineNumber : 187, className : "lime.math._Matrix4.Matrix4_Impl_", methodName : "copyColumnFrom"});
	}
};
lime_math_Matrix4.copyColumnTo = function(this1,column,vector) {
	switch(column) {
	case 0:
		vector.x = this1[0];
		vector.y = this1[1];
		vector.z = this1[2];
		vector.w = this1[3];
		break;
	case 1:
		vector.x = this1[4];
		vector.y = this1[5];
		vector.z = this1[6];
		vector.w = this1[7];
		break;
	case 2:
		vector.x = this1[8];
		vector.y = this1[9];
		vector.z = this1[10];
		vector.w = this1[11];
		break;
	case 3:
		vector.x = this1[12];
		vector.y = this1[13];
		vector.z = this1[14];
		vector.w = this1[15];
		break;
	default:
		lime_utils_Log.error("Column " + column + " out of bounds [0, ..., 3]",{ fileName : "lime/math/Matrix4.hx", lineNumber : 225, className : "lime.math._Matrix4.Matrix4_Impl_", methodName : "copyColumnTo"});
	}
};
lime_math_Matrix4.copyFrom = function(this1,other) {
	this1.set(other);
};
lime_math_Matrix4.copyRowFrom = function(this1,row,vector) {
	switch(row) {
	case 0:
		this1[0] = vector.x;
		this1[4] = vector.y;
		this1[8] = vector.z;
		this1[12] = vector.w;
		break;
	case 1:
		this1[1] = vector.x;
		this1[5] = vector.y;
		this1[9] = vector.z;
		this1[13] = vector.w;
		break;
	case 2:
		this1[2] = vector.x;
		this1[6] = vector.y;
		this1[10] = vector.z;
		this1[14] = vector.w;
		break;
	case 3:
		this1[3] = vector.x;
		this1[7] = vector.y;
		this1[11] = vector.z;
		this1[15] = vector.w;
		break;
	default:
		lime_utils_Log.error("Row " + row + " out of bounds [0, ..., 3]",{ fileName : "lime/math/Matrix4.hx", lineNumber : 272, className : "lime.math._Matrix4.Matrix4_Impl_", methodName : "copyRowFrom"});
	}
};
lime_math_Matrix4.copyRowTo = function(this1,row,vector) {
	switch(row) {
	case 0:
		vector.x = this1[0];
		vector.y = this1[4];
		vector.z = this1[8];
		vector.w = this1[12];
		break;
	case 1:
		vector.x = this1[1];
		vector.y = this1[5];
		vector.z = this1[9];
		vector.w = this1[13];
		break;
	case 2:
		vector.x = this1[2];
		vector.y = this1[6];
		vector.z = this1[10];
		vector.w = this1[14];
		break;
	case 3:
		vector.x = this1[3];
		vector.y = this1[7];
		vector.z = this1[11];
		vector.w = this1[15];
		break;
	default:
		lime_utils_Log.error("Row " + row + " out of bounds [0, ..., 3]",{ fileName : "lime/math/Matrix4.hx", lineNumber : 310, className : "lime.math._Matrix4.Matrix4_Impl_", methodName : "copyRowTo"});
	}
};
lime_math_Matrix4.create2D = function(this1,a,b,c,d,tx,ty) {
	if(ty == null) {
		ty = 0;
	}
	if(tx == null) {
		tx = 0;
	}
	this1[0] = a;
	this1[1] = b;
	this1[2] = 0;
	this1[3] = 0;
	this1[4] = c;
	this1[5] = d;
	this1[6] = 0;
	this1[7] = 0;
	this1[8] = 0;
	this1[9] = 0;
	this1[10] = 1;
	this1[11] = 0;
	this1[12] = tx;
	this1[13] = ty;
	this1[14] = 0;
	this1[15] = 1;
};
lime_math_Matrix4.createOrtho = function(this1,left,right,bottom,top,zNear,zFar) {
	var sx = 1.0 / (right - left);
	var sy = 1.0 / (top - bottom);
	var sz = 1.0 / (zFar - zNear);
	this1[0] = 2 * sx;
	this1[1] = 0;
	this1[2] = 0;
	this1[3] = 0;
	this1[4] = 0;
	this1[5] = 2 * sy;
	this1[6] = 0;
	this1[7] = 0;
	this1[8] = 0;
	this1[9] = 0;
	this1[10] = -2 * sz;
	this1[11] = 0;
	this1[12] = -(left + right) * sx;
	this1[13] = -(bottom + top) * sy;
	this1[14] = -(zNear + zFar) * sz;
	this1[15] = 1;
};
lime_math_Matrix4.deltaTransformVector = function(this1,v,result) {
	if(result == null) {
		result = new lime_math_Vector4();
	}
	var x = v.x;
	var y = v.y;
	var z = v.z;
	result.x = x * this1[0] + y * this1[4] + z * this1[8] + this1[3];
	result.y = x * this1[1] + y * this1[5] + z * this1[9] + this1[7];
	result.z = x * this1[2] + y * this1[6] + z * this1[10] + this1[11];
	return result;
};
lime_math_Matrix4.fromMatrix3 = function(matrix3) {
	var mat = lime_math_Matrix4._new();
	lime_math_Matrix4.create2D(mat,matrix3.a,matrix3.b,matrix3.c,matrix3.d,matrix3.tx,matrix3.ty);
	return mat;
};
lime_math_Matrix4.identity = function(this1) {
	this1[0] = 1;
	this1[1] = 0;
	this1[2] = 0;
	this1[3] = 0;
	this1[4] = 0;
	this1[5] = 1;
	this1[6] = 0;
	this1[7] = 0;
	this1[8] = 0;
	this1[9] = 0;
	this1[10] = 1;
	this1[11] = 0;
	this1[12] = 0;
	this1[13] = 0;
	this1[14] = 0;
	this1[15] = 1;
};
lime_math_Matrix4.interpolate = function(thisMat,toMat,percent,result) {
	if(result == null) {
		result = lime_math_Matrix4._new();
	}
	var _g = 0;
	while(_g < 16) {
		var i = _g++;
		lime_math_Matrix4.set(result,i,lime_math_Matrix4.get(thisMat,i) + (lime_math_Matrix4.get(toMat,i) - lime_math_Matrix4.get(thisMat,i)) * percent);
	}
	return result;
};
lime_math_Matrix4.interpolateTo = function(this1,toMat,percent) {
	var _g = 0;
	while(_g < 16) {
		var i = _g++;
		this1[i] += (lime_math_Matrix4.get(toMat,i) - this1[i]) * percent;
	}
};
lime_math_Matrix4.invert = function(this1) {
	var d = lime_math_Matrix4.get_determinant(this1);
	var invertable = Math.abs(d) > 0.00000000001;
	if(invertable) {
		d = 1 / d;
		var m11 = this1[0];
		var m21 = this1[4];
		var m31 = this1[8];
		var m41 = this1[12];
		var m12 = this1[1];
		var m22 = this1[5];
		var m32 = this1[9];
		var m42 = this1[13];
		var m13 = this1[2];
		var m23 = this1[6];
		var m33 = this1[10];
		var m43 = this1[14];
		var m14 = this1[3];
		var m24 = this1[7];
		var m34 = this1[11];
		var m44 = this1[15];
		this1[0] = d * (m22 * (m33 * m44 - m43 * m34) - m32 * (m23 * m44 - m43 * m24) + m42 * (m23 * m34 - m33 * m24));
		this1[1] = -d * (m12 * (m33 * m44 - m43 * m34) - m32 * (m13 * m44 - m43 * m14) + m42 * (m13 * m34 - m33 * m14));
		this1[2] = d * (m12 * (m23 * m44 - m43 * m24) - m22 * (m13 * m44 - m43 * m14) + m42 * (m13 * m24 - m23 * m14));
		this1[3] = -d * (m12 * (m23 * m34 - m33 * m24) - m22 * (m13 * m34 - m33 * m14) + m32 * (m13 * m24 - m23 * m14));
		this1[4] = -d * (m21 * (m33 * m44 - m43 * m34) - m31 * (m23 * m44 - m43 * m24) + m41 * (m23 * m34 - m33 * m24));
		this1[5] = d * (m11 * (m33 * m44 - m43 * m34) - m31 * (m13 * m44 - m43 * m14) + m41 * (m13 * m34 - m33 * m14));
		this1[6] = -d * (m11 * (m23 * m44 - m43 * m24) - m21 * (m13 * m44 - m43 * m14) + m41 * (m13 * m24 - m23 * m14));
		this1[7] = d * (m11 * (m23 * m34 - m33 * m24) - m21 * (m13 * m34 - m33 * m14) + m31 * (m13 * m24 - m23 * m14));
		this1[8] = d * (m21 * (m32 * m44 - m42 * m34) - m31 * (m22 * m44 - m42 * m24) + m41 * (m22 * m34 - m32 * m24));
		this1[9] = -d * (m11 * (m32 * m44 - m42 * m34) - m31 * (m12 * m44 - m42 * m14) + m41 * (m12 * m34 - m32 * m14));
		this1[10] = d * (m11 * (m22 * m44 - m42 * m24) - m21 * (m12 * m44 - m42 * m14) + m41 * (m12 * m24 - m22 * m14));
		this1[11] = -d * (m11 * (m22 * m34 - m32 * m24) - m21 * (m12 * m34 - m32 * m14) + m31 * (m12 * m24 - m22 * m14));
		this1[12] = -d * (m21 * (m32 * m43 - m42 * m33) - m31 * (m22 * m43 - m42 * m23) + m41 * (m22 * m33 - m32 * m23));
		this1[13] = d * (m11 * (m32 * m43 - m42 * m33) - m31 * (m12 * m43 - m42 * m13) + m41 * (m12 * m33 - m32 * m13));
		this1[14] = -d * (m11 * (m22 * m43 - m42 * m23) - m21 * (m12 * m43 - m42 * m13) + m41 * (m12 * m23 - m22 * m13));
		this1[15] = d * (m11 * (m22 * m33 - m32 * m23) - m21 * (m12 * m33 - m32 * m13) + m31 * (m12 * m23 - m22 * m13));
	}
	return invertable;
};
lime_math_Matrix4.pointAt = function(this1,pos,at,up) {
	if(at == null) {
		at = new lime_math_Vector4(0,0,1);
	}
	if(up == null) {
		up = new lime_math_Vector4(0,1,0);
	}
	var result = null;
	if(result == null) {
		result = new lime_math_Vector4();
	}
	result.x = pos.x - at.x;
	result.y = pos.y - at.y;
	result.z = pos.z - at.z;
	var dir = result;
	var vup = new lime_math_Vector4(up.x,up.y,up.z,up.w);
	var l = Math.sqrt(dir.x * dir.x + dir.y * dir.y + dir.z * dir.z);
	if(l != 0) {
		dir.x /= l;
		dir.y /= l;
		dir.z /= l;
	}
	var l = Math.sqrt(vup.x * vup.x + vup.y * vup.y + vup.z * vup.z);
	if(l != 0) {
		vup.x /= l;
		vup.y /= l;
		vup.z /= l;
	}
	var dir2 = new lime_math_Vector4(dir.x,dir.y,dir.z,dir.w);
	var s = vup.x * dir.x + vup.y * dir.y + vup.z * dir.z;
	dir2.x *= s;
	dir2.y *= s;
	dir2.z *= s;
	var result = null;
	if(result == null) {
		result = new lime_math_Vector4();
	}
	result.x = vup.x - dir2.x;
	result.y = vup.y - dir2.y;
	result.z = vup.z - dir2.z;
	vup = result;
	if(Math.sqrt(vup.x * vup.x + vup.y * vup.y + vup.z * vup.z) > 0) {
		var l = Math.sqrt(vup.x * vup.x + vup.y * vup.y + vup.z * vup.z);
		if(l != 0) {
			vup.x /= l;
			vup.y /= l;
			vup.z /= l;
		}
	} else if(dir.x != 0) {
		vup = new lime_math_Vector4(-dir.y,dir.x,0);
	} else {
		vup = new lime_math_Vector4(1,0,0);
	}
	var result = null;
	if(result == null) {
		result = new lime_math_Vector4();
	}
	var ya = vup.z * dir.x - vup.x * dir.z;
	var za = vup.x * dir.y - vup.y * dir.x;
	result.x = vup.y * dir.z - vup.z * dir.y;
	result.y = ya;
	result.z = za;
	result.w = 1;
	var right = result;
	var l = Math.sqrt(right.x * right.x + right.y * right.y + right.z * right.z);
	if(l != 0) {
		right.x /= l;
		right.y /= l;
		right.z /= l;
	}
	this1[0] = right.x;
	this1[4] = right.y;
	this1[8] = right.z;
	this1[12] = 0.0;
	this1[1] = vup.x;
	this1[5] = vup.y;
	this1[9] = vup.z;
	this1[13] = 0.0;
	this1[2] = dir.x;
	this1[6] = dir.y;
	this1[10] = dir.z;
	this1[14] = 0.0;
	this1[3] = pos.x;
	this1[7] = pos.y;
	this1[11] = pos.z;
	this1[15] = 1.0;
};
lime_math_Matrix4.prepend = function(this1,rhs) {
	var m111 = lime_math_Matrix4.get(rhs,0);
	var m121 = lime_math_Matrix4.get(rhs,4);
	var m131 = lime_math_Matrix4.get(rhs,8);
	var m141 = lime_math_Matrix4.get(rhs,12);
	var m112 = lime_math_Matrix4.get(rhs,1);
	var m122 = lime_math_Matrix4.get(rhs,5);
	var m132 = lime_math_Matrix4.get(rhs,9);
	var m142 = lime_math_Matrix4.get(rhs,13);
	var m113 = lime_math_Matrix4.get(rhs,2);
	var m123 = lime_math_Matrix4.get(rhs,6);
	var m133 = lime_math_Matrix4.get(rhs,10);
	var m143 = lime_math_Matrix4.get(rhs,14);
	var m114 = lime_math_Matrix4.get(rhs,3);
	var m124 = lime_math_Matrix4.get(rhs,7);
	var m134 = lime_math_Matrix4.get(rhs,11);
	var m144 = lime_math_Matrix4.get(rhs,15);
	var m211 = this1[0];
	var m221 = this1[4];
	var m231 = this1[8];
	var m241 = this1[12];
	var m212 = this1[1];
	var m222 = this1[5];
	var m232 = this1[9];
	var m242 = this1[13];
	var m213 = this1[2];
	var m223 = this1[6];
	var m233 = this1[10];
	var m243 = this1[14];
	var m214 = this1[3];
	var m224 = this1[7];
	var m234 = this1[11];
	var m244 = this1[15];
	this1[0] = m111 * m211 + m112 * m221 + m113 * m231 + m114 * m241;
	this1[1] = m111 * m212 + m112 * m222 + m113 * m232 + m114 * m242;
	this1[2] = m111 * m213 + m112 * m223 + m113 * m233 + m114 * m243;
	this1[3] = m111 * m214 + m112 * m224 + m113 * m234 + m114 * m244;
	this1[4] = m121 * m211 + m122 * m221 + m123 * m231 + m124 * m241;
	this1[5] = m121 * m212 + m122 * m222 + m123 * m232 + m124 * m242;
	this1[6] = m121 * m213 + m122 * m223 + m123 * m233 + m124 * m243;
	this1[7] = m121 * m214 + m122 * m224 + m123 * m234 + m124 * m244;
	this1[8] = m131 * m211 + m132 * m221 + m133 * m231 + m134 * m241;
	this1[9] = m131 * m212 + m132 * m222 + m133 * m232 + m134 * m242;
	this1[10] = m131 * m213 + m132 * m223 + m133 * m233 + m134 * m243;
	this1[11] = m131 * m214 + m132 * m224 + m133 * m234 + m134 * m244;
	this1[12] = m141 * m211 + m142 * m221 + m143 * m231 + m144 * m241;
	this1[13] = m141 * m212 + m142 * m222 + m143 * m232 + m144 * m242;
	this1[14] = m141 * m213 + m142 * m223 + m143 * m233 + m144 * m243;
	this1[15] = m141 * m214 + m142 * m224 + m143 * m234 + m144 * m244;
};
lime_math_Matrix4.prependRotation = function(this1,degrees,axis,pivotPoint) {
	var m = lime_math_Matrix4.__getAxisRotation(this1,axis.x,axis.y,axis.z,degrees);
	if(pivotPoint != null) {
		var p = pivotPoint;
		lime_math_Matrix4.appendTranslation(m,p.x,p.y,p.z);
	}
	lime_math_Matrix4.prepend(this1,m);
};
lime_math_Matrix4.prependScale = function(this1,xScale,yScale,zScale) {
	var elements = null;
	var array = [xScale,0.0,0.0,0.0,0.0,yScale,0.0,0.0,0.0,0.0,zScale,0.0,0.0,0.0,0.0,1.0];
	var vector = null;
	var view = null;
	var buffer = null;
	var len = null;
	var this2;
	if(elements != null) {
		this2 = new Float32Array(elements);
	} else if(array != null) {
		this2 = new Float32Array(array);
	} else if(vector != null) {
		this2 = new Float32Array(vector.__array);
	} else if(view != null) {
		this2 = new Float32Array(view);
	} else if(buffer != null) {
		if(len == null) {
			this2 = new Float32Array(buffer,0);
		} else {
			this2 = new Float32Array(buffer,0,len);
		}
	} else {
		this2 = null;
	}
	lime_math_Matrix4.prepend(this1,lime_math_Matrix4._new(this2));
};
lime_math_Matrix4.prependTranslation = function(this1,x,y,z) {
	var m = lime_math_Matrix4._new();
	lime_math_Matrix4.set_position(m,new lime_math_Vector4(x,y,z));
	lime_math_Matrix4.prepend(this1,m);
};
lime_math_Matrix4.transformVector = function(this1,v,result) {
	if(result == null) {
		result = new lime_math_Vector4();
	}
	var x = v.x;
	var y = v.y;
	var z = v.z;
	result.x = x * this1[0] + y * this1[4] + z * this1[8] + this1[12];
	result.y = x * this1[1] + y * this1[5] + z * this1[9] + this1[13];
	result.z = x * this1[2] + y * this1[6] + z * this1[10] + this1[14];
	result.w = x * this1[3] + y * this1[7] + z * this1[11] + this1[15];
	return result;
};
lime_math_Matrix4.transformVectors = function(this1,ain,aout) {
	var i = 0;
	var x;
	var y;
	var z;
	while(i + 3 <= ain.length) {
		x = ain[i];
		y = ain[i + 1];
		z = ain[i + 2];
		aout[i] = x * this1[0] + y * this1[4] + z * this1[8] + this1[12];
		aout[i + 1] = x * this1[1] + y * this1[5] + z * this1[9] + this1[13];
		aout[i + 2] = x * this1[2] + y * this1[6] + z * this1[10] + this1[14];
		i += 3;
	}
};
lime_math_Matrix4.transpose = function(this1) {
	var temp = this1[1];
	this1[1] = this1[4];
	this1[4] = temp;
	var temp = this1[2];
	this1[2] = this1[8];
	this1[8] = temp;
	var temp = this1[3];
	this1[3] = this1[12];
	this1[12] = temp;
	var temp = this1[6];
	this1[6] = this1[9];
	this1[9] = temp;
	var temp = this1[7];
	this1[7] = this1[13];
	this1[13] = temp;
	var temp = this1[11];
	this1[11] = this1[14];
	this1[14] = temp;
};
lime_math_Matrix4.__getAxisRotation = function(this1,x,y,z,degrees) {
	var m = lime_math_Matrix4._new();
	var a1 = new lime_math_Vector4(x,y,z);
	var rad = -degrees * (Math.PI / 180);
	var c = Math.cos(rad);
	var s = Math.sin(rad);
	var t = 1.0 - c;
	lime_math_Matrix4.set(m,0,c + a1.x * a1.x * t);
	lime_math_Matrix4.set(m,5,c + a1.y * a1.y * t);
	lime_math_Matrix4.set(m,10,c + a1.z * a1.z * t);
	var tmp1 = a1.x * a1.y * t;
	var tmp2 = a1.z * s;
	lime_math_Matrix4.set(m,4,tmp1 + tmp2);
	lime_math_Matrix4.set(m,1,tmp1 - tmp2);
	tmp1 = a1.x * a1.z * t;
	tmp2 = a1.y * s;
	lime_math_Matrix4.set(m,8,tmp1 - tmp2);
	lime_math_Matrix4.set(m,2,tmp1 + tmp2);
	tmp1 = a1.y * a1.z * t;
	tmp2 = a1.x * s;
	lime_math_Matrix4.set(m,9,tmp1 + tmp2);
	lime_math_Matrix4.set(m,6,tmp1 - tmp2);
	return m;
};
lime_math_Matrix4.__swap = function(this1,a,b) {
	var temp = this1[a];
	this1[a] = this1[b];
	this1[b] = temp;
};
lime_math_Matrix4.get_determinant = function(this1) {
	return (this1[0] * this1[5] - this1[4] * this1[1]) * (this1[10] * this1[15] - this1[14] * this1[11]) - (this1[0] * this1[9] - this1[8] * this1[1]) * (this1[6] * this1[15] - this1[14] * this1[7]) + (this1[0] * this1[13] - this1[12] * this1[1]) * (this1[6] * this1[11] - this1[10] * this1[7]) + (this1[4] * this1[9] - this1[8] * this1[5]) * (this1[2] * this1[15] - this1[14] * this1[3]) - (this1[4] * this1[13] - this1[12] * this1[5]) * (this1[2] * this1[11] - this1[10] * this1[3]) + (this1[8] * this1[13] - this1[12] * this1[9]) * (this1[2] * this1[7] - this1[6] * this1[3]);
};
lime_math_Matrix4.get_position = function(this1) {
	return new lime_math_Vector4(this1[12],this1[13],this1[14]);
};
lime_math_Matrix4.set_position = function(this1,val) {
	this1[12] = val.x;
	this1[13] = val.y;
	this1[14] = val.z;
	return val;
};
lime_math_Matrix4.get = function(this1,index) {
	return this1[index];
};
lime_math_Matrix4.set = function(this1,index,value) {
	this1[index] = value;
	return value;
};
var lime_math_RGBA = {};
lime_math_RGBA.__properties__ = {set_r:"set_r",get_r:"get_r",set_g:"set_g",get_g:"get_g",set_b:"set_b",get_b:"get_b",set_a:"set_a",get_a:"get_a"};
lime_math_RGBA._new = function(rgba) {
	if(rgba == null) {
		rgba = 0;
	}
	var this1 = rgba;
	return this1;
};
lime_math_RGBA.create = function(r,g,b,a) {
	var this1 = 0;
	var rgba = this1;
	rgba = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | a & 255;
	return rgba;
};
lime_math_RGBA.multiplyAlpha = function(this1) {
	if((this1 & 255) == 0) {
		if(this1 != 0) {
			this1 = 0;
		}
	} else if((this1 & 255) != 255) {
		lime_math_RGBA.a16 = lime_math_RGBA.__alpha16[this1 & 255];
		this1 = ((this1 >>> 24 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 24 | ((this1 >>> 16 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 16 | ((this1 >>> 8 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 8 | this1 & 255 & 255;
	}
};
lime_math_RGBA.readUInt8 = function(this1,data,offset,format,premultiplied) {
	if(premultiplied == null) {
		premultiplied = false;
	}
	if(format == null) {
		format = 0;
	}
	switch(format) {
	case 0:
		this1 = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
		break;
	case 1:
		this1 = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
		break;
	case 2:
		this1 = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
		break;
	}
	if(premultiplied) {
		if((this1 & 255) != 0 && (this1 & 255) != 255) {
			lime_math_RGBA.unmult = 255.0 / (this1 & 255);
			this1 = (lime_math_RGBA.__clamp[Math.round((this1 >>> 24 & 255) * lime_math_RGBA.unmult)] & 255) << 24 | (lime_math_RGBA.__clamp[Math.round((this1 >>> 16 & 255) * lime_math_RGBA.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.round((this1 >>> 8 & 255) * lime_math_RGBA.unmult)] & 255) << 8 | this1 & 255 & 255;
		}
	}
};
lime_math_RGBA.set = function(this1,r,g,b,a) {
	this1 = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | a & 255;
};
lime_math_RGBA.unmultiplyAlpha = function(this1) {
	if((this1 & 255) != 0 && (this1 & 255) != 255) {
		lime_math_RGBA.unmult = 255.0 / (this1 & 255);
		this1 = (lime_math_RGBA.__clamp[Math.round((this1 >>> 24 & 255) * lime_math_RGBA.unmult)] & 255) << 24 | (lime_math_RGBA.__clamp[Math.round((this1 >>> 16 & 255) * lime_math_RGBA.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.round((this1 >>> 8 & 255) * lime_math_RGBA.unmult)] & 255) << 8 | this1 & 255 & 255;
	}
};
lime_math_RGBA.writeUInt8 = function(this1,data,offset,format,premultiplied) {
	if(premultiplied == null) {
		premultiplied = false;
	}
	if(format == null) {
		format = 0;
	}
	if(premultiplied) {
		if((this1 & 255) == 0) {
			if(this1 != 0) {
				this1 = 0;
			}
		} else if((this1 & 255) != 255) {
			lime_math_RGBA.a16 = lime_math_RGBA.__alpha16[this1 & 255];
			this1 = ((this1 >>> 24 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 24 | ((this1 >>> 16 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 16 | ((this1 >>> 8 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 8 | this1 & 255 & 255;
		}
	}
	switch(format) {
	case 0:
		data[offset] = this1 >>> 24 & 255;
		data[offset + 1] = this1 >>> 16 & 255;
		data[offset + 2] = this1 >>> 8 & 255;
		data[offset + 3] = this1 & 255;
		break;
	case 1:
		data[offset] = this1 & 255;
		data[offset + 1] = this1 >>> 24 & 255;
		data[offset + 2] = this1 >>> 16 & 255;
		data[offset + 3] = this1 >>> 8 & 255;
		break;
	case 2:
		data[offset] = this1 >>> 8 & 255;
		data[offset + 1] = this1 >>> 16 & 255;
		data[offset + 2] = this1 >>> 24 & 255;
		data[offset + 3] = this1 & 255;
		break;
	}
};
lime_math_RGBA.__fromARGB = function(argb) {
	var this1 = 0;
	var rgba = this1;
	rgba = (argb >>> 16 & 255 & 255) << 24 | (argb >>> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >>> 24 & 255 & 255;
	return rgba;
};
lime_math_RGBA.__fromBGRA = function(bgra) {
	var this1 = 0;
	var rgba = this1;
	rgba = (bgra >>> 8 & 255 & 255) << 24 | (bgra >>> 16 & 255 & 255) << 16 | (bgra >>> 24 & 255 & 255) << 8 | bgra & 255 & 255;
	return rgba;
};
lime_math_RGBA.get_a = function(this1) {
	return this1 & 255;
};
lime_math_RGBA.set_a = function(this1,value) {
	this1 = (this1 >>> 24 & 255 & 255) << 24 | (this1 >>> 16 & 255 & 255) << 16 | (this1 >>> 8 & 255 & 255) << 8 | value & 255;
	return value;
};
lime_math_RGBA.get_b = function(this1) {
	return this1 >>> 8 & 255;
};
lime_math_RGBA.set_b = function(this1,value) {
	this1 = (this1 >>> 24 & 255 & 255) << 24 | (this1 >>> 16 & 255 & 255) << 16 | (value & 255) << 8 | this1 & 255 & 255;
	return value;
};
lime_math_RGBA.get_g = function(this1) {
	return this1 >>> 16 & 255;
};
lime_math_RGBA.set_g = function(this1,value) {
	this1 = (this1 >>> 24 & 255 & 255) << 24 | (value & 255) << 16 | (this1 >>> 8 & 255 & 255) << 8 | this1 & 255 & 255;
	return value;
};
lime_math_RGBA.get_r = function(this1) {
	return this1 >>> 24 & 255;
};
lime_math_RGBA.set_r = function(this1,value) {
	this1 = (value & 255) << 24 | (this1 >>> 16 & 255 & 255) << 16 | (this1 >>> 8 & 255 & 255) << 8 | this1 & 255 & 255;
	return value;
};
var lime_math_Rectangle = function(x,y,width,height) {
	if(height == null) {
		height = 0;
	}
	if(width == null) {
		width = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
	this.width = width;
	this.height = height;
};
$hxClasses["lime.math.Rectangle"] = lime_math_Rectangle;
lime_math_Rectangle.__name__ = "lime.math.Rectangle";
lime_math_Rectangle.prototype = {
	height: null
	,width: null
	,x: null
	,y: null
	,clone: function() {
		return new lime_math_Rectangle(this.x,this.y,this.width,this.height);
	}
	,contains: function(x,y) {
		if(x >= this.x && y >= this.y && x < this.get_right()) {
			return y < this.get_bottom();
		} else {
			return false;
		}
	}
	,containsPoint: function(point) {
		return this.containsVector(point);
	}
	,containsRect: function(rect) {
		if(rect.width <= 0 || rect.height <= 0) {
			if(rect.x > this.x && rect.y > this.y && rect.get_right() < this.get_right()) {
				return rect.get_bottom() < this.get_bottom();
			} else {
				return false;
			}
		} else if(rect.x >= this.x && rect.y >= this.y && rect.get_right() <= this.get_right()) {
			return rect.get_bottom() <= this.get_bottom();
		} else {
			return false;
		}
	}
	,containsVector: function(vector) {
		return this.contains(vector.x,vector.y);
	}
	,copyFrom: function(sourceRect) {
		this.x = sourceRect.x;
		this.y = sourceRect.y;
		this.width = sourceRect.width;
		this.height = sourceRect.height;
	}
	,equals: function(toCompare) {
		if(toCompare != null && this.x == toCompare.x && this.y == toCompare.y && this.width == toCompare.width) {
			return this.height == toCompare.height;
		} else {
			return false;
		}
	}
	,inflate: function(dx,dy) {
		this.x -= dx;
		this.width += dx * 2;
		this.y -= dy;
		this.height += dy * 2;
	}
	,inflateVector: function(vector) {
		this.inflate(vector.x,vector.y);
	}
	,intersection: function(toIntersect,result) {
		if(result == null) {
			result = new lime_math_Rectangle();
		}
		var x0 = this.x < toIntersect.x ? toIntersect.x : this.x;
		var x1 = this.get_right() > toIntersect.get_right() ? toIntersect.get_right() : this.get_right();
		if(x1 <= x0) {
			result.setEmpty();
			return result;
		}
		var y0 = this.y < toIntersect.y ? toIntersect.y : this.y;
		var y1 = this.get_bottom() > toIntersect.get_bottom() ? toIntersect.get_bottom() : this.get_bottom();
		if(y1 <= y0) {
			result.setEmpty();
			return result;
		}
		result.x = x0;
		result.y = y0;
		result.width = x1 - x0;
		result.height = y1 - y0;
		return result;
	}
	,intersects: function(toIntersect) {
		var x0 = this.x < toIntersect.x ? toIntersect.x : this.x;
		var x1 = this.get_right() > toIntersect.get_right() ? toIntersect.get_right() : this.get_right();
		if(x1 <= x0) {
			return false;
		}
		var y0 = this.y < toIntersect.y ? toIntersect.y : this.y;
		var y1 = this.get_bottom() > toIntersect.get_bottom() ? toIntersect.get_bottom() : this.get_bottom();
		return y1 > y0;
	}
	,isEmpty: function() {
		if(!(this.width <= 0)) {
			return this.height <= 0;
		} else {
			return true;
		}
	}
	,offset: function(dx,dy) {
		this.x += dx;
		this.y += dy;
	}
	,offsetVector: function(vector) {
		this.x += vector.x;
		this.y += vector.y;
	}
	,setEmpty: function() {
		this.x = this.y = this.width = this.height = 0;
	}
	,setTo: function(xa,ya,widtha,heighta) {
		this.x = xa;
		this.y = ya;
		this.width = widtha;
		this.height = heighta;
	}
	,union: function(toUnion,result) {
		if(result == null) {
			result = new lime_math_Rectangle();
		}
		if(this.width == 0 || this.height == 0) {
			result.copyFrom(toUnion);
		} else if(toUnion.width == 0 || toUnion.height == 0) {
			result.copyFrom(this);
		} else {
			var x0 = this.x > toUnion.x ? toUnion.x : this.x;
			var x1 = this.get_right() < toUnion.get_right() ? toUnion.get_right() : this.get_right();
			var y0 = this.y > toUnion.y ? toUnion.y : this.y;
			var y1 = this.get_bottom() < toUnion.get_bottom() ? toUnion.get_bottom() : this.get_bottom();
			result.setTo(x0,y0,x1 - x0,y1 - y0);
		}
		return result;
	}
	,__toFlashRectangle: function() {
		return null;
	}
	,get_bottom: function() {
		return this.y + this.height;
	}
	,set_bottom: function(b) {
		this.height = b - this.y;
		return b;
	}
	,get_bottomRight: function() {
		return new lime_math_Vector2(this.x + this.width,this.y + this.height);
	}
	,set_bottomRight: function(p) {
		this.width = p.x - this.x;
		this.height = p.y - this.y;
		return p.clone();
	}
	,get_left: function() {
		return this.x;
	}
	,set_left: function(l) {
		this.width -= l - this.x;
		this.x = l;
		return l;
	}
	,get_right: function() {
		return this.x + this.width;
	}
	,set_right: function(r) {
		this.width = r - this.x;
		return r;
	}
	,get_size: function() {
		return new lime_math_Vector2(this.width,this.height);
	}
	,set_size: function(p) {
		this.width = p.x;
		this.height = p.y;
		return p.clone();
	}
	,get_top: function() {
		return this.y;
	}
	,set_top: function(t) {
		this.height -= t - this.y;
		this.y = t;
		return t;
	}
	,get_topLeft: function() {
		return new lime_math_Vector2(this.x,this.y);
	}
	,set_topLeft: function(p) {
		this.x = p.x;
		this.y = p.y;
		return p.clone();
	}
	,__class__: lime_math_Rectangle
	,__properties__: {set_topLeft:"set_topLeft",get_topLeft:"get_topLeft",set_top:"set_top",get_top:"get_top",set_size:"set_size",get_size:"get_size",set_right:"set_right",get_right:"get_right",set_left:"set_left",get_left:"get_left",set_bottomRight:"set_bottomRight",get_bottomRight:"get_bottomRight",set_bottom:"set_bottom",get_bottom:"get_bottom"}
};
var lime_math_Vector2 = function(x,y) {
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
};
$hxClasses["lime.math.Vector2"] = lime_math_Vector2;
lime_math_Vector2.__name__ = "lime.math.Vector2";
lime_math_Vector2.distance = function(pt1,pt2) {
	var dx = pt1.x - pt2.x;
	var dy = pt1.y - pt2.y;
	return Math.sqrt(dx * dx + dy * dy);
};
lime_math_Vector2.interpolate = function(pt1,pt2,f,result) {
	if(result == null) {
		result = new lime_math_Vector2();
	}
	result.x = pt2.x + f * (pt1.x - pt2.x);
	result.y = pt2.y + f * (pt1.y - pt2.y);
	return result;
};
lime_math_Vector2.polar = function(len,angle,result) {
	if(result == null) {
		result = new lime_math_Vector2();
	}
	var ya = len * Math.sin(angle);
	result.x = len * Math.cos(angle);
	result.y = ya;
	return result;
};
lime_math_Vector2.prototype = {
	x: null
	,y: null
	,add: function(v,result) {
		if(result == null) {
			result = new lime_math_Vector2();
		}
		result.x = v.x + this.x;
		result.y = v.y + this.y;
		return result;
	}
	,clone: function() {
		return new lime_math_Vector2(this.x,this.y);
	}
	,equals: function(toCompare) {
		if(toCompare != null && toCompare.x == this.x) {
			return toCompare.y == this.y;
		} else {
			return false;
		}
	}
	,normalize: function(thickness) {
		if(this.x == 0 && this.y == 0) {
			return;
		} else {
			var norm = thickness / Math.sqrt(this.x * this.x + this.y * this.y);
			this.x *= norm;
			this.y *= norm;
		}
	}
	,offset: function(dx,dy) {
		this.x += dx;
		this.y += dy;
	}
	,setTo: function(xa,ya) {
		this.x = xa;
		this.y = ya;
	}
	,subtract: function(v,result) {
		if(result == null) {
			result = new lime_math_Vector2();
		}
		result.x = this.x - v.x;
		result.y = this.y - v.y;
		return result;
	}
	,__toFlashPoint: function() {
		return null;
	}
	,get_length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y);
	}
	,get_lengthSquared: function() {
		return this.x * this.x + this.y * this.y;
	}
	,__class__: lime_math_Vector2
	,__properties__: {get_lengthSquared:"get_lengthSquared",get_length:"get_length"}
};
var lime_math_Vector4 = function(x,y,z,w) {
	if(w == null) {
		w = 0.;
	}
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	this.w = w;
	this.x = x;
	this.y = y;
	this.z = z;
};
$hxClasses["lime.math.Vector4"] = lime_math_Vector4;
lime_math_Vector4.__name__ = "lime.math.Vector4";
lime_math_Vector4.__properties__ = {get_Z_AXIS:"get_Z_AXIS",get_Y_AXIS:"get_Y_AXIS",get_X_AXIS:"get_X_AXIS"};
lime_math_Vector4.angleBetween = function(a,b) {
	var a0 = new lime_math_Vector4(a.x,a.y,a.z,a.w);
	var l = Math.sqrt(a0.x * a0.x + a0.y * a0.y + a0.z * a0.z);
	if(l != 0) {
		a0.x /= l;
		a0.y /= l;
		a0.z /= l;
	}
	var b0 = new lime_math_Vector4(b.x,b.y,b.z,b.w);
	var l = Math.sqrt(b0.x * b0.x + b0.y * b0.y + b0.z * b0.z);
	if(l != 0) {
		b0.x /= l;
		b0.y /= l;
		b0.z /= l;
	}
	return Math.acos(a0.x * b0.x + a0.y * b0.y + a0.z * b0.z);
};
lime_math_Vector4.distance = function(pt1,pt2) {
	var x = pt2.x - pt1.x;
	var y = pt2.y - pt1.y;
	var z = pt2.z - pt1.z;
	return Math.sqrt(x * x + y * y + z * z);
};
lime_math_Vector4.distanceSquared = function(pt1,pt2) {
	var x = pt2.x - pt1.x;
	var y = pt2.y - pt1.y;
	var z = pt2.z - pt1.z;
	return x * x + y * y + z * z;
};
lime_math_Vector4.get_X_AXIS = function() {
	return new lime_math_Vector4(1,0,0);
};
lime_math_Vector4.get_Y_AXIS = function() {
	return new lime_math_Vector4(0,1,0);
};
lime_math_Vector4.get_Z_AXIS = function() {
	return new lime_math_Vector4(0,0,1);
};
lime_math_Vector4.prototype = {
	w: null
	,x: null
	,y: null
	,z: null
	,add: function(a,result) {
		if(result == null) {
			result = new lime_math_Vector4();
		}
		result.x = this.x + a.x;
		result.y = this.y + a.y;
		result.z = this.z + a.z;
		return result;
	}
	,clone: function() {
		return new lime_math_Vector4(this.x,this.y,this.z,this.w);
	}
	,copyFrom: function(sourceVector4) {
		this.x = sourceVector4.x;
		this.y = sourceVector4.y;
		this.z = sourceVector4.z;
	}
	,crossProduct: function(a,result) {
		if(result == null) {
			result = new lime_math_Vector4();
		}
		var ya = this.z * a.x - this.x * a.z;
		var za = this.x * a.y - this.y * a.x;
		result.x = this.y * a.z - this.z * a.y;
		result.y = ya;
		result.z = za;
		result.w = 1;
		return result;
	}
	,decrementBy: function(a) {
		this.x -= a.x;
		this.y -= a.y;
		this.z -= a.z;
	}
	,dotProduct: function(a) {
		return this.x * a.x + this.y * a.y + this.z * a.z;
	}
	,equals: function(toCompare,allFour) {
		if(allFour == null) {
			allFour = false;
		}
		if(this.x == toCompare.x && this.y == toCompare.y && this.z == toCompare.z) {
			if(!(!allFour)) {
				return this.w == toCompare.w;
			} else {
				return true;
			}
		} else {
			return false;
		}
	}
	,incrementBy: function(a) {
		this.x += a.x;
		this.y += a.y;
		this.z += a.z;
	}
	,nearEquals: function(toCompare,tolerance,allFour) {
		if(allFour == null) {
			allFour = false;
		}
		if(Math.abs(this.x - toCompare.x) < tolerance && Math.abs(this.y - toCompare.y) < tolerance && Math.abs(this.z - toCompare.z) < tolerance) {
			if(!(!allFour)) {
				return Math.abs(this.w - toCompare.w) < tolerance;
			} else {
				return true;
			}
		} else {
			return false;
		}
	}
	,negate: function() {
		this.x *= -1;
		this.y *= -1;
		this.z *= -1;
	}
	,normalize: function() {
		var l = Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
		if(l != 0) {
			this.x /= l;
			this.y /= l;
			this.z /= l;
		}
		return l;
	}
	,project: function() {
		this.x /= this.w;
		this.y /= this.w;
		this.z /= this.w;
	}
	,scaleBy: function(s) {
		this.x *= s;
		this.y *= s;
		this.z *= s;
	}
	,setTo: function(xa,ya,za) {
		this.x = xa;
		this.y = ya;
		this.z = za;
	}
	,subtract: function(a,result) {
		if(result == null) {
			result = new lime_math_Vector4();
		}
		result.x = this.x - a.x;
		result.y = this.y - a.y;
		result.z = this.z - a.z;
		return result;
	}
	,toString: function() {
		return "Vector4(" + this.x + ", " + this.y + ", " + this.z + ")";
	}
	,get_length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
	}
	,get_lengthSquared: function() {
		return this.x * this.x + this.y * this.y + this.z * this.z;
	}
	,__class__: lime_math_Vector4
	,__properties__: {get_lengthSquared:"get_lengthSquared",get_length:"get_length"}
};
var lime_media_AudioBuffer = function() {
};
$hxClasses["lime.media.AudioBuffer"] = lime_media_AudioBuffer;
lime_media_AudioBuffer.__name__ = "lime.media.AudioBuffer";
lime_media_AudioBuffer.fromBase64 = function(base64String) {
	if(base64String == null) {
		return null;
	}
	if(base64String.indexOf(",") == -1) {
		base64String = "data:" + lime_media_AudioBuffer.__getCodec(lime__$internal_format_Base64.decode(base64String)) + ";base64," + base64String;
	}
	var audioBuffer = new lime_media_AudioBuffer();
	audioBuffer.set_src(new Howl({ src : [base64String], html5 : true, preload : false}));
	return audioBuffer;
};
lime_media_AudioBuffer.fromBytes = function(bytes) {
	if(bytes == null) {
		return null;
	}
	var audioBuffer = new lime_media_AudioBuffer();
	audioBuffer.set_src(new Howl({ src : ["data:" + lime_media_AudioBuffer.__getCodec(bytes) + ";base64," + lime__$internal_format_Base64.encode(bytes)], html5 : true, preload : false}));
	return audioBuffer;
};
lime_media_AudioBuffer.fromFile = function(path) {
	if(path == null) {
		return null;
	}
	var audioBuffer = new lime_media_AudioBuffer();
	audioBuffer.__srcHowl = new Howl({ src : [path], preload : false});
	return audioBuffer;
};
lime_media_AudioBuffer.fromFiles = function(paths) {
	var audioBuffer = new lime_media_AudioBuffer();
	audioBuffer.__srcHowl = new Howl({ src : paths, preload : false});
	return audioBuffer;
};
lime_media_AudioBuffer.fromVorbisFile = function(vorbisFile) {
	return null;
};
lime_media_AudioBuffer.loadFromFile = function(path) {
	var promise = new lime_app_Promise();
	var audioBuffer = lime_media_AudioBuffer.fromFile(path);
	if(audioBuffer != null) {
		if(audioBuffer != null) {
			audioBuffer.__srcHowl.on("load",function() {
				promise.complete(audioBuffer);
			});
			audioBuffer.__srcHowl.on("loaderror",function(id,msg) {
				promise.error(msg);
			});
			audioBuffer.__srcHowl.load();
		}
	} else {
		promise.error(null);
	}
	return promise.future;
};
lime_media_AudioBuffer.loadFromFiles = function(paths) {
	var promise = new lime_app_Promise();
	var audioBuffer = lime_media_AudioBuffer.fromFiles(paths);
	if(audioBuffer != null) {
		audioBuffer.__srcHowl.on("load",function() {
			promise.complete(audioBuffer);
		});
		audioBuffer.__srcHowl.on("loaderror",function() {
			promise.error(null);
		});
		audioBuffer.__srcHowl.load();
	} else {
		promise.error(null);
	}
	return promise.future;
};
lime_media_AudioBuffer.__getCodec = function(bytes) {
	var signature = bytes.getString(0,4);
	switch(signature) {
	case "OggS":
		return "audio/ogg";
	case "RIFF":
		if(bytes.getString(8,4) == "WAVE") {
			return "audio/wav";
		} else {
			var _g = bytes.b[2];
			var _g1 = bytes.b[1];
			switch(bytes.b[0]) {
			case 73:
				if(_g1 == 68) {
					if(_g == 51) {
						return "audio/mp3";
					}
				}
				break;
			case 255:
				switch(_g1) {
				case 243:case 250:case 251:
					return "audio/mp3";
				default:
				}
				break;
			default:
			}
		}
		break;
	case "fLaC":
		return "audio/flac";
	default:
		var _g = bytes.b[2];
		var _g1 = bytes.b[1];
		switch(bytes.b[0]) {
		case 73:
			if(_g1 == 68) {
				if(_g == 51) {
					return "audio/mp3";
				}
			}
			break;
		case 255:
			switch(_g1) {
			case 243:case 250:case 251:
				return "audio/mp3";
			default:
			}
			break;
		default:
		}
	}
	lime_utils_Log.error("Unsupported sound format",{ fileName : "lime/media/AudioBuffer.hx", lineNumber : 362, className : "lime.media.AudioBuffer", methodName : "__getCodec"});
	return null;
};
lime_media_AudioBuffer.prototype = {
	bitsPerSample: null
	,channels: null
	,data: null
	,sampleRate: null
	,__srcAudio: null
	,__srcBuffer: null
	,__srcCustom: null
	,__srcHowl: null
	,__srcSound: null
	,__srcVorbisFile: null
	,dispose: function() {
		this.__srcHowl.unload();
	}
	,get_src: function() {
		return this.__srcHowl;
	}
	,set_src: function(value) {
		return this.__srcHowl = value;
	}
	,__class__: lime_media_AudioBuffer
	,__properties__: {set_src:"set_src",get_src:"get_src"}
};
var lime_media_AudioContext = function(type) {
	if(type != "custom") {
		if(type == null || type == "web") {
			try {
				window.AudioContext = window.AudioContext || window.webkitAudioContext;
				this.web = new window.AudioContext ();
				this.type = "web";
			} catch( _g ) {
				haxe_NativeStackTrace.lastError = _g;
			}
		}
		if(this.web == null && type != "web") {
			this.html5 = new lime_media_HTML5AudioContext();
			this.type = "html5";
		}
	} else {
		this.type = "custom";
	}
};
$hxClasses["lime.media.AudioContext"] = lime_media_AudioContext;
lime_media_AudioContext.__name__ = "lime.media.AudioContext";
lime_media_AudioContext.prototype = {
	custom: null
	,flash: null
	,html5: null
	,openal: null
	,type: null
	,web: null
	,__class__: lime_media_AudioContext
};
var lime_media_AudioManager = function() { };
$hxClasses["lime.media.AudioManager"] = lime_media_AudioManager;
lime_media_AudioManager.__name__ = "lime.media.AudioManager";
lime_media_AudioManager.init = function(context) {
	if(lime_media_AudioManager.context == null) {
		if(context == null) {
			lime_media_AudioManager.context = new lime_media_AudioContext();
			context = lime_media_AudioManager.context;
			if(context.type == "openal") {
				var alc = context.openal;
				var device = alc.openDevice();
				var ctx = alc.createContext(device);
				alc.makeContextCurrent(ctx);
				alc.processContext(ctx);
			}
		}
		lime_media_AudioManager.context = context;
	}
};
lime_media_AudioManager.resume = function() {
	if(lime_media_AudioManager.context != null && lime_media_AudioManager.context.type == "openal") {
		var alc = lime_media_AudioManager.context.openal;
		var currentContext = alc.getCurrentContext();
		if(currentContext != null) {
			var device = alc.getContextsDevice(currentContext);
			alc.resumeDevice(device);
			alc.processContext(currentContext);
		}
	}
};
lime_media_AudioManager.shutdown = function() {
	if(lime_media_AudioManager.context != null && lime_media_AudioManager.context.type == "openal") {
		var alc = lime_media_AudioManager.context.openal;
		var currentContext = alc.getCurrentContext();
		if(currentContext != null) {
			var device = alc.getContextsDevice(currentContext);
			alc.makeContextCurrent(null);
			alc.destroyContext(currentContext);
			if(device != null) {
				alc.closeDevice(device);
			}
		}
	}
	lime_media_AudioManager.context = null;
};
lime_media_AudioManager.suspend = function() {
	if(lime_media_AudioManager.context != null && lime_media_AudioManager.context.type == "openal") {
		var alc = lime_media_AudioManager.context.openal;
		var currentContext = alc.getCurrentContext();
		if(currentContext != null) {
			alc.suspendContext(currentContext);
			var device = alc.getContextsDevice(currentContext);
			if(device != null) {
				alc.pauseDevice(device);
			}
		}
	}
};
var lime_media_AudioSource = function(buffer,offset,length,loops) {
	if(loops == null) {
		loops = 0;
	}
	if(offset == null) {
		offset = 0;
	}
	this.onComplete = new lime_app__$Event_$Void_$Void();
	this.buffer = buffer;
	this.offset = offset;
	this.__backend = new lime__$internal_backend_html5_HTML5AudioSource(this);
	if(length != null && length != 0) {
		this.set_length(length);
	}
	this.set_loops(loops);
	if(buffer != null) {
		this.init();
	}
};
$hxClasses["lime.media.AudioSource"] = lime_media_AudioSource;
lime_media_AudioSource.__name__ = "lime.media.AudioSource";
lime_media_AudioSource.prototype = {
	onComplete: null
	,buffer: null
	,offset: null
	,__backend: null
	,dispose: function() {
		this.__backend.dispose();
	}
	,init: function() {
		this.__backend.init();
	}
	,play: function() {
		this.__backend.play();
	}
	,pause: function() {
		this.__backend.pause();
	}
	,stop: function() {
		this.__backend.stop();
	}
	,get_currentTime: function() {
		return this.__backend.getCurrentTime();
	}
	,set_currentTime: function(value) {
		return this.__backend.setCurrentTime(value);
	}
	,get_gain: function() {
		return this.__backend.getGain();
	}
	,set_gain: function(value) {
		return this.__backend.setGain(value);
	}
	,get_length: function() {
		return this.__backend.getLength();
	}
	,set_length: function(value) {
		return this.__backend.setLength(value);
	}
	,get_loops: function() {
		return this.__backend.getLoops();
	}
	,set_loops: function(value) {
		return this.__backend.setLoops(value);
	}
	,get_position: function() {
		return this.__backend.getPosition();
	}
	,set_position: function(value) {
		return this.__backend.setPosition(value);
	}
	,__class__: lime_media_AudioSource
	,__properties__: {set_position:"set_position",get_position:"get_position",set_loops:"set_loops",get_loops:"get_loops",set_length:"set_length",get_length:"get_length",set_gain:"set_gain",get_gain:"get_gain",set_currentTime:"set_currentTime",get_currentTime:"get_currentTime"}
};
var lime_media_FlashAudioContext = function() {
};
$hxClasses["lime.media.FlashAudioContext"] = lime_media_FlashAudioContext;
lime_media_FlashAudioContext.__name__ = "lime.media.FlashAudioContext";
lime_media_FlashAudioContext.prototype = {
	createBuffer: function(stream,context) {
		return null;
	}
	,getBytesLoaded: function(buffer) {
		return 0;
	}
	,getBytesTotal: function(buffer) {
		return 0;
	}
	,getID3: function(buffer) {
		return null;
	}
	,getIsBuffering: function(buffer) {
		return false;
	}
	,getIsURLInaccessible: function(buffer) {
		return false;
	}
	,getLength: function(buffer) {
		return 0;
	}
	,getURL: function(buffer) {
		return null;
	}
	,close: function(buffer) {
	}
	,extract: function(buffer,target,length,startPosition) {
		if(startPosition == null) {
			startPosition = -1;
		}
		return 0;
	}
	,load: function(buffer,stream,context) {
	}
	,loadCompressedDataFromByteArray: function(buffer,bytes,bytesLength) {
	}
	,loadPCMFromByteArray: function(buffer,bytes,samples,format,stereo,sampleRate) {
		if(sampleRate == null) {
			sampleRate = 44100;
		}
		if(stereo == null) {
			stereo = true;
		}
	}
	,play: function(buffer,startTime,loops,sndTransform) {
		if(loops == null) {
			loops = 0;
		}
		if(startTime == null) {
			startTime = 0;
		}
		return null;
	}
	,__class__: lime_media_FlashAudioContext
};
var lime_media_HTML5AudioContext = function() {
	this.NETWORK_NO_SOURCE = 3;
	this.NETWORK_LOADING = 2;
	this.NETWORK_IDLE = 1;
	this.NETWORK_EMPTY = 0;
	this.HAVE_NOTHING = 0;
	this.HAVE_METADATA = 1;
	this.HAVE_FUTURE_DATA = 3;
	this.HAVE_ENOUGH_DATA = 4;
	this.HAVE_CURRENT_DATA = 2;
};
$hxClasses["lime.media.HTML5AudioContext"] = lime_media_HTML5AudioContext;
lime_media_HTML5AudioContext.__name__ = "lime.media.HTML5AudioContext";
lime_media_HTML5AudioContext.prototype = {
	HAVE_CURRENT_DATA: null
	,HAVE_ENOUGH_DATA: null
	,HAVE_FUTURE_DATA: null
	,HAVE_METADATA: null
	,HAVE_NOTHING: null
	,NETWORK_EMPTY: null
	,NETWORK_IDLE: null
	,NETWORK_LOADING: null
	,NETWORK_NO_SOURCE: null
	,canPlayType: function(buffer,type) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.canPlayType(type);
		}
		return null;
	}
	,createBuffer: function(urlString) {
		var buffer = new lime_media_AudioBuffer();
		buffer.__srcAudio = new Audio();
		buffer.__srcAudio.src = urlString;
		return buffer;
	}
	,getAutoplay: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.autoplay;
		}
		return false;
	}
	,getBuffered: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.buffered;
		}
		return null;
	}
	,getCurrentSrc: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.currentSrc;
		}
		return null;
	}
	,getCurrentTime: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.currentTime;
		}
		return 0;
	}
	,getDefaultPlaybackRate: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.defaultPlaybackRate;
		}
		return 1;
	}
	,getDuration: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.duration;
		}
		return 0;
	}
	,getEnded: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.ended;
		}
		return false;
	}
	,getError: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.error;
		}
		return null;
	}
	,getLoop: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.loop;
		}
		return false;
	}
	,getMuted: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.muted;
		}
		return false;
	}
	,getNetworkState: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.networkState;
		}
		return 0;
	}
	,getPaused: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.paused;
		}
		return false;
	}
	,getPlaybackRate: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.playbackRate;
		}
		return 1;
	}
	,getPlayed: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.played;
		}
		return null;
	}
	,getPreload: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.preload;
		}
		return null;
	}
	,getReadyState: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.readyState;
		}
		return 0;
	}
	,getSeekable: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.seekable;
		}
		return null;
	}
	,getSeeking: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.seeking;
		}
		return false;
	}
	,getSrc: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.src;
		}
		return null;
	}
	,getStartTime: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.playbackRate;
		}
		return 0;
	}
	,getVolume: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.volume;
		}
		return 1;
	}
	,load: function(buffer) {
		if(buffer.__srcAudio != null) {
			buffer.__srcAudio.load();
		}
	}
	,pause: function(buffer) {
		if(buffer.__srcAudio != null) {
			buffer.__srcAudio.pause();
		}
	}
	,play: function(buffer) {
		if(buffer.__srcAudio != null) {
			buffer.__srcAudio.play();
		}
	}
	,setAutoplay: function(buffer,value) {
		if(buffer.__srcAudio != null) {
			buffer.__srcAudio.autoplay = value;
		}
	}
	,setCurrentTime: function(buffer,value) {
		if(buffer.__srcAudio != null) {
			buffer.__srcAudio.currentTime = value;
		}
	}
	,setDefaultPlaybackRate: function(buffer,value) {
		if(buffer.__srcAudio != null) {
			buffer.__srcAudio.defaultPlaybackRate = value;
		}
	}
	,setLoop: function(buffer,value) {
		if(buffer.__srcAudio != null) {
			buffer.__srcAudio.loop = value;
		}
	}
	,setMuted: function(buffer,value) {
		if(buffer.__srcAudio != null) {
			buffer.__srcAudio.muted = value;
		}
	}
	,setPlaybackRate: function(buffer,value) {
		if(buffer.__srcAudio != null) {
			buffer.__srcAudio.playbackRate = value;
		}
	}
	,setPreload: function(buffer,value) {
		if(buffer.__srcAudio != null) {
			buffer.__srcAudio.preload = value;
		}
	}
	,setSrc: function(buffer,value) {
		if(buffer.__srcAudio != null) {
			buffer.__srcAudio.src = value;
		}
	}
	,setVolume: function(buffer,value) {
		if(buffer.__srcAudio != null) {
			buffer.__srcAudio.volume = value;
		}
	}
	,__class__: lime_media_HTML5AudioContext
};
var lime_media_OpenALAudioContext = function() {
	this.ALL_DEVICES_SPECIFIER = 4115;
	this.DEFAULT_ALL_DEVICES_SPECIFIER = 4114;
	this.ENUMERATE_ALL_EXT = 1;
	this.DEVICE_SPECIFIER = 4101;
	this.DEFAULT_DEVICE_SPECIFIER = 4100;
	this.ALL_ATTRIBUTES = 4099;
	this.ATTRIBUTES_SIZE = 4098;
	this.INVALID_CONTEXT = 40962;
	this.INVALID_DEVICE = 40961;
	this.STEREO_SOURCES = 4113;
	this.MONO_SOURCES = 4112;
	this.SYNC = 4105;
	this.REFRESH = 4104;
	this.EXPONENT_DISTANCE_CLAMPED = 53254;
	this.EXPONENT_DISTANCE = 53253;
	this.LINEAR_DISTANCE_CLAMPED = 53252;
	this.LINEAR_DISTANCE = 53251;
	this.INVERSE_DISTANCE_CLAMPED = 53250;
	this.INVERSE_DISTANCE = 53249;
	this.DISTANCE_MODEL = 53248;
	this.DOPPLER_VELOCITY = 49153;
	this.SPEED_OF_SOUND = 49155;
	this.DOPPLER_FACTOR = 49152;
	this.EXTENSIONS = 45060;
	this.RENDERER = 45059;
	this.VERSION = 45058;
	this.VENDOR = 45057;
	this.OUT_OF_MEMORY = 40965;
	this.INVALID_OPERATION = 40964;
	this.INVALID_VALUE = 40963;
	this.INVALID_ENUM = 40962;
	this.INVALID_NAME = 40961;
	this.NO_ERROR = 0;
	this.SIZE = 8196;
	this.CHANNELS = 8195;
	this.BITS = 8194;
	this.FREQUENCY = 8193;
	this.FORMAT_STEREO16 = 4355;
	this.FORMAT_STEREO8 = 4354;
	this.FORMAT_MONO16 = 4353;
	this.FORMAT_MONO8 = 4352;
	this.UNDETERMINED = 4144;
	this.STREAMING = 4137;
	this.STATIC = 4136;
	this.SOURCE_TYPE = 4135;
	this.BYTE_OFFSET = 4134;
	this.SAMPLE_OFFSET = 4133;
	this.SEC_OFFSET = 4132;
	this.MAX_DISTANCE = 4131;
	this.CONE_OUTER_GAIN = 4130;
	this.ROLLOFF_FACTOR = 4129;
	this.REFERENCE_DISTANCE = 4128;
	this.BUFFERS_PROCESSED = 4118;
	this.BUFFERS_QUEUED = 4117;
	this.STOPPED = 4116;
	this.PAUSED = 4115;
	this.PLAYING = 4114;
	this.INITIAL = 4113;
	this.SOURCE_STATE = 4112;
	this.ORIENTATION = 4111;
	this.MAX_GAIN = 4110;
	this.MIN_GAIN = 4109;
	this.GAIN = 4106;
	this.BUFFER = 4105;
	this.LOOPING = 4103;
	this.VELOCITY = 4102;
	this.DIRECTION = 4101;
	this.POSITION = 4100;
	this.PITCH = 4099;
	this.CONE_OUTER_ANGLE = 4098;
	this.CONE_INNER_ANGLE = 4097;
	this.SOURCE_RELATIVE = 514;
	this.TRUE = 1;
	this.FALSE = 0;
	this.NONE = 0;
};
$hxClasses["lime.media.OpenALAudioContext"] = lime_media_OpenALAudioContext;
lime_media_OpenALAudioContext.__name__ = "lime.media.OpenALAudioContext";
lime_media_OpenALAudioContext.prototype = {
	NONE: null
	,FALSE: null
	,TRUE: null
	,SOURCE_RELATIVE: null
	,CONE_INNER_ANGLE: null
	,CONE_OUTER_ANGLE: null
	,PITCH: null
	,POSITION: null
	,DIRECTION: null
	,VELOCITY: null
	,LOOPING: null
	,BUFFER: null
	,GAIN: null
	,MIN_GAIN: null
	,MAX_GAIN: null
	,ORIENTATION: null
	,SOURCE_STATE: null
	,INITIAL: null
	,PLAYING: null
	,PAUSED: null
	,STOPPED: null
	,BUFFERS_QUEUED: null
	,BUFFERS_PROCESSED: null
	,REFERENCE_DISTANCE: null
	,ROLLOFF_FACTOR: null
	,CONE_OUTER_GAIN: null
	,MAX_DISTANCE: null
	,SEC_OFFSET: null
	,SAMPLE_OFFSET: null
	,BYTE_OFFSET: null
	,SOURCE_TYPE: null
	,STATIC: null
	,STREAMING: null
	,UNDETERMINED: null
	,FORMAT_MONO8: null
	,FORMAT_MONO16: null
	,FORMAT_STEREO8: null
	,FORMAT_STEREO16: null
	,FREQUENCY: null
	,BITS: null
	,CHANNELS: null
	,SIZE: null
	,NO_ERROR: null
	,INVALID_NAME: null
	,INVALID_ENUM: null
	,INVALID_VALUE: null
	,INVALID_OPERATION: null
	,OUT_OF_MEMORY: null
	,VENDOR: null
	,VERSION: null
	,RENDERER: null
	,EXTENSIONS: null
	,DOPPLER_FACTOR: null
	,SPEED_OF_SOUND: null
	,DOPPLER_VELOCITY: null
	,DISTANCE_MODEL: null
	,INVERSE_DISTANCE: null
	,INVERSE_DISTANCE_CLAMPED: null
	,LINEAR_DISTANCE: null
	,LINEAR_DISTANCE_CLAMPED: null
	,EXPONENT_DISTANCE: null
	,EXPONENT_DISTANCE_CLAMPED: null
	,REFRESH: null
	,SYNC: null
	,MONO_SOURCES: null
	,STEREO_SOURCES: null
	,INVALID_DEVICE: null
	,INVALID_CONTEXT: null
	,ATTRIBUTES_SIZE: null
	,ALL_ATTRIBUTES: null
	,DEFAULT_DEVICE_SPECIFIER: null
	,DEVICE_SPECIFIER: null
	,ENUMERATE_ALL_EXT: null
	,DEFAULT_ALL_DEVICES_SPECIFIER: null
	,ALL_DEVICES_SPECIFIER: null
	,bufferData: function(buffer,format,data,size,freq) {
		lime_media_openal_AL.bufferData(buffer,format,data,size,freq);
	}
	,buffer3f: function(buffer,param,value1,value2,value3) {
		lime_media_openal_AL.buffer3f(buffer,param,value1,value2,value3);
	}
	,buffer3i: function(buffer,param,value1,value2,value3) {
		lime_media_openal_AL.buffer3i(buffer,param,value1,value2,value3);
	}
	,bufferf: function(buffer,param,value) {
		lime_media_openal_AL.bufferf(buffer,param,value);
	}
	,bufferfv: function(buffer,param,values) {
		lime_media_openal_AL.bufferfv(buffer,param,values);
	}
	,bufferi: function(buffer,param,value) {
		lime_media_openal_AL.bufferi(buffer,param,value);
	}
	,bufferiv: function(buffer,param,values) {
		lime_media_openal_AL.bufferiv(buffer,param,values);
	}
	,closeDevice: function(device) {
		return lime_media_openal_ALC.closeDevice(device);
	}
	,createContext: function(device,attrlist) {
		return lime_media_openal_ALC.createContext(device,attrlist);
	}
	,createBuffer: function() {
		return lime_media_openal_AL.createBuffer();
	}
	,createSource: function() {
		return lime_media_openal_AL.createSource();
	}
	,deleteBuffer: function(buffer) {
		lime_media_openal_AL.deleteBuffer(buffer);
	}
	,deleteBuffers: function(buffers) {
		lime_media_openal_AL.deleteBuffers(buffers);
	}
	,deleteSource: function(source) {
		lime_media_openal_AL.deleteSource(source);
	}
	,deleteSources: function(sources) {
		lime_media_openal_AL.deleteSources(sources);
	}
	,destroyContext: function(context) {
		if(context == null) {
			return;
		}
		lime_media_openal_ALC.destroyContext(context);
	}
	,disable: function(capability) {
		lime_media_openal_AL.disable(capability);
	}
	,distanceModel: function(distanceModel) {
		lime_media_openal_AL.distanceModel(distanceModel);
	}
	,dopplerFactor: function(value) {
		lime_media_openal_AL.dopplerFactor(value);
	}
	,dopplerVelocity: function(value) {
		lime_media_openal_AL.dopplerVelocity(value);
	}
	,enable: function(capability) {
		lime_media_openal_AL.enable(capability);
	}
	,genSource: function() {
		return this.createSource();
	}
	,genSources: function(n) {
		return lime_media_openal_AL.genSources(n);
	}
	,genBuffer: function() {
		return this.createBuffer();
	}
	,genBuffers: function(n) {
		return lime_media_openal_AL.genBuffers(n);
	}
	,getBoolean: function(param) {
		return lime_media_openal_AL.getBoolean(param);
	}
	,getBooleanv: function(param,count) {
		if(count == null) {
			count = 1;
		}
		return lime_media_openal_AL.getBooleanv(param,count);
	}
	,getBuffer3f: function(buffer,param) {
		return lime_media_openal_AL.getBuffer3f(buffer,param);
	}
	,getBuffer3i: function(buffer,param) {
		return lime_media_openal_AL.getBuffer3i(buffer,param);
	}
	,getBufferf: function(buffer,param) {
		return lime_media_openal_AL.getBufferf(buffer,param);
	}
	,getBufferfv: function(buffer,param,count) {
		if(count == null) {
			count = 1;
		}
		return lime_media_openal_AL.getBufferfv(buffer,param,count);
	}
	,getBufferi: function(buffer,param) {
		return lime_media_openal_AL.getBufferi(buffer,param);
	}
	,getBufferiv: function(buffer,param,count) {
		if(count == null) {
			count = 1;
		}
		return lime_media_openal_AL.getBufferiv(buffer,param,count);
	}
	,getContextsDevice: function(context) {
		if(context == null) {
			return null;
		}
		return lime_media_openal_ALC.getContextsDevice(context);
	}
	,getCurrentContext: function() {
		return lime_media_openal_ALC.getCurrentContext();
	}
	,getDouble: function(param) {
		return lime_media_openal_AL.getDouble(param);
	}
	,getDoublev: function(param,count) {
		if(count == null) {
			count = 1;
		}
		return lime_media_openal_AL.getDoublev(param,count);
	}
	,getEnumValue: function(ename) {
		return lime_media_openal_AL.getEnumValue(ename);
	}
	,getError: function(device) {
		if(device == null) {
			return lime_media_openal_AL.getError();
		} else {
			return lime_media_openal_ALC.getError(device);
		}
	}
	,getErrorString: function(device) {
		if(device == null) {
			return lime_media_openal_AL.getErrorString();
		} else {
			return lime_media_openal_ALC.getErrorString(device);
		}
	}
	,getFloat: function(param) {
		return lime_media_openal_AL.getFloat(param);
	}
	,getFloatv: function(param,count) {
		if(count == null) {
			count = 1;
		}
		return lime_media_openal_AL.getFloatv(param,count);
	}
	,getInteger: function(param) {
		return lime_media_openal_AL.getInteger(param);
	}
	,getIntegerv: function(param,count,device) {
		if(count == null) {
			count = 1;
		}
		if(device == null) {
			return lime_media_openal_AL.getIntegerv(param,count);
		} else {
			return lime_media_openal_ALC.getIntegerv(device,param,count);
		}
	}
	,getListener3f: function(param) {
		return lime_media_openal_AL.getListener3f(param);
	}
	,getListener3i: function(param) {
		return lime_media_openal_AL.getListener3i(param);
	}
	,getListenerf: function(param) {
		return lime_media_openal_AL.getListenerf(param);
	}
	,getListenerfv: function(param,count) {
		if(count == null) {
			count = 1;
		}
		return lime_media_openal_AL.getListenerfv(param,count);
	}
	,getListeneri: function(param) {
		return lime_media_openal_AL.getListeneri(param);
	}
	,getListeneriv: function(param,count) {
		if(count == null) {
			count = 1;
		}
		return lime_media_openal_AL.getListeneriv(param,count);
	}
	,getProcAddress: function(fname) {
		return lime_media_openal_AL.getProcAddress(fname);
	}
	,getSource3f: function(source,param) {
		return lime_media_openal_AL.getSource3f(source,param);
	}
	,getSourcef: function(source,param) {
		return lime_media_openal_AL.getSourcef(source,param);
	}
	,getSource3i: function(source,param) {
		return lime_media_openal_AL.getSource3i(source,param);
	}
	,getSourcefv: function(source,param,count) {
		if(count == null) {
			count = 1;
		}
		return lime_media_openal_AL.getSourcefv(source,param);
	}
	,getSourcei: function(source,param) {
		return lime_media_openal_AL.getSourcei(source,param);
	}
	,getSourceiv: function(source,param,count) {
		if(count == null) {
			count = 1;
		}
		return lime_media_openal_AL.getSourceiv(source,param,count);
	}
	,getString: function(param,device) {
		if(device == null) {
			return lime_media_openal_AL.getString(param);
		} else {
			return lime_media_openal_ALC.getString(device,param);
		}
	}
	,isBuffer: function(buffer) {
		return lime_media_openal_AL.isBuffer(buffer);
	}
	,isEnabled: function(capability) {
		return lime_media_openal_AL.isEnabled(capability);
	}
	,isExtensionPresent: function(extname) {
		return lime_media_openal_AL.isExtensionPresent(extname);
	}
	,isSource: function(source) {
		return lime_media_openal_AL.isSource(source);
	}
	,listener3f: function(param,value1,value2,value3) {
		lime_media_openal_AL.listener3f(param,value1,value2,value3);
	}
	,listener3i: function(param,value1,value2,value3) {
		lime_media_openal_AL.listener3i(param,value1,value2,value3);
	}
	,listenerf: function(param,value) {
		lime_media_openal_AL.listenerf(param,value);
	}
	,listenerfv: function(param,values) {
		lime_media_openal_AL.listenerfv(param,values);
	}
	,listeneri: function(param,value) {
		lime_media_openal_AL.listeneri(param,value);
	}
	,listeneriv: function(param,values) {
		lime_media_openal_AL.listeneriv(param,values);
	}
	,makeContextCurrent: function(context) {
		return lime_media_openal_ALC.makeContextCurrent(context);
	}
	,openDevice: function(deviceName) {
		return lime_media_openal_ALC.openDevice(deviceName);
	}
	,pauseDevice: function(device) {
		lime_media_openal_ALC.pauseDevice(device);
	}
	,processContext: function(context) {
		lime_media_openal_ALC.processContext(context);
	}
	,resumeDevice: function(device) {
		lime_media_openal_ALC.resumeDevice(device);
	}
	,source3f: function(source,param,value1,value2,value3) {
		lime_media_openal_AL.source3f(source,param,value1,value2,value3);
	}
	,source3i: function(source,param,value1,value2,value3) {
		lime_media_openal_AL.source3i(source,param,value1,value2,value3);
	}
	,sourcef: function(source,param,value) {
		lime_media_openal_AL.sourcef(source,param,value);
	}
	,sourcefv: function(source,param,values) {
		lime_media_openal_AL.sourcefv(source,param,values);
	}
	,sourcei: function(source,param,value) {
		lime_media_openal_AL.sourcei(source,param,value);
	}
	,sourceiv: function(source,param,values) {
		lime_media_openal_AL.sourceiv(source,param,values);
	}
	,sourcePlay: function(source) {
		lime_media_openal_AL.sourcePlay(source);
	}
	,sourcePlayv: function(sources) {
		lime_media_openal_AL.sourcePlayv(sources);
	}
	,sourceStop: function(source) {
		lime_media_openal_AL.sourceStop(source);
	}
	,sourceStopv: function(sources) {
		lime_media_openal_AL.sourceStopv(sources);
	}
	,sourceRewind: function(source) {
		lime_media_openal_AL.sourceRewind(source);
	}
	,sourceRewindv: function(sources) {
		lime_media_openal_AL.sourceRewindv(sources);
	}
	,sourcePause: function(source) {
		lime_media_openal_AL.sourcePause(source);
	}
	,sourcePausev: function(sources) {
		lime_media_openal_AL.sourcePausev(sources);
	}
	,sourceQueueBuffer: function(source,buffer) {
		lime_media_openal_AL.sourceQueueBuffer(source,buffer);
	}
	,sourceQueueBuffers: function(source,nb,buffers) {
		lime_media_openal_AL.sourceQueueBuffers(source,nb,buffers);
	}
	,sourceUnqueueBuffer: function(source) {
		return lime_media_openal_AL.sourceUnqueueBuffer(source);
	}
	,sourceUnqueueBuffers: function(source,nb) {
		return lime_media_openal_AL.sourceUnqueueBuffers(source,nb);
	}
	,speedOfSound: function(value) {
		lime_media_openal_AL.speedOfSound(value);
	}
	,suspendContext: function(context) {
		lime_media_openal_ALC.suspendContext(context);
	}
	,__class__: lime_media_OpenALAudioContext
};
var lime_media_openal_AL = function() { };
$hxClasses["lime.media.openal.AL"] = lime_media_openal_AL;
lime_media_openal_AL.__name__ = "lime.media.openal.AL";
lime_media_openal_AL.removeDirectFilter = function(source) {
};
lime_media_openal_AL.removeSend = function(source,index) {
};
lime_media_openal_AL.auxf = function(aux,param,value) {
};
lime_media_openal_AL.auxfv = function(aux,param,values) {
};
lime_media_openal_AL.auxi = function(aux,param,value) {
};
lime_media_openal_AL.auxiv = function(aux,param,values) {
};
lime_media_openal_AL.bufferData = function(buffer,format,data,size,freq) {
};
lime_media_openal_AL.buffer3f = function(buffer,param,value1,value2,value3) {
};
lime_media_openal_AL.buffer3i = function(buffer,param,value1,value2,value3) {
};
lime_media_openal_AL.bufferf = function(buffer,param,value) {
};
lime_media_openal_AL.bufferfv = function(buffer,param,values) {
};
lime_media_openal_AL.bufferi = function(buffer,param,value) {
};
lime_media_openal_AL.bufferiv = function(buffer,param,values) {
};
lime_media_openal_AL.createAux = function() {
	return null;
};
lime_media_openal_AL.createBuffer = function() {
	return null;
};
lime_media_openal_AL.createEffect = function() {
	return null;
};
lime_media_openal_AL.createFilter = function() {
	return null;
};
lime_media_openal_AL.createSource = function() {
	return null;
};
lime_media_openal_AL.deleteBuffer = function(buffer) {
};
lime_media_openal_AL.deleteBuffers = function(buffers) {
};
lime_media_openal_AL.deleteSource = function(source) {
};
lime_media_openal_AL.deleteSources = function(sources) {
};
lime_media_openal_AL.disable = function(capability) {
};
lime_media_openal_AL.distanceModel = function(distanceModel) {
};
lime_media_openal_AL.dopplerFactor = function(value) {
};
lime_media_openal_AL.dopplerVelocity = function(value) {
};
lime_media_openal_AL.effectf = function(effect,param,value) {
};
lime_media_openal_AL.effectfv = function(effect,param,values) {
};
lime_media_openal_AL.effecti = function(effect,param,value) {
};
lime_media_openal_AL.effectiv = function(effect,param,values) {
};
lime_media_openal_AL.enable = function(capability) {
};
lime_media_openal_AL.genSource = function() {
	return null;
};
lime_media_openal_AL.genSources = function(n) {
	return null;
};
lime_media_openal_AL.genBuffer = function() {
	return null;
};
lime_media_openal_AL.genBuffers = function(n) {
	return null;
};
lime_media_openal_AL.getBoolean = function(param) {
	return false;
};
lime_media_openal_AL.getBooleanv = function(param,count) {
	if(count == null) {
		count = 1;
	}
	return null;
};
lime_media_openal_AL.getBuffer3f = function(buffer,param) {
	return null;
};
lime_media_openal_AL.getBuffer3i = function(buffer,param) {
	return null;
};
lime_media_openal_AL.getBufferf = function(buffer,param) {
	return 0;
};
lime_media_openal_AL.getBufferfv = function(buffer,param,count) {
	if(count == null) {
		count = 1;
	}
	return null;
};
lime_media_openal_AL.getBufferi = function(buffer,param) {
	return 0;
};
lime_media_openal_AL.getBufferiv = function(buffer,param,count) {
	if(count == null) {
		count = 1;
	}
	return null;
};
lime_media_openal_AL.getDouble = function(param) {
	return 0;
};
lime_media_openal_AL.getDoublev = function(param,count) {
	if(count == null) {
		count = 1;
	}
	return null;
};
lime_media_openal_AL.getEnumValue = function(ename) {
	return 0;
};
lime_media_openal_AL.getError = function() {
	return 0;
};
lime_media_openal_AL.getErrorString = function() {
	switch(lime_media_openal_AL.getError()) {
	case 40961:
		return "INVALID_NAME: Invalid parameter name";
	case 40962:
		return "INVALID_ENUM: Invalid enum value";
	case 40963:
		return "INVALID_VALUE: Invalid parameter value";
	case 40964:
		return "INVALID_OPERATION: Illegal operation or call";
	case 40965:
		return "OUT_OF_MEMORY: OpenAL has run out of memory";
	default:
		return "";
	}
};
lime_media_openal_AL.getFilteri = function(filter,param) {
	return 0;
};
lime_media_openal_AL.getFloat = function(param) {
	return 0;
};
lime_media_openal_AL.getFloatv = function(param,count) {
	if(count == null) {
		count = 1;
	}
	return null;
};
lime_media_openal_AL.getInteger = function(param) {
	return 0;
};
lime_media_openal_AL.getIntegerv = function(param,count) {
	if(count == null) {
		count = 1;
	}
	return null;
};
lime_media_openal_AL.getListener3f = function(param) {
	return null;
};
lime_media_openal_AL.getListener3i = function(param) {
	return null;
};
lime_media_openal_AL.getListenerf = function(param) {
	return 0;
};
lime_media_openal_AL.getListenerfv = function(param,count) {
	if(count == null) {
		count = 1;
	}
	return null;
};
lime_media_openal_AL.getListeneri = function(param) {
	return 0;
};
lime_media_openal_AL.getListeneriv = function(param,count) {
	if(count == null) {
		count = 1;
	}
	return null;
};
lime_media_openal_AL.getParameter = function(param) {
	return null;
};
lime_media_openal_AL.getProcAddress = function(fname) {
	return null;
};
lime_media_openal_AL.getSource3f = function(source,param) {
	return null;
};
lime_media_openal_AL.getSourcef = function(source,param) {
	return 0;
};
lime_media_openal_AL.getSource3i = function(source,param) {
	return null;
};
lime_media_openal_AL.getSourcefv = function(source,param,count) {
	if(count == null) {
		count = 1;
	}
	return null;
};
lime_media_openal_AL.getSourcei = function(source,param) {
	return 0;
};
lime_media_openal_AL.getSourceiv = function(source,param,count) {
	if(count == null) {
		count = 1;
	}
	return null;
};
lime_media_openal_AL.getString = function(param) {
	return null;
};
lime_media_openal_AL.isBuffer = function(buffer) {
	return false;
};
lime_media_openal_AL.isEnabled = function(capability) {
	return false;
};
lime_media_openal_AL.isExtensionPresent = function(extname) {
	return false;
};
lime_media_openal_AL.isAux = function(aux) {
	return false;
};
lime_media_openal_AL.isEffect = function(effect) {
	return false;
};
lime_media_openal_AL.isFilter = function(filter) {
	return false;
};
lime_media_openal_AL.isSource = function(source) {
	return false;
};
lime_media_openal_AL.listener3f = function(param,value1,value2,value3) {
};
lime_media_openal_AL.listener3i = function(param,value1,value2,value3) {
};
lime_media_openal_AL.listenerf = function(param,value) {
};
lime_media_openal_AL.listenerfv = function(param,values) {
};
lime_media_openal_AL.listeneri = function(param,value) {
};
lime_media_openal_AL.listeneriv = function(param,values) {
};
lime_media_openal_AL.source3f = function(source,param,value1,value2,value3) {
};
lime_media_openal_AL.source3i = function(source,param,value1,value2,value3) {
};
lime_media_openal_AL.sourcef = function(source,param,value) {
};
lime_media_openal_AL.sourcefv = function(source,param,values) {
};
lime_media_openal_AL.sourcei = function(source,param,value) {
};
lime_media_openal_AL.filteri = function(filter,param,value) {
};
lime_media_openal_AL.filterf = function(filter,param,value) {
};
lime_media_openal_AL.sourceiv = function(source,param,values) {
};
lime_media_openal_AL.sourcePlay = function(source) {
};
lime_media_openal_AL.sourcePlayv = function(sources) {
};
lime_media_openal_AL.sourceStop = function(source) {
};
lime_media_openal_AL.sourceStopv = function(sources) {
};
lime_media_openal_AL.sourceRewind = function(source) {
};
lime_media_openal_AL.sourceRewindv = function(sources) {
};
lime_media_openal_AL.sourcePause = function(source) {
};
lime_media_openal_AL.sourcePausev = function(sources) {
};
lime_media_openal_AL.sourceQueueBuffer = function(source,buffer) {
};
lime_media_openal_AL.sourceQueueBuffers = function(source,nb,buffers) {
};
lime_media_openal_AL.sourceUnqueueBuffer = function(source) {
	return 0;
};
lime_media_openal_AL.sourceUnqueueBuffers = function(source,nb) {
	return null;
};
lime_media_openal_AL.speedOfSound = function(value) {
};
var lime_media_openal_ALAuxiliaryEffectSlot = {};
lime_media_openal_ALAuxiliaryEffectSlot._new = function(handle) {
	var this1 = handle;
	return this1;
};
var lime_media_openal_ALBuffer = {};
lime_media_openal_ALBuffer._new = function(handle) {
	var this1 = handle;
	return this1;
};
var lime_media_openal_ALC = function() { };
$hxClasses["lime.media.openal.ALC"] = lime_media_openal_ALC;
lime_media_openal_ALC.__name__ = "lime.media.openal.ALC";
lime_media_openal_ALC.closeDevice = function(device) {
	return false;
};
lime_media_openal_ALC.createContext = function(device,attrlist) {
	return null;
};
lime_media_openal_ALC.destroyContext = function(context) {
};
lime_media_openal_ALC.getContextsDevice = function(context) {
	return null;
};
lime_media_openal_ALC.getCurrentContext = function() {
	return null;
};
lime_media_openal_ALC.getError = function(device) {
	return 0;
};
lime_media_openal_ALC.getErrorString = function(device) {
	switch(lime_media_openal_ALC.getError(device)) {
	case 40961:
		return "INVALID_DEVICE: Invalid device (or no device?)";
	case 40962:
		return "INVALID_CONTEXT: Invalid context (or no context?)";
	case 40963:
		return "INVALID_ENUM: Invalid enum value";
	case 40964:
		return "INVALID_VALUE: Invalid param value";
	case 40965:
		return "OUT_OF_MEMORY: OpenAL has run out of memory";
	default:
		return "";
	}
};
lime_media_openal_ALC.getIntegerv = function(device,param,size) {
	return null;
};
lime_media_openal_ALC.getString = function(device,param) {
	return null;
};
lime_media_openal_ALC.makeContextCurrent = function(context) {
	return false;
};
lime_media_openal_ALC.openDevice = function(deviceName) {
	return null;
};
lime_media_openal_ALC.pauseDevice = function(device) {
};
lime_media_openal_ALC.processContext = function(context) {
};
lime_media_openal_ALC.resumeDevice = function(device) {
};
lime_media_openal_ALC.suspendContext = function(context) {
};
var lime_media_openal_ALContext = {};
lime_media_openal_ALContext._new = function(handle) {
	var this1 = handle;
	return this1;
};
var lime_media_openal_ALDevice = {};
lime_media_openal_ALDevice._new = function(handle) {
	var this1 = handle;
	return this1;
};
var lime_media_openal_ALEffect = {};
lime_media_openal_ALEffect._new = function(handle) {
	var this1 = handle;
	return this1;
};
var lime_media_openal_ALFilter = {};
lime_media_openal_ALFilter._new = function(handle) {
	var this1 = handle;
	return this1;
};
var lime_media_openal_ALSource = {};
lime_media_openal_ALSource._new = function(handle) {
	var this1 = handle;
	return this1;
};
var lime_media_vorbis_VorbisComment = function() {
};
$hxClasses["lime.media.vorbis.VorbisComment"] = lime_media_vorbis_VorbisComment;
lime_media_vorbis_VorbisComment.__name__ = "lime.media.vorbis.VorbisComment";
lime_media_vorbis_VorbisComment.prototype = {
	userComments: null
	,vendor: null
	,__class__: lime_media_vorbis_VorbisComment
};
var lime_media_vorbis_VorbisFile = function(handle) {
	this.handle = handle;
};
$hxClasses["lime.media.vorbis.VorbisFile"] = lime_media_vorbis_VorbisFile;
lime_media_vorbis_VorbisFile.__name__ = "lime.media.vorbis.VorbisFile";
lime_media_vorbis_VorbisFile.fromBytes = function(bytes) {
	return null;
};
lime_media_vorbis_VorbisFile.fromFile = function(path) {
	return null;
};
lime_media_vorbis_VorbisFile.prototype = {
	bitstream: null
	,handle: null
	,bitrate: function(bitstream) {
		if(bitstream == null) {
			bitstream = -1;
		}
		return 0;
	}
	,bitrateInstant: function() {
		return 0;
	}
	,clear: function() {
	}
	,comment: function(bitstream) {
		if(bitstream == null) {
			bitstream = -1;
		}
		return null;
	}
	,crosslap: function(other) {
		return 0;
	}
	,info: function(bitstream) {
		if(bitstream == null) {
			bitstream = -1;
		}
		return null;
	}
	,pcmSeek: function(pos) {
		return 0;
	}
	,pcmSeekLap: function(pos) {
		return 0;
	}
	,pcmSeekPage: function(pos) {
		return 0;
	}
	,pcmSeekPageLap: function(pos) {
		return 0;
	}
	,pcmTell: function() {
		var this1 = new haxe__$Int64__$_$_$Int64(0,0);
		return this1;
	}
	,pcmTotal: function(bitstream) {
		if(bitstream == null) {
			bitstream = -1;
		}
		var this1 = new haxe__$Int64__$_$_$Int64(0,0);
		return this1;
	}
	,rawSeek: function(pos) {
		return 0;
	}
	,rawSeekLap: function(pos) {
		return 0;
	}
	,rawTell: function() {
		var this1 = new haxe__$Int64__$_$_$Int64(0,0);
		return this1;
	}
	,rawTotal: function(bitstream) {
		if(bitstream == null) {
			bitstream = -1;
		}
		var this1 = new haxe__$Int64__$_$_$Int64(0,0);
		return this1;
	}
	,read: function(buffer,position,length,bigEndianPacking,wordSize,signed) {
		if(signed == null) {
			signed = true;
		}
		if(wordSize == null) {
			wordSize = 2;
		}
		if(bigEndianPacking == null) {
			bigEndianPacking = false;
		}
		if(length == null) {
			length = 4096;
		}
		return 0;
	}
	,readFloat: function(pcmChannels,samples) {
		return 0;
	}
	,seekable: function() {
		return false;
	}
	,serialNumber: function(bitstream) {
		if(bitstream == null) {
			bitstream = -1;
		}
		return 0;
	}
	,streams: function() {
		return 0;
	}
	,timeSeek: function(s) {
		return 0;
	}
	,timeSeekLap: function(s) {
		return 0;
	}
	,timeSeekPage: function(s) {
		return 0;
	}
	,timeSeekPageLap: function(s) {
		return 0;
	}
	,timeTell: function() {
		return 0;
	}
	,timeTotal: function(bitstream) {
		if(bitstream == null) {
			bitstream = -1;
		}
		return 0;
	}
	,__class__: lime_media_vorbis_VorbisFile
};
var lime_media_vorbis_VorbisInfo = function() {
};
$hxClasses["lime.media.vorbis.VorbisInfo"] = lime_media_vorbis_VorbisInfo;
lime_media_vorbis_VorbisInfo.__name__ = "lime.media.vorbis.VorbisInfo";
lime_media_vorbis_VorbisInfo.prototype = {
	bitrateLower: null
	,bitrateNominal: null
	,bitrateUpper: null
	,channels: null
	,rate: null
	,version: null
	,__class__: lime_media_vorbis_VorbisInfo
};
var lime_net__$IHTTPRequest = function() { };
$hxClasses["lime.net._IHTTPRequest"] = lime_net__$IHTTPRequest;
lime_net__$IHTTPRequest.__name__ = "lime.net._IHTTPRequest";
lime_net__$IHTTPRequest.__isInterface__ = true;
lime_net__$IHTTPRequest.prototype = {
	contentType: null
	,data: null
	,enableResponseHeaders: null
	,followRedirects: null
	,formData: null
	,headers: null
	,method: null
	,responseHeaders: null
	,responseStatus: null
	,timeout: null
	,uri: null
	,userAgent: null
	,withCredentials: null
	,cancel: null
	,__class__: lime_net__$IHTTPRequest
};
var lime_net__$HTTPRequest_AbstractHTTPRequest = function(uri) {
	this.uri = uri;
	this.contentType = "application/x-www-form-urlencoded";
	this.followRedirects = true;
	this.enableResponseHeaders = false;
	this.formData = new haxe_ds_StringMap();
	this.headers = [];
	this.method = "GET";
	this.timeout = 30000;
	this.withCredentials = false;
	this.__backend = new lime__$internal_backend_html5_HTML5HTTPRequest();
	this.__backend.init(this);
};
$hxClasses["lime.net._HTTPRequest.AbstractHTTPRequest"] = lime_net__$HTTPRequest_AbstractHTTPRequest;
lime_net__$HTTPRequest_AbstractHTTPRequest.__name__ = "lime.net._HTTPRequest.AbstractHTTPRequest";
lime_net__$HTTPRequest_AbstractHTTPRequest.__interfaces__ = [lime_net__$IHTTPRequest];
lime_net__$HTTPRequest_AbstractHTTPRequest.prototype = {
	contentType: null
	,data: null
	,enableResponseHeaders: null
	,followRedirects: null
	,formData: null
	,headers: null
	,method: null
	,responseData: null
	,responseHeaders: null
	,responseStatus: null
	,timeout: null
	,uri: null
	,userAgent: null
	,withCredentials: null
	,__backend: null
	,cancel: function() {
		this.__backend.cancel();
	}
	,load: function(uri) {
		return null;
	}
	,__class__: lime_net__$HTTPRequest_AbstractHTTPRequest
};
var lime_net_HTTPRequest = function(uri) {
	lime_net__$HTTPRequest_AbstractHTTPRequest.call(this,uri);
};
$hxClasses["lime.net.HTTPRequest"] = lime_net_HTTPRequest;
lime_net_HTTPRequest.__name__ = "lime.net.HTTPRequest";
lime_net_HTTPRequest.__super__ = lime_net__$HTTPRequest_AbstractHTTPRequest;
lime_net_HTTPRequest.prototype = $extend(lime_net__$HTTPRequest_AbstractHTTPRequest.prototype,{
	__class__: lime_net_HTTPRequest
});
var lime_net__$HTTPRequest_$Bytes = function(uri) {
	lime_net__$HTTPRequest_AbstractHTTPRequest.call(this,uri);
};
$hxClasses["lime.net._HTTPRequest_Bytes"] = lime_net__$HTTPRequest_$Bytes;
lime_net__$HTTPRequest_$Bytes.__name__ = "lime.net._HTTPRequest_Bytes";
lime_net__$HTTPRequest_$Bytes.__super__ = lime_net__$HTTPRequest_AbstractHTTPRequest;
lime_net__$HTTPRequest_$Bytes.prototype = $extend(lime_net__$HTTPRequest_AbstractHTTPRequest.prototype,{
	fromBytes: function(bytes) {
		return bytes;
	}
	,load: function(uri) {
		var _gthis = this;
		if(uri != null) {
			this.uri = uri;
		}
		var promise = new lime_app_Promise();
		var future = this.__backend.loadData(this.uri);
		future.onProgress($bind(promise,promise.progress));
		future.onError($bind(promise,promise.error));
		future.onComplete(function(bytes) {
			_gthis.responseData = _gthis.fromBytes(bytes);
			promise.complete(_gthis.responseData);
		});
		return promise.future;
	}
	,__class__: lime_net__$HTTPRequest_$Bytes
});
var lime_net__$HTTPRequest_$String = function(uri) {
	lime_net__$HTTPRequest_AbstractHTTPRequest.call(this,uri);
};
$hxClasses["lime.net._HTTPRequest_String"] = lime_net__$HTTPRequest_$String;
lime_net__$HTTPRequest_$String.__name__ = "lime.net._HTTPRequest_String";
lime_net__$HTTPRequest_$String.__super__ = lime_net__$HTTPRequest_AbstractHTTPRequest;
lime_net__$HTTPRequest_$String.prototype = $extend(lime_net__$HTTPRequest_AbstractHTTPRequest.prototype,{
	load: function(uri) {
		var _gthis = this;
		if(uri != null) {
			this.uri = uri;
		}
		var promise = new lime_app_Promise();
		var future = this.__backend.loadText(this.uri);
		future.onProgress($bind(promise,promise.progress));
		future.onError($bind(promise,promise.error));
		future.onComplete(function(text) {
			_gthis.responseData = text;
			promise.complete(_gthis.responseData);
		});
		return promise.future;
	}
	,__class__: lime_net__$HTTPRequest_$String
});
var lime_net_HTTPRequestHeader = function(name,value) {
	if(value == null) {
		value = "";
	}
	this.name = name;
	this.value = value;
};
$hxClasses["lime.net.HTTPRequestHeader"] = lime_net_HTTPRequestHeader;
lime_net_HTTPRequestHeader.__name__ = "lime.net.HTTPRequestHeader";
lime_net_HTTPRequestHeader.prototype = {
	name: null
	,value: null
	,__class__: lime_net_HTTPRequestHeader
};
var lime_net__$HTTPRequest_$lime_$text_$Font = function(uri) {
	lime_net__$HTTPRequest_$Bytes.call(this,uri);
};
$hxClasses["lime.net._HTTPRequest_lime_text_Font"] = lime_net__$HTTPRequest_$lime_$text_$Font;
lime_net__$HTTPRequest_$lime_$text_$Font.__name__ = "lime.net._HTTPRequest_lime_text_Font";
lime_net__$HTTPRequest_$lime_$text_$Font.__super__ = lime_net__$HTTPRequest_$Bytes;
lime_net__$HTTPRequest_$lime_$text_$Font.prototype = $extend(lime_net__$HTTPRequest_$Bytes.prototype,{
	fromBytes: function(bytes) {
		return lime_text_Font.fromBytes(bytes);
	}
	,__class__: lime_net__$HTTPRequest_$lime_$text_$Font
});
var lime_net__$HTTPRequest_$lime_$utils_$Bytes = function(uri) {
	lime_net__$HTTPRequest_$Bytes.call(this,uri);
};
$hxClasses["lime.net._HTTPRequest_lime_utils_Bytes"] = lime_net__$HTTPRequest_$lime_$utils_$Bytes;
lime_net__$HTTPRequest_$lime_$utils_$Bytes.__name__ = "lime.net._HTTPRequest_lime_utils_Bytes";
lime_net__$HTTPRequest_$lime_$utils_$Bytes.__super__ = lime_net__$HTTPRequest_$Bytes;
lime_net__$HTTPRequest_$lime_$utils_$Bytes.prototype = $extend(lime_net__$HTTPRequest_$Bytes.prototype,{
	fromBytes: function(bytes) {
		return lime_utils_Bytes.fromBytes(bytes);
	}
	,__class__: lime_net__$HTTPRequest_$lime_$utils_$Bytes
});
var lime_net__$HTTPRequest_$openfl_$utils_$ByteArray = function(uri) {
	lime_net__$HTTPRequest_$Bytes.call(this,uri);
};
$hxClasses["lime.net._HTTPRequest_openfl_utils_ByteArray"] = lime_net__$HTTPRequest_$openfl_$utils_$ByteArray;
lime_net__$HTTPRequest_$openfl_$utils_$ByteArray.__name__ = "lime.net._HTTPRequest_openfl_utils_ByteArray";
lime_net__$HTTPRequest_$openfl_$utils_$ByteArray.__super__ = lime_net__$HTTPRequest_$Bytes;
lime_net__$HTTPRequest_$openfl_$utils_$ByteArray.prototype = $extend(lime_net__$HTTPRequest_$Bytes.prototype,{
	fromBytes: function(bytes) {
		return openfl_utils_ByteArray.fromBytes(bytes);
	}
	,__class__: lime_net__$HTTPRequest_$openfl_$utils_$ByteArray
});
var lime_system_BackgroundWorker = function() {
	this.onProgress = new lime_app__$Event_$Dynamic_$Void();
	this.onError = new lime_app__$Event_$Dynamic_$Void();
	this.onComplete = new lime_app__$Event_$Dynamic_$Void();
	this.doWork = new lime_app__$Event_$Dynamic_$Void();
};
$hxClasses["lime.system.BackgroundWorker"] = lime_system_BackgroundWorker;
lime_system_BackgroundWorker.__name__ = "lime.system.BackgroundWorker";
lime_system_BackgroundWorker.prototype = {
	canceled: null
	,completed: null
	,doWork: null
	,onComplete: null
	,onError: null
	,onProgress: null
	,__runMessage: null
	,cancel: function() {
		this.canceled = true;
	}
	,run: function(message) {
		this.canceled = false;
		this.completed = false;
		this.__runMessage = message;
		this.__doWork();
	}
	,sendComplete: function(message) {
		this.completed = true;
		if(!this.canceled) {
			this.canceled = true;
			this.onComplete.dispatch(message);
		}
	}
	,sendError: function(message) {
		if(!this.canceled) {
			this.canceled = true;
			this.onError.dispatch(message);
		}
	}
	,sendProgress: function(message) {
		if(!this.canceled) {
			this.onProgress.dispatch(message);
		}
	}
	,__doWork: function() {
		this.doWork.dispatch(this.__runMessage);
	}
	,__update: function(deltaTime) {
	}
	,__class__: lime_system_BackgroundWorker
};
var lime_system_CFFI = function() { };
$hxClasses["lime.system.CFFI"] = lime_system_CFFI;
lime_system_CFFI.__name__ = "lime.system.CFFI";
lime_system_CFFI.load = function(library,method,args,lazy) {
	if(lazy == null) {
		lazy = false;
	}
	if(args == null) {
		args = 0;
	}
	if(!lime_system_CFFI.enabled) {
		return Reflect.makeVarArgs(function(__) {
			return { };
		});
	}
	var result = null;
	return result;
};
lime_system_CFFI.__findHaxelib = function(library) {
	return "";
};
lime_system_CFFI.__loaderTrace = function(message) {
};
lime_system_CFFI.__sysName = function() {
	return null;
};
lime_system_CFFI.__tryLoad = function(name,library,func,args) {
	return null;
};
var lime_system_CFFIPointer = {};
lime_system_CFFIPointer._new = function(handle) {
	var this1 = handle;
	return this1;
};
lime_system_CFFIPointer.get = function(this1) {
	var tmp = this1 != null;
	return 0;
};
lime_system_CFFIPointer.equals = function(a,b) {
	return lime_system_CFFIPointer.get(a) == b;
};
lime_system_CFFIPointer.equalsPointer = function(a,b) {
	return lime_system_CFFIPointer.get(a) == lime_system_CFFIPointer.get(b);
};
lime_system_CFFIPointer.greaterThan = function(a,b) {
	return lime_system_CFFIPointer.get(a) > b;
};
lime_system_CFFIPointer.greaterThanPointer = function(a,b) {
	return lime_system_CFFIPointer.get(a) > lime_system_CFFIPointer.get(b);
};
lime_system_CFFIPointer.greaterThanOrEqual = function(a,b) {
	return lime_system_CFFIPointer.get(a) >= b;
};
lime_system_CFFIPointer.greaterThanOrEqualPointer = function(a,b) {
	return lime_system_CFFIPointer.get(a) >= lime_system_CFFIPointer.get(b);
};
lime_system_CFFIPointer.lessThan = function(a,b) {
	return lime_system_CFFIPointer.get(a) < b;
};
lime_system_CFFIPointer.lessThanPointer = function(a,b) {
	return lime_system_CFFIPointer.get(a) < lime_system_CFFIPointer.get(b);
};
lime_system_CFFIPointer.lessThanOrEqual = function(a,b) {
	return lime_system_CFFIPointer.get(a) <= b;
};
lime_system_CFFIPointer.lessThanOrEqualPointer = function(a,b) {
	return lime_system_CFFIPointer.get(a) <= lime_system_CFFIPointer.get(b);
};
lime_system_CFFIPointer.notEquals = function(a,b) {
	return lime_system_CFFIPointer.get(a) != b;
};
lime_system_CFFIPointer.notEqualsPointer = function(a,b) {
	return lime_system_CFFIPointer.get(a) != lime_system_CFFIPointer.get(b);
};
var lime_system_Clipboard = function() { };
$hxClasses["lime.system.Clipboard"] = lime_system_Clipboard;
lime_system_Clipboard.__name__ = "lime.system.Clipboard";
lime_system_Clipboard.__properties__ = {set_text:"set_text",get_text:"get_text"};
lime_system_Clipboard.__update = function() {
	var cacheText = lime_system_Clipboard._text;
	lime_system_Clipboard._text = null;
	if(lime_system_Clipboard._text != cacheText) {
		lime_system_Clipboard.onUpdate.dispatch();
	}
};
lime_system_Clipboard.get_text = function() {
	lime_system_Clipboard.__update();
	return lime_system_Clipboard._text;
};
lime_system_Clipboard.set_text = function(value) {
	var cacheText = lime_system_Clipboard._text;
	lime_system_Clipboard._text = value;
	var $window = lime_app_Application.current.__window;
	if($window != null) {
		$window.__backend.setClipboard(value);
	}
	if(lime_system_Clipboard._text != cacheText) {
		lime_system_Clipboard.onUpdate.dispatch();
	}
	return value;
};
var lime_system_Display = function() {
};
$hxClasses["lime.system.Display"] = lime_system_Display;
lime_system_Display.__name__ = "lime.system.Display";
lime_system_Display.prototype = {
	bounds: null
	,currentMode: null
	,id: null
	,dpi: null
	,name: null
	,supportedModes: null
	,__class__: lime_system_Display
};
var lime_system_DisplayMode = function(width,height,refreshRate,pixelFormat) {
	this.width = width;
	this.height = height;
	this.refreshRate = refreshRate;
	this.pixelFormat = pixelFormat;
};
$hxClasses["lime.system.DisplayMode"] = lime_system_DisplayMode;
lime_system_DisplayMode.__name__ = "lime.system.DisplayMode";
lime_system_DisplayMode.prototype = {
	height: null
	,pixelFormat: null
	,refreshRate: null
	,width: null
	,__class__: lime_system_DisplayMode
};
var lime_system_Endian = $hxEnums["lime.system.Endian"] = { __ename__ : "lime.system.Endian", __constructs__ : ["LITTLE_ENDIAN","BIG_ENDIAN"]
	,LITTLE_ENDIAN: {_hx_index:0,__enum__:"lime.system.Endian",toString:$estr}
	,BIG_ENDIAN: {_hx_index:1,__enum__:"lime.system.Endian",toString:$estr}
};
var lime_system_Sensor = function(type,id) {
	this.onUpdate = new lime_app__$Event_$Float_$Float_$Float_$Void();
	this.type = type;
	this.id = id;
};
$hxClasses["lime.system.Sensor"] = lime_system_Sensor;
lime_system_Sensor.__name__ = "lime.system.Sensor";
lime_system_Sensor.getSensors = function(type) {
	if(type == null) {
		return lime_system_Sensor.sensors.slice();
	} else {
		var result = [];
		var _g = 0;
		var _g1 = lime_system_Sensor.sensors;
		while(_g < _g1.length) {
			var sensor = _g1[_g];
			++_g;
			if(sensor.type == type) {
				result.push(sensor);
			}
		}
		return result;
	}
};
lime_system_Sensor.registerSensor = function(type,id) {
	var sensor = new lime_system_Sensor(type,id);
	lime_system_Sensor.sensors.push(sensor);
	lime_system_Sensor.sensorByID.h[id] = sensor;
	return sensor;
};
lime_system_Sensor.prototype = {
	id: null
	,onUpdate: null
	,type: null
	,__class__: lime_system_Sensor
};
var lime_system_SensorType = $hxEnums["lime.system.SensorType"] = { __ename__ : "lime.system.SensorType", __constructs__ : ["ACCELEROMETER"]
	,ACCELEROMETER: {_hx_index:0,__enum__:"lime.system.SensorType",toString:$estr}
};
var lime_system_System = function() { };
$hxClasses["lime.system.System"] = lime_system_System;
lime_system_System.__name__ = "lime.system.System";
lime_system_System.__properties__ = {get_userDirectory:"get_userDirectory",get_platformVersion:"get_platformVersion",get_platformName:"get_platformName",get_platformLabel:"get_platformLabel",get_numDisplays:"get_numDisplays",get_fontsDirectory:"get_fontsDirectory",get_endianness:"get_endianness",get_documentsDirectory:"get_documentsDirectory",get_deviceVendor:"get_deviceVendor",get_deviceModel:"get_deviceModel",get_desktopDirectory:"get_desktopDirectory",get_applicationStorageDirectory:"get_applicationStorageDirectory",get_applicationDirectory:"get_applicationDirectory",set_allowScreenTimeout:"set_allowScreenTimeout",get_allowScreenTimeout:"get_allowScreenTimeout"};
lime_system_System.embed = $hx_exports["lime"]["embed"] = function(projectName,element,width,height,config) {
	if(lime_system_System.__applicationEntryPoint == null) {
		return;
	}
	if(Object.prototype.hasOwnProperty.call(lime_system_System.__applicationEntryPoint.h,projectName)) {
		var htmlElement = null;
		if(typeof(element) == "string") {
			htmlElement = window.document.getElementById(element);
		} else if(element == null) {
			htmlElement = window.document.createElement("div");
		} else {
			htmlElement = element;
		}
		if(htmlElement == null) {
			window.console.log("[lime.embed] ERROR: Cannot find target element: " + Std.string(element));
			return;
		}
		if(width == null) {
			width = 0;
		}
		if(height == null) {
			height = 0;
		}
		if(config == null) {
			config = { };
		}
		if(Object.prototype.hasOwnProperty.call(config,"background") && typeof(config.background) == "string") {
			var background = StringTools.replace(Std.string(config.background),"#","");
			if(background.indexOf("0x") > -1) {
				config.background = Std.parseInt(background);
			} else {
				config.background = Std.parseInt("0x" + background);
			}
		}
		config.element = htmlElement;
		config.width = width;
		config.height = height;
		lime_system_System.__applicationEntryPoint.h[projectName](config);
	}
};
lime_system_System.exit = function(code) {
};
lime_system_System.getDisplay = function(id) {
	if(id == 0) {
		var display = new lime_system_Display();
		display.id = 0;
		display.name = "Generic Display";
		display.dpi = 96 * window.devicePixelRatio;
		display.currentMode = new lime_system_DisplayMode(window.screen.width,window.screen.height,60,1);
		display.supportedModes = [display.currentMode];
		display.bounds = new lime_math_Rectangle(0,0,display.currentMode.width,display.currentMode.height);
		return display;
	}
	return null;
};
lime_system_System.getTimer = function() {
	return window.performance.now() | 0;
};
lime_system_System.load = function(library,method,args,lazy) {
	if(lazy == null) {
		lazy = false;
	}
	if(args == null) {
		args = 0;
	}
	return lime_system_CFFI.load(library,method,args,lazy);
};
lime_system_System.openFile = function(path) {
	if(path != null) {
		window.open(path,"_blank");
	}
};
lime_system_System.openURL = function(url,target) {
	if(target == null) {
		target = "_blank";
	}
	if(url != null) {
		window.open(url,target);
	}
};
lime_system_System.__copyMissingFields = function(target,source) {
	if(source == null || target == null) {
		return;
	}
	var _g = 0;
	var _g1 = Reflect.fields(source);
	while(_g < _g1.length) {
		var field = _g1[_g];
		++_g;
		if(!Object.prototype.hasOwnProperty.call(target,field)) {
			target[field] = Reflect.field(source,field);
		}
	}
};
lime_system_System.__getDirectory = function(type) {
	return null;
};
lime_system_System.__parseBool = function(value) {
	return value == "true";
};
lime_system_System.__registerEntryPoint = function(projectName,entryPoint) {
	if(lime_system_System.__applicationEntryPoint == null) {
		lime_system_System.__applicationEntryPoint = new haxe_ds_StringMap();
	}
	lime_system_System.__applicationEntryPoint.h[projectName] = entryPoint;
};
lime_system_System.__runProcess = function(command,args) {
	return null;
};
lime_system_System.get_allowScreenTimeout = function() {
	return true;
};
lime_system_System.set_allowScreenTimeout = function(value) {
	return true;
};
lime_system_System.get_applicationDirectory = function() {
	if(lime_system_System.__applicationDirectory == null) {
		lime_system_System.__applicationDirectory = lime_system_System.__getDirectory(0);
	}
	return lime_system_System.__applicationDirectory;
};
lime_system_System.get_applicationStorageDirectory = function() {
	if(lime_system_System.__applicationStorageDirectory == null) {
		lime_system_System.__applicationStorageDirectory = lime_system_System.__getDirectory(1);
	}
	return lime_system_System.__applicationStorageDirectory;
};
lime_system_System.get_deviceModel = function() {
	var tmp = lime_system_System.__deviceModel == null;
	return lime_system_System.__deviceModel;
};
lime_system_System.get_deviceVendor = function() {
	var tmp = lime_system_System.__deviceVendor == null;
	return lime_system_System.__deviceVendor;
};
lime_system_System.get_desktopDirectory = function() {
	if(lime_system_System.__desktopDirectory == null) {
		lime_system_System.__desktopDirectory = lime_system_System.__getDirectory(2);
	}
	return lime_system_System.__desktopDirectory;
};
lime_system_System.get_documentsDirectory = function() {
	if(lime_system_System.__documentsDirectory == null) {
		lime_system_System.__documentsDirectory = lime_system_System.__getDirectory(3);
	}
	return lime_system_System.__documentsDirectory;
};
lime_system_System.get_endianness = function() {
	if(lime_system_System.__endianness == null) {
		var arrayBuffer = new ArrayBuffer(2);
		var elements = null;
		var array = null;
		var vector = null;
		var view = null;
		var len = null;
		var this1;
		if(elements != null) {
			this1 = new Uint8Array(elements);
		} else if(array != null) {
			this1 = new Uint8Array(array);
		} else if(vector != null) {
			this1 = new Uint8Array(vector.__array);
		} else if(view != null) {
			this1 = new Uint8Array(view);
		} else if(arrayBuffer != null) {
			if(len == null) {
				this1 = new Uint8Array(arrayBuffer,0);
			} else {
				this1 = new Uint8Array(arrayBuffer,0,len);
			}
		} else {
			this1 = null;
		}
		var uint8Array = this1;
		var elements = null;
		var array = null;
		var vector = null;
		var view = null;
		var len = null;
		var this1;
		if(elements != null) {
			this1 = new Uint16Array(elements);
		} else if(array != null) {
			this1 = new Uint16Array(array);
		} else if(vector != null) {
			this1 = new Uint16Array(vector.__array);
		} else if(view != null) {
			this1 = new Uint16Array(view);
		} else if(arrayBuffer != null) {
			if(len == null) {
				this1 = new Uint16Array(arrayBuffer,0);
			} else {
				this1 = new Uint16Array(arrayBuffer,0,len);
			}
		} else {
			this1 = null;
		}
		var uint16array = this1;
		uint8Array[0] = 170;
		uint8Array[1] = 187;
		if(uint16array[0] == 43707) {
			lime_system_System.__endianness = lime_system_Endian.BIG_ENDIAN;
		} else {
			lime_system_System.__endianness = lime_system_Endian.LITTLE_ENDIAN;
		}
	}
	return lime_system_System.__endianness;
};
lime_system_System.get_fontsDirectory = function() {
	if(lime_system_System.__fontsDirectory == null) {
		lime_system_System.__fontsDirectory = lime_system_System.__getDirectory(4);
	}
	return lime_system_System.__fontsDirectory;
};
lime_system_System.get_numDisplays = function() {
	return 1;
};
lime_system_System.get_platformLabel = function() {
	if(lime_system_System.__platformLabel == null) {
		var name = lime_system_System.get_platformName();
		var version = lime_system_System.get_platformVersion();
		if(name != null && version != null) {
			lime_system_System.__platformLabel = name + " " + version;
		} else if(name != null) {
			lime_system_System.__platformLabel = name;
		}
	}
	return lime_system_System.__platformLabel;
};
lime_system_System.get_platformName = function() {
	if(lime_system_System.__platformName == null) {
		lime_system_System.__platformName = "HTML5";
	}
	return lime_system_System.__platformName;
};
lime_system_System.get_platformVersion = function() {
	var tmp = lime_system_System.__platformVersion == null;
	return lime_system_System.__platformVersion;
};
lime_system_System.get_userDirectory = function() {
	if(lime_system_System.__userDirectory == null) {
		lime_system_System.__userDirectory = lime_system_System.__getDirectory(5);
	}
	return lime_system_System.__userDirectory;
};
var lime_system_ThreadPool = function(minThreads,maxThreads) {
	if(maxThreads == null) {
		maxThreads = 1;
	}
	if(minThreads == null) {
		minThreads = 0;
	}
	this.onRun = new lime_app__$Event_$Dynamic_$Void();
	this.onProgress = new lime_app__$Event_$Dynamic_$Void();
	this.onError = new lime_app__$Event_$Dynamic_$Void();
	this.onComplete = new lime_app__$Event_$Dynamic_$Void();
	this.doWork = new lime_app__$Event_$Dynamic_$Void();
	this.minThreads = minThreads;
	this.maxThreads = maxThreads;
	this.currentThreads = 0;
};
$hxClasses["lime.system.ThreadPool"] = lime_system_ThreadPool;
lime_system_ThreadPool.__name__ = "lime.system.ThreadPool";
lime_system_ThreadPool.prototype = {
	currentThreads: null
	,doWork: null
	,maxThreads: null
	,minThreads: null
	,onComplete: null
	,onError: null
	,onProgress: null
	,onRun: null
	,queue: function(state) {
		this.runWork(state);
	}
	,sendComplete: function(state) {
		this.onComplete.dispatch(state);
	}
	,sendError: function(state) {
		this.onError.dispatch(state);
	}
	,sendProgress: function(state) {
		this.onProgress.dispatch(state);
	}
	,runWork: function(state) {
		this.onRun.dispatch(state);
		this.doWork.dispatch(state);
	}
	,__class__: lime_system_ThreadPool
};
var lime_system__$ThreadPool_ThreadPoolMessageType = $hxEnums["lime.system._ThreadPool.ThreadPoolMessageType"] = { __ename__ : "lime.system._ThreadPool.ThreadPoolMessageType", __constructs__ : ["COMPLETE","ERROR","EXIT","PROGRESS","WORK"]
	,COMPLETE: {_hx_index:0,__enum__:"lime.system._ThreadPool.ThreadPoolMessageType",toString:$estr}
	,ERROR: {_hx_index:1,__enum__:"lime.system._ThreadPool.ThreadPoolMessageType",toString:$estr}
	,EXIT: {_hx_index:2,__enum__:"lime.system._ThreadPool.ThreadPoolMessageType",toString:$estr}
	,PROGRESS: {_hx_index:3,__enum__:"lime.system._ThreadPool.ThreadPoolMessageType",toString:$estr}
	,WORK: {_hx_index:4,__enum__:"lime.system._ThreadPool.ThreadPoolMessageType",toString:$estr}
};
var lime_system__$ThreadPool_ThreadPoolMessage = function(type,state) {
	this.type = type;
	this.state = state;
};
$hxClasses["lime.system._ThreadPool.ThreadPoolMessage"] = lime_system__$ThreadPool_ThreadPoolMessage;
lime_system__$ThreadPool_ThreadPoolMessage.__name__ = "lime.system._ThreadPool.ThreadPoolMessage";
lime_system__$ThreadPool_ThreadPoolMessage.prototype = {
	state: null
	,type: null
	,__class__: lime_system__$ThreadPool_ThreadPoolMessage
};
var lime_text_Font = function(name) {
	if(name != null) {
		this.name = name;
	}
	if(!this.__init) {
		if(this.ascender == undefined) {
			this.ascender = 0;
		}
		if(this.descender == undefined) {
			this.descender = 0;
		}
		if(this.height == undefined) {
			this.height = 0;
		}
		if(this.numGlyphs == undefined) {
			this.numGlyphs = 0;
		}
		if(this.underlinePosition == undefined) {
			this.underlinePosition = 0;
		}
		if(this.underlineThickness == undefined) {
			this.underlineThickness = 0;
		}
		if(this.unitsPerEM == undefined) {
			this.unitsPerEM = 0;
		}
		if(this.__fontID != null) {
			if(lime_utils_Assets.isLocal(this.__fontID)) {
				this.__fromBytes(lime_utils_Assets.getBytes(this.__fontID));
			}
		} else if(this.__fontPath != null) {
			this.__fromFile(this.__fontPath);
		}
	}
};
$hxClasses["lime.text.Font"] = lime_text_Font;
lime_text_Font.__name__ = "lime.text.Font";
lime_text_Font.fromBytes = function(bytes) {
	if(bytes == null) {
		return null;
	}
	var font = new lime_text_Font();
	font.__fromBytes(bytes);
	return font;
};
lime_text_Font.fromFile = function(path) {
	if(path == null) {
		return null;
	}
	var font = new lime_text_Font();
	font.__fromFile(path);
	return font;
};
lime_text_Font.loadFromBytes = function(bytes) {
	return lime_app_Future.withValue(lime_text_Font.fromBytes(bytes));
};
lime_text_Font.loadFromFile = function(path) {
	var request = new lime_net__$HTTPRequest_$lime_$text_$Font();
	return request.load(path).then(function(font) {
		if(font != null) {
			return lime_app_Future.withValue(font);
		} else {
			return lime_app_Future.withError("");
		}
	});
};
lime_text_Font.loadFromName = function(path) {
	var font = new lime_text_Font();
	return font.__loadFromName(path);
};
lime_text_Font.__measureFontNode = function(fontFamily) {
	var node = window.document.createElement("span");
	node.setAttribute("aria-hidden","true");
	var text = window.document.createTextNode("BESbswy");
	node.appendChild(text);
	var style = node.style;
	style.display = "block";
	style.position = "absolute";
	style.top = "-9999px";
	style.left = "-9999px";
	style.fontSize = "300px";
	style.width = "auto";
	style.height = "auto";
	style.lineHeight = "normal";
	style.margin = "0";
	style.padding = "0";
	style.fontVariant = "normal";
	style.whiteSpace = "nowrap";
	style.fontFamily = fontFamily;
	window.document.body.appendChild(node);
	return node;
};
lime_text_Font.prototype = {
	ascender: null
	,descender: null
	,height: null
	,name: null
	,numGlyphs: null
	,src: null
	,underlinePosition: null
	,underlineThickness: null
	,unitsPerEM: null
	,__fontID: null
	,__fontPath: null
	,__init: null
	,decompose: function() {
		return null;
	}
	,getGlyph: function(character) {
		return -1;
	}
	,getGlyphs: function(characters) {
		if(characters == null) {
			characters = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^`'\"/\\&*()[]{}<>|:;_-+=?,. ";
		}
		return null;
	}
	,getGlyphMetrics: function(glyph) {
		return null;
	}
	,renderGlyph: function(glyph,fontSize) {
		return null;
	}
	,renderGlyphs: function(glyphs,fontSize) {
		return null;
	}
	,__copyFrom: function(other) {
		if(other != null) {
			this.ascender = other.ascender;
			this.descender = other.descender;
			this.height = other.height;
			this.name = other.name;
			this.numGlyphs = other.numGlyphs;
			this.src = other.src;
			this.underlinePosition = other.underlinePosition;
			this.underlineThickness = other.underlineThickness;
			this.unitsPerEM = other.unitsPerEM;
			this.__fontID = other.__fontID;
			this.__fontPath = other.__fontPath;
			this.__init = true;
		}
	}
	,__fromBytes: function(bytes) {
		this.__fontPath = null;
	}
	,__fromFile: function(path) {
		this.__fontPath = path;
	}
	,__initializeSource: function() {
		this.__init = true;
	}
	,__loadFromName: function(name) {
		var _gthis = this;
		var promise = new lime_app_Promise();
		this.name = name;
		var userAgent = $global.navigator.userAgent.toLowerCase();
		var isSafari = userAgent.indexOf(" safari/") >= 0 && userAgent.indexOf(" chrome/") < 0;
		var isUIWebView = new EReg("(iPhone|iPod|iPad).*AppleWebKit(?!.*Version)","i").match(userAgent);
		if(!isSafari && !isUIWebView && (window.document.fonts && ($_=window.document.fonts,$bind($_,$_.load)))) {
			window.document.fonts.load("1em '" + name + "'").then(function(_) {
				promise.complete(_gthis);
			},function(_) {
				lime_utils_Log.warn("Could not load web font \"" + name + "\"",{ fileName : "lime/text/Font.hx", lineNumber : 513, className : "lime.text.Font", methodName : "__loadFromName"});
				promise.complete(_gthis);
			});
		} else {
			var node1 = lime_text_Font.__measureFontNode("'" + name + "', sans-serif");
			var node2 = lime_text_Font.__measureFontNode("'" + name + "', serif");
			var width1 = node1.offsetWidth;
			var width2 = node2.offsetWidth;
			var interval = -1;
			var timeout = 3000;
			var intervalLength = 50;
			var intervalCount = 0;
			var loaded;
			var timeExpired;
			var checkFont = function() {
				intervalCount += 1;
				loaded = node1.offsetWidth != width1 || node2.offsetWidth != width2;
				timeExpired = intervalCount * intervalLength >= timeout;
				if(loaded || timeExpired) {
					window.clearInterval(interval);
					node1.parentNode.removeChild(node1);
					node2.parentNode.removeChild(node2);
					node1 = null;
					node2 = null;
					if(timeExpired) {
						lime_utils_Log.warn("Could not load web font \"" + name + "\"",{ fileName : "lime/text/Font.hx", lineNumber : 548, className : "lime.text.Font", methodName : "__loadFromName"});
					}
					promise.complete(_gthis);
				}
			};
			interval = window.setInterval(checkFont,intervalLength);
		}
		return promise.future;
	}
	,__setSize: function(size) {
	}
	,__class__: lime_text_Font
};
var lime_text_Glyph = {};
lime_text_Glyph._new = function(i) {
	var this1 = i;
	return this1;
};
var lime_text_GlyphMetrics = function() {
};
$hxClasses["lime.text.GlyphMetrics"] = lime_text_GlyphMetrics;
lime_text_GlyphMetrics.__name__ = "lime.text.GlyphMetrics";
lime_text_GlyphMetrics.prototype = {
	advance: null
	,height: null
	,horizontalBearing: null
	,verticalBearing: null
	,__class__: lime_text_GlyphMetrics
};
var lime_text_harfbuzz_HB = function() { };
$hxClasses["lime.text.harfbuzz.HB"] = lime_text_harfbuzz_HB;
lime_text_harfbuzz_HB.__name__ = "lime.text.harfbuzz.HB";
lime_text_harfbuzz_HB.shape = function(font,buffer,features) {
};
var lime_text_harfbuzz_HBBlob = {};
lime_text_harfbuzz_HBBlob.__properties__ = {get_length:"get_length",get_immutable:"get_immutable",get_dataWritable:"get_dataWritable",get_data:"get_data",get_empty:"get_empty"};
lime_text_harfbuzz_HBBlob._new = function(data,length,memoryMode) {
	var this1 = null;
	return this1;
};
lime_text_harfbuzz_HBBlob.createSubBlob = function(this1,offset,length) {
	return null;
};
lime_text_harfbuzz_HBBlob.makeImmutable = function(this1) {
};
lime_text_harfbuzz_HBBlob.get_data = function(this1) {
	return 0;
};
lime_text_harfbuzz_HBBlob.get_dataWritable = function(this1) {
	return 0;
};
lime_text_harfbuzz_HBBlob.get_empty = function() {
	return null;
};
lime_text_harfbuzz_HBBlob.get_immutable = function(this1) {
	return false;
};
lime_text_harfbuzz_HBBlob.get_length = function(this1) {
	return 0;
};
var lime_text_harfbuzz_HBBuffer = {};
lime_text_harfbuzz_HBBuffer.__properties__ = {set_segmentProperties:"set_segmentProperties",get_segmentProperties:"get_segmentProperties",set_script:"set_script",get_script:"get_script",set_replacementCodepoint:"set_replacementCodepoint",get_replacementCodepoint:"get_replacementCodepoint",set_length:"set_length",get_length:"get_length",set_language:"set_language",get_language:"get_language",set_flags:"set_flags",get_flags:"get_flags",set_direction:"set_direction",get_direction:"get_direction",set_contentType:"set_contentType",get_contentType:"get_contentType",set_clusterLevel:"set_clusterLevel",get_clusterLevel:"get_clusterLevel",get_allocationSuccessful:"get_allocationSuccessful"};
lime_text_harfbuzz_HBBuffer._new = function() {
	var this1 = null;
	return this1;
};
lime_text_harfbuzz_HBBuffer.add = function(this1,codepoint,cluster) {
};
lime_text_harfbuzz_HBBuffer.addCodepoints = function(this1,text,textLength,itemOffset,itemLength) {
};
lime_text_harfbuzz_HBBuffer.addUTF8 = function(this1,text,itemOffset,itemLength) {
};
lime_text_harfbuzz_HBBuffer.addUTF16 = function(this1,text,textLength,itemOffset,itemLength) {
};
lime_text_harfbuzz_HBBuffer.addUTF32 = function(this1,text,textLength,itemOffset,itemLength) {
};
lime_text_harfbuzz_HBBuffer.clearContents = function(this1) {
};
lime_text_harfbuzz_HBBuffer.getGlyphInfo = function(this1) {
	return null;
};
lime_text_harfbuzz_HBBuffer.getGlyphPositions = function(this1) {
	return null;
};
lime_text_harfbuzz_HBBuffer.guessSegmentProperties = function(this1) {
};
lime_text_harfbuzz_HBBuffer.normalizeGlyphs = function(this1) {
};
lime_text_harfbuzz_HBBuffer.preallocate = function(this1,size) {
	return false;
};
lime_text_harfbuzz_HBBuffer.reset = function(this1) {
};
lime_text_harfbuzz_HBBuffer.reverse = function(this1) {
};
lime_text_harfbuzz_HBBuffer.reverseClusters = function(this1) {
};
lime_text_harfbuzz_HBBuffer.get_allocationSuccessful = function(this1) {
	return false;
};
lime_text_harfbuzz_HBBuffer.get_clusterLevel = function(this1) {
	return 0;
};
lime_text_harfbuzz_HBBuffer.set_clusterLevel = function(this1,value) {
	return value;
};
lime_text_harfbuzz_HBBuffer.get_contentType = function(this1) {
	return 0;
};
lime_text_harfbuzz_HBBuffer.set_contentType = function(this1,value) {
	return value;
};
lime_text_harfbuzz_HBBuffer.get_direction = function(this1) {
	return 0;
};
lime_text_harfbuzz_HBBuffer.set_direction = function(this1,value) {
	return value;
};
lime_text_harfbuzz_HBBuffer.get_empty = function() {
	return null;
};
lime_text_harfbuzz_HBBuffer.get_flags = function(this1) {
	return 0;
};
lime_text_harfbuzz_HBBuffer.set_flags = function(this1,value) {
	return value;
};
lime_text_harfbuzz_HBBuffer.get_language = function(this1) {
	return null;
};
lime_text_harfbuzz_HBBuffer.set_language = function(this1,value) {
	return value;
};
lime_text_harfbuzz_HBBuffer.get_length = function(this1) {
	return 0;
};
lime_text_harfbuzz_HBBuffer.set_length = function(this1,value) {
	return value;
};
lime_text_harfbuzz_HBBuffer.get_replacementCodepoint = function(this1) {
	return 0;
};
lime_text_harfbuzz_HBBuffer.set_replacementCodepoint = function(this1,value) {
	return value;
};
lime_text_harfbuzz_HBBuffer.get_script = function(this1) {
	return 0;
};
lime_text_harfbuzz_HBBuffer.set_script = function(this1,value) {
	return value;
};
lime_text_harfbuzz_HBBuffer.get_segmentProperties = function(this1) {
	return null;
};
lime_text_harfbuzz_HBBuffer.set_segmentProperties = function(this1,value) {
	return value;
};
var lime_text_harfbuzz_HBFTFont = {};
lime_text_harfbuzz_HBFTFont.__properties__ = {set_loadFlags:"set_loadFlags",get_loadFlags:"get_loadFlags"};
lime_text_harfbuzz_HBFTFont._new = function(font) {
	var this1;
	if(font.src != null) {
		this1 = null;
	} else {
		this1 = null;
	}
	return this1;
};
lime_text_harfbuzz_HBFTFont.get_loadFlags = function(this1) {
	return 0;
};
lime_text_harfbuzz_HBFTFont.set_loadFlags = function(this1,value) {
	return value;
};
var lime_text_harfbuzz_HBFace = {};
lime_text_harfbuzz_HBFace.__properties__ = {set_upem:"set_upem",get_upem:"get_upem",set_index:"set_index",get_index:"get_index",get_immutable:"get_immutable",set_glyphCount:"set_glyphCount",get_glyphCount:"get_glyphCount",get_empty:"get_empty"};
lime_text_harfbuzz_HBFace._new = function(blob,index) {
	var this1 = null;
	return this1;
};
lime_text_harfbuzz_HBFace.get_empty = function() {
	return null;
};
lime_text_harfbuzz_HBFace.get_glyphCount = function(this1) {
	return 0;
};
lime_text_harfbuzz_HBFace.set_glyphCount = function(this1,value) {
	return value;
};
lime_text_harfbuzz_HBFace.get_immutable = function(this1) {
	return false;
};
lime_text_harfbuzz_HBFace.get_index = function(this1) {
	return 0;
};
lime_text_harfbuzz_HBFace.set_index = function(this1,value) {
	return value;
};
lime_text_harfbuzz_HBFace.get_upem = function(this1) {
	return 0;
};
lime_text_harfbuzz_HBFace.set_upem = function(this1,value) {
	return value;
};
var lime_text_harfbuzz_HBFeature = function() {
};
$hxClasses["lime.text.harfbuzz.HBFeature"] = lime_text_harfbuzz_HBFeature;
lime_text_harfbuzz_HBFeature.__name__ = "lime.text.harfbuzz.HBFeature";
lime_text_harfbuzz_HBFeature.prototype = {
	__class__: lime_text_harfbuzz_HBFeature
};
var lime_text_harfbuzz_HBFont = {};
lime_text_harfbuzz_HBFont.__properties__ = {set_scale:"set_scale",get_scale:"get_scale",set_ppem:"set_ppem",get_ppem:"get_ppem",get_parent:"get_parent",get_immutable:"get_immutable",get_face:"get_face",get_empty:"get_empty"};
lime_text_harfbuzz_HBFont._new = function(face) {
	var this1 = null;
	return this1;
};
lime_text_harfbuzz_HBFont.addGlyphOriginForDirection = function(this1,glyph,direction,x,y) {
};
lime_text_harfbuzz_HBFont.createSubFont = function(this1) {
	return null;
};
lime_text_harfbuzz_HBFont.getGlyphAdvanceForDirection = function(this1,glyph,direction) {
	return null;
};
lime_text_harfbuzz_HBFont.getGlyphKerningForDirection = function(this1,glyph,firstGlyph,secondGlyph,direction) {
	return null;
};
lime_text_harfbuzz_HBFont.getGlyphOriginForDirection = function(this1,glyph,direction) {
	return null;
};
lime_text_harfbuzz_HBFont.glyphFromString = function(this1,s) {
	return 0;
};
lime_text_harfbuzz_HBFont.glyphToString = function(this1,codepoint) {
	return null;
};
lime_text_harfbuzz_HBFont.makeImmutable = function(this1) {
};
lime_text_harfbuzz_HBFont.subtractGlyphOriginForDirection = function(this1,glyph,direction,x,y) {
};
lime_text_harfbuzz_HBFont.get_empty = function() {
	return null;
};
lime_text_harfbuzz_HBFont.get_face = function(this1) {
	return null;
};
lime_text_harfbuzz_HBFont.get_immutable = function(this1) {
	return false;
};
lime_text_harfbuzz_HBFont.get_parent = function(this1) {
	return null;
};
lime_text_harfbuzz_HBFont.get_ppem = function(this1) {
	return null;
};
lime_text_harfbuzz_HBFont.set_ppem = function(this1,value) {
	return value;
};
lime_text_harfbuzz_HBFont.get_scale = function(this1) {
	return null;
};
lime_text_harfbuzz_HBFont.set_scale = function(this1,value) {
	return value;
};
var lime_text_harfbuzz_HBGlyphInfo = function() {
};
$hxClasses["lime.text.harfbuzz.HBGlyphInfo"] = lime_text_harfbuzz_HBGlyphInfo;
lime_text_harfbuzz_HBGlyphInfo.__name__ = "lime.text.harfbuzz.HBGlyphInfo";
lime_text_harfbuzz_HBGlyphInfo.prototype = {
	codepoint: null
	,mask: null
	,cluster: null
	,__class__: lime_text_harfbuzz_HBGlyphInfo
};
var lime_text_harfbuzz_HBGlyphPosition = function() {
};
$hxClasses["lime.text.harfbuzz.HBGlyphPosition"] = lime_text_harfbuzz_HBGlyphPosition;
lime_text_harfbuzz_HBGlyphPosition.__name__ = "lime.text.harfbuzz.HBGlyphPosition";
lime_text_harfbuzz_HBGlyphPosition.prototype = {
	xAdvance: null
	,xOffset: null
	,yAdvance: null
	,yOffset: null
	,__class__: lime_text_harfbuzz_HBGlyphPosition
};
var lime_text_harfbuzz_HBLanguage = {};
lime_text_harfbuzz_HBLanguage._new = function(language) {
	var this1 = null;
	return this1;
};
lime_text_harfbuzz_HBLanguage.toString = function(this1) {
	return null;
};
lime_text_harfbuzz_HBLanguage.fromString = function(value) {
	return lime_text_harfbuzz_HBLanguage._new(value);
};
var lime_text_harfbuzz_HBSegmentProperties = function() {
};
$hxClasses["lime.text.harfbuzz.HBSegmentProperties"] = lime_text_harfbuzz_HBSegmentProperties;
lime_text_harfbuzz_HBSegmentProperties.__name__ = "lime.text.harfbuzz.HBSegmentProperties";
lime_text_harfbuzz_HBSegmentProperties.prototype = {
	__class__: lime_text_harfbuzz_HBSegmentProperties
};
var lime_ui_FileDialog = function() {
	this.onSelectMultiple = new lime_app__$Event_$Array_$String_$_$Void();
	this.onSelect = new lime_app__$Event_$String_$Void();
	this.onSave = new lime_app__$Event_$String_$Void();
	this.onOpen = new lime_app__$Event_$lime_$utils_$Resource_$Void();
	this.onCancel = new lime_app__$Event_$Void_$Void();
};
$hxClasses["lime.ui.FileDialog"] = lime_ui_FileDialog;
lime_ui_FileDialog.__name__ = "lime.ui.FileDialog";
lime_ui_FileDialog.prototype = {
	onCancel: null
	,onOpen: null
	,onSave: null
	,onSelect: null
	,onSelectMultiple: null
	,browse: function(type,filter,defaultPath,title) {
		if(type == null) {
			type = lime_ui_FileDialogType.OPEN;
		}
		this.onCancel.dispatch();
		return false;
	}
	,open: function(filter,defaultPath,title) {
		this.onCancel.dispatch();
		return false;
	}
	,save: function(data,filter,defaultPath,title,type) {
		if(type == null) {
			type = "application/octet-stream";
		}
		if(data == null) {
			this.onCancel.dispatch();
			return false;
		}
		var defaultExtension = "";
		if(lime_graphics_Image.__isPNG(data)) {
			type = "image/png";
			defaultExtension = ".png";
		} else if(lime_graphics_Image.__isJPG(data)) {
			type = "image/jpeg";
			defaultExtension = ".jpg";
		} else if(lime_graphics_Image.__isGIF(data)) {
			type = "image/gif";
			defaultExtension = ".gif";
		} else if(lime_graphics_Image.__isWebP(data)) {
			type = "image/webp";
			defaultExtension = ".webp";
		}
		var path = defaultPath != null ? haxe_io_Path.withoutDirectory(defaultPath) : "download" + defaultExtension;
		var buffer = data.b.bufferValue;
		window.saveAs(new Blob([buffer],{ type : type}),path,true);
		this.onSave.dispatch(path);
		return true;
	}
	,__class__: lime_ui_FileDialog
};
var lime_ui_FileDialogType = $hxEnums["lime.ui.FileDialogType"] = { __ename__ : "lime.ui.FileDialogType", __constructs__ : ["OPEN","OPEN_MULTIPLE","SAVE","OPEN_DIRECTORY"]
	,OPEN: {_hx_index:0,__enum__:"lime.ui.FileDialogType",toString:$estr}
	,OPEN_MULTIPLE: {_hx_index:1,__enum__:"lime.ui.FileDialogType",toString:$estr}
	,SAVE: {_hx_index:2,__enum__:"lime.ui.FileDialogType",toString:$estr}
	,OPEN_DIRECTORY: {_hx_index:3,__enum__:"lime.ui.FileDialogType",toString:$estr}
};
var lime_ui_Gamepad = function(id) {
	this.onDisconnect = new lime_app__$Event_$Void_$Void();
	this.onButtonUp = new lime_app__$Event_$lime_$ui_$GamepadButton_$Void();
	this.onButtonDown = new lime_app__$Event_$lime_$ui_$GamepadButton_$Void();
	this.onAxisMove = new lime_app__$Event_$lime_$ui_$GamepadAxis_$Float_$Void();
	this.id = id;
	this.connected = true;
};
$hxClasses["lime.ui.Gamepad"] = lime_ui_Gamepad;
lime_ui_Gamepad.__name__ = "lime.ui.Gamepad";
lime_ui_Gamepad.addMappings = function(mappings) {
};
lime_ui_Gamepad.__connect = function(id) {
	if(!lime_ui_Gamepad.devices.h.hasOwnProperty(id)) {
		var gamepad = new lime_ui_Gamepad(id);
		lime_ui_Gamepad.devices.h[id] = gamepad;
		lime_ui_Gamepad.onConnect.dispatch(gamepad);
	}
};
lime_ui_Gamepad.__disconnect = function(id) {
	var gamepad = lime_ui_Gamepad.devices.h[id];
	if(gamepad != null) {
		gamepad.connected = false;
	}
	lime_ui_Gamepad.devices.remove(id);
	if(gamepad != null) {
		gamepad.onDisconnect.dispatch();
	}
};
lime_ui_Gamepad.prototype = {
	connected: null
	,id: null
	,onAxisMove: null
	,onButtonDown: null
	,onButtonUp: null
	,onDisconnect: null
	,get_guid: function() {
		var devices = lime_ui_Joystick.__getDeviceData();
		return devices[this.id].id;
	}
	,get_name: function() {
		var devices = lime_ui_Joystick.__getDeviceData();
		return devices[this.id].id;
	}
	,__class__: lime_ui_Gamepad
	,__properties__: {get_name:"get_name",get_guid:"get_guid"}
};
var lime_ui_GamepadAxis = {};
lime_ui_GamepadAxis.toString = function(this1) {
	switch(this1) {
	case 0:
		return "LEFT_X";
	case 1:
		return "LEFT_Y";
	case 2:
		return "RIGHT_X";
	case 3:
		return "RIGHT_Y";
	case 4:
		return "TRIGGER_LEFT";
	case 5:
		return "TRIGGER_RIGHT";
	default:
		return "UNKNOWN (" + this1 + ")";
	}
};
var lime_ui_GamepadButton = {};
lime_ui_GamepadButton.toString = function(this1) {
	switch(this1) {
	case 0:
		return "A";
	case 1:
		return "B";
	case 2:
		return "X";
	case 3:
		return "Y";
	case 4:
		return "BACK";
	case 5:
		return "GUIDE";
	case 6:
		return "START";
	case 7:
		return "LEFT_STICK";
	case 8:
		return "RIGHT_STICK";
	case 9:
		return "LEFT_SHOULDER";
	case 10:
		return "RIGHT_SHOULDER";
	case 11:
		return "DPAD_UP";
	case 12:
		return "DPAD_DOWN";
	case 13:
		return "DPAD_LEFT";
	case 14:
		return "DPAD_RIGHT";
	default:
		return "UNKNOWN (" + this1 + ")";
	}
};
var lime_ui_Joystick = function(id) {
	this.onTrackballMove = new lime_app__$Event_$Int_$Float_$Float_$Void();
	this.onHatMove = new lime_app__$Event_$Int_$lime_$ui_$JoystickHatPosition_$Void();
	this.onDisconnect = new lime_app__$Event_$Void_$Void();
	this.onButtonUp = new lime_app__$Event_$Int_$Void();
	this.onButtonDown = new lime_app__$Event_$Int_$Void();
	this.onAxisMove = new lime_app__$Event_$Int_$Float_$Void();
	this.id = id;
	this.connected = true;
};
$hxClasses["lime.ui.Joystick"] = lime_ui_Joystick;
lime_ui_Joystick.__name__ = "lime.ui.Joystick";
lime_ui_Joystick.__connect = function(id) {
	if(!lime_ui_Joystick.devices.h.hasOwnProperty(id)) {
		var joystick = new lime_ui_Joystick(id);
		lime_ui_Joystick.devices.h[id] = joystick;
		lime_ui_Joystick.onConnect.dispatch(joystick);
	}
};
lime_ui_Joystick.__disconnect = function(id) {
	var joystick = lime_ui_Joystick.devices.h[id];
	if(joystick != null) {
		joystick.connected = false;
	}
	lime_ui_Joystick.devices.remove(id);
	if(joystick != null) {
		joystick.onDisconnect.dispatch();
	}
};
lime_ui_Joystick.__getDeviceData = function() {
	if(navigator.getGamepads) {
		return navigator.getGamepads();
	} else if(navigator.webkitGetGamepads) {
		return navigator.webkitGetGamepads();
	} else {
		return null;
	}
};
lime_ui_Joystick.prototype = {
	connected: null
	,id: null
	,onAxisMove: null
	,onButtonDown: null
	,onButtonUp: null
	,onDisconnect: null
	,onHatMove: null
	,onTrackballMove: null
	,get_guid: function() {
		var devices = lime_ui_Joystick.__getDeviceData();
		return devices[this.id].id;
	}
	,get_name: function() {
		var devices = lime_ui_Joystick.__getDeviceData();
		return devices[this.id].id;
	}
	,get_numAxes: function() {
		var devices = lime_ui_Joystick.__getDeviceData();
		return devices[this.id].axes.length;
	}
	,get_numButtons: function() {
		var devices = lime_ui_Joystick.__getDeviceData();
		return devices[this.id].buttons.length;
	}
	,get_numHats: function() {
		return 0;
	}
	,get_numTrackballs: function() {
		return 0;
	}
	,__class__: lime_ui_Joystick
	,__properties__: {get_numTrackballs:"get_numTrackballs",get_numHats:"get_numHats",get_numButtons:"get_numButtons",get_numAxes:"get_numAxes",get_name:"get_name",get_guid:"get_guid"}
};
var lime_ui_JoystickHatPosition = {};
lime_ui_JoystickHatPosition.__properties__ = {set_up:"set_up",get_up:"get_up",set_right:"set_right",get_right:"get_right",set_left:"set_left",get_left:"get_left",set_down:"set_down",get_down:"get_down",set_center:"set_center",get_center:"get_center"};
lime_ui_JoystickHatPosition._new = function(value) {
	var this1 = value;
	return this1;
};
lime_ui_JoystickHatPosition.get_center = function(this1) {
	return this1 == 0;
};
lime_ui_JoystickHatPosition.set_center = function(this1,value) {
	if(value) {
		this1 = 0;
	}
	return value;
};
lime_ui_JoystickHatPosition.get_down = function(this1) {
	return (this1 & 4) > 0;
};
lime_ui_JoystickHatPosition.set_down = function(this1,value) {
	if(value) {
		this1 |= 4;
	} else {
		this1 &= 268435455 - 4;
	}
	return value;
};
lime_ui_JoystickHatPosition.get_left = function(this1) {
	return (this1 & 8) > 0;
};
lime_ui_JoystickHatPosition.set_left = function(this1,value) {
	if(value) {
		this1 |= 8;
	} else {
		this1 &= 268435455 - 8;
	}
	return value;
};
lime_ui_JoystickHatPosition.get_right = function(this1) {
	return (this1 & 2) > 0;
};
lime_ui_JoystickHatPosition.set_right = function(this1,value) {
	if(value) {
		this1 |= 2;
	} else {
		this1 &= 268435455 - 2;
	}
	return value;
};
lime_ui_JoystickHatPosition.get_up = function(this1) {
	return (this1 & 1) > 0;
};
lime_ui_JoystickHatPosition.set_up = function(this1,value) {
	if(value) {
		this1 |= 1;
	} else {
		this1 &= 268435455 - 1;
	}
	return value;
};
var lime_ui_KeyCode = {};
lime_ui_KeyCode.fromScanCode = function(scanCode) {
	return 0;
};
lime_ui_KeyCode.toScanCode = function(keyCode) {
	return 0;
};
lime_ui_KeyCode.gt = function(a,b) {
	return a > b;
};
lime_ui_KeyCode.gte = function(a,b) {
	return a >= b;
};
lime_ui_KeyCode.lt = function(a,b) {
	return a < b;
};
lime_ui_KeyCode.lte = function(a,b) {
	return a <= b;
};
lime_ui_KeyCode.plus = function(a,b) {
	return a + b;
};
var lime_ui_KeyModifier = {};
lime_ui_KeyModifier.__properties__ = {set_shiftKey:"set_shiftKey",get_shiftKey:"get_shiftKey",set_numLock:"set_numLock",get_numLock:"get_numLock",set_metaKey:"set_metaKey",get_metaKey:"get_metaKey",set_ctrlKey:"set_ctrlKey",get_ctrlKey:"get_ctrlKey",set_capsLock:"set_capsLock",get_capsLock:"get_capsLock",set_altKey:"set_altKey",get_altKey:"get_altKey"};
lime_ui_KeyModifier.get_altKey = function(this1) {
	if((this1 & 256) <= 0) {
		return (this1 & 512) > 0;
	} else {
		return true;
	}
};
lime_ui_KeyModifier.set_altKey = function(this1,value) {
	if(value) {
		this1 |= 768;
	} else {
		this1 &= 268435455 - 768;
	}
	return value;
};
lime_ui_KeyModifier.get_capsLock = function(this1) {
	if((this1 & 8192) <= 0) {
		return (this1 & 8192) > 0;
	} else {
		return true;
	}
};
lime_ui_KeyModifier.set_capsLock = function(this1,value) {
	if(value) {
		this1 |= 8192;
	} else {
		this1 &= 268435455 - 8192;
	}
	return value;
};
lime_ui_KeyModifier.get_ctrlKey = function(this1) {
	if((this1 & 64) <= 0) {
		return (this1 & 128) > 0;
	} else {
		return true;
	}
};
lime_ui_KeyModifier.set_ctrlKey = function(this1,value) {
	if(value) {
		this1 |= 192;
	} else {
		this1 &= 268435455 - 192;
	}
	return value;
};
lime_ui_KeyModifier.get_metaKey = function(this1) {
	if((this1 & 1024) <= 0) {
		return (this1 & 2048) > 0;
	} else {
		return true;
	}
};
lime_ui_KeyModifier.set_metaKey = function(this1,value) {
	if(value) {
		this1 |= 3072;
	} else {
		this1 &= 268435455 - 3072;
	}
	return value;
};
lime_ui_KeyModifier.get_numLock = function(this1) {
	if((this1 & 4096) <= 0) {
		return (this1 & 4096) > 0;
	} else {
		return true;
	}
};
lime_ui_KeyModifier.set_numLock = function(this1,value) {
	if(value) {
		this1 |= 4096;
	} else {
		this1 &= 268435455 - 4096;
	}
	return value;
};
lime_ui_KeyModifier.get_shiftKey = function(this1) {
	if((this1 & 1) <= 0) {
		return (this1 & 2) > 0;
	} else {
		return true;
	}
};
lime_ui_KeyModifier.set_shiftKey = function(this1,value) {
	if(value) {
		this1 |= 3;
	} else {
		this1 &= 268435455 - 3;
	}
	return value;
};
var lime_ui_MouseCursor = $hxEnums["lime.ui.MouseCursor"] = { __ename__ : "lime.ui.MouseCursor", __constructs__ : ["ARROW","CROSSHAIR","DEFAULT","MOVE","POINTER","RESIZE_NESW","RESIZE_NS","RESIZE_NWSE","RESIZE_WE","TEXT","WAIT","WAIT_ARROW","CUSTOM"]
	,ARROW: {_hx_index:0,__enum__:"lime.ui.MouseCursor",toString:$estr}
	,CROSSHAIR: {_hx_index:1,__enum__:"lime.ui.MouseCursor",toString:$estr}
	,DEFAULT: {_hx_index:2,__enum__:"lime.ui.MouseCursor",toString:$estr}
	,MOVE: {_hx_index:3,__enum__:"lime.ui.MouseCursor",toString:$estr}
	,POINTER: {_hx_index:4,__enum__:"lime.ui.MouseCursor",toString:$estr}
	,RESIZE_NESW: {_hx_index:5,__enum__:"lime.ui.MouseCursor",toString:$estr}
	,RESIZE_NS: {_hx_index:6,__enum__:"lime.ui.MouseCursor",toString:$estr}
	,RESIZE_NWSE: {_hx_index:7,__enum__:"lime.ui.MouseCursor",toString:$estr}
	,RESIZE_WE: {_hx_index:8,__enum__:"lime.ui.MouseCursor",toString:$estr}
	,TEXT: {_hx_index:9,__enum__:"lime.ui.MouseCursor",toString:$estr}
	,WAIT: {_hx_index:10,__enum__:"lime.ui.MouseCursor",toString:$estr}
	,WAIT_ARROW: {_hx_index:11,__enum__:"lime.ui.MouseCursor",toString:$estr}
	,CUSTOM: {_hx_index:12,__enum__:"lime.ui.MouseCursor",toString:$estr}
};
var lime_ui_MouseWheelMode = $hxEnums["lime.ui.MouseWheelMode"] = { __ename__ : "lime.ui.MouseWheelMode", __constructs__ : ["PIXELS","LINES","PAGES","UNKNOWN"]
	,PIXELS: {_hx_index:0,__enum__:"lime.ui.MouseWheelMode",toString:$estr}
	,LINES: {_hx_index:1,__enum__:"lime.ui.MouseWheelMode",toString:$estr}
	,PAGES: {_hx_index:2,__enum__:"lime.ui.MouseWheelMode",toString:$estr}
	,UNKNOWN: {_hx_index:3,__enum__:"lime.ui.MouseWheelMode",toString:$estr}
};
var lime_ui_ScanCode = {};
lime_ui_ScanCode.fromKeyCode = function(keyCode) {
	return lime_ui_KeyCode.toScanCode(keyCode);
};
lime_ui_ScanCode.toKeyCode = function(scanCode) {
	return lime_ui_KeyCode.fromScanCode(scanCode);
};
lime_ui_ScanCode.gt = function(a,b) {
	return a > b;
};
lime_ui_ScanCode.gte = function(a,b) {
	return a >= b;
};
lime_ui_ScanCode.lt = function(a,b) {
	return a < b;
};
lime_ui_ScanCode.lte = function(a,b) {
	return a <= b;
};
lime_ui_ScanCode.plus = function(a,b) {
	return a + b;
};
var lime_ui_Touch = function(x,y,id,dx,dy,pressure,device) {
	this.x = x;
	this.y = y;
	this.id = id;
	this.dx = dx;
	this.dy = dy;
	this.pressure = pressure;
	this.device = device;
};
$hxClasses["lime.ui.Touch"] = lime_ui_Touch;
lime_ui_Touch.__name__ = "lime.ui.Touch";
lime_ui_Touch.prototype = {
	device: null
	,dx: null
	,dy: null
	,id: null
	,pressure: null
	,x: null
	,y: null
	,__class__: lime_ui_Touch
};
var lime_ui_Window = function(application,attributes) {
	this.onTextInput = new lime_app__$Event_$String_$Void();
	this.onTextEdit = new lime_app__$Event_$String_$Int_$Int_$Void();
	this.onRestore = new lime_app__$Event_$Void_$Void();
	this.onResize = new lime_app__$Event_$Int_$Int_$Void();
	this.onRenderContextRestored = new lime_app__$Event_$lime_$graphics_$RenderContext_$Void();
	this.onRenderContextLost = new lime_app__$Event_$Void_$Void();
	this.onRender = new lime_app__$Event_$lime_$graphics_$RenderContext_$Void();
	this.onMove = new lime_app__$Event_$Float_$Float_$Void();
	this.onMouseWheel = new lime_app__$Event_$Float_$Float_$lime_$ui_$MouseWheelMode_$Void();
	this.onMouseUp = new lime_app__$Event_$Float_$Float_$Int_$Void();
	this.onMouseMoveRelative = new lime_app__$Event_$Float_$Float_$Void();
	this.onMouseMove = new lime_app__$Event_$Float_$Float_$Void();
	this.onMouseDown = new lime_app__$Event_$Float_$Float_$lime_$ui_$MouseButton_$Void();
	this.onMinimize = new lime_app__$Event_$Void_$Void();
	this.onMaximize = new lime_app__$Event_$Void_$Void();
	this.onLeave = new lime_app__$Event_$Void_$Void();
	this.onKeyUp = new lime_app__$Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void();
	this.onKeyDown = new lime_app__$Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void();
	this.onFullscreen = new lime_app__$Event_$Void_$Void();
	this.onFocusOut = new lime_app__$Event_$Void_$Void();
	this.onFocusIn = new lime_app__$Event_$Void_$Void();
	this.onExpose = new lime_app__$Event_$Void_$Void();
	this.onEnter = new lime_app__$Event_$Void_$Void();
	this.onDropFile = new lime_app__$Event_$String_$Void();
	this.onDeactivate = new lime_app__$Event_$Void_$Void();
	this.onClose = new lime_app__$Event_$Void_$Void();
	this.onActivate = new lime_app__$Event_$Void_$Void();
	this.application = application;
	this.__attributes = attributes != null ? attributes : { };
	if(Object.prototype.hasOwnProperty.call(this.__attributes,"parameters")) {
		this.parameters = this.__attributes.parameters;
	}
	this.__width = 0;
	this.__height = 0;
	this.__fullscreen = false;
	this.__scale = 1;
	this.__x = 0;
	this.__y = 0;
	this.__title = "";
	this.id = -1;
	this.__backend = new lime__$internal_backend_html5_HTML5Window(this);
};
$hxClasses["lime.ui.Window"] = lime_ui_Window;
lime_ui_Window.__name__ = "lime.ui.Window";
lime_ui_Window.prototype = {
	application: null
	,context: null
	,display: null
	,element: null
	,hidden: null
	,id: null
	,onActivate: null
	,onClose: null
	,onDeactivate: null
	,onDropFile: null
	,onEnter: null
	,onExpose: null
	,onFocusIn: null
	,onFocusOut: null
	,onFullscreen: null
	,onKeyDown: null
	,onKeyUp: null
	,onLeave: null
	,onMaximize: null
	,onMinimize: null
	,onMouseDown: null
	,onMouseMove: null
	,onMouseMoveRelative: null
	,onMouseUp: null
	,onMouseWheel: null
	,onMove: null
	,onRender: null
	,onRenderContextLost: null
	,onRenderContextRestored: null
	,onResize: null
	,onRestore: null
	,onTextEdit: null
	,onTextInput: null
	,parameters: null
	,scale: null
	,stage: null
	,__attributes: null
	,__backend: null
	,__borderless: null
	,__fullscreen: null
	,__height: null
	,__hidden: null
	,__maximized: null
	,__minimized: null
	,__resizable: null
	,__scale: null
	,__title: null
	,__width: null
	,__x: null
	,__y: null
	,alert: function(message,title) {
		this.__backend.alert(message,title);
	}
	,close: function() {
		this.__backend.close();
	}
	,focus: function() {
		this.__backend.focus();
	}
	,move: function(x,y) {
		this.__backend.move(x,y);
		this.__x = x;
		this.__y = y;
	}
	,readPixels: function(rect) {
		return this.__backend.readPixels(rect);
	}
	,resize: function(width,height) {
		this.__backend.resize(width,height);
		this.__width = width;
		this.__height = height;
	}
	,setIcon: function(image) {
		if(image == null) {
			return;
		}
		this.__backend.setIcon(image);
	}
	,toString: function() {
		return "[object Window]";
	}
	,warpMouse: function(x,y) {
		this.__backend.warpMouse(x,y);
	}
	,get_cursor: function() {
		return this.__backend.getCursor();
	}
	,set_cursor: function(value) {
		return this.__backend.setCursor(value);
	}
	,get_display: function() {
		return this.__backend.getDisplay();
	}
	,get_displayMode: function() {
		return this.__backend.getDisplayMode();
	}
	,set_displayMode: function(value) {
		return this.__backend.setDisplayMode(value);
	}
	,get_borderless: function() {
		return this.__borderless;
	}
	,set_borderless: function(value) {
		return this.__borderless = this.__backend.setBorderless(value);
	}
	,get_frameRate: function() {
		return this.__backend.getFrameRate();
	}
	,set_frameRate: function(value) {
		return this.__backend.setFrameRate(value);
	}
	,get_fullscreen: function() {
		return this.__fullscreen;
	}
	,set_fullscreen: function(value) {
		return this.__fullscreen = this.__backend.setFullscreen(value);
	}
	,get_height: function() {
		return this.__height;
	}
	,set_height: function(value) {
		this.resize(this.__width,value);
		return this.__height;
	}
	,get_hidden: function() {
		return this.__hidden;
	}
	,get_maximized: function() {
		return this.__maximized;
	}
	,set_maximized: function(value) {
		this.__minimized = false;
		return this.__maximized = this.__backend.setMaximized(value);
	}
	,get_minimized: function() {
		return this.__minimized;
	}
	,set_minimized: function(value) {
		this.__maximized = false;
		return this.__minimized = this.__backend.setMinimized(value);
	}
	,get_mouseLock: function() {
		return this.__backend.getMouseLock();
	}
	,set_mouseLock: function(value) {
		this.__backend.setMouseLock(value);
		return value;
	}
	,get_resizable: function() {
		return this.__resizable;
	}
	,set_resizable: function(value) {
		this.__resizable = this.__backend.setResizable(value);
		return this.__resizable;
	}
	,get_scale: function() {
		return this.__scale;
	}
	,get_textInputEnabled: function() {
		return this.__backend.getTextInputEnabled();
	}
	,set_textInputEnabled: function(value) {
		return this.__backend.setTextInputEnabled(value);
	}
	,get_title: function() {
		return this.__title;
	}
	,set_title: function(value) {
		return this.__title = this.__backend.setTitle(value);
	}
	,get_width: function() {
		return this.__width;
	}
	,set_width: function(value) {
		this.resize(value,this.__height);
		return this.__width;
	}
	,get_x: function() {
		return this.__x;
	}
	,set_x: function(value) {
		this.move(value,this.__y);
		return this.__x;
	}
	,get_y: function() {
		return this.__y;
	}
	,set_y: function(value) {
		this.move(this.__x,value);
		return this.__y;
	}
	,__class__: lime_ui_Window
	,__properties__: {set_y:"set_y",get_y:"get_y",set_x:"set_x",get_x:"get_x",set_width:"set_width",get_width:"get_width",set_title:"set_title",get_title:"get_title",set_textInputEnabled:"set_textInputEnabled",get_textInputEnabled:"get_textInputEnabled",get_scale:"get_scale",set_resizable:"set_resizable",get_resizable:"get_resizable",set_mouseLock:"set_mouseLock",get_mouseLock:"get_mouseLock",set_minimized:"set_minimized",get_minimized:"get_minimized",set_maximized:"set_maximized",get_maximized:"get_maximized",get_hidden:"get_hidden",set_height:"set_height",get_height:"get_height",set_fullscreen:"set_fullscreen",get_fullscreen:"get_fullscreen",set_frameRate:"set_frameRate",get_frameRate:"get_frameRate",set_displayMode:"set_displayMode",get_displayMode:"get_displayMode",get_display:"get_display",set_cursor:"set_cursor",get_cursor:"get_cursor",set_borderless:"set_borderless",get_borderless:"get_borderless"}
};
var lime_utils_TAError = $hxEnums["lime.utils.TAError"] = { __ename__ : "lime.utils.TAError", __constructs__ : ["RangeError"]
	,RangeError: {_hx_index:0,__enum__:"lime.utils.TAError",toString:$estr}
};
var lime_utils_AssetBundle = function() {
	this.data = new haxe_ds_StringMap();
	this.paths = [];
};
$hxClasses["lime.utils.AssetBundle"] = lime_utils_AssetBundle;
lime_utils_AssetBundle.__name__ = "lime.utils.AssetBundle";
lime_utils_AssetBundle.fromBytes = function(bytes) {
	var input = new haxe_io_BytesInput(bytes);
	return lime_utils_AssetBundle.__extractBundle(input);
};
lime_utils_AssetBundle.fromFile = function(path) {
	return null;
};
lime_utils_AssetBundle.loadFromBytes = function(bytes) {
	return lime_app_Future.withValue(lime_utils_AssetBundle.fromBytes(bytes));
};
lime_utils_AssetBundle.loadFromFile = function(path) {
	return lime_utils_Bytes.loadFromFile(path).then(lime_utils_AssetBundle.loadFromBytes);
};
lime_utils_AssetBundle.__extractBundle = function(input) {
	var entries = haxe_zip_Reader.readZip(input);
	var bundle = new lime_utils_AssetBundle();
	var _g_head = entries.h;
	while(_g_head != null) {
		var val = _g_head.item;
		_g_head = _g_head.next;
		var entry = val;
		if(entry.compressed) {
			var bytes = entry.data;
			var this1 = bundle.data;
			var key = entry.fileName;
			var value = lime_utils_Bytes.decompress(bytes,lime_utils_CompressionAlgorithm.DEFLATE);
			this1.h[key] = value;
		} else {
			bundle.data.h[entry.fileName] = entry.data;
		}
		bundle.paths.push(entry.fileName);
	}
	return bundle;
};
lime_utils_AssetBundle.prototype = {
	data: null
	,paths: null
	,__class__: lime_utils_AssetBundle
};
var lime_utils_AssetCache = function() {
	this.enabled = true;
	this.audio = new haxe_ds_StringMap();
	this.font = new haxe_ds_StringMap();
	this.image = new haxe_ds_StringMap();
	this.version = 627106;
};
$hxClasses["lime.utils.AssetCache"] = lime_utils_AssetCache;
lime_utils_AssetCache.__name__ = "lime.utils.AssetCache";
lime_utils_AssetCache.prototype = {
	audio: null
	,enabled: null
	,image: null
	,font: null
	,version: null
	,exists: function(id,type) {
		if(type == "IMAGE" || type == null) {
			if(Object.prototype.hasOwnProperty.call(this.image.h,id)) {
				return true;
			}
		}
		if(type == "FONT" || type == null) {
			if(Object.prototype.hasOwnProperty.call(this.font.h,id)) {
				return true;
			}
		}
		if(type == "SOUND" || type == "MUSIC" || type == null) {
			if(Object.prototype.hasOwnProperty.call(this.audio.h,id)) {
				return true;
			}
		}
		return false;
	}
	,set: function(id,type,asset) {
		switch(type) {
		case "FONT":
			this.font.h[id] = asset;
			break;
		case "IMAGE":
			if(!((asset) instanceof lime_graphics_Image)) {
				throw haxe_Exception.thrown("Cannot cache non-Image asset: " + Std.string(asset) + " as Image");
			}
			this.image.h[id] = asset;
			break;
		case "MUSIC":case "SOUND":
			if(!((asset) instanceof lime_media_AudioBuffer)) {
				throw haxe_Exception.thrown("Cannot cache non-AudioBuffer asset: " + Std.string(asset) + " as AudioBuffer");
			}
			this.audio.h[id] = asset;
			break;
		default:
			throw haxe_Exception.thrown(type + " assets are not cachable");
		}
	}
	,clear: function(prefix) {
		if(prefix == null) {
			this.audio = new haxe_ds_StringMap();
			this.font = new haxe_ds_StringMap();
			this.image = new haxe_ds_StringMap();
		} else {
			var keys = haxe_ds_StringMap.keysIterator(this.audio.h);
			var key = keys;
			while(key.hasNext()) {
				var key1 = key.next();
				if(StringTools.startsWith(key1,prefix)) {
					var _this = this.audio;
					if(Object.prototype.hasOwnProperty.call(_this.h,key1)) {
						delete(_this.h[key1]);
					}
				}
			}
			var keys = haxe_ds_StringMap.keysIterator(this.font.h);
			var key = keys;
			while(key.hasNext()) {
				var key1 = key.next();
				if(StringTools.startsWith(key1,prefix)) {
					var _this = this.font;
					if(Object.prototype.hasOwnProperty.call(_this.h,key1)) {
						delete(_this.h[key1]);
					}
				}
			}
			var keys = haxe_ds_StringMap.keysIterator(this.image.h);
			var key = keys;
			while(key.hasNext()) {
				var key1 = key.next();
				if(StringTools.startsWith(key1,prefix)) {
					var _this = this.image;
					if(Object.prototype.hasOwnProperty.call(_this.h,key1)) {
						delete(_this.h[key1]);
					}
				}
			}
		}
	}
	,__class__: lime_utils_AssetCache
};
var lime_utils_AssetLibrary = function() {
	this.types = new haxe_ds_StringMap();
	this.sizes = new haxe_ds_StringMap();
	this.preload = new haxe_ds_StringMap();
	this.paths = new haxe_ds_StringMap();
	this.pathGroups = new haxe_ds_StringMap();
	this.classTypes = new haxe_ds_StringMap();
	this.cachedText = new haxe_ds_StringMap();
	this.cachedImages = new haxe_ds_StringMap();
	this.cachedFonts = new haxe_ds_StringMap();
	this.cachedBytes = new haxe_ds_StringMap();
	this.cachedAudioBuffers = new haxe_ds_StringMap();
	this.onChange = new lime_app__$Event_$Void_$Void();
	this.bytesLoaded = 0;
	this.bytesTotal = 0;
};
$hxClasses["lime.utils.AssetLibrary"] = lime_utils_AssetLibrary;
lime_utils_AssetLibrary.__name__ = "lime.utils.AssetLibrary";
lime_utils_AssetLibrary.fromBytes = function(bytes,rootPath) {
	return lime_utils_AssetLibrary.fromManifest(lime_utils_AssetManifest.fromBytes(bytes,rootPath));
};
lime_utils_AssetLibrary.fromFile = function(path,rootPath) {
	return lime_utils_AssetLibrary.fromManifest(lime_utils_AssetManifest.fromFile(path,rootPath));
};
lime_utils_AssetLibrary.fromBundle = function(bundle) {
	if(Object.prototype.hasOwnProperty.call(bundle.data.h,"library.json")) {
		var manifest = lime_utils_AssetManifest.fromBytes(bundle.data.h["library.json"]);
		if(manifest != null) {
			var library = null;
			if(manifest.libraryType == null) {
				library = new lime_utils_AssetLibrary();
			} else {
				var name = manifest.libraryType;
				var libraryClass = $hxClasses[name];
				if(libraryClass != null) {
					library = Type.createInstance(libraryClass,manifest.libraryArgs);
				} else {
					lime_utils_Log.warn("Could not find library type: " + manifest.libraryType,{ fileName : "lime/utils/AssetLibrary.hx", lineNumber : 122, className : "lime.utils.AssetLibrary", methodName : "fromBundle"});
					return null;
				}
			}
			library.__fromBundle(bundle,manifest);
			return library;
		}
	} else {
		var library = new lime_utils_AssetLibrary();
		library.__fromBundle(bundle);
		return library;
	}
	return null;
};
lime_utils_AssetLibrary.fromManifest = function(manifest) {
	if(manifest == null) {
		return null;
	}
	var library = null;
	if(manifest.libraryType == null) {
		library = new lime_utils_AssetLibrary();
	} else {
		var name = manifest.libraryType;
		var libraryClass = $hxClasses[name];
		if(libraryClass != null) {
			library = Type.createInstance(libraryClass,manifest.libraryArgs);
		} else {
			lime_utils_Log.warn("Could not find library type: " + manifest.libraryType,{ fileName : "lime/utils/AssetLibrary.hx", lineNumber : 160, className : "lime.utils.AssetLibrary", methodName : "fromManifest"});
			return null;
		}
	}
	library.__fromManifest(manifest);
	return library;
};
lime_utils_AssetLibrary.loadFromBytes = function(bytes,rootPath) {
	return lime_utils_AssetManifest.loadFromBytes(bytes,rootPath).then(function(manifest) {
		return lime_utils_AssetLibrary.loadFromManifest(manifest);
	});
};
lime_utils_AssetLibrary.loadFromFile = function(path,rootPath) {
	return lime_utils_AssetManifest.loadFromFile(path,rootPath).then(function(manifest) {
		return lime_utils_AssetLibrary.loadFromManifest(manifest);
	});
};
lime_utils_AssetLibrary.loadFromManifest = function(manifest) {
	var library = lime_utils_AssetLibrary.fromManifest(manifest);
	if(library != null) {
		return library.load();
	} else {
		return lime_app_Future.withError("Could not load asset manifest");
	}
};
lime_utils_AssetLibrary.prototype = {
	onChange: null
	,assetsLoaded: null
	,assetsTotal: null
	,bytesLoaded: null
	,bytesLoadedCache: null
	,bytesTotal: null
	,cachedAudioBuffers: null
	,cachedBytes: null
	,cachedFonts: null
	,cachedImages: null
	,cachedText: null
	,classTypes: null
	,loaded: null
	,pathGroups: null
	,paths: null
	,preload: null
	,promise: null
	,sizes: null
	,types: null
	,exists: function(id,type) {
		var requestedType = type != null ? js_Boot.__cast(type , String) : null;
		var assetType = this.types.h[id];
		if(assetType != null) {
			if(assetType == requestedType || (requestedType == "SOUND" || requestedType == "MUSIC") && (assetType == "MUSIC" || assetType == "SOUND")) {
				return true;
			}
			if(requestedType == "BINARY" || requestedType == null || assetType == "BINARY" && requestedType == "TEXT") {
				return true;
			}
		}
		return false;
	}
	,getAsset: function(id,type) {
		switch(type) {
		case "BINARY":
			return this.getBytes(id);
		case "FONT":
			return this.getFont(id);
		case "IMAGE":
			return this.getImage(id);
		case "MUSIC":case "SOUND":
			return this.getAudioBuffer(id);
		case "TEMPLATE":
			throw haxe_Exception.thrown("Not sure how to get template: " + id);
		case "TEXT":
			return this.getText(id);
		default:
			throw haxe_Exception.thrown("Unknown asset type: " + type);
		}
	}
	,getAudioBuffer: function(id) {
		if(Object.prototype.hasOwnProperty.call(this.cachedAudioBuffers.h,id)) {
			return this.cachedAudioBuffers.h[id];
		} else if(Object.prototype.hasOwnProperty.call(this.classTypes.h,id)) {
			return lime_media_AudioBuffer.fromBytes(js_Boot.__cast(Type.createInstance(this.classTypes.h[id],[]) , haxe_io_Bytes));
		} else {
			return lime_media_AudioBuffer.fromFile(this.paths.h[id]);
		}
	}
	,getBytes: function(id) {
		if(Object.prototype.hasOwnProperty.call(this.cachedBytes.h,id)) {
			return this.cachedBytes.h[id];
		} else if(Object.prototype.hasOwnProperty.call(this.cachedText.h,id)) {
			var bytes = lime_utils_Bytes.ofString(this.cachedText.h[id]);
			this.cachedBytes.h[id] = bytes;
			return bytes;
		} else if(Object.prototype.hasOwnProperty.call(this.classTypes.h,id)) {
			return js_Boot.__cast(Type.createInstance(this.classTypes.h[id],[]) , haxe_io_Bytes);
		} else {
			return lime_utils_Bytes.fromFile(this.paths.h[id]);
		}
	}
	,getFont: function(id) {
		if(Object.prototype.hasOwnProperty.call(this.cachedFonts.h,id)) {
			return this.cachedFonts.h[id];
		} else if(Object.prototype.hasOwnProperty.call(this.classTypes.h,id)) {
			return js_Boot.__cast(Type.createInstance(this.classTypes.h[id],[]) , lime_text_Font);
		} else {
			return lime_text_Font.fromFile(this.paths.h[id]);
		}
	}
	,getImage: function(id) {
		if(Object.prototype.hasOwnProperty.call(this.cachedImages.h,id)) {
			return this.cachedImages.h[id];
		} else if(Object.prototype.hasOwnProperty.call(this.classTypes.h,id)) {
			return js_Boot.__cast(Type.createInstance(this.classTypes.h[id],[]) , lime_graphics_Image);
		} else {
			return lime_graphics_Image.fromFile(this.paths.h[id]);
		}
	}
	,getPath: function(id) {
		if(Object.prototype.hasOwnProperty.call(this.paths.h,id)) {
			return this.paths.h[id];
		} else if(Object.prototype.hasOwnProperty.call(this.pathGroups.h,id)) {
			return this.pathGroups.h[id][0];
		} else {
			return null;
		}
	}
	,getText: function(id) {
		if(Object.prototype.hasOwnProperty.call(this.cachedText.h,id)) {
			return this.cachedText.h[id];
		} else {
			var bytes = this.getBytes(id);
			if(bytes == null) {
				return null;
			} else {
				return bytes.getString(0,bytes.length);
			}
		}
	}
	,isLocal: function(id,type) {
		if(Object.prototype.hasOwnProperty.call(this.classTypes.h,id)) {
			return true;
		}
		var requestedType = type != null ? js_Boot.__cast(type , String) : null;
		if(requestedType == null) {
			if(!Object.prototype.hasOwnProperty.call(this.cachedBytes.h,id)) {
				return Object.prototype.hasOwnProperty.call(this.cachedText.h,id);
			} else {
				return true;
			}
		} else {
			switch(requestedType) {
			case "FONT":
				return Object.prototype.hasOwnProperty.call(this.cachedFonts.h,id);
			case "IMAGE":
				return Object.prototype.hasOwnProperty.call(this.cachedImages.h,id);
			case "MUSIC":case "SOUND":
				return Object.prototype.hasOwnProperty.call(this.cachedAudioBuffers.h,id);
			default:
				if(!Object.prototype.hasOwnProperty.call(this.cachedBytes.h,id)) {
					return Object.prototype.hasOwnProperty.call(this.cachedText.h,id);
				} else {
					return true;
				}
			}
		}
	}
	,list: function(type) {
		var requestedType = type != null ? js_Boot.__cast(type , String) : null;
		var items = [];
		var id = haxe_ds_StringMap.keysIterator(this.types.h);
		while(id.hasNext()) {
			var id1 = id.next();
			if(requestedType == null || this.exists(id1,type)) {
				items.push(id1);
			}
		}
		return items;
	}
	,loadAsset: function(id,type) {
		switch(type) {
		case "BINARY":
			return this.loadBytes(id);
		case "FONT":
			return this.loadFont(id);
		case "IMAGE":
			return this.loadImage(id);
		case "MUSIC":case "SOUND":
			return this.loadAudioBuffer(id);
		case "TEMPLATE":
			throw haxe_Exception.thrown("Not sure how to load template: " + id);
		case "TEXT":
			return this.loadText(id);
		default:
			throw haxe_Exception.thrown("Unknown asset type: " + type);
		}
	}
	,load: function() {
		if(this.loaded) {
			return lime_app_Future.withValue(this);
		}
		if(this.promise == null) {
			this.promise = new lime_app_Promise();
			this.bytesLoadedCache = new haxe_ds_StringMap();
			this.assetsLoaded = 0;
			this.assetsTotal = 1;
			var id = haxe_ds_StringMap.keysIterator(this.preload.h);
			while(id.hasNext()) {
				var id1 = id.next();
				if(!this.preload.h[id1]) {
					continue;
				}
				lime_utils_Log.verbose("Preloading asset: " + id1 + " [" + this.types.h[id1] + "]",{ fileName : "lime/utils/AssetLibrary.hx", lineNumber : 405, className : "lime.utils.AssetLibrary", methodName : "load"});
				var _g = this.types.h[id1];
				if(_g != null) {
					switch(_g) {
					case "BINARY":
						this.assetsTotal++;
						var future = this.loadBytes(id1);
						future.onProgress((function(id,_g) {
							return function(bytesLoaded,bytesTotal) {
								_g[0](id[0],bytesLoaded,bytesTotal);
							};
						})([id1],[$bind(this,this.load_onProgress)]));
						future.onError((function(id,_g) {
							return function(message) {
								_g[0](id[0],message);
							};
						})([id1],[$bind(this,this.load_onError)]));
						future.onComplete((function(id,_g) {
							return function(bytes) {
								_g[0](id[0],bytes);
							};
						})([id1],[$bind(this,this.loadBytes_onComplete)]));
						break;
					case "FONT":
						this.assetsTotal++;
						var future1 = this.loadFont(id1);
						future1.onProgress((function(id,_g) {
							return function(bytesLoaded,bytesTotal) {
								_g[0](id[0],bytesLoaded,bytesTotal);
							};
						})([id1],[$bind(this,this.load_onProgress)]));
						future1.onError((function(id,_g) {
							return function(message) {
								_g[0](id[0],message);
							};
						})([id1],[$bind(this,this.load_onError)]));
						future1.onComplete((function(id,_g) {
							return function(font) {
								_g[0](id[0],font);
							};
						})([id1],[$bind(this,this.loadFont_onComplete)]));
						break;
					case "IMAGE":
						this.assetsTotal++;
						var future2 = this.loadImage(id1);
						future2.onProgress((function(id,_g) {
							return function(bytesLoaded,bytesTotal) {
								_g[0](id[0],bytesLoaded,bytesTotal);
							};
						})([id1],[$bind(this,this.load_onProgress)]));
						future2.onError((function(id,_g) {
							return function(message) {
								_g[0](id[0],message);
							};
						})([id1],[$bind(this,this.load_onError)]));
						future2.onComplete((function(id,_g) {
							return function(image) {
								_g[0](id[0],image);
							};
						})([id1],[$bind(this,this.loadImage_onComplete)]));
						break;
					case "MUSIC":case "SOUND":
						this.assetsTotal++;
						var future3 = this.loadAudioBuffer(id1);
						future3.onProgress((function(id,_g) {
							return function(bytesLoaded,bytesTotal) {
								_g[0](id[0],bytesLoaded,bytesTotal);
							};
						})([id1],[$bind(this,this.load_onProgress)]));
						future3.onError((function(id,_g) {
							return function(message) {
								_g[0](id[0],message);
							};
						})([id1],[$bind(this,this.loadAudioBuffer_onError)]));
						future3.onComplete((function(id,_g) {
							return function(audioBuffer) {
								_g[0](id[0],audioBuffer);
							};
						})([id1],[$bind(this,this.loadAudioBuffer_onComplete)]));
						break;
					case "TEXT":
						this.assetsTotal++;
						var future4 = this.loadText(id1);
						future4.onProgress((function(id,_g) {
							return function(bytesLoaded,bytesTotal) {
								_g[0](id[0],bytesLoaded,bytesTotal);
							};
						})([id1],[$bind(this,this.load_onProgress)]));
						future4.onError((function(id,_g) {
							return function(message) {
								_g[0](id[0],message);
							};
						})([id1],[$bind(this,this.load_onError)]));
						future4.onComplete((function(id,_g) {
							return function(text) {
								_g[0](id[0],text);
							};
						})([id1],[$bind(this,this.loadText_onComplete)]));
						break;
					default:
					}
				}
			}
			this.__assetLoaded(null);
		}
		return this.promise.future;
	}
	,loadAudioBuffer: function(id) {
		if(Object.prototype.hasOwnProperty.call(this.cachedAudioBuffers.h,id)) {
			return lime_app_Future.withValue(this.cachedAudioBuffers.h[id]);
		} else if(Object.prototype.hasOwnProperty.call(this.classTypes.h,id)) {
			return lime_app_Future.withValue(Type.createInstance(this.classTypes.h[id],[]));
		} else if(Object.prototype.hasOwnProperty.call(this.pathGroups.h,id)) {
			return lime_media_AudioBuffer.loadFromFiles(this.pathGroups.h[id]);
		} else {
			return lime_media_AudioBuffer.loadFromFile(this.paths.h[id]);
		}
	}
	,loadBytes: function(id) {
		if(Object.prototype.hasOwnProperty.call(this.cachedBytes.h,id)) {
			return lime_app_Future.withValue(this.cachedBytes.h[id]);
		} else if(Object.prototype.hasOwnProperty.call(this.classTypes.h,id)) {
			return lime_app_Future.withValue(Type.createInstance(this.classTypes.h[id],[]));
		} else {
			return lime_utils_Bytes.loadFromFile(this.paths.h[id]);
		}
	}
	,loadFont: function(id) {
		if(Object.prototype.hasOwnProperty.call(this.cachedFonts.h,id)) {
			return lime_app_Future.withValue(this.cachedFonts.h[id]);
		} else if(Object.prototype.hasOwnProperty.call(this.classTypes.h,id)) {
			var font = Type.createInstance(this.classTypes.h[id],[]);
			return font.__loadFromName(font.name);
		} else {
			return lime_text_Font.loadFromName(this.paths.h[id]);
		}
	}
	,loadImage: function(id) {
		var _gthis = this;
		if(Object.prototype.hasOwnProperty.call(this.cachedImages.h,id)) {
			return lime_app_Future.withValue(this.cachedImages.h[id]);
		} else if(Object.prototype.hasOwnProperty.call(this.classTypes.h,id)) {
			return lime_app_Future.withValue(Type.createInstance(this.classTypes.h[id],[]));
		} else if(Object.prototype.hasOwnProperty.call(this.cachedBytes.h,id)) {
			return lime_graphics_Image.loadFromBytes(this.cachedBytes.h[id]).then(function(image) {
				var _this = _gthis.cachedBytes;
				if(Object.prototype.hasOwnProperty.call(_this.h,id)) {
					delete(_this.h[id]);
				}
				_gthis.cachedImages.h[id] = image;
				return lime_app_Future.withValue(image);
			});
		} else {
			return lime_graphics_Image.loadFromFile(this.paths.h[id]);
		}
	}
	,loadText: function(id) {
		if(Object.prototype.hasOwnProperty.call(this.cachedText.h,id)) {
			return lime_app_Future.withValue(this.cachedText.h[id]);
		} else if(Object.prototype.hasOwnProperty.call(this.cachedBytes.h,id) || Object.prototype.hasOwnProperty.call(this.classTypes.h,id)) {
			var bytes = this.getBytes(id);
			if(bytes == null) {
				return lime_app_Future.withValue(null);
			} else {
				var text = bytes.getString(0,bytes.length);
				this.cachedText.h[id] = text;
				return lime_app_Future.withValue(text);
			}
		} else {
			var request = new lime_net__$HTTPRequest_$String();
			return request.load(this.paths.h[id]);
		}
	}
	,unload: function() {
	}
	,__assetLoaded: function(id) {
		this.assetsLoaded++;
		if(id != null) {
			lime_utils_Log.verbose("Loaded asset: " + id + " [" + this.types.h[id] + "] (" + (this.assetsLoaded - 1) + "/" + (this.assetsTotal - 1) + ")",{ fileName : "lime/utils/AssetLibrary.hx", lineNumber : 619, className : "lime.utils.AssetLibrary", methodName : "__assetLoaded"});
		}
		if(id != null) {
			var size = Object.prototype.hasOwnProperty.call(this.sizes.h,id) ? this.sizes.h[id] : 0;
			if(!Object.prototype.hasOwnProperty.call(this.bytesLoadedCache.h,id)) {
				this.bytesLoaded += size;
			} else {
				var cache = this.bytesLoadedCache.h[id];
				if(cache < size) {
					this.bytesLoaded += size - cache;
				}
			}
			this.bytesLoadedCache.h[id] = size;
		}
		if(this.assetsLoaded < this.assetsTotal) {
			this.promise.progress(this.bytesLoaded,this.bytesTotal);
		} else {
			this.loaded = true;
			this.promise.progress(this.bytesTotal,this.bytesTotal);
			this.promise.complete(this);
		}
	}
	,__cacheBreak: function(path) {
		return lime_utils_Assets.__cacheBreak(path);
	}
	,__fromBundle: function(bundle,manifest) {
		if(manifest != null) {
			var id;
			var data;
			var type;
			var _g = 0;
			var _g1 = manifest.assets;
			while(_g < _g1.length) {
				var asset = _g1[_g];
				++_g;
				id = Object.prototype.hasOwnProperty.call(asset,"id") ? asset.id : asset.path;
				data = bundle.data.h[asset.path];
				if(Object.prototype.hasOwnProperty.call(asset,"type")) {
					type = asset.type;
					if(type == "TEXT") {
						this.cachedText.h[id] = data != null ? Std.string(data) : null;
					} else {
						this.cachedBytes.h[id] = data;
					}
					this.types.h[id] = asset.type;
				} else {
					this.cachedBytes.h[id] = data;
					this.types.h[id] = "BINARY";
				}
			}
		} else {
			var _g = 0;
			var _g1 = bundle.paths;
			while(_g < _g1.length) {
				var path = _g1[_g];
				++_g;
				this.cachedBytes.h[path] = bundle.data.h[path];
				this.types.h[path] = "BINARY";
			}
		}
	}
	,__fromManifest: function(manifest) {
		var hasSize = manifest.version >= 2;
		var size;
		var id;
		var pathGroup;
		var classRef;
		var basePath = manifest.rootPath;
		if(basePath == null) {
			basePath = "";
		}
		if(basePath != "") {
			basePath += "/";
		}
		var _g = 0;
		var _g1 = manifest.assets;
		while(_g < _g1.length) {
			var asset = _g1[_g];
			++_g;
			size = hasSize && Object.prototype.hasOwnProperty.call(asset,"size") ? asset.size : 100;
			id = Object.prototype.hasOwnProperty.call(asset,"id") ? asset.id : asset.path;
			if(Object.prototype.hasOwnProperty.call(asset,"path")) {
				var this1 = this.paths;
				var value = this.__cacheBreak(this.__resolvePath(basePath + Std.string(Reflect.field(asset,"path"))));
				this1.h[id] = value;
			}
			if(Object.prototype.hasOwnProperty.call(asset,"pathGroup")) {
				pathGroup = Reflect.field(asset,"pathGroup");
				var _g2 = 0;
				var _g3 = pathGroup.length;
				while(_g2 < _g3) {
					var i = _g2++;
					pathGroup[i] = this.__cacheBreak(this.__resolvePath(basePath + pathGroup[i]));
				}
				this.pathGroups.h[id] = pathGroup;
			}
			this.sizes.h[id] = size;
			this.types.h[id] = asset.type;
			if(Object.prototype.hasOwnProperty.call(asset,"preload")) {
				this.preload.h[id] = Reflect.field(asset,"preload");
			}
			if(Object.prototype.hasOwnProperty.call(asset,"className")) {
				var name = Reflect.field(asset,"className");
				classRef = $hxClasses[name];
				this.classTypes.h[id] = classRef;
			}
		}
		this.bytesTotal = 0;
		var _g = 0;
		var _g1 = manifest.assets;
		while(_g < _g1.length) {
			var asset = _g1[_g];
			++_g;
			id = Object.prototype.hasOwnProperty.call(asset,"id") ? asset.id : asset.path;
			if(Object.prototype.hasOwnProperty.call(this.preload.h,id) && this.preload.h[id] && Object.prototype.hasOwnProperty.call(this.sizes.h,id)) {
				this.bytesTotal += this.sizes.h[id];
			}
		}
	}
	,__resolvePath: function(path) {
		path = StringTools.replace(path,"\\","/");
		var colonIdx = path.indexOf(":");
		if(StringTools.startsWith(path,"http") && colonIdx > 0) {
			var lastSlashIdx = colonIdx + 3;
			var httpSection = HxOverrides.substr(path,0,lastSlashIdx);
			path = httpSection + StringTools.replace(HxOverrides.substr(path,lastSlashIdx,null),"//","/");
		} else {
			path = StringTools.replace(path,"//","/");
		}
		if(path.indexOf("./") > -1) {
			var split = path.split("/");
			var newPath = [];
			var _g = 0;
			var _g1 = split.length;
			while(_g < _g1) {
				var i = _g++;
				if(split[i] == "..") {
					if(i == 0 || newPath[i - 1] == "..") {
						newPath.push("..");
					} else {
						newPath.pop();
					}
				} else if(split[i] == ".") {
					if(i == 0) {
						newPath.push(".");
					}
				} else {
					newPath.push(split[i]);
				}
			}
			path = newPath.join("/");
		}
		return path;
	}
	,loadAudioBuffer_onComplete: function(id,audioBuffer) {
		this.cachedAudioBuffers.h[id] = audioBuffer;
		if(Object.prototype.hasOwnProperty.call(this.pathGroups.h,id)) {
			var pathGroup = this.pathGroups.h[id];
			var otherID = haxe_ds_StringMap.keysIterator(this.pathGroups.h);
			while(otherID.hasNext()) {
				var otherID1 = otherID.next();
				if(otherID1 == id) {
					continue;
				}
				var _g = 0;
				while(_g < pathGroup.length) {
					var path = pathGroup[_g];
					++_g;
					if(this.pathGroups.h[otherID1].indexOf(path) > -1) {
						this.cachedAudioBuffers.h[otherID1] = audioBuffer;
						break;
					}
				}
			}
		}
		this.__assetLoaded(id);
	}
	,loadAudioBuffer_onError: function(id,message) {
		if(message != null && message != "") {
			lime_utils_Log.warn("Could not load \"" + id + "\": " + Std.string(message),{ fileName : "lime/utils/AssetLibrary.hx", lineNumber : 865, className : "lime.utils.AssetLibrary", methodName : "loadAudioBuffer_onError"});
		} else {
			lime_utils_Log.warn("Could not load \"" + id + "\"",{ fileName : "lime/utils/AssetLibrary.hx", lineNumber : 869, className : "lime.utils.AssetLibrary", methodName : "loadAudioBuffer_onError"});
		}
		this.loadAudioBuffer_onComplete(id,new lime_media_AudioBuffer());
	}
	,loadBytes_onComplete: function(id,bytes) {
		this.cachedBytes.h[id] = bytes;
		this.__assetLoaded(id);
	}
	,loadFont_onComplete: function(id,font) {
		this.cachedFonts.h[id] = font;
		this.__assetLoaded(id);
	}
	,loadImage_onComplete: function(id,image) {
		this.cachedImages.h[id] = image;
		this.__assetLoaded(id);
	}
	,loadText_onComplete: function(id,text) {
		this.cachedText.h[id] = text;
		this.__assetLoaded(id);
	}
	,load_onError: function(id,message) {
		if(message != null && message != "") {
			this.promise.error("Error loading asset \"" + id + "\": " + Std.string(message));
		} else {
			this.promise.error("Error loading asset \"" + id + "\"");
		}
	}
	,load_onProgress: function(id,bytesLoaded,bytesTotal) {
		if(bytesLoaded > 0) {
			var size = this.sizes.h[id];
			var percent;
			if(bytesTotal > 0) {
				percent = bytesLoaded / bytesTotal;
				if(percent > 1) {
					percent = 1;
				}
				bytesLoaded = Math.floor(percent * size);
			} else if(bytesLoaded > size) {
				bytesLoaded = size;
			}
			if(Object.prototype.hasOwnProperty.call(this.bytesLoadedCache.h,id)) {
				var cache = this.bytesLoadedCache.h[id];
				if(bytesLoaded != cache) {
					this.bytesLoaded += bytesLoaded - cache;
				}
			} else {
				this.bytesLoaded += bytesLoaded;
			}
			this.bytesLoadedCache.h[id] = bytesLoaded;
			this.promise.progress(this.bytesLoaded,this.bytesTotal);
		}
	}
	,__class__: lime_utils_AssetLibrary
};
var lime_utils_AssetManifest = function() {
	this.assets = [];
	this.libraryArgs = [];
	this.version = 2;
};
$hxClasses["lime.utils.AssetManifest"] = lime_utils_AssetManifest;
lime_utils_AssetManifest.__name__ = "lime.utils.AssetManifest";
lime_utils_AssetManifest.fromBytes = function(bytes,rootPath) {
	if(bytes != null) {
		return lime_utils_AssetManifest.parse(bytes.getString(0,bytes.length),rootPath);
	} else {
		return null;
	}
};
lime_utils_AssetManifest.fromFile = function(path,rootPath) {
	path = lime_utils_AssetManifest.__resolvePath(path);
	rootPath = lime_utils_AssetManifest.__resolveRootPath(rootPath,path);
	if(path == null) {
		return null;
	}
	return lime_utils_AssetManifest.fromBytes(lime_utils_Bytes.fromFile(path),rootPath);
};
lime_utils_AssetManifest.loadFromBytes = function(bytes,rootPath) {
	return lime_app_Future.withValue(lime_utils_AssetManifest.fromBytes(bytes,rootPath));
};
lime_utils_AssetManifest.loadFromFile = function(path,rootPath) {
	path = lime_utils_AssetManifest.__resolvePath(path);
	rootPath = lime_utils_AssetManifest.__resolveRootPath(rootPath,path);
	if(path == null) {
		return null;
	}
	return lime_utils_Bytes.loadFromFile(path).then(function(bytes) {
		return lime_app_Future.withValue(lime_utils_AssetManifest.fromBytes(bytes,rootPath));
	});
};
lime_utils_AssetManifest.parse = function(data,rootPath) {
	if(data == null || data == "") {
		return null;
	}
	var manifestData = JSON.parse(data);
	var manifest = new lime_utils_AssetManifest();
	if(Object.prototype.hasOwnProperty.call(manifestData,"name")) {
		manifest.name = manifestData.name;
	}
	if(Object.prototype.hasOwnProperty.call(manifestData,"libraryType")) {
		manifest.libraryType = manifestData.libraryType;
	}
	if(Object.prototype.hasOwnProperty.call(manifestData,"libraryArgs")) {
		manifest.libraryArgs = manifestData.libraryArgs;
	}
	if(Object.prototype.hasOwnProperty.call(manifestData,"assets")) {
		var assets = manifestData.assets;
		if(Object.prototype.hasOwnProperty.call(manifestData,"version") && manifestData.version <= 2) {
			manifest.assets = haxe_Unserializer.run(assets);
		} else {
			manifest.assets = assets;
		}
	}
	if(Object.prototype.hasOwnProperty.call(manifestData,"rootPath")) {
		manifest.rootPath = manifestData.rootPath;
	}
	if(rootPath != null && rootPath != "") {
		if(manifest.rootPath == null || manifest.rootPath == "") {
			manifest.rootPath = rootPath;
		} else {
			manifest.rootPath = rootPath + "/" + manifest.rootPath;
		}
	}
	return manifest;
};
lime_utils_AssetManifest.__resolvePath = function(path) {
	if(path == null) {
		return null;
	}
	var queryIndex = path.indexOf("?");
	var basePath;
	if(queryIndex > -1) {
		basePath = HxOverrides.substr(path,0,queryIndex);
	} else {
		basePath = path;
	}
	basePath = StringTools.replace(basePath,"\\","/");
	while(StringTools.endsWith(basePath,"/")) basePath = HxOverrides.substr(basePath,0,basePath.length - 1);
	if(StringTools.endsWith(basePath,".bundle")) {
		if(queryIndex > -1) {
			return basePath + "/library.json" + HxOverrides.substr(path,queryIndex,null);
		} else {
			return basePath + "/library.json";
		}
	} else {
		return path;
	}
};
lime_utils_AssetManifest.__resolveRootPath = function(rootPath,path) {
	if(rootPath != null) {
		return rootPath;
	}
	var queryIndex = path.indexOf("?");
	if(queryIndex > -1) {
		rootPath = HxOverrides.substr(path,0,queryIndex);
	} else {
		rootPath = path;
	}
	rootPath = StringTools.replace(rootPath,"\\","/");
	while(StringTools.endsWith(rootPath,"/")) {
		if(rootPath == "/") {
			return rootPath;
		}
		rootPath = HxOverrides.substr(rootPath,0,rootPath.length - 1);
	}
	if(StringTools.endsWith(rootPath,".bundle")) {
		return rootPath;
	} else {
		return haxe_io_Path.directory(rootPath);
	}
};
lime_utils_AssetManifest.prototype = {
	assets: null
	,libraryArgs: null
	,libraryType: null
	,name: null
	,rootPath: null
	,version: null
	,serialize: function() {
		var manifestData = { };
		manifestData.version = this.version;
		manifestData.libraryType = this.libraryType;
		manifestData.libraryArgs = this.libraryArgs;
		manifestData.name = this.name;
		manifestData.assets = haxe_Serializer.run(this.assets);
		manifestData.rootPath = this.rootPath;
		return JSON.stringify(manifestData);
	}
	,__class__: lime_utils_AssetManifest
};
var lime_utils_Assets = function() { };
$hxClasses["lime.utils.Assets"] = lime_utils_Assets;
lime_utils_Assets.__name__ = "lime.utils.Assets";
lime_utils_Assets.exists = function(id,type) {
	if(type == null) {
		type = "BINARY";
	}
	var id1 = id;
	var colonIndex = id1.indexOf(":");
	var symbol_libraryName = id1.substring(0,colonIndex);
	var symbol_symbolName = id1.substring(colonIndex + 1);
	var symbol_library = lime_utils_Assets.getLibrary(symbol_libraryName);
	if(symbol_library != null) {
		return symbol_library.exists(symbol_symbolName,type);
	}
	return false;
};
lime_utils_Assets.getAsset = function(id,type,useCache) {
	if(useCache && lime_utils_Assets.cache.enabled) {
		switch(type) {
		case "BINARY":case "TEXT":
			useCache = false;
			break;
		case "FONT":
			var font = lime_utils_Assets.cache.font.h[id];
			if(font != null) {
				return font;
			}
			break;
		case "IMAGE":
			var image = lime_utils_Assets.cache.image.h[id];
			if(lime_utils_Assets.isValidImage(image)) {
				return image;
			}
			break;
		case "MUSIC":case "SOUND":
			var audio = lime_utils_Assets.cache.audio.h[id];
			if(lime_utils_Assets.isValidAudio(audio)) {
				return audio;
			}
			break;
		case "TEMPLATE":
			throw haxe_Exception.thrown("Not sure how to get template: " + id);
		default:
			return null;
		}
	}
	var id1 = id;
	var colonIndex = id1.indexOf(":");
	var symbol_libraryName = id1.substring(0,colonIndex);
	var symbol_symbolName = id1.substring(colonIndex + 1);
	var symbol_library = lime_utils_Assets.getLibrary(symbol_libraryName);
	if(symbol_library != null) {
		if(symbol_library.exists(symbol_symbolName,type)) {
			if(symbol_library.isLocal(symbol_symbolName,type)) {
				var asset = symbol_library.getAsset(symbol_symbolName,type);
				if(useCache && lime_utils_Assets.cache.enabled) {
					lime_utils_Assets.cache.set(id,type,asset);
				}
				return asset;
			} else {
				lime_utils_Log.error(type + " asset \"" + id + "\" exists, but only asynchronously",{ fileName : "lime/utils/Assets.hx", lineNumber : 133, className : "lime.utils.Assets", methodName : "getAsset"});
			}
		} else {
			lime_utils_Log.error("There is no " + type + " asset with an ID of \"" + id + "\"",{ fileName : "lime/utils/Assets.hx", lineNumber : 138, className : "lime.utils.Assets", methodName : "getAsset"});
		}
	} else {
		lime_utils_Log.error(lime_utils_Assets.__libraryNotFound(symbol_libraryName),{ fileName : "lime/utils/Assets.hx", lineNumber : 143, className : "lime.utils.Assets", methodName : "getAsset"});
	}
	return null;
};
lime_utils_Assets.getAudioBuffer = function(id,useCache) {
	if(useCache == null) {
		useCache = true;
	}
	return lime_utils_Assets.getAsset(id,"SOUND",useCache);
};
lime_utils_Assets.getBytes = function(id) {
	return lime_utils_Assets.getAsset(id,"BINARY",false);
};
lime_utils_Assets.getFont = function(id,useCache) {
	if(useCache == null) {
		useCache = true;
	}
	return lime_utils_Assets.getAsset(id,"FONT",useCache);
};
lime_utils_Assets.getImage = function(id,useCache) {
	if(useCache == null) {
		useCache = true;
	}
	return lime_utils_Assets.getAsset(id,"IMAGE",useCache);
};
lime_utils_Assets.getLibrary = function(name) {
	if(name == null || name == "") {
		name = "default";
	}
	return lime_utils_Assets.libraries.h[name];
};
lime_utils_Assets.getPath = function(id) {
	var id1 = id;
	var colonIndex = id1.indexOf(":");
	var symbol_libraryName = id1.substring(0,colonIndex);
	var symbol_symbolName = id1.substring(colonIndex + 1);
	var symbol_library = lime_utils_Assets.getLibrary(symbol_libraryName);
	if(symbol_library != null) {
		if(symbol_library.exists(symbol_symbolName,null)) {
			return symbol_library.getPath(symbol_symbolName);
		} else {
			lime_utils_Log.error("There is no asset with an ID of \"" + id + "\"",{ fileName : "lime/utils/Assets.hx", lineNumber : 224, className : "lime.utils.Assets", methodName : "getPath"});
		}
	} else {
		lime_utils_Log.error(lime_utils_Assets.__libraryNotFound(symbol_libraryName),{ fileName : "lime/utils/Assets.hx", lineNumber : 229, className : "lime.utils.Assets", methodName : "getPath"});
	}
	return null;
};
lime_utils_Assets.getText = function(id) {
	return lime_utils_Assets.getAsset(id,"TEXT",false);
};
lime_utils_Assets.hasLibrary = function(name) {
	if(name == null || name == "") {
		name = "default";
	}
	return Object.prototype.hasOwnProperty.call(lime_utils_Assets.libraries.h,name);
};
lime_utils_Assets.isLocal = function(id,type,useCache) {
	if(useCache == null) {
		useCache = true;
	}
	if(useCache && lime_utils_Assets.cache.enabled) {
		if(lime_utils_Assets.cache.exists(id,type)) {
			return true;
		}
	}
	var id1 = id;
	var colonIndex = id1.indexOf(":");
	var symbol_libraryName = id1.substring(0,colonIndex);
	var symbol_symbolName = id1.substring(colonIndex + 1);
	var symbol_library = lime_utils_Assets.getLibrary(symbol_libraryName);
	if(symbol_library != null) {
		return symbol_library.isLocal(symbol_symbolName,type);
	} else {
		return false;
	}
};
lime_utils_Assets.isValidAudio = function(buffer) {
	return buffer != null;
};
lime_utils_Assets.isValidImage = function(image) {
	if(image != null) {
		return image.buffer != null;
	} else {
		return false;
	}
};
lime_utils_Assets.list = function(type) {
	var items = [];
	var library = haxe_ds_StringMap.valueIterator(lime_utils_Assets.libraries.h);
	while(library.hasNext()) {
		var library1 = library.next();
		var libraryItems = library1.list(type);
		if(libraryItems != null) {
			items = items.concat(libraryItems);
		}
	}
	return items;
};
lime_utils_Assets.loadAsset = function(id,type,useCache) {
	if(useCache && lime_utils_Assets.cache.enabled) {
		switch(type) {
		case "BINARY":case "TEXT":
			useCache = false;
			break;
		case "FONT":
			var font = lime_utils_Assets.cache.font.h[id];
			if(font != null) {
				return lime_app_Future.withValue(font);
			}
			break;
		case "IMAGE":
			var image = lime_utils_Assets.cache.image.h[id];
			if(lime_utils_Assets.isValidImage(image)) {
				return lime_app_Future.withValue(image);
			}
			break;
		case "MUSIC":case "SOUND":
			var audio = lime_utils_Assets.cache.audio.h[id];
			if(lime_utils_Assets.isValidAudio(audio)) {
				return lime_app_Future.withValue(audio);
			}
			break;
		case "TEMPLATE":
			throw haxe_Exception.thrown("Not sure how to get template: " + id);
		default:
			return null;
		}
	}
	var id1 = id;
	var colonIndex = id1.indexOf(":");
	var symbol_libraryName = id1.substring(0,colonIndex);
	var symbol_symbolName = id1.substring(colonIndex + 1);
	var symbol_library = lime_utils_Assets.getLibrary(symbol_libraryName);
	if(symbol_library != null) {
		if(symbol_library.exists(symbol_symbolName,type)) {
			var future = symbol_library.loadAsset(symbol_symbolName,type);
			if(useCache && lime_utils_Assets.cache.enabled) {
				future.onComplete(function(asset) {
					lime_utils_Assets.cache.set(id,type,asset);
				});
			}
			return future;
		} else {
			return lime_app_Future.withError("There is no " + type + " asset with an ID of \"" + id + "\"");
		}
	} else {
		return lime_app_Future.withError(lime_utils_Assets.__libraryNotFound(symbol_libraryName));
	}
};
lime_utils_Assets.loadAudioBuffer = function(id,useCache) {
	if(useCache == null) {
		useCache = true;
	}
	return lime_utils_Assets.loadAsset(id,"SOUND",useCache);
};
lime_utils_Assets.loadBytes = function(id) {
	return lime_utils_Assets.loadAsset(id,"BINARY",false);
};
lime_utils_Assets.loadFont = function(id,useCache) {
	if(useCache == null) {
		useCache = true;
	}
	return lime_utils_Assets.loadAsset(id,"FONT",useCache);
};
lime_utils_Assets.loadImage = function(id,useCache) {
	if(useCache == null) {
		useCache = true;
	}
	return lime_utils_Assets.loadAsset(id,"IMAGE",useCache);
};
lime_utils_Assets.loadLibrary = function(id) {
	var promise = new lime_app_Promise();
	var library = lime_utils_Assets.getLibrary(id);
	if(library != null) {
		return library.load();
	}
	var path = id;
	var rootPath = null;
	if(Object.prototype.hasOwnProperty.call(lime_utils_Assets.bundlePaths.h,id)) {
		lime_utils_AssetBundle.loadFromFile(lime_utils_Assets.bundlePaths.h[id]).onComplete(function(bundle) {
			if(bundle == null) {
				promise.error("Cannot load bundle for library \"" + id + "\"");
				return;
			}
			var library = lime_utils_AssetLibrary.fromBundle(bundle);
			if(library == null) {
				promise.error("Cannot open library \"" + id + "\"");
			} else {
				lime_utils_Assets.libraries.h[id] = library;
				library.onChange.add(($_=lime_utils_Assets.onChange,$bind($_,$_.dispatch)));
				promise.completeWith(library.load());
			}
		}).onError(function(_) {
			promise.error("There is no asset library with an ID of \"" + id + "\"");
		});
	} else {
		if(Object.prototype.hasOwnProperty.call(lime_utils_Assets.libraryPaths.h,id)) {
			path = lime_utils_Assets.libraryPaths.h[id];
			rootPath = haxe_io_Path.directory(path);
		} else {
			if(StringTools.endsWith(path,".bundle")) {
				rootPath = path;
				path += "/library.json";
			} else {
				rootPath = haxe_io_Path.directory(path);
			}
			path = lime_utils_Assets.__cacheBreak(path);
		}
		lime_utils_AssetManifest.loadFromFile(path,rootPath).onComplete(function(manifest) {
			if(manifest == null) {
				promise.error("Cannot parse asset manifest for library \"" + id + "\"");
				return;
			}
			var library = lime_utils_AssetLibrary.fromManifest(manifest);
			if(library == null) {
				promise.error("Cannot open library \"" + id + "\"");
			} else {
				lime_utils_Assets.libraries.h[id] = library;
				library.onChange.add(($_=lime_utils_Assets.onChange,$bind($_,$_.dispatch)));
				promise.completeWith(library.load());
			}
		}).onError(function(_) {
			promise.error("There is no asset library with an ID of \"" + id + "\"");
		});
	}
	return promise.future;
};
lime_utils_Assets.loadText = function(id) {
	return lime_utils_Assets.loadAsset(id,"TEXT",false);
};
lime_utils_Assets.registerLibrary = function(name,library) {
	if(Object.prototype.hasOwnProperty.call(lime_utils_Assets.libraries.h,name)) {
		if(lime_utils_Assets.libraries.h[name] == library) {
			return;
		} else {
			lime_utils_Assets.unloadLibrary(name);
		}
	}
	if(library != null) {
		library.onChange.add(lime_utils_Assets.library_onChange);
	}
	lime_utils_Assets.libraries.h[name] = library;
};
lime_utils_Assets.unloadLibrary = function(name) {
	if(name == null || name == "") {
		name = "default";
	}
	var library = lime_utils_Assets.libraries.h[name];
	if(library != null) {
		lime_utils_Assets.cache.clear(name + ":");
		library.onChange.remove(lime_utils_Assets.library_onChange);
		library.unload();
	}
	var _this = lime_utils_Assets.libraries;
	if(Object.prototype.hasOwnProperty.call(_this.h,name)) {
		delete(_this.h[name]);
	}
};
lime_utils_Assets.__cacheBreak = function(path) {
	if(lime_utils_Assets.cache.version > 0) {
		if(path.indexOf("?") > -1) {
			path += "&" + lime_utils_Assets.cache.version;
		} else {
			path += "?" + lime_utils_Assets.cache.version;
		}
	}
	return path;
};
lime_utils_Assets.__libraryNotFound = function(name) {
	if(name == null || name == "") {
		name = "default";
	}
	if(lime_app_Application.current != null && lime_app_Application.current.__preloader != null && !lime_app_Application.current.__preloader.complete) {
		return "There is no asset library named \"" + name + "\", or it is not yet preloaded";
	} else {
		return "There is no asset library named \"" + name + "\"";
	}
};
lime_utils_Assets.library_onChange = function() {
	lime_utils_Assets.cache.clear();
	lime_utils_Assets.onChange.dispatch();
};
var lime_utils__$Assets_LibrarySymbol = function(id) {
	var colonIndex = id.indexOf(":");
	this.libraryName = id.substring(0,colonIndex);
	this.symbolName = id.substring(colonIndex + 1);
	this.library = lime_utils_Assets.getLibrary(this.libraryName);
};
$hxClasses["lime.utils._Assets.LibrarySymbol"] = lime_utils__$Assets_LibrarySymbol;
lime_utils__$Assets_LibrarySymbol.__name__ = "lime.utils._Assets.LibrarySymbol";
lime_utils__$Assets_LibrarySymbol.prototype = {
	library: null
	,libraryName: null
	,symbolName: null
	,isLocal: function(type) {
		return this.library.isLocal(this.symbolName,type);
	}
	,exists: function(type) {
		return this.library.exists(this.symbolName,type);
	}
	,__class__: lime_utils__$Assets_LibrarySymbol
};
var lime_utils_BytePointer = {};
lime_utils_BytePointer._new = function(bytes,offset) {
	if(offset == null) {
		offset = 0;
	}
	var this1 = new lime_utils_BytePointerData(bytes,offset);
	return this1;
};
lime_utils_BytePointer.set = function(this1,bytes,bufferView,buffer,offset) {
	if(buffer != null) {
		bytes = haxe_io_Bytes.ofData(buffer);
	}
	if(bytes != null || bufferView == null) {
		this1.bytes = bytes;
		this1.offset = offset != null ? offset : 0;
	} else {
		this1.bytes = haxe_io_Bytes.ofData(bufferView.buffer);
		this1.offset = offset != null ? bufferView.byteOffset + offset : bufferView.byteOffset;
	}
};
lime_utils_BytePointer.__arrayGet = function(this1,index) {
	if(this1.bytes != null) {
		return this1.bytes.b[index + this1.offset];
	} else {
		return 0;
	}
};
lime_utils_BytePointer.__arraySet = function(this1,index,value) {
	if(this1.bytes == null) {
		this1.bytes.b[index + this1.offset] = value & 255;
	}
	return value;
};
lime_utils_BytePointer.fromArrayBufferView = function(arrayBufferView) {
	if(arrayBufferView == null) {
		return null;
	}
	return new lime_utils_BytePointerData(haxe_io_Bytes.ofData(arrayBufferView.buffer),arrayBufferView.byteOffset);
};
lime_utils_BytePointer.fromArrayBuffer = function(buffer) {
	if(buffer == null) {
		return null;
	}
	return new lime_utils_BytePointerData(haxe_io_Bytes.ofData(buffer),0);
};
lime_utils_BytePointer.fromBytes = function(bytes) {
	return new lime_utils_BytePointerData(bytes,0);
};
lime_utils_BytePointer.fromBytesData = function(bytesData) {
	if(bytesData == null) {
		return new lime_utils_BytePointerData(null,0);
	} else {
		return new lime_utils_BytePointerData(haxe_io_Bytes.ofData(bytesData),0);
	}
};
lime_utils_BytePointer.fromFile = function(path) {
	return new lime_utils_BytePointerData(lime_utils_Bytes.fromFile(path),0);
};
lime_utils_BytePointer.fromLimeBytes = function(bytes) {
	return new lime_utils_BytePointerData(bytes,0);
};
lime_utils_BytePointer.toUInt8Array = function(bytePointer) {
	var elements = null;
	var array = null;
	var vector = null;
	var view = null;
	var buffer = bytePointer.bytes.b.bufferValue;
	var byteoffset = bytePointer.offset / 8 | 0;
	var len = null;
	if(byteoffset == null) {
		byteoffset = 0;
	}
	var this1;
	if(elements != null) {
		this1 = new Uint8Array(elements);
	} else if(array != null) {
		this1 = new Uint8Array(array);
	} else if(vector != null) {
		this1 = new Uint8Array(vector.__array);
	} else if(view != null) {
		this1 = new Uint8Array(view);
	} else if(buffer != null) {
		if(len == null) {
			this1 = new Uint8Array(buffer,byteoffset);
		} else {
			this1 = new Uint8Array(buffer,byteoffset,len);
		}
	} else {
		this1 = null;
	}
	return this1;
};
lime_utils_BytePointer.toUInt8ClampedArray = function(bytePointer) {
	if(bytePointer == null || bytePointer.bytes == null) {
		return null;
	}
	var elements = null;
	var array = null;
	var vector = null;
	var view = null;
	var buffer = bytePointer.bytes.b.bufferValue;
	var byteoffset = bytePointer.offset / 8 | 0;
	var len = null;
	if(byteoffset == null) {
		byteoffset = 0;
	}
	var this1;
	if(elements != null) {
		this1 = new Uint8ClampedArray(elements);
	} else if(array != null) {
		this1 = new Uint8ClampedArray(array);
	} else if(vector != null) {
		this1 = new Uint8ClampedArray(vector.__array);
	} else if(view != null) {
		this1 = new Uint8ClampedArray(view);
	} else if(buffer != null) {
		if(len == null) {
			this1 = new Uint8ClampedArray(buffer,byteoffset);
		} else {
			this1 = new Uint8ClampedArray(buffer,byteoffset,len);
		}
	} else {
		this1 = null;
	}
	return this1;
};
lime_utils_BytePointer.toInt8Array = function(bytePointer) {
	if(bytePointer == null || bytePointer.bytes == null) {
		return null;
	}
	var elements = null;
	var array = null;
	var vector = null;
	var view = null;
	var buffer = bytePointer.bytes.b.bufferValue;
	var byteoffset = bytePointer.offset / 8 | 0;
	var len = null;
	if(byteoffset == null) {
		byteoffset = 0;
	}
	var this1;
	if(elements != null) {
		this1 = new Int8Array(elements);
	} else if(array != null) {
		this1 = new Int8Array(array);
	} else if(vector != null) {
		this1 = new Int8Array(vector.__array);
	} else if(view != null) {
		this1 = new Int8Array(view);
	} else if(buffer != null) {
		if(len == null) {
			this1 = new Int8Array(buffer,byteoffset);
		} else {
			this1 = new Int8Array(buffer,byteoffset,len);
		}
	} else {
		this1 = null;
	}
	return this1;
};
lime_utils_BytePointer.toUInt16Array = function(bytePointer) {
	if(bytePointer == null || bytePointer.bytes == null) {
		return null;
	}
	var elements = null;
	var array = null;
	var vector = null;
	var view = null;
	var buffer = bytePointer.bytes.b.bufferValue;
	var byteoffset = bytePointer.offset / 16 | 0;
	var len = null;
	if(byteoffset == null) {
		byteoffset = 0;
	}
	var this1;
	if(elements != null) {
		this1 = new Uint16Array(elements);
	} else if(array != null) {
		this1 = new Uint16Array(array);
	} else if(vector != null) {
		this1 = new Uint16Array(vector.__array);
	} else if(view != null) {
		this1 = new Uint16Array(view);
	} else if(buffer != null) {
		if(len == null) {
			this1 = new Uint16Array(buffer,byteoffset);
		} else {
			this1 = new Uint16Array(buffer,byteoffset,len);
		}
	} else {
		this1 = null;
	}
	return this1;
};
lime_utils_BytePointer.toInt16Array = function(bytePointer) {
	if(bytePointer == null || bytePointer.bytes == null) {
		return null;
	}
	var elements = null;
	var array = null;
	var vector = null;
	var view = null;
	var buffer = bytePointer.bytes.b.bufferValue;
	var byteoffset = bytePointer.offset / 16 | 0;
	var len = null;
	if(byteoffset == null) {
		byteoffset = 0;
	}
	var this1;
	if(elements != null) {
		this1 = new Int16Array(elements);
	} else if(array != null) {
		this1 = new Int16Array(array);
	} else if(vector != null) {
		this1 = new Int16Array(vector.__array);
	} else if(view != null) {
		this1 = new Int16Array(view);
	} else if(buffer != null) {
		if(len == null) {
			this1 = new Int16Array(buffer,byteoffset);
		} else {
			this1 = new Int16Array(buffer,byteoffset,len);
		}
	} else {
		this1 = null;
	}
	return this1;
};
lime_utils_BytePointer.toUInt32Array = function(bytePointer) {
	if(bytePointer == null || bytePointer.bytes == null) {
		return null;
	}
	var elements = null;
	var array = null;
	var vector = null;
	var view = null;
	var buffer = bytePointer.bytes.b.bufferValue;
	var byteoffset = bytePointer.offset / 32 | 0;
	var len = null;
	if(byteoffset == null) {
		byteoffset = 0;
	}
	var this1;
	if(elements != null) {
		this1 = new Uint32Array(elements);
	} else if(array != null) {
		this1 = new Uint32Array(array);
	} else if(vector != null) {
		this1 = new Uint32Array(vector.__array);
	} else if(view != null) {
		this1 = new Uint32Array(view);
	} else if(buffer != null) {
		if(len == null) {
			this1 = new Uint32Array(buffer,byteoffset);
		} else {
			this1 = new Uint32Array(buffer,byteoffset,len);
		}
	} else {
		this1 = null;
	}
	return this1;
};
lime_utils_BytePointer.toInt32Array = function(bytePointer) {
	if(bytePointer == null || bytePointer.bytes == null) {
		return null;
	}
	var elements = null;
	var array = null;
	var vector = null;
	var view = null;
	var buffer = bytePointer.bytes.b.bufferValue;
	var byteoffset = bytePointer.offset / 32 | 0;
	var len = null;
	if(byteoffset == null) {
		byteoffset = 0;
	}
	var this1;
	if(elements != null) {
		this1 = new Int32Array(elements);
	} else if(array != null) {
		this1 = new Int32Array(array);
	} else if(vector != null) {
		this1 = new Int32Array(vector.__array);
	} else if(view != null) {
		this1 = new Int32Array(view);
	} else if(buffer != null) {
		if(len == null) {
			this1 = new Int32Array(buffer,byteoffset);
		} else {
			this1 = new Int32Array(buffer,byteoffset,len);
		}
	} else {
		this1 = null;
	}
	return this1;
};
lime_utils_BytePointer.toFloat32Array = function(bytePointer) {
	if(bytePointer == null || bytePointer.bytes == null) {
		return null;
	}
	var elements = null;
	var array = null;
	var vector = null;
	var view = null;
	var buffer = bytePointer.bytes.b.bufferValue;
	var byteoffset = bytePointer.offset / 32 | 0;
	var len = null;
	if(byteoffset == null) {
		byteoffset = 0;
	}
	var this1;
	if(elements != null) {
		this1 = new Float32Array(elements);
	} else if(array != null) {
		this1 = new Float32Array(array);
	} else if(vector != null) {
		this1 = new Float32Array(vector.__array);
	} else if(view != null) {
		this1 = new Float32Array(view);
	} else if(buffer != null) {
		if(len == null) {
			this1 = new Float32Array(buffer,byteoffset);
		} else {
			this1 = new Float32Array(buffer,byteoffset,len);
		}
	} else {
		this1 = null;
	}
	return this1;
};
lime_utils_BytePointer.toFloat64Array = function(bytePointer) {
	if(bytePointer == null || bytePointer.bytes == null) {
		return null;
	}
	var elements = null;
	var array = null;
	var vector = null;
	var view = null;
	var buffer = bytePointer.bytes.b.bufferValue;
	var byteoffset = bytePointer.offset / 64 | 0;
	var len = null;
	if(byteoffset == null) {
		byteoffset = 0;
	}
	var this1;
	if(elements != null) {
		this1 = new Float64Array(elements);
	} else if(array != null) {
		this1 = new Float64Array(array);
	} else if(vector != null) {
		this1 = new Float64Array(vector.__array);
	} else if(view != null) {
		this1 = new Float64Array(view);
	} else if(buffer != null) {
		if(len == null) {
			this1 = new Float64Array(buffer,byteoffset);
		} else {
			this1 = new Float64Array(buffer,byteoffset,len);
		}
	} else {
		this1 = null;
	}
	return this1;
};
var lime_utils_BytePointerData = function(bytes,offset) {
	this.bytes = bytes;
	this.offset = offset;
};
$hxClasses["lime.utils.BytePointerData"] = lime_utils_BytePointerData;
lime_utils_BytePointerData.__name__ = "lime.utils.BytePointerData";
lime_utils_BytePointerData.prototype = {
	bytes: null
	,offset: null
	,__class__: lime_utils_BytePointerData
};
var lime_utils_Bytes = {};
lime_utils_Bytes._new = function(length,bytesData) {
	var this1 = new haxe_io_Bytes(bytesData);
	return this1;
};
lime_utils_Bytes.alloc = function(length) {
	return new haxe_io_Bytes(new ArrayBuffer(length));
};
lime_utils_Bytes.compress = function(this1,algorithm) {
	switch(algorithm._hx_index) {
	case 0:
		return lime__$internal_format_Deflate.compress(this1);
	case 1:
		return lime__$internal_format_GZip.compress(this1);
	case 2:
		return lime__$internal_format_LZMA.compress(this1);
	case 3:
		return lime__$internal_format_Zlib.compress(this1);
	}
};
lime_utils_Bytes.decompress = function(this1,algorithm) {
	switch(algorithm._hx_index) {
	case 0:
		return lime__$internal_format_Deflate.decompress(this1);
	case 1:
		return lime__$internal_format_GZip.decompress(this1);
	case 2:
		return lime__$internal_format_LZMA.decompress(this1);
	case 3:
		return lime__$internal_format_Zlib.decompress(this1);
	}
};
lime_utils_Bytes.fastGet = function(b,pos) {
	return b.bytes[pos];
};
lime_utils_Bytes.fromBytes = function(bytes) {
	if(bytes == null) {
		return null;
	}
	return lime_utils_Bytes._new(bytes.length,bytes.b.bufferValue);
};
lime_utils_Bytes.fromFile = function(path) {
	return null;
};
lime_utils_Bytes.loadFromBytes = function(bytes) {
	return lime_app_Future.withValue(lime_utils_Bytes.fromBytes(bytes));
};
lime_utils_Bytes.loadFromFile = function(path) {
	var request = new lime_net__$HTTPRequest_$lime_$utils_$Bytes();
	return request.load(path);
};
lime_utils_Bytes.ofData = function(b) {
	var bytes = haxe_io_Bytes.ofData(b);
	return lime_utils_Bytes._new(bytes.length,bytes.b.bufferValue);
};
lime_utils_Bytes.ofString = function(s) {
	var bytes = haxe_io_Bytes.ofString(s);
	return lime_utils_Bytes._new(bytes.length,bytes.b.bufferValue);
};
var lime_utils_CompressionAlgorithm = $hxEnums["lime.utils.CompressionAlgorithm"] = { __ename__ : "lime.utils.CompressionAlgorithm", __constructs__ : ["DEFLATE","GZIP","LZMA","ZLIB"]
	,DEFLATE: {_hx_index:0,__enum__:"lime.utils.CompressionAlgorithm",toString:$estr}
	,GZIP: {_hx_index:1,__enum__:"lime.utils.CompressionAlgorithm",toString:$estr}
	,LZMA: {_hx_index:2,__enum__:"lime.utils.CompressionAlgorithm",toString:$estr}
	,ZLIB: {_hx_index:3,__enum__:"lime.utils.CompressionAlgorithm",toString:$estr}
};
var lime_utils_DataPointer = {};
lime_utils_DataPointer._new = function(data) {
	var this1 = data;
	return this1;
};
lime_utils_DataPointer.fromFloat = function(value) {
	return value;
};
lime_utils_DataPointer.fromBytesPointer = function(pointer) {
	return lime_utils_DataPointer.fromFloat(0);
};
lime_utils_DataPointer.fromArrayBufferView = function(arrayBufferView) {
	return lime_utils_DataPointer.fromFloat(0);
};
lime_utils_DataPointer.fromArrayBuffer = function(buffer) {
	return lime_utils_DataPointer.fromFloat(0);
};
lime_utils_DataPointer.fromBytes = function(bytes) {
	return lime_utils_DataPointer.fromFloat(0);
};
lime_utils_DataPointer.fromBytesData = function(bytesData) {
	return lime_utils_DataPointer.fromFloat(0);
};
lime_utils_DataPointer.fromLimeBytes = function(bytes) {
	return lime_utils_DataPointer.fromBytes(bytes);
};
lime_utils_DataPointer.fromCFFIPointer = function(pointer) {
	return lime_utils_DataPointer.fromFloat(0);
};
lime_utils_DataPointer.fromFile = function(path) {
	return lime_utils_DataPointer.fromFloat(0);
};
lime_utils_DataPointer.__withOffset = function(data,offset) {
	return lime_utils_DataPointer.fromFloat(0);
};
lime_utils_DataPointer.equals = function(a,b) {
	return a == b;
};
lime_utils_DataPointer.equalsPointer = function(a,b) {
	return a == b;
};
lime_utils_DataPointer.greaterThan = function(a,b) {
	return a > b;
};
lime_utils_DataPointer.greaterThanPointer = function(a,b) {
	return lime_system_CFFIPointer.get(a) > lime_system_CFFIPointer.get(b);
};
lime_utils_DataPointer.greaterThanOrEqual = function(a,b) {
	return a >= b;
};
lime_utils_DataPointer.greaterThanOrEqualPointer = function(a,b) {
	return lime_system_CFFIPointer.get(a) >= lime_system_CFFIPointer.get(b);
};
lime_utils_DataPointer.lessThan = function(a,b) {
	return a < b;
};
lime_utils_DataPointer.lessThanPointer = function(a,b) {
	return lime_system_CFFIPointer.get(a) < lime_system_CFFIPointer.get(b);
};
lime_utils_DataPointer.lessThanOrEqual = function(a,b) {
	return a <= b;
};
lime_utils_DataPointer.lessThanOrEqualPointer = function(a,b) {
	return lime_system_CFFIPointer.get(a) <= lime_system_CFFIPointer.get(b);
};
lime_utils_DataPointer.notEquals = function(a,b) {
	return a != b;
};
lime_utils_DataPointer.notEqualsPointer = function(a,b) {
	return a != b;
};
lime_utils_DataPointer.plus = function(a,b) {
	return lime_utils_DataPointer.__withOffset(a,b);
};
lime_utils_DataPointer.plusPointer = function(a,b) {
	return lime_utils_DataPointer.__withOffset(a,b | 0);
};
lime_utils_DataPointer.minus = function(a,b) {
	return lime_utils_DataPointer.__withOffset(a,-b);
};
lime_utils_DataPointer.minusPointer = function(a,b) {
	return lime_utils_DataPointer.__withOffset(a,-(b | 0));
};
var lime_utils_Float32Array = {};
lime_utils_Float32Array.fromBytes = function(bytes,byteOffset,len) {
	if(byteOffset == null) {
		byteOffset = 0;
	}
	if(byteOffset == null) {
		return new Float32Array(bytes.b.bufferValue);
	}
	if(len == null) {
		return new Float32Array(bytes.b.bufferValue,byteOffset);
	}
	return new Float32Array(bytes.b.bufferValue,byteOffset,len);
};
lime_utils_Float32Array.toBytes = function(this1) {
	return new haxe_io_Bytes(new Uint8Array(this1.buffer));
};
lime_utils_Float32Array.toString = function(this1) {
	if(this1 != null) {
		return "Float32Array [byteLength:" + this1.byteLength + ", length:" + this1.length + "]";
	} else {
		return null;
	}
};
var lime_utils_Float64Array = {};
lime_utils_Float64Array.fromBytes = function(bytes,byteOffset,len) {
	if(byteOffset == null) {
		byteOffset = 0;
	}
	if(byteOffset == null) {
		return new Float64Array(bytes.b.bufferValue);
	}
	if(len == null) {
		return new Float64Array(bytes.b.bufferValue,byteOffset);
	}
	return new Float64Array(bytes.b.bufferValue,byteOffset,len);
};
lime_utils_Float64Array.toBytes = function(this1) {
	return new haxe_io_Bytes(new Uint8Array(this1.buffer));
};
lime_utils_Float64Array.toString = function(this1) {
	if(this1 != null) {
		return "Float64Array [byteLength:" + this1.byteLength + ", length:" + this1.length + "]";
	} else {
		return null;
	}
};
var lime_utils_Int16Array = {};
lime_utils_Int16Array.fromBytes = function(bytes,byteOffset,len) {
	if(byteOffset == null) {
		byteOffset = 0;
	}
	if(byteOffset == null) {
		return new Int16Array(bytes.b.bufferValue);
	}
	if(len == null) {
		return new Int16Array(bytes.b.bufferValue,byteOffset);
	}
	return new Int16Array(bytes.b.bufferValue,byteOffset,len);
};
lime_utils_Int16Array.toBytes = function(this1) {
	return new haxe_io_Bytes(new Uint8Array(this1.buffer));
};
lime_utils_Int16Array.toString = function(this1) {
	if(this1 != null) {
		return "Int16Array [byteLength:" + this1.byteLength + ", length:" + this1.length + "]";
	} else {
		return null;
	}
};
var lime_utils_Int32Array = {};
lime_utils_Int32Array.fromBytes = function(bytes,byteOffset,len) {
	if(byteOffset == null) {
		byteOffset = 0;
	}
	if(byteOffset == null) {
		return new Int32Array(bytes.b.bufferValue);
	}
	if(len == null) {
		return new Int32Array(bytes.b.bufferValue,byteOffset);
	}
	return new Int32Array(bytes.b.bufferValue,byteOffset,len);
};
lime_utils_Int32Array.toBytes = function(this1) {
	return new haxe_io_Bytes(new Uint8Array(this1.buffer));
};
lime_utils_Int32Array.toString = function(this1) {
	if(this1 != null) {
		return "Int32Array [byteLength:" + this1.byteLength + ", length:" + this1.length + "]";
	} else {
		return null;
	}
};
var lime_utils_Int8Array = {};
lime_utils_Int8Array.fromBytes = function(bytes,byteOffset,len) {
	if(byteOffset == null) {
		byteOffset = 0;
	}
	return new Int8Array(bytes.b.bufferValue,byteOffset,len);
};
lime_utils_Int8Array.toBytes = function(this1) {
	return new haxe_io_Bytes(new Uint8Array(this1.buffer));
};
lime_utils_Int8Array.toString = function(this1) {
	if(this1 != null) {
		return "Int8Array [byteLength:" + this1.byteLength + ", length:" + this1.length + "]";
	} else {
		return null;
	}
};
var lime_utils_Log = function() { };
$hxClasses["lime.utils.Log"] = lime_utils_Log;
lime_utils_Log.__name__ = "lime.utils.Log";
lime_utils_Log.debug = function(message,info) {
	if(lime_utils_Log.level >= 4) {
		console.debug("[" + info.className + "] " + Std.string(message));
	}
};
lime_utils_Log.error = function(message,info) {
	if(lime_utils_Log.level >= 1) {
		var message1 = "[" + info.className + "] ERROR: " + Std.string(message);
		if(lime_utils_Log.throwErrors) {
			throw haxe_Exception.thrown(message1);
		} else {
			console.error(message1);
		}
	}
};
lime_utils_Log.info = function(message,info) {
	if(lime_utils_Log.level >= 3) {
		console.info("[" + info.className + "] " + Std.string(message));
	}
};
lime_utils_Log.print = function(message) {
	console.log(message);
};
lime_utils_Log.println = function(message) {
	console.log(message);
};
lime_utils_Log.verbose = function(message,info) {
	if(lime_utils_Log.level >= 5) {
		var message1 = "[" + info.className + "] " + Std.string(message);
		console.log(message1);
	}
};
lime_utils_Log.warn = function(message,info) {
	if(lime_utils_Log.level >= 2) {
		console.warn("[" + info.className + "] WARNING: " + Std.string(message));
	}
};
var lime_utils_LogLevel = {};
lime_utils_LogLevel.gt = function(a,b) {
	return a > b;
};
lime_utils_LogLevel.gte = function(a,b) {
	return a >= b;
};
lime_utils_LogLevel.lt = function(a,b) {
	return a < b;
};
lime_utils_LogLevel.lte = function(a,b) {
	return a <= b;
};
var lime_utils_Preloader = function() {
	this.bytesTotalCache = new haxe_ds_StringMap();
	this.bytesLoadedCache2 = new haxe_ds_StringMap();
	this.bytesLoadedCache = new haxe_ds_ObjectMap();
	this.onProgress = new lime_app__$Event_$Int_$Int_$Void();
	this.onComplete = new lime_app__$Event_$Void_$Void();
	this.bytesLoaded = 0;
	this.bytesTotal = 0;
	this.libraries = [];
	this.libraryNames = [];
	this.onProgress.add($bind(this,this.update));
};
$hxClasses["lime.utils.Preloader"] = lime_utils_Preloader;
lime_utils_Preloader.__name__ = "lime.utils.Preloader";
lime_utils_Preloader.prototype = {
	complete: null
	,onComplete: null
	,onProgress: null
	,bytesLoaded: null
	,bytesLoadedCache: null
	,bytesLoadedCache2: null
	,bytesTotal: null
	,bytesTotalCache: null
	,initLibraryNames: null
	,libraries: null
	,libraryNames: null
	,loadedLibraries: null
	,loadedStage: null
	,preloadComplete: null
	,preloadStarted: null
	,simulateProgress: null
	,addLibrary: function(library) {
		this.libraries.push(library);
	}
	,addLibraryName: function(name) {
		if(this.libraryNames.indexOf(name) == -1) {
			this.libraryNames.push(name);
		}
	}
	,load: function() {
		var _gthis = this;
		var _g = 0;
		var _g1 = this.libraries;
		while(_g < _g1.length) {
			var library = _g1[_g];
			++_g;
			this.bytesTotal += library.bytesTotal;
		}
		this.loadedLibraries = -1;
		this.preloadStarted = false;
		var _g = 0;
		var _g1 = this.libraries;
		while(_g < _g1.length) {
			var library = [_g1[_g]];
			++_g;
			lime_utils_Log.verbose("Preloading asset library",{ fileName : "lime/utils/Preloader.hx", lineNumber : 132, className : "lime.utils.Preloader", methodName : "load"});
			library[0].load().onProgress((function(library) {
				return function(loaded,total) {
					if(_gthis.bytesLoadedCache.h.__keys__[library[0].__id__] == null) {
						_gthis.bytesLoaded += loaded;
					} else {
						_gthis.bytesLoaded += loaded - _gthis.bytesLoadedCache.h[library[0].__id__];
					}
					_gthis.bytesLoadedCache.set(library[0],loaded);
					if(!_gthis.simulateProgress) {
						_gthis.onProgress.dispatch(_gthis.bytesLoaded,_gthis.bytesTotal);
					}
				};
			})(library)).onComplete((function(library) {
				return function(_) {
					if(_gthis.bytesLoadedCache.h.__keys__[library[0].__id__] == null) {
						_gthis.bytesLoaded += library[0].bytesTotal;
					} else {
						_gthis.bytesLoaded += library[0].bytesTotal - _gthis.bytesLoadedCache.h[library[0].__id__];
					}
					_gthis.loadedAssetLibrary();
				};
			})(library)).onError((function() {
				return function(e) {
					lime_utils_Log.error(e,{ fileName : "lime/utils/Preloader.hx", lineNumber : 168, className : "lime.utils.Preloader", methodName : "load"});
				};
			})());
		}
		var _g = 0;
		var _g1 = this.libraryNames;
		while(_g < _g1.length) {
			var name = _g1[_g];
			++_g;
			this.bytesTotal += 200;
		}
		this.loadedLibraries++;
		this.preloadStarted = true;
		this.updateProgress();
	}
	,loadedAssetLibrary: function(name) {
		this.loadedLibraries++;
		var current = this.loadedLibraries;
		if(!this.preloadStarted) {
			++current;
		}
		var totalLibraries = this.libraries.length + this.libraryNames.length;
		if(name != null) {
			lime_utils_Log.verbose("Loaded asset library: " + name + " [" + current + "/" + totalLibraries + "]",{ fileName : "lime/utils/Preloader.hx", lineNumber : 195, className : "lime.utils.Preloader", methodName : "loadedAssetLibrary"});
		} else {
			lime_utils_Log.verbose("Loaded asset library [" + current + "/" + totalLibraries + "]",{ fileName : "lime/utils/Preloader.hx", lineNumber : 199, className : "lime.utils.Preloader", methodName : "loadedAssetLibrary"});
		}
		this.updateProgress();
	}
	,start: function() {
		if(this.complete || this.simulateProgress || !this.preloadComplete) {
			return;
		}
		this.complete = true;
		this.onComplete.dispatch();
	}
	,update: function(loaded,total) {
	}
	,updateProgress: function() {
		var _gthis = this;
		if(!this.simulateProgress) {
			this.onProgress.dispatch(this.bytesLoaded,this.bytesTotal);
		}
		if(this.loadedLibraries == this.libraries.length && !this.initLibraryNames) {
			this.initLibraryNames = true;
			var _g = 0;
			var _g1 = this.libraryNames;
			while(_g < _g1.length) {
				var name = [_g1[_g]];
				++_g;
				lime_utils_Log.verbose("Preloading asset library: " + name[0],{ fileName : "lime/utils/Preloader.hx", lineNumber : 236, className : "lime.utils.Preloader", methodName : "updateProgress"});
				lime_utils_Assets.loadLibrary(name[0]).onProgress((function(name) {
					return function(loaded,total) {
						if(total > 0) {
							if(!Object.prototype.hasOwnProperty.call(_gthis.bytesTotalCache.h,name[0])) {
								_gthis.bytesTotalCache.h[name[0]] = total;
								_gthis.bytesTotal += total - 200;
							}
							if(loaded > total) {
								loaded = total;
							}
							if(!Object.prototype.hasOwnProperty.call(_gthis.bytesLoadedCache2.h,name[0])) {
								_gthis.bytesLoaded += loaded;
							} else {
								_gthis.bytesLoaded += loaded - _gthis.bytesLoadedCache2.h[name[0]];
							}
							_gthis.bytesLoadedCache2.h[name[0]] = loaded;
							if(!_gthis.simulateProgress) {
								_gthis.onProgress.dispatch(_gthis.bytesLoaded,_gthis.bytesTotal);
							}
						}
					};
				})(name)).onComplete((function(name) {
					return function(library) {
						var total = 200;
						if(Object.prototype.hasOwnProperty.call(_gthis.bytesTotalCache.h,name[0])) {
							total = _gthis.bytesTotalCache.h[name[0]];
						}
						if(!Object.prototype.hasOwnProperty.call(_gthis.bytesLoadedCache2.h,name[0])) {
							_gthis.bytesLoaded += total;
						} else {
							_gthis.bytesLoaded += total - _gthis.bytesLoadedCache2.h[name[0]];
						}
						_gthis.loadedAssetLibrary(name[0]);
					};
				})(name)).onError((function() {
					return function(e) {
						lime_utils_Log.error(e,{ fileName : "lime/utils/Preloader.hx", lineNumber : 290, className : "lime.utils.Preloader", methodName : "updateProgress"});
					};
				})());
			}
		}
		if(!this.simulateProgress && this.loadedLibraries == this.libraries.length + this.libraryNames.length) {
			if(!this.preloadComplete) {
				this.preloadComplete = true;
				lime_utils_Log.verbose("Preload complete",{ fileName : "lime/utils/Preloader.hx", lineNumber : 301, className : "lime.utils.Preloader", methodName : "updateProgress"});
			}
			this.start();
		}
	}
	,__class__: lime_utils_Preloader
};
var lime_utils_Resource = {};
lime_utils_Resource._new = function(size) {
	if(size == null) {
		size = 0;
	}
	var this1 = new haxe_io_Bytes(new ArrayBuffer(size));
	return this1;
};
lime_utils_Resource.__fromString = function(value) {
	return haxe_io_Bytes.ofString(value);
};
lime_utils_Resource.__toString = function(value) {
	return value.toString();
};
var lime_utils_UInt16Array = {};
lime_utils_UInt16Array.fromBytes = function(bytes,byteOffset,len) {
	if(byteOffset == null) {
		byteOffset = 0;
	}
	if(byteOffset == null) {
		return new Uint16Array(bytes.b.bufferValue);
	}
	if(len == null) {
		return new Uint16Array(bytes.b.bufferValue,byteOffset);
	}
	return new Uint16Array(bytes.b.bufferValue,byteOffset,len);
};
lime_utils_UInt16Array.toBytes = function(this1) {
	return new haxe_io_Bytes(new Uint8Array(this1.buffer));
};
lime_utils_UInt16Array.toString = function(this1) {
	if(this1 != null) {
		return "UInt16Array [byteLength:" + this1.byteLength + ", length:" + this1.length + "]";
	} else {
		return null;
	}
};
var lime_utils_UInt32Array = {};
lime_utils_UInt32Array.fromBytes = function(bytes,byteOffset,len) {
	if(byteOffset == null) {
		byteOffset = 0;
	}
	if(byteOffset == null) {
		return new Uint32Array(bytes.b.bufferValue);
	}
	if(len == null) {
		return new Uint32Array(bytes.b.bufferValue,byteOffset);
	}
	return new Uint32Array(bytes.b.bufferValue,byteOffset,len);
};
lime_utils_UInt32Array.toBytes = function(this1) {
	return new haxe_io_Bytes(new Uint8Array(this1.buffer));
};
lime_utils_UInt32Array.toString = function(this1) {
	if(this1 != null) {
		return "UInt32Array [byteLength:" + this1.byteLength + ", length:" + this1.length + "]";
	} else {
		return null;
	}
};
var lime_utils_UInt8Array = {};
lime_utils_UInt8Array.fromBytes = function(bytes,byteOffset,len) {
	if(byteOffset == null) {
		return new Uint8Array(bytes.b.bufferValue);
	}
	if(len == null) {
		return new Uint8Array(bytes.b.bufferValue,byteOffset);
	}
	return new Uint8Array(bytes.b.bufferValue,byteOffset,len);
};
lime_utils_UInt8Array.toBytes = function(this1) {
	return new haxe_io_Bytes(new Uint8Array(this1.buffer));
};
lime_utils_UInt8Array.toString = function(this1) {
	if(this1 != null) {
		return "UInt8Array [byteLength:" + this1.byteLength + ", length:" + this1.length + "]";
	} else {
		return null;
	}
};
var lime_utils_UInt8ClampedArray = {};
lime_utils_UInt8ClampedArray.fromBytes = function(bytes,byteOffset,len) {
	if(byteOffset == null) {
		byteOffset = 0;
	}
	if(byteOffset == null) {
		return new Uint8ClampedArray(bytes.b.bufferValue);
	}
	if(len == null) {
		return new Uint8ClampedArray(bytes.b.bufferValue,byteOffset);
	}
	return new Uint8ClampedArray(bytes.b.bufferValue,byteOffset,len);
};
lime_utils_UInt8ClampedArray.toBytes = function(this1) {
	return new haxe_io_Bytes(new Uint8Array(this1.buffer));
};
lime_utils_UInt8ClampedArray.toString = function(this1) {
	if(this1 != null) {
		return "UInt8ClampedArray [byteLength:" + this1.byteLength + ", length:" + this1.length + "]";
	} else {
		return null;
	}
};
lime_utils_UInt8ClampedArray._clamp = function(_in) {
	var _out = _in | 0;
	if(_out > 255) {
		_out = 255;
	}
	if(_out < 0) {
		return 0;
	} else {
		return _out;
	}
};
var openfl_Lib = function() { };
$hxClasses["openfl.Lib"] = openfl_Lib;
openfl_Lib.__name__ = "openfl.Lib";
openfl_Lib.__properties__ = {get_current:"get_current",get_application:"get_application"};
openfl_Lib.as = function(v,c) {
	if(js_Boot.__instanceof(v,c)) {
		return v;
	} else {
		return null;
	}
};
openfl_Lib.attach = function(name) {
	return new openfl_display_MovieClip();
};
openfl_Lib.clearInterval = function(id) {
	if(openfl_Lib.__timers.h.hasOwnProperty(id)) {
		var timer = openfl_Lib.__timers.h[id];
		timer.stop();
		openfl_Lib.__timers.remove(id);
	}
};
openfl_Lib.clearTimeout = function(id) {
	if(openfl_Lib.__timers.h.hasOwnProperty(id)) {
		var timer = openfl_Lib.__timers.h[id];
		timer.stop();
		openfl_Lib.__timers.remove(id);
	}
};
openfl_Lib.getDefinitionByName = function(name) {
	if(name == null) {
		return null;
	}
	return $hxClasses[name];
};
openfl_Lib.getQualifiedClassName = function(value) {
	if(value == null) {
		return null;
	}
	var ref = js_Boot.__instanceof(value,Class) ? value : js_Boot.getClass(value);
	if(ref == null) {
		if(typeof(value) == "boolean" || value == Bool) {
			return "Bool";
		} else if(typeof(value) == "number" && ((value | 0) === value) || value == Int) {
			return "Int";
		} else if(typeof(value) == "number" || value == Float) {
			return "Float";
		} else {
			return null;
		}
	}
	return ref.__name__;
};
openfl_Lib.getQualifiedSuperclassName = function(value) {
	if(value == null) {
		return null;
	}
	var ref = js_Boot.__instanceof(value,Class) ? value : js_Boot.getClass(value);
	if(ref == null) {
		return null;
	}
	var parentRef = ref.__super__;
	if(parentRef == null) {
		return null;
	}
	return parentRef.__name__;
};
openfl_Lib.getTimer = function() {
	return lime_system_System.getTimer();
};
openfl_Lib.getURL = function(request,target) {
	openfl_Lib.navigateToURL(request,target);
};
openfl_Lib.navigateToURL = function(request,$window) {
	if($window == null) {
		$window = "_blank";
	}
	var uri = request.url;
	if(Type.typeof(request.data) == ValueType.TObject) {
		var query = "";
		var fields = Reflect.fields(request.data);
		var _g = 0;
		while(_g < fields.length) {
			var field = fields[_g];
			++_g;
			if(query.length > 0) {
				query += "&";
			}
			var query1 = encodeURIComponent(field) + "=";
			var s = Std.string(Reflect.field(request.data,field));
			query += query1 + encodeURIComponent(s);
		}
		if(uri.indexOf("?") > -1) {
			uri += "&" + query;
		} else {
			uri += "?" + query;
		}
	}
	lime_system_System.openURL(uri,$window);
};
openfl_Lib.notImplemented = function(posInfo) {
	var api = posInfo.className + "." + posInfo.methodName;
	if(!Object.prototype.hasOwnProperty.call(openfl_Lib.__sentWarnings.h,api)) {
		openfl_Lib.__sentWarnings.h[api] = true;
		lime_utils_Log.warn(posInfo.methodName + " is not implemented",posInfo);
	}
};
openfl_Lib.preventDefaultTouchMove = function() {
	window.document.addEventListener("touchmove",function(evt) {
		evt.preventDefault();
	},false);
};
openfl_Lib.sendToURL = function(request) {
	var urlLoader = new openfl_net_URLLoader();
	urlLoader.load(request);
};
openfl_Lib.setInterval = function(closure,delay,args) {
	var id = ++openfl_Lib.__lastTimerID;
	var timer = new haxe_Timer(delay);
	openfl_Lib.__timers.h[id] = timer;
	timer.run = function() {
		closure.apply(closure,args == null ? [] : args);
	};
	return id;
};
openfl_Lib.setTimeout = function(closure,delay,args) {
	var id = ++openfl_Lib.__lastTimerID;
	var this1 = openfl_Lib.__timers;
	var v = haxe_Timer.delay(function() {
		closure.apply(closure,args == null ? [] : args);
	},delay);
	this1.h[id] = v;
	return id;
};
openfl_Lib.trace = function(arg) {
	haxe_Log.trace(arg,{ fileName : "openfl/Lib.hx", lineNumber : 573, className : "openfl.Lib", methodName : "trace"});
};
openfl_Lib.get_application = function() {
	return openfl__$internal_Lib.application;
};
openfl_Lib.get_current = function() {
	if(openfl__$internal_Lib.current == null) {
		openfl__$internal_Lib.current = new openfl_display_MovieClip();
	}
	return openfl__$internal_Lib.current;
};
var openfl__$Vector_IVector = function() { };
$hxClasses["openfl._Vector.IVector"] = openfl__$Vector_IVector;
openfl__$Vector_IVector.__name__ = "openfl._Vector.IVector";
openfl__$Vector_IVector.__isInterface__ = true;
openfl__$Vector_IVector.prototype = {
	get_length: null
	,set_length: null
	,fixed: null
	,concat: null
	,copy: null
	,filter: null
	,get: null
	,indexOf: null
	,insertAt: null
	,iterator: null
	,join: null
	,lastIndexOf: null
	,pop: null
	,push: null
	,removeAt: null
	,reverse: null
	,set: null
	,shift: null
	,slice: null
	,sort: null
	,splice: null
	,toString: null
	,unshift: null
	,__class__: openfl__$Vector_IVector
	,__properties__: {set_length:"set_length",get_length:"get_length"}
};
var openfl__$Vector_BoolVector = function(length,fixed,array) {
	if(fixed == null) {
		fixed = false;
	}
	if(length == null) {
		length = 0;
	}
	if(array == null) {
		array = [];
	}
	this.__array = array;
	if(length > 0) {
		this.set_length(length);
	}
	this.fixed = fixed;
};
$hxClasses["openfl._Vector.BoolVector"] = openfl__$Vector_BoolVector;
openfl__$Vector_BoolVector.__name__ = "openfl._Vector.BoolVector";
openfl__$Vector_BoolVector.__interfaces__ = [openfl__$Vector_IVector];
openfl__$Vector_BoolVector.prototype = {
	fixed: null
	,__array: null
	,concat: function(a) {
		if(a == null) {
			return new openfl__$Vector_BoolVector(0,false,this.__array.slice());
		} else {
			var other = a;
			if(other.__array.length > 0) {
				return new openfl__$Vector_BoolVector(0,false,this.__array.concat(other.__array));
			} else {
				return new openfl__$Vector_BoolVector(0,false,this.__array.slice());
			}
		}
	}
	,copy: function() {
		return new openfl__$Vector_BoolVector(0,this.fixed,this.__array.slice());
	}
	,filter: function(callback) {
		var tmp = this.fixed;
		var _g = [];
		var _g1 = 0;
		var _g2 = this.__array;
		while(_g1 < _g2.length) {
			var v = _g2[_g1];
			++_g1;
			if(callback(v)) {
				_g.push(v);
			}
		}
		return new openfl__$Vector_BoolVector(0,tmp,_g);
	}
	,get: function(index) {
		if(index >= this.__array.length) {
			return false;
		} else {
			return this.__array[index];
		}
	}
	,indexOf: function(x,from) {
		if(from == null) {
			from = 0;
		}
		var _g = from;
		var _g1 = this.__array.length;
		while(_g < _g1) {
			var i = _g++;
			if(this.__array[i] == x) {
				return i;
			}
		}
		return -1;
	}
	,insertAt: function(index,element) {
		if(!this.fixed || index < this.__array.length) {
			this.__array.splice(index,0,element);
		}
	}
	,iterator: function() {
		return new haxe_iterators_ArrayIterator(this.__array);
	}
	,join: function(sep) {
		if(sep == null) {
			sep = ",";
		}
		return this.__array.join(sep);
	}
	,lastIndexOf: function(x,from) {
		var i = from == null || from >= this.__array.length ? this.__array.length - 1 : from;
		while(i >= 0) {
			if(this.__array[i] == x) {
				return i;
			}
			--i;
		}
		return -1;
	}
	,pop: function() {
		if(!this.fixed) {
			return this.__array.pop();
		} else {
			return null;
		}
	}
	,push: function(x) {
		if(!this.fixed) {
			return this.__array.push(x);
		} else {
			return this.__array.length;
		}
	}
	,removeAt: function(index) {
		if(!this.fixed || index < this.__array.length) {
			return this.__array.splice(index,1)[0];
		}
		return false;
	}
	,reverse: function() {
		this.__array.reverse();
		return this;
	}
	,set: function(index,value) {
		if(!this.fixed || index < this.__array.length) {
			return this.__array[index] = value;
		} else {
			return value;
		}
	}
	,shift: function() {
		if(!this.fixed) {
			return this.__array.shift();
		} else {
			return null;
		}
	}
	,slice: function(startIndex,endIndex) {
		if(startIndex == null) {
			startIndex = 0;
		}
		if(endIndex == null) {
			endIndex = 16777215;
		}
		return new openfl__$Vector_BoolVector(0,false,this.__array.slice(startIndex,endIndex));
	}
	,sort: function(f) {
		this.__array.sort(f);
	}
	,splice: function(pos,len) {
		return new openfl__$Vector_BoolVector(0,false,this.__array.splice(pos,len));
	}
	,toJSON: function() {
		return this.__array;
	}
	,toString: function() {
		if(this.__array != null) {
			return this.__array.toString();
		} else {
			return null;
		}
	}
	,unshift: function(x) {
		if(!this.fixed) {
			this.__array.unshift(x);
		}
	}
	,get_length: function() {
		return this.__array.length;
	}
	,set_length: function(value) {
		if(!this.fixed) {
			var currentLength = this.__array.length;
			if(value < 0) {
				value = 0;
			}
			if(value > currentLength) {
				var _g = currentLength;
				var _g1 = value;
				while(_g < _g1) {
					var i = _g++;
					this.__array[i] = false;
				}
			} else {
				while(this.__array.length > value) this.__array.pop();
			}
		}
		return this.__array.length;
	}
	,__class__: openfl__$Vector_BoolVector
	,__properties__: {set_length:"set_length",get_length:"get_length"}
};
var openfl__$Vector_FloatVector = function(length,fixed,array,forceCopy) {
	if(forceCopy == null) {
		forceCopy = false;
	}
	if(fixed == null) {
		fixed = false;
	}
	if(length == null) {
		length = 0;
	}
	if(forceCopy) {
		this.__array = [];
		if(array != null) {
			var _g = 0;
			var _g1 = array.length;
			while(_g < _g1) {
				var i = _g++;
				this.__array[i] = array[i];
			}
		}
	} else {
		if(array == null) {
			array = [];
		}
		this.__array = array;
	}
	if(length > 0) {
		this.set_length(length);
	}
	this.fixed = fixed;
};
$hxClasses["openfl._Vector.FloatVector"] = openfl__$Vector_FloatVector;
openfl__$Vector_FloatVector.__name__ = "openfl._Vector.FloatVector";
openfl__$Vector_FloatVector.__interfaces__ = [openfl__$Vector_IVector];
openfl__$Vector_FloatVector.prototype = {
	fixed: null
	,__array: null
	,concat: function(a) {
		if(a == null) {
			return new openfl__$Vector_FloatVector(0,false,this.__array.slice());
		} else {
			var other = a;
			if(other.__array.length > 0) {
				return new openfl__$Vector_FloatVector(0,false,this.__array.concat(other.__array));
			} else {
				return new openfl__$Vector_FloatVector(0,false,this.__array.slice());
			}
		}
	}
	,copy: function() {
		return new openfl__$Vector_FloatVector(0,this.fixed,this.__array.slice());
	}
	,filter: function(callback) {
		var tmp = this.fixed;
		var _g = [];
		var _g1 = 0;
		var _g2 = this.__array;
		while(_g1 < _g2.length) {
			var v = _g2[_g1];
			++_g1;
			if(callback(v)) {
				_g.push(v);
			}
		}
		return new openfl__$Vector_FloatVector(0,tmp,_g);
	}
	,get: function(index) {
		return this.__array[index];
	}
	,indexOf: function(x,from) {
		if(from == null) {
			from = 0;
		}
		var _g = from;
		var _g1 = this.__array.length;
		while(_g < _g1) {
			var i = _g++;
			if(this.__array[i] == x) {
				return i;
			}
		}
		return -1;
	}
	,insertAt: function(index,element) {
		if(!this.fixed || index < this.__array.length) {
			this.__array.splice(index,0,element);
		}
	}
	,iterator: function() {
		return new haxe_iterators_ArrayIterator(this.__array);
	}
	,join: function(sep) {
		if(sep == null) {
			sep = ",";
		}
		return this.__array.join(sep);
	}
	,lastIndexOf: function(x,from) {
		var i = from == null || from >= this.__array.length ? this.__array.length - 1 : from;
		while(i >= 0) {
			if(this.__array[i] == x) {
				return i;
			}
			--i;
		}
		return -1;
	}
	,pop: function() {
		if(!this.fixed) {
			return this.__array.pop();
		} else {
			return null;
		}
	}
	,push: function(x) {
		if(!this.fixed) {
			return this.__array.push(x);
		} else {
			return this.__array.length;
		}
	}
	,removeAt: function(index) {
		if(!this.fixed || index < this.__array.length) {
			return this.__array.splice(index,1)[0];
		}
		return 0;
	}
	,reverse: function() {
		this.__array.reverse();
		return this;
	}
	,set: function(index,value) {
		if(!this.fixed || index < this.__array.length) {
			return this.__array[index] = value;
		} else {
			return value;
		}
	}
	,shift: function() {
		if(!this.fixed) {
			return this.__array.shift();
		} else {
			return null;
		}
	}
	,slice: function(startIndex,endIndex) {
		if(startIndex == null) {
			startIndex = 0;
		}
		if(endIndex == null) {
			endIndex = 16777215;
		}
		return new openfl__$Vector_FloatVector(0,false,this.__array.slice(startIndex,endIndex));
	}
	,sort: function(f) {
		this.__array.sort(f);
	}
	,splice: function(pos,len) {
		return new openfl__$Vector_FloatVector(0,false,this.__array.splice(pos,len));
	}
	,toJSON: function() {
		return this.__array;
	}
	,toString: function() {
		if(this.__array != null) {
			return this.__array.toString();
		} else {
			return null;
		}
	}
	,unshift: function(x) {
		if(!this.fixed) {
			this.__array.unshift(x);
		}
	}
	,get_length: function() {
		return this.__array.length;
	}
	,set_length: function(value) {
		if(value != this.__array.length && !this.fixed) {
			var currentLength = this.__array.length;
			if(value < 0) {
				value = 0;
			}
			if(value > currentLength) {
				var _g = currentLength;
				var _g1 = value;
				while(_g < _g1) {
					var i = _g++;
					this.__array[i] = 0;
				}
			} else {
				while(this.__array.length > value) this.__array.pop();
			}
		}
		return this.__array.length;
	}
	,__class__: openfl__$Vector_FloatVector
	,__properties__: {set_length:"set_length",get_length:"get_length"}
};
var openfl__$Vector_FunctionVector = function(length,fixed,array) {
	if(fixed == null) {
		fixed = false;
	}
	if(length == null) {
		length = 0;
	}
	if(array == null) {
		array = [];
	}
	this.__array = array;
	if(length > 0) {
		this.set_length(length);
	}
	this.fixed = fixed;
};
$hxClasses["openfl._Vector.FunctionVector"] = openfl__$Vector_FunctionVector;
openfl__$Vector_FunctionVector.__name__ = "openfl._Vector.FunctionVector";
openfl__$Vector_FunctionVector.__interfaces__ = [openfl__$Vector_IVector];
openfl__$Vector_FunctionVector.prototype = {
	fixed: null
	,__array: null
	,concat: function(a) {
		if(a == null) {
			return new openfl__$Vector_FunctionVector(0,false,this.__array.slice());
		} else {
			var other = a;
			if(other.__array.length > 0) {
				return new openfl__$Vector_FunctionVector(0,false,this.__array.concat(other.__array));
			} else {
				return new openfl__$Vector_FunctionVector(0,false,this.__array.slice());
			}
		}
	}
	,copy: function() {
		return new openfl__$Vector_FunctionVector(0,this.fixed,this.__array.slice());
	}
	,filter: function(callback) {
		var tmp = this.fixed;
		var _g = [];
		var _g1 = 0;
		var _g2 = this.__array;
		while(_g1 < _g2.length) {
			var v = _g2[_g1];
			++_g1;
			if(callback(v)) {
				_g.push(v);
			}
		}
		return new openfl__$Vector_FunctionVector(0,tmp,_g);
	}
	,get: function(index) {
		if(index >= this.__array.length) {
			return null;
		} else {
			return this.__array[index];
		}
	}
	,indexOf: function(x,from) {
		if(from == null) {
			from = 0;
		}
		var _g = from;
		var _g1 = this.__array.length;
		while(_g < _g1) {
			var i = _g++;
			if(Reflect.compareMethods(this.__array[i],x)) {
				return i;
			}
		}
		return -1;
	}
	,insertAt: function(index,element) {
		if(!this.fixed || index < this.__array.length) {
			this.__array.splice(index,0,element);
		}
	}
	,iterator: function() {
		return new haxe_iterators_ArrayIterator(this.__array);
	}
	,join: function(sep) {
		if(sep == null) {
			sep = ",";
		}
		return this.__array.join(sep);
	}
	,lastIndexOf: function(x,from) {
		var i = from == null || from >= this.__array.length ? this.__array.length - 1 : from;
		while(i >= 0) {
			if(Reflect.compareMethods(this.__array[i],x)) {
				return i;
			}
			--i;
		}
		return -1;
	}
	,pop: function() {
		if(!this.fixed) {
			return this.__array.pop();
		} else {
			return null;
		}
	}
	,push: function(x) {
		if(!this.fixed) {
			return this.__array.push(x);
		} else {
			return this.__array.length;
		}
	}
	,removeAt: function(index) {
		if(!this.fixed || index < this.__array.length) {
			return this.__array.splice(index,1)[0];
		}
		return null;
	}
	,reverse: function() {
		this.__array.reverse();
		return this;
	}
	,set: function(index,value) {
		if(!this.fixed || index < this.__array.length) {
			return this.__array[index] = value;
		} else {
			return value;
		}
	}
	,shift: function() {
		if(!this.fixed) {
			return this.__array.shift();
		} else {
			return null;
		}
	}
	,slice: function(startIndex,endIndex) {
		if(startIndex == null) {
			startIndex = 0;
		}
		if(endIndex == null) {
			endIndex = 16777215;
		}
		return new openfl__$Vector_FunctionVector(0,false,this.__array.slice(startIndex,endIndex));
	}
	,sort: function(f) {
		this.__array.sort(f);
	}
	,splice: function(pos,len) {
		return new openfl__$Vector_FunctionVector(0,false,this.__array.splice(pos,len));
	}
	,toJSON: function() {
		return this.__array;
	}
	,toString: function() {
		if(this.__array != null) {
			return this.__array.toString();
		} else {
			return null;
		}
	}
	,unshift: function(x) {
		if(!this.fixed) {
			this.__array.unshift(x);
		}
	}
	,get_length: function() {
		return this.__array.length;
	}
	,set_length: function(value) {
		if(!this.fixed) {
			var currentLength = this.__array.length;
			if(value < 0) {
				value = 0;
			}
			if(value > currentLength) {
				var _g = currentLength;
				var _g1 = value;
				while(_g < _g1) {
					var i = _g++;
					this.__array[i] = null;
				}
			} else {
				while(this.__array.length > value) this.__array.pop();
			}
		}
		return this.__array.length;
	}
	,__class__: openfl__$Vector_FunctionVector
	,__properties__: {set_length:"set_length",get_length:"get_length"}
};
var openfl__$Vector_IntVector = function(length,fixed,array) {
	if(fixed == null) {
		fixed = false;
	}
	if(length == null) {
		length = 0;
	}
	if(array == null) {
		array = [];
	}
	this.__array = array;
	if(length > 0) {
		this.set_length(length);
	}
	this.fixed = fixed;
};
$hxClasses["openfl._Vector.IntVector"] = openfl__$Vector_IntVector;
openfl__$Vector_IntVector.__name__ = "openfl._Vector.IntVector";
openfl__$Vector_IntVector.__interfaces__ = [openfl__$Vector_IVector];
openfl__$Vector_IntVector.prototype = {
	fixed: null
	,__array: null
	,concat: function(a) {
		if(a == null) {
			return new openfl__$Vector_IntVector(0,false,this.__array.slice());
		} else {
			var other = a;
			if(other.__array.length > 0) {
				return new openfl__$Vector_IntVector(0,false,this.__array.concat(other.__array));
			} else {
				return new openfl__$Vector_IntVector(0,false,this.__array.slice());
			}
		}
	}
	,copy: function() {
		return new openfl__$Vector_IntVector(0,this.fixed,this.__array.slice());
	}
	,filter: function(callback) {
		var tmp = this.fixed;
		var _g = [];
		var _g1 = 0;
		var _g2 = this.__array;
		while(_g1 < _g2.length) {
			var v = _g2[_g1];
			++_g1;
			if(callback(v)) {
				_g.push(v);
			}
		}
		return new openfl__$Vector_IntVector(0,tmp,_g);
	}
	,get: function(index) {
		return this.__array[index];
	}
	,indexOf: function(x,from) {
		if(from == null) {
			from = 0;
		}
		var _g = from;
		var _g1 = this.__array.length;
		while(_g < _g1) {
			var i = _g++;
			if(this.__array[i] == x) {
				return i;
			}
		}
		return -1;
	}
	,insertAt: function(index,element) {
		if(!this.fixed || index < this.__array.length) {
			this.__array.splice(index,0,element);
		}
	}
	,iterator: function() {
		return new haxe_iterators_ArrayIterator(this.__array);
	}
	,join: function(sep) {
		if(sep == null) {
			sep = ",";
		}
		return this.__array.join(sep);
	}
	,lastIndexOf: function(x,from) {
		var i = from == null || from >= this.__array.length ? this.__array.length - 1 : from;
		while(i >= 0) {
			if(this.__array[i] == x) {
				return i;
			}
			--i;
		}
		return -1;
	}
	,pop: function() {
		if(!this.fixed) {
			return this.__array.pop();
		} else {
			return null;
		}
	}
	,push: function(x) {
		if(!this.fixed) {
			return this.__array.push(x);
		} else {
			return this.__array.length;
		}
	}
	,removeAt: function(index) {
		if(!this.fixed || index < this.__array.length) {
			return this.__array.splice(index,1)[0];
		}
		return 0;
	}
	,reverse: function() {
		this.__array.reverse();
		return this;
	}
	,set: function(index,value) {
		if(!this.fixed || index < this.__array.length) {
			return this.__array[index] = value;
		} else {
			return value;
		}
	}
	,shift: function() {
		if(!this.fixed) {
			return this.__array.shift();
		} else {
			return null;
		}
	}
	,slice: function(startIndex,endIndex) {
		if(startIndex == null) {
			startIndex = 0;
		}
		if(endIndex == null) {
			endIndex = 16777215;
		}
		return new openfl__$Vector_IntVector(0,false,this.__array.slice(startIndex,endIndex));
	}
	,sort: function(f) {
		this.__array.sort(f);
	}
	,splice: function(pos,len) {
		return new openfl__$Vector_IntVector(0,false,this.__array.splice(pos,len));
	}
	,toJSON: function() {
		return this.__array;
	}
	,toString: function() {
		if(this.__array != null) {
			return this.__array.toString();
		} else {
			return null;
		}
	}
	,unshift: function(x) {
		if(!this.fixed) {
			this.__array.unshift(x);
		}
	}
	,get_length: function() {
		return this.__array.length;
	}
	,set_length: function(value) {
		if(!this.fixed) {
			var currentLength = this.__array.length;
			if(value < 0) {
				value = 0;
			}
			if(value > currentLength) {
				var _g = currentLength;
				var _g1 = value;
				while(_g < _g1) {
					var i = _g++;
					this.__array[i] = 0;
				}
			} else {
				while(this.__array.length > value) this.__array.pop();
			}
		}
		return this.__array.length;
	}
	,__class__: openfl__$Vector_IntVector
	,__properties__: {set_length:"set_length",get_length:"get_length"}
};
var openfl__$Vector_ObjectVector = function(length,fixed,array,forceCopy) {
	if(forceCopy == null) {
		forceCopy = false;
	}
	if(fixed == null) {
		fixed = false;
	}
	if(length == null) {
		length = 0;
	}
	if(forceCopy) {
		this.__array = [];
		if(array != null) {
			var _g = 0;
			var _g1 = array.length;
			while(_g < _g1) {
				var i = _g++;
				this.__array[i] = array[i];
			}
		}
	} else {
		if(array == null) {
			array = [];
		}
		this.__array = array;
	}
	if(length > 0) {
		this.set_length(length);
	}
	this.fixed = fixed;
};
$hxClasses["openfl._Vector.ObjectVector"] = openfl__$Vector_ObjectVector;
openfl__$Vector_ObjectVector.__name__ = "openfl._Vector.ObjectVector";
openfl__$Vector_ObjectVector.__interfaces__ = [openfl__$Vector_IVector];
openfl__$Vector_ObjectVector.prototype = {
	fixed: null
	,__array: null
	,concat: function(a) {
		if(a == null) {
			return new openfl__$Vector_ObjectVector(0,false,this.__array.slice());
		} else {
			var other = a;
			if(other.__array.length > 0) {
				return new openfl__$Vector_ObjectVector(0,false,this.__array.concat(other.__array));
			} else {
				return new openfl__$Vector_ObjectVector(0,false,this.__array.slice());
			}
		}
	}
	,copy: function() {
		return new openfl__$Vector_ObjectVector(0,this.fixed,this.__array.slice());
	}
	,filter: function(callback) {
		var tmp = this.fixed;
		var _g = [];
		var _g1 = 0;
		var _g2 = this.__array;
		while(_g1 < _g2.length) {
			var v = _g2[_g1];
			++_g1;
			if(callback(v)) {
				_g.push(v);
			}
		}
		return new openfl__$Vector_ObjectVector(0,tmp,_g);
	}
	,get: function(index) {
		return this.__array[index];
	}
	,indexOf: function(x,from) {
		if(from == null) {
			from = 0;
		}
		var _g = from;
		var _g1 = this.__array.length;
		while(_g < _g1) {
			var i = _g++;
			if(this.__array[i] == x) {
				return i;
			}
		}
		return -1;
	}
	,insertAt: function(index,element) {
		if(!this.fixed || index < this.__array.length) {
			this.__array.splice(index,0,element);
		}
	}
	,iterator: function() {
		return new haxe_iterators_ArrayIterator(this.__array);
	}
	,join: function(sep) {
		if(sep == null) {
			sep = ",";
		}
		return this.__array.join(sep);
	}
	,lastIndexOf: function(x,from) {
		var i = from == null || from >= this.__array.length ? this.__array.length - 1 : from;
		while(i >= 0) {
			if(this.__array[i] == x) {
				return i;
			}
			--i;
		}
		return -1;
	}
	,pop: function() {
		if(!this.fixed) {
			return this.__array.pop();
		} else {
			return null;
		}
	}
	,push: function(x) {
		if(!this.fixed) {
			return this.__array.push(x);
		} else {
			return this.__array.length;
		}
	}
	,removeAt: function(index) {
		if(!this.fixed || index < this.__array.length) {
			return this.__array.splice(index,1)[0];
		}
		return null;
	}
	,reverse: function() {
		this.__array.reverse();
		return this;
	}
	,set: function(index,value) {
		if(!this.fixed || index < this.__array.length) {
			return this.__array[index] = value;
		} else {
			return value;
		}
	}
	,shift: function() {
		if(!this.fixed) {
			return this.__array.shift();
		} else {
			return null;
		}
	}
	,slice: function(startIndex,endIndex) {
		if(startIndex == null) {
			startIndex = 0;
		}
		if(endIndex == null) {
			endIndex = 16777215;
		}
		return new openfl__$Vector_ObjectVector(0,false,this.__array.slice(startIndex,endIndex));
	}
	,sort: function(f) {
		this.__array.sort(f);
	}
	,splice: function(pos,len) {
		return new openfl__$Vector_ObjectVector(0,false,this.__array.splice(pos,len));
	}
	,toJSON: function() {
		return this.__array;
	}
	,toString: function() {
		if(this.__array != null) {
			return this.__array.toString();
		} else {
			return null;
		}
	}
	,unshift: function(x) {
		if(!this.fixed) {
			this.__array.unshift(x);
		}
	}
	,get_length: function() {
		return this.__array.length;
	}
	,set_length: function(value) {
		if(!this.fixed) {
			var currentLength = this.__array.length;
			if(value < 0) {
				value = 0;
			}
			if(value > currentLength) {
				var _g = currentLength;
				var _g1 = value;
				while(_g < _g1) {
					var i = _g++;
					this.__array.push(null);
				}
			} else {
				while(this.__array.length > value) this.__array.pop();
			}
		}
		return this.__array.length;
	}
	,__class__: openfl__$Vector_ObjectVector
	,__properties__: {set_length:"set_length",get_length:"get_length"}
};
var openfl__$internal_Lib = function() { };
$hxClasses["openfl._internal.Lib"] = openfl__$internal_Lib;
openfl__$internal_Lib.__name__ = "openfl._internal.Lib";
openfl__$internal_Lib.notImplemented = function(posInfo) {
	var api = posInfo.className + "." + posInfo.methodName;
	if(!Object.prototype.hasOwnProperty.call(openfl__$internal_Lib.__sentWarnings.h,api)) {
		openfl__$internal_Lib.__sentWarnings.h[api] = true;
		lime_utils_Log.warn(posInfo.methodName + " is not implemented",posInfo);
	}
};
var openfl__$internal_formats_agal_AGALConverter = function() { };
$hxClasses["openfl._internal.formats.agal.AGALConverter"] = openfl__$internal_formats_agal_AGALConverter;
openfl__$internal_formats_agal_AGALConverter.__name__ = "openfl._internal.formats.agal.AGALConverter";
openfl__$internal_formats_agal_AGALConverter.prefixFromType = function(regType,programType) {
	switch(regType) {
	case 0:
		return "va";
	case 1:
		if(programType == openfl__$internal_formats_agal__$AGALConverter_ProgramType.VERTEX) {
			return "vc";
		} else {
			return "fc";
		}
		break;
	case 2:
		if(programType == openfl__$internal_formats_agal__$AGALConverter_ProgramType.VERTEX) {
			return "vt";
		} else {
			return "ft";
		}
		break;
	case 3:
		return "output_";
	case 4:
		return "v";
	case 5:
		return "sampler";
	default:
		throw haxe_Exception.thrown(new openfl_errors_IllegalOperationError("Invalid data!"));
	}
};
openfl__$internal_formats_agal_AGALConverter.readUInt64 = function(byteArray) {
	var low = byteArray.readInt();
	var high = byteArray.readInt();
	var this1 = new haxe__$Int64__$_$_$Int64(high,low);
	return this1;
};
openfl__$internal_formats_agal_AGALConverter.convertToGLSL = function(agal,samplerState) {
	agal.position = 0;
	agal.__endian = 1;
	var magic = agal.readByte() & 255;
	if(magic == 176) {
		return agal.readUTF();
	}
	if(magic != 160) {
		throw haxe_Exception.thrown(new openfl_errors_IllegalOperationError("Magic value must be 0xA0, may not be AGAL"));
	}
	var version = agal.readInt();
	if(version != 1) {
		throw haxe_Exception.thrown(new openfl_errors_IllegalOperationError("Version must be 1"));
	}
	var shaderTypeID = agal.readByte() & 255;
	if(shaderTypeID != 161) {
		throw haxe_Exception.thrown(new openfl_errors_IllegalOperationError("Shader type ID must be 0xA1"));
	}
	var programType = (agal.readByte() & 255) == 0 ? openfl__$internal_formats_agal__$AGALConverter_ProgramType.VERTEX : openfl__$internal_formats_agal__$AGALConverter_ProgramType.FRAGMENT;
	var map = new openfl__$internal_formats_agal_RegisterMap();
	var sb_b = "";
	while(true) {
		var a = agal.position;
		if(!UInt.gt(openfl_utils_ByteArray.get_length(agal),a)) {
			break;
		}
		var opcode = agal.readInt();
		var dest = agal.readUnsignedInt();
		var source1 = openfl__$internal_formats_agal_AGALConverter.readUInt64(agal);
		var source2 = openfl__$internal_formats_agal_AGALConverter.readUInt64(agal);
		var dr = openfl__$internal_formats_agal__$AGALConverter_DestRegister.parse(dest,programType);
		var sr1 = openfl__$internal_formats_agal__$AGALConverter_SourceRegister.parse(source1,programType,dr.mask);
		var sr2 = openfl__$internal_formats_agal__$AGALConverter_SourceRegister.parse(source2,programType,dr.mask);
		sb_b += "\t";
		switch(opcode) {
		case 0:
			sb_b += Std.string(dr.toGLSL() + " = " + sr1.toGLSL() + "; // mov");
			map.addDR(dr,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 1:
			sb_b += Std.string(dr.toGLSL() + " = " + sr1.toGLSL() + " + " + sr2.toGLSL() + "; // add");
			map.addDR(dr,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 2:
			sb_b += Std.string(dr.toGLSL() + " = " + sr1.toGLSL() + " - " + sr2.toGLSL() + "; // sub");
			map.addDR(dr,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 3:
			sb_b += Std.string(dr.toGLSL() + " = " + sr1.toGLSL() + " * " + sr2.toGLSL() + "; // mul");
			map.addDR(dr,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 4:
			sb_b += Std.string(dr.toGLSL() + " = " + sr1.toGLSL() + " / " + sr2.toGLSL() + "; // div");
			map.addDR(dr,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 5:
			var sr = sr1.toGLSL();
			if(sr.indexOf(".") > -1) {
				sb_b += Std.string(dr.toGLSL() + " = 1.0 / " + sr1.toGLSL() + "; // rcp");
			} else {
				sb_b += Std.string(dr.toGLSL() + " = vec4(1) / " + sr1.toGLSL() + "; // rcp");
			}
			map.addDR(dr,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 6:
			sb_b += Std.string(dr.toGLSL() + " = min(" + sr1.toGLSL() + ", " + sr2.toGLSL() + "); // min");
			map.addDR(dr,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 7:
			sb_b += Std.string(dr.toGLSL() + " = max(" + sr1.toGLSL() + ", " + sr2.toGLSL() + "); // max");
			map.addDR(dr,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 8:
			sb_b += Std.string(dr.toGLSL() + " = fract(" + sr1.toGLSL() + "); // frc");
			map.addDR(dr,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 9:
			sb_b += Std.string(dr.toGLSL() + " = sqrt(" + sr1.toGLSL() + "); // sqrt");
			map.addDR(dr,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 10:
			sb_b += Std.string(dr.toGLSL() + " = inversesqrt(" + sr1.toGLSL() + "); // rsq");
			map.addDR(dr,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 11:
			sb_b += Std.string(dr.toGLSL() + " = pow(" + sr1.toGLSL() + ", " + sr2.toGLSL() + "); // pow");
			map.addDR(dr,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 12:
			sb_b += Std.string(dr.toGLSL() + " = log2(" + sr1.toGLSL() + "); // log");
			map.addDR(dr,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 13:
			sb_b += Std.string(dr.toGLSL() + " = exp2(" + sr1.toGLSL() + "); // exp");
			map.addDR(dr,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 14:
			sb_b += Std.string(dr.toGLSL() + " = normalize(" + sr1.toGLSL() + "); // normalize");
			map.addDR(dr,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 15:
			sb_b += Std.string(dr.toGLSL() + " = sin(" + sr1.toGLSL() + "); // sin");
			map.addDR(dr,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 16:
			sb_b += Std.string(dr.toGLSL() + " = cos(" + sr1.toGLSL() + "); // cos");
			map.addDR(dr,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 17:
			sr1.sourceMask = sr2.sourceMask = 7;
			sb_b += Std.string(dr.toGLSL() + " = cross(vec3(" + sr1.toGLSL() + "), vec3(" + sr2.toGLSL() + ")); // crs");
			map.addDR(dr,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 18:
			sr1.sourceMask = sr2.sourceMask = 7;
			sb_b += Std.string(dr.toGLSL() + " = vec4(dot(vec3(" + sr1.toGLSL() + "), vec3(" + sr2.toGLSL() + ")))" + dr.getWriteMask() + "; // dp3");
			map.addDR(dr,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 19:
			sr1.sourceMask = sr2.sourceMask = 15;
			sb_b += Std.string(dr.toGLSL() + " = vec4(dot(vec4(" + sr1.toGLSL() + "), vec4(" + sr2.toGLSL() + ")))" + dr.getWriteMask() + "; // dp4");
			map.addDR(dr,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 20:
			sb_b += Std.string(dr.toGLSL() + " = abs(" + sr1.toGLSL() + "); // abs");
			map.addDR(dr,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 21:
			sb_b += Std.string(dr.toGLSL() + " = -" + sr1.toGLSL() + "; // neg");
			map.addDR(dr,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 22:
			sb_b += Std.string(dr.toGLSL() + " = clamp(" + sr1.toGLSL() + ", 0.0, 1.0); // saturate");
			map.addDR(dr,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 23:
			var existingUsage = map.getRegisterUsage(sr2);
			if(existingUsage != openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4 && existingUsage != openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4_ARRAY) {
				sb_b += Std.string(dr.toGLSL() + " = " + sr1.toGLSL() + " * mat3(" + sr2.toGLSL(false) + "); // m33");
				map.addDR(dr,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
				map.addSR(sr1,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
				map.addSR(sr2,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.MATRIX_4_4);
			} else {
				sr1.sourceMask = sr2.sourceMask = 7;
				sb_b += Std.string(dr.toGLSL() + " = vec3(" + "dot(" + sr1.toGLSL(true) + "," + sr2.toGLSL(true,0) + "), " + "dot(" + sr1.toGLSL(true) + "," + sr2.toGLSL(true,1) + ")," + "dot(" + sr1.toGLSL(true) + "," + sr2.toGLSL(true,2) + ")); // m33");
				map.addDR(dr,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
				map.addSR(sr1,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
				map.addSR(sr2,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4,0);
				map.addSR(sr2,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4,1);
				map.addSR(sr2,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4,2);
			}
			break;
		case 24:
			var existingUsage1 = map.getRegisterUsage(sr2);
			if(existingUsage1 != openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4 && existingUsage1 != openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4_ARRAY) {
				sb_b += Std.string(dr.toGLSL() + " = " + sr1.toGLSL() + " * " + sr2.toGLSL(false) + "; // m44");
				map.addDR(dr,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
				map.addSR(sr1,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
				map.addSR(sr2,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.MATRIX_4_4);
			} else {
				sr1.sourceMask = sr2.sourceMask = 15;
				sb_b += Std.string(dr.toGLSL() + " = vec4(" + "dot(" + sr1.toGLSL(true) + "," + sr2.toGLSL(true,0) + "), " + "dot(" + sr1.toGLSL(true) + "," + sr2.toGLSL(true,1) + "), " + "dot(" + sr1.toGLSL(true) + "," + sr2.toGLSL(true,2) + "), " + "dot(" + sr1.toGLSL(true) + "," + sr2.toGLSL(true,3) + ")); // m44");
				map.addDR(dr,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
				map.addSR(sr1,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
				map.addSR(sr2,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4,0);
				map.addSR(sr2,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4,1);
				map.addSR(sr2,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4,2);
				map.addSR(sr2,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4,3);
			}
			break;
		case 25:
			dr.mask &= 7;
			var existingUsage2 = map.getRegisterUsage(sr2);
			if(existingUsage2 != openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4 && existingUsage2 != openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4_ARRAY) {
				sb_b += Std.string(dr.toGLSL() + " = " + sr1.toGLSL() + " * " + sr2.toGLSL(false) + "; // m34");
				map.addDR(dr,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
				map.addSR(sr1,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
				map.addSR(sr2,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.MATRIX_4_4);
			} else {
				sr1.sourceMask = sr2.sourceMask = 15;
				sb_b += Std.string(dr.toGLSL() + " = vec3(" + "dot(" + sr1.toGLSL(true) + "," + sr2.toGLSL(true,0) + "), " + "dot(" + sr1.toGLSL(true) + "," + sr2.toGLSL(true,1) + ")," + "dot(" + sr1.toGLSL(true) + "," + sr2.toGLSL(true,2) + ")); // m34");
				map.addDR(dr,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
				map.addSR(sr1,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
				map.addSR(sr2,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4,0);
				map.addSR(sr2,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4,1);
				map.addSR(sr2,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4,2);
			}
			break;
		case 39:
			sr1.sourceMask = 15;
			sb_b += Std.string("if (any(lessThan(" + sr1.toGLSL() + ", vec4(0)))) discard;");
			map.addSR(sr1,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 40:
			var sampler = openfl__$internal_formats_agal__$AGALConverter_SamplerRegister.parse(source2,programType);
			switch(sampler.d) {
			case 0:
				if(sampler.t == 2) {
					sr1.sourceMask = 3;
					map.addSaR(sampler,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.SAMPLER_2D_ALPHA);
					sb_b += Std.string("if (" + sampler.toGLSL() + "_alphaEnabled) {\n");
					sb_b += Std.string("\t\t" + dr.toGLSL() + " = vec4(texture2D(" + sampler.toGLSL() + ", " + sr1.toGLSL() + ").xyz, texture2D(" + sampler.toGLSL() + "_alpha, " + sr1.toGLSL() + ").x); // tex + alpha\n");
					sb_b += "\t} else {\n";
					sb_b += Std.string("\t\t" + dr.toGLSL() + " = texture2D(" + sampler.toGLSL() + ", " + sr1.toGLSL() + "); // tex\n");
					sb_b += "\t}";
				} else {
					sr1.sourceMask = 3;
					map.addSaR(sampler,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.SAMPLER_2D);
					sb_b += Std.string(dr.toGLSL() + " = texture2D(" + sampler.toGLSL() + ", " + sr1.toGLSL() + "); // tex");
				}
				break;
			case 1:
				if(sampler.t == 2) {
					sr1.sourceMask = 7;
					map.addSaR(sampler,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.SAMPLER_CUBE_ALPHA);
					sb_b += Std.string("if (" + sampler.toGLSL() + "_alphaEnabled) {\n");
					sb_b += Std.string("\t\t" + dr.toGLSL() + " = vec4(textureCube(" + sampler.toGLSL() + ", " + sr1.toGLSL() + ").xyz, textureCube(" + sampler.toGLSL() + "_alpha, " + sr1.toGLSL() + ").x); // tex + alpha\n");
					sb_b += "\t} else {\n";
					sb_b += Std.string("\t\t" + dr.toGLSL() + " = textureCube(" + sampler.toGLSL() + ", " + sr1.toGLSL() + "); // tex");
					sb_b += "\t}";
				} else {
					sr1.sourceMask = 7;
					sb_b += Std.string(dr.toGLSL() + " = textureCube(" + sampler.toGLSL() + ", " + sr1.toGLSL() + "); // tex");
					map.addSaR(sampler,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.SAMPLER_CUBE);
				}
				break;
			}
			map.addDR(dr,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			if(samplerState != null) {
				samplerState[sampler.n] = sampler.toSamplerState();
			}
			break;
		case 41:
			sr1.sourceMask = sr2.sourceMask = 15;
			sb_b += Std.string(dr.toGLSL() + " = vec4(greaterThanEqual(" + sr1.toGLSL() + ", " + sr2.toGLSL() + "))" + dr.getWriteMask() + "; // ste");
			map.addDR(dr,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 42:
			sr1.sourceMask = sr2.sourceMask = 15;
			sb_b += Std.string(dr.toGLSL() + " = vec4(lessThan(" + sr1.toGLSL() + ", " + sr2.toGLSL() + "))" + dr.getWriteMask() + "; // slt");
			map.addDR(dr,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 44:
			sr1.sourceMask = sr2.sourceMask = 15;
			sb_b += Std.string(dr.toGLSL() + " = vec4(equal(" + sr1.toGLSL() + ", " + sr2.toGLSL() + "))" + dr.getWriteMask() + "; // seq");
			map.addDR(dr,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 45:
			sr1.sourceMask = sr2.sourceMask = 15;
			sb_b += Std.string(dr.toGLSL() + " = vec4(notEqual(" + sr1.toGLSL() + ", " + sr2.toGLSL() + "))" + dr.getWriteMask() + "; // sne");
			map.addDR(dr,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		default:
			throw haxe_Exception.thrown(new openfl_errors_IllegalOperationError("Opcode " + opcode));
		}
		sb_b += "\n";
	}
	if(openfl__$internal_formats_agal_AGALConverter.limitedProfile == null) {
		var version = lime_graphics_opengl_GL.context.getParameter(7938);
		openfl__$internal_formats_agal_AGALConverter.limitedProfile = version.indexOf("OpenGL ES") > -1 || version.indexOf("WebGL") > -1;
	}
	var glsl_b = "";
	glsl_b += Std.string("// AGAL " + (programType == openfl__$internal_formats_agal__$AGALConverter_ProgramType.VERTEX ? "vertex" : "fragment") + " shader\n");
	if(openfl__$internal_formats_agal_AGALConverter.limitedProfile) {
		glsl_b += "#version 100\n";
		glsl_b += "precision highp float;\n";
	} else {
		glsl_b += "#version 120\n";
	}
	glsl_b += Std.string(map.toGLSL(false));
	if(programType == openfl__$internal_formats_agal__$AGALConverter_ProgramType.VERTEX) {
		glsl_b += "uniform vec4 vcPositionScale;\n";
	}
	glsl_b += "void main() {\n";
	glsl_b += Std.string(map.toGLSL(true));
	glsl_b += Std.string(sb_b);
	if(programType == openfl__$internal_formats_agal__$AGALConverter_ProgramType.VERTEX) {
		glsl_b += "\tgl_Position *= vcPositionScale;\n";
	}
	glsl_b += "}\n";
	return glsl_b;
};
var openfl__$internal_formats_agal__$AGALConverter_DestRegister = function() {
};
$hxClasses["openfl._internal.formats.agal._AGALConverter.DestRegister"] = openfl__$internal_formats_agal__$AGALConverter_DestRegister;
openfl__$internal_formats_agal__$AGALConverter_DestRegister.__name__ = "openfl._internal.formats.agal._AGALConverter.DestRegister";
openfl__$internal_formats_agal__$AGALConverter_DestRegister.parse = function(v,programType) {
	var dr = new openfl__$internal_formats_agal__$AGALConverter_DestRegister();
	dr.programType = programType;
	dr.type = v >>> 24 & 15;
	dr.mask = v >>> 16 & 15;
	dr.n = v & 65535;
	return dr;
};
openfl__$internal_formats_agal__$AGALConverter_DestRegister.prototype = {
	mask: null
	,n: null
	,programType: null
	,type: null
	,getWriteMask: function() {
		var str = ".";
		if((this.mask & 1) != 0) {
			str += "x";
		}
		if((this.mask & 2) != 0) {
			str += "y";
		}
		if((this.mask & 4) != 0) {
			str += "z";
		}
		if((this.mask & 8) != 0) {
			str += "w";
		}
		return str;
	}
	,toGLSL: function(useMask) {
		if(useMask == null) {
			useMask = true;
		}
		var str;
		if(this.type == 3) {
			str = this.programType == openfl__$internal_formats_agal__$AGALConverter_ProgramType.VERTEX ? "gl_Position" : "gl_FragColor";
		} else {
			str = openfl__$internal_formats_agal_AGALConverter.prefixFromType(this.type,this.programType) + this.n;
		}
		if(useMask && this.mask != 15) {
			str += this.getWriteMask();
		}
		return str;
	}
	,__class__: openfl__$internal_formats_agal__$AGALConverter_DestRegister
};
var openfl__$internal_formats_agal__$AGALConverter_ProgramType = $hxEnums["openfl._internal.formats.agal._AGALConverter.ProgramType"] = { __ename__ : "openfl._internal.formats.agal._AGALConverter.ProgramType", __constructs__ : ["VERTEX","FRAGMENT"]
	,VERTEX: {_hx_index:0,__enum__:"openfl._internal.formats.agal._AGALConverter.ProgramType",toString:$estr}
	,FRAGMENT: {_hx_index:1,__enum__:"openfl._internal.formats.agal._AGALConverter.ProgramType",toString:$estr}
};
var openfl__$internal_formats_agal_RegisterMap = function() {
	this.mEntries = [];
};
$hxClasses["openfl._internal.formats.agal.RegisterMap"] = openfl__$internal_formats_agal_RegisterMap;
openfl__$internal_formats_agal_RegisterMap.__name__ = "openfl._internal.formats.agal.RegisterMap";
openfl__$internal_formats_agal_RegisterMap.prototype = {
	mEntries: null
	,add: function(type,name,number,usage) {
		var _g = 0;
		var _g1 = this.mEntries;
		while(_g < _g1.length) {
			var entry = _g1[_g];
			++_g;
			if(entry.type == type && entry.name == name && entry.number == number) {
				if(entry.usage != usage) {
					throw haxe_Exception.thrown(new openfl_errors_IllegalOperationError("Cannot use register in multiple ways yet (mat4/vec4)"));
				}
				return;
			}
		}
		var entry = new openfl__$internal_formats_agal__$AGALConverter_RegisterMapEntry();
		entry.type = type;
		entry.name = name;
		entry.number = number;
		entry.usage = usage;
		this.mEntries.push(entry);
	}
	,addDR: function(dr,usage) {
		this.add(dr.type,dr.toGLSL(false),dr.n,usage);
	}
	,addSaR: function(sr,usage) {
		this.add(sr.type,sr.toGLSL(),sr.n,usage);
	}
	,addSR: function(sr,usage,offset) {
		if(offset == null) {
			offset = 0;
		}
		if(sr.d != 0) {
			this.add(sr.itype,openfl__$internal_formats_agal_AGALConverter.prefixFromType(sr.itype,sr.programType) + sr.n,sr.n,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			this.add(sr.type,openfl__$internal_formats_agal_AGALConverter.prefixFromType(sr.type,sr.programType) + sr.o,sr.o,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4_ARRAY);
			return;
		}
		this.add(sr.type,sr.toGLSL(false,offset),sr.n + offset,usage);
	}
	,getRegisterUsage: function(sr) {
		if(sr.d != 0) {
			return openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4_ARRAY;
		}
		return this.getUsage(sr.type,sr.toGLSL(false),sr.n);
	}
	,getUsage: function(type,name,number) {
		var _g = 0;
		var _g1 = this.mEntries;
		while(_g < _g1.length) {
			var entry = _g1[_g];
			++_g;
			if(entry.type == type && entry.name == name && entry.number == number) {
				return entry.usage;
			}
		}
		return openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.UNUSED;
	}
	,toGLSL: function(tempRegistersOnly) {
		this.mEntries.sort(function(a,b) {
			return a.number - b.number;
		});
		var entry;
		this.mEntries.sort(function(a,b) {
			return js_Boot.__cast(a.type , Int) - js_Boot.__cast(b.type , Int);
		});
		var sb_b = "";
		var _g = 0;
		var _g1 = this.mEntries.length;
		while(_g < _g1) {
			var i = _g++;
			entry = this.mEntries[i];
			if(tempRegistersOnly && entry.type != 2 || !tempRegistersOnly && entry.type == 2) {
				continue;
			}
			if(entry.type == 3) {
				continue;
			}
			switch(entry.type) {
			case 0:
				sb_b += "attribute ";
				break;
			case 1:
				sb_b += "uniform ";
				break;
			case 2:
				sb_b += "\t";
				break;
			case 3:
				break;
			case 4:
				sb_b += "varying ";
				break;
			case 5:
				sb_b += "uniform ";
				break;
			default:
				throw haxe_Exception.thrown(new openfl_errors_IllegalOperationError());
			}
			switch(entry.usage._hx_index) {
			case 0:
				lime_utils_Log.info("Missing switch patten: RegisterUsage.UNUSED",{ fileName : "openfl/_internal/formats/agal/AGALConverter.hx", lineNumber : 746, className : "openfl._internal.formats.agal.RegisterMap", methodName : "toGLSL"});
				break;
			case 1:
				sb_b += "vec4 ";
				break;
			case 2:
				sb_b += "mat4 ";
				break;
			case 3:
				sb_b += "sampler2D ";
				break;
			case 4:
				break;
			case 5:
				sb_b += "samplerCube ";
				break;
			case 6:
				break;
			case 7:
				sb_b += "vec4 ";
				break;
			}
			if(entry.usage == openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.SAMPLER_2D_ALPHA) {
				sb_b += "sampler2D ";
				sb_b += Std.string(entry.name);
				sb_b += ";\n";
				sb_b += "uniform ";
				sb_b += "sampler2D ";
				sb_b += Std.string(entry.name + "_alpha");
				sb_b += ";\n";
				sb_b += "uniform ";
				sb_b += "bool ";
				sb_b += Std.string(entry.name + "_alphaEnabled");
				sb_b += ";\n";
			} else if(entry.usage == openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.SAMPLER_CUBE_ALPHA) {
				sb_b += "samplerCube ";
				sb_b += Std.string(entry.name);
				sb_b += ";\n";
				sb_b += "uniform ";
				sb_b += "samplerCube ";
				sb_b += Std.string(entry.name + "_alpha");
				sb_b += ";\n";
				sb_b += "uniform ";
				sb_b += "bool ";
				sb_b += Std.string(entry.name + "_alphaEnabled");
				sb_b += ";\n";
			} else if(entry.usage == openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4_ARRAY) {
				sb_b += Std.string(entry.name + "[128]");
				sb_b += ";\n";
			} else {
				sb_b += Std.string(entry.name);
				sb_b += ";\n";
			}
		}
		return sb_b;
	}
	,__class__: openfl__$internal_formats_agal_RegisterMap
};
var openfl__$internal_formats_agal__$AGALConverter_RegisterMapEntry = function() {
};
$hxClasses["openfl._internal.formats.agal._AGALConverter.RegisterMapEntry"] = openfl__$internal_formats_agal__$AGALConverter_RegisterMapEntry;
openfl__$internal_formats_agal__$AGALConverter_RegisterMapEntry.__name__ = "openfl._internal.formats.agal._AGALConverter.RegisterMapEntry";
openfl__$internal_formats_agal__$AGALConverter_RegisterMapEntry.prototype = {
	name: null
	,number: null
	,type: null
	,usage: null
	,__class__: openfl__$internal_formats_agal__$AGALConverter_RegisterMapEntry
};
var openfl__$internal_formats_agal__$AGALConverter_RegisterUsage = $hxEnums["openfl._internal.formats.agal._AGALConverter.RegisterUsage"] = { __ename__ : "openfl._internal.formats.agal._AGALConverter.RegisterUsage", __constructs__ : ["UNUSED","VECTOR_4","MATRIX_4_4","SAMPLER_2D","SAMPLER_2D_ALPHA","SAMPLER_CUBE","SAMPLER_CUBE_ALPHA","VECTOR_4_ARRAY"]
	,UNUSED: {_hx_index:0,__enum__:"openfl._internal.formats.agal._AGALConverter.RegisterUsage",toString:$estr}
	,VECTOR_4: {_hx_index:1,__enum__:"openfl._internal.formats.agal._AGALConverter.RegisterUsage",toString:$estr}
	,MATRIX_4_4: {_hx_index:2,__enum__:"openfl._internal.formats.agal._AGALConverter.RegisterUsage",toString:$estr}
	,SAMPLER_2D: {_hx_index:3,__enum__:"openfl._internal.formats.agal._AGALConverter.RegisterUsage",toString:$estr}
	,SAMPLER_2D_ALPHA: {_hx_index:4,__enum__:"openfl._internal.formats.agal._AGALConverter.RegisterUsage",toString:$estr}
	,SAMPLER_CUBE: {_hx_index:5,__enum__:"openfl._internal.formats.agal._AGALConverter.RegisterUsage",toString:$estr}
	,SAMPLER_CUBE_ALPHA: {_hx_index:6,__enum__:"openfl._internal.formats.agal._AGALConverter.RegisterUsage",toString:$estr}
	,VECTOR_4_ARRAY: {_hx_index:7,__enum__:"openfl._internal.formats.agal._AGALConverter.RegisterUsage",toString:$estr}
};
var openfl__$internal_formats_agal__$AGALConverter_SamplerRegister = function() {
};
$hxClasses["openfl._internal.formats.agal._AGALConverter.SamplerRegister"] = openfl__$internal_formats_agal__$AGALConverter_SamplerRegister;
openfl__$internal_formats_agal__$AGALConverter_SamplerRegister.__name__ = "openfl._internal.formats.agal._AGALConverter.SamplerRegister";
openfl__$internal_formats_agal__$AGALConverter_SamplerRegister.parse = function(v,programType) {
	var sr = new openfl__$internal_formats_agal__$AGALConverter_SamplerRegister();
	sr.programType = programType;
	var b = 60;
	b &= 63;
	var a;
	if(b == 0) {
		var this1 = new haxe__$Int64__$_$_$Int64(v.high,v.low);
		a = this1;
	} else if(b < 32) {
		var this1 = new haxe__$Int64__$_$_$Int64(v.high >> b,v.high << 32 - b | v.low >>> b);
		a = this1;
	} else {
		var this1 = new haxe__$Int64__$_$_$Int64(v.high >> 31,v.high >> b - 32);
		a = this1;
	}
	var b_high = 0;
	var b_low = 15;
	var this_high = a.high & b_high;
	var this_low = a.low & b_low;
	sr.f = this_low;
	var b = 56;
	b &= 63;
	var a;
	if(b == 0) {
		var this1 = new haxe__$Int64__$_$_$Int64(v.high,v.low);
		a = this1;
	} else if(b < 32) {
		var this1 = new haxe__$Int64__$_$_$Int64(v.high >> b,v.high << 32 - b | v.low >>> b);
		a = this1;
	} else {
		var this1 = new haxe__$Int64__$_$_$Int64(v.high >> 31,v.high >> b - 32);
		a = this1;
	}
	var b_high = 0;
	var b_low = 15;
	var this_high = a.high & b_high;
	var this_low = a.low & b_low;
	sr.m = this_low;
	var b = 52;
	b &= 63;
	var a;
	if(b == 0) {
		var this1 = new haxe__$Int64__$_$_$Int64(v.high,v.low);
		a = this1;
	} else if(b < 32) {
		var this1 = new haxe__$Int64__$_$_$Int64(v.high >> b,v.high << 32 - b | v.low >>> b);
		a = this1;
	} else {
		var this1 = new haxe__$Int64__$_$_$Int64(v.high >> 31,v.high >> b - 32);
		a = this1;
	}
	var b_high = 0;
	var b_low = 15;
	var this_high = a.high & b_high;
	var this_low = a.low & b_low;
	sr.w = this_low;
	var b = 48;
	b &= 63;
	var a;
	if(b == 0) {
		var this1 = new haxe__$Int64__$_$_$Int64(v.high,v.low);
		a = this1;
	} else if(b < 32) {
		var this1 = new haxe__$Int64__$_$_$Int64(v.high >> b,v.high << 32 - b | v.low >>> b);
		a = this1;
	} else {
		var this1 = new haxe__$Int64__$_$_$Int64(v.high >> 31,v.high >> b - 32);
		a = this1;
	}
	var b_high = 0;
	var b_low = 15;
	var this_high = a.high & b_high;
	var this_low = a.low & b_low;
	sr.s = this_low;
	var b = 44;
	b &= 63;
	var a;
	if(b == 0) {
		var this1 = new haxe__$Int64__$_$_$Int64(v.high,v.low);
		a = this1;
	} else if(b < 32) {
		var this1 = new haxe__$Int64__$_$_$Int64(v.high >> b,v.high << 32 - b | v.low >>> b);
		a = this1;
	} else {
		var this1 = new haxe__$Int64__$_$_$Int64(v.high >> 31,v.high >> b - 32);
		a = this1;
	}
	var b_high = 0;
	var b_low = 15;
	var this_high = a.high & b_high;
	var this_low = a.low & b_low;
	sr.d = this_low;
	var b = 40;
	b &= 63;
	var a;
	if(b == 0) {
		var this1 = new haxe__$Int64__$_$_$Int64(v.high,v.low);
		a = this1;
	} else if(b < 32) {
		var this1 = new haxe__$Int64__$_$_$Int64(v.high >> b,v.high << 32 - b | v.low >>> b);
		a = this1;
	} else {
		var this1 = new haxe__$Int64__$_$_$Int64(v.high >> 31,v.high >> b - 32);
		a = this1;
	}
	var b_high = 0;
	var b_low = 15;
	var this_high = a.high & b_high;
	var this_low = a.low & b_low;
	sr.t = this_low;
	var b = 32;
	b &= 63;
	var a;
	if(b == 0) {
		var this1 = new haxe__$Int64__$_$_$Int64(v.high,v.low);
		a = this1;
	} else if(b < 32) {
		var this1 = new haxe__$Int64__$_$_$Int64(v.high >> b,v.high << 32 - b | v.low >>> b);
		a = this1;
	} else {
		var this1 = new haxe__$Int64__$_$_$Int64(v.high >> 31,v.high >> b - 32);
		a = this1;
	}
	var b_high = 0;
	var b_low = 15;
	var this_high = a.high & b_high;
	var this_low = a.low & b_low;
	sr.type = this_low;
	var b = 16;
	b &= 63;
	var a;
	if(b == 0) {
		var this1 = new haxe__$Int64__$_$_$Int64(v.high,v.low);
		a = this1;
	} else if(b < 32) {
		var this1 = new haxe__$Int64__$_$_$Int64(v.high >> b,v.high << 32 - b | v.low >>> b);
		a = this1;
	} else {
		var this1 = new haxe__$Int64__$_$_$Int64(v.high >> 31,v.high >> b - 32);
		a = this1;
	}
	var b_high = 0;
	var b_low = 255;
	var this_high = a.high & b_high;
	var this_low = a.low & b_low;
	sr.b = this_low;
	var b_high = 0;
	var b_low = 65535;
	var this_high = v.high & b_high;
	var this_low = v.low & b_low;
	sr.n = this_low;
	return sr;
};
openfl__$internal_formats_agal__$AGALConverter_SamplerRegister.prototype = {
	b: null
	,d: null
	,f: null
	,m: null
	,n: null
	,programType: null
	,s: null
	,t: null
	,type: null
	,w: null
	,toGLSL: function() {
		var str = openfl__$internal_formats_agal_AGALConverter.prefixFromType(this.type,this.programType) + this.n;
		return str;
	}
	,toSamplerState: function() {
		var wrap;
		var filter;
		var mipfilter;
		switch(this.f) {
		case 0:
			filter = 5;
			break;
		case 1:
			filter = 4;
			break;
		default:
			throw haxe_Exception.thrown(new openfl_errors_IllegalOperationError());
		}
		switch(this.m) {
		case 0:
			mipfilter = 2;
			break;
		case 1:
			mipfilter = 1;
			break;
		case 2:
			mipfilter = 0;
			break;
		default:
			throw haxe_Exception.thrown(new openfl_errors_IllegalOperationError());
		}
		switch(this.w) {
		case 0:
			wrap = 0;
			break;
		case 1:
			wrap = 2;
			break;
		default:
			throw haxe_Exception.thrown(new openfl_errors_IllegalOperationError());
		}
		var ignoreSampler = (this.s & 4) == 4;
		var centroid = (this.s & 1) == 1;
		var textureAlpha = this.t == 2;
		var lodBias = (this.b << 24 >> 24) / 8.0;
		return new openfl__$internal_renderer_SamplerState(wrap,filter,mipfilter,lodBias,ignoreSampler,centroid,textureAlpha);
	}
	,__class__: openfl__$internal_formats_agal__$AGALConverter_SamplerRegister
};
var openfl__$internal_formats_agal__$AGALConverter_SourceRegister = function() {
};
$hxClasses["openfl._internal.formats.agal._AGALConverter.SourceRegister"] = openfl__$internal_formats_agal__$AGALConverter_SourceRegister;
openfl__$internal_formats_agal__$AGALConverter_SourceRegister.__name__ = "openfl._internal.formats.agal._AGALConverter.SourceRegister";
openfl__$internal_formats_agal__$AGALConverter_SourceRegister.parse = function(v,programType,sourceMask) {
	var sr = new openfl__$internal_formats_agal__$AGALConverter_SourceRegister();
	sr.programType = programType;
	var b = 63;
	b &= 63;
	var a;
	if(b == 0) {
		var this1 = new haxe__$Int64__$_$_$Int64(v.high,v.low);
		a = this1;
	} else if(b < 32) {
		var this1 = new haxe__$Int64__$_$_$Int64(v.high >> b,v.high << 32 - b | v.low >>> b);
		a = this1;
	} else {
		var this1 = new haxe__$Int64__$_$_$Int64(v.high >> 31,v.high >> b - 32);
		a = this1;
	}
	var b_high = 0;
	var b_low = 1;
	var this_high = a.high & b_high;
	var this_low = a.low & b_low;
	sr.d = this_low;
	var b = 48;
	b &= 63;
	var a;
	if(b == 0) {
		var this1 = new haxe__$Int64__$_$_$Int64(v.high,v.low);
		a = this1;
	} else if(b < 32) {
		var this1 = new haxe__$Int64__$_$_$Int64(v.high >> b,v.high << 32 - b | v.low >>> b);
		a = this1;
	} else {
		var this1 = new haxe__$Int64__$_$_$Int64(v.high >> 31,v.high >> b - 32);
		a = this1;
	}
	var b_high = 0;
	var b_low = 3;
	var this_high = a.high & b_high;
	var this_low = a.low & b_low;
	sr.q = this_low;
	var b = 40;
	b &= 63;
	var a;
	if(b == 0) {
		var this1 = new haxe__$Int64__$_$_$Int64(v.high,v.low);
		a = this1;
	} else if(b < 32) {
		var this1 = new haxe__$Int64__$_$_$Int64(v.high >> b,v.high << 32 - b | v.low >>> b);
		a = this1;
	} else {
		var this1 = new haxe__$Int64__$_$_$Int64(v.high >> 31,v.high >> b - 32);
		a = this1;
	}
	var b_high = 0;
	var b_low = 15;
	var this_high = a.high & b_high;
	var this_low = a.low & b_low;
	sr.itype = this_low;
	var b = 32;
	b &= 63;
	var a;
	if(b == 0) {
		var this1 = new haxe__$Int64__$_$_$Int64(v.high,v.low);
		a = this1;
	} else if(b < 32) {
		var this1 = new haxe__$Int64__$_$_$Int64(v.high >> b,v.high << 32 - b | v.low >>> b);
		a = this1;
	} else {
		var this1 = new haxe__$Int64__$_$_$Int64(v.high >> 31,v.high >> b - 32);
		a = this1;
	}
	var b_high = 0;
	var b_low = 15;
	var this_high = a.high & b_high;
	var this_low = a.low & b_low;
	sr.type = this_low;
	var b = 24;
	b &= 63;
	var a;
	if(b == 0) {
		var this1 = new haxe__$Int64__$_$_$Int64(v.high,v.low);
		a = this1;
	} else if(b < 32) {
		var this1 = new haxe__$Int64__$_$_$Int64(v.high >> b,v.high << 32 - b | v.low >>> b);
		a = this1;
	} else {
		var this1 = new haxe__$Int64__$_$_$Int64(v.high >> 31,v.high >> b - 32);
		a = this1;
	}
	var b_high = 0;
	var b_low = 255;
	var this_high = a.high & b_high;
	var this_low = a.low & b_low;
	sr.s = this_low;
	var b = 16;
	b &= 63;
	var a;
	if(b == 0) {
		var this1 = new haxe__$Int64__$_$_$Int64(v.high,v.low);
		a = this1;
	} else if(b < 32) {
		var this1 = new haxe__$Int64__$_$_$Int64(v.high >> b,v.high << 32 - b | v.low >>> b);
		a = this1;
	} else {
		var this1 = new haxe__$Int64__$_$_$Int64(v.high >> 31,v.high >> b - 32);
		a = this1;
	}
	var b_high = 0;
	var b_low = 255;
	var this_high = a.high & b_high;
	var this_low = a.low & b_low;
	sr.o = this_low;
	var b_high = 0;
	var b_low = 65535;
	var this_high = v.high & b_high;
	var this_low = v.low & b_low;
	sr.n = this_low;
	sr.sourceMask = sourceMask;
	return sr;
};
openfl__$internal_formats_agal__$AGALConverter_SourceRegister.prototype = {
	d: null
	,itype: null
	,n: null
	,o: null
	,programType: null
	,q: null
	,s: null
	,sourceMask: null
	,type: null
	,toGLSL: function(emitSwizzle,offset) {
		if(offset == null) {
			offset = 0;
		}
		if(emitSwizzle == null) {
			emitSwizzle = true;
		}
		if(this.type == 3) {
			if(this.programType == openfl__$internal_formats_agal__$AGALConverter_ProgramType.VERTEX) {
				return "gl_Position";
			} else {
				return "gl_FragColor";
			}
		}
		var fullxyzw = this.s == 228 && this.sourceMask == 15;
		var swizzle = "";
		if(this.type != 5 && !fullxyzw) {
			if((this.sourceMask & 1) != 0) {
				switch(this.s & 3) {
				case 0:
					swizzle += "x";
					break;
				case 1:
					swizzle += "y";
					break;
				case 2:
					swizzle += "z";
					break;
				case 3:
					swizzle += "w";
					break;
				}
			}
			if((this.sourceMask & 2) != 0) {
				switch(this.s >> 2 & 3) {
				case 0:
					swizzle += "x";
					break;
				case 1:
					swizzle += "y";
					break;
				case 2:
					swizzle += "z";
					break;
				case 3:
					swizzle += "w";
					break;
				}
			}
			if((this.sourceMask & 4) != 0) {
				switch(this.s >> 4 & 3) {
				case 0:
					swizzle += "x";
					break;
				case 1:
					swizzle += "y";
					break;
				case 2:
					swizzle += "z";
					break;
				case 3:
					swizzle += "w";
					break;
				}
			}
			if((this.sourceMask & 8) != 0) {
				switch(this.s >> 6 & 3) {
				case 0:
					swizzle += "x";
					break;
				case 1:
					swizzle += "y";
					break;
				case 2:
					swizzle += "z";
					break;
				case 3:
					swizzle += "w";
					break;
				}
			}
		}
		var str = openfl__$internal_formats_agal_AGALConverter.prefixFromType(this.type,this.programType);
		if(this.d == 0) {
			str += this.n + offset;
		} else {
			str += this.o;
			var indexComponent = "";
			switch(this.q) {
			case 0:
				indexComponent = "x";
				break;
			case 1:
				indexComponent = "y";
				break;
			case 2:
				indexComponent = "z";
				break;
			case 3:
				indexComponent = "w";
				break;
			}
			var indexRegister = openfl__$internal_formats_agal_AGALConverter.prefixFromType(this.itype,this.programType) + this.n + "." + indexComponent;
			str += "[ int(" + indexRegister + ") +" + offset + "]";
		}
		if(emitSwizzle && swizzle != "") {
			str += "." + swizzle;
		}
		return str;
	}
	,__class__: openfl__$internal_formats_agal__$AGALConverter_SourceRegister
};
var openfl__$internal_formats_atf_ATFReader = function(data,byteArrayOffset) {
	this.version = 0;
	data.position = byteArrayOffset;
	var signature = data.readUTFBytes(3);
	data.position = byteArrayOffset;
	if(signature != "ATF") {
		throw haxe_Exception.thrown(new openfl_errors_IllegalOperationError("ATF signature not found"));
	}
	var length = 0;
	if(data.b[byteArrayOffset + 6] == 255) {
		this.version = data.b[byteArrayOffset + 7];
		data.position = byteArrayOffset + 8;
		length = this.__readUInt32(data);
	} else {
		this.version = 0;
		data.position = byteArrayOffset + 3;
		length = this.__readUInt24(data);
	}
	if(UInt.gt(js_Boot.__cast(byteArrayOffset + length , Int),openfl_utils_ByteArray.get_length(data))) {
		throw haxe_Exception.thrown(new openfl_errors_IllegalOperationError("ATF length exceeds byte array length"));
	}
	this.data = data;
};
$hxClasses["openfl._internal.formats.atf.ATFReader"] = openfl__$internal_formats_atf_ATFReader;
openfl__$internal_formats_atf_ATFReader.__name__ = "openfl._internal.formats.atf.ATFReader";
openfl__$internal_formats_atf_ATFReader.prototype = {
	atfFormat: null
	,cubeMap: null
	,data: null
	,height: null
	,mipCount: null
	,version: null
	,width: null
	,readHeader: function(__width,__height,cubeMap) {
		var tdata = this.data.readUnsignedByte();
		var type = tdata >>> 7;
		if(!cubeMap && type != 0) {
			throw haxe_Exception.thrown(new openfl_errors_IllegalOperationError("ATF Cube map not expected"));
		}
		if(cubeMap && type != 1) {
			throw haxe_Exception.thrown(new openfl_errors_IllegalOperationError("ATF Cube map expected"));
		}
		this.cubeMap = cubeMap;
		this.atfFormat = tdata & 127;
		if(this.atfFormat != 3 && this.atfFormat != 5) {
			lime_utils_Log.warn("Only ATF block compressed textures without JPEG-XR+LZMA are supported",{ fileName : "openfl/_internal/formats/atf/ATFReader.hx", lineNumber : 96, className : "openfl._internal.formats.atf.ATFReader", methodName : "readHeader"});
		}
		this.width = 1 << this.data.readUnsignedByte();
		this.height = 1 << this.data.readUnsignedByte();
		if(this.width != __width || this.height != __height) {
			throw haxe_Exception.thrown(new openfl_errors_IllegalOperationError("ATF width and height dont match"));
		}
		this.mipCount = this.data.readUnsignedByte();
		return this.atfFormat == 5;
	}
	,readTextures: function(uploadCallback) {
		var gpuFormats = this.version < 3 ? 3 : 4;
		var sideCount = this.cubeMap ? 6 : 1;
		var _g = 0;
		var _g1 = sideCount;
		while(_g < _g1) {
			var side = _g++;
			var _g2 = 0;
			var _g3 = this.mipCount;
			while(_g2 < _g3) {
				var level = _g2++;
				var _g4 = 0;
				var _g5 = gpuFormats;
				while(_g4 < _g5) {
					var gpuFormat = _g4++;
					var blockLength = this.version == 0 ? this.__readUInt24(this.data) : this.__readUInt32(this.data);
					if(UInt.gt(this.data.position + blockLength,openfl_utils_ByteArray.get_length(this.data))) {
						throw haxe_Exception.thrown(new openfl_errors_IllegalOperationError("Block length exceeds ATF file length"));
					}
					if(UInt.gt(blockLength,0)) {
						var bytes = new haxe_io_Bytes(new ArrayBuffer(blockLength));
						var this1 = this.data;
						var bytes1 = openfl_utils_ByteArray.fromBytes(bytes);
						var offset = 0;
						var length = blockLength;
						if(length == null) {
							length = 0;
						}
						if(offset == null) {
							offset = 0;
						}
						this1.readBytes(bytes1,offset,length);
						uploadCallback(side,level,gpuFormat,this.width >> level,this.height >> level,blockLength,bytes);
					}
				}
			}
		}
	}
	,__readUInt24: function(data) {
		var value = data.readUnsignedByte() << 16;
		value = value | data.readUnsignedByte() << 8;
		value = value | data.readUnsignedByte();
		return value;
	}
	,__readUInt32: function(data) {
		var value = data.readUnsignedByte() << 24;
		value = value | data.readUnsignedByte() << 16;
		value = value | data.readUnsignedByte() << 8;
		value = value | data.readUnsignedByte();
		return value;
	}
	,__class__: openfl__$internal_formats_atf_ATFReader
};
var openfl__$internal_formats_html_HTMLParser = function() { };
$hxClasses["openfl._internal.formats.html.HTMLParser"] = openfl__$internal_formats_html_HTMLParser;
openfl__$internal_formats_html_HTMLParser.__name__ = "openfl._internal.formats.html.HTMLParser";
openfl__$internal_formats_html_HTMLParser.parse = function(value,textFormat,textFormatRanges) {
	value = value.replace(openfl__$internal_formats_html_HTMLParser.__regexBreakTag.r,"\n");
	value = value.replace(openfl__$internal_formats_html_HTMLParser.__regexEntities[0].r,"\"");
	value = value.replace(openfl__$internal_formats_html_HTMLParser.__regexEntities[1].r,"'");
	value = value.replace(openfl__$internal_formats_html_HTMLParser.__regexEntities[2].r,"&");
	value = value.replace(openfl__$internal_formats_html_HTMLParser.__regexEntities[5].r," ");
	var segments = value.split("<");
	if(segments.length == 1) {
		value = value.replace(openfl__$internal_formats_html_HTMLParser.__regexHTMLTag.r,"");
		if(textFormatRanges.get_length() > 1) {
			textFormatRanges.splice(1,textFormatRanges.get_length() - 1);
		}
		value = value.replace(openfl__$internal_formats_html_HTMLParser.__regexEntities[3].r,"<");
		value = value.replace(openfl__$internal_formats_html_HTMLParser.__regexEntities[4].r,">");
		var range = textFormatRanges.get(0);
		range.format = textFormat;
		range.start = 0;
		range.end = value.length;
		return value;
	} else {
		textFormatRanges.splice(0,textFormatRanges.get_length());
		value = "";
		var segment;
		var _g = 0;
		var _g1 = segments.length;
		while(_g < _g1) {
			var i = _g++;
			segment = segments[i];
			segment = segment.replace(openfl__$internal_formats_html_HTMLParser.__regexEntities[3].r,"<");
			segment = segment.replace(openfl__$internal_formats_html_HTMLParser.__regexEntities[4].r,">");
			segments[i] = segment;
		}
		var formatStack = [textFormat.clone()];
		var tagStack = [];
		var sub;
		var noLineBreak = false;
		var _g = 0;
		while(_g < segments.length) {
			var segment = segments[_g];
			++_g;
			if(segment == "") {
				continue;
			}
			var isClosingTag = HxOverrides.substr(segment,0,1) == "/";
			var tagEndIndex = segment.indexOf(">");
			var start = tagEndIndex + 1;
			var spaceIndex = segment.indexOf(" ");
			var tagName = segment.substring(isClosingTag ? 1 : 0,spaceIndex > -1 && spaceIndex < tagEndIndex ? spaceIndex : tagEndIndex);
			var format;
			if(isClosingTag) {
				if(tagStack.length == 0 || tagName.toLowerCase() != tagStack[tagStack.length - 1].toLowerCase()) {
					lime_utils_Log.info("Invalid HTML, unexpected closing tag ignored: " + tagName,{ fileName : "openfl/_internal/formats/html/HTMLParser.hx", lineNumber : 97, className : "openfl._internal.formats.html.HTMLParser", methodName : "parse"});
					continue;
				}
				tagStack.pop();
				formatStack.pop();
				format = formatStack[formatStack.length - 1].clone();
				if(tagName.toLowerCase() == "p" && textFormatRanges.get_length() > 0) {
					value += "\n";
					noLineBreak = true;
					var tmp = textFormatRanges.get(textFormatRanges.get_length() - 1);
					tmp.end++;
				}
				if(start < segment.length) {
					sub = HxOverrides.substr(segment,start,null);
					textFormatRanges.push(new openfl__$internal_text_TextFormatRange(format,value.length,value.length + sub.length));
					value += sub;
					noLineBreak = false;
				}
			} else {
				format = formatStack[formatStack.length - 1].clone();
				if(tagEndIndex > -1) {
					switch(tagName.toLowerCase()) {
					case "a":
						if(openfl__$internal_formats_html_HTMLParser.__regexHref.match(segment)) {
							format.url = openfl__$internal_formats_html_HTMLParser.__getAttributeMatch(openfl__$internal_formats_html_HTMLParser.__regexHref);
						}
						break;
					case "b":
						format.bold = true;
						break;
					case "em":case "i":
						format.italic = true;
						break;
					case "font":
						if(openfl__$internal_formats_html_HTMLParser.__regexFace.match(segment)) {
							format.font = openfl__$internal_formats_html_HTMLParser.__getAttributeMatch(openfl__$internal_formats_html_HTMLParser.__regexFace);
						}
						if(openfl__$internal_formats_html_HTMLParser.__regexColor.match(segment)) {
							format.color = Std.parseInt("0x" + openfl__$internal_formats_html_HTMLParser.__getAttributeMatch(openfl__$internal_formats_html_HTMLParser.__regexColor));
						}
						if(openfl__$internal_formats_html_HTMLParser.__regexSize.match(segment)) {
							var sizeAttr = openfl__$internal_formats_html_HTMLParser.__getAttributeMatch(openfl__$internal_formats_html_HTMLParser.__regexSize);
							var firstChar = HxOverrides.cca(sizeAttr,0);
							if(firstChar == 43 || firstChar == 45) {
								var parentFormat = formatStack.length >= 2 ? formatStack[formatStack.length - 2] : textFormat;
								format.size = parentFormat.size + Std.parseInt(sizeAttr);
							} else {
								format.size = Std.parseInt(sizeAttr);
							}
						}
						break;
					case "p":
						if(textFormatRanges.get_length() > 0 && !noLineBreak) {
							value += "\n";
						}
						if(openfl__$internal_formats_html_HTMLParser.__regexAlign.match(segment)) {
							var align = openfl__$internal_formats_html_HTMLParser.__getAttributeMatch(openfl__$internal_formats_html_HTMLParser.__regexAlign).toLowerCase();
							format.align = openfl_text_TextFormatAlign.fromString(align);
						}
						break;
					case "textformat":
						if(openfl__$internal_formats_html_HTMLParser.__regexBlockIndent.match(segment)) {
							format.blockIndent = Std.parseInt(openfl__$internal_formats_html_HTMLParser.__getAttributeMatch(openfl__$internal_formats_html_HTMLParser.__regexBlockIndent));
						}
						if(openfl__$internal_formats_html_HTMLParser.__regexIndent.match(segment)) {
							format.indent = Std.parseInt(openfl__$internal_formats_html_HTMLParser.__getAttributeMatch(openfl__$internal_formats_html_HTMLParser.__regexIndent));
						}
						if(openfl__$internal_formats_html_HTMLParser.__regexLeading.match(segment)) {
							format.leading = Std.parseInt(openfl__$internal_formats_html_HTMLParser.__getAttributeMatch(openfl__$internal_formats_html_HTMLParser.__regexLeading));
						}
						if(openfl__$internal_formats_html_HTMLParser.__regexLeftMargin.match(segment)) {
							format.leftMargin = Std.parseInt(openfl__$internal_formats_html_HTMLParser.__getAttributeMatch(openfl__$internal_formats_html_HTMLParser.__regexLeftMargin));
						}
						if(openfl__$internal_formats_html_HTMLParser.__regexRightMargin.match(segment)) {
							format.rightMargin = Std.parseInt(openfl__$internal_formats_html_HTMLParser.__getAttributeMatch(openfl__$internal_formats_html_HTMLParser.__regexRightMargin));
						}
						if(openfl__$internal_formats_html_HTMLParser.__regexTabStops.match(segment)) {
							var values = openfl__$internal_formats_html_HTMLParser.__getAttributeMatch(openfl__$internal_formats_html_HTMLParser.__regexTabStops).split(" ");
							var tabStops = [];
							var _g1 = 0;
							while(_g1 < values.length) {
								var stop = values[_g1];
								++_g1;
								tabStops.push(Std.parseInt(stop));
							}
							format.tabStops = tabStops;
						}
						break;
					case "u":
						format.underline = true;
						break;
					}
					formatStack.push(format);
					tagStack.push(tagName);
					if(start < segment.length) {
						sub = segment.substring(start);
						textFormatRanges.push(new openfl__$internal_text_TextFormatRange(format,value.length,value.length + sub.length));
						value += sub;
						noLineBreak = false;
					} else if(textFormatRanges.get_length() > 0) {
						var tmp1 = textFormatRanges.get(textFormatRanges.get_length() - 1);
						tmp1.end++;
					}
				} else {
					textFormatRanges.push(new openfl__$internal_text_TextFormatRange(format,value.length,value.length + segment.length));
					value += segment;
					noLineBreak = false;
				}
			}
		}
		if(textFormatRanges.get_length() == 0) {
			textFormatRanges.push(new openfl__$internal_text_TextFormatRange(formatStack[0],0,0));
		}
	}
	return value;
};
openfl__$internal_formats_html_HTMLParser.__getAttributeMatch = function(regex) {
	if(regex.matched(2) != null) {
		return regex.matched(2);
	} else {
		return regex.matched(3);
	}
};
var openfl__$internal_formats_swf_FilterType = $hxEnums["openfl._internal.formats.swf.FilterType"] = { __ename__ : "openfl._internal.formats.swf.FilterType", __constructs__ : ["BlurFilter","ColorMatrixFilter","DropShadowFilter","GlowFilter"]
	,BlurFilter: ($_=function(blurX,blurY,quality) { return {_hx_index:0,blurX:blurX,blurY:blurY,quality:quality,__enum__:"openfl._internal.formats.swf.FilterType",toString:$estr}; },$_.__params__ = ["blurX","blurY","quality"],$_)
	,ColorMatrixFilter: ($_=function(matrix) { return {_hx_index:1,matrix:matrix,__enum__:"openfl._internal.formats.swf.FilterType",toString:$estr}; },$_.__params__ = ["matrix"],$_)
	,DropShadowFilter: ($_=function(distance,angle,color,alpha,blurX,blurY,strength,quality,inner,knockout,hideObject) { return {_hx_index:2,distance:distance,angle:angle,color:color,alpha:alpha,blurX:blurX,blurY:blurY,strength:strength,quality:quality,inner:inner,knockout:knockout,hideObject:hideObject,__enum__:"openfl._internal.formats.swf.FilterType",toString:$estr}; },$_.__params__ = ["distance","angle","color","alpha","blurX","blurY","strength","quality","inner","knockout","hideObject"],$_)
	,GlowFilter: ($_=function(color,alpha,blurX,blurY,strength,quality,inner,knockout) { return {_hx_index:3,color:color,alpha:alpha,blurX:blurX,blurY:blurY,strength:strength,quality:quality,inner:inner,knockout:knockout,__enum__:"openfl._internal.formats.swf.FilterType",toString:$estr}; },$_.__params__ = ["color","alpha","blurX","blurY","strength","quality","inner","knockout"],$_)
};
var openfl__$internal_formats_swf_SWFLite = function() {
	this.symbols = new haxe_ds_IntMap();
	this.symbolsByClassName = new haxe_ds_StringMap();
};
$hxClasses["openfl._internal.formats.swf.SWFLite"] = openfl__$internal_formats_swf_SWFLite;
openfl__$internal_formats_swf_SWFLite.__name__ = "openfl._internal.formats.swf.SWFLite";
openfl__$internal_formats_swf_SWFLite.resolveClass = function(name) {
	var value = $hxClasses[name];
	if(value == null) {
		var name1 = StringTools.replace(name,"openfl._legacy","openfl");
		value = $hxClasses[name1];
	}
	if(value == null) {
		var name1 = StringTools.replace(name,"openfl._v2","openfl");
		value = $hxClasses[name1];
	}
	return value;
};
openfl__$internal_formats_swf_SWFLite.resolveEnum = function(name) {
	var value = $hxEnums[name];
	if(value == null) {
		var name1 = StringTools.replace(name,"openfl._legacy","openfl");
		value = $hxEnums[name1];
	}
	if(value == null) {
		var name1 = StringTools.replace(name,"openfl._v2","openfl");
		value = $hxEnums[name1];
	}
	return value;
};
openfl__$internal_formats_swf_SWFLite.unserialize = function(data) {
	if(data == null) {
		return null;
	}
	var unserializer = new haxe_Unserializer(data);
	unserializer.setResolver({ resolveClass : openfl__$internal_formats_swf_SWFLite.resolveClass, resolveEnum : openfl__$internal_formats_swf_SWFLite.resolveEnum});
	var swfLite = unserializer.unserialize();
	if(swfLite != null) {
		swfLite.__init();
	}
	return swfLite;
};
openfl__$internal_formats_swf_SWFLite.prototype = {
	frameRate: null
	,library: null
	,root: null
	,symbols: null
	,symbolsByClassName: null
	,createButton: function(className) {
		return null;
	}
	,createMovieClip: function(className) {
		if(className == null) {
			className = "";
		}
		if(className == "") {
			return this.root.__createObject(this);
		} else {
			var symbol = this.symbolsByClassName.h[className];
			if(symbol != null) {
				if(((symbol) instanceof openfl__$internal_symbols_SpriteSymbol)) {
					return (js_Boot.__cast(symbol , openfl__$internal_symbols_SpriteSymbol)).__createObject(this);
				}
			}
		}
		return null;
	}
	,getBitmapData: function(className) {
		var symbol = this.symbolsByClassName.h[className];
		if(symbol != null) {
			if(((symbol) instanceof openfl__$internal_symbols_BitmapSymbol)) {
				var bitmap = symbol;
				return openfl_utils_Assets.getBitmapData(bitmap.path);
			}
		}
		return null;
	}
	,hasSymbol: function(className) {
		return Object.prototype.hasOwnProperty.call(this.symbolsByClassName.h,className);
	}
	,serialize: function() {
		var serializer = new haxe_Serializer();
		serializer.serialize(this);
		return serializer.toString();
	}
	,__init: function() {
		if(this.symbols == null) {
			return;
		}
		if(this.symbolsByClassName == null) {
			this.symbolsByClassName = new haxe_ds_StringMap();
		}
		var symbol = this.symbols.iterator();
		while(symbol.hasNext()) {
			var symbol1 = symbol.next();
			if(symbol1 == null || symbol1.className == null) {
				continue;
			}
			this.symbolsByClassName.h[symbol1.className] = symbol1;
		}
	}
	,__class__: openfl__$internal_formats_swf_SWFLite
};
var openfl_utils_AssetLibrary = function() {
	lime_utils_AssetLibrary.call(this);
};
$hxClasses["openfl.utils.AssetLibrary"] = openfl_utils_AssetLibrary;
openfl_utils_AssetLibrary.__name__ = "openfl.utils.AssetLibrary";
openfl_utils_AssetLibrary.fromBytes = function(bytes,rootPath) {
	return openfl_utils_AssetLibrary.fromManifest(lime_utils_AssetManifest.fromBytes(openfl_utils_ByteArray.toBytes(bytes),rootPath));
};
openfl_utils_AssetLibrary.fromFile = function(path,rootPath) {
	return openfl_utils_AssetLibrary.fromManifest(lime_utils_AssetManifest.fromFile(path,rootPath));
};
openfl_utils_AssetLibrary.fromManifest = function(manifest) {
	var library = lime_utils_AssetLibrary.fromManifest(manifest);
	if(library != null) {
		if(((library) instanceof openfl_utils_AssetLibrary)) {
			return library;
		} else {
			var _library = new openfl_utils_AssetLibrary();
			_library.__proxy = library;
			return _library;
		}
	} else {
		return null;
	}
};
openfl_utils_AssetLibrary.loadFromBytes = function(bytes,rootPath) {
	return lime_utils_AssetManifest.loadFromBytes(openfl_utils_ByteArray.toBytes(bytes),rootPath).then(function(manifest) {
		return openfl_utils_AssetLibrary.loadFromManifest(manifest);
	});
};
openfl_utils_AssetLibrary.loadFromFile = function(path,rootPath) {
	return lime_utils_AssetManifest.loadFromFile(path,rootPath).then(function(manifest) {
		return openfl_utils_AssetLibrary.loadFromManifest(manifest);
	});
};
openfl_utils_AssetLibrary.loadFromManifest = function(manifest) {
	var library = openfl_utils_AssetLibrary.fromManifest(manifest);
	if(library != null) {
		return library.load().then(function(library) {
			return lime_app_Future.withValue(library);
		});
	} else {
		return lime_app_Future.withError("Could not load asset manifest");
	}
};
openfl_utils_AssetLibrary.__super__ = lime_utils_AssetLibrary;
openfl_utils_AssetLibrary.prototype = $extend(lime_utils_AssetLibrary.prototype,{
	__proxy: null
	,exists: function(id,type) {
		if(this.__proxy != null) {
			return this.__proxy.exists(id,type);
		} else {
			return lime_utils_AssetLibrary.prototype.exists.call(this,id,type);
		}
	}
	,getAsset: function(id,type) {
		if(this.__proxy != null) {
			return this.__proxy.getAsset(id,type);
		} else {
			return lime_utils_AssetLibrary.prototype.getAsset.call(this,id,type);
		}
	}
	,getAudioBuffer: function(id) {
		if(this.__proxy != null) {
			return this.__proxy.getAudioBuffer(id);
		} else {
			return lime_utils_AssetLibrary.prototype.getAudioBuffer.call(this,id);
		}
	}
	,getBytes: function(id) {
		if(this.__proxy != null) {
			return this.__proxy.getBytes(id);
		} else {
			return lime_utils_AssetLibrary.prototype.getBytes.call(this,id);
		}
	}
	,getFont: function(id) {
		if(this.__proxy != null) {
			return this.__proxy.getFont(id);
		} else {
			return lime_utils_AssetLibrary.prototype.getFont.call(this,id);
		}
	}
	,getImage: function(id) {
		if(this.__proxy != null) {
			return this.__proxy.getImage(id);
		} else {
			return lime_utils_AssetLibrary.prototype.getImage.call(this,id);
		}
	}
	,getMovieClip: function(id) {
		return null;
	}
	,getPath: function(id) {
		if(this.__proxy != null) {
			return this.__proxy.getPath(id);
		} else {
			return lime_utils_AssetLibrary.prototype.getPath.call(this,id);
		}
	}
	,getText: function(id) {
		if(this.__proxy != null) {
			return this.__proxy.getText(id);
		} else {
			return lime_utils_AssetLibrary.prototype.getText.call(this,id);
		}
	}
	,isLocal: function(id,type) {
		if(this.__proxy != null) {
			return this.__proxy.isLocal(id,type);
		} else {
			return lime_utils_AssetLibrary.prototype.isLocal.call(this,id,type);
		}
	}
	,list: function(type) {
		if(this.__proxy != null) {
			return this.__proxy.list(type);
		} else {
			return lime_utils_AssetLibrary.prototype.list.call(this,type);
		}
	}
	,loadAsset: function(id,type) {
		if(this.__proxy != null) {
			return this.__proxy.loadAsset(id,type);
		} else {
			return lime_utils_AssetLibrary.prototype.loadAsset.call(this,id,type);
		}
	}
	,load: function() {
		if(this.__proxy != null) {
			return this.__proxy.load();
		} else {
			return lime_utils_AssetLibrary.prototype.load.call(this);
		}
	}
	,loadAudioBuffer: function(id) {
		if(this.__proxy != null) {
			return this.__proxy.loadAudioBuffer(id);
		} else {
			return lime_utils_AssetLibrary.prototype.loadAudioBuffer.call(this,id);
		}
	}
	,loadBytes: function(id) {
		if(this.__proxy != null) {
			return this.__proxy.loadBytes(id);
		} else {
			return lime_utils_AssetLibrary.prototype.loadBytes.call(this,id);
		}
	}
	,loadFont: function(id) {
		if(this.__proxy != null) {
			return this.__proxy.loadFont(id);
		} else {
			return lime_utils_AssetLibrary.prototype.loadFont.call(this,id);
		}
	}
	,loadImage: function(id) {
		if(this.__proxy != null) {
			return this.__proxy.loadImage(id);
		} else {
			return lime_utils_AssetLibrary.prototype.loadImage.call(this,id);
		}
	}
	,loadMovieClip: function(id) {
		return lime_app_Future.withValue(this.getMovieClip(id));
	}
	,loadText: function(id) {
		if(this.__proxy != null) {
			return this.__proxy.loadText(id);
		} else {
			return lime_utils_AssetLibrary.prototype.loadText.call(this,id);
		}
	}
	,unload: function() {
		if(this.__proxy != null) {
			this.__proxy.unload();
			return;
		} else {
			lime_utils_AssetLibrary.prototype.unload.call(this);
			return;
		}
	}
	,__class__: openfl_utils_AssetLibrary
});
var openfl__$internal_formats_swf_SWFLiteLibrary = function(id,uuid) {
	openfl_utils_AssetLibrary.call(this);
	this.id = id;
	this.instanceID = uuid != null ? uuid : id;
	this.alphaCheck = new haxe_ds_StringMap();
	this.imageClassNames = new haxe_ds_StringMap();
	this.rootPath = "";
};
$hxClasses["openfl._internal.formats.swf.SWFLiteLibrary"] = openfl__$internal_formats_swf_SWFLiteLibrary;
openfl__$internal_formats_swf_SWFLiteLibrary.__name__ = "openfl._internal.formats.swf.SWFLiteLibrary";
openfl__$internal_formats_swf_SWFLiteLibrary.__super__ = openfl_utils_AssetLibrary;
openfl__$internal_formats_swf_SWFLiteLibrary.prototype = $extend(openfl_utils_AssetLibrary.prototype,{
	alphaCheck: null
	,id: null
	,imageClassNames: null
	,instanceID: null
	,preloading: null
	,rootPath: null
	,swf: null
	,exists: function(id,type) {
		if(this.swf == null) {
			return false;
		}
		if(id == "" && type == "MOVIE_CLIP") {
			return true;
		}
		if(type == "IMAGE" || type == "MOVIE_CLIP") {
			if(this.swf != null) {
				return this.swf.hasSymbol(id);
			} else {
				return false;
			}
		}
		return false;
	}
	,getImage: function(id) {
		if(Object.prototype.hasOwnProperty.call(this.imageClassNames.h,id)) {
			id = this.imageClassNames.h[id];
		}
		if(!Object.prototype.hasOwnProperty.call(this.alphaCheck.h,id)) {
			var symbol = this.swf.symbols.iterator();
			while(symbol.hasNext()) {
				var symbol1 = symbol.next();
				if(((symbol1) instanceof openfl__$internal_symbols_BitmapSymbol) && (js_Boot.__cast(symbol1 , openfl__$internal_symbols_BitmapSymbol)).path == id) {
					var bitmapSymbol = symbol1;
					if(bitmapSymbol.alpha != null) {
						var image = openfl_utils_AssetLibrary.prototype.getImage.call(this,id);
						var alpha = openfl_utils_AssetLibrary.prototype.getImage.call(this,bitmapSymbol.alpha);
						this.__copyChannel(image,alpha);
						this.cachedImages.h[id] = image;
						var key = bitmapSymbol.alpha;
						var _this = this.cachedImages;
						if(Object.prototype.hasOwnProperty.call(_this.h,key)) {
							delete(_this.h[key]);
						}
						this.alphaCheck.h[id] = true;
						return image;
					}
				}
			}
			this.alphaCheck.h[id] = true;
		}
		return openfl_utils_AssetLibrary.prototype.getImage.call(this,id);
	}
	,getMovieClip: function(id) {
		if(this.swf != null) {
			return this.swf.createMovieClip(id);
		} else {
			return null;
		}
	}
	,isLocal: function(id,type) {
		return true;
	}
	,load: function() {
		var _gthis = this;
		if(this.id != null) {
			this.preload.h[this.id] = true;
		}
		var promise = new lime_app_Promise();
		this.preloading = true;
		var onComplete = function(data) {
			_gthis.cachedText.h[_gthis.id] = data;
			_gthis.swf = openfl__$internal_formats_swf_SWFLite.unserialize(data);
			_gthis.swf.library = _gthis;
			var bitmapSymbol;
			var symbol = _gthis.swf.symbols.iterator();
			while(symbol.hasNext()) {
				var symbol1 = symbol.next();
				if(((symbol1) instanceof openfl__$internal_symbols_BitmapSymbol)) {
					bitmapSymbol = symbol1;
					if(bitmapSymbol.className != null) {
						_gthis.imageClassNames.h[bitmapSymbol.className] = bitmapSymbol.path;
					}
				}
			}
			openfl__$internal_formats_swf_SWFLite.instances.h[_gthis.instanceID] = _gthis.swf;
			_gthis.__load().onProgress($bind(promise,promise.progress)).onError($bind(promise,promise.error)).onComplete(function(_) {
				_gthis.preloading = false;
				promise.complete(_gthis);
			});
		};
		if(openfl_utils_Assets.exists(this.id)) {
			var id = haxe_ds_StringMap.keysIterator(this.paths.h);
			while(id.hasNext()) {
				var id1 = id.next();
				this.preload.h[id1] = true;
			}
			this.loadText(this.id).onError($bind(promise,promise.error)).onComplete(onComplete);
		} else {
			var id = haxe_ds_StringMap.keysIterator(this.paths.h);
			while(id.hasNext()) {
				var id1 = id.next();
				this.preload.h[id1] = true;
			}
			var path = null;
			if(Object.prototype.hasOwnProperty.call(this.paths.h,this.id)) {
				path = this.paths.h[this.id];
			} else {
				path = this.rootPath != null && this.rootPath != "" ? this.rootPath + "/" + this.id : this.id;
			}
			var loader = new openfl_net_URLLoader();
			loader.addEventListener("complete",function(_) {
				onComplete(loader.data);
			});
			loader.addEventListener("ioError",function(e) {
				promise.error(e);
			});
			loader.load(new openfl_net_URLRequest(path));
		}
		return promise.future;
	}
	,loadImage: function(id) {
		var _gthis = this;
		if(Object.prototype.hasOwnProperty.call(this.imageClassNames.h,id)) {
			id = this.imageClassNames.h[id];
		}
		if(!this.preloading && !Object.prototype.hasOwnProperty.call(this.alphaCheck.h,id)) {
			var symbol = this.swf.symbols.iterator();
			while(symbol.hasNext()) {
				var symbol1 = symbol.next();
				if(((symbol1) instanceof openfl__$internal_symbols_BitmapSymbol) && (js_Boot.__cast(symbol1 , openfl__$internal_symbols_BitmapSymbol)).path == id) {
					var bitmapSymbol = [symbol1];
					if(bitmapSymbol[0].alpha != null) {
						var promise = [new lime_app_Promise()];
						this.__loadImage(id).onError(($_=promise[0],$bind($_,$_.error))).onComplete((function(promise,bitmapSymbol) {
							return function(image) {
								_gthis.__loadImage(bitmapSymbol[0].alpha).onError(($_=promise[0],$bind($_,$_.error))).onComplete((function(promise,bitmapSymbol) {
									return function(alpha) {
										_gthis.__copyChannel(image,alpha);
										_gthis.cachedImages.h[id] = image;
										var key = bitmapSymbol[0].alpha;
										var _this = _gthis.cachedImages;
										if(Object.prototype.hasOwnProperty.call(_this.h,key)) {
											delete(_this.h[key]);
										}
										_gthis.alphaCheck.h[id] = true;
										promise[0].complete(image);
									};
								})(promise,bitmapSymbol));
							};
						})(promise,bitmapSymbol));
						return promise[0].future;
					} else {
						this.alphaCheck.h[id] = true;
					}
				}
			}
		}
		return openfl_utils_AssetLibrary.prototype.loadImage.call(this,id);
	}
	,unload: function() {
		if(this.swf == null) {
			return;
		}
		if(Object.prototype.hasOwnProperty.call(openfl__$internal_formats_swf_SWFLite.instances.h,this.instanceID) && openfl__$internal_formats_swf_SWFLite.instances.h[this.instanceID] == this.swf) {
			var key = this.instanceID;
			var _this = openfl__$internal_formats_swf_SWFLite.instances;
			if(Object.prototype.hasOwnProperty.call(_this.h,key)) {
				delete(_this.h[key]);
			}
		}
		var bitmap;
		var symbol = this.swf.symbols.iterator();
		while(symbol.hasNext()) {
			var symbol1 = symbol.next();
			if(((symbol1) instanceof openfl__$internal_symbols_BitmapSymbol)) {
				bitmap = symbol1;
				openfl_utils_Assets.cache.removeBitmapData(bitmap.path);
			}
		}
	}
	,__copyChannel: function(image,alpha) {
		if(alpha != null) {
			image.copyChannel(alpha,alpha.get_rect(),new lime_math_Vector2(),lime_graphics_ImageChannel.RED,lime_graphics_ImageChannel.ALPHA);
		}
		image.buffer.premultiplied = true;
		image.set_premultiplied(false);
	}
	,__fromManifest: function(manifest) {
		this.rootPath = manifest.rootPath;
		openfl_utils_AssetLibrary.prototype.__fromManifest.call(this,manifest);
		this.bytesTotal = 0;
		var id = haxe_ds_StringMap.keysIterator(this.paths.h);
		while(id.hasNext()) {
			var id1 = id.next();
			this.bytesTotal += this.sizes.h[id1];
		}
	}
	,__load: function() {
		return openfl_utils_AssetLibrary.prototype.load.call(this);
	}
	,__loadImage: function(id) {
		return openfl_utils_AssetLibrary.prototype.loadImage.call(this,id);
	}
	,__class__: openfl__$internal_formats_swf_SWFLiteLibrary
});
var openfl__$internal_formats_swf_ShapeCommand = $hxEnums["openfl._internal.formats.swf.ShapeCommand"] = { __ename__ : "openfl._internal.formats.swf.ShapeCommand", __constructs__ : ["BeginBitmapFill","BeginFill","BeginGradientFill","CurveTo","EndFill","LineStyle","LineTo","MoveTo"]
	,BeginBitmapFill: ($_=function(bitmap,matrix,repeat,smooth) { return {_hx_index:0,bitmap:bitmap,matrix:matrix,repeat:repeat,smooth:smooth,__enum__:"openfl._internal.formats.swf.ShapeCommand",toString:$estr}; },$_.__params__ = ["bitmap","matrix","repeat","smooth"],$_)
	,BeginFill: ($_=function(color,alpha) { return {_hx_index:1,color:color,alpha:alpha,__enum__:"openfl._internal.formats.swf.ShapeCommand",toString:$estr}; },$_.__params__ = ["color","alpha"],$_)
	,BeginGradientFill: ($_=function(fillType,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) { return {_hx_index:2,fillType:fillType,colors:colors,alphas:alphas,ratios:ratios,matrix:matrix,spreadMethod:spreadMethod,interpolationMethod:interpolationMethod,focalPointRatio:focalPointRatio,__enum__:"openfl._internal.formats.swf.ShapeCommand",toString:$estr}; },$_.__params__ = ["fillType","colors","alphas","ratios","matrix","spreadMethod","interpolationMethod","focalPointRatio"],$_)
	,CurveTo: ($_=function(controlX,controlY,anchorX,anchorY) { return {_hx_index:3,controlX:controlX,controlY:controlY,anchorX:anchorX,anchorY:anchorY,__enum__:"openfl._internal.formats.swf.ShapeCommand",toString:$estr}; },$_.__params__ = ["controlX","controlY","anchorX","anchorY"],$_)
	,EndFill: {_hx_index:4,__enum__:"openfl._internal.formats.swf.ShapeCommand",toString:$estr}
	,LineStyle: ($_=function(thickness,color,alpha,pixelHinting,scaleMode,caps,joints,miterLimit) { return {_hx_index:5,thickness:thickness,color:color,alpha:alpha,pixelHinting:pixelHinting,scaleMode:scaleMode,caps:caps,joints:joints,miterLimit:miterLimit,__enum__:"openfl._internal.formats.swf.ShapeCommand",toString:$estr}; },$_.__params__ = ["thickness","color","alpha","pixelHinting","scaleMode","caps","joints","miterLimit"],$_)
	,LineTo: ($_=function(x,y) { return {_hx_index:6,x:x,y:y,__enum__:"openfl._internal.formats.swf.ShapeCommand",toString:$estr}; },$_.__params__ = ["x","y"],$_)
	,MoveTo: ($_=function(x,y) { return {_hx_index:7,x:x,y:y,__enum__:"openfl._internal.formats.swf.ShapeCommand",toString:$estr}; },$_.__params__ = ["x","y"],$_)
};
var openfl__$internal_renderer_DrawCommandBuffer = function() {
	if(openfl__$internal_renderer_DrawCommandBuffer.empty == null) {
		this.types = [];
		this.b = [];
		this.i = [];
		this.f = [];
		this.o = [];
		this.ff = [];
		this.ii = [];
		this.copyOnWrite = true;
	} else {
		this.clear();
	}
};
$hxClasses["openfl._internal.renderer.DrawCommandBuffer"] = openfl__$internal_renderer_DrawCommandBuffer;
openfl__$internal_renderer_DrawCommandBuffer.__name__ = "openfl._internal.renderer.DrawCommandBuffer";
openfl__$internal_renderer_DrawCommandBuffer.prototype = {
	types: null
	,b: null
	,copyOnWrite: null
	,f: null
	,ff: null
	,i: null
	,ii: null
	,o: null
	,append: function(other) {
		if(this.get_length() == 0) {
			this.types = other.types;
			this.b = other.b;
			this.i = other.i;
			this.f = other.f;
			this.o = other.o;
			this.ff = other.ff;
			this.ii = other.ii;
			this.copyOnWrite = other.copyOnWrite = true;
			return other;
		}
		var data = new openfl__$internal_renderer_DrawCommandReader(other);
		var _g = 0;
		var _g1 = other.types;
		while(_g < _g1.length) {
			var type = _g1[_g];
			++_g;
			switch(type._hx_index) {
			case 0:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL;
				var this1 = data;
				var c = this1;
				this.beginBitmapFill(c.buffer.o[c.oPos],c.buffer.o[c.oPos + 1],c.buffer.b[c.bPos],c.buffer.b[c.bPos + 1]);
				break;
			case 1:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_FILL;
				var this2 = data;
				var c1 = this2;
				this.beginFill(c1.buffer.i[c1.iPos],c1.buffer.f[c1.fPos]);
				break;
			case 2:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL;
				var this3 = data;
				var c2 = this3;
				this.beginGradientFill(c2.buffer.o[c2.oPos],c2.buffer.ii[c2.iiPos],c2.buffer.ff[c2.ffPos],c2.buffer.ii[c2.iiPos + 1],c2.buffer.o[c2.oPos + 1],c2.buffer.o[c2.oPos + 2],c2.buffer.o[c2.oPos + 3],c2.buffer.f[c2.fPos]);
				break;
			case 3:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_SHADER_FILL;
				var this4 = data;
				var c3 = this4;
				this.beginShaderFill(c3.buffer.o[c3.oPos]);
				break;
			case 4:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO;
				var this5 = data;
				var c4 = this5;
				this.cubicCurveTo(c4.buffer.f[c4.fPos],c4.buffer.f[c4.fPos + 1],c4.buffer.f[c4.fPos + 2],c4.buffer.f[c4.fPos + 3],c4.buffer.f[c4.fPos + 4],c4.buffer.f[c4.fPos + 5]);
				break;
			case 5:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.CURVE_TO;
				var this6 = data;
				var c5 = this6;
				this.curveTo(c5.buffer.f[c5.fPos],c5.buffer.f[c5.fPos + 1],c5.buffer.f[c5.fPos + 2],c5.buffer.f[c5.fPos + 3]);
				break;
			case 6:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE;
				var this7 = data;
				var c6 = this7;
				this.drawCircle(c6.buffer.f[c6.fPos],c6.buffer.f[c6.fPos + 1],c6.buffer.f[c6.fPos + 2]);
				break;
			case 7:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE;
				var this8 = data;
				var c7 = this8;
				this.drawEllipse(c7.buffer.f[c7.fPos],c7.buffer.f[c7.fPos + 1],c7.buffer.f[c7.fPos + 2],c7.buffer.f[c7.fPos + 3]);
				break;
			case 8:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_QUADS;
				var this9 = data;
				var c8 = this9;
				this.drawQuads(c8.buffer.o[c8.oPos],c8.buffer.o[c8.oPos + 1],c8.buffer.o[c8.oPos + 2]);
				break;
			case 9:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_RECT;
				var this10 = data;
				var c9 = this10;
				this.drawRect(c9.buffer.f[c9.fPos],c9.buffer.f[c9.fPos + 1],c9.buffer.f[c9.fPos + 2],c9.buffer.f[c9.fPos + 3]);
				break;
			case 10:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT;
				var this11 = data;
				var c10 = this11;
				this.drawRoundRect(c10.buffer.f[c10.fPos],c10.buffer.f[c10.fPos + 1],c10.buffer.f[c10.fPos + 2],c10.buffer.f[c10.fPos + 3],c10.buffer.f[c10.fPos + 4],c10.buffer.o[c10.oPos]);
				break;
			case 12:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_TRIANGLES;
				var this12 = data;
				var c11 = this12;
				this.drawTriangles(c11.buffer.o[c11.oPos],c11.buffer.o[c11.oPos + 1],c11.buffer.o[c11.oPos + 2],c11.buffer.o[c11.oPos + 3]);
				break;
			case 13:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.END_FILL;
				var this13 = data;
				var c12 = this13;
				this.endFill();
				break;
			case 14:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_BITMAP_STYLE;
				var this14 = data;
				var c13 = this14;
				this.lineBitmapStyle(c13.buffer.o[c13.oPos],c13.buffer.o[c13.oPos + 1],c13.buffer.b[c13.bPos],c13.buffer.b[c13.bPos + 1]);
				break;
			case 15:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_GRADIENT_STYLE;
				var this15 = data;
				var c14 = this15;
				this.lineGradientStyle(c14.buffer.o[c14.oPos],c14.buffer.ii[c14.iiPos],c14.buffer.ff[c14.ffPos],c14.buffer.ii[c14.iiPos + 1],c14.buffer.o[c14.oPos + 1],c14.buffer.o[c14.oPos + 2],c14.buffer.o[c14.oPos + 3],c14.buffer.f[c14.fPos]);
				break;
			case 16:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_STYLE;
				var this16 = data;
				var c15 = this16;
				this.lineStyle(c15.buffer.o[c15.oPos],c15.buffer.i[c15.iPos],c15.buffer.f[c15.fPos],c15.buffer.b[c15.bPos],c15.buffer.o[c15.oPos + 1],c15.buffer.o[c15.oPos + 2],c15.buffer.o[c15.oPos + 3],c15.buffer.f[c15.fPos + 1]);
				break;
			case 17:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_TO;
				var this17 = data;
				var c16 = this17;
				this.lineTo(c16.buffer.f[c16.fPos],c16.buffer.f[c16.fPos + 1]);
				break;
			case 18:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.MOVE_TO;
				var this18 = data;
				var c17 = this18;
				this.moveTo(c17.buffer.f[c17.fPos],c17.buffer.f[c17.fPos + 1]);
				break;
			case 20:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.OVERRIDE_MATRIX;
				var this19 = data;
				var c18 = this19;
				this.overrideMatrix(c18.buffer.o[c18.oPos]);
				break;
			case 21:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.WINDING_EVEN_ODD;
				var this20 = data;
				var c19 = this20;
				this.windingEvenOdd();
				break;
			case 22:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.WINDING_NON_ZERO;
				var this21 = data;
				var c20 = this21;
				this.windingNonZero();
				break;
			default:
			}
		}
		data.destroy();
		return other;
	}
	,beginBitmapFill: function(bitmap,matrix,repeat,smooth) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL);
		this.o.push(bitmap);
		this.o.push(matrix);
		this.b.push(repeat);
		this.b.push(smooth);
	}
	,beginFill: function(color,alpha) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.BEGIN_FILL);
		this.i.push(color);
		this.f.push(alpha);
	}
	,beginGradientFill: function(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL);
		this.o.push(type);
		this.ii.push(colors);
		this.ff.push(alphas);
		this.ii.push(ratios);
		this.o.push(matrix);
		this.o.push(spreadMethod);
		this.o.push(interpolationMethod);
		this.f.push(focalPointRatio);
	}
	,beginShaderFill: function(shaderBuffer) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.BEGIN_SHADER_FILL);
		this.o.push(shaderBuffer);
	}
	,clear: function() {
		this.types = openfl__$internal_renderer_DrawCommandBuffer.empty.types;
		this.b = openfl__$internal_renderer_DrawCommandBuffer.empty.b;
		this.i = openfl__$internal_renderer_DrawCommandBuffer.empty.i;
		this.f = openfl__$internal_renderer_DrawCommandBuffer.empty.f;
		this.o = openfl__$internal_renderer_DrawCommandBuffer.empty.o;
		this.ff = openfl__$internal_renderer_DrawCommandBuffer.empty.ff;
		this.ii = openfl__$internal_renderer_DrawCommandBuffer.empty.ii;
		this.copyOnWrite = true;
	}
	,copy: function() {
		var copy = new openfl__$internal_renderer_DrawCommandBuffer();
		copy.append(this);
		return copy;
	}
	,cubicCurveTo: function(controlX1,controlY1,controlX2,controlY2,anchorX,anchorY) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO);
		this.f.push(controlX1);
		this.f.push(controlY1);
		this.f.push(controlX2);
		this.f.push(controlY2);
		this.f.push(anchorX);
		this.f.push(anchorY);
	}
	,curveTo: function(controlX,controlY,anchorX,anchorY) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.CURVE_TO);
		this.f.push(controlX);
		this.f.push(controlY);
		this.f.push(anchorX);
		this.f.push(anchorY);
	}
	,destroy: function() {
		this.clear();
		this.types = null;
		this.b = null;
		this.i = null;
		this.f = null;
		this.o = null;
		this.ff = null;
		this.ii = null;
	}
	,drawCircle: function(x,y,radius) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE);
		this.f.push(x);
		this.f.push(y);
		this.f.push(radius);
	}
	,drawEllipse: function(x,y,width,height) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE);
		this.f.push(x);
		this.f.push(y);
		this.f.push(width);
		this.f.push(height);
	}
	,drawQuads: function(rects,indices,transforms) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.DRAW_QUADS);
		this.o.push(rects);
		this.o.push(indices);
		this.o.push(transforms);
	}
	,drawRect: function(x,y,width,height) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.DRAW_RECT);
		this.f.push(x);
		this.f.push(y);
		this.f.push(width);
		this.f.push(height);
	}
	,drawRoundRect: function(x,y,width,height,ellipseWidth,ellipseHeight) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT);
		this.f.push(x);
		this.f.push(y);
		this.f.push(width);
		this.f.push(height);
		this.f.push(ellipseWidth);
		this.o.push(ellipseHeight);
	}
	,drawTriangles: function(vertices,indices,uvtData,culling) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.DRAW_TRIANGLES);
		this.o.push(vertices);
		this.o.push(indices);
		this.o.push(uvtData);
		this.o.push(culling);
	}
	,endFill: function() {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.END_FILL);
	}
	,lineBitmapStyle: function(bitmap,matrix,repeat,smooth) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.LINE_BITMAP_STYLE);
		this.o.push(bitmap);
		this.o.push(matrix);
		this.b.push(repeat);
		this.b.push(smooth);
	}
	,lineGradientStyle: function(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.LINE_GRADIENT_STYLE);
		this.o.push(type);
		this.ii.push(colors);
		this.ff.push(alphas);
		this.ii.push(ratios);
		this.o.push(matrix);
		this.o.push(spreadMethod);
		this.o.push(interpolationMethod);
		this.f.push(focalPointRatio);
	}
	,lineStyle: function(thickness,color,alpha,pixelHinting,scaleMode,caps,joints,miterLimit) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.LINE_STYLE);
		this.o.push(thickness);
		this.i.push(color);
		this.f.push(alpha);
		this.b.push(pixelHinting);
		this.o.push(scaleMode);
		this.o.push(caps);
		this.o.push(joints);
		this.f.push(miterLimit);
	}
	,lineTo: function(x,y) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.LINE_TO);
		this.f.push(x);
		this.f.push(y);
	}
	,moveTo: function(x,y) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.MOVE_TO);
		this.f.push(x);
		this.f.push(y);
	}
	,prepareWrite: function() {
		if(this.copyOnWrite) {
			this.types = this.types.slice();
			this.b = this.b.slice();
			this.i = this.i.slice();
			this.f = this.f.slice();
			this.o = this.o.slice();
			this.ff = this.ff.slice();
			this.ii = this.ii.slice();
			this.copyOnWrite = false;
		}
	}
	,overrideBlendMode: function(blendMode) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.OVERRIDE_BLEND_MODE);
		this.o.push(blendMode);
	}
	,overrideMatrix: function(matrix) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.OVERRIDE_MATRIX);
		this.o.push(matrix);
	}
	,windingEvenOdd: function() {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.WINDING_EVEN_ODD);
	}
	,windingNonZero: function() {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.WINDING_NON_ZERO);
	}
	,get_length: function() {
		return this.types.length;
	}
	,__class__: openfl__$internal_renderer_DrawCommandBuffer
	,__properties__: {get_length:"get_length"}
};
var openfl__$internal_renderer_DrawCommandReader = function(buffer) {
	this.buffer = buffer;
	this.bPos = this.iPos = this.fPos = this.oPos = this.ffPos = this.iiPos = this.tsPos = 0;
	this.prev = openfl__$internal_renderer_DrawCommandType.UNKNOWN;
};
$hxClasses["openfl._internal.renderer.DrawCommandReader"] = openfl__$internal_renderer_DrawCommandReader;
openfl__$internal_renderer_DrawCommandReader.__name__ = "openfl._internal.renderer.DrawCommandReader";
openfl__$internal_renderer_DrawCommandReader.prototype = {
	buffer: null
	,bPos: null
	,iiPos: null
	,iPos: null
	,ffPos: null
	,fPos: null
	,oPos: null
	,prev: null
	,tsPos: null
	,advance: function() {
		switch(this.prev._hx_index) {
		case 0:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 1:
			this.iPos += 1;
			this.fPos += 1;
			break;
		case 2:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 3:
			this.oPos += 1;
			break;
		case 4:
			this.fPos += 6;
			break;
		case 5:
			this.fPos += 4;
			break;
		case 6:
			this.fPos += 3;
			break;
		case 7:
			this.fPos += 4;
			break;
		case 8:
			this.oPos += 3;
			break;
		case 9:
			this.fPos += 4;
			break;
		case 10:
			this.fPos += 5;
			this.oPos += 1;
			break;
		case 12:
			this.oPos += 4;
			break;
		case 13:
			break;
		case 14:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 15:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 16:
			this.oPos += 4;
			this.iPos += 1;
			this.fPos += 2;
			this.bPos += 1;
			break;
		case 17:
			this.fPos += 2;
			break;
		case 18:
			this.fPos += 2;
			break;
		case 19:
			this.oPos += 1;
			break;
		case 20:
			this.oPos += 1;
			break;
		case 21:case 22:
			break;
		default:
		}
	}
	,bool: function(index) {
		return this.buffer.b[this.bPos + index];
	}
	,destroy: function() {
		this.buffer = null;
		this.reset();
	}
	,fArr: function(index) {
		return this.buffer.ff[this.ffPos + index];
	}
	,float: function(index) {
		return this.buffer.f[this.fPos + index];
	}
	,iArr: function(index) {
		return this.buffer.ii[this.iiPos + index];
	}
	,int: function(index) {
		return this.buffer.i[this.iPos + index];
	}
	,obj: function(index) {
		return this.buffer.o[this.oPos + index];
	}
	,readBeginBitmapFill: function() {
		switch(this.prev._hx_index) {
		case 0:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 1:
			this.iPos += 1;
			this.fPos += 1;
			break;
		case 2:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 3:
			this.oPos += 1;
			break;
		case 4:
			this.fPos += 6;
			break;
		case 5:
			this.fPos += 4;
			break;
		case 6:
			this.fPos += 3;
			break;
		case 7:
			this.fPos += 4;
			break;
		case 8:
			this.oPos += 3;
			break;
		case 9:
			this.fPos += 4;
			break;
		case 10:
			this.fPos += 5;
			this.oPos += 1;
			break;
		case 12:
			this.oPos += 4;
			break;
		case 13:
			break;
		case 14:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 15:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 16:
			this.oPos += 4;
			this.iPos += 1;
			this.fPos += 2;
			this.bPos += 1;
			break;
		case 17:
			this.fPos += 2;
			break;
		case 18:
			this.fPos += 2;
			break;
		case 19:
			this.oPos += 1;
			break;
		case 20:
			this.oPos += 1;
			break;
		case 21:case 22:
			break;
		default:
		}
		this.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL;
		var this1 = this;
		return this1;
	}
	,readBeginFill: function() {
		switch(this.prev._hx_index) {
		case 0:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 1:
			this.iPos += 1;
			this.fPos += 1;
			break;
		case 2:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 3:
			this.oPos += 1;
			break;
		case 4:
			this.fPos += 6;
			break;
		case 5:
			this.fPos += 4;
			break;
		case 6:
			this.fPos += 3;
			break;
		case 7:
			this.fPos += 4;
			break;
		case 8:
			this.oPos += 3;
			break;
		case 9:
			this.fPos += 4;
			break;
		case 10:
			this.fPos += 5;
			this.oPos += 1;
			break;
		case 12:
			this.oPos += 4;
			break;
		case 13:
			break;
		case 14:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 15:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 16:
			this.oPos += 4;
			this.iPos += 1;
			this.fPos += 2;
			this.bPos += 1;
			break;
		case 17:
			this.fPos += 2;
			break;
		case 18:
			this.fPos += 2;
			break;
		case 19:
			this.oPos += 1;
			break;
		case 20:
			this.oPos += 1;
			break;
		case 21:case 22:
			break;
		default:
		}
		this.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_FILL;
		var this1 = this;
		return this1;
	}
	,readBeginGradientFill: function() {
		switch(this.prev._hx_index) {
		case 0:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 1:
			this.iPos += 1;
			this.fPos += 1;
			break;
		case 2:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 3:
			this.oPos += 1;
			break;
		case 4:
			this.fPos += 6;
			break;
		case 5:
			this.fPos += 4;
			break;
		case 6:
			this.fPos += 3;
			break;
		case 7:
			this.fPos += 4;
			break;
		case 8:
			this.oPos += 3;
			break;
		case 9:
			this.fPos += 4;
			break;
		case 10:
			this.fPos += 5;
			this.oPos += 1;
			break;
		case 12:
			this.oPos += 4;
			break;
		case 13:
			break;
		case 14:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 15:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 16:
			this.oPos += 4;
			this.iPos += 1;
			this.fPos += 2;
			this.bPos += 1;
			break;
		case 17:
			this.fPos += 2;
			break;
		case 18:
			this.fPos += 2;
			break;
		case 19:
			this.oPos += 1;
			break;
		case 20:
			this.oPos += 1;
			break;
		case 21:case 22:
			break;
		default:
		}
		this.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL;
		var this1 = this;
		return this1;
	}
	,readBeginShaderFill: function() {
		switch(this.prev._hx_index) {
		case 0:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 1:
			this.iPos += 1;
			this.fPos += 1;
			break;
		case 2:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 3:
			this.oPos += 1;
			break;
		case 4:
			this.fPos += 6;
			break;
		case 5:
			this.fPos += 4;
			break;
		case 6:
			this.fPos += 3;
			break;
		case 7:
			this.fPos += 4;
			break;
		case 8:
			this.oPos += 3;
			break;
		case 9:
			this.fPos += 4;
			break;
		case 10:
			this.fPos += 5;
			this.oPos += 1;
			break;
		case 12:
			this.oPos += 4;
			break;
		case 13:
			break;
		case 14:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 15:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 16:
			this.oPos += 4;
			this.iPos += 1;
			this.fPos += 2;
			this.bPos += 1;
			break;
		case 17:
			this.fPos += 2;
			break;
		case 18:
			this.fPos += 2;
			break;
		case 19:
			this.oPos += 1;
			break;
		case 20:
			this.oPos += 1;
			break;
		case 21:case 22:
			break;
		default:
		}
		this.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_SHADER_FILL;
		var this1 = this;
		return this1;
	}
	,readCubicCurveTo: function() {
		switch(this.prev._hx_index) {
		case 0:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 1:
			this.iPos += 1;
			this.fPos += 1;
			break;
		case 2:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 3:
			this.oPos += 1;
			break;
		case 4:
			this.fPos += 6;
			break;
		case 5:
			this.fPos += 4;
			break;
		case 6:
			this.fPos += 3;
			break;
		case 7:
			this.fPos += 4;
			break;
		case 8:
			this.oPos += 3;
			break;
		case 9:
			this.fPos += 4;
			break;
		case 10:
			this.fPos += 5;
			this.oPos += 1;
			break;
		case 12:
			this.oPos += 4;
			break;
		case 13:
			break;
		case 14:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 15:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 16:
			this.oPos += 4;
			this.iPos += 1;
			this.fPos += 2;
			this.bPos += 1;
			break;
		case 17:
			this.fPos += 2;
			break;
		case 18:
			this.fPos += 2;
			break;
		case 19:
			this.oPos += 1;
			break;
		case 20:
			this.oPos += 1;
			break;
		case 21:case 22:
			break;
		default:
		}
		this.prev = openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO;
		var this1 = this;
		return this1;
	}
	,readCurveTo: function() {
		switch(this.prev._hx_index) {
		case 0:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 1:
			this.iPos += 1;
			this.fPos += 1;
			break;
		case 2:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 3:
			this.oPos += 1;
			break;
		case 4:
			this.fPos += 6;
			break;
		case 5:
			this.fPos += 4;
			break;
		case 6:
			this.fPos += 3;
			break;
		case 7:
			this.fPos += 4;
			break;
		case 8:
			this.oPos += 3;
			break;
		case 9:
			this.fPos += 4;
			break;
		case 10:
			this.fPos += 5;
			this.oPos += 1;
			break;
		case 12:
			this.oPos += 4;
			break;
		case 13:
			break;
		case 14:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 15:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 16:
			this.oPos += 4;
			this.iPos += 1;
			this.fPos += 2;
			this.bPos += 1;
			break;
		case 17:
			this.fPos += 2;
			break;
		case 18:
			this.fPos += 2;
			break;
		case 19:
			this.oPos += 1;
			break;
		case 20:
			this.oPos += 1;
			break;
		case 21:case 22:
			break;
		default:
		}
		this.prev = openfl__$internal_renderer_DrawCommandType.CURVE_TO;
		var this1 = this;
		return this1;
	}
	,readDrawCircle: function() {
		switch(this.prev._hx_index) {
		case 0:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 1:
			this.iPos += 1;
			this.fPos += 1;
			break;
		case 2:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 3:
			this.oPos += 1;
			break;
		case 4:
			this.fPos += 6;
			break;
		case 5:
			this.fPos += 4;
			break;
		case 6:
			this.fPos += 3;
			break;
		case 7:
			this.fPos += 4;
			break;
		case 8:
			this.oPos += 3;
			break;
		case 9:
			this.fPos += 4;
			break;
		case 10:
			this.fPos += 5;
			this.oPos += 1;
			break;
		case 12:
			this.oPos += 4;
			break;
		case 13:
			break;
		case 14:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 15:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 16:
			this.oPos += 4;
			this.iPos += 1;
			this.fPos += 2;
			this.bPos += 1;
			break;
		case 17:
			this.fPos += 2;
			break;
		case 18:
			this.fPos += 2;
			break;
		case 19:
			this.oPos += 1;
			break;
		case 20:
			this.oPos += 1;
			break;
		case 21:case 22:
			break;
		default:
		}
		this.prev = openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE;
		var this1 = this;
		return this1;
	}
	,readDrawEllipse: function() {
		switch(this.prev._hx_index) {
		case 0:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 1:
			this.iPos += 1;
			this.fPos += 1;
			break;
		case 2:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 3:
			this.oPos += 1;
			break;
		case 4:
			this.fPos += 6;
			break;
		case 5:
			this.fPos += 4;
			break;
		case 6:
			this.fPos += 3;
			break;
		case 7:
			this.fPos += 4;
			break;
		case 8:
			this.oPos += 3;
			break;
		case 9:
			this.fPos += 4;
			break;
		case 10:
			this.fPos += 5;
			this.oPos += 1;
			break;
		case 12:
			this.oPos += 4;
			break;
		case 13:
			break;
		case 14:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 15:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 16:
			this.oPos += 4;
			this.iPos += 1;
			this.fPos += 2;
			this.bPos += 1;
			break;
		case 17:
			this.fPos += 2;
			break;
		case 18:
			this.fPos += 2;
			break;
		case 19:
			this.oPos += 1;
			break;
		case 20:
			this.oPos += 1;
			break;
		case 21:case 22:
			break;
		default:
		}
		this.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE;
		var this1 = this;
		return this1;
	}
	,readDrawQuads: function() {
		switch(this.prev._hx_index) {
		case 0:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 1:
			this.iPos += 1;
			this.fPos += 1;
			break;
		case 2:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 3:
			this.oPos += 1;
			break;
		case 4:
			this.fPos += 6;
			break;
		case 5:
			this.fPos += 4;
			break;
		case 6:
			this.fPos += 3;
			break;
		case 7:
			this.fPos += 4;
			break;
		case 8:
			this.oPos += 3;
			break;
		case 9:
			this.fPos += 4;
			break;
		case 10:
			this.fPos += 5;
			this.oPos += 1;
			break;
		case 12:
			this.oPos += 4;
			break;
		case 13:
			break;
		case 14:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 15:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 16:
			this.oPos += 4;
			this.iPos += 1;
			this.fPos += 2;
			this.bPos += 1;
			break;
		case 17:
			this.fPos += 2;
			break;
		case 18:
			this.fPos += 2;
			break;
		case 19:
			this.oPos += 1;
			break;
		case 20:
			this.oPos += 1;
			break;
		case 21:case 22:
			break;
		default:
		}
		this.prev = openfl__$internal_renderer_DrawCommandType.DRAW_QUADS;
		var this1 = this;
		return this1;
	}
	,readDrawRect: function() {
		switch(this.prev._hx_index) {
		case 0:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 1:
			this.iPos += 1;
			this.fPos += 1;
			break;
		case 2:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 3:
			this.oPos += 1;
			break;
		case 4:
			this.fPos += 6;
			break;
		case 5:
			this.fPos += 4;
			break;
		case 6:
			this.fPos += 3;
			break;
		case 7:
			this.fPos += 4;
			break;
		case 8:
			this.oPos += 3;
			break;
		case 9:
			this.fPos += 4;
			break;
		case 10:
			this.fPos += 5;
			this.oPos += 1;
			break;
		case 12:
			this.oPos += 4;
			break;
		case 13:
			break;
		case 14:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 15:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 16:
			this.oPos += 4;
			this.iPos += 1;
			this.fPos += 2;
			this.bPos += 1;
			break;
		case 17:
			this.fPos += 2;
			break;
		case 18:
			this.fPos += 2;
			break;
		case 19:
			this.oPos += 1;
			break;
		case 20:
			this.oPos += 1;
			break;
		case 21:case 22:
			break;
		default:
		}
		this.prev = openfl__$internal_renderer_DrawCommandType.DRAW_RECT;
		var this1 = this;
		return this1;
	}
	,readDrawRoundRect: function() {
		switch(this.prev._hx_index) {
		case 0:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 1:
			this.iPos += 1;
			this.fPos += 1;
			break;
		case 2:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 3:
			this.oPos += 1;
			break;
		case 4:
			this.fPos += 6;
			break;
		case 5:
			this.fPos += 4;
			break;
		case 6:
			this.fPos += 3;
			break;
		case 7:
			this.fPos += 4;
			break;
		case 8:
			this.oPos += 3;
			break;
		case 9:
			this.fPos += 4;
			break;
		case 10:
			this.fPos += 5;
			this.oPos += 1;
			break;
		case 12:
			this.oPos += 4;
			break;
		case 13:
			break;
		case 14:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 15:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 16:
			this.oPos += 4;
			this.iPos += 1;
			this.fPos += 2;
			this.bPos += 1;
			break;
		case 17:
			this.fPos += 2;
			break;
		case 18:
			this.fPos += 2;
			break;
		case 19:
			this.oPos += 1;
			break;
		case 20:
			this.oPos += 1;
			break;
		case 21:case 22:
			break;
		default:
		}
		this.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT;
		var this1 = this;
		return this1;
	}
	,readDrawTriangles: function() {
		switch(this.prev._hx_index) {
		case 0:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 1:
			this.iPos += 1;
			this.fPos += 1;
			break;
		case 2:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 3:
			this.oPos += 1;
			break;
		case 4:
			this.fPos += 6;
			break;
		case 5:
			this.fPos += 4;
			break;
		case 6:
			this.fPos += 3;
			break;
		case 7:
			this.fPos += 4;
			break;
		case 8:
			this.oPos += 3;
			break;
		case 9:
			this.fPos += 4;
			break;
		case 10:
			this.fPos += 5;
			this.oPos += 1;
			break;
		case 12:
			this.oPos += 4;
			break;
		case 13:
			break;
		case 14:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 15:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 16:
			this.oPos += 4;
			this.iPos += 1;
			this.fPos += 2;
			this.bPos += 1;
			break;
		case 17:
			this.fPos += 2;
			break;
		case 18:
			this.fPos += 2;
			break;
		case 19:
			this.oPos += 1;
			break;
		case 20:
			this.oPos += 1;
			break;
		case 21:case 22:
			break;
		default:
		}
		this.prev = openfl__$internal_renderer_DrawCommandType.DRAW_TRIANGLES;
		var this1 = this;
		return this1;
	}
	,readEndFill: function() {
		switch(this.prev._hx_index) {
		case 0:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 1:
			this.iPos += 1;
			this.fPos += 1;
			break;
		case 2:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 3:
			this.oPos += 1;
			break;
		case 4:
			this.fPos += 6;
			break;
		case 5:
			this.fPos += 4;
			break;
		case 6:
			this.fPos += 3;
			break;
		case 7:
			this.fPos += 4;
			break;
		case 8:
			this.oPos += 3;
			break;
		case 9:
			this.fPos += 4;
			break;
		case 10:
			this.fPos += 5;
			this.oPos += 1;
			break;
		case 12:
			this.oPos += 4;
			break;
		case 13:
			break;
		case 14:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 15:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 16:
			this.oPos += 4;
			this.iPos += 1;
			this.fPos += 2;
			this.bPos += 1;
			break;
		case 17:
			this.fPos += 2;
			break;
		case 18:
			this.fPos += 2;
			break;
		case 19:
			this.oPos += 1;
			break;
		case 20:
			this.oPos += 1;
			break;
		case 21:case 22:
			break;
		default:
		}
		this.prev = openfl__$internal_renderer_DrawCommandType.END_FILL;
		var this1 = this;
		return this1;
	}
	,readLineBitmapStyle: function() {
		switch(this.prev._hx_index) {
		case 0:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 1:
			this.iPos += 1;
			this.fPos += 1;
			break;
		case 2:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 3:
			this.oPos += 1;
			break;
		case 4:
			this.fPos += 6;
			break;
		case 5:
			this.fPos += 4;
			break;
		case 6:
			this.fPos += 3;
			break;
		case 7:
			this.fPos += 4;
			break;
		case 8:
			this.oPos += 3;
			break;
		case 9:
			this.fPos += 4;
			break;
		case 10:
			this.fPos += 5;
			this.oPos += 1;
			break;
		case 12:
			this.oPos += 4;
			break;
		case 13:
			break;
		case 14:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 15:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 16:
			this.oPos += 4;
			this.iPos += 1;
			this.fPos += 2;
			this.bPos += 1;
			break;
		case 17:
			this.fPos += 2;
			break;
		case 18:
			this.fPos += 2;
			break;
		case 19:
			this.oPos += 1;
			break;
		case 20:
			this.oPos += 1;
			break;
		case 21:case 22:
			break;
		default:
		}
		this.prev = openfl__$internal_renderer_DrawCommandType.LINE_BITMAP_STYLE;
		var this1 = this;
		return this1;
	}
	,readLineGradientStyle: function() {
		switch(this.prev._hx_index) {
		case 0:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 1:
			this.iPos += 1;
			this.fPos += 1;
			break;
		case 2:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 3:
			this.oPos += 1;
			break;
		case 4:
			this.fPos += 6;
			break;
		case 5:
			this.fPos += 4;
			break;
		case 6:
			this.fPos += 3;
			break;
		case 7:
			this.fPos += 4;
			break;
		case 8:
			this.oPos += 3;
			break;
		case 9:
			this.fPos += 4;
			break;
		case 10:
			this.fPos += 5;
			this.oPos += 1;
			break;
		case 12:
			this.oPos += 4;
			break;
		case 13:
			break;
		case 14:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 15:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 16:
			this.oPos += 4;
			this.iPos += 1;
			this.fPos += 2;
			this.bPos += 1;
			break;
		case 17:
			this.fPos += 2;
			break;
		case 18:
			this.fPos += 2;
			break;
		case 19:
			this.oPos += 1;
			break;
		case 20:
			this.oPos += 1;
			break;
		case 21:case 22:
			break;
		default:
		}
		this.prev = openfl__$internal_renderer_DrawCommandType.LINE_GRADIENT_STYLE;
		var this1 = this;
		return this1;
	}
	,readLineStyle: function() {
		switch(this.prev._hx_index) {
		case 0:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 1:
			this.iPos += 1;
			this.fPos += 1;
			break;
		case 2:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 3:
			this.oPos += 1;
			break;
		case 4:
			this.fPos += 6;
			break;
		case 5:
			this.fPos += 4;
			break;
		case 6:
			this.fPos += 3;
			break;
		case 7:
			this.fPos += 4;
			break;
		case 8:
			this.oPos += 3;
			break;
		case 9:
			this.fPos += 4;
			break;
		case 10:
			this.fPos += 5;
			this.oPos += 1;
			break;
		case 12:
			this.oPos += 4;
			break;
		case 13:
			break;
		case 14:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 15:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 16:
			this.oPos += 4;
			this.iPos += 1;
			this.fPos += 2;
			this.bPos += 1;
			break;
		case 17:
			this.fPos += 2;
			break;
		case 18:
			this.fPos += 2;
			break;
		case 19:
			this.oPos += 1;
			break;
		case 20:
			this.oPos += 1;
			break;
		case 21:case 22:
			break;
		default:
		}
		this.prev = openfl__$internal_renderer_DrawCommandType.LINE_STYLE;
		var this1 = this;
		return this1;
	}
	,readLineTo: function() {
		switch(this.prev._hx_index) {
		case 0:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 1:
			this.iPos += 1;
			this.fPos += 1;
			break;
		case 2:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 3:
			this.oPos += 1;
			break;
		case 4:
			this.fPos += 6;
			break;
		case 5:
			this.fPos += 4;
			break;
		case 6:
			this.fPos += 3;
			break;
		case 7:
			this.fPos += 4;
			break;
		case 8:
			this.oPos += 3;
			break;
		case 9:
			this.fPos += 4;
			break;
		case 10:
			this.fPos += 5;
			this.oPos += 1;
			break;
		case 12:
			this.oPos += 4;
			break;
		case 13:
			break;
		case 14:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 15:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 16:
			this.oPos += 4;
			this.iPos += 1;
			this.fPos += 2;
			this.bPos += 1;
			break;
		case 17:
			this.fPos += 2;
			break;
		case 18:
			this.fPos += 2;
			break;
		case 19:
			this.oPos += 1;
			break;
		case 20:
			this.oPos += 1;
			break;
		case 21:case 22:
			break;
		default:
		}
		this.prev = openfl__$internal_renderer_DrawCommandType.LINE_TO;
		var this1 = this;
		return this1;
	}
	,readMoveTo: function() {
		switch(this.prev._hx_index) {
		case 0:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 1:
			this.iPos += 1;
			this.fPos += 1;
			break;
		case 2:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 3:
			this.oPos += 1;
			break;
		case 4:
			this.fPos += 6;
			break;
		case 5:
			this.fPos += 4;
			break;
		case 6:
			this.fPos += 3;
			break;
		case 7:
			this.fPos += 4;
			break;
		case 8:
			this.oPos += 3;
			break;
		case 9:
			this.fPos += 4;
			break;
		case 10:
			this.fPos += 5;
			this.oPos += 1;
			break;
		case 12:
			this.oPos += 4;
			break;
		case 13:
			break;
		case 14:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 15:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 16:
			this.oPos += 4;
			this.iPos += 1;
			this.fPos += 2;
			this.bPos += 1;
			break;
		case 17:
			this.fPos += 2;
			break;
		case 18:
			this.fPos += 2;
			break;
		case 19:
			this.oPos += 1;
			break;
		case 20:
			this.oPos += 1;
			break;
		case 21:case 22:
			break;
		default:
		}
		this.prev = openfl__$internal_renderer_DrawCommandType.MOVE_TO;
		var this1 = this;
		return this1;
	}
	,readOverrideBlendMode: function() {
		switch(this.prev._hx_index) {
		case 0:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 1:
			this.iPos += 1;
			this.fPos += 1;
			break;
		case 2:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 3:
			this.oPos += 1;
			break;
		case 4:
			this.fPos += 6;
			break;
		case 5:
			this.fPos += 4;
			break;
		case 6:
			this.fPos += 3;
			break;
		case 7:
			this.fPos += 4;
			break;
		case 8:
			this.oPos += 3;
			break;
		case 9:
			this.fPos += 4;
			break;
		case 10:
			this.fPos += 5;
			this.oPos += 1;
			break;
		case 12:
			this.oPos += 4;
			break;
		case 13:
			break;
		case 14:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 15:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 16:
			this.oPos += 4;
			this.iPos += 1;
			this.fPos += 2;
			this.bPos += 1;
			break;
		case 17:
			this.fPos += 2;
			break;
		case 18:
			this.fPos += 2;
			break;
		case 19:
			this.oPos += 1;
			break;
		case 20:
			this.oPos += 1;
			break;
		case 21:case 22:
			break;
		default:
		}
		this.prev = openfl__$internal_renderer_DrawCommandType.OVERRIDE_BLEND_MODE;
		var this1 = this;
		return this1;
	}
	,readOverrideMatrix: function() {
		switch(this.prev._hx_index) {
		case 0:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 1:
			this.iPos += 1;
			this.fPos += 1;
			break;
		case 2:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 3:
			this.oPos += 1;
			break;
		case 4:
			this.fPos += 6;
			break;
		case 5:
			this.fPos += 4;
			break;
		case 6:
			this.fPos += 3;
			break;
		case 7:
			this.fPos += 4;
			break;
		case 8:
			this.oPos += 3;
			break;
		case 9:
			this.fPos += 4;
			break;
		case 10:
			this.fPos += 5;
			this.oPos += 1;
			break;
		case 12:
			this.oPos += 4;
			break;
		case 13:
			break;
		case 14:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 15:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 16:
			this.oPos += 4;
			this.iPos += 1;
			this.fPos += 2;
			this.bPos += 1;
			break;
		case 17:
			this.fPos += 2;
			break;
		case 18:
			this.fPos += 2;
			break;
		case 19:
			this.oPos += 1;
			break;
		case 20:
			this.oPos += 1;
			break;
		case 21:case 22:
			break;
		default:
		}
		this.prev = openfl__$internal_renderer_DrawCommandType.OVERRIDE_MATRIX;
		var this1 = this;
		return this1;
	}
	,readWindingEvenOdd: function() {
		switch(this.prev._hx_index) {
		case 0:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 1:
			this.iPos += 1;
			this.fPos += 1;
			break;
		case 2:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 3:
			this.oPos += 1;
			break;
		case 4:
			this.fPos += 6;
			break;
		case 5:
			this.fPos += 4;
			break;
		case 6:
			this.fPos += 3;
			break;
		case 7:
			this.fPos += 4;
			break;
		case 8:
			this.oPos += 3;
			break;
		case 9:
			this.fPos += 4;
			break;
		case 10:
			this.fPos += 5;
			this.oPos += 1;
			break;
		case 12:
			this.oPos += 4;
			break;
		case 13:
			break;
		case 14:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 15:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 16:
			this.oPos += 4;
			this.iPos += 1;
			this.fPos += 2;
			this.bPos += 1;
			break;
		case 17:
			this.fPos += 2;
			break;
		case 18:
			this.fPos += 2;
			break;
		case 19:
			this.oPos += 1;
			break;
		case 20:
			this.oPos += 1;
			break;
		case 21:case 22:
			break;
		default:
		}
		this.prev = openfl__$internal_renderer_DrawCommandType.WINDING_EVEN_ODD;
		var this1 = this;
		return this1;
	}
	,readWindingNonZero: function() {
		switch(this.prev._hx_index) {
		case 0:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 1:
			this.iPos += 1;
			this.fPos += 1;
			break;
		case 2:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 3:
			this.oPos += 1;
			break;
		case 4:
			this.fPos += 6;
			break;
		case 5:
			this.fPos += 4;
			break;
		case 6:
			this.fPos += 3;
			break;
		case 7:
			this.fPos += 4;
			break;
		case 8:
			this.oPos += 3;
			break;
		case 9:
			this.fPos += 4;
			break;
		case 10:
			this.fPos += 5;
			this.oPos += 1;
			break;
		case 12:
			this.oPos += 4;
			break;
		case 13:
			break;
		case 14:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 15:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 16:
			this.oPos += 4;
			this.iPos += 1;
			this.fPos += 2;
			this.bPos += 1;
			break;
		case 17:
			this.fPos += 2;
			break;
		case 18:
			this.fPos += 2;
			break;
		case 19:
			this.oPos += 1;
			break;
		case 20:
			this.oPos += 1;
			break;
		case 21:case 22:
			break;
		default:
		}
		this.prev = openfl__$internal_renderer_DrawCommandType.WINDING_NON_ZERO;
		var this1 = this;
		return this1;
	}
	,reset: function() {
		this.bPos = this.iPos = this.fPos = this.oPos = this.ffPos = this.iiPos = this.tsPos = 0;
	}
	,skip: function(type) {
		switch(this.prev._hx_index) {
		case 0:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 1:
			this.iPos += 1;
			this.fPos += 1;
			break;
		case 2:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 3:
			this.oPos += 1;
			break;
		case 4:
			this.fPos += 6;
			break;
		case 5:
			this.fPos += 4;
			break;
		case 6:
			this.fPos += 3;
			break;
		case 7:
			this.fPos += 4;
			break;
		case 8:
			this.oPos += 3;
			break;
		case 9:
			this.fPos += 4;
			break;
		case 10:
			this.fPos += 5;
			this.oPos += 1;
			break;
		case 12:
			this.oPos += 4;
			break;
		case 13:
			break;
		case 14:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 15:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 16:
			this.oPos += 4;
			this.iPos += 1;
			this.fPos += 2;
			this.bPos += 1;
			break;
		case 17:
			this.fPos += 2;
			break;
		case 18:
			this.fPos += 2;
			break;
		case 19:
			this.oPos += 1;
			break;
		case 20:
			this.oPos += 1;
			break;
		case 21:case 22:
			break;
		default:
		}
		this.prev = type;
	}
	,__class__: openfl__$internal_renderer_DrawCommandReader
};
var openfl__$internal_renderer_BeginBitmapFillView = {};
openfl__$internal_renderer_BeginBitmapFillView.__properties__ = {get_smooth:"get_smooth",get_repeat:"get_repeat",get_matrix:"get_matrix",get_bitmap:"get_bitmap"};
openfl__$internal_renderer_BeginBitmapFillView._new = function(d) {
	var this1 = d;
	return this1;
};
openfl__$internal_renderer_BeginBitmapFillView.get_bitmap = function(this1) {
	return this1.buffer.o[this1.oPos];
};
openfl__$internal_renderer_BeginBitmapFillView.get_matrix = function(this1) {
	return this1.buffer.o[this1.oPos + 1];
};
openfl__$internal_renderer_BeginBitmapFillView.get_repeat = function(this1) {
	return this1.buffer.b[this1.bPos];
};
openfl__$internal_renderer_BeginBitmapFillView.get_smooth = function(this1) {
	return this1.buffer.b[this1.bPos + 1];
};
var openfl__$internal_renderer_BeginFillView = {};
openfl__$internal_renderer_BeginFillView.__properties__ = {get_alpha:"get_alpha",get_color:"get_color"};
openfl__$internal_renderer_BeginFillView._new = function(d) {
	var this1 = d;
	return this1;
};
openfl__$internal_renderer_BeginFillView.get_color = function(this1) {
	return this1.buffer.i[this1.iPos];
};
openfl__$internal_renderer_BeginFillView.get_alpha = function(this1) {
	return this1.buffer.f[this1.fPos];
};
var openfl__$internal_renderer_BeginGradientFillView = {};
openfl__$internal_renderer_BeginGradientFillView.__properties__ = {get_focalPointRatio:"get_focalPointRatio",get_interpolationMethod:"get_interpolationMethod",get_spreadMethod:"get_spreadMethod",get_matrix:"get_matrix",get_ratios:"get_ratios",get_alphas:"get_alphas",get_colors:"get_colors",get_type:"get_type"};
openfl__$internal_renderer_BeginGradientFillView._new = function(d) {
	var this1 = d;
	return this1;
};
openfl__$internal_renderer_BeginGradientFillView.get_type = function(this1) {
	return this1.buffer.o[this1.oPos];
};
openfl__$internal_renderer_BeginGradientFillView.get_colors = function(this1) {
	return this1.buffer.ii[this1.iiPos];
};
openfl__$internal_renderer_BeginGradientFillView.get_alphas = function(this1) {
	return this1.buffer.ff[this1.ffPos];
};
openfl__$internal_renderer_BeginGradientFillView.get_ratios = function(this1) {
	return this1.buffer.ii[this1.iiPos + 1];
};
openfl__$internal_renderer_BeginGradientFillView.get_matrix = function(this1) {
	return this1.buffer.o[this1.oPos + 1];
};
openfl__$internal_renderer_BeginGradientFillView.get_spreadMethod = function(this1) {
	return this1.buffer.o[this1.oPos + 2];
};
openfl__$internal_renderer_BeginGradientFillView.get_interpolationMethod = function(this1) {
	return this1.buffer.o[this1.oPos + 3];
};
openfl__$internal_renderer_BeginGradientFillView.get_focalPointRatio = function(this1) {
	return this1.buffer.f[this1.fPos];
};
var openfl__$internal_renderer_BeginShaderFillView = {};
openfl__$internal_renderer_BeginShaderFillView.__properties__ = {get_shaderBuffer:"get_shaderBuffer"};
openfl__$internal_renderer_BeginShaderFillView._new = function(d) {
	var this1 = d;
	return this1;
};
openfl__$internal_renderer_BeginShaderFillView.get_shaderBuffer = function(this1) {
	return this1.buffer.o[this1.oPos];
};
var openfl__$internal_renderer_CubicCurveToView = {};
openfl__$internal_renderer_CubicCurveToView.__properties__ = {get_anchorY:"get_anchorY",get_anchorX:"get_anchorX",get_controlY2:"get_controlY2",get_controlX2:"get_controlX2",get_controlY1:"get_controlY1",get_controlX1:"get_controlX1"};
openfl__$internal_renderer_CubicCurveToView._new = function(d) {
	var this1 = d;
	return this1;
};
openfl__$internal_renderer_CubicCurveToView.get_controlX1 = function(this1) {
	return this1.buffer.f[this1.fPos];
};
openfl__$internal_renderer_CubicCurveToView.get_controlY1 = function(this1) {
	return this1.buffer.f[this1.fPos + 1];
};
openfl__$internal_renderer_CubicCurveToView.get_controlX2 = function(this1) {
	return this1.buffer.f[this1.fPos + 2];
};
openfl__$internal_renderer_CubicCurveToView.get_controlY2 = function(this1) {
	return this1.buffer.f[this1.fPos + 3];
};
openfl__$internal_renderer_CubicCurveToView.get_anchorX = function(this1) {
	return this1.buffer.f[this1.fPos + 4];
};
openfl__$internal_renderer_CubicCurveToView.get_anchorY = function(this1) {
	return this1.buffer.f[this1.fPos + 5];
};
var openfl__$internal_renderer_CurveToView = {};
openfl__$internal_renderer_CurveToView.__properties__ = {get_anchorY:"get_anchorY",get_anchorX:"get_anchorX",get_controlY:"get_controlY",get_controlX:"get_controlX"};
openfl__$internal_renderer_CurveToView._new = function(d) {
	var this1 = d;
	return this1;
};
openfl__$internal_renderer_CurveToView.get_controlX = function(this1) {
	return this1.buffer.f[this1.fPos];
};
openfl__$internal_renderer_CurveToView.get_controlY = function(this1) {
	return this1.buffer.f[this1.fPos + 1];
};
openfl__$internal_renderer_CurveToView.get_anchorX = function(this1) {
	return this1.buffer.f[this1.fPos + 2];
};
openfl__$internal_renderer_CurveToView.get_anchorY = function(this1) {
	return this1.buffer.f[this1.fPos + 3];
};
var openfl__$internal_renderer_DrawCircleView = {};
openfl__$internal_renderer_DrawCircleView.__properties__ = {get_radius:"get_radius",get_y:"get_y",get_x:"get_x"};
openfl__$internal_renderer_DrawCircleView._new = function(d) {
	var this1 = d;
	return this1;
};
openfl__$internal_renderer_DrawCircleView.get_x = function(this1) {
	return this1.buffer.f[this1.fPos];
};
openfl__$internal_renderer_DrawCircleView.get_y = function(this1) {
	return this1.buffer.f[this1.fPos + 1];
};
openfl__$internal_renderer_DrawCircleView.get_radius = function(this1) {
	return this1.buffer.f[this1.fPos + 2];
};
var openfl__$internal_renderer_DrawEllipseView = {};
openfl__$internal_renderer_DrawEllipseView.__properties__ = {get_height:"get_height",get_width:"get_width",get_y:"get_y",get_x:"get_x"};
openfl__$internal_renderer_DrawEllipseView._new = function(d) {
	var this1 = d;
	return this1;
};
openfl__$internal_renderer_DrawEllipseView.get_x = function(this1) {
	return this1.buffer.f[this1.fPos];
};
openfl__$internal_renderer_DrawEllipseView.get_y = function(this1) {
	return this1.buffer.f[this1.fPos + 1];
};
openfl__$internal_renderer_DrawEllipseView.get_width = function(this1) {
	return this1.buffer.f[this1.fPos + 2];
};
openfl__$internal_renderer_DrawEllipseView.get_height = function(this1) {
	return this1.buffer.f[this1.fPos + 3];
};
var openfl__$internal_renderer_DrawQuadsView = {};
openfl__$internal_renderer_DrawQuadsView.__properties__ = {get_transforms:"get_transforms",get_indices:"get_indices",get_rects:"get_rects"};
openfl__$internal_renderer_DrawQuadsView._new = function(d) {
	var this1 = d;
	return this1;
};
openfl__$internal_renderer_DrawQuadsView.get_rects = function(this1) {
	return this1.buffer.o[this1.oPos];
};
openfl__$internal_renderer_DrawQuadsView.get_indices = function(this1) {
	return this1.buffer.o[this1.oPos + 1];
};
openfl__$internal_renderer_DrawQuadsView.get_transforms = function(this1) {
	return this1.buffer.o[this1.oPos + 2];
};
var openfl__$internal_renderer_DrawRectView = {};
openfl__$internal_renderer_DrawRectView.__properties__ = {get_height:"get_height",get_width:"get_width",get_y:"get_y",get_x:"get_x"};
openfl__$internal_renderer_DrawRectView._new = function(d) {
	var this1 = d;
	return this1;
};
openfl__$internal_renderer_DrawRectView.get_x = function(this1) {
	return this1.buffer.f[this1.fPos];
};
openfl__$internal_renderer_DrawRectView.get_y = function(this1) {
	return this1.buffer.f[this1.fPos + 1];
};
openfl__$internal_renderer_DrawRectView.get_width = function(this1) {
	return this1.buffer.f[this1.fPos + 2];
};
openfl__$internal_renderer_DrawRectView.get_height = function(this1) {
	return this1.buffer.f[this1.fPos + 3];
};
var openfl__$internal_renderer_DrawRoundRectView = {};
openfl__$internal_renderer_DrawRoundRectView.__properties__ = {get_ellipseHeight:"get_ellipseHeight",get_ellipseWidth:"get_ellipseWidth",get_height:"get_height",get_width:"get_width",get_y:"get_y",get_x:"get_x"};
openfl__$internal_renderer_DrawRoundRectView._new = function(d) {
	var this1 = d;
	return this1;
};
openfl__$internal_renderer_DrawRoundRectView.get_x = function(this1) {
	return this1.buffer.f[this1.fPos];
};
openfl__$internal_renderer_DrawRoundRectView.get_y = function(this1) {
	return this1.buffer.f[this1.fPos + 1];
};
openfl__$internal_renderer_DrawRoundRectView.get_width = function(this1) {
	return this1.buffer.f[this1.fPos + 2];
};
openfl__$internal_renderer_DrawRoundRectView.get_height = function(this1) {
	return this1.buffer.f[this1.fPos + 3];
};
openfl__$internal_renderer_DrawRoundRectView.get_ellipseWidth = function(this1) {
	return this1.buffer.f[this1.fPos + 4];
};
openfl__$internal_renderer_DrawRoundRectView.get_ellipseHeight = function(this1) {
	return this1.buffer.o[this1.oPos];
};
var openfl__$internal_renderer_DrawTrianglesView = {};
openfl__$internal_renderer_DrawTrianglesView.__properties__ = {get_culling:"get_culling",get_uvtData:"get_uvtData",get_indices:"get_indices",get_vertices:"get_vertices"};
openfl__$internal_renderer_DrawTrianglesView._new = function(d) {
	var this1 = d;
	return this1;
};
openfl__$internal_renderer_DrawTrianglesView.get_vertices = function(this1) {
	return this1.buffer.o[this1.oPos];
};
openfl__$internal_renderer_DrawTrianglesView.get_indices = function(this1) {
	return this1.buffer.o[this1.oPos + 1];
};
openfl__$internal_renderer_DrawTrianglesView.get_uvtData = function(this1) {
	return this1.buffer.o[this1.oPos + 2];
};
openfl__$internal_renderer_DrawTrianglesView.get_culling = function(this1) {
	return this1.buffer.o[this1.oPos + 3];
};
var openfl__$internal_renderer_EndFillView = {};
openfl__$internal_renderer_EndFillView._new = function(d) {
	var this1 = d;
	return this1;
};
var openfl__$internal_renderer_LineBitmapStyleView = {};
openfl__$internal_renderer_LineBitmapStyleView.__properties__ = {get_smooth:"get_smooth",get_repeat:"get_repeat",get_matrix:"get_matrix",get_bitmap:"get_bitmap"};
openfl__$internal_renderer_LineBitmapStyleView._new = function(d) {
	var this1 = d;
	return this1;
};
openfl__$internal_renderer_LineBitmapStyleView.get_bitmap = function(this1) {
	return this1.buffer.o[this1.oPos];
};
openfl__$internal_renderer_LineBitmapStyleView.get_matrix = function(this1) {
	return this1.buffer.o[this1.oPos + 1];
};
openfl__$internal_renderer_LineBitmapStyleView.get_repeat = function(this1) {
	return this1.buffer.b[this1.bPos];
};
openfl__$internal_renderer_LineBitmapStyleView.get_smooth = function(this1) {
	return this1.buffer.b[this1.bPos + 1];
};
var openfl__$internal_renderer_LineGradientStyleView = {};
openfl__$internal_renderer_LineGradientStyleView.__properties__ = {get_focalPointRatio:"get_focalPointRatio",get_interpolationMethod:"get_interpolationMethod",get_spreadMethod:"get_spreadMethod",get_matrix:"get_matrix",get_ratios:"get_ratios",get_alphas:"get_alphas",get_colors:"get_colors",get_type:"get_type"};
openfl__$internal_renderer_LineGradientStyleView._new = function(d) {
	var this1 = d;
	return this1;
};
openfl__$internal_renderer_LineGradientStyleView.get_type = function(this1) {
	return this1.buffer.o[this1.oPos];
};
openfl__$internal_renderer_LineGradientStyleView.get_colors = function(this1) {
	return this1.buffer.ii[this1.iiPos];
};
openfl__$internal_renderer_LineGradientStyleView.get_alphas = function(this1) {
	return this1.buffer.ff[this1.ffPos];
};
openfl__$internal_renderer_LineGradientStyleView.get_ratios = function(this1) {
	return this1.buffer.ii[this1.iiPos + 1];
};
openfl__$internal_renderer_LineGradientStyleView.get_matrix = function(this1) {
	return this1.buffer.o[this1.oPos + 1];
};
openfl__$internal_renderer_LineGradientStyleView.get_spreadMethod = function(this1) {
	return this1.buffer.o[this1.oPos + 2];
};
openfl__$internal_renderer_LineGradientStyleView.get_interpolationMethod = function(this1) {
	return this1.buffer.o[this1.oPos + 3];
};
openfl__$internal_renderer_LineGradientStyleView.get_focalPointRatio = function(this1) {
	return this1.buffer.f[this1.fPos];
};
var openfl__$internal_renderer_LineStyleView = {};
openfl__$internal_renderer_LineStyleView.__properties__ = {get_miterLimit:"get_miterLimit",get_joints:"get_joints",get_caps:"get_caps",get_scaleMode:"get_scaleMode",get_pixelHinting:"get_pixelHinting",get_alpha:"get_alpha",get_color:"get_color",get_thickness:"get_thickness"};
openfl__$internal_renderer_LineStyleView._new = function(d) {
	var this1 = d;
	return this1;
};
openfl__$internal_renderer_LineStyleView.get_thickness = function(this1) {
	return this1.buffer.o[this1.oPos];
};
openfl__$internal_renderer_LineStyleView.get_color = function(this1) {
	return this1.buffer.i[this1.iPos];
};
openfl__$internal_renderer_LineStyleView.get_alpha = function(this1) {
	return this1.buffer.f[this1.fPos];
};
openfl__$internal_renderer_LineStyleView.get_pixelHinting = function(this1) {
	return this1.buffer.b[this1.bPos];
};
openfl__$internal_renderer_LineStyleView.get_scaleMode = function(this1) {
	return this1.buffer.o[this1.oPos + 1];
};
openfl__$internal_renderer_LineStyleView.get_caps = function(this1) {
	return this1.buffer.o[this1.oPos + 2];
};
openfl__$internal_renderer_LineStyleView.get_joints = function(this1) {
	return this1.buffer.o[this1.oPos + 3];
};
openfl__$internal_renderer_LineStyleView.get_miterLimit = function(this1) {
	return this1.buffer.f[this1.fPos + 1];
};
var openfl__$internal_renderer_LineToView = {};
openfl__$internal_renderer_LineToView.__properties__ = {get_y:"get_y",get_x:"get_x"};
openfl__$internal_renderer_LineToView._new = function(d) {
	var this1 = d;
	return this1;
};
openfl__$internal_renderer_LineToView.get_x = function(this1) {
	return this1.buffer.f[this1.fPos];
};
openfl__$internal_renderer_LineToView.get_y = function(this1) {
	return this1.buffer.f[this1.fPos + 1];
};
var openfl__$internal_renderer_MoveToView = {};
openfl__$internal_renderer_MoveToView.__properties__ = {get_y:"get_y",get_x:"get_x"};
openfl__$internal_renderer_MoveToView._new = function(d) {
	var this1 = d;
	return this1;
};
openfl__$internal_renderer_MoveToView.get_x = function(this1) {
	return this1.buffer.f[this1.fPos];
};
openfl__$internal_renderer_MoveToView.get_y = function(this1) {
	return this1.buffer.f[this1.fPos + 1];
};
var openfl__$internal_renderer_OverrideBlendModeView = {};
openfl__$internal_renderer_OverrideBlendModeView.__properties__ = {get_blendMode:"get_blendMode"};
openfl__$internal_renderer_OverrideBlendModeView._new = function(d) {
	var this1 = d;
	return this1;
};
openfl__$internal_renderer_OverrideBlendModeView.get_blendMode = function(this1) {
	return this1.buffer.o[this1.oPos];
};
var openfl__$internal_renderer_OverrideMatrixView = {};
openfl__$internal_renderer_OverrideMatrixView.__properties__ = {get_matrix:"get_matrix"};
openfl__$internal_renderer_OverrideMatrixView._new = function(d) {
	var this1 = d;
	return this1;
};
openfl__$internal_renderer_OverrideMatrixView.get_matrix = function(this1) {
	return this1.buffer.o[this1.oPos];
};
var openfl__$internal_renderer_WindingEvenOddView = {};
openfl__$internal_renderer_WindingEvenOddView._new = function(d) {
	var this1 = d;
	return this1;
};
var openfl__$internal_renderer_WindingNonZeroView = {};
openfl__$internal_renderer_WindingNonZeroView._new = function(d) {
	var this1 = d;
	return this1;
};
var openfl__$internal_renderer_DrawCommandType = $hxEnums["openfl._internal.renderer.DrawCommandType"] = { __ename__ : "openfl._internal.renderer.DrawCommandType", __constructs__ : ["BEGIN_BITMAP_FILL","BEGIN_FILL","BEGIN_GRADIENT_FILL","BEGIN_SHADER_FILL","CUBIC_CURVE_TO","CURVE_TO","DRAW_CIRCLE","DRAW_ELLIPSE","DRAW_QUADS","DRAW_RECT","DRAW_ROUND_RECT","DRAW_TILES","DRAW_TRIANGLES","END_FILL","LINE_BITMAP_STYLE","LINE_GRADIENT_STYLE","LINE_STYLE","LINE_TO","MOVE_TO","OVERRIDE_BLEND_MODE","OVERRIDE_MATRIX","WINDING_EVEN_ODD","WINDING_NON_ZERO","UNKNOWN"]
	,BEGIN_BITMAP_FILL: {_hx_index:0,__enum__:"openfl._internal.renderer.DrawCommandType",toString:$estr}
	,BEGIN_FILL: {_hx_index:1,__enum__:"openfl._internal.renderer.DrawCommandType",toString:$estr}
	,BEGIN_GRADIENT_FILL: {_hx_index:2,__enum__:"openfl._internal.renderer.DrawCommandType",toString:$estr}
	,BEGIN_SHADER_FILL: {_hx_index:3,__enum__:"openfl._internal.renderer.DrawCommandType",toString:$estr}
	,CUBIC_CURVE_TO: {_hx_index:4,__enum__:"openfl._internal.renderer.DrawCommandType",toString:$estr}
	,CURVE_TO: {_hx_index:5,__enum__:"openfl._internal.renderer.DrawCommandType",toString:$estr}
	,DRAW_CIRCLE: {_hx_index:6,__enum__:"openfl._internal.renderer.DrawCommandType",toString:$estr}
	,DRAW_ELLIPSE: {_hx_index:7,__enum__:"openfl._internal.renderer.DrawCommandType",toString:$estr}
	,DRAW_QUADS: {_hx_index:8,__enum__:"openfl._internal.renderer.DrawCommandType",toString:$estr}
	,DRAW_RECT: {_hx_index:9,__enum__:"openfl._internal.renderer.DrawCommandType",toString:$estr}
	,DRAW_ROUND_RECT: {_hx_index:10,__enum__:"openfl._internal.renderer.DrawCommandType",toString:$estr}
	,DRAW_TILES: {_hx_index:11,__enum__:"openfl._internal.renderer.DrawCommandType",toString:$estr}
	,DRAW_TRIANGLES: {_hx_index:12,__enum__:"openfl._internal.renderer.DrawCommandType",toString:$estr}
	,END_FILL: {_hx_index:13,__enum__:"openfl._internal.renderer.DrawCommandType",toString:$estr}
	,LINE_BITMAP_STYLE: {_hx_index:14,__enum__:"openfl._internal.renderer.DrawCommandType",toString:$estr}
	,LINE_GRADIENT_STYLE: {_hx_index:15,__enum__:"openfl._internal.renderer.DrawCommandType",toString:$estr}
	,LINE_STYLE: {_hx_index:16,__enum__:"openfl._internal.renderer.DrawCommandType",toString:$estr}
	,LINE_TO: {_hx_index:17,__enum__:"openfl._internal.renderer.DrawCommandType",toString:$estr}
	,MOVE_TO: {_hx_index:18,__enum__:"openfl._internal.renderer.DrawCommandType",toString:$estr}
	,OVERRIDE_BLEND_MODE: {_hx_index:19,__enum__:"openfl._internal.renderer.DrawCommandType",toString:$estr}
	,OVERRIDE_MATRIX: {_hx_index:20,__enum__:"openfl._internal.renderer.DrawCommandType",toString:$estr}
	,WINDING_EVEN_ODD: {_hx_index:21,__enum__:"openfl._internal.renderer.DrawCommandType",toString:$estr}
	,WINDING_NON_ZERO: {_hx_index:22,__enum__:"openfl._internal.renderer.DrawCommandType",toString:$estr}
	,UNKNOWN: {_hx_index:23,__enum__:"openfl._internal.renderer.DrawCommandType",toString:$estr}
};
var openfl__$internal_renderer_SamplerState = function(wrap,filter,mipfilter,lodBias,ignoreSampler,centroid,textureAlpha) {
	if(textureAlpha == null) {
		textureAlpha = false;
	}
	if(centroid == null) {
		centroid = false;
	}
	if(ignoreSampler == null) {
		ignoreSampler = false;
	}
	if(lodBias == null) {
		lodBias = 0.0;
	}
	if(mipfilter == null) {
		mipfilter = 2;
	}
	if(filter == null) {
		filter = 5;
	}
	if(wrap == null) {
		wrap = 0;
	}
	this.wrap = wrap;
	this.filter = filter;
	this.mipfilter = mipfilter;
	this.lodBias = lodBias;
	this.ignoreSampler = ignoreSampler;
	this.centroid = centroid;
	this.textureAlpha = textureAlpha;
};
$hxClasses["openfl._internal.renderer.SamplerState"] = openfl__$internal_renderer_SamplerState;
openfl__$internal_renderer_SamplerState.__name__ = "openfl._internal.renderer.SamplerState";
openfl__$internal_renderer_SamplerState.prototype = {
	centroid: null
	,filter: null
	,ignoreSampler: null
	,lodBias: null
	,mipfilter: null
	,mipmapGenerated: null
	,textureAlpha: null
	,wrap: null
	,clone: function() {
		var copy = new openfl__$internal_renderer_SamplerState(this.wrap,this.filter,this.mipfilter,this.lodBias,this.ignoreSampler,this.centroid,this.textureAlpha);
		copy.mipmapGenerated = this.mipmapGenerated;
		return copy;
	}
	,copyFrom: function(other) {
		if(other == null || other.ignoreSampler) {
			return;
		}
		this.wrap = other.wrap;
		this.filter = other.filter;
		this.mipfilter = other.mipfilter;
		this.lodBias = other.lodBias;
		this.centroid = other.centroid;
		this.textureAlpha = other.textureAlpha;
	}
	,equals: function(other) {
		if(other == null) {
			return false;
		}
		if(this.wrap == other.wrap && this.filter == other.filter && this.mipfilter == other.mipfilter && this.lodBias == other.lodBias) {
			return this.textureAlpha == other.textureAlpha;
		} else {
			return false;
		}
	}
	,__class__: openfl__$internal_renderer_SamplerState
};
var openfl__$internal_renderer_ShaderBuffer = function() {
	this.inputRefs = [];
	this.inputFilter = [];
	this.inputMipFilter = [];
	this.inputs = [];
	this.inputWrap = [];
	this.overrideIntNames = [];
	this.overrideIntValues = [];
	this.overrideFloatNames = [];
	this.overrideFloatValues = [];
	this.overrideBoolNames = [];
	this.overrideBoolValues = [];
	this.paramLengths = [];
	this.paramPositions = [];
	this.paramRefs_Bool = [];
	this.paramRefs_Float = [];
	this.paramRefs_Int = [];
	this.paramTypes = [];
};
$hxClasses["openfl._internal.renderer.ShaderBuffer"] = openfl__$internal_renderer_ShaderBuffer;
openfl__$internal_renderer_ShaderBuffer.__name__ = "openfl._internal.renderer.ShaderBuffer";
openfl__$internal_renderer_ShaderBuffer.prototype = {
	inputCount: null
	,inputRefs: null
	,inputFilter: null
	,inputMipFilter: null
	,inputs: null
	,inputWrap: null
	,overrideBoolCount: null
	,overrideBoolNames: null
	,overrideBoolValues: null
	,overrideFloatCount: null
	,overrideFloatNames: null
	,overrideFloatValues: null
	,overrideIntCount: null
	,overrideIntNames: null
	,overrideIntValues: null
	,paramBoolCount: null
	,paramCount: null
	,paramData: null
	,paramDataBuffer: null
	,paramDataLength: null
	,paramFloatCount: null
	,paramIntCount: null
	,paramLengths: null
	,paramPositions: null
	,paramRefs_Bool: null
	,paramRefs_Float: null
	,paramRefs_Int: null
	,paramTypes: null
	,shader: null
	,addBoolOverride: function(name,values) {
		this.overrideBoolNames[this.overrideBoolCount] = name;
		this.overrideBoolValues[this.overrideBoolCount] = values;
		this.overrideBoolCount++;
	}
	,addFloatOverride: function(name,values) {
		this.overrideFloatNames[this.overrideFloatCount] = name;
		this.overrideFloatValues[this.overrideFloatCount] = values;
		this.overrideFloatCount++;
	}
	,addIntOverride: function(name,values) {
		this.overrideIntNames[this.overrideIntCount] = name;
		this.overrideIntValues[this.overrideIntCount] = values;
		this.overrideIntCount++;
	}
	,clearOverride: function() {
		this.overrideIntCount = 0;
		this.overrideFloatCount = 0;
		this.overrideBoolCount = 0;
	}
	,update: function(shader) {
		this.inputCount = 0;
		this.overrideIntCount = 0;
		this.overrideFloatCount = 0;
		this.overrideBoolCount = 0;
		this.paramBoolCount = 0;
		this.paramCount = 0;
		this.paramDataLength = 0;
		this.paramFloatCount = 0;
		this.paramIntCount = 0;
		this.shader = null;
		if(shader == null) {
			return;
		}
		shader.__init();
		this.inputCount = shader.__inputBitmapData.length;
		var input;
		var _g = 0;
		var _g1 = this.inputCount;
		while(_g < _g1) {
			var i = _g++;
			input = shader.__inputBitmapData[i];
			this.inputs[i] = input.input;
			this.inputFilter[i] = input.filter;
			this.inputMipFilter[i] = input.mipFilter;
			this.inputRefs[i] = input;
			this.inputWrap[i] = input.wrap;
		}
		var boolCount = shader.__paramBool.length;
		var floatCount = shader.__paramFloat.length;
		var intCount = shader.__paramInt.length;
		this.paramCount = boolCount + floatCount + intCount;
		this.paramBoolCount = boolCount;
		this.paramFloatCount = floatCount;
		this.paramIntCount = intCount;
		var length = 0;
		var p = 0;
		var param;
		var _g = 0;
		var _g1 = boolCount;
		while(_g < _g1) {
			var i = _g++;
			param = shader.__paramBool[i];
			this.paramPositions[p] = this.paramDataLength;
			length = param.value != null ? param.value.length : 0;
			this.paramLengths[p] = length;
			this.paramDataLength += length;
			this.paramTypes[p] = 0;
			this.paramRefs_Bool[i] = param;
			++p;
		}
		var param;
		var _g = 0;
		var _g1 = floatCount;
		while(_g < _g1) {
			var i = _g++;
			param = shader.__paramFloat[i];
			this.paramPositions[p] = this.paramDataLength;
			length = param.value != null ? param.value.length : 0;
			this.paramLengths[p] = length;
			this.paramDataLength += length;
			this.paramTypes[p] = 1;
			this.paramRefs_Float[i] = param;
			++p;
		}
		var param;
		var _g = 0;
		var _g1 = intCount;
		while(_g < _g1) {
			var i = _g++;
			param = shader.__paramInt[i];
			this.paramPositions[p] = this.paramDataLength;
			length = param.value != null ? param.value.length : 0;
			this.paramLengths[p] = length;
			this.paramDataLength += length;
			this.paramTypes[p] = 2;
			this.paramRefs_Int[i] = param;
			++p;
		}
		if(this.paramDataLength > 0) {
			if(this.paramData == null) {
				var elements = this.paramDataLength;
				var array = null;
				var vector = null;
				var view = null;
				var buffer = null;
				var len = null;
				var this1;
				if(elements != null) {
					this1 = new Float32Array(elements);
				} else if(array != null) {
					this1 = new Float32Array(array);
				} else if(vector != null) {
					this1 = new Float32Array(vector.__array);
				} else if(view != null) {
					this1 = new Float32Array(view);
				} else if(buffer != null) {
					if(len == null) {
						this1 = new Float32Array(buffer,0);
					} else {
						this1 = new Float32Array(buffer,0,len);
					}
				} else {
					this1 = null;
				}
				this.paramData = this1;
			} else if(this.paramDataLength > this.paramData.length) {
				var elements = this.paramDataLength;
				var array = null;
				var vector = null;
				var view = null;
				var buffer = null;
				var len = null;
				var this1;
				if(elements != null) {
					this1 = new Float32Array(elements);
				} else if(array != null) {
					this1 = new Float32Array(array);
				} else if(vector != null) {
					this1 = new Float32Array(vector.__array);
				} else if(view != null) {
					this1 = new Float32Array(view);
				} else if(buffer != null) {
					if(len == null) {
						this1 = new Float32Array(buffer,0);
					} else {
						this1 = new Float32Array(buffer,0,len);
					}
				} else {
					this1 = null;
				}
				var data = this1;
				data.set(this.paramData);
				this.paramData = data;
			}
		}
		var boolIndex = 0;
		var floatIndex = 0;
		var intIndex = 0;
		var paramPosition = 0;
		var boolParam;
		var floatParam;
		var intParam;
		var length;
		var _g = 0;
		var _g1 = this.paramCount;
		while(_g < _g1) {
			var i = _g++;
			length = this.paramLengths[i];
			if(i < boolCount) {
				boolParam = this.paramRefs_Bool[boolIndex];
				++boolIndex;
				var _g2 = 0;
				var _g3 = length;
				while(_g2 < _g3) {
					var j = _g2++;
					this.paramData[paramPosition] = boolParam.value[j] ? 1 : 0;
					++paramPosition;
				}
			} else if(i < boolCount + floatCount) {
				floatParam = this.paramRefs_Float[floatIndex];
				++floatIndex;
				var _g4 = 0;
				var _g5 = length;
				while(_g4 < _g5) {
					var j1 = _g4++;
					this.paramData[paramPosition] = floatParam.value[j1];
					++paramPosition;
				}
			} else {
				intParam = this.paramRefs_Int[intIndex];
				++intIndex;
				var _g6 = 0;
				var _g7 = length;
				while(_g6 < _g7) {
					var j2 = _g6++;
					this.paramData[paramPosition] = intParam.value[j2];
					++paramPosition;
				}
			}
		}
		this.shader = shader;
	}
	,__class__: openfl__$internal_renderer_ShaderBuffer
};
var openfl__$internal_renderer_cairo_CairoBitmap = function() { };
$hxClasses["openfl._internal.renderer.cairo.CairoBitmap"] = openfl__$internal_renderer_cairo_CairoBitmap;
openfl__$internal_renderer_cairo_CairoBitmap.__name__ = "openfl._internal.renderer.cairo.CairoBitmap";
openfl__$internal_renderer_cairo_CairoBitmap.render = function(bitmap,renderer) {
	if(!bitmap.__renderable) {
		return;
	}
	var alpha = renderer.__getAlpha(bitmap.__worldAlpha);
	if(alpha > 0 && bitmap.__bitmapData != null && bitmap.__bitmapData.__isValid) {
		var cairo = renderer.cairo;
		renderer.__setBlendMode(bitmap.__worldBlendMode);
		renderer.__pushMaskObject(bitmap);
		renderer.applyMatrix(bitmap.__renderTransform,cairo);
		var surface = bitmap.__bitmapData.getSurface();
		if(surface != null) {
			var pattern = lime_graphics_cairo_CairoPattern.createForSurface(surface);
			lime_graphics_cairo_CairoPattern.set_filter(pattern,renderer.__allowSmoothing && bitmap.smoothing ? 1 : 3);
			cairo.set_source(pattern);
			if(alpha == 1) {
				cairo.paint();
			} else {
				cairo.paintWithAlpha(alpha);
			}
		}
		renderer.__popMaskObject(bitmap);
		renderer.__setBlendMode(10);
	}
};
var openfl__$internal_renderer_cairo_CairoDisplayObject = function() { };
$hxClasses["openfl._internal.renderer.cairo.CairoDisplayObject"] = openfl__$internal_renderer_cairo_CairoDisplayObject;
openfl__$internal_renderer_cairo_CairoDisplayObject.__name__ = "openfl._internal.renderer.cairo.CairoDisplayObject";
openfl__$internal_renderer_cairo_CairoDisplayObject.render = function(displayObject,renderer) {
};
var openfl__$internal_renderer_cairo_CairoGraphics = function() { };
$hxClasses["openfl._internal.renderer.cairo.CairoGraphics"] = openfl__$internal_renderer_cairo_CairoGraphics;
openfl__$internal_renderer_cairo_CairoGraphics.__name__ = "openfl._internal.renderer.cairo.CairoGraphics";
openfl__$internal_renderer_cairo_CairoGraphics.hitTest = function(graphics,x,y) {
	return false;
};
openfl__$internal_renderer_cairo_CairoGraphics.render = function(graphics,renderer) {
};
openfl__$internal_renderer_cairo_CairoGraphics.renderMask = function(graphics,renderer) {
};
var openfl__$internal_renderer_cairo_CairoTextField = function() { };
$hxClasses["openfl._internal.renderer.cairo.CairoTextField"] = openfl__$internal_renderer_cairo_CairoTextField;
openfl__$internal_renderer_cairo_CairoTextField.__name__ = "openfl._internal.renderer.cairo.CairoTextField";
openfl__$internal_renderer_cairo_CairoTextField.render = function(textField,renderer,transform) {
};
var openfl__$internal_renderer_cairo_CairoTilemap = function() { };
$hxClasses["openfl._internal.renderer.cairo.CairoTilemap"] = openfl__$internal_renderer_cairo_CairoTilemap;
openfl__$internal_renderer_cairo_CairoTilemap.__name__ = "openfl._internal.renderer.cairo.CairoTilemap";
openfl__$internal_renderer_cairo_CairoTilemap.render = function(tilemap,renderer) {
	if(!tilemap.__renderable || tilemap.__group.__tiles.length == 0) {
		return;
	}
	var alpha = renderer.__getAlpha(tilemap.__worldAlpha);
	if(alpha <= 0) {
		return;
	}
	renderer.__setBlendMode(tilemap.__worldBlendMode);
	renderer.__pushMaskObject(tilemap);
	var rect = openfl_geom_Rectangle.__pool.get();
	rect.setTo(0,0,tilemap.__width,tilemap.__height);
	renderer.__pushMaskRect(rect,tilemap.__renderTransform);
	openfl__$internal_renderer_cairo_CairoTilemap.renderTileContainer(tilemap.__group,renderer,tilemap.__renderTransform,tilemap.__tileset,renderer.__allowSmoothing && tilemap.smoothing,tilemap.tileAlphaEnabled,alpha,tilemap.tileBlendModeEnabled,tilemap.__worldBlendMode,null,null,null,rect,new lime_math_Matrix3());
	renderer.__popMaskRect();
	renderer.__popMaskObject(tilemap);
	openfl_geom_Rectangle.__pool.release(rect);
};
openfl__$internal_renderer_cairo_CairoTilemap.renderTileContainer = function(group,renderer,parentTransform,defaultTileset,smooth,alphaEnabled,worldAlpha,blendModeEnabled,defaultBlendMode,cacheBitmapData,surface,pattern,rect,matrix) {
	var cairo = renderer.cairo;
	var tileTransform = openfl_geom_Matrix.__pool.get();
	var tiles = group.__tiles;
	var tile;
	var tileset;
	var alpha;
	var visible;
	var blendMode = null;
	var id;
	var tileData;
	var tileRect;
	var bitmapData;
	var _g = 0;
	while(_g < tiles.length) {
		var tile = tiles[_g];
		++_g;
		tileTransform.setTo(1,0,0,1,-tile.get_originX(),-tile.get_originY());
		tileTransform.concat(tile.get_matrix());
		tileTransform.concat(parentTransform);
		tileset = tile.get_tileset() != null ? tile.get_tileset() : defaultTileset;
		alpha = tile.get_alpha() * worldAlpha;
		visible = tile.get_visible();
		if(!visible || alpha <= 0) {
			continue;
		}
		if(!alphaEnabled) {
			alpha = 1;
		}
		if(blendModeEnabled) {
			blendMode = tile.__blendMode != null ? tile.__blendMode : defaultBlendMode;
		}
		if(tile.__length > 0) {
			openfl__$internal_renderer_cairo_CairoTilemap.renderTileContainer(tile,renderer,tileTransform,tileset,smooth,alphaEnabled,alpha,blendModeEnabled,blendMode,cacheBitmapData,surface,pattern,rect,matrix);
		} else {
			if(tileset == null) {
				continue;
			}
			id = tile.get_id();
			if(id == -1) {
				tileRect = tile.__rect;
				if(tileRect == null || tileRect.width <= 0 || tileRect.height <= 0) {
					continue;
				}
			} else {
				tileData = tileset.__data[id];
				if(tileData == null) {
					continue;
				}
				rect.setTo(tileData.x,tileData.y,tileData.width,tileData.height);
				tileRect = rect;
			}
			bitmapData = tileset.__bitmapData;
			if(bitmapData == null) {
				continue;
			}
			if(bitmapData != cacheBitmapData) {
				surface = bitmapData.getSurface();
				pattern = lime_graphics_cairo_CairoPattern.createForSurface(surface);
				lime_graphics_cairo_CairoPattern.set_filter(pattern,smooth ? 1 : 3);
				cairo.set_source(pattern);
				cacheBitmapData = bitmapData;
			}
			if(blendModeEnabled) {
				renderer.__setBlendMode(blendMode);
			}
			renderer.applyMatrix(tileTransform,cairo);
			matrix.tx = tileRect.x;
			matrix.ty = tileRect.y;
			lime_graphics_cairo_CairoPattern.set_matrix(pattern,matrix);
			cairo.set_source(pattern);
			cairo.save();
			cairo.newPath();
			cairo.rectangle(0,0,tileRect.width,tileRect.height);
			cairo.clip();
			if(alpha == 1) {
				cairo.paint();
			} else {
				cairo.paintWithAlpha(alpha);
			}
			cairo.restore();
		}
	}
	openfl_geom_Matrix.__pool.release(tileTransform);
};
var openfl__$internal_renderer_canvas_CanvasBitmap = function() { };
$hxClasses["openfl._internal.renderer.canvas.CanvasBitmap"] = openfl__$internal_renderer_canvas_CanvasBitmap;
openfl__$internal_renderer_canvas_CanvasBitmap.__name__ = "openfl._internal.renderer.canvas.CanvasBitmap";
openfl__$internal_renderer_canvas_CanvasBitmap.render = function(bitmap,renderer) {
	if(!bitmap.__renderable) {
		return;
	}
	var alpha = renderer.__getAlpha(bitmap.__worldAlpha);
	if(alpha > 0 && bitmap.__bitmapData != null && bitmap.__bitmapData.__isValid && bitmap.__bitmapData.readable) {
		var context = renderer.context;
		renderer.__setBlendMode(bitmap.__worldBlendMode);
		renderer.__pushMaskObject(bitmap,false);
		lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(bitmap.__bitmapData.image);
		context.globalAlpha = alpha;
		var scrollRect = bitmap.__scrollRect;
		renderer.setTransform(bitmap.__renderTransform,context);
		if(!renderer.__allowSmoothing || !bitmap.smoothing) {
			context.imageSmoothingEnabled = false;
		}
		if(scrollRect == null) {
			context.drawImage(bitmap.__bitmapData.image.get_src(),0,0,bitmap.__bitmapData.image.width,bitmap.__bitmapData.image.height);
		} else {
			context.drawImage(bitmap.__bitmapData.image.get_src(),scrollRect.x,scrollRect.y,scrollRect.width,scrollRect.height);
		}
		if(!renderer.__allowSmoothing || !bitmap.smoothing) {
			context.imageSmoothingEnabled = true;
		}
		renderer.__popMaskObject(bitmap,false);
	}
};
var openfl__$internal_renderer_canvas_CanvasDisplayObject = function() { };
$hxClasses["openfl._internal.renderer.canvas.CanvasDisplayObject"] = openfl__$internal_renderer_canvas_CanvasDisplayObject;
openfl__$internal_renderer_canvas_CanvasDisplayObject.__name__ = "openfl._internal.renderer.canvas.CanvasDisplayObject";
openfl__$internal_renderer_canvas_CanvasDisplayObject.render = function(displayObject,renderer) {
	if(displayObject.opaqueBackground == null && displayObject.__graphics == null) {
		return;
	}
	if(!displayObject.__renderable) {
		return;
	}
	var alpha = renderer.__getAlpha(displayObject.__worldAlpha);
	if(alpha <= 0) {
		return;
	}
	if(displayObject.opaqueBackground != null && !displayObject.__isCacheBitmapRender && displayObject.get_width() > 0 && displayObject.get_height() > 0) {
		renderer.__setBlendMode(displayObject.__worldBlendMode);
		renderer.__pushMaskObject(displayObject);
		var context = renderer.context;
		renderer.setTransform(displayObject.__renderTransform,context);
		var color = displayObject.opaqueBackground;
		context.fillStyle = "rgb(" + (color >>> 16 & 255) + "," + (color >>> 8 & 255) + "," + (color & 255) + ")";
		context.fillRect(0,0,displayObject.get_width(),displayObject.get_height());
		renderer.__popMaskObject(displayObject);
	}
	if(displayObject.__graphics != null) {
		if(displayObject.__renderable) {
			var alpha = renderer.__getAlpha(displayObject.__worldAlpha);
			if(!(alpha <= 0)) {
				var graphics = displayObject.__graphics;
				if(graphics != null) {
					openfl__$internal_renderer_canvas_CanvasGraphics.render(graphics,renderer);
					var width = graphics.__width;
					var height = graphics.__height;
					var canvas = graphics.__canvas;
					if(canvas != null && graphics.__visible && width >= 1 && height >= 1) {
						var transform = graphics.__worldTransform;
						var context = renderer.context;
						var scrollRect = displayObject.__scrollRect;
						var scale9Grid = displayObject.__worldScale9Grid;
						if(scrollRect == null || scrollRect.width > 0 && scrollRect.height > 0) {
							renderer.__setBlendMode(displayObject.__worldBlendMode);
							renderer.__pushMaskObject(displayObject);
							context.globalAlpha = alpha;
							if(scale9Grid != null && transform.b == 0 && transform.c == 0) {
								context.setTransform(1,0,0,1,transform.tx,transform.ty);
								var bounds = graphics.__bounds;
								var scaleX = graphics.__renderTransform.a;
								var scaleY = graphics.__renderTransform.d;
								var renderScaleX = transform.a;
								var renderScaleY = transform.d;
								var left = Math.max(1,Math.round(scale9Grid.x * scaleX));
								var top = Math.round(scale9Grid.y * scaleY);
								var right = Math.max(1,Math.round((bounds.get_right() - scale9Grid.get_right()) * scaleX));
								var bottom = Math.round((bounds.get_bottom() - scale9Grid.get_bottom()) * scaleY);
								var centerWidth = Math.round(scale9Grid.width * scaleX);
								var centerHeight = Math.round(scale9Grid.height * scaleY);
								var renderLeft = Math.round(scale9Grid.x * renderScaleX);
								var renderTop = Math.round(scale9Grid.y * renderScaleY);
								var renderRight = Math.round((bounds.get_right() - scale9Grid.get_right()) * renderScaleX);
								var renderBottom = Math.round((bounds.get_bottom() - scale9Grid.get_bottom()) * renderScaleY);
								var renderCenterWidth = Math.round(width * renderScaleX) - renderLeft - renderRight;
								var renderCenterHeight = Math.round(height * renderScaleY) - renderTop - renderBottom;
								renderer.applySmoothing(context,false);
								if(centerWidth != 0 && centerHeight != 0) {
									context.drawImage(canvas,0,0,left,top,0,0,renderLeft,renderTop);
									context.drawImage(canvas,left,0,centerWidth,top,renderLeft,0,renderCenterWidth,renderTop);
									context.drawImage(canvas,left + centerWidth,0,right,top,renderLeft + renderCenterWidth,0,renderRight,renderTop);
									context.drawImage(canvas,0,top,left,centerHeight,0,renderTop,renderLeft,renderCenterHeight);
									context.drawImage(canvas,left,top,centerWidth,centerHeight,renderLeft,renderTop,renderCenterWidth,renderCenterHeight);
									context.drawImage(canvas,left + centerWidth,top,right,centerHeight,renderLeft + renderCenterWidth,renderTop,renderRight,renderCenterHeight);
									context.drawImage(canvas,0,top + centerHeight,left,bottom,0,renderTop + renderCenterHeight,renderLeft,renderBottom);
									context.drawImage(canvas,left,top + centerHeight,centerWidth,bottom,renderLeft,renderTop + renderCenterHeight,renderCenterWidth,renderBottom);
									context.drawImage(canvas,left + centerWidth,top + centerHeight,right,bottom,renderLeft + renderCenterWidth,renderTop + renderCenterHeight,renderRight,renderBottom);
								} else if(centerWidth == 0 && centerHeight != 0) {
									var renderWidth = renderLeft + renderCenterWidth + renderRight;
									context.drawImage(canvas,0,0,width,top,0,0,renderWidth,renderTop);
									context.drawImage(canvas,0,top,width,centerHeight,0,renderTop,renderWidth,renderCenterHeight);
									context.drawImage(canvas,0,top + centerHeight,width,bottom,0,renderTop + renderCenterHeight,renderWidth,renderBottom);
								} else if(centerHeight == 0 && centerWidth != 0) {
									var renderHeight = renderTop + renderCenterHeight + renderBottom;
									context.drawImage(canvas,0,0,left,height,0,0,renderLeft,renderHeight);
									context.drawImage(canvas,left,0,centerWidth,height,renderLeft,0,renderCenterWidth,renderHeight);
									context.drawImage(canvas,left + centerWidth,0,right,height,renderLeft + renderCenterWidth,0,renderRight,renderHeight);
								}
							} else {
								renderer.setTransform(transform,context);
								if(renderer.__isDOM) {
									var reverseScale = 1 / renderer.pixelRatio;
									context.scale(reverseScale,reverseScale);
								}
								context.drawImage(canvas,0,0,width,height);
							}
							renderer.__popMaskObject(displayObject);
						}
					}
				}
			}
		}
	}
};
var openfl__$internal_renderer_canvas_CanvasGraphics = function() { };
$hxClasses["openfl._internal.renderer.canvas.CanvasGraphics"] = openfl__$internal_renderer_canvas_CanvasGraphics;
openfl__$internal_renderer_canvas_CanvasGraphics.__name__ = "openfl._internal.renderer.canvas.CanvasGraphics";
openfl__$internal_renderer_canvas_CanvasGraphics.closePath = function(strokeBefore) {
	if(strokeBefore == null) {
		strokeBefore = false;
	}
	if(openfl__$internal_renderer_canvas_CanvasGraphics.context.strokeStyle == null) {
		return;
	}
	if(!strokeBefore) {
		openfl__$internal_renderer_canvas_CanvasGraphics.context.closePath();
	}
	openfl__$internal_renderer_canvas_CanvasGraphics.context.stroke();
	if(strokeBefore) {
		openfl__$internal_renderer_canvas_CanvasGraphics.context.closePath();
	}
	openfl__$internal_renderer_canvas_CanvasGraphics.context.beginPath();
};
openfl__$internal_renderer_canvas_CanvasGraphics.createBitmapFill = function(bitmap,bitmapRepeat,smooth) {
	lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(bitmap.image);
	openfl__$internal_renderer_canvas_CanvasGraphics.setSmoothing(smooth);
	return openfl__$internal_renderer_canvas_CanvasGraphics.context.createPattern(bitmap.image.get_src(),bitmapRepeat ? "repeat" : "no-repeat");
};
openfl__$internal_renderer_canvas_CanvasGraphics.createGradientPattern = function(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) {
	var gradientFill = null;
	var point = null;
	var point2 = null;
	var releaseMatrix = false;
	if(matrix == null) {
		matrix = openfl_geom_Matrix.__pool.get();
		releaseMatrix = true;
	}
	switch(type) {
	case 0:
		point = openfl_geom_Point.__pool.get();
		point.setTo(-819.2,0);
		var px = point.x;
		var py = point.y;
		point.x = px * matrix.a + py * matrix.c + matrix.tx;
		point.y = px * matrix.b + py * matrix.d + matrix.ty;
		point2 = openfl_geom_Point.__pool.get();
		point2.setTo(819.2,0);
		var px = point2.x;
		var py = point2.y;
		point2.x = px * matrix.a + py * matrix.c + matrix.tx;
		point2.y = px * matrix.b + py * matrix.d + matrix.ty;
		gradientFill = openfl__$internal_renderer_canvas_CanvasGraphics.context.createLinearGradient(point.x,point.y,point2.x,point2.y);
		break;
	case 1:
		point = openfl_geom_Point.__pool.get();
		point.setTo(1638.4,0);
		var px = point.x;
		var py = point.y;
		point.x = px * matrix.a + py * matrix.c + matrix.tx;
		point.y = px * matrix.b + py * matrix.d + matrix.ty;
		gradientFill = openfl__$internal_renderer_canvas_CanvasGraphics.context.createRadialGradient(matrix.tx,matrix.ty,0,matrix.tx,matrix.ty,Math.abs((point.x - matrix.tx) / 2));
		break;
	}
	var rgb;
	var alpha;
	var r;
	var g;
	var b;
	var ratio;
	var _g = 0;
	var _g1 = colors.length;
	while(_g < _g1) {
		var i = _g++;
		rgb = colors[i];
		alpha = alphas[i];
		r = (rgb & 16711680) >>> 16;
		g = (rgb & 65280) >>> 8;
		b = rgb & 255;
		ratio = ratios[i] / 255;
		if(ratio < 0) {
			ratio = 0;
		}
		if(ratio > 1) {
			ratio = 1;
		}
		gradientFill.addColorStop(ratio,"rgba(" + r + ", " + g + ", " + b + ", " + alpha + ")");
	}
	if(point != null) {
		openfl_geom_Point.__pool.release(point);
	}
	if(point2 != null) {
		openfl_geom_Point.__pool.release(point2);
	}
	if(releaseMatrix) {
		openfl_geom_Matrix.__pool.release(matrix);
	}
	return gradientFill;
};
openfl__$internal_renderer_canvas_CanvasGraphics.createTempPatternCanvas = function(bitmap,repeat,width,height) {
	var canvas = window.document.createElement("canvas");
	var context = canvas.getContext("2d");
	canvas.width = width;
	canvas.height = height;
	var tmp = bitmap.image.get_src();
	context.fillStyle = context.createPattern(tmp,repeat ? "repeat" : "no-repeat");
	context.beginPath();
	context.moveTo(0,0);
	context.lineTo(0,height);
	context.lineTo(width,height);
	context.lineTo(width,0);
	context.lineTo(0,0);
	context.closePath();
	if(!openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting) {
		context.fill(openfl__$internal_renderer_canvas_CanvasGraphics.windingRule);
	}
	return canvas;
};
openfl__$internal_renderer_canvas_CanvasGraphics.drawRoundRect = function(x,y,width,height,ellipseWidth,ellipseHeight) {
	if(ellipseHeight == null) {
		ellipseHeight = ellipseWidth;
	}
	ellipseWidth *= 0.5;
	ellipseHeight *= 0.5;
	if(ellipseWidth > width / 2) {
		ellipseWidth = width / 2;
	}
	if(ellipseHeight > height / 2) {
		ellipseHeight = height / 2;
	}
	var xe = x + width;
	var ye = y + height;
	var cx1 = -ellipseWidth + ellipseWidth * 0.70710678118654752440084436210485;
	var cx2 = -ellipseWidth + ellipseWidth * 0.4142135623730950488016887242097;
	var cy1 = -ellipseHeight + ellipseHeight * 0.70710678118654752440084436210485;
	var cy2 = -ellipseHeight + ellipseHeight * 0.4142135623730950488016887242097;
	openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(xe,ye - ellipseHeight);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(xe,ye + cy2,xe + cx1,ye + cy1);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(xe + cx2,ye,xe - ellipseWidth,ye);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(x + ellipseWidth,ye);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(x - cx2,ye,x - cx1,ye + cy1);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(x,ye + cy2,x,ye - ellipseHeight);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(x,y + ellipseHeight);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(x,y - cy2,x - cx1,y - cy1);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(x - cx2,y,x + ellipseWidth,y);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(xe - ellipseWidth,y);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(xe + cx2,y,xe + cx1,y - cy1);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(xe,y - cy2,xe,y + ellipseHeight);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(xe,ye - ellipseHeight);
};
openfl__$internal_renderer_canvas_CanvasGraphics.endFill = function() {
	openfl__$internal_renderer_canvas_CanvasGraphics.context.beginPath();
	openfl__$internal_renderer_canvas_CanvasGraphics.playCommands(openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands,false);
	openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.clear();
};
openfl__$internal_renderer_canvas_CanvasGraphics.endStroke = function() {
	openfl__$internal_renderer_canvas_CanvasGraphics.context.beginPath();
	openfl__$internal_renderer_canvas_CanvasGraphics.playCommands(openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands,true);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.closePath();
	openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.clear();
};
openfl__$internal_renderer_canvas_CanvasGraphics.hitTest = function(graphics,x,y) {
	openfl__$internal_renderer_canvas_CanvasGraphics.bounds = graphics.__bounds;
	openfl__$internal_renderer_canvas_CanvasGraphics.graphics = graphics;
	if(graphics.__commands.get_length() == 0 || openfl__$internal_renderer_canvas_CanvasGraphics.bounds == null || openfl__$internal_renderer_canvas_CanvasGraphics.bounds.width <= 0 || openfl__$internal_renderer_canvas_CanvasGraphics.bounds.height <= 0) {
		return false;
	} else {
		openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting = true;
		var transform = graphics.__renderTransform;
		var px = x * transform.a + y * transform.c + transform.tx;
		var py = x * transform.b + y * transform.d + transform.ty;
		x = px;
		y = py;
		x -= openfl__$internal_renderer_canvas_CanvasGraphics.bounds.x * transform.a + openfl__$internal_renderer_canvas_CanvasGraphics.bounds.y * transform.c + transform.tx;
		y -= openfl__$internal_renderer_canvas_CanvasGraphics.bounds.x * transform.b + openfl__$internal_renderer_canvas_CanvasGraphics.bounds.y * transform.d + transform.ty;
		var cacheCanvas = graphics.__canvas;
		var cacheContext = graphics.__context;
		graphics.__canvas = openfl__$internal_renderer_canvas_CanvasGraphics.hitTestCanvas;
		graphics.__context = openfl__$internal_renderer_canvas_CanvasGraphics.hitTestContext;
		openfl__$internal_renderer_canvas_CanvasGraphics.context = graphics.__context;
		openfl__$internal_renderer_canvas_CanvasGraphics.context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx,transform.ty);
		openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.clear();
		openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.clear();
		openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = false;
		openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke = false;
		openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill = null;
		openfl__$internal_renderer_canvas_CanvasGraphics.bitmapRepeat = false;
		openfl__$internal_renderer_canvas_CanvasGraphics.windingRule = "evenodd";
		var data = new openfl__$internal_renderer_DrawCommandReader(graphics.__commands);
		var _g = 0;
		var _g1 = graphics.__commands.types;
		while(_g < _g1.length) {
			var type = _g1[_g];
			++_g;
			switch(type._hx_index) {
			case 0:case 1:case 2:case 3:
				openfl__$internal_renderer_canvas_CanvasGraphics.endFill();
				if(openfl__$internal_renderer_canvas_CanvasGraphics.hasFill && openfl__$internal_renderer_canvas_CanvasGraphics.context.isPointInPath(x,y,openfl__$internal_renderer_canvas_CanvasGraphics.windingRule)) {
					data.destroy();
					graphics.__canvas = cacheCanvas;
					graphics.__context = cacheContext;
					return true;
				}
				openfl__$internal_renderer_canvas_CanvasGraphics.endStroke();
				if(openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke && openfl__$internal_renderer_canvas_CanvasGraphics.context.isPointInStroke(x,y)) {
					data.destroy();
					graphics.__canvas = cacheCanvas;
					graphics.__context = cacheContext;
					return true;
				}
				if(type == openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL) {
					switch(data.prev._hx_index) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.oPos += 1;
						break;
					case 4:
						data.fPos += 6;
						break;
					case 5:
						data.fPos += 4;
						break;
					case 6:
						data.fPos += 3;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.oPos += 3;
						break;
					case 9:
						data.fPos += 4;
						break;
					case 10:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 12:
						data.oPos += 4;
						break;
					case 13:
						break;
					case 14:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 15:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 16:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 17:
						data.fPos += 2;
						break;
					case 18:
						data.fPos += 2;
						break;
					case 19:
						data.oPos += 1;
						break;
					case 20:
						data.oPos += 1;
						break;
					case 21:case 22:
						break;
					default:
					}
					data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL;
					var this1 = data;
					var c = this1;
					openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.beginBitmapFill(c.buffer.o[c.oPos],c.buffer.o[c.oPos + 1],c.buffer.b[c.bPos],c.buffer.b[c.bPos + 1]);
					openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.beginBitmapFill(c.buffer.o[c.oPos],c.buffer.o[c.oPos + 1],c.buffer.b[c.bPos],c.buffer.b[c.bPos + 1]);
				} else if(type == openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL) {
					switch(data.prev._hx_index) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.oPos += 1;
						break;
					case 4:
						data.fPos += 6;
						break;
					case 5:
						data.fPos += 4;
						break;
					case 6:
						data.fPos += 3;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.oPos += 3;
						break;
					case 9:
						data.fPos += 4;
						break;
					case 10:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 12:
						data.oPos += 4;
						break;
					case 13:
						break;
					case 14:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 15:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 16:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 17:
						data.fPos += 2;
						break;
					case 18:
						data.fPos += 2;
						break;
					case 19:
						data.oPos += 1;
						break;
					case 20:
						data.oPos += 1;
						break;
					case 21:case 22:
						break;
					default:
					}
					data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL;
					var this2 = data;
					var c1 = this2;
					openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.beginGradientFill(c1.buffer.o[c1.oPos],c1.buffer.ii[c1.iiPos],c1.buffer.ff[c1.ffPos],c1.buffer.ii[c1.iiPos + 1],c1.buffer.o[c1.oPos + 1],c1.buffer.o[c1.oPos + 2],c1.buffer.o[c1.oPos + 3],c1.buffer.f[c1.fPos]);
					openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.beginGradientFill(c1.buffer.o[c1.oPos],c1.buffer.ii[c1.iiPos],c1.buffer.ff[c1.ffPos],c1.buffer.ii[c1.iiPos + 1],c1.buffer.o[c1.oPos + 1],c1.buffer.o[c1.oPos + 2],c1.buffer.o[c1.oPos + 3],c1.buffer.f[c1.fPos]);
				} else if(type == openfl__$internal_renderer_DrawCommandType.BEGIN_SHADER_FILL) {
					switch(data.prev._hx_index) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.oPos += 1;
						break;
					case 4:
						data.fPos += 6;
						break;
					case 5:
						data.fPos += 4;
						break;
					case 6:
						data.fPos += 3;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.oPos += 3;
						break;
					case 9:
						data.fPos += 4;
						break;
					case 10:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 12:
						data.oPos += 4;
						break;
					case 13:
						break;
					case 14:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 15:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 16:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 17:
						data.fPos += 2;
						break;
					case 18:
						data.fPos += 2;
						break;
					case 19:
						data.oPos += 1;
						break;
					case 20:
						data.oPos += 1;
						break;
					case 21:case 22:
						break;
					default:
					}
					data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_SHADER_FILL;
					var this3 = data;
					var c2 = this3;
					openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.beginShaderFill(c2.buffer.o[c2.oPos]);
					openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.beginShaderFill(c2.buffer.o[c2.oPos]);
				} else {
					switch(data.prev._hx_index) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.oPos += 1;
						break;
					case 4:
						data.fPos += 6;
						break;
					case 5:
						data.fPos += 4;
						break;
					case 6:
						data.fPos += 3;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.oPos += 3;
						break;
					case 9:
						data.fPos += 4;
						break;
					case 10:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 12:
						data.oPos += 4;
						break;
					case 13:
						break;
					case 14:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 15:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 16:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 17:
						data.fPos += 2;
						break;
					case 18:
						data.fPos += 2;
						break;
					case 19:
						data.oPos += 1;
						break;
					case 20:
						data.oPos += 1;
						break;
					case 21:case 22:
						break;
					default:
					}
					data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_FILL;
					var this4 = data;
					var c3 = this4;
					openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.beginFill(c3.buffer.i[c3.iPos],1);
					openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.beginFill(c3.buffer.i[c3.iPos],1);
				}
				break;
			case 4:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO;
				var this5 = data;
				var c4 = this5;
				openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.cubicCurveTo(c4.buffer.f[c4.fPos],c4.buffer.f[c4.fPos + 1],c4.buffer.f[c4.fPos + 2],c4.buffer.f[c4.fPos + 3],c4.buffer.f[c4.fPos + 4],c4.buffer.f[c4.fPos + 5]);
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.cubicCurveTo(c4.buffer.f[c4.fPos],c4.buffer.f[c4.fPos + 1],c4.buffer.f[c4.fPos + 2],c4.buffer.f[c4.fPos + 3],c4.buffer.f[c4.fPos + 4],c4.buffer.f[c4.fPos + 5]);
				break;
			case 5:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.CURVE_TO;
				var this6 = data;
				var c5 = this6;
				openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.curveTo(c5.buffer.f[c5.fPos],c5.buffer.f[c5.fPos + 1],c5.buffer.f[c5.fPos + 2],c5.buffer.f[c5.fPos + 3]);
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.curveTo(c5.buffer.f[c5.fPos],c5.buffer.f[c5.fPos + 1],c5.buffer.f[c5.fPos + 2],c5.buffer.f[c5.fPos + 3]);
				break;
			case 6:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE;
				var this7 = data;
				var c6 = this7;
				openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawCircle(c6.buffer.f[c6.fPos],c6.buffer.f[c6.fPos + 1],c6.buffer.f[c6.fPos + 2]);
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.drawCircle(c6.buffer.f[c6.fPos],c6.buffer.f[c6.fPos + 1],c6.buffer.f[c6.fPos + 2]);
				break;
			case 7:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE;
				var this8 = data;
				var c7 = this8;
				openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawEllipse(c7.buffer.f[c7.fPos],c7.buffer.f[c7.fPos + 1],c7.buffer.f[c7.fPos + 2],c7.buffer.f[c7.fPos + 3]);
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.drawEllipse(c7.buffer.f[c7.fPos],c7.buffer.f[c7.fPos + 1],c7.buffer.f[c7.fPos + 2],c7.buffer.f[c7.fPos + 3]);
				break;
			case 9:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_RECT;
				var this9 = data;
				var c8 = this9;
				openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawRect(c8.buffer.f[c8.fPos],c8.buffer.f[c8.fPos + 1],c8.buffer.f[c8.fPos + 2],c8.buffer.f[c8.fPos + 3]);
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.drawRect(c8.buffer.f[c8.fPos],c8.buffer.f[c8.fPos + 1],c8.buffer.f[c8.fPos + 2],c8.buffer.f[c8.fPos + 3]);
				break;
			case 10:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT;
				var this10 = data;
				var c9 = this10;
				openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawRoundRect(c9.buffer.f[c9.fPos],c9.buffer.f[c9.fPos + 1],c9.buffer.f[c9.fPos + 2],c9.buffer.f[c9.fPos + 3],c9.buffer.f[c9.fPos + 4],c9.buffer.o[c9.oPos]);
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.drawRoundRect(c9.buffer.f[c9.fPos],c9.buffer.f[c9.fPos + 1],c9.buffer.f[c9.fPos + 2],c9.buffer.f[c9.fPos + 3],c9.buffer.f[c9.fPos + 4],c9.buffer.o[c9.oPos]);
				break;
			case 13:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.END_FILL;
				var this11 = data;
				openfl__$internal_renderer_canvas_CanvasGraphics.endFill();
				if(openfl__$internal_renderer_canvas_CanvasGraphics.hasFill && openfl__$internal_renderer_canvas_CanvasGraphics.context.isPointInPath(x,y,openfl__$internal_renderer_canvas_CanvasGraphics.windingRule)) {
					data.destroy();
					graphics.__canvas = cacheCanvas;
					graphics.__context = cacheContext;
					return true;
				}
				openfl__$internal_renderer_canvas_CanvasGraphics.endStroke();
				if(openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke && openfl__$internal_renderer_canvas_CanvasGraphics.context.isPointInStroke(x,y)) {
					data.destroy();
					graphics.__canvas = cacheCanvas;
					graphics.__context = cacheContext;
					return true;
				}
				openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = false;
				openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill = null;
				break;
			case 14:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_BITMAP_STYLE;
				var this12 = data;
				var c10 = this12;
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.lineBitmapStyle(c10.buffer.o[c10.oPos],c10.buffer.o[c10.oPos + 1],c10.buffer.b[c10.bPos],c10.buffer.b[c10.bPos + 1]);
				break;
			case 15:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_GRADIENT_STYLE;
				var this13 = data;
				var c11 = this13;
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.lineGradientStyle(c11.buffer.o[c11.oPos],c11.buffer.ii[c11.iiPos],c11.buffer.ff[c11.ffPos],c11.buffer.ii[c11.iiPos + 1],c11.buffer.o[c11.oPos + 1],c11.buffer.o[c11.oPos + 2],c11.buffer.o[c11.oPos + 3],c11.buffer.f[c11.fPos]);
				break;
			case 16:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_STYLE;
				var this14 = data;
				var c12 = this14;
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.lineStyle(c12.buffer.o[c12.oPos],c12.buffer.i[c12.iPos],1,c12.buffer.b[c12.bPos],c12.buffer.o[c12.oPos + 1],c12.buffer.o[c12.oPos + 2],c12.buffer.o[c12.oPos + 3],c12.buffer.f[c12.fPos + 1]);
				break;
			case 17:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_TO;
				var this15 = data;
				var c13 = this15;
				openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.lineTo(c13.buffer.f[c13.fPos],c13.buffer.f[c13.fPos + 1]);
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.lineTo(c13.buffer.f[c13.fPos],c13.buffer.f[c13.fPos + 1]);
				break;
			case 18:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.MOVE_TO;
				var this16 = data;
				var c14 = this16;
				openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.moveTo(c14.buffer.f[c14.fPos],c14.buffer.f[c14.fPos + 1]);
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.moveTo(c14.buffer.f[c14.fPos],c14.buffer.f[c14.fPos + 1]);
				break;
			case 21:
				openfl__$internal_renderer_canvas_CanvasGraphics.windingRule = "evenodd";
				break;
			case 22:
				openfl__$internal_renderer_canvas_CanvasGraphics.windingRule = "nonzero";
				break;
			default:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = type;
			}
		}
		var hitTest = false;
		if(openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.get_length() > 0) {
			openfl__$internal_renderer_canvas_CanvasGraphics.endFill();
		}
		if(openfl__$internal_renderer_canvas_CanvasGraphics.hasFill && openfl__$internal_renderer_canvas_CanvasGraphics.context.isPointInPath(x,y,openfl__$internal_renderer_canvas_CanvasGraphics.windingRule)) {
			hitTest = true;
		}
		if(openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.get_length() > 0) {
			openfl__$internal_renderer_canvas_CanvasGraphics.endStroke();
		}
		if(openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke && openfl__$internal_renderer_canvas_CanvasGraphics.context.isPointInStroke(x,y)) {
			hitTest = true;
		}
		data.destroy();
		graphics.__canvas = cacheCanvas;
		graphics.__context = cacheContext;
		return hitTest;
	}
};
openfl__$internal_renderer_canvas_CanvasGraphics.isCCW = function(x1,y1,x2,y2,x3,y3) {
	return (x2 - x1) * (y3 - y1) - (y2 - y1) * (x3 - x1) < 0;
};
openfl__$internal_renderer_canvas_CanvasGraphics.normalizeUVT = function(uvt,skipT) {
	if(skipT == null) {
		skipT = false;
	}
	var max = -Infinity;
	var tmp = -Infinity;
	var len = uvt.get_length();
	var _g = 1;
	var _g1 = len + 1;
	while(_g < _g1) {
		var t = _g++;
		if(skipT && t % 3 == 0) {
			continue;
		}
		tmp = uvt.get(t - 1);
		if(max < tmp) {
			max = tmp;
		}
	}
	if(!skipT) {
		return { max : max, uvt : uvt};
	}
	var result = openfl_Vector.toFloatVector(null);
	var _g = 1;
	var _g1 = len + 1;
	while(_g < _g1) {
		var t = _g++;
		if(skipT && t % 3 == 0) {
			continue;
		}
		result.push(uvt.get(t - 1));
	}
	return { max : max, uvt : result};
};
openfl__$internal_renderer_canvas_CanvasGraphics.playCommands = function(commands,stroke) {
	if(stroke == null) {
		stroke = false;
	}
	openfl__$internal_renderer_canvas_CanvasGraphics.bounds = openfl__$internal_renderer_canvas_CanvasGraphics.graphics.__bounds;
	var offsetX = openfl__$internal_renderer_canvas_CanvasGraphics.bounds.x;
	var offsetY = openfl__$internal_renderer_canvas_CanvasGraphics.bounds.y;
	var positionX = 0.0;
	var positionY = 0.0;
	var closeGap = false;
	var startX = 0.0;
	var startY = 0.0;
	var setStart = false;
	openfl__$internal_renderer_canvas_CanvasGraphics.windingRule = "evenodd";
	openfl__$internal_renderer_canvas_CanvasGraphics.setSmoothing(true);
	var hasPath = false;
	var data = new openfl__$internal_renderer_DrawCommandReader(commands);
	var x;
	var y;
	var width;
	var height;
	var kappa = .5522848;
	var ox;
	var oy;
	var xe;
	var ye;
	var xm;
	var ym;
	var r;
	var g;
	var b;
	var optimizationUsed;
	var canOptimizeMatrix;
	var st;
	var sr;
	var sb;
	var sl;
	var stl = null;
	var sbr = null;
	var _g = 0;
	var _g1 = commands.types;
	_hx_loop1: while(_g < _g1.length) {
		var type = _g1[_g];
		++_g;
		switch(type._hx_index) {
		case 0:
			switch(data.prev._hx_index) {
			case 0:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 1:
				data.iPos += 1;
				data.fPos += 1;
				break;
			case 2:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 3:
				data.oPos += 1;
				break;
			case 4:
				data.fPos += 6;
				break;
			case 5:
				data.fPos += 4;
				break;
			case 6:
				data.fPos += 3;
				break;
			case 7:
				data.fPos += 4;
				break;
			case 8:
				data.oPos += 3;
				break;
			case 9:
				data.fPos += 4;
				break;
			case 10:
				data.fPos += 5;
				data.oPos += 1;
				break;
			case 12:
				data.oPos += 4;
				break;
			case 13:
				break;
			case 14:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 15:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 16:
				data.oPos += 4;
				data.iPos += 1;
				data.fPos += 2;
				data.bPos += 1;
				break;
			case 17:
				data.fPos += 2;
				break;
			case 18:
				data.fPos += 2;
				break;
			case 19:
				data.oPos += 1;
				break;
			case 20:
				data.oPos += 1;
				break;
			case 21:case 22:
				break;
			default:
			}
			data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL;
			var this1 = data;
			var c = this1;
			openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill = c.buffer.o[c.oPos];
			openfl__$internal_renderer_canvas_CanvasGraphics.context.fillStyle = openfl__$internal_renderer_canvas_CanvasGraphics.createBitmapFill(c.buffer.o[c.oPos],c.buffer.b[c.bPos],c.buffer.b[c.bPos + 1]);
			openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = true;
			if(c.buffer.o[c.oPos + 1] != null) {
				openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix = c.buffer.o[c.oPos + 1];
				openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix = c.buffer.o[c.oPos + 1].clone();
				openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.invert();
			} else {
				openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix = null;
				openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix = null;
			}
			break;
		case 1:
			switch(data.prev._hx_index) {
			case 0:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 1:
				data.iPos += 1;
				data.fPos += 1;
				break;
			case 2:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 3:
				data.oPos += 1;
				break;
			case 4:
				data.fPos += 6;
				break;
			case 5:
				data.fPos += 4;
				break;
			case 6:
				data.fPos += 3;
				break;
			case 7:
				data.fPos += 4;
				break;
			case 8:
				data.oPos += 3;
				break;
			case 9:
				data.fPos += 4;
				break;
			case 10:
				data.fPos += 5;
				data.oPos += 1;
				break;
			case 12:
				data.oPos += 4;
				break;
			case 13:
				break;
			case 14:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 15:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 16:
				data.oPos += 4;
				data.iPos += 1;
				data.fPos += 2;
				data.bPos += 1;
				break;
			case 17:
				data.fPos += 2;
				break;
			case 18:
				data.fPos += 2;
				break;
			case 19:
				data.oPos += 1;
				break;
			case 20:
				data.oPos += 1;
				break;
			case 21:case 22:
				break;
			default:
			}
			data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_FILL;
			var this2 = data;
			var c1 = this2;
			if(c1.buffer.f[c1.fPos] < 0.005) {
				openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = false;
			} else {
				if(c1.buffer.f[c1.fPos] == 1) {
					var tmp = StringTools.hex(c1.buffer.i[c1.iPos] & 16777215,6);
					openfl__$internal_renderer_canvas_CanvasGraphics.context.fillStyle = "#" + tmp;
				} else {
					r = (c1.buffer.i[c1.iPos] & 16711680) >>> 16;
					g = (c1.buffer.i[c1.iPos] & 65280) >>> 8;
					b = c1.buffer.i[c1.iPos] & 255;
					openfl__$internal_renderer_canvas_CanvasGraphics.context.fillStyle = "rgba(" + r + ", " + g + ", " + b + ", " + c1.buffer.f[c1.fPos] + ")";
				}
				openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill = null;
				openfl__$internal_renderer_canvas_CanvasGraphics.setSmoothing(true);
				openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = true;
			}
			break;
		case 2:
			switch(data.prev._hx_index) {
			case 0:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 1:
				data.iPos += 1;
				data.fPos += 1;
				break;
			case 2:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 3:
				data.oPos += 1;
				break;
			case 4:
				data.fPos += 6;
				break;
			case 5:
				data.fPos += 4;
				break;
			case 6:
				data.fPos += 3;
				break;
			case 7:
				data.fPos += 4;
				break;
			case 8:
				data.oPos += 3;
				break;
			case 9:
				data.fPos += 4;
				break;
			case 10:
				data.fPos += 5;
				data.oPos += 1;
				break;
			case 12:
				data.oPos += 4;
				break;
			case 13:
				break;
			case 14:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 15:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 16:
				data.oPos += 4;
				data.iPos += 1;
				data.fPos += 2;
				data.bPos += 1;
				break;
			case 17:
				data.fPos += 2;
				break;
			case 18:
				data.fPos += 2;
				break;
			case 19:
				data.oPos += 1;
				break;
			case 20:
				data.oPos += 1;
				break;
			case 21:case 22:
				break;
			default:
			}
			data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL;
			var this3 = data;
			var c2 = this3;
			openfl__$internal_renderer_canvas_CanvasGraphics.context.fillStyle = openfl__$internal_renderer_canvas_CanvasGraphics.createGradientPattern(c2.buffer.o[c2.oPos],c2.buffer.ii[c2.iiPos],c2.buffer.ff[c2.ffPos],c2.buffer.ii[c2.iiPos + 1],c2.buffer.o[c2.oPos + 1],c2.buffer.o[c2.oPos + 2],c2.buffer.o[c2.oPos + 3],c2.buffer.f[c2.fPos]);
			openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill = null;
			openfl__$internal_renderer_canvas_CanvasGraphics.setSmoothing(true);
			openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = true;
			break;
		case 3:
			switch(data.prev._hx_index) {
			case 0:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 1:
				data.iPos += 1;
				data.fPos += 1;
				break;
			case 2:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 3:
				data.oPos += 1;
				break;
			case 4:
				data.fPos += 6;
				break;
			case 5:
				data.fPos += 4;
				break;
			case 6:
				data.fPos += 3;
				break;
			case 7:
				data.fPos += 4;
				break;
			case 8:
				data.oPos += 3;
				break;
			case 9:
				data.fPos += 4;
				break;
			case 10:
				data.fPos += 5;
				data.oPos += 1;
				break;
			case 12:
				data.oPos += 4;
				break;
			case 13:
				break;
			case 14:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 15:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 16:
				data.oPos += 4;
				data.iPos += 1;
				data.fPos += 2;
				data.bPos += 1;
				break;
			case 17:
				data.fPos += 2;
				break;
			case 18:
				data.fPos += 2;
				break;
			case 19:
				data.oPos += 1;
				break;
			case 20:
				data.oPos += 1;
				break;
			case 21:case 22:
				break;
			default:
			}
			data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_SHADER_FILL;
			var this4 = data;
			var c3 = this4;
			var shaderBuffer = c3.buffer.o[c3.oPos];
			if(shaderBuffer.inputCount > 0) {
				openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill = shaderBuffer.inputs[0];
				openfl__$internal_renderer_canvas_CanvasGraphics.context.fillStyle = openfl__$internal_renderer_canvas_CanvasGraphics.createBitmapFill(openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill,shaderBuffer.inputWrap[0] != 0,shaderBuffer.inputFilter[0] != 5);
				openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = true;
				openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix = null;
				openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix = null;
			}
			break;
		case 4:
			switch(data.prev._hx_index) {
			case 0:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 1:
				data.iPos += 1;
				data.fPos += 1;
				break;
			case 2:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 3:
				data.oPos += 1;
				break;
			case 4:
				data.fPos += 6;
				break;
			case 5:
				data.fPos += 4;
				break;
			case 6:
				data.fPos += 3;
				break;
			case 7:
				data.fPos += 4;
				break;
			case 8:
				data.oPos += 3;
				break;
			case 9:
				data.fPos += 4;
				break;
			case 10:
				data.fPos += 5;
				data.oPos += 1;
				break;
			case 12:
				data.oPos += 4;
				break;
			case 13:
				break;
			case 14:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 15:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 16:
				data.oPos += 4;
				data.iPos += 1;
				data.fPos += 2;
				data.bPos += 1;
				break;
			case 17:
				data.fPos += 2;
				break;
			case 18:
				data.fPos += 2;
				break;
			case 19:
				data.oPos += 1;
				break;
			case 20:
				data.oPos += 1;
				break;
			case 21:case 22:
				break;
			default:
			}
			data.prev = openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO;
			var this5 = data;
			var c4 = this5;
			hasPath = true;
			openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(c4.buffer.f[c4.fPos] - offsetX,c4.buffer.f[c4.fPos + 1] - offsetY,c4.buffer.f[c4.fPos + 2] - offsetX,c4.buffer.f[c4.fPos + 3] - offsetY,c4.buffer.f[c4.fPos + 4] - offsetX,c4.buffer.f[c4.fPos + 5] - offsetY);
			break;
		case 5:
			switch(data.prev._hx_index) {
			case 0:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 1:
				data.iPos += 1;
				data.fPos += 1;
				break;
			case 2:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 3:
				data.oPos += 1;
				break;
			case 4:
				data.fPos += 6;
				break;
			case 5:
				data.fPos += 4;
				break;
			case 6:
				data.fPos += 3;
				break;
			case 7:
				data.fPos += 4;
				break;
			case 8:
				data.oPos += 3;
				break;
			case 9:
				data.fPos += 4;
				break;
			case 10:
				data.fPos += 5;
				data.oPos += 1;
				break;
			case 12:
				data.oPos += 4;
				break;
			case 13:
				break;
			case 14:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 15:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 16:
				data.oPos += 4;
				data.iPos += 1;
				data.fPos += 2;
				data.bPos += 1;
				break;
			case 17:
				data.fPos += 2;
				break;
			case 18:
				data.fPos += 2;
				break;
			case 19:
				data.oPos += 1;
				break;
			case 20:
				data.oPos += 1;
				break;
			case 21:case 22:
				break;
			default:
			}
			data.prev = openfl__$internal_renderer_DrawCommandType.CURVE_TO;
			var this6 = data;
			var c5 = this6;
			hasPath = true;
			openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(c5.buffer.f[c5.fPos] - offsetX,c5.buffer.f[c5.fPos + 1] - offsetY,c5.buffer.f[c5.fPos + 2] - offsetX,c5.buffer.f[c5.fPos + 3] - offsetY);
			break;
		case 6:
			switch(data.prev._hx_index) {
			case 0:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 1:
				data.iPos += 1;
				data.fPos += 1;
				break;
			case 2:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 3:
				data.oPos += 1;
				break;
			case 4:
				data.fPos += 6;
				break;
			case 5:
				data.fPos += 4;
				break;
			case 6:
				data.fPos += 3;
				break;
			case 7:
				data.fPos += 4;
				break;
			case 8:
				data.oPos += 3;
				break;
			case 9:
				data.fPos += 4;
				break;
			case 10:
				data.fPos += 5;
				data.oPos += 1;
				break;
			case 12:
				data.oPos += 4;
				break;
			case 13:
				break;
			case 14:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 15:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 16:
				data.oPos += 4;
				data.iPos += 1;
				data.fPos += 2;
				data.bPos += 1;
				break;
			case 17:
				data.fPos += 2;
				break;
			case 18:
				data.fPos += 2;
				break;
			case 19:
				data.oPos += 1;
				break;
			case 20:
				data.oPos += 1;
				break;
			case 21:case 22:
				break;
			default:
			}
			data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE;
			var this7 = data;
			var c6 = this7;
			hasPath = true;
			openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(c6.buffer.f[c6.fPos] - offsetX + c6.buffer.f[c6.fPos + 2],c6.buffer.f[c6.fPos + 1] - offsetY);
			openfl__$internal_renderer_canvas_CanvasGraphics.context.arc(c6.buffer.f[c6.fPos] - offsetX,c6.buffer.f[c6.fPos + 1] - offsetY,c6.buffer.f[c6.fPos + 2],0,Math.PI * 2,true);
			break;
		case 7:
			switch(data.prev._hx_index) {
			case 0:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 1:
				data.iPos += 1;
				data.fPos += 1;
				break;
			case 2:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 3:
				data.oPos += 1;
				break;
			case 4:
				data.fPos += 6;
				break;
			case 5:
				data.fPos += 4;
				break;
			case 6:
				data.fPos += 3;
				break;
			case 7:
				data.fPos += 4;
				break;
			case 8:
				data.oPos += 3;
				break;
			case 9:
				data.fPos += 4;
				break;
			case 10:
				data.fPos += 5;
				data.oPos += 1;
				break;
			case 12:
				data.oPos += 4;
				break;
			case 13:
				break;
			case 14:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 15:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 16:
				data.oPos += 4;
				data.iPos += 1;
				data.fPos += 2;
				data.bPos += 1;
				break;
			case 17:
				data.fPos += 2;
				break;
			case 18:
				data.fPos += 2;
				break;
			case 19:
				data.oPos += 1;
				break;
			case 20:
				data.oPos += 1;
				break;
			case 21:case 22:
				break;
			default:
			}
			data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE;
			var this8 = data;
			var c7 = this8;
			hasPath = true;
			x = c7.buffer.f[c7.fPos];
			y = c7.buffer.f[c7.fPos + 1];
			width = c7.buffer.f[c7.fPos + 2];
			height = c7.buffer.f[c7.fPos + 3];
			x -= offsetX;
			y -= offsetY;
			ox = width / 2 * kappa;
			oy = height / 2 * kappa;
			xe = x + width;
			ye = y + height;
			xm = x + width / 2;
			ym = y + height / 2;
			openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(x,ym);
			openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(x,ym - oy,xm - ox,y,xm,y);
			openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(xm + ox,y,xe,ym - oy,xe,ym);
			openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(xe,ym + oy,xm + ox,ye,xm,ye);
			openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(xm - ox,ye,x,ym + oy,x,ym);
			break;
		case 8:
			switch(data.prev._hx_index) {
			case 0:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 1:
				data.iPos += 1;
				data.fPos += 1;
				break;
			case 2:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 3:
				data.oPos += 1;
				break;
			case 4:
				data.fPos += 6;
				break;
			case 5:
				data.fPos += 4;
				break;
			case 6:
				data.fPos += 3;
				break;
			case 7:
				data.fPos += 4;
				break;
			case 8:
				data.oPos += 3;
				break;
			case 9:
				data.fPos += 4;
				break;
			case 10:
				data.fPos += 5;
				data.oPos += 1;
				break;
			case 12:
				data.oPos += 4;
				break;
			case 13:
				break;
			case 14:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 15:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 16:
				data.oPos += 4;
				data.iPos += 1;
				data.fPos += 2;
				data.bPos += 1;
				break;
			case 17:
				data.fPos += 2;
				break;
			case 18:
				data.fPos += 2;
				break;
			case 19:
				data.oPos += 1;
				break;
			case 20:
				data.oPos += 1;
				break;
			case 21:case 22:
				break;
			default:
			}
			data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_QUADS;
			var this9 = data;
			var c8 = this9;
			var rects = c8.buffer.o[c8.oPos];
			var indices = c8.buffer.o[c8.oPos + 1];
			var transforms = c8.buffer.o[c8.oPos + 2];
			var hasIndices = indices != null;
			var transformABCD = false;
			var transformXY = false;
			var length = hasIndices ? indices.get_length() : Math.floor(rects.get_length() / 4);
			if(length == 0) {
				return;
			}
			if(transforms != null) {
				if(transforms.get_length() >= length * 6) {
					transformABCD = true;
					transformXY = true;
				} else if(transforms.get_length() >= length * 4) {
					transformABCD = true;
				} else if(transforms.get_length() >= length * 2) {
					transformXY = true;
				}
			}
			var tileRect = openfl_geom_Rectangle.__pool.get();
			var tileTransform = openfl_geom_Matrix.__pool.get();
			var transform = openfl__$internal_renderer_canvas_CanvasGraphics.graphics.__renderTransform;
			var alpha = openfl__$internal_renderer_canvas_CanvasGraphics.worldAlpha;
			var ri;
			var ti;
			openfl__$internal_renderer_canvas_CanvasGraphics.context.save();
			var _g2 = 0;
			var _g3 = length;
			while(_g2 < _g3) {
				var i = _g2++;
				ri = hasIndices ? indices.get(i) * 4 : i * 4;
				if(ri < 0) {
					continue;
				}
				tileRect.setTo(rects.get(ri),rects.get(ri + 1),rects.get(ri + 2),rects.get(ri + 3));
				if(tileRect.width <= 0 || tileRect.height <= 0) {
					continue;
				}
				if(transformABCD && transformXY) {
					ti = i * 6;
					tileTransform.setTo(transforms.get(ti),transforms.get(ti + 1),transforms.get(ti + 2),transforms.get(ti + 3),transforms.get(ti + 4),transforms.get(ti + 5));
				} else if(transformABCD) {
					ti = i * 4;
					tileTransform.setTo(transforms.get(ti),transforms.get(ti + 1),transforms.get(ti + 2),transforms.get(ti + 3),tileRect.x,tileRect.y);
				} else if(transformXY) {
					ti = i * 2;
					tileTransform.tx = transforms.get(ti);
					tileTransform.ty = transforms.get(ti + 1);
				} else {
					tileTransform.tx = tileRect.x;
					tileTransform.ty = tileRect.y;
				}
				tileTransform.tx += positionX - offsetX;
				tileTransform.ty += positionY - offsetY;
				tileTransform.concat(transform);
				openfl__$internal_renderer_canvas_CanvasGraphics.context.setTransform(tileTransform.a,tileTransform.b,tileTransform.c,tileTransform.d,tileTransform.tx,tileTransform.ty);
				if(openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill != null) {
					openfl__$internal_renderer_canvas_CanvasGraphics.context.drawImage(openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill.image.get_src(),tileRect.x,tileRect.y,tileRect.width,tileRect.height,0,0,tileRect.width,tileRect.height);
				} else {
					openfl__$internal_renderer_canvas_CanvasGraphics.context.fillRect(0,0,tileRect.width,tileRect.height);
				}
			}
			openfl_geom_Rectangle.__pool.release(tileRect);
			openfl_geom_Matrix.__pool.release(tileTransform);
			openfl__$internal_renderer_canvas_CanvasGraphics.context.restore();
			break;
		case 9:
			switch(data.prev._hx_index) {
			case 0:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 1:
				data.iPos += 1;
				data.fPos += 1;
				break;
			case 2:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 3:
				data.oPos += 1;
				break;
			case 4:
				data.fPos += 6;
				break;
			case 5:
				data.fPos += 4;
				break;
			case 6:
				data.fPos += 3;
				break;
			case 7:
				data.fPos += 4;
				break;
			case 8:
				data.oPos += 3;
				break;
			case 9:
				data.fPos += 4;
				break;
			case 10:
				data.fPos += 5;
				data.oPos += 1;
				break;
			case 12:
				data.oPos += 4;
				break;
			case 13:
				break;
			case 14:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 15:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 16:
				data.oPos += 4;
				data.iPos += 1;
				data.fPos += 2;
				data.bPos += 1;
				break;
			case 17:
				data.fPos += 2;
				break;
			case 18:
				data.fPos += 2;
				break;
			case 19:
				data.oPos += 1;
				break;
			case 20:
				data.oPos += 1;
				break;
			case 21:case 22:
				break;
			default:
			}
			data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_RECT;
			var this10 = data;
			var c9 = this10;
			optimizationUsed = false;
			if(openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill != null && !openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting) {
				st = 0;
				sr = 0;
				sb = 0;
				sl = 0;
				canOptimizeMatrix = true;
				if(openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix != null) {
					if(openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.b != 0 || openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.c != 0) {
						canOptimizeMatrix = false;
					} else {
						if(stl == null) {
							stl = openfl_geom_Point.__pool.get();
						}
						if(sbr == null) {
							sbr = openfl_geom_Point.__pool.get();
						}
						stl.setTo(c9.buffer.f[c9.fPos],c9.buffer.f[c9.fPos + 1]);
						var _this = openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix;
						var px = stl.x;
						var py = stl.y;
						stl.x = px * _this.a + py * _this.c + _this.tx;
						stl.y = px * _this.b + py * _this.d + _this.ty;
						sbr.setTo(c9.buffer.f[c9.fPos] + c9.buffer.f[c9.fPos + 2],c9.buffer.f[c9.fPos + 1] + c9.buffer.f[c9.fPos + 3]);
						var _this1 = openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix;
						var px1 = sbr.x;
						var py1 = sbr.y;
						sbr.x = px1 * _this1.a + py1 * _this1.c + _this1.tx;
						sbr.y = px1 * _this1.b + py1 * _this1.d + _this1.ty;
						st = stl.y;
						sl = stl.x;
						sb = sbr.y;
						sr = sbr.x;
					}
				} else {
					st = c9.buffer.f[c9.fPos + 1];
					sl = c9.buffer.f[c9.fPos];
					sb = c9.buffer.f[c9.fPos + 1] + c9.buffer.f[c9.fPos + 3];
					sr = c9.buffer.f[c9.fPos] + c9.buffer.f[c9.fPos + 2];
				}
				if(canOptimizeMatrix && st >= 0 && sl >= 0 && sr <= openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill.width && sb <= openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill.height) {
					optimizationUsed = true;
					if(!openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting) {
						openfl__$internal_renderer_canvas_CanvasGraphics.context.drawImage(openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill.image.get_src(),sl,st,sr - sl,sb - st,c9.buffer.f[c9.fPos] - offsetX,c9.buffer.f[c9.fPos + 1] - offsetY,c9.buffer.f[c9.fPos + 2],c9.buffer.f[c9.fPos + 3]);
					}
				}
			}
			if(!optimizationUsed) {
				hasPath = true;
				openfl__$internal_renderer_canvas_CanvasGraphics.context.rect(c9.buffer.f[c9.fPos] - offsetX,c9.buffer.f[c9.fPos + 1] - offsetY,c9.buffer.f[c9.fPos + 2],c9.buffer.f[c9.fPos + 3]);
			}
			break;
		case 10:
			switch(data.prev._hx_index) {
			case 0:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 1:
				data.iPos += 1;
				data.fPos += 1;
				break;
			case 2:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 3:
				data.oPos += 1;
				break;
			case 4:
				data.fPos += 6;
				break;
			case 5:
				data.fPos += 4;
				break;
			case 6:
				data.fPos += 3;
				break;
			case 7:
				data.fPos += 4;
				break;
			case 8:
				data.oPos += 3;
				break;
			case 9:
				data.fPos += 4;
				break;
			case 10:
				data.fPos += 5;
				data.oPos += 1;
				break;
			case 12:
				data.oPos += 4;
				break;
			case 13:
				break;
			case 14:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 15:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 16:
				data.oPos += 4;
				data.iPos += 1;
				data.fPos += 2;
				data.bPos += 1;
				break;
			case 17:
				data.fPos += 2;
				break;
			case 18:
				data.fPos += 2;
				break;
			case 19:
				data.oPos += 1;
				break;
			case 20:
				data.oPos += 1;
				break;
			case 21:case 22:
				break;
			default:
			}
			data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT;
			var this11 = data;
			var c10 = this11;
			hasPath = true;
			openfl__$internal_renderer_canvas_CanvasGraphics.drawRoundRect(c10.buffer.f[c10.fPos] - offsetX,c10.buffer.f[c10.fPos + 1] - offsetY,c10.buffer.f[c10.fPos + 2],c10.buffer.f[c10.fPos + 3],c10.buffer.f[c10.fPos + 4],c10.buffer.o[c10.oPos]);
			break;
		case 12:
			switch(data.prev._hx_index) {
			case 0:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 1:
				data.iPos += 1;
				data.fPos += 1;
				break;
			case 2:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 3:
				data.oPos += 1;
				break;
			case 4:
				data.fPos += 6;
				break;
			case 5:
				data.fPos += 4;
				break;
			case 6:
				data.fPos += 3;
				break;
			case 7:
				data.fPos += 4;
				break;
			case 8:
				data.oPos += 3;
				break;
			case 9:
				data.fPos += 4;
				break;
			case 10:
				data.fPos += 5;
				data.oPos += 1;
				break;
			case 12:
				data.oPos += 4;
				break;
			case 13:
				break;
			case 14:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 15:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 16:
				data.oPos += 4;
				data.iPos += 1;
				data.fPos += 2;
				data.bPos += 1;
				break;
			case 17:
				data.fPos += 2;
				break;
			case 18:
				data.fPos += 2;
				break;
			case 19:
				data.oPos += 1;
				break;
			case 20:
				data.oPos += 1;
				break;
			case 21:case 22:
				break;
			default:
			}
			data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_TRIANGLES;
			var this12 = data;
			var c11 = this12;
			var v = c11.buffer.o[c11.oPos];
			var ind = c11.buffer.o[c11.oPos + 1];
			var uvt = c11.buffer.o[c11.oPos + 2];
			var pattern = null;
			var colorFill = openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill == null;
			if(colorFill && uvt != null) {
				break _hx_loop1;
			}
			if(!colorFill) {
				if(uvt == null) {
					uvt = openfl_Vector.toFloatVector(null);
					var _g4 = 0;
					var _g5 = v.get_length() / 2 | 0;
					while(_g4 < _g5) {
						var i1 = _g4++;
						uvt.push(v.get(i1 * 2) - offsetX / openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill.width);
						uvt.push(v.get(i1 * 2 + 1) - offsetY / openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill.height);
					}
				}
				var skipT = uvt.get_length() != v.get_length();
				var normalizedUVT = openfl__$internal_renderer_canvas_CanvasGraphics.normalizeUVT(uvt,skipT);
				var maxUVT = normalizedUVT.max;
				uvt = normalizedUVT.uvt;
				if(maxUVT > 1) {
					pattern = openfl__$internal_renderer_canvas_CanvasGraphics.createTempPatternCanvas(openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill,openfl__$internal_renderer_canvas_CanvasGraphics.bitmapRepeat,openfl__$internal_renderer_canvas_CanvasGraphics.bounds.width | 0,openfl__$internal_renderer_canvas_CanvasGraphics.bounds.height | 0);
				} else {
					pattern = openfl__$internal_renderer_canvas_CanvasGraphics.createTempPatternCanvas(openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill,openfl__$internal_renderer_canvas_CanvasGraphics.bitmapRepeat,openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill.width,openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill.height);
				}
			}
			var i2 = 0;
			var l = ind.get_length();
			var a_;
			var b_;
			var c_;
			var iax;
			var iay;
			var ibx;
			var iby;
			var icx;
			var icy;
			var x1;
			var y1;
			var x2;
			var y2;
			var x3;
			var y3;
			var uvx1;
			var uvy1;
			var uvx2;
			var uvy2;
			var uvx3;
			var uvy3;
			var denom;
			var t1;
			var t2;
			var t3;
			var t4;
			var dx;
			var dy;
			while(i2 < l) {
				a_ = i2;
				b_ = i2 + 1;
				c_ = i2 + 2;
				iax = ind.get(a_) * 2;
				iay = ind.get(a_) * 2 + 1;
				ibx = ind.get(b_) * 2;
				iby = ind.get(b_) * 2 + 1;
				icx = ind.get(c_) * 2;
				icy = ind.get(c_) * 2 + 1;
				x1 = v.get(iax) - offsetX;
				y1 = v.get(iay) - offsetY;
				x2 = v.get(ibx) - offsetX;
				y2 = v.get(iby) - offsetY;
				x3 = v.get(icx) - offsetX;
				y3 = v.get(icy) - offsetY;
				switch(c11.buffer.o[c11.oPos + 3]) {
				case 0:
					if((x2 - x1) * (y3 - y1) - (y2 - y1) * (x3 - x1) < 0) {
						i2 += 3;
						continue;
					}
					break;
				case 2:
					if(!((x2 - x1) * (y3 - y1) - (y2 - y1) * (x3 - x1) < 0)) {
						i2 += 3;
						continue;
					}
					break;
				default:
				}
				if(colorFill) {
					openfl__$internal_renderer_canvas_CanvasGraphics.context.beginPath();
					openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(x1,y1);
					openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(x2,y2);
					openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(x3,y3);
					openfl__$internal_renderer_canvas_CanvasGraphics.context.closePath();
					if(!openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting) {
						openfl__$internal_renderer_canvas_CanvasGraphics.context.fill(openfl__$internal_renderer_canvas_CanvasGraphics.windingRule);
					}
					i2 += 3;
					continue;
				}
				uvx1 = uvt.get(iax) * pattern.width;
				uvx2 = uvt.get(ibx) * pattern.width;
				uvx3 = uvt.get(icx) * pattern.width;
				uvy1 = uvt.get(iay) * pattern.height;
				uvy2 = uvt.get(iby) * pattern.height;
				uvy3 = uvt.get(icy) * pattern.height;
				denom = uvx1 * (uvy3 - uvy2) - uvx2 * uvy3 + uvx3 * uvy2 + (uvx2 - uvx3) * uvy1;
				if(denom == 0) {
					i2 += 3;
					openfl__$internal_renderer_canvas_CanvasGraphics.context.restore();
					continue;
				}
				openfl__$internal_renderer_canvas_CanvasGraphics.context.save();
				openfl__$internal_renderer_canvas_CanvasGraphics.context.beginPath();
				openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(x1,y1);
				openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(x2,y2);
				openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(x3,y3);
				openfl__$internal_renderer_canvas_CanvasGraphics.context.closePath();
				openfl__$internal_renderer_canvas_CanvasGraphics.context.clip();
				t1 = -(uvy1 * (x3 - x2) - uvy2 * x3 + uvy3 * x2 + (uvy2 - uvy3) * x1) / denom;
				t2 = (uvy2 * y3 + uvy1 * (y2 - y3) - uvy3 * y2 + (uvy3 - uvy2) * y1) / denom;
				t3 = (uvx1 * (x3 - x2) - uvx2 * x3 + uvx3 * x2 + (uvx2 - uvx3) * x1) / denom;
				t4 = -(uvx2 * y3 + uvx1 * (y2 - y3) - uvx3 * y2 + (uvx3 - uvx2) * y1) / denom;
				dx = (uvx1 * (uvy3 * x2 - uvy2 * x3) + uvy1 * (uvx2 * x3 - uvx3 * x2) + (uvx3 * uvy2 - uvx2 * uvy3) * x1) / denom;
				dy = (uvx1 * (uvy3 * y2 - uvy2 * y3) + uvy1 * (uvx2 * y3 - uvx3 * y2) + (uvx3 * uvy2 - uvx2 * uvy3) * y1) / denom;
				openfl__$internal_renderer_canvas_CanvasGraphics.context.transform(t1,t2,t3,t4,dx,dy);
				openfl__$internal_renderer_canvas_CanvasGraphics.context.drawImage(pattern,0,0,pattern.width,pattern.height);
				openfl__$internal_renderer_canvas_CanvasGraphics.context.restore();
				i2 += 3;
			}
			break;
		case 14:
			switch(data.prev._hx_index) {
			case 0:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 1:
				data.iPos += 1;
				data.fPos += 1;
				break;
			case 2:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 3:
				data.oPos += 1;
				break;
			case 4:
				data.fPos += 6;
				break;
			case 5:
				data.fPos += 4;
				break;
			case 6:
				data.fPos += 3;
				break;
			case 7:
				data.fPos += 4;
				break;
			case 8:
				data.oPos += 3;
				break;
			case 9:
				data.fPos += 4;
				break;
			case 10:
				data.fPos += 5;
				data.oPos += 1;
				break;
			case 12:
				data.oPos += 4;
				break;
			case 13:
				break;
			case 14:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 15:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 16:
				data.oPos += 4;
				data.iPos += 1;
				data.fPos += 2;
				data.bPos += 1;
				break;
			case 17:
				data.fPos += 2;
				break;
			case 18:
				data.fPos += 2;
				break;
			case 19:
				data.oPos += 1;
				break;
			case 20:
				data.oPos += 1;
				break;
			case 21:case 22:
				break;
			default:
			}
			data.prev = openfl__$internal_renderer_DrawCommandType.LINE_BITMAP_STYLE;
			var this13 = data;
			var c12 = this13;
			if(stroke && openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke) {
				openfl__$internal_renderer_canvas_CanvasGraphics.closePath();
			}
			openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(positionX - offsetX,positionY - offsetY);
			openfl__$internal_renderer_canvas_CanvasGraphics.context.strokeStyle = openfl__$internal_renderer_canvas_CanvasGraphics.createBitmapFill(c12.buffer.o[c12.oPos],c12.buffer.b[c12.bPos],c12.buffer.b[c12.bPos + 1]);
			openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke = true;
			break;
		case 15:
			switch(data.prev._hx_index) {
			case 0:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 1:
				data.iPos += 1;
				data.fPos += 1;
				break;
			case 2:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 3:
				data.oPos += 1;
				break;
			case 4:
				data.fPos += 6;
				break;
			case 5:
				data.fPos += 4;
				break;
			case 6:
				data.fPos += 3;
				break;
			case 7:
				data.fPos += 4;
				break;
			case 8:
				data.oPos += 3;
				break;
			case 9:
				data.fPos += 4;
				break;
			case 10:
				data.fPos += 5;
				data.oPos += 1;
				break;
			case 12:
				data.oPos += 4;
				break;
			case 13:
				break;
			case 14:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 15:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 16:
				data.oPos += 4;
				data.iPos += 1;
				data.fPos += 2;
				data.bPos += 1;
				break;
			case 17:
				data.fPos += 2;
				break;
			case 18:
				data.fPos += 2;
				break;
			case 19:
				data.oPos += 1;
				break;
			case 20:
				data.oPos += 1;
				break;
			case 21:case 22:
				break;
			default:
			}
			data.prev = openfl__$internal_renderer_DrawCommandType.LINE_GRADIENT_STYLE;
			var this14 = data;
			var c13 = this14;
			if(stroke && openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke) {
				openfl__$internal_renderer_canvas_CanvasGraphics.closePath();
			}
			openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(positionX - offsetX,positionY - offsetY);
			openfl__$internal_renderer_canvas_CanvasGraphics.context.strokeStyle = openfl__$internal_renderer_canvas_CanvasGraphics.createGradientPattern(c13.buffer.o[c13.oPos],c13.buffer.ii[c13.iiPos],c13.buffer.ff[c13.ffPos],c13.buffer.ii[c13.iiPos + 1],c13.buffer.o[c13.oPos + 1],c13.buffer.o[c13.oPos + 2],c13.buffer.o[c13.oPos + 3],c13.buffer.f[c13.fPos]);
			openfl__$internal_renderer_canvas_CanvasGraphics.setSmoothing(true);
			openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke = true;
			break;
		case 16:
			switch(data.prev._hx_index) {
			case 0:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 1:
				data.iPos += 1;
				data.fPos += 1;
				break;
			case 2:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 3:
				data.oPos += 1;
				break;
			case 4:
				data.fPos += 6;
				break;
			case 5:
				data.fPos += 4;
				break;
			case 6:
				data.fPos += 3;
				break;
			case 7:
				data.fPos += 4;
				break;
			case 8:
				data.oPos += 3;
				break;
			case 9:
				data.fPos += 4;
				break;
			case 10:
				data.fPos += 5;
				data.oPos += 1;
				break;
			case 12:
				data.oPos += 4;
				break;
			case 13:
				break;
			case 14:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 15:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 16:
				data.oPos += 4;
				data.iPos += 1;
				data.fPos += 2;
				data.bPos += 1;
				break;
			case 17:
				data.fPos += 2;
				break;
			case 18:
				data.fPos += 2;
				break;
			case 19:
				data.oPos += 1;
				break;
			case 20:
				data.oPos += 1;
				break;
			case 21:case 22:
				break;
			default:
			}
			data.prev = openfl__$internal_renderer_DrawCommandType.LINE_STYLE;
			var this15 = data;
			var c14 = this15;
			if(stroke && openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke) {
				openfl__$internal_renderer_canvas_CanvasGraphics.closePath(true);
			}
			openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(positionX - offsetX,positionY - offsetY);
			if(c14.buffer.o[c14.oPos] == null) {
				openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke = false;
			} else {
				openfl__$internal_renderer_canvas_CanvasGraphics.context.lineWidth = c14.buffer.o[c14.oPos] > 0 ? c14.buffer.o[c14.oPos] : 1;
				var tmp1 = c14.buffer.o[c14.oPos + 3] == null ? "round" : openfl_display_JointStyle.toString(c14.buffer.o[c14.oPos + 3]).toLowerCase();
				openfl__$internal_renderer_canvas_CanvasGraphics.context.lineJoin = tmp1;
				var tmp2 = c14.buffer.o[c14.oPos + 2] == null ? "round" : c14.buffer.o[c14.oPos + 2] == 0 ? "butt" : openfl_display_CapsStyle.toString(c14.buffer.o[c14.oPos + 2]).toLowerCase();
				openfl__$internal_renderer_canvas_CanvasGraphics.context.lineCap = tmp2;
				openfl__$internal_renderer_canvas_CanvasGraphics.context.miterLimit = c14.buffer.f[c14.fPos + 1];
				if(c14.buffer.f[c14.fPos] == 1) {
					var tmp3 = StringTools.hex(c14.buffer.i[c14.iPos] & 16777215,6);
					openfl__$internal_renderer_canvas_CanvasGraphics.context.strokeStyle = "#" + tmp3;
				} else {
					r = (c14.buffer.i[c14.iPos] & 16711680) >>> 16;
					g = (c14.buffer.i[c14.iPos] & 65280) >>> 8;
					b = c14.buffer.i[c14.iPos] & 255;
					openfl__$internal_renderer_canvas_CanvasGraphics.context.strokeStyle = "rgba(" + r + ", " + g + ", " + b + ", " + c14.buffer.f[c14.fPos] + ")";
				}
				openfl__$internal_renderer_canvas_CanvasGraphics.setSmoothing(true);
				openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke = true;
			}
			break;
		case 17:
			switch(data.prev._hx_index) {
			case 0:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 1:
				data.iPos += 1;
				data.fPos += 1;
				break;
			case 2:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 3:
				data.oPos += 1;
				break;
			case 4:
				data.fPos += 6;
				break;
			case 5:
				data.fPos += 4;
				break;
			case 6:
				data.fPos += 3;
				break;
			case 7:
				data.fPos += 4;
				break;
			case 8:
				data.oPos += 3;
				break;
			case 9:
				data.fPos += 4;
				break;
			case 10:
				data.fPos += 5;
				data.oPos += 1;
				break;
			case 12:
				data.oPos += 4;
				break;
			case 13:
				break;
			case 14:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 15:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 16:
				data.oPos += 4;
				data.iPos += 1;
				data.fPos += 2;
				data.bPos += 1;
				break;
			case 17:
				data.fPos += 2;
				break;
			case 18:
				data.fPos += 2;
				break;
			case 19:
				data.oPos += 1;
				break;
			case 20:
				data.oPos += 1;
				break;
			case 21:case 22:
				break;
			default:
			}
			data.prev = openfl__$internal_renderer_DrawCommandType.LINE_TO;
			var this16 = data;
			var c15 = this16;
			hasPath = true;
			openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(c15.buffer.f[c15.fPos] - offsetX,c15.buffer.f[c15.fPos + 1] - offsetY);
			positionX = c15.buffer.f[c15.fPos];
			positionY = c15.buffer.f[c15.fPos + 1];
			if(positionX == startX && positionY == startY) {
				closeGap = true;
			}
			break;
		case 18:
			switch(data.prev._hx_index) {
			case 0:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 1:
				data.iPos += 1;
				data.fPos += 1;
				break;
			case 2:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 3:
				data.oPos += 1;
				break;
			case 4:
				data.fPos += 6;
				break;
			case 5:
				data.fPos += 4;
				break;
			case 6:
				data.fPos += 3;
				break;
			case 7:
				data.fPos += 4;
				break;
			case 8:
				data.oPos += 3;
				break;
			case 9:
				data.fPos += 4;
				break;
			case 10:
				data.fPos += 5;
				data.oPos += 1;
				break;
			case 12:
				data.oPos += 4;
				break;
			case 13:
				break;
			case 14:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 15:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 16:
				data.oPos += 4;
				data.iPos += 1;
				data.fPos += 2;
				data.bPos += 1;
				break;
			case 17:
				data.fPos += 2;
				break;
			case 18:
				data.fPos += 2;
				break;
			case 19:
				data.oPos += 1;
				break;
			case 20:
				data.oPos += 1;
				break;
			case 21:case 22:
				break;
			default:
			}
			data.prev = openfl__$internal_renderer_DrawCommandType.MOVE_TO;
			var this17 = data;
			var c16 = this17;
			openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(c16.buffer.f[c16.fPos] - offsetX,c16.buffer.f[c16.fPos + 1] - offsetY);
			positionX = c16.buffer.f[c16.fPos];
			positionY = c16.buffer.f[c16.fPos + 1];
			if(setStart) {
				closeGap = true;
			}
			startX = c16.buffer.f[c16.fPos];
			startY = c16.buffer.f[c16.fPos + 1];
			setStart = true;
			break;
		case 21:
			openfl__$internal_renderer_canvas_CanvasGraphics.windingRule = "evenodd";
			break;
		case 22:
			openfl__$internal_renderer_canvas_CanvasGraphics.windingRule = "nonzero";
			break;
		default:
			switch(data.prev._hx_index) {
			case 0:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 1:
				data.iPos += 1;
				data.fPos += 1;
				break;
			case 2:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 3:
				data.oPos += 1;
				break;
			case 4:
				data.fPos += 6;
				break;
			case 5:
				data.fPos += 4;
				break;
			case 6:
				data.fPos += 3;
				break;
			case 7:
				data.fPos += 4;
				break;
			case 8:
				data.oPos += 3;
				break;
			case 9:
				data.fPos += 4;
				break;
			case 10:
				data.fPos += 5;
				data.oPos += 1;
				break;
			case 12:
				data.oPos += 4;
				break;
			case 13:
				break;
			case 14:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 15:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 16:
				data.oPos += 4;
				data.iPos += 1;
				data.fPos += 2;
				data.bPos += 1;
				break;
			case 17:
				data.fPos += 2;
				break;
			case 18:
				data.fPos += 2;
				break;
			case 19:
				data.oPos += 1;
				break;
			case 20:
				data.oPos += 1;
				break;
			case 21:case 22:
				break;
			default:
			}
			data.prev = type;
		}
	}
	if(stl != null) {
		openfl_geom_Point.__pool.release(stl);
	}
	if(sbr != null) {
		openfl_geom_Point.__pool.release(sbr);
	}
	data.destroy();
	if(hasPath) {
		if(stroke && openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke) {
			if(openfl__$internal_renderer_canvas_CanvasGraphics.hasFill && closeGap) {
				openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(startX - offsetX,startY - offsetY);
				openfl__$internal_renderer_canvas_CanvasGraphics.closePath(false);
			} else if(closeGap && positionX == startX && positionY == startY) {
				openfl__$internal_renderer_canvas_CanvasGraphics.closePath(false);
			}
			if(!openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting) {
				openfl__$internal_renderer_canvas_CanvasGraphics.context.stroke();
			}
		}
		if(!stroke) {
			if(openfl__$internal_renderer_canvas_CanvasGraphics.hasFill || openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill != null) {
				openfl__$internal_renderer_canvas_CanvasGraphics.context.translate(-openfl__$internal_renderer_canvas_CanvasGraphics.bounds.x,-openfl__$internal_renderer_canvas_CanvasGraphics.bounds.y);
				if(openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix != null) {
					openfl__$internal_renderer_canvas_CanvasGraphics.context.transform(openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.a,openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.b,openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.c,openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.d,openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.tx,openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.ty);
					if(!openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting) {
						openfl__$internal_renderer_canvas_CanvasGraphics.context.fill(openfl__$internal_renderer_canvas_CanvasGraphics.windingRule);
					}
					openfl__$internal_renderer_canvas_CanvasGraphics.context.transform(openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.a,openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.b,openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.c,openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.d,openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.tx,openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.ty);
				} else if(!openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting) {
					openfl__$internal_renderer_canvas_CanvasGraphics.context.fill(openfl__$internal_renderer_canvas_CanvasGraphics.windingRule);
				}
				openfl__$internal_renderer_canvas_CanvasGraphics.context.translate(openfl__$internal_renderer_canvas_CanvasGraphics.bounds.x,openfl__$internal_renderer_canvas_CanvasGraphics.bounds.y);
				openfl__$internal_renderer_canvas_CanvasGraphics.context.closePath();
			}
		}
	}
};
openfl__$internal_renderer_canvas_CanvasGraphics.render = function(graphics,renderer) {
	graphics.__update(renderer.__worldTransform);
	if(graphics.__softwareDirty) {
		openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting = false;
		openfl__$internal_renderer_canvas_CanvasGraphics.graphics = graphics;
		openfl__$internal_renderer_canvas_CanvasGraphics.allowSmoothing = renderer.__allowSmoothing;
		openfl__$internal_renderer_canvas_CanvasGraphics.worldAlpha = renderer.__getAlpha(graphics.__owner.__worldAlpha);
		openfl__$internal_renderer_canvas_CanvasGraphics.bounds = graphics.__bounds;
		var width = graphics.__width;
		var height = graphics.__height;
		if(!graphics.__visible || graphics.__commands.get_length() == 0 || openfl__$internal_renderer_canvas_CanvasGraphics.bounds == null || width < 1 || height < 1) {
			graphics.__canvas = null;
			graphics.__context = null;
			graphics.__bitmap = null;
		} else {
			if(graphics.__canvas == null) {
				graphics.__canvas = window.document.createElement("canvas");
				graphics.__context = graphics.__canvas.getContext("2d");
			}
			openfl__$internal_renderer_canvas_CanvasGraphics.context = graphics.__context;
			var transform = graphics.__renderTransform;
			var canvas = graphics.__canvas;
			var scale = renderer.pixelRatio;
			var scaledWidth = width * scale | 0;
			var scaledHeight = height * scale | 0;
			renderer.__setBlendModeContext(openfl__$internal_renderer_canvas_CanvasGraphics.context,10);
			if(renderer.__isDOM) {
				if(canvas.width == scaledWidth && canvas.height == scaledHeight) {
					openfl__$internal_renderer_canvas_CanvasGraphics.context.clearRect(0,0,scaledWidth,scaledHeight);
				} else {
					canvas.width = scaledWidth;
					canvas.height = scaledHeight;
					canvas.style.width = width + "px";
					canvas.style.height = height + "px";
				}
				var transform1 = graphics.__renderTransform;
				openfl__$internal_renderer_canvas_CanvasGraphics.context.setTransform(transform1.a * scale,transform1.b * scale,transform1.c * scale,transform1.d * scale,transform1.tx * scale,transform1.ty * scale);
			} else {
				if(canvas.width == scaledWidth && canvas.height == scaledHeight) {
					openfl__$internal_renderer_canvas_CanvasGraphics.context.closePath();
					openfl__$internal_renderer_canvas_CanvasGraphics.context.setTransform(1,0,0,1,0,0);
					openfl__$internal_renderer_canvas_CanvasGraphics.context.clearRect(0,0,scaledWidth,scaledHeight);
				} else {
					canvas.width = width;
					canvas.height = height;
				}
				openfl__$internal_renderer_canvas_CanvasGraphics.context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx,transform.ty);
			}
			openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.clear();
			openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.clear();
			openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = false;
			openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke = false;
			openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill = null;
			openfl__$internal_renderer_canvas_CanvasGraphics.bitmapRepeat = false;
			var hasLineStyle = false;
			var initStrokeX = 0.0;
			var initStrokeY = 0.0;
			openfl__$internal_renderer_canvas_CanvasGraphics.windingRule = "evenodd";
			var data = new openfl__$internal_renderer_DrawCommandReader(graphics.__commands);
			var _g = 0;
			var _g1 = graphics.__commands.types;
			while(_g < _g1.length) {
				var type = _g1[_g];
				++_g;
				switch(type._hx_index) {
				case 0:case 1:case 2:case 3:
					openfl__$internal_renderer_canvas_CanvasGraphics.endFill();
					openfl__$internal_renderer_canvas_CanvasGraphics.endStroke();
					if(type == openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL) {
						switch(data.prev._hx_index) {
						case 0:
							data.oPos += 2;
							data.bPos += 2;
							break;
						case 1:
							data.iPos += 1;
							data.fPos += 1;
							break;
						case 2:
							data.oPos += 4;
							data.iiPos += 2;
							data.ffPos += 1;
							data.fPos += 1;
							break;
						case 3:
							data.oPos += 1;
							break;
						case 4:
							data.fPos += 6;
							break;
						case 5:
							data.fPos += 4;
							break;
						case 6:
							data.fPos += 3;
							break;
						case 7:
							data.fPos += 4;
							break;
						case 8:
							data.oPos += 3;
							break;
						case 9:
							data.fPos += 4;
							break;
						case 10:
							data.fPos += 5;
							data.oPos += 1;
							break;
						case 12:
							data.oPos += 4;
							break;
						case 13:
							break;
						case 14:
							data.oPos += 2;
							data.bPos += 2;
							break;
						case 15:
							data.oPos += 4;
							data.iiPos += 2;
							data.ffPos += 1;
							data.fPos += 1;
							break;
						case 16:
							data.oPos += 4;
							data.iPos += 1;
							data.fPos += 2;
							data.bPos += 1;
							break;
						case 17:
							data.fPos += 2;
							break;
						case 18:
							data.fPos += 2;
							break;
						case 19:
							data.oPos += 1;
							break;
						case 20:
							data.oPos += 1;
							break;
						case 21:case 22:
							break;
						default:
						}
						data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL;
						var this1 = data;
						var c = this1;
						openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.beginBitmapFill(c.buffer.o[c.oPos],c.buffer.o[c.oPos + 1],c.buffer.b[c.bPos],c.buffer.b[c.bPos + 1]);
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.beginBitmapFill(c.buffer.o[c.oPos],c.buffer.o[c.oPos + 1],c.buffer.b[c.bPos],c.buffer.b[c.bPos + 1]);
					} else if(type == openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL) {
						switch(data.prev._hx_index) {
						case 0:
							data.oPos += 2;
							data.bPos += 2;
							break;
						case 1:
							data.iPos += 1;
							data.fPos += 1;
							break;
						case 2:
							data.oPos += 4;
							data.iiPos += 2;
							data.ffPos += 1;
							data.fPos += 1;
							break;
						case 3:
							data.oPos += 1;
							break;
						case 4:
							data.fPos += 6;
							break;
						case 5:
							data.fPos += 4;
							break;
						case 6:
							data.fPos += 3;
							break;
						case 7:
							data.fPos += 4;
							break;
						case 8:
							data.oPos += 3;
							break;
						case 9:
							data.fPos += 4;
							break;
						case 10:
							data.fPos += 5;
							data.oPos += 1;
							break;
						case 12:
							data.oPos += 4;
							break;
						case 13:
							break;
						case 14:
							data.oPos += 2;
							data.bPos += 2;
							break;
						case 15:
							data.oPos += 4;
							data.iiPos += 2;
							data.ffPos += 1;
							data.fPos += 1;
							break;
						case 16:
							data.oPos += 4;
							data.iPos += 1;
							data.fPos += 2;
							data.bPos += 1;
							break;
						case 17:
							data.fPos += 2;
							break;
						case 18:
							data.fPos += 2;
							break;
						case 19:
							data.oPos += 1;
							break;
						case 20:
							data.oPos += 1;
							break;
						case 21:case 22:
							break;
						default:
						}
						data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL;
						var this2 = data;
						var c1 = this2;
						openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.beginGradientFill(c1.buffer.o[c1.oPos],c1.buffer.ii[c1.iiPos],c1.buffer.ff[c1.ffPos],c1.buffer.ii[c1.iiPos + 1],c1.buffer.o[c1.oPos + 1],c1.buffer.o[c1.oPos + 2],c1.buffer.o[c1.oPos + 3],c1.buffer.f[c1.fPos]);
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.beginGradientFill(c1.buffer.o[c1.oPos],c1.buffer.ii[c1.iiPos],c1.buffer.ff[c1.ffPos],c1.buffer.ii[c1.iiPos + 1],c1.buffer.o[c1.oPos + 1],c1.buffer.o[c1.oPos + 2],c1.buffer.o[c1.oPos + 3],c1.buffer.f[c1.fPos]);
					} else if(type == openfl__$internal_renderer_DrawCommandType.BEGIN_SHADER_FILL) {
						switch(data.prev._hx_index) {
						case 0:
							data.oPos += 2;
							data.bPos += 2;
							break;
						case 1:
							data.iPos += 1;
							data.fPos += 1;
							break;
						case 2:
							data.oPos += 4;
							data.iiPos += 2;
							data.ffPos += 1;
							data.fPos += 1;
							break;
						case 3:
							data.oPos += 1;
							break;
						case 4:
							data.fPos += 6;
							break;
						case 5:
							data.fPos += 4;
							break;
						case 6:
							data.fPos += 3;
							break;
						case 7:
							data.fPos += 4;
							break;
						case 8:
							data.oPos += 3;
							break;
						case 9:
							data.fPos += 4;
							break;
						case 10:
							data.fPos += 5;
							data.oPos += 1;
							break;
						case 12:
							data.oPos += 4;
							break;
						case 13:
							break;
						case 14:
							data.oPos += 2;
							data.bPos += 2;
							break;
						case 15:
							data.oPos += 4;
							data.iiPos += 2;
							data.ffPos += 1;
							data.fPos += 1;
							break;
						case 16:
							data.oPos += 4;
							data.iPos += 1;
							data.fPos += 2;
							data.bPos += 1;
							break;
						case 17:
							data.fPos += 2;
							break;
						case 18:
							data.fPos += 2;
							break;
						case 19:
							data.oPos += 1;
							break;
						case 20:
							data.oPos += 1;
							break;
						case 21:case 22:
							break;
						default:
						}
						data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_SHADER_FILL;
						var this3 = data;
						var c2 = this3;
						openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.beginShaderFill(c2.buffer.o[c2.oPos]);
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.beginShaderFill(c2.buffer.o[c2.oPos]);
					} else {
						switch(data.prev._hx_index) {
						case 0:
							data.oPos += 2;
							data.bPos += 2;
							break;
						case 1:
							data.iPos += 1;
							data.fPos += 1;
							break;
						case 2:
							data.oPos += 4;
							data.iiPos += 2;
							data.ffPos += 1;
							data.fPos += 1;
							break;
						case 3:
							data.oPos += 1;
							break;
						case 4:
							data.fPos += 6;
							break;
						case 5:
							data.fPos += 4;
							break;
						case 6:
							data.fPos += 3;
							break;
						case 7:
							data.fPos += 4;
							break;
						case 8:
							data.oPos += 3;
							break;
						case 9:
							data.fPos += 4;
							break;
						case 10:
							data.fPos += 5;
							data.oPos += 1;
							break;
						case 12:
							data.oPos += 4;
							break;
						case 13:
							break;
						case 14:
							data.oPos += 2;
							data.bPos += 2;
							break;
						case 15:
							data.oPos += 4;
							data.iiPos += 2;
							data.ffPos += 1;
							data.fPos += 1;
							break;
						case 16:
							data.oPos += 4;
							data.iPos += 1;
							data.fPos += 2;
							data.bPos += 1;
							break;
						case 17:
							data.fPos += 2;
							break;
						case 18:
							data.fPos += 2;
							break;
						case 19:
							data.oPos += 1;
							break;
						case 20:
							data.oPos += 1;
							break;
						case 21:case 22:
							break;
						default:
						}
						data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_FILL;
						var this4 = data;
						var c3 = this4;
						openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.beginFill(c3.buffer.i[c3.iPos],c3.buffer.f[c3.fPos]);
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.beginFill(c3.buffer.i[c3.iPos],c3.buffer.f[c3.fPos]);
					}
					break;
				case 4:
					switch(data.prev._hx_index) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.oPos += 1;
						break;
					case 4:
						data.fPos += 6;
						break;
					case 5:
						data.fPos += 4;
						break;
					case 6:
						data.fPos += 3;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.oPos += 3;
						break;
					case 9:
						data.fPos += 4;
						break;
					case 10:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 12:
						data.oPos += 4;
						break;
					case 13:
						break;
					case 14:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 15:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 16:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 17:
						data.fPos += 2;
						break;
					case 18:
						data.fPos += 2;
						break;
					case 19:
						data.oPos += 1;
						break;
					case 20:
						data.oPos += 1;
						break;
					case 21:case 22:
						break;
					default:
					}
					data.prev = openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO;
					var this5 = data;
					var c4 = this5;
					openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.cubicCurveTo(c4.buffer.f[c4.fPos],c4.buffer.f[c4.fPos + 1],c4.buffer.f[c4.fPos + 2],c4.buffer.f[c4.fPos + 3],c4.buffer.f[c4.fPos + 4],c4.buffer.f[c4.fPos + 5]);
					if(hasLineStyle) {
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.cubicCurveTo(c4.buffer.f[c4.fPos],c4.buffer.f[c4.fPos + 1],c4.buffer.f[c4.fPos + 2],c4.buffer.f[c4.fPos + 3],c4.buffer.f[c4.fPos + 4],c4.buffer.f[c4.fPos + 5]);
					} else {
						initStrokeX = c4.buffer.f[c4.fPos + 4];
						initStrokeY = c4.buffer.f[c4.fPos + 5];
					}
					break;
				case 5:
					switch(data.prev._hx_index) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.oPos += 1;
						break;
					case 4:
						data.fPos += 6;
						break;
					case 5:
						data.fPos += 4;
						break;
					case 6:
						data.fPos += 3;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.oPos += 3;
						break;
					case 9:
						data.fPos += 4;
						break;
					case 10:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 12:
						data.oPos += 4;
						break;
					case 13:
						break;
					case 14:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 15:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 16:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 17:
						data.fPos += 2;
						break;
					case 18:
						data.fPos += 2;
						break;
					case 19:
						data.oPos += 1;
						break;
					case 20:
						data.oPos += 1;
						break;
					case 21:case 22:
						break;
					default:
					}
					data.prev = openfl__$internal_renderer_DrawCommandType.CURVE_TO;
					var this6 = data;
					var c5 = this6;
					openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.curveTo(c5.buffer.f[c5.fPos],c5.buffer.f[c5.fPos + 1],c5.buffer.f[c5.fPos + 2],c5.buffer.f[c5.fPos + 3]);
					if(hasLineStyle) {
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.curveTo(c5.buffer.f[c5.fPos],c5.buffer.f[c5.fPos + 1],c5.buffer.f[c5.fPos + 2],c5.buffer.f[c5.fPos + 3]);
					} else {
						initStrokeX = c5.buffer.f[c5.fPos + 2];
						initStrokeY = c5.buffer.f[c5.fPos + 3];
					}
					break;
				case 6:
					switch(data.prev._hx_index) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.oPos += 1;
						break;
					case 4:
						data.fPos += 6;
						break;
					case 5:
						data.fPos += 4;
						break;
					case 6:
						data.fPos += 3;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.oPos += 3;
						break;
					case 9:
						data.fPos += 4;
						break;
					case 10:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 12:
						data.oPos += 4;
						break;
					case 13:
						break;
					case 14:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 15:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 16:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 17:
						data.fPos += 2;
						break;
					case 18:
						data.fPos += 2;
						break;
					case 19:
						data.oPos += 1;
						break;
					case 20:
						data.oPos += 1;
						break;
					case 21:case 22:
						break;
					default:
					}
					data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE;
					var this7 = data;
					var c6 = this7;
					openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawCircle(c6.buffer.f[c6.fPos],c6.buffer.f[c6.fPos + 1],c6.buffer.f[c6.fPos + 2]);
					if(hasLineStyle) {
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.drawCircle(c6.buffer.f[c6.fPos],c6.buffer.f[c6.fPos + 1],c6.buffer.f[c6.fPos + 2]);
					}
					break;
				case 7:
					switch(data.prev._hx_index) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.oPos += 1;
						break;
					case 4:
						data.fPos += 6;
						break;
					case 5:
						data.fPos += 4;
						break;
					case 6:
						data.fPos += 3;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.oPos += 3;
						break;
					case 9:
						data.fPos += 4;
						break;
					case 10:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 12:
						data.oPos += 4;
						break;
					case 13:
						break;
					case 14:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 15:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 16:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 17:
						data.fPos += 2;
						break;
					case 18:
						data.fPos += 2;
						break;
					case 19:
						data.oPos += 1;
						break;
					case 20:
						data.oPos += 1;
						break;
					case 21:case 22:
						break;
					default:
					}
					data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE;
					var this8 = data;
					var c7 = this8;
					openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawEllipse(c7.buffer.f[c7.fPos],c7.buffer.f[c7.fPos + 1],c7.buffer.f[c7.fPos + 2],c7.buffer.f[c7.fPos + 3]);
					if(hasLineStyle) {
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.drawEllipse(c7.buffer.f[c7.fPos],c7.buffer.f[c7.fPos + 1],c7.buffer.f[c7.fPos + 2],c7.buffer.f[c7.fPos + 3]);
					}
					break;
				case 8:
					switch(data.prev._hx_index) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.oPos += 1;
						break;
					case 4:
						data.fPos += 6;
						break;
					case 5:
						data.fPos += 4;
						break;
					case 6:
						data.fPos += 3;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.oPos += 3;
						break;
					case 9:
						data.fPos += 4;
						break;
					case 10:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 12:
						data.oPos += 4;
						break;
					case 13:
						break;
					case 14:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 15:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 16:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 17:
						data.fPos += 2;
						break;
					case 18:
						data.fPos += 2;
						break;
					case 19:
						data.oPos += 1;
						break;
					case 20:
						data.oPos += 1;
						break;
					case 21:case 22:
						break;
					default:
					}
					data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_QUADS;
					var this9 = data;
					var c8 = this9;
					openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawQuads(c8.buffer.o[c8.oPos],c8.buffer.o[c8.oPos + 1],c8.buffer.o[c8.oPos + 2]);
					break;
				case 9:
					switch(data.prev._hx_index) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.oPos += 1;
						break;
					case 4:
						data.fPos += 6;
						break;
					case 5:
						data.fPos += 4;
						break;
					case 6:
						data.fPos += 3;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.oPos += 3;
						break;
					case 9:
						data.fPos += 4;
						break;
					case 10:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 12:
						data.oPos += 4;
						break;
					case 13:
						break;
					case 14:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 15:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 16:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 17:
						data.fPos += 2;
						break;
					case 18:
						data.fPos += 2;
						break;
					case 19:
						data.oPos += 1;
						break;
					case 20:
						data.oPos += 1;
						break;
					case 21:case 22:
						break;
					default:
					}
					data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_RECT;
					var this10 = data;
					var c9 = this10;
					openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawRect(c9.buffer.f[c9.fPos],c9.buffer.f[c9.fPos + 1],c9.buffer.f[c9.fPos + 2],c9.buffer.f[c9.fPos + 3]);
					if(hasLineStyle) {
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.drawRect(c9.buffer.f[c9.fPos],c9.buffer.f[c9.fPos + 1],c9.buffer.f[c9.fPos + 2],c9.buffer.f[c9.fPos + 3]);
					}
					break;
				case 10:
					switch(data.prev._hx_index) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.oPos += 1;
						break;
					case 4:
						data.fPos += 6;
						break;
					case 5:
						data.fPos += 4;
						break;
					case 6:
						data.fPos += 3;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.oPos += 3;
						break;
					case 9:
						data.fPos += 4;
						break;
					case 10:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 12:
						data.oPos += 4;
						break;
					case 13:
						break;
					case 14:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 15:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 16:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 17:
						data.fPos += 2;
						break;
					case 18:
						data.fPos += 2;
						break;
					case 19:
						data.oPos += 1;
						break;
					case 20:
						data.oPos += 1;
						break;
					case 21:case 22:
						break;
					default:
					}
					data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT;
					var this11 = data;
					var c10 = this11;
					openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawRoundRect(c10.buffer.f[c10.fPos],c10.buffer.f[c10.fPos + 1],c10.buffer.f[c10.fPos + 2],c10.buffer.f[c10.fPos + 3],c10.buffer.f[c10.fPos + 4],c10.buffer.o[c10.oPos]);
					if(hasLineStyle) {
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.drawRoundRect(c10.buffer.f[c10.fPos],c10.buffer.f[c10.fPos + 1],c10.buffer.f[c10.fPos + 2],c10.buffer.f[c10.fPos + 3],c10.buffer.f[c10.fPos + 4],c10.buffer.o[c10.oPos]);
					}
					break;
				case 12:
					switch(data.prev._hx_index) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.oPos += 1;
						break;
					case 4:
						data.fPos += 6;
						break;
					case 5:
						data.fPos += 4;
						break;
					case 6:
						data.fPos += 3;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.oPos += 3;
						break;
					case 9:
						data.fPos += 4;
						break;
					case 10:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 12:
						data.oPos += 4;
						break;
					case 13:
						break;
					case 14:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 15:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 16:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 17:
						data.fPos += 2;
						break;
					case 18:
						data.fPos += 2;
						break;
					case 19:
						data.oPos += 1;
						break;
					case 20:
						data.oPos += 1;
						break;
					case 21:case 22:
						break;
					default:
					}
					data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_TRIANGLES;
					var this12 = data;
					var c11 = this12;
					openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawTriangles(c11.buffer.o[c11.oPos],c11.buffer.o[c11.oPos + 1],c11.buffer.o[c11.oPos + 2],c11.buffer.o[c11.oPos + 3]);
					break;
				case 13:
					switch(data.prev._hx_index) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.oPos += 1;
						break;
					case 4:
						data.fPos += 6;
						break;
					case 5:
						data.fPos += 4;
						break;
					case 6:
						data.fPos += 3;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.oPos += 3;
						break;
					case 9:
						data.fPos += 4;
						break;
					case 10:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 12:
						data.oPos += 4;
						break;
					case 13:
						break;
					case 14:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 15:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 16:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 17:
						data.fPos += 2;
						break;
					case 18:
						data.fPos += 2;
						break;
					case 19:
						data.oPos += 1;
						break;
					case 20:
						data.oPos += 1;
						break;
					case 21:case 22:
						break;
					default:
					}
					data.prev = openfl__$internal_renderer_DrawCommandType.END_FILL;
					var this13 = data;
					openfl__$internal_renderer_canvas_CanvasGraphics.endFill();
					openfl__$internal_renderer_canvas_CanvasGraphics.endStroke();
					openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = false;
					hasLineStyle = false;
					openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill = null;
					initStrokeX = 0;
					initStrokeY = 0;
					break;
				case 14:
					switch(data.prev._hx_index) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.oPos += 1;
						break;
					case 4:
						data.fPos += 6;
						break;
					case 5:
						data.fPos += 4;
						break;
					case 6:
						data.fPos += 3;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.oPos += 3;
						break;
					case 9:
						data.fPos += 4;
						break;
					case 10:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 12:
						data.oPos += 4;
						break;
					case 13:
						break;
					case 14:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 15:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 16:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 17:
						data.fPos += 2;
						break;
					case 18:
						data.fPos += 2;
						break;
					case 19:
						data.oPos += 1;
						break;
					case 20:
						data.oPos += 1;
						break;
					case 21:case 22:
						break;
					default:
					}
					data.prev = openfl__$internal_renderer_DrawCommandType.LINE_BITMAP_STYLE;
					var this14 = data;
					var c12 = this14;
					if(!hasLineStyle && (initStrokeX != 0 || initStrokeY != 0)) {
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.moveTo(initStrokeX,initStrokeY);
						initStrokeX = 0;
						initStrokeY = 0;
					}
					hasLineStyle = true;
					openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.lineBitmapStyle(c12.buffer.o[c12.oPos],c12.buffer.o[c12.oPos + 1],c12.buffer.b[c12.bPos],c12.buffer.b[c12.bPos + 1]);
					break;
				case 15:
					switch(data.prev._hx_index) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.oPos += 1;
						break;
					case 4:
						data.fPos += 6;
						break;
					case 5:
						data.fPos += 4;
						break;
					case 6:
						data.fPos += 3;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.oPos += 3;
						break;
					case 9:
						data.fPos += 4;
						break;
					case 10:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 12:
						data.oPos += 4;
						break;
					case 13:
						break;
					case 14:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 15:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 16:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 17:
						data.fPos += 2;
						break;
					case 18:
						data.fPos += 2;
						break;
					case 19:
						data.oPos += 1;
						break;
					case 20:
						data.oPos += 1;
						break;
					case 21:case 22:
						break;
					default:
					}
					data.prev = openfl__$internal_renderer_DrawCommandType.LINE_GRADIENT_STYLE;
					var this15 = data;
					var c13 = this15;
					if(!hasLineStyle && (initStrokeX != 0 || initStrokeY != 0)) {
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.moveTo(initStrokeX,initStrokeY);
						initStrokeX = 0;
						initStrokeY = 0;
					}
					hasLineStyle = true;
					openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.lineGradientStyle(c13.buffer.o[c13.oPos],c13.buffer.ii[c13.iiPos],c13.buffer.ff[c13.ffPos],c13.buffer.ii[c13.iiPos + 1],c13.buffer.o[c13.oPos + 1],c13.buffer.o[c13.oPos + 2],c13.buffer.o[c13.oPos + 3],c13.buffer.f[c13.fPos]);
					break;
				case 16:
					switch(data.prev._hx_index) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.oPos += 1;
						break;
					case 4:
						data.fPos += 6;
						break;
					case 5:
						data.fPos += 4;
						break;
					case 6:
						data.fPos += 3;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.oPos += 3;
						break;
					case 9:
						data.fPos += 4;
						break;
					case 10:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 12:
						data.oPos += 4;
						break;
					case 13:
						break;
					case 14:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 15:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 16:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 17:
						data.fPos += 2;
						break;
					case 18:
						data.fPos += 2;
						break;
					case 19:
						data.oPos += 1;
						break;
					case 20:
						data.oPos += 1;
						break;
					case 21:case 22:
						break;
					default:
					}
					data.prev = openfl__$internal_renderer_DrawCommandType.LINE_STYLE;
					var this16 = data;
					var c14 = this16;
					if(!hasLineStyle && c14.buffer.o[c14.oPos] != null) {
						if(initStrokeX != 0 || initStrokeY != 0) {
							openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.moveTo(initStrokeX,initStrokeY);
							initStrokeX = 0;
							initStrokeY = 0;
						}
					}
					hasLineStyle = c14.buffer.o[c14.oPos] != null;
					openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.lineStyle(c14.buffer.o[c14.oPos],c14.buffer.i[c14.iPos],c14.buffer.f[c14.fPos],c14.buffer.b[c14.bPos],c14.buffer.o[c14.oPos + 1],c14.buffer.o[c14.oPos + 2],c14.buffer.o[c14.oPos + 3],c14.buffer.f[c14.fPos + 1]);
					break;
				case 17:
					switch(data.prev._hx_index) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.oPos += 1;
						break;
					case 4:
						data.fPos += 6;
						break;
					case 5:
						data.fPos += 4;
						break;
					case 6:
						data.fPos += 3;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.oPos += 3;
						break;
					case 9:
						data.fPos += 4;
						break;
					case 10:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 12:
						data.oPos += 4;
						break;
					case 13:
						break;
					case 14:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 15:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 16:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 17:
						data.fPos += 2;
						break;
					case 18:
						data.fPos += 2;
						break;
					case 19:
						data.oPos += 1;
						break;
					case 20:
						data.oPos += 1;
						break;
					case 21:case 22:
						break;
					default:
					}
					data.prev = openfl__$internal_renderer_DrawCommandType.LINE_TO;
					var this17 = data;
					var c15 = this17;
					openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.lineTo(c15.buffer.f[c15.fPos],c15.buffer.f[c15.fPos + 1]);
					if(hasLineStyle) {
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.lineTo(c15.buffer.f[c15.fPos],c15.buffer.f[c15.fPos + 1]);
					} else {
						initStrokeX = c15.buffer.f[c15.fPos];
						initStrokeY = c15.buffer.f[c15.fPos + 1];
					}
					break;
				case 18:
					switch(data.prev._hx_index) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.oPos += 1;
						break;
					case 4:
						data.fPos += 6;
						break;
					case 5:
						data.fPos += 4;
						break;
					case 6:
						data.fPos += 3;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.oPos += 3;
						break;
					case 9:
						data.fPos += 4;
						break;
					case 10:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 12:
						data.oPos += 4;
						break;
					case 13:
						break;
					case 14:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 15:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 16:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 17:
						data.fPos += 2;
						break;
					case 18:
						data.fPos += 2;
						break;
					case 19:
						data.oPos += 1;
						break;
					case 20:
						data.oPos += 1;
						break;
					case 21:case 22:
						break;
					default:
					}
					data.prev = openfl__$internal_renderer_DrawCommandType.MOVE_TO;
					var this18 = data;
					var c16 = this18;
					openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.moveTo(c16.buffer.f[c16.fPos],c16.buffer.f[c16.fPos + 1]);
					if(hasLineStyle) {
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.moveTo(c16.buffer.f[c16.fPos],c16.buffer.f[c16.fPos + 1]);
					} else {
						initStrokeX = c16.buffer.f[c16.fPos];
						initStrokeY = c16.buffer.f[c16.fPos + 1];
					}
					break;
				case 19:
					switch(data.prev._hx_index) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.oPos += 1;
						break;
					case 4:
						data.fPos += 6;
						break;
					case 5:
						data.fPos += 4;
						break;
					case 6:
						data.fPos += 3;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.oPos += 3;
						break;
					case 9:
						data.fPos += 4;
						break;
					case 10:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 12:
						data.oPos += 4;
						break;
					case 13:
						break;
					case 14:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 15:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 16:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 17:
						data.fPos += 2;
						break;
					case 18:
						data.fPos += 2;
						break;
					case 19:
						data.oPos += 1;
						break;
					case 20:
						data.oPos += 1;
						break;
					case 21:case 22:
						break;
					default:
					}
					data.prev = openfl__$internal_renderer_DrawCommandType.OVERRIDE_BLEND_MODE;
					var this19 = data;
					var c17 = this19;
					renderer.__setBlendModeContext(openfl__$internal_renderer_canvas_CanvasGraphics.context,c17.buffer.o[c17.oPos]);
					break;
				case 21:
					switch(data.prev._hx_index) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.oPos += 1;
						break;
					case 4:
						data.fPos += 6;
						break;
					case 5:
						data.fPos += 4;
						break;
					case 6:
						data.fPos += 3;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.oPos += 3;
						break;
					case 9:
						data.fPos += 4;
						break;
					case 10:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 12:
						data.oPos += 4;
						break;
					case 13:
						break;
					case 14:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 15:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 16:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 17:
						data.fPos += 2;
						break;
					case 18:
						data.fPos += 2;
						break;
					case 19:
						data.oPos += 1;
						break;
					case 20:
						data.oPos += 1;
						break;
					case 21:case 22:
						break;
					default:
					}
					data.prev = openfl__$internal_renderer_DrawCommandType.WINDING_EVEN_ODD;
					var this20 = data;
					openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.windingEvenOdd();
					openfl__$internal_renderer_canvas_CanvasGraphics.windingRule = "evenodd";
					break;
				case 22:
					switch(data.prev._hx_index) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.oPos += 1;
						break;
					case 4:
						data.fPos += 6;
						break;
					case 5:
						data.fPos += 4;
						break;
					case 6:
						data.fPos += 3;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.oPos += 3;
						break;
					case 9:
						data.fPos += 4;
						break;
					case 10:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 12:
						data.oPos += 4;
						break;
					case 13:
						break;
					case 14:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 15:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 16:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 17:
						data.fPos += 2;
						break;
					case 18:
						data.fPos += 2;
						break;
					case 19:
						data.oPos += 1;
						break;
					case 20:
						data.oPos += 1;
						break;
					case 21:case 22:
						break;
					default:
					}
					data.prev = openfl__$internal_renderer_DrawCommandType.WINDING_NON_ZERO;
					var this21 = data;
					openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.windingNonZero();
					openfl__$internal_renderer_canvas_CanvasGraphics.windingRule = "nonzero";
					break;
				default:
					switch(data.prev._hx_index) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.oPos += 1;
						break;
					case 4:
						data.fPos += 6;
						break;
					case 5:
						data.fPos += 4;
						break;
					case 6:
						data.fPos += 3;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.oPos += 3;
						break;
					case 9:
						data.fPos += 4;
						break;
					case 10:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 12:
						data.oPos += 4;
						break;
					case 13:
						break;
					case 14:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 15:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 16:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 17:
						data.fPos += 2;
						break;
					case 18:
						data.fPos += 2;
						break;
					case 19:
						data.oPos += 1;
						break;
					case 20:
						data.oPos += 1;
						break;
					case 21:case 22:
						break;
					default:
					}
					data.prev = type;
				}
			}
			if(openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.get_length() > 0) {
				openfl__$internal_renderer_canvas_CanvasGraphics.endFill();
			}
			if(openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.get_length() > 0) {
				openfl__$internal_renderer_canvas_CanvasGraphics.endStroke();
			}
			data.destroy();
			graphics.__bitmap = openfl_display_BitmapData.fromCanvas(graphics.__canvas);
		}
		graphics.__softwareDirty = false;
		graphics.set___dirty(false);
	}
};
openfl__$internal_renderer_canvas_CanvasGraphics.renderMask = function(graphics,renderer) {
	if(graphics.__commands.get_length() != 0) {
		openfl__$internal_renderer_canvas_CanvasGraphics.context = renderer.context;
		var positionX = 0.0;
		var positionY = 0.0;
		var offsetX = 0;
		var offsetY = 0;
		var data = new openfl__$internal_renderer_DrawCommandReader(graphics.__commands);
		var x;
		var y;
		var width;
		var height;
		var kappa = .5522848;
		var ox;
		var oy;
		var xe;
		var ye;
		var xm;
		var ym;
		var _g = 0;
		var _g1 = graphics.__commands.types;
		while(_g < _g1.length) {
			var type = _g1[_g];
			++_g;
			switch(type._hx_index) {
			case 4:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO;
				var this1 = data;
				var c = this1;
				openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(c.buffer.f[c.fPos] - offsetX,c.buffer.f[c.fPos + 1] - offsetY,c.buffer.f[c.fPos + 2] - offsetX,c.buffer.f[c.fPos + 3] - offsetY,c.buffer.f[c.fPos + 4] - offsetX,c.buffer.f[c.fPos + 5] - offsetY);
				positionX = c.buffer.f[c.fPos + 4];
				positionY = c.buffer.f[c.fPos + 5];
				break;
			case 5:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.CURVE_TO;
				var this2 = data;
				var c1 = this2;
				openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(c1.buffer.f[c1.fPos] - offsetX,c1.buffer.f[c1.fPos + 1] - offsetY,c1.buffer.f[c1.fPos + 2] - offsetX,c1.buffer.f[c1.fPos + 3] - offsetY);
				positionX = c1.buffer.f[c1.fPos + 2];
				positionY = c1.buffer.f[c1.fPos + 3];
				break;
			case 6:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE;
				var this3 = data;
				var c2 = this3;
				openfl__$internal_renderer_canvas_CanvasGraphics.context.arc(c2.buffer.f[c2.fPos] - offsetX,c2.buffer.f[c2.fPos + 1] - offsetY,c2.buffer.f[c2.fPos + 2],0,Math.PI * 2,true);
				break;
			case 7:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE;
				var this4 = data;
				var c3 = this4;
				x = c3.buffer.f[c3.fPos];
				y = c3.buffer.f[c3.fPos + 1];
				width = c3.buffer.f[c3.fPos + 2];
				height = c3.buffer.f[c3.fPos + 3];
				x -= offsetX;
				y -= offsetY;
				ox = width / 2 * kappa;
				oy = height / 2 * kappa;
				xe = x + width;
				ye = y + height;
				xm = x + width / 2;
				ym = y + height / 2;
				openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(x,ym);
				openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(x,ym - oy,xm - ox,y,xm,y);
				openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(xm + ox,y,xe,ym - oy,xe,ym);
				openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(xe,ym + oy,xm + ox,ye,xm,ye);
				openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(xm - ox,ye,x,ym + oy,x,ym);
				break;
			case 9:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_RECT;
				var this5 = data;
				var c4 = this5;
				openfl__$internal_renderer_canvas_CanvasGraphics.context.beginPath();
				openfl__$internal_renderer_canvas_CanvasGraphics.context.rect(c4.buffer.f[c4.fPos] - offsetX,c4.buffer.f[c4.fPos + 1] - offsetY,c4.buffer.f[c4.fPos + 2],c4.buffer.f[c4.fPos + 3]);
				openfl__$internal_renderer_canvas_CanvasGraphics.context.closePath();
				break;
			case 10:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT;
				var this6 = data;
				var c5 = this6;
				openfl__$internal_renderer_canvas_CanvasGraphics.drawRoundRect(c5.buffer.f[c5.fPos] - offsetX,c5.buffer.f[c5.fPos + 1] - offsetY,c5.buffer.f[c5.fPos + 2],c5.buffer.f[c5.fPos + 3],c5.buffer.f[c5.fPos + 4],c5.buffer.o[c5.oPos]);
				break;
			case 17:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_TO;
				var this7 = data;
				var c6 = this7;
				openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(c6.buffer.f[c6.fPos] - offsetX,c6.buffer.f[c6.fPos + 1] - offsetY);
				positionX = c6.buffer.f[c6.fPos];
				positionY = c6.buffer.f[c6.fPos + 1];
				break;
			case 18:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.MOVE_TO;
				var this8 = data;
				var c7 = this8;
				openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(c7.buffer.f[c7.fPos] - offsetX,c7.buffer.f[c7.fPos + 1] - offsetY);
				positionX = c7.buffer.f[c7.fPos];
				positionY = c7.buffer.f[c7.fPos + 1];
				break;
			default:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = type;
			}
		}
		data.destroy();
	}
};
openfl__$internal_renderer_canvas_CanvasGraphics.setSmoothing = function(smooth) {
	if(!openfl__$internal_renderer_canvas_CanvasGraphics.allowSmoothing) {
		smooth = false;
	}
	if(openfl__$internal_renderer_canvas_CanvasGraphics.context.imageSmoothingEnabled != smooth) {
		openfl__$internal_renderer_canvas_CanvasGraphics.context.imageSmoothingEnabled = smooth;
	}
};
var openfl__$internal_renderer_canvas_CanvasShape = function() { };
$hxClasses["openfl._internal.renderer.canvas.CanvasShape"] = openfl__$internal_renderer_canvas_CanvasShape;
openfl__$internal_renderer_canvas_CanvasShape.__name__ = "openfl._internal.renderer.canvas.CanvasShape";
openfl__$internal_renderer_canvas_CanvasShape.render = function(shape,renderer) {
	if(!shape.__renderable) {
		return;
	}
	var alpha = renderer.__getAlpha(shape.__worldAlpha);
	if(alpha <= 0) {
		return;
	}
	var graphics = shape.__graphics;
	if(graphics != null) {
		openfl__$internal_renderer_canvas_CanvasGraphics.render(graphics,renderer);
		var width = graphics.__width;
		var height = graphics.__height;
		var canvas = graphics.__canvas;
		if(canvas != null && graphics.__visible && width >= 1 && height >= 1) {
			var transform = graphics.__worldTransform;
			var context = renderer.context;
			var scrollRect = shape.__scrollRect;
			var scale9Grid = shape.__worldScale9Grid;
			if(scrollRect == null || scrollRect.width > 0 && scrollRect.height > 0) {
				renderer.__setBlendMode(shape.__worldBlendMode);
				renderer.__pushMaskObject(shape);
				context.globalAlpha = alpha;
				if(scale9Grid != null && transform.b == 0 && transform.c == 0) {
					context.setTransform(1,0,0,1,transform.tx,transform.ty);
					var bounds = graphics.__bounds;
					var scaleX = graphics.__renderTransform.a;
					var scaleY = graphics.__renderTransform.d;
					var renderScaleX = transform.a;
					var renderScaleY = transform.d;
					var left = Math.max(1,Math.round(scale9Grid.x * scaleX));
					var top = Math.round(scale9Grid.y * scaleY);
					var right = Math.max(1,Math.round((bounds.get_right() - scale9Grid.get_right()) * scaleX));
					var bottom = Math.round((bounds.get_bottom() - scale9Grid.get_bottom()) * scaleY);
					var centerWidth = Math.round(scale9Grid.width * scaleX);
					var centerHeight = Math.round(scale9Grid.height * scaleY);
					var renderLeft = Math.round(scale9Grid.x * renderScaleX);
					var renderTop = Math.round(scale9Grid.y * renderScaleY);
					var renderRight = Math.round((bounds.get_right() - scale9Grid.get_right()) * renderScaleX);
					var renderBottom = Math.round((bounds.get_bottom() - scale9Grid.get_bottom()) * renderScaleY);
					var renderCenterWidth = Math.round(width * renderScaleX) - renderLeft - renderRight;
					var renderCenterHeight = Math.round(height * renderScaleY) - renderTop - renderBottom;
					renderer.applySmoothing(context,false);
					if(centerWidth != 0 && centerHeight != 0) {
						context.drawImage(canvas,0,0,left,top,0,0,renderLeft,renderTop);
						context.drawImage(canvas,left,0,centerWidth,top,renderLeft,0,renderCenterWidth,renderTop);
						context.drawImage(canvas,left + centerWidth,0,right,top,renderLeft + renderCenterWidth,0,renderRight,renderTop);
						context.drawImage(canvas,0,top,left,centerHeight,0,renderTop,renderLeft,renderCenterHeight);
						context.drawImage(canvas,left,top,centerWidth,centerHeight,renderLeft,renderTop,renderCenterWidth,renderCenterHeight);
						context.drawImage(canvas,left + centerWidth,top,right,centerHeight,renderLeft + renderCenterWidth,renderTop,renderRight,renderCenterHeight);
						context.drawImage(canvas,0,top + centerHeight,left,bottom,0,renderTop + renderCenterHeight,renderLeft,renderBottom);
						context.drawImage(canvas,left,top + centerHeight,centerWidth,bottom,renderLeft,renderTop + renderCenterHeight,renderCenterWidth,renderBottom);
						context.drawImage(canvas,left + centerWidth,top + centerHeight,right,bottom,renderLeft + renderCenterWidth,renderTop + renderCenterHeight,renderRight,renderBottom);
					} else if(centerWidth == 0 && centerHeight != 0) {
						var renderWidth = renderLeft + renderCenterWidth + renderRight;
						context.drawImage(canvas,0,0,width,top,0,0,renderWidth,renderTop);
						context.drawImage(canvas,0,top,width,centerHeight,0,renderTop,renderWidth,renderCenterHeight);
						context.drawImage(canvas,0,top + centerHeight,width,bottom,0,renderTop + renderCenterHeight,renderWidth,renderBottom);
					} else if(centerHeight == 0 && centerWidth != 0) {
						var renderHeight = renderTop + renderCenterHeight + renderBottom;
						context.drawImage(canvas,0,0,left,height,0,0,renderLeft,renderHeight);
						context.drawImage(canvas,left,0,centerWidth,height,renderLeft,0,renderCenterWidth,renderHeight);
						context.drawImage(canvas,left + centerWidth,0,right,height,renderLeft + renderCenterWidth,0,renderRight,renderHeight);
					}
				} else {
					renderer.setTransform(transform,context);
					if(renderer.__isDOM) {
						var reverseScale = 1 / renderer.pixelRatio;
						context.scale(reverseScale,reverseScale);
					}
					context.drawImage(canvas,0,0,width,height);
				}
				renderer.__popMaskObject(shape);
			}
		}
	}
};
var openfl__$internal_renderer_canvas_CanvasTextField = function() { };
$hxClasses["openfl._internal.renderer.canvas.CanvasTextField"] = openfl__$internal_renderer_canvas_CanvasTextField;
openfl__$internal_renderer_canvas_CanvasTextField.__name__ = "openfl._internal.renderer.canvas.CanvasTextField";
openfl__$internal_renderer_canvas_CanvasTextField.render = function(textField,renderer,transform) {
	var textEngine = textField.__textEngine;
	var bounds = textEngine.background || textEngine.border ? textEngine.bounds : textEngine.textBounds;
	var graphics = textField.__graphics;
	if(textField.__dirty) {
		textField.__updateLayout();
		if(graphics.__bounds == null) {
			graphics.__bounds = new openfl_geom_Rectangle();
		}
		graphics.__bounds.copyFrom(bounds);
	}
	graphics.__update(renderer.__worldTransform);
	if(textField.__dirty || graphics.__softwareDirty) {
		var width = graphics.__width;
		var height = graphics.__height;
		if((textEngine.text == null || textEngine.text == "") && !textEngine.background && !textEngine.border && !textEngine.__hasFocus && (textEngine.type != 1 || !textEngine.selectable) || (textEngine.width <= 0 || textEngine.height <= 0) && textEngine.autoSize != 2) {
			textField.__graphics.__canvas = null;
			textField.__graphics.__context = null;
			textField.__graphics.__bitmap = null;
			textField.__graphics.__softwareDirty = false;
			textField.__graphics.set___dirty(false);
			textField.__dirty = false;
		} else {
			if(textField.__graphics.__canvas == null) {
				textField.__graphics.__canvas = window.document.createElement("canvas");
				textField.__graphics.__context = textField.__graphics.__canvas.getContext("2d");
			}
			openfl__$internal_renderer_canvas_CanvasTextField.context = graphics.__context;
			var transform = graphics.__renderTransform;
			if(renderer.__isDOM) {
				var scale = renderer.pixelRatio;
				graphics.__canvas.width = width * scale | 0;
				graphics.__canvas.height = height * scale | 0;
				graphics.__canvas.style.width = width + "px";
				graphics.__canvas.style.height = height + "px";
				var matrix = openfl_geom_Matrix.__pool.get();
				matrix.copyFrom(transform);
				matrix.scale(scale,scale);
				renderer.setTransform(matrix,openfl__$internal_renderer_canvas_CanvasTextField.context);
				openfl_geom_Matrix.__pool.release(matrix);
			} else {
				graphics.__canvas.width = width;
				graphics.__canvas.height = height;
				openfl__$internal_renderer_canvas_CanvasTextField.context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx,transform.ty);
			}
			if(openfl__$internal_renderer_canvas_CanvasTextField.clearRect == null) {
				openfl__$internal_renderer_canvas_CanvasTextField.clearRect = (typeof navigator !== 'undefined' && typeof navigator['isCocoonJS'] !== 'undefined');
			}
			if(openfl__$internal_renderer_canvas_CanvasTextField.clearRect) {
				openfl__$internal_renderer_canvas_CanvasTextField.context.clearRect(0,0,graphics.__canvas.width,graphics.__canvas.height);
			}
			if(textEngine.text != null && textEngine.text != "" || textEngine.__hasFocus) {
				var text = textEngine.text;
				if(!renderer.__allowSmoothing || textEngine.antiAliasType == 0 && textEngine.sharpness == 400) {
					graphics.__context.imageSmoothingEnabled = false;
				} else {
					graphics.__context.imageSmoothingEnabled = true;
				}
				if(textEngine.border || textEngine.background) {
					openfl__$internal_renderer_canvas_CanvasTextField.context.rect(0.5,0.5,bounds.width - 1,bounds.height - 1);
					if(textEngine.background) {
						var tmp = StringTools.hex(textEngine.backgroundColor & 16777215,6);
						openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#" + tmp;
						openfl__$internal_renderer_canvas_CanvasTextField.context.fill();
					}
					if(textEngine.border) {
						openfl__$internal_renderer_canvas_CanvasTextField.context.lineWidth = 1;
						var tmp = StringTools.hex(textEngine.borderColor & 16777215,6);
						openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle = "#" + tmp;
						openfl__$internal_renderer_canvas_CanvasTextField.context.stroke();
					}
				}
				openfl__$internal_renderer_canvas_CanvasTextField.context.textBaseline = "alphabetic";
				openfl__$internal_renderer_canvas_CanvasTextField.context.textAlign = "start";
				var scrollX = -textField.get_scrollH();
				var scrollY = 0.0;
				var _g = 0;
				var _g1 = textField.get_scrollV() - 1;
				while(_g < _g1) {
					var i = _g++;
					scrollY -= textEngine.lineHeights.get(i);
				}
				var advance;
				var group = textEngine.layoutGroups.iterator();
				while(group.hasNext()) {
					var group1 = group.next();
					if(group1.lineIndex < textField.get_scrollV() - 1) {
						continue;
					}
					if(group1.lineIndex > textEngine.get_bottomScrollV() - 1) {
						break;
					}
					var color = "#" + StringTools.hex(group1.format.color & 16777215,6);
					openfl__$internal_renderer_canvas_CanvasTextField.context.font = openfl__$internal_text_TextEngine.getFont(group1.format);
					openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = color;
					openfl__$internal_renderer_canvas_CanvasTextField.context.fillText(text.substring(group1.startIndex,group1.endIndex),group1.offsetX + scrollX - bounds.x,group1.offsetY + group1.ascent + scrollY - bounds.y);
					if(textField.__caretIndex > -1 && textEngine.selectable) {
						if(textField.__selectionIndex == textField.__caretIndex) {
							if(textField.__showCursor && group1.startIndex <= textField.__caretIndex && group1.endIndex >= textField.__caretIndex) {
								advance = 0.0;
								var _g = 0;
								var _g1 = textField.__caretIndex - group1.startIndex;
								while(_g < _g1) {
									var i = _g++;
									if(group1.positions.length <= i) {
										break;
									}
									advance += group1.positions[i];
								}
								var scrollY1 = 0.0;
								var _g2 = textField.get_scrollV();
								var _g3 = group1.lineIndex + 1;
								while(_g2 < _g3) {
									var i1 = _g2++;
									scrollY1 += textEngine.lineHeights.get(i1 - 1);
								}
								openfl__$internal_renderer_canvas_CanvasTextField.context.beginPath();
								var tmp = StringTools.hex(group1.format.color & 16777215,6);
								openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle = "#" + tmp;
								openfl__$internal_renderer_canvas_CanvasTextField.context.moveTo(group1.offsetX + advance - textField.get_scrollH() - bounds.x,scrollY1 + 2 - bounds.y);
								openfl__$internal_renderer_canvas_CanvasTextField.context.lineWidth = 1;
								openfl__$internal_renderer_canvas_CanvasTextField.context.lineTo(group1.offsetX + advance - textField.get_scrollH() - bounds.x,scrollY1 + openfl__$internal_text_TextEngine.getFormatHeight(textField.get_defaultTextFormat()) - 1 - bounds.y);
								openfl__$internal_renderer_canvas_CanvasTextField.context.stroke();
								openfl__$internal_renderer_canvas_CanvasTextField.context.closePath();
							}
						} else if(group1.startIndex <= textField.__caretIndex && group1.endIndex >= textField.__caretIndex || group1.startIndex <= textField.__selectionIndex && group1.endIndex >= textField.__selectionIndex || group1.startIndex > textField.__caretIndex && group1.endIndex < textField.__selectionIndex || group1.startIndex > textField.__selectionIndex && group1.endIndex < textField.__caretIndex) {
							var selectionStart = Math.min(textField.__selectionIndex,textField.__caretIndex) | 0;
							var selectionEnd = Math.max(textField.__selectionIndex,textField.__caretIndex) | 0;
							if(group1.startIndex > selectionStart) {
								selectionStart = group1.startIndex;
							}
							if(group1.endIndex < selectionEnd) {
								selectionEnd = group1.endIndex;
							}
							var end;
							var start = textField.getCharBoundaries(selectionStart);
							if(selectionEnd >= group1.endIndex) {
								end = textField.getCharBoundaries(group1.endIndex - 1);
								if(end != null) {
									end.x += end.width + 2;
								}
							} else {
								end = textField.getCharBoundaries(selectionEnd);
							}
							if(start != null && end != null) {
								openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#000000";
								openfl__$internal_renderer_canvas_CanvasTextField.context.fillRect(start.x + scrollX,start.y + scrollY,end.x - start.x,group1.height);
								openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#FFFFFF";
								openfl__$internal_renderer_canvas_CanvasTextField.context.fillText(text.substring(selectionStart,selectionEnd),scrollX + start.x,group1.offsetY + group1.ascent + scrollY);
							}
						}
					}
					if(group1.format.underline) {
						openfl__$internal_renderer_canvas_CanvasTextField.context.beginPath();
						openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle = color;
						openfl__$internal_renderer_canvas_CanvasTextField.context.lineWidth = 1;
						var x = group1.offsetX + scrollX - bounds.x;
						var y = Math.floor(group1.offsetY + scrollY + group1.ascent - bounds.y) + 0.5;
						openfl__$internal_renderer_canvas_CanvasTextField.context.moveTo(x,y);
						openfl__$internal_renderer_canvas_CanvasTextField.context.lineTo(x + group1.width,y);
						openfl__$internal_renderer_canvas_CanvasTextField.context.stroke();
						openfl__$internal_renderer_canvas_CanvasTextField.context.closePath();
					}
				}
			} else {
				if(textEngine.border || textEngine.background) {
					if(textEngine.border) {
						openfl__$internal_renderer_canvas_CanvasTextField.context.rect(0.5,0.5,bounds.width - 1,bounds.height - 1);
					} else {
						openfl__$internal_renderer_canvas_CanvasTextField.context.rect(0,0,bounds.width,bounds.height);
					}
					if(textEngine.background) {
						var tmp = StringTools.hex(textEngine.backgroundColor & 16777215,6);
						openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#" + tmp;
						openfl__$internal_renderer_canvas_CanvasTextField.context.fill();
					}
					if(textEngine.border) {
						openfl__$internal_renderer_canvas_CanvasTextField.context.lineWidth = 1;
						openfl__$internal_renderer_canvas_CanvasTextField.context.lineCap = "square";
						var tmp = StringTools.hex(textEngine.borderColor & 16777215,6);
						openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle = "#" + tmp;
						openfl__$internal_renderer_canvas_CanvasTextField.context.stroke();
					}
				}
				if(textField.__caretIndex > -1 && textEngine.selectable && textField.__showCursor) {
					var scrollX = -textField.get_scrollH();
					var scrollY = 0.0;
					var _g = 0;
					var _g1 = textField.get_scrollV() - 1;
					while(_g < _g1) {
						var i = _g++;
						scrollY += textEngine.lineHeights.get(i);
					}
					openfl__$internal_renderer_canvas_CanvasTextField.context.beginPath();
					var tmp = StringTools.hex(textField.get_defaultTextFormat().color & 16777215,6);
					openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle = "#" + tmp;
					openfl__$internal_renderer_canvas_CanvasTextField.context.moveTo(scrollX + 2.5,scrollY + 2.5);
					openfl__$internal_renderer_canvas_CanvasTextField.context.lineWidth = 1;
					openfl__$internal_renderer_canvas_CanvasTextField.context.lineTo(scrollX + 2.5,scrollY + openfl__$internal_text_TextEngine.getFormatHeight(textField.get_defaultTextFormat()) - 1);
					openfl__$internal_renderer_canvas_CanvasTextField.context.stroke();
					openfl__$internal_renderer_canvas_CanvasTextField.context.closePath();
				}
			}
			graphics.__bitmap = openfl_display_BitmapData.fromCanvas(textField.__graphics.__canvas);
			graphics.__visible = true;
			textField.__dirty = false;
			graphics.__softwareDirty = false;
			graphics.set___dirty(false);
		}
	}
};
var openfl__$internal_renderer_canvas_CanvasTilemap = function() { };
$hxClasses["openfl._internal.renderer.canvas.CanvasTilemap"] = openfl__$internal_renderer_canvas_CanvasTilemap;
openfl__$internal_renderer_canvas_CanvasTilemap.__name__ = "openfl._internal.renderer.canvas.CanvasTilemap";
openfl__$internal_renderer_canvas_CanvasTilemap.render = function(tilemap,renderer) {
	if(!tilemap.__renderable || tilemap.__group.__tiles.length == 0) {
		return;
	}
	var alpha = renderer.__getAlpha(tilemap.__worldAlpha);
	if(alpha <= 0) {
		return;
	}
	var context = renderer.context;
	renderer.__setBlendMode(tilemap.__worldBlendMode);
	renderer.__pushMaskObject(tilemap);
	var rect = openfl_geom_Rectangle.__pool.get();
	rect.setTo(0,0,tilemap.__width,tilemap.__height);
	renderer.__pushMaskRect(rect,tilemap.__renderTransform);
	if(!renderer.__allowSmoothing || !tilemap.smoothing) {
		context.imageSmoothingEnabled = false;
	}
	openfl__$internal_renderer_canvas_CanvasTilemap.renderTileContainer(tilemap.__group,renderer,tilemap.__renderTransform,tilemap.__tileset,renderer.__allowSmoothing && tilemap.smoothing,tilemap.tileAlphaEnabled,alpha,tilemap.tileBlendModeEnabled,tilemap.__worldBlendMode,null,null,rect);
	if(!renderer.__allowSmoothing || !tilemap.smoothing) {
		context.imageSmoothingEnabled = true;
	}
	renderer.__popMaskRect();
	renderer.__popMaskObject(tilemap);
	openfl_geom_Rectangle.__pool.release(rect);
};
openfl__$internal_renderer_canvas_CanvasTilemap.renderTileContainer = function(group,renderer,parentTransform,defaultTileset,smooth,alphaEnabled,worldAlpha,blendModeEnabled,defaultBlendMode,cacheBitmapData,source,rect) {
	var context = renderer.context;
	var roundPixels = renderer.__roundPixels;
	var tileTransform = openfl_geom_Matrix.__pool.get();
	var tiles = group.__tiles;
	var length = group.__length;
	var tile;
	var tileset;
	var alpha;
	var visible;
	var blendMode = null;
	var id;
	var tileData;
	var tileRect;
	var bitmapData;
	var _g = 0;
	var _g1 = length;
	while(_g < _g1) {
		var i = _g++;
		tile = tiles[i];
		tileTransform.setTo(1,0,0,1,-tile.get_originX(),-tile.get_originY());
		tileTransform.concat(tile.get_matrix());
		tileTransform.concat(parentTransform);
		if(roundPixels) {
			tileTransform.tx = Math.round(tileTransform.tx);
			tileTransform.ty = Math.round(tileTransform.ty);
		}
		tileset = tile.get_tileset() != null ? tile.get_tileset() : defaultTileset;
		alpha = tile.get_alpha() * worldAlpha;
		visible = tile.get_visible();
		if(!visible || alpha <= 0) {
			continue;
		}
		if(!alphaEnabled) {
			alpha = 1;
		}
		if(blendModeEnabled) {
			blendMode = tile.__blendMode != null ? tile.__blendMode : defaultBlendMode;
		}
		if(tile.__length > 0) {
			openfl__$internal_renderer_canvas_CanvasTilemap.renderTileContainer(tile,renderer,tileTransform,tileset,smooth,alphaEnabled,alpha,blendModeEnabled,blendMode,cacheBitmapData,source,rect);
		} else {
			if(tileset == null) {
				continue;
			}
			id = tile.get_id();
			if(id == -1) {
				tileRect = tile.__rect;
				if(tileRect == null || tileRect.width <= 0 || tileRect.height <= 0) {
					continue;
				}
			} else {
				tileData = tileset.__data[id];
				if(tileData == null) {
					continue;
				}
				rect.setTo(tileData.x,tileData.y,tileData.width,tileData.height);
				tileRect = rect;
			}
			bitmapData = tileset.__bitmapData;
			if(bitmapData == null) {
				continue;
			}
			if(bitmapData != cacheBitmapData) {
				if(bitmapData.image.buffer.__srcImage == null) {
					lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(bitmapData.image);
				}
				source = bitmapData.image.get_src();
				cacheBitmapData = bitmapData;
			}
			context.globalAlpha = alpha;
			if(blendModeEnabled) {
				renderer.__setBlendMode(blendMode);
			}
			renderer.setTransform(tileTransform,context);
			context.drawImage(source,tileRect.x,tileRect.y,tileRect.width,tileRect.height,0,0,tileRect.width,tileRect.height);
		}
	}
	openfl_geom_Matrix.__pool.release(tileTransform);
};
var openfl__$internal_renderer_context3D_Context3DBitmap = function() { };
$hxClasses["openfl._internal.renderer.context3D.Context3DBitmap"] = openfl__$internal_renderer_context3D_Context3DBitmap;
openfl__$internal_renderer_context3D_Context3DBitmap.__name__ = "openfl._internal.renderer.context3D.Context3DBitmap";
openfl__$internal_renderer_context3D_Context3DBitmap.render = function(bitmap,renderer) {
	if(!bitmap.__renderable || bitmap.__worldAlpha <= 0) {
		return;
	}
	if(bitmap.__bitmapData != null && bitmap.__bitmapData.__isValid) {
		var context = renderer.__context3D;
		renderer.__setBlendMode(bitmap.__worldBlendMode);
		renderer.__pushMaskObject(bitmap);
		var shader = renderer.__initDisplayShader(bitmap.__worldShader);
		renderer.setShader(shader);
		renderer.applyBitmapData(bitmap.__bitmapData,renderer.__allowSmoothing && (bitmap.smoothing || renderer.__upscaled));
		renderer.applyMatrix(renderer.__getMatrix(bitmap.__renderTransform,bitmap.pixelSnapping));
		renderer.applyAlpha(bitmap.__worldAlpha);
		renderer.applyColorTransform(bitmap.__worldColorTransform);
		renderer.updateShader();
		var vertexBuffer = bitmap.__bitmapData.getVertexBuffer(context);
		if(shader.__position != null) {
			context.setVertexBufferAt(shader.__position.index,vertexBuffer,0,3);
		}
		if(shader.__textureCoord != null) {
			context.setVertexBufferAt(shader.__textureCoord.index,vertexBuffer,3,2);
		}
		var indexBuffer = bitmap.__bitmapData.getIndexBuffer(context);
		context.drawTriangles(indexBuffer);
		openfl__$internal_renderer_context3D_stats_Context3DStats.incrementDrawCall(0);
		renderer.__clearShader();
		renderer.__popMaskObject(bitmap);
	}
};
openfl__$internal_renderer_context3D_Context3DBitmap.renderMask = function(bitmap,renderer) {
	if(bitmap.__bitmapData != null && bitmap.__bitmapData.__isValid) {
		var context = renderer.__context3D;
		var shader = renderer.__maskShader;
		renderer.setShader(shader);
		renderer.applyBitmapData(openfl__$internal_renderer_context3D_Context3DMaskShader.opaqueBitmapData,true);
		renderer.applyMatrix(renderer.__getMatrix(bitmap.__renderTransform,bitmap.pixelSnapping));
		renderer.updateShader();
		var vertexBuffer = bitmap.__bitmapData.getVertexBuffer(context);
		if(shader.__position != null) {
			context.setVertexBufferAt(shader.__position.index,vertexBuffer,0,3);
		}
		if(shader.__textureCoord != null) {
			context.setVertexBufferAt(shader.__textureCoord.index,vertexBuffer,3,2);
		}
		var indexBuffer = bitmap.__bitmapData.getIndexBuffer(context);
		context.drawTriangles(indexBuffer);
		openfl__$internal_renderer_context3D_stats_Context3DStats.incrementDrawCall(0);
		renderer.__clearShader();
	}
};
var openfl__$internal_renderer_context3D_Context3DBuffer = function(context3D,elementType,elementCount,dataPerVertex) {
	this.context3D = context3D;
	this.elementType = elementType;
	this.dataPerVertex = dataPerVertex;
	this.indexCount = 0;
	this.vertexCount = 0;
	this.resize(elementCount);
};
$hxClasses["openfl._internal.renderer.context3D.Context3DBuffer"] = openfl__$internal_renderer_context3D_Context3DBuffer;
openfl__$internal_renderer_context3D_Context3DBuffer.__name__ = "openfl._internal.renderer.context3D.Context3DBuffer";
openfl__$internal_renderer_context3D_Context3DBuffer.prototype = {
	dataPerVertex: null
	,elementCount: null
	,elementType: null
	,indexBufferData: null
	,indexBuffers: null
	,indexCount: null
	,vertexBuffer: null
	,vertexBufferData: null
	,vertexCount: null
	,context3D: null
	,drawElements: function(start,length) {
		if(length == null) {
			length = -1;
		}
		if(this.indexCount == 0 || this.vertexCount == 0) {
			return;
		}
		if(this.elementType._hx_index == 0) {
			if(length == -1) {
				length = this.elementCount * 2;
			}
			if(start < 10922 && length - start < 10922) {
				this.context3D.drawTriangles(this.indexBuffers[0],start,length * 2);
			} else {
				var end = start + length;
				while(start < end) {
					var arrayBufferIndex = Math.floor(start / 10922);
					length = Math.min(end - start,10922) | 0;
					if(length <= 0) {
						break;
					}
					this.context3D.drawTriangles(this.indexBuffers[arrayBufferIndex],(start - arrayBufferIndex * 10922) * 3,length * 2);
					start += length;
				}
			}
		}
	}
	,flushVertexBufferData: function() {
		if(this.vertexBufferData.length > this.vertexCount) {
			this.vertexCount = this.vertexBufferData.length;
			this.vertexBuffer = this.context3D.createVertexBuffer(this.vertexCount,this.dataPerVertex,0);
		}
		this.vertexBuffer.uploadFromTypedArray(this.vertexBufferData);
	}
	,resize: function(elementCount,dataPerVertex) {
		if(dataPerVertex == null) {
			dataPerVertex = -1;
		}
		this.elementCount = elementCount;
		if(dataPerVertex == -1) {
			dataPerVertex = this.dataPerVertex;
		}
		if(dataPerVertex != this.dataPerVertex) {
			this.vertexBuffer = null;
			this.vertexCount = 0;
			this.dataPerVertex = dataPerVertex;
		}
		var numVertices = 0;
		switch(this.elementType._hx_index) {
		case 0:
			numVertices = elementCount * 4;
			break;
		case 1:
			numVertices = elementCount * 3;
			break;
		case 2:
			numVertices = elementCount * 3;
			break;
		}
		var vertexLength = numVertices * dataPerVertex;
		if(this.vertexBufferData == null) {
			var array = null;
			var vector = null;
			var view = null;
			var buffer = null;
			var len = null;
			var this1;
			if(vertexLength != null) {
				this1 = new Float32Array(vertexLength);
			} else if(array != null) {
				this1 = new Float32Array(array);
			} else if(vector != null) {
				this1 = new Float32Array(vector.__array);
			} else if(view != null) {
				this1 = new Float32Array(view);
			} else if(buffer != null) {
				if(len == null) {
					this1 = new Float32Array(buffer,0);
				} else {
					this1 = new Float32Array(buffer,0,len);
				}
			} else {
				this1 = null;
			}
			this.vertexBufferData = this1;
		} else if(vertexLength > this.vertexBufferData.length) {
			var cacheBufferData = this.vertexBufferData;
			var array = null;
			var vector = null;
			var view = null;
			var buffer = null;
			var len = null;
			var this1;
			if(vertexLength != null) {
				this1 = new Float32Array(vertexLength);
			} else if(array != null) {
				this1 = new Float32Array(array);
			} else if(vector != null) {
				this1 = new Float32Array(vector.__array);
			} else if(view != null) {
				this1 = new Float32Array(view);
			} else if(buffer != null) {
				if(len == null) {
					this1 = new Float32Array(buffer,0);
				} else {
					this1 = new Float32Array(buffer,0,len);
				}
			} else {
				this1 = null;
			}
			this.vertexBufferData = this1;
			this.vertexBufferData.set(cacheBufferData);
		}
	}
	,__class__: openfl__$internal_renderer_context3D_Context3DBuffer
};
var openfl__$internal_renderer_context3D_Context3DElementType = $hxEnums["openfl._internal.renderer.context3D.Context3DElementType"] = { __ename__ : "openfl._internal.renderer.context3D.Context3DElementType", __constructs__ : ["QUADS","TRIANGLES","TRIANGLE_INDICES"]
	,QUADS: {_hx_index:0,__enum__:"openfl._internal.renderer.context3D.Context3DElementType",toString:$estr}
	,TRIANGLES: {_hx_index:1,__enum__:"openfl._internal.renderer.context3D.Context3DElementType",toString:$estr}
	,TRIANGLE_INDICES: {_hx_index:2,__enum__:"openfl._internal.renderer.context3D.Context3DElementType",toString:$estr}
};
var openfl__$internal_renderer_context3D_Context3DDisplayObject = function() { };
$hxClasses["openfl._internal.renderer.context3D.Context3DDisplayObject"] = openfl__$internal_renderer_context3D_Context3DDisplayObject;
openfl__$internal_renderer_context3D_Context3DDisplayObject.__name__ = "openfl._internal.renderer.context3D.Context3DDisplayObject";
openfl__$internal_renderer_context3D_Context3DDisplayObject.render = function(displayObject,renderer) {
	if(displayObject.opaqueBackground == null && displayObject.__graphics == null) {
		return;
	}
	if(!displayObject.__renderable || displayObject.__worldAlpha <= 0) {
		return;
	}
	if(displayObject.opaqueBackground != null && !displayObject.__isCacheBitmapRender && displayObject.get_width() > 0 && displayObject.get_height() > 0) {
		renderer.__setBlendMode(displayObject.__worldBlendMode);
		renderer.__pushMaskObject(displayObject);
		var context = renderer.__context3D;
		var rect = openfl_geom_Rectangle.__pool.get();
		rect.setTo(0,0,displayObject.get_width(),displayObject.get_height());
		renderer.__pushMaskRect(rect,displayObject.__renderTransform);
		var color = displayObject.opaqueBackground;
		context.clear((color >>> 16 & 255) / 255,(color >>> 8 & 255) / 255,(color & 255) / 255,1,0,0,1);
		renderer.__popMaskRect();
		renderer.__popMaskObject(displayObject);
		openfl_geom_Rectangle.__pool.release(rect);
	}
	if(displayObject.__graphics != null) {
		openfl__$internal_renderer_context3D_Context3DShape.render(displayObject,renderer);
	}
};
openfl__$internal_renderer_context3D_Context3DDisplayObject.renderMask = function(displayObject,renderer) {
	if(displayObject.opaqueBackground == null && displayObject.__graphics == null) {
		return;
	}
	var tmp = displayObject.opaqueBackground != null && !displayObject.__isCacheBitmapRender && displayObject.get_width() > 0 && displayObject.get_height() > 0;
	if(displayObject.__graphics != null) {
		openfl__$internal_renderer_context3D_Context3DShape.renderMask(displayObject,renderer);
	}
};
var openfl_display_BitmapData = function(width,height,transparent,fillColor) {
	if(fillColor == null) {
		fillColor = -1;
	}
	if(transparent == null) {
		transparent = true;
	}
	this.transparent = transparent;
	if(width == null) {
		width = 0;
	}
	if(height == null) {
		height = 0;
	}
	if(width < 0) {
		width = 0;
	}
	if(height < 0) {
		height = 0;
	}
	this.width = width;
	this.height = height;
	this.rect = new openfl_geom_Rectangle(0,0,width,height);
	this.__textureWidth = width;
	this.__textureHeight = height;
	if(width > 0 && height > 0) {
		if(transparent) {
			if((fillColor & -16777216) == 0) {
				fillColor = 0;
			}
		} else {
			fillColor = -16777216 | fillColor & 16777215;
		}
		fillColor = fillColor << 8 | fillColor >>> 24 & 255;
		this.image = new lime_graphics_Image(null,0,0,width,height,fillColor);
		this.image.set_transparent(transparent);
		this.__isValid = true;
		this.readable = true;
	}
	this.__renderTransform = new openfl_geom_Matrix();
	this.__worldAlpha = 1;
	this.__worldTransform = new openfl_geom_Matrix();
	this.__worldColorTransform = new openfl_geom_ColorTransform();
	this.__renderable = true;
};
$hxClasses["openfl.display.BitmapData"] = openfl_display_BitmapData;
openfl_display_BitmapData.__name__ = "openfl.display.BitmapData";
openfl_display_BitmapData.__interfaces__ = [openfl_display_IBitmapDrawable];
openfl_display_BitmapData.fromBase64 = function(base64,type) {
	return null;
};
openfl_display_BitmapData.fromBytes = function(bytes,rawAlpha) {
	return null;
};
openfl_display_BitmapData.fromCanvas = function(canvas,transparent) {
	if(transparent == null) {
		transparent = true;
	}
	if(canvas == null) {
		return null;
	}
	var bitmapData = new openfl_display_BitmapData(0,0,transparent,0);
	bitmapData.__fromImage(lime_graphics_Image.fromCanvas(canvas));
	bitmapData.image.set_transparent(transparent);
	return bitmapData;
};
openfl_display_BitmapData.fromFile = function(path) {
	return null;
};
openfl_display_BitmapData.fromImage = function(image,transparent) {
	if(transparent == null) {
		transparent = true;
	}
	if(image == null || image.buffer == null) {
		return null;
	}
	var bitmapData = new openfl_display_BitmapData(0,0,transparent,0);
	bitmapData.__fromImage(image);
	bitmapData.image.set_transparent(transparent);
	if(bitmapData.image != null) {
		return bitmapData;
	} else {
		return null;
	}
};
openfl_display_BitmapData.fromTexture = function(texture) {
	if(texture == null) {
		return null;
	}
	var bitmapData = new openfl_display_BitmapData(texture.__width,texture.__height,true,0);
	bitmapData.readable = false;
	bitmapData.__texture = texture;
	bitmapData.__textureContext = texture.__textureContext;
	bitmapData.image = null;
	return bitmapData;
};
openfl_display_BitmapData.loadFromBase64 = function(base64,type) {
	return lime_graphics_Image.loadFromBase64(base64,type).then(function(image) {
		return lime_app_Future.withValue(openfl_display_BitmapData.fromImage(image));
	});
};
openfl_display_BitmapData.loadFromBytes = function(bytes,rawAlpha) {
	return lime_graphics_Image.loadFromBytes(openfl_utils_ByteArray.toBytes(bytes)).then(function(image) {
		var bitmapData = openfl_display_BitmapData.fromImage(image);
		if(rawAlpha != null) {
			bitmapData.__applyAlpha(rawAlpha);
		}
		return lime_app_Future.withValue(bitmapData);
	});
};
openfl_display_BitmapData.loadFromFile = function(path) {
	return lime_graphics_Image.loadFromFile(path).then(function(image) {
		return lime_app_Future.withValue(openfl_display_BitmapData.fromImage(image));
	});
};
openfl_display_BitmapData.prototype = {
	height: null
	,image: null
	,readable: null
	,rect: null
	,transparent: null
	,width: null
	,__blendMode: null
	,__framebuffer: null
	,__framebufferContext: null
	,__indexBuffer: null
	,__indexBufferContext: null
	,__indexBufferData: null
	,__indexBufferGrid: null
	,__isMask: null
	,__isValid: null
	,__mask: null
	,__renderable: null
	,__renderTransform: null
	,__scrollRect: null
	,__stencilBuffer: null
	,__surface: null
	,__symbol: null
	,__texture: null
	,__textureContext: null
	,__textureHeight: null
	,__textureVersion: null
	,__textureWidth: null
	,__transform: null
	,__uvRect: null
	,__vertexBuffer: null
	,__vertexBufferContext: null
	,__vertexBufferData: null
	,__vertexBufferGrid: null
	,__vertexBufferHeight: null
	,__vertexBufferScaleX: null
	,__vertexBufferScaleY: null
	,__vertexBufferWidth: null
	,__worldAlpha: null
	,__worldColorTransform: null
	,__worldTransform: null
	,applyFilter: function(sourceBitmapData,sourceRect,destPoint,filter) {
		if(!this.readable || sourceBitmapData == null || !sourceBitmapData.readable) {
			return;
		}
		var needSecondBitmapData = filter.__needSecondBitmapData;
		var needCopyOfOriginal = filter.__preserveObject;
		var bitmapData2 = null;
		var bitmapData3 = null;
		if(needSecondBitmapData) {
			bitmapData2 = new openfl_display_BitmapData(this.width,this.height,true,0);
		} else {
			bitmapData2 = this;
		}
		if(needCopyOfOriginal) {
			bitmapData3 = new openfl_display_BitmapData(this.width,this.height,true,0);
		}
		if(filter.__preserveObject) {
			bitmapData3.copyPixels(this,this.rect,destPoint);
		}
		var lastBitmap = filter.__applyFilter(bitmapData2,this,sourceRect,destPoint);
		if(filter.__preserveObject) {
			lastBitmap.draw(bitmapData3,null,null);
		}
		if(needSecondBitmapData && lastBitmap == bitmapData2) {
			bitmapData2.image.version = this.image.version;
			this.image = bitmapData2.image;
		}
		this.image.dirty = true;
		this.image.version++;
	}
	,clone: function() {
		var bitmapData;
		if(!this.__isValid) {
			bitmapData = new openfl_display_BitmapData(this.width,this.height,this.transparent,0);
		} else if(!this.readable && this.image == null) {
			bitmapData = new openfl_display_BitmapData(0,0,this.transparent,0);
			bitmapData.width = this.width;
			bitmapData.height = this.height;
			bitmapData.__textureWidth = this.__textureWidth;
			bitmapData.__textureHeight = this.__textureHeight;
			bitmapData.rect.copyFrom(this.rect);
			bitmapData.__framebuffer = this.__framebuffer;
			bitmapData.__framebufferContext = this.__framebufferContext;
			bitmapData.__texture = this.__texture;
			bitmapData.__textureContext = this.__textureContext;
			bitmapData.__isValid = true;
		} else {
			bitmapData = openfl_display_BitmapData.fromImage(this.image.clone(),this.transparent);
		}
		bitmapData.__worldTransform.copyFrom(this.__worldTransform);
		bitmapData.__renderTransform.copyFrom(this.__renderTransform);
		return bitmapData;
	}
	,colorTransform: function(rect,colorTransform) {
		if(!this.readable) {
			return;
		}
		this.image.colorTransform(rect.__toLimeRectangle(),colorTransform.__toLimeColorMatrix());
	}
	,compare: function(otherBitmapData) {
		if(otherBitmapData == this) {
			return 0;
		} else if(otherBitmapData == null) {
			return -1;
		} else if(this.readable == false || otherBitmapData.readable == false) {
			return -2;
		} else if(this.width != otherBitmapData.width) {
			return -3;
		} else if(this.height != otherBitmapData.height) {
			return -4;
		}
		if(this.image != null && otherBitmapData.image != null && this.image.get_format() == otherBitmapData.image.get_format()) {
			var bytes = this.image.get_data();
			var otherBytes = otherBitmapData.image.get_data();
			var equal = true;
			var _g = 0;
			var _g1 = bytes.length;
			while(_g < _g1) {
				var i = _g++;
				if(bytes[i] != otherBytes[i]) {
					equal = false;
					break;
				}
			}
			if(equal) {
				return 0;
			}
		}
		var bitmapData = null;
		var foundDifference;
		var pixel;
		var otherPixel;
		var comparePixel;
		var r;
		var g;
		var b;
		var a;
		var _g = 0;
		var _g1 = this.height;
		while(_g < _g1) {
			var y = _g++;
			var _g2 = 0;
			var _g3 = this.width;
			while(_g2 < _g3) {
				var x = _g2++;
				foundDifference = false;
				pixel = this.getPixel32(x,y);
				otherPixel = otherBitmapData.getPixel32(x,y);
				comparePixel = 0;
				if(pixel != otherPixel) {
					r = (pixel >>> 16 & 255) - (otherPixel >>> 16 & 255);
					g = (pixel >>> 8 & 255) - (otherPixel >>> 8 & 255);
					b = (pixel & 255) - (otherPixel & 255);
					if(r < 0) {
						r *= -1;
					}
					if(g < 0) {
						g *= -1;
					}
					if(b < 0) {
						b *= -1;
					}
					if(r == 0 && g == 0 && b == 0) {
						a = (pixel >>> 24 & 255) - (otherPixel >>> 24 & 255);
						if(a != 0) {
							comparePixel = (comparePixel >>> 24 & 255 & 255) << 24 | 16711680 | (comparePixel >>> 8 & 255 & 255) << 8 | comparePixel & 255 & 255;
							comparePixel = (comparePixel >>> 24 & 255 & 255) << 24 | (comparePixel >>> 16 & 255 & 255) << 16 | 65280 | comparePixel & 255 & 255;
							comparePixel = (comparePixel >>> 24 & 255 & 255) << 24 | (comparePixel >>> 16 & 255 & 255) << 16 | (comparePixel >>> 8 & 255 & 255) << 8 | 255;
							comparePixel = (a & 255) << 24 | (comparePixel >>> 16 & 255 & 255) << 16 | (comparePixel >>> 8 & 255 & 255) << 8 | comparePixel & 255 & 255;
							foundDifference = true;
						}
					} else {
						comparePixel = (comparePixel >>> 24 & 255 & 255) << 24 | (r & 255) << 16 | (comparePixel >>> 8 & 255 & 255) << 8 | comparePixel & 255 & 255;
						comparePixel = (comparePixel >>> 24 & 255 & 255) << 24 | (comparePixel >>> 16 & 255 & 255) << 16 | (g & 255) << 8 | comparePixel & 255 & 255;
						comparePixel = (comparePixel >>> 24 & 255 & 255) << 24 | (comparePixel >>> 16 & 255 & 255) << 16 | (comparePixel >>> 8 & 255 & 255) << 8 | b & 255;
						comparePixel = -16777216 | (comparePixel >>> 16 & 255 & 255) << 16 | (comparePixel >>> 8 & 255 & 255) << 8 | comparePixel & 255 & 255;
						foundDifference = true;
					}
				}
				if(foundDifference) {
					if(bitmapData == null) {
						bitmapData = new openfl_display_BitmapData(this.width,this.height,this.transparent || otherBitmapData.transparent,0);
					}
					bitmapData.setPixel32(x,y,comparePixel);
				}
			}
		}
		if(bitmapData == null) {
			return 0;
		}
		return bitmapData;
	}
	,copyChannel: function(sourceBitmapData,sourceRect,destPoint,sourceChannel,destChannel) {
		if(!this.readable) {
			return;
		}
		var sourceChannel1;
		switch(sourceChannel) {
		case 1:
			sourceChannel1 = lime_graphics_ImageChannel.RED;
			break;
		case 2:
			sourceChannel1 = lime_graphics_ImageChannel.GREEN;
			break;
		case 4:
			sourceChannel1 = lime_graphics_ImageChannel.BLUE;
			break;
		case 8:
			sourceChannel1 = lime_graphics_ImageChannel.ALPHA;
			break;
		default:
			return;
		}
		var destChannel1;
		switch(destChannel) {
		case 1:
			destChannel1 = lime_graphics_ImageChannel.RED;
			break;
		case 2:
			destChannel1 = lime_graphics_ImageChannel.GREEN;
			break;
		case 4:
			destChannel1 = lime_graphics_ImageChannel.BLUE;
			break;
		case 8:
			destChannel1 = lime_graphics_ImageChannel.ALPHA;
			break;
		default:
			return;
		}
		this.image.copyChannel(sourceBitmapData.image,sourceRect.__toLimeRectangle(),destPoint.__toLimeVector2(),sourceChannel1,destChannel1);
	}
	,copyPixels: function(sourceBitmapData,sourceRect,destPoint,alphaBitmapData,alphaPoint,mergeAlpha) {
		if(mergeAlpha == null) {
			mergeAlpha = false;
		}
		if(!this.readable || sourceBitmapData == null) {
			return;
		}
		if(alphaPoint != null) {
			openfl_display_BitmapData.__tempVector.x = alphaPoint.x;
			openfl_display_BitmapData.__tempVector.y = alphaPoint.y;
		}
		this.image.copyPixels(sourceBitmapData.image,sourceRect.__toLimeRectangle(),destPoint.__toLimeVector2(),alphaBitmapData != null ? alphaBitmapData.image : null,alphaPoint != null ? openfl_display_BitmapData.__tempVector : null,mergeAlpha);
	}
	,dispose: function() {
		this.image = null;
		this.width = 0;
		this.height = 0;
		this.rect = null;
		this.__isValid = false;
		this.readable = false;
		this.__surface = null;
		this.__vertexBuffer = null;
		this.__framebuffer = null;
		this.__framebufferContext = null;
		this.__texture = null;
		this.__textureContext = null;
	}
	,disposeImage: function() {
		this.readable = false;
	}
	,draw: function(source,matrix,colorTransform,blendMode,clipRect,smoothing) {
		if(smoothing == null) {
			smoothing = false;
		}
		if(source == null) {
			return;
		}
		source.__update(false,true);
		var transform = openfl_geom_Matrix.__pool.get();
		transform.copyFrom(source.__renderTransform);
		transform.invert();
		if(matrix != null) {
			transform.concat(matrix);
		}
		var clipMatrix = null;
		if(clipRect != null) {
			clipMatrix = openfl_geom_Matrix.__pool.get();
			clipMatrix.copyFrom(transform);
			clipMatrix.invert();
		}
		var _colorTransform = new openfl_geom_ColorTransform();
		_colorTransform.__copyFrom(source.__worldColorTransform);
		_colorTransform.__invert();
		if(!this.readable && openfl_Lib.get_current().stage.context3D != null) {
			if(this.__textureContext == null) {
				this.__textureContext = lime_app_Application.current.__window.context;
			}
			if(colorTransform != null) {
				_colorTransform.__combine(colorTransform);
			}
			var renderer = new openfl_display_OpenGLRenderer(openfl_Lib.get_current().stage.context3D,this);
			renderer.__allowSmoothing = smoothing;
			renderer.__overrideBlendMode = blendMode;
			renderer.__worldTransform = transform;
			renderer.__worldAlpha = 1 / source.__worldAlpha;
			renderer.__worldColorTransform = _colorTransform;
			renderer.__resize(this.width,this.height);
			if(clipRect != null) {
				renderer.__pushMaskRect(clipRect,clipMatrix);
			}
			this.__drawGL(source,renderer);
			if(clipRect != null) {
				renderer.__popMaskRect();
				openfl_geom_Matrix.__pool.release(clipMatrix);
			}
		} else {
			if(colorTransform != null) {
				var bounds = openfl_geom_Rectangle.__pool.get();
				var boundsMatrix = openfl_geom_Matrix.__pool.get();
				source.__getBounds(bounds,boundsMatrix);
				var width = Math.ceil(bounds.width);
				var height = Math.ceil(bounds.height);
				boundsMatrix.tx = -bounds.x;
				boundsMatrix.ty = -bounds.y;
				var copy = new openfl_display_BitmapData(width,height,true,0);
				copy.draw(source,boundsMatrix);
				copy.colorTransform(copy.rect,colorTransform);
				copy.__renderTransform.identity();
				copy.__renderTransform.tx = bounds.x;
				copy.__renderTransform.ty = bounds.y;
				copy.__renderTransform.concat(source.__renderTransform);
				copy.__worldAlpha = source.__worldAlpha;
				copy.__worldColorTransform.__copyFrom(source.__worldColorTransform);
				source = copy;
				openfl_geom_Rectangle.__pool.release(bounds);
				openfl_geom_Matrix.__pool.release(boundsMatrix);
			}
			lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(this.image);
			var renderer = new openfl_display_CanvasRenderer(this.image.buffer.__srcContext);
			renderer.__allowSmoothing = smoothing;
			renderer.__overrideBlendMode = blendMode;
			renderer.__worldTransform = transform;
			renderer.__worldAlpha = 1 / source.__worldAlpha;
			renderer.__worldColorTransform = _colorTransform;
			if(clipRect != null) {
				renderer.__pushMaskRect(clipRect,clipMatrix);
			}
			this.__drawCanvas(source,renderer);
			if(clipRect != null) {
				renderer.__popMaskRect();
				openfl_geom_Matrix.__pool.release(clipMatrix);
			}
		}
		openfl_geom_Matrix.__pool.release(transform);
	}
	,drawWithQuality: function(source,matrix,colorTransform,blendMode,clipRect,smoothing,quality) {
		if(smoothing == null) {
			smoothing = false;
		}
		this.draw(source,matrix,colorTransform,blendMode,clipRect,quality != 2 && smoothing);
	}
	,encode: function(rect,compressor,byteArray) {
		if(!this.readable || rect == null) {
			byteArray = null;
			return byteArray;
		}
		if(byteArray == null) {
			var this1 = new openfl_utils_ByteArrayData(0);
			byteArray = this1;
		}
		var image = this.image;
		if(!rect.equals(this.rect)) {
			var matrix = openfl_geom_Matrix.__pool.get();
			matrix.tx = Math.round(-rect.x);
			matrix.ty = Math.round(-rect.y);
			var bitmapData = new openfl_display_BitmapData(Math.ceil(rect.width),Math.ceil(rect.height),true,0);
			bitmapData.draw(this,matrix);
			image = bitmapData.image;
			openfl_geom_Matrix.__pool.release(matrix);
		}
		if(((compressor) instanceof openfl_display_PNGEncoderOptions)) {
			byteArray.writeBytes(openfl_utils_ByteArray.fromBytes(image.encode(lime_graphics_ImageFileFormat.PNG)),0,0);
			return byteArray;
		} else if(((compressor) instanceof openfl_display_JPEGEncoderOptions)) {
			byteArray.writeBytes(openfl_utils_ByteArray.fromBytes(image.encode(lime_graphics_ImageFileFormat.JPEG,(js_Boot.__cast(compressor , openfl_display_JPEGEncoderOptions)).quality)),0,0);
			return byteArray;
		}
		byteArray = null;
		return byteArray;
	}
	,fillRect: function(rect,color) {
		this.__fillRect(rect,color,true);
	}
	,floodFill: function(x,y,color) {
		if(!this.readable) {
			return;
		}
		this.image.floodFill(x,y,color,1);
	}
	,generateFilterRect: function(sourceRect,filter) {
		return sourceRect.clone();
	}
	,getIndexBuffer: function(context,scale9Grid) {
		var gl = context.gl;
		if(this.__indexBuffer == null || this.__indexBufferContext != context.__context || scale9Grid != null && this.__indexBufferGrid == null || this.__indexBufferGrid != null && !this.__indexBufferGrid.equals(scale9Grid)) {
			this.__indexBufferContext = context.__context;
			this.__indexBuffer = null;
			if(scale9Grid != null) {
				if(this.__indexBufferGrid == null) {
					this.__indexBufferGrid = new openfl_geom_Rectangle();
				}
				this.__indexBufferGrid.copyFrom(scale9Grid);
				var centerX = scale9Grid.width;
				var centerY = scale9Grid.height;
				if(centerX != 0 && centerY != 0) {
					var array = null;
					var vector = null;
					var view = null;
					var buffer = null;
					var len = null;
					var this1 = new Uint16Array(54);
					this.__indexBufferData = this1;
					this.__indexBufferData[0] = 0;
					this.__indexBufferData[1] = 1;
					this.__indexBufferData[2] = 2;
					this.__indexBufferData[3] = 2;
					this.__indexBufferData[4] = 1;
					this.__indexBufferData[5] = 3;
					this.__indexBufferData[6] = 4;
					this.__indexBufferData[7] = 0;
					this.__indexBufferData[8] = 5;
					this.__indexBufferData[9] = 5;
					this.__indexBufferData[10] = 0;
					this.__indexBufferData[11] = 2;
					this.__indexBufferData[12] = 6;
					this.__indexBufferData[13] = 4;
					this.__indexBufferData[14] = 7;
					this.__indexBufferData[15] = 7;
					this.__indexBufferData[16] = 4;
					this.__indexBufferData[17] = 5;
					this.__indexBufferData[18] = 8;
					this.__indexBufferData[19] = 9;
					this.__indexBufferData[20] = 0;
					this.__indexBufferData[21] = 0;
					this.__indexBufferData[22] = 9;
					this.__indexBufferData[23] = 1;
					this.__indexBufferData[24] = 10;
					this.__indexBufferData[25] = 8;
					this.__indexBufferData[26] = 4;
					this.__indexBufferData[27] = 4;
					this.__indexBufferData[28] = 8;
					this.__indexBufferData[29] = 0;
					this.__indexBufferData[30] = 11;
					this.__indexBufferData[31] = 10;
					this.__indexBufferData[32] = 6;
					this.__indexBufferData[33] = 6;
					this.__indexBufferData[34] = 10;
					this.__indexBufferData[35] = 4;
					this.__indexBufferData[36] = 12;
					this.__indexBufferData[37] = 13;
					this.__indexBufferData[38] = 8;
					this.__indexBufferData[39] = 8;
					this.__indexBufferData[40] = 13;
					this.__indexBufferData[41] = 9;
					this.__indexBufferData[42] = 14;
					this.__indexBufferData[43] = 12;
					this.__indexBufferData[44] = 10;
					this.__indexBufferData[45] = 10;
					this.__indexBufferData[46] = 12;
					this.__indexBufferData[47] = 8;
					this.__indexBufferData[48] = 15;
					this.__indexBufferData[49] = 14;
					this.__indexBufferData[50] = 11;
					this.__indexBufferData[51] = 11;
					this.__indexBufferData[52] = 14;
					this.__indexBufferData[53] = 10;
					this.__indexBuffer = context.createIndexBuffer(54);
				} else if(centerX == 0 && centerY != 0) {
					var array = null;
					var vector = null;
					var view = null;
					var buffer = null;
					var len = null;
					var this1 = new Uint16Array(18);
					this.__indexBufferData = this1;
					this.__indexBufferData[0] = 0;
					this.__indexBufferData[1] = 1;
					this.__indexBufferData[2] = 2;
					this.__indexBufferData[3] = 2;
					this.__indexBufferData[4] = 1;
					this.__indexBufferData[5] = 3;
					this.__indexBufferData[6] = 4;
					this.__indexBufferData[7] = 5;
					this.__indexBufferData[8] = 0;
					this.__indexBufferData[9] = 0;
					this.__indexBufferData[10] = 5;
					this.__indexBufferData[11] = 1;
					this.__indexBufferData[12] = 6;
					this.__indexBufferData[13] = 7;
					this.__indexBufferData[14] = 4;
					this.__indexBufferData[15] = 4;
					this.__indexBufferData[16] = 7;
					this.__indexBufferData[17] = 5;
					this.__indexBuffer = context.createIndexBuffer(18);
				} else if(centerX != 0 && centerY == 0) {
					var array = null;
					var vector = null;
					var view = null;
					var buffer = null;
					var len = null;
					var this1 = new Uint16Array(18);
					this.__indexBufferData = this1;
					this.__indexBufferData[0] = 0;
					this.__indexBufferData[1] = 1;
					this.__indexBufferData[2] = 2;
					this.__indexBufferData[3] = 2;
					this.__indexBufferData[4] = 1;
					this.__indexBufferData[5] = 3;
					this.__indexBufferData[6] = 4;
					this.__indexBufferData[7] = 0;
					this.__indexBufferData[8] = 5;
					this.__indexBufferData[9] = 5;
					this.__indexBufferData[10] = 0;
					this.__indexBufferData[11] = 2;
					this.__indexBufferData[12] = 6;
					this.__indexBufferData[13] = 4;
					this.__indexBufferData[14] = 7;
					this.__indexBufferData[15] = 7;
					this.__indexBufferData[16] = 4;
					this.__indexBufferData[17] = 5;
					this.__indexBuffer = context.createIndexBuffer(18);
				}
			} else {
				this.__indexBufferGrid = null;
			}
			if(this.__indexBuffer == null) {
				var array = null;
				var vector = null;
				var view = null;
				var buffer = null;
				var len = null;
				var this1 = new Uint16Array(6);
				this.__indexBufferData = this1;
				this.__indexBufferData[0] = 0;
				this.__indexBufferData[1] = 1;
				this.__indexBufferData[2] = 2;
				this.__indexBufferData[3] = 2;
				this.__indexBufferData[4] = 1;
				this.__indexBufferData[5] = 3;
				this.__indexBuffer = context.createIndexBuffer(6);
			}
			this.__indexBuffer.uploadFromTypedArray(this.__indexBufferData);
		}
		return this.__indexBuffer;
	}
	,getVertexBuffer: function(context,scale9Grid,targetObject) {
		var gl = context.gl;
		if(this.__vertexBuffer == null || this.__vertexBufferContext != context.__context || scale9Grid != null && this.__vertexBufferGrid == null || this.__vertexBufferGrid != null && !this.__vertexBufferGrid.equals(scale9Grid) || targetObject != null && (this.__vertexBufferWidth != targetObject.get_width() || this.__vertexBufferHeight != targetObject.get_height() || this.__vertexBufferScaleX != targetObject.get_scaleX() || this.__vertexBufferScaleY != targetObject.get_scaleY())) {
			this.__uvRect = new openfl_geom_Rectangle(0,0,this.width,this.height);
			var uvWidth = 1;
			var uvHeight = 1;
			this.__vertexBufferContext = context.__context;
			this.__vertexBuffer = null;
			if(targetObject != null) {
				this.__vertexBufferWidth = targetObject.get_width();
				this.__vertexBufferHeight = targetObject.get_height();
				this.__vertexBufferScaleX = targetObject.get_scaleX();
				this.__vertexBufferScaleY = targetObject.get_scaleY();
			}
			if(scale9Grid != null && targetObject != null) {
				if(this.__vertexBufferGrid == null) {
					this.__vertexBufferGrid = new openfl_geom_Rectangle();
				}
				this.__vertexBufferGrid.copyFrom(scale9Grid);
				this.__vertexBufferWidth = targetObject.get_width();
				this.__vertexBufferHeight = targetObject.get_height();
				this.__vertexBufferScaleX = targetObject.get_scaleX();
				this.__vertexBufferScaleY = targetObject.get_scaleY();
				var centerX = scale9Grid.width;
				var centerY = scale9Grid.height;
				if(centerX != 0 && centerY != 0) {
					var array = null;
					var vector = null;
					var view = null;
					var buffer = null;
					var len = null;
					var this1 = new Float32Array(224);
					this.__vertexBufferData = this1;
					var left = scale9Grid.x;
					var top = scale9Grid.y;
					var right = this.width - centerX - left;
					var bottom = this.height - centerY - top;
					var uvLeft = left / this.width;
					var uvTop = top / this.height;
					var uvCenterX = centerX / this.width;
					var uvCenterY = centerY / this.height;
					var uvRight = right / this.width;
					var uvBottom = bottom / this.height;
					var renderedLeft = left / targetObject.get_scaleX();
					var renderedTop = top / targetObject.get_scaleY();
					var renderedRight = right / targetObject.get_scaleX();
					var renderedBottom = bottom / targetObject.get_scaleY();
					var renderedCenterX = targetObject.get_width() / targetObject.get_scaleX() - renderedLeft - renderedRight;
					var renderedCenterY = targetObject.get_height() / targetObject.get_scaleY() - renderedTop - renderedBottom;
					this.__vertexBufferData[0] = renderedLeft;
					this.__vertexBufferData[1] = renderedTop;
					this.__vertexBufferData[3] = uvWidth * uvLeft;
					this.__vertexBufferData[4] = uvHeight * uvTop;
					this.__vertexBufferData[15] = renderedTop;
					this.__vertexBufferData[18] = uvHeight * uvTop;
					this.__vertexBufferData[28] = renderedLeft;
					this.__vertexBufferData[31] = uvWidth * uvLeft;
					this.__vertexBufferData[56] = renderedLeft + renderedCenterX;
					this.__vertexBufferData[57] = renderedTop;
					this.__vertexBufferData[59] = uvWidth * (uvLeft + uvCenterX);
					this.__vertexBufferData[60] = uvHeight * uvTop;
					this.__vertexBufferData[70] = renderedLeft + renderedCenterX;
					this.__vertexBufferData[73] = uvWidth * (uvLeft + uvCenterX);
					this.__vertexBufferData[84] = this.width;
					this.__vertexBufferData[85] = renderedTop;
					this.__vertexBufferData[87] = uvWidth;
					this.__vertexBufferData[88] = uvHeight * uvTop;
					this.__vertexBufferData[98] = this.width;
					this.__vertexBufferData[101] = uvWidth;
					this.__vertexBufferData[112] = renderedLeft;
					this.__vertexBufferData[113] = renderedTop + renderedCenterY;
					this.__vertexBufferData[115] = uvWidth * uvLeft;
					this.__vertexBufferData[116] = uvHeight * (uvTop + uvCenterY);
					this.__vertexBufferData[127] = renderedTop + renderedCenterY;
					this.__vertexBufferData[130] = uvHeight * (uvTop + uvCenterY);
					this.__vertexBufferData[140] = renderedLeft + renderedCenterX;
					this.__vertexBufferData[141] = renderedTop + renderedCenterY;
					this.__vertexBufferData[143] = uvWidth * (uvLeft + uvCenterX);
					this.__vertexBufferData[144] = uvHeight * (uvTop + uvCenterY);
					this.__vertexBufferData[154] = this.width;
					this.__vertexBufferData[155] = renderedTop + renderedCenterY;
					this.__vertexBufferData[157] = uvWidth;
					this.__vertexBufferData[158] = uvHeight * (uvTop + uvCenterY);
					this.__vertexBufferData[168] = renderedLeft;
					this.__vertexBufferData[169] = this.height;
					this.__vertexBufferData[171] = uvWidth * uvLeft;
					this.__vertexBufferData[172] = uvHeight;
					this.__vertexBufferData[183] = this.height;
					this.__vertexBufferData[186] = uvHeight;
					this.__vertexBufferData[196] = renderedLeft + renderedCenterX;
					this.__vertexBufferData[197] = this.height;
					this.__vertexBufferData[199] = uvWidth * (uvLeft + uvCenterX);
					this.__vertexBufferData[200] = uvHeight;
					this.__vertexBufferData[210] = this.width;
					this.__vertexBufferData[211] = this.height;
					this.__vertexBufferData[213] = uvWidth;
					this.__vertexBufferData[214] = uvHeight;
					this.__vertexBuffer = context.createVertexBuffer(16,14);
				} else if(centerX == 0 && centerY != 0) {
					var array = null;
					var vector = null;
					var view = null;
					var buffer = null;
					var len = null;
					var this1 = new Float32Array(112);
					this.__vertexBufferData = this1;
					var top = scale9Grid.y;
					var bottom = this.height - centerY - top;
					var uvTop = top / this.height;
					var uvCenterY = centerY / this.height;
					var uvBottom = bottom / this.height;
					var renderedTop = top / targetObject.get_scaleY();
					var renderedBottom = bottom / targetObject.get_scaleY();
					var renderedCenterY = targetObject.get_height() / targetObject.get_scaleY() - renderedTop - renderedBottom;
					var renderedWidth = targetObject.get_width() / targetObject.get_scaleX();
					this.__vertexBufferData[0] = renderedWidth;
					this.__vertexBufferData[1] = renderedTop;
					this.__vertexBufferData[3] = uvWidth;
					this.__vertexBufferData[4] = uvHeight * uvTop;
					this.__vertexBufferData[15] = renderedTop;
					this.__vertexBufferData[18] = uvHeight * uvTop;
					this.__vertexBufferData[28] = renderedWidth;
					this.__vertexBufferData[31] = uvWidth;
					this.__vertexBufferData[56] = renderedWidth;
					this.__vertexBufferData[57] = renderedTop + renderedCenterY;
					this.__vertexBufferData[59] = uvWidth;
					this.__vertexBufferData[60] = uvHeight * (uvTop + uvCenterY);
					this.__vertexBufferData[71] = renderedTop + renderedCenterY;
					this.__vertexBufferData[74] = uvHeight * (uvTop + uvCenterY);
					this.__vertexBufferData[84] = renderedWidth;
					this.__vertexBufferData[85] = this.height;
					this.__vertexBufferData[87] = uvWidth;
					this.__vertexBufferData[88] = uvHeight;
					this.__vertexBufferData[99] = this.height;
					this.__vertexBufferData[102] = uvHeight;
					this.__vertexBuffer = context.createVertexBuffer(8,14);
				} else if(centerY == 0 && centerX != 0) {
					var array = null;
					var vector = null;
					var view = null;
					var buffer = null;
					var len = null;
					var this1 = new Float32Array(112);
					this.__vertexBufferData = this1;
					var left = scale9Grid.x;
					var right = this.width - centerX - left;
					var uvLeft = left / this.width;
					var uvCenterX = centerX / this.width;
					var uvRight = right / this.width;
					var renderedLeft = left / targetObject.get_scaleX();
					var renderedRight = right / targetObject.get_scaleX();
					var renderedCenterX = targetObject.get_width() / targetObject.get_scaleX() - renderedLeft - renderedRight;
					var renderedHeight = targetObject.get_height() / targetObject.get_scaleY();
					this.__vertexBufferData[0] = renderedLeft;
					this.__vertexBufferData[1] = renderedHeight;
					this.__vertexBufferData[3] = uvWidth * uvLeft;
					this.__vertexBufferData[4] = uvHeight;
					this.__vertexBufferData[15] = renderedHeight;
					this.__vertexBufferData[18] = uvHeight;
					this.__vertexBufferData[28] = renderedLeft;
					this.__vertexBufferData[31] = uvWidth * uvLeft;
					this.__vertexBufferData[56] = renderedLeft + renderedCenterX;
					this.__vertexBufferData[57] = renderedHeight;
					this.__vertexBufferData[59] = uvWidth * (uvLeft + uvCenterX);
					this.__vertexBufferData[60] = uvHeight;
					this.__vertexBufferData[70] = renderedLeft + renderedCenterX;
					this.__vertexBufferData[73] = uvWidth * (uvLeft + uvCenterX);
					this.__vertexBufferData[84] = this.width;
					this.__vertexBufferData[85] = renderedHeight;
					this.__vertexBufferData[87] = uvWidth;
					this.__vertexBufferData[88] = uvHeight;
					this.__vertexBufferData[98] = this.width;
					this.__vertexBufferData[101] = uvWidth;
					this.__vertexBuffer = context.createVertexBuffer(8,14);
				}
			} else {
				this.__vertexBufferGrid = null;
			}
			if(this.__vertexBuffer == null) {
				var array = null;
				var vector = null;
				var view = null;
				var buffer = null;
				var len = null;
				var this1 = new Float32Array(56);
				this.__vertexBufferData = this1;
				this.__vertexBufferData[0] = this.width;
				this.__vertexBufferData[1] = this.height;
				this.__vertexBufferData[3] = uvWidth;
				this.__vertexBufferData[4] = uvHeight;
				this.__vertexBufferData[15] = this.height;
				this.__vertexBufferData[18] = uvHeight;
				this.__vertexBufferData[28] = this.width;
				this.__vertexBufferData[31] = uvWidth;
				this.__vertexBuffer = context.createVertexBuffer(3,14);
			}
			this.__vertexBuffer.uploadFromTypedArray(this.__vertexBufferData);
		}
		return this.__vertexBuffer;
	}
	,getColorBoundsRect: function(mask,color,findColor) {
		if(findColor == null) {
			findColor = true;
		}
		if(!this.readable) {
			return new openfl_geom_Rectangle(0,0,this.width,this.height);
		}
		if(!this.transparent || (mask >> 24 & 255) > 0) {
			var color1 = color;
			if((color1 >>> 24 & 255) == 0) {
				color1 = 0;
			}
		}
		var rect = this.image.getColorBoundsRect(mask,color,findColor,1);
		return new openfl_geom_Rectangle(rect.x,rect.y,rect.width,rect.height);
	}
	,getPixel: function(x,y) {
		if(!this.readable) {
			return 0;
		}
		return this.image.getPixel(x,y,1);
	}
	,getPixel32: function(x,y) {
		if(!this.readable) {
			return 0;
		}
		return this.image.getPixel32(x,y,1);
	}
	,getPixels: function(rect) {
		if(!this.readable) {
			return null;
		}
		if(rect == null) {
			rect = this.rect;
		}
		var byteArray = openfl_utils_ByteArray.fromBytes(this.image.getPixels(rect.__toLimeRectangle(),1));
		byteArray.__endian = 0;
		return byteArray;
	}
	,getSurface: function() {
		if(!this.readable) {
			return null;
		}
		if(this.__surface == null) {
			this.__surface = lime_graphics_cairo_CairoImageSurface.fromImage(this.image);
		}
		return this.__surface;
	}
	,getTexture: function(context) {
		if(!this.__isValid) {
			return null;
		}
		if(this.__texture == null || this.__textureContext != context.__context) {
			this.__textureContext = context.__context;
			this.__texture = context.createRectangleTexture(this.width,this.height,1,false);
			this.__textureVersion = -1;
		}
		lime__$internal_graphics_ImageCanvasUtil.sync(this.image,false);
		if(this.image != null && this.image.version > this.__textureVersion) {
			if(this.__surface != null) {
				lime_graphics_cairo_CairoSurface.flush(this.__surface);
			}
			var textureImage = this.image;
			if(!openfl_display3D_textures_TextureBase.__supportsBGRA && textureImage.get_format() != 0) {
				textureImage = textureImage.clone();
				textureImage.set_format(0);
			}
			this.__texture.__uploadFromImage(textureImage);
			this.__textureVersion = this.image.version;
			this.__textureWidth = textureImage.buffer.width;
			this.__textureHeight = textureImage.buffer.height;
		}
		if(!this.readable && this.image != null) {
			this.__surface = null;
			this.image = null;
		}
		return this.__texture;
	}
	,getVector: function(rect) {
		var pixels = this.getPixels(rect);
		var length = UInt.toFloat(openfl_utils_ByteArray.get_length(pixels)) / UInt.toFloat(4) | 0;
		var result = openfl_Vector.toIntVector(null,length,true);
		var _g = 0;
		var _g1 = length;
		while(_g < _g1) {
			var i = _g++;
			result.set(i,pixels.readUnsignedInt());
		}
		return result;
	}
	,histogram: function(hRect) {
		var rect = hRect != null ? hRect : new openfl_geom_Rectangle(0,0,this.width,this.height);
		var pixels = this.getPixels(rect);
		var _g = [];
		var _g1 = [];
		var _g2 = 0;
		while(_g2 < 256) {
			var j = _g2++;
			_g1.push(0);
		}
		_g.push(_g1);
		var _g1 = [];
		var _g2 = 0;
		while(_g2 < 256) {
			var j = _g2++;
			_g1.push(0);
		}
		_g.push(_g1);
		var _g1 = [];
		var _g2 = 0;
		while(_g2 < 256) {
			var j = _g2++;
			_g1.push(0);
		}
		_g.push(_g1);
		var _g1 = [];
		var _g2 = 0;
		while(_g2 < 256) {
			var j = _g2++;
			_g1.push(0);
		}
		_g.push(_g1);
		var result = _g;
		var _g = 0;
		var _g1 = openfl_utils_ByteArray.get_length(pixels);
		while(_g < _g1) {
			var i = _g++;
			var result1 = result[i % 4];
			++result1[pixels.readUnsignedByte()];
		}
		return result;
	}
	,hitTest: function(firstPoint,firstAlphaThreshold,secondObject,secondBitmapDataPoint,secondAlphaThreshold) {
		if(secondAlphaThreshold == null) {
			secondAlphaThreshold = 1;
		}
		if(!this.readable) {
			return false;
		}
		if(((secondObject) instanceof openfl_display_Bitmap)) {
			secondObject = (js_Boot.__cast(secondObject , openfl_display_Bitmap)).__bitmapData;
		}
		if(((secondObject) instanceof openfl_geom_Point)) {
			var secondPoint = secondObject;
			var x = secondPoint.x - firstPoint.x | 0;
			var y = secondPoint.y - firstPoint.y | 0;
			if(this.rect.contains(x,y)) {
				var pixel = this.getPixel32(x,y);
				if((pixel >> 24 & 255) > firstAlphaThreshold) {
					return true;
				}
			}
		} else if(((secondObject) instanceof openfl_display_BitmapData)) {
			var secondBitmapData = secondObject;
			var x;
			var y;
			if(secondBitmapDataPoint == null) {
				x = 0;
				y = 0;
			} else {
				x = Math.round(secondBitmapDataPoint.x - firstPoint.x);
				y = Math.round(secondBitmapDataPoint.y - firstPoint.y);
			}
			var hitRect = openfl_geom_Rectangle.__pool.get();
			hitRect.setTo(x,y,secondBitmapData.width,secondBitmapData.height);
			if(this.rect.intersects(hitRect)) {
				if(x < 0) {
					hitRect.x = 0;
					hitRect.width = Math.min(secondBitmapData.width + x,this.width);
				} else {
					hitRect.width = Math.min(secondBitmapData.width,this.width - x);
				}
				if(y < 0) {
					hitRect.y = 0;
					hitRect.height = Math.min(secondBitmapData.height + y,this.height);
				} else {
					hitRect.height = Math.min(secondBitmapData.height,this.height - y);
				}
				var pixels = this.getPixels(hitRect);
				hitRect.x = x < 0 ? -x : 0;
				hitRect.y = y < 0 ? -y : 0;
				var testPixels = secondBitmapData.getPixels(hitRect);
				var length = hitRect.width * hitRect.height | 0;
				var pixel;
				var testPixel;
				var _g = 0;
				var _g1 = length;
				while(_g < _g1) {
					var i = _g++;
					pixel = pixels.readUnsignedInt();
					testPixel = testPixels.readUnsignedInt();
					if(UInt.gt(pixel >>> 24 & 255,firstAlphaThreshold) && UInt.gt(testPixel >>> 24 & 255,secondAlphaThreshold)) {
						openfl_geom_Rectangle.__pool.release(hitRect);
						return true;
					}
				}
			}
			openfl_geom_Rectangle.__pool.release(hitRect);
		} else if(((secondObject) instanceof openfl_geom_Rectangle)) {
			var secondRectangle = openfl_geom_Rectangle.__pool.get();
			secondRectangle.copyFrom(secondObject);
			secondRectangle.offset(-firstPoint.x,-firstPoint.y);
			secondRectangle.__contract(0,0,this.width,this.height);
			if(secondRectangle.width > 0 && secondRectangle.height > 0) {
				var pixels = this.getPixels(secondRectangle);
				var length = UInt.toFloat(openfl_utils_ByteArray.get_length(pixels)) / UInt.toFloat(4) | 0;
				var pixel;
				var _g = 0;
				var _g1 = length;
				while(_g < _g1) {
					var i = _g++;
					pixel = pixels.readUnsignedInt();
					if(UInt.gt(pixel >>> 24 & 255,firstAlphaThreshold)) {
						openfl_geom_Rectangle.__pool.release(secondRectangle);
						return true;
					}
				}
			}
			openfl_geom_Rectangle.__pool.release(secondRectangle);
		}
		return false;
	}
	,lock: function() {
	}
	,merge: function(sourceBitmapData,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier) {
		if(!this.readable || sourceBitmapData == null || !sourceBitmapData.readable || sourceRect == null || destPoint == null) {
			return;
		}
		this.image.merge(sourceBitmapData.image,sourceRect.__toLimeRectangle(),destPoint.__toLimeVector2(),redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier);
	}
	,noise: function(randomSeed,low,high,channelOptions,grayScale) {
		if(grayScale == null) {
			grayScale = false;
		}
		if(channelOptions == null) {
			channelOptions = 7;
		}
		if(high == null) {
			high = 255;
		}
		if(low == null) {
			low = 0;
		}
		if(!this.readable) {
			return;
		}
		var func = function() {
			randomSeed = randomSeed * 1103515245 + 12345;
			return (Math.abs(randomSeed / 65536) | 0) % 32768;
		};
		var rand = func;
		rand();
		var range = high - low;
		var redChannel = (channelOptions & 1) == 1;
		var greenChannel = (channelOptions & 2) >> 1 == 1;
		var blueChannel = (channelOptions & 4) >> 2 == 1;
		var alphaChannel = (channelOptions & 8) >> 3 == 1;
		var _g = 0;
		var _g1 = this.height;
		while(_g < _g1) {
			var y = _g++;
			var _g2 = 0;
			var _g3 = this.width;
			while(_g2 < _g3) {
				var x = _g2++;
				var red = 0;
				var blue = 0;
				var green = 0;
				var alpha = 255;
				if(grayScale) {
					blue = low + rand() % range;
					green = blue;
					red = green;
					alpha = 255;
				} else {
					if(redChannel) {
						red = low + rand() % range;
					}
					if(greenChannel) {
						green = low + rand() % range;
					}
					if(blueChannel) {
						blue = low + rand() % range;
					}
					if(alphaChannel) {
						alpha = low + rand() % range;
					}
				}
				var rgb = alpha;
				rgb = (rgb << 8) + red;
				rgb = (rgb << 8) + green;
				rgb = (rgb << 8) + blue;
				this.setPixel32(x,y,rgb);
			}
		}
	}
	,paletteMap: function(sourceBitmapData,sourceRect,destPoint,redArray,greenArray,blueArray,alphaArray) {
		var sw = sourceRect.width | 0;
		var sh = sourceRect.height | 0;
		var pixels = sourceBitmapData.getPixels(sourceRect);
		var pixelValue;
		var r;
		var g;
		var b;
		var a;
		var color;
		var _g = 0;
		var _g1 = sh * sw;
		while(_g < _g1) {
			var i = _g++;
			pixelValue = pixels.readUnsignedInt();
			a = alphaArray == null ? pixelValue & -16777216 : alphaArray[pixelValue >> 24 & 255];
			r = redArray == null ? pixelValue & 16711680 : redArray[pixelValue >> 16 & 255];
			g = greenArray == null ? pixelValue & 65280 : greenArray[pixelValue >> 8 & 255];
			b = blueArray == null ? pixelValue & 255 : blueArray[pixelValue & 255];
			color = a + r + g + b;
			pixels.position = i * 4;
			pixels.writeUnsignedInt(color);
		}
		pixels.position = 0;
		var destRect = openfl_geom_Rectangle.__pool.get();
		destRect.setTo(destPoint.x,destPoint.y,sw,sh);
		this.setPixels(destRect,pixels);
		openfl_geom_Rectangle.__pool.release(destRect);
	}
	,perlinNoise: function(baseX,baseY,numOctaves,randomSeed,stitch,fractalNoise,channelOptions,grayScale,offsets) {
		if(grayScale == null) {
			grayScale = false;
		}
		if(channelOptions == null) {
			channelOptions = 7;
		}
		if(!this.readable) {
			return;
		}
		var noise = new openfl__$internal_utils_PerlinNoise(randomSeed,numOctaves,channelOptions,grayScale,0.5,stitch,0.15);
		noise.fill(this,baseX,baseY,0);
	}
	,scroll: function(x,y) {
		if(!this.readable) {
			return;
		}
		this.image.scroll(x,y);
	}
	,setPixel: function(x,y,color) {
		if(!this.readable) {
			return;
		}
		this.image.setPixel(x,y,color,1);
	}
	,setPixel32: function(x,y,color) {
		if(!this.readable) {
			return;
		}
		this.image.setPixel32(x,y,color,1);
	}
	,setPixels: function(rect,byteArray) {
		if(!this.readable || rect == null) {
			return;
		}
		var length = rect.width * rect.height * 4;
		if(UInt.toFloat(byteArray.length - byteArray.position) < length) {
			throw haxe_Exception.thrown(new openfl_errors_Error("End of file was encountered.",2030));
		}
		this.image.setPixels(rect.__toLimeRectangle(),openfl_utils_ByteArray.toBytePointer(byteArray),1,openfl_utils_Endian.toLimeEndian(byteArray.__endian));
	}
	,setVector: function(rect,inputVector) {
		var this1 = new openfl_utils_ByteArrayData(0);
		var byteArray = this1;
		openfl_utils_ByteArray.set_length(byteArray,inputVector.get_length() * 4);
		var color = inputVector.iterator();
		while(color.hasNext()) {
			var color1 = color.next();
			byteArray.writeUnsignedInt(color1);
		}
		byteArray.position = 0;
		this.setPixels(rect,byteArray);
	}
	,threshold: function(sourceBitmapData,sourceRect,destPoint,operation,threshold,color,mask,copySource) {
		if(copySource == null) {
			copySource = false;
		}
		if(mask == null) {
			mask = -1;
		}
		if(color == null) {
			color = 0;
		}
		if(sourceBitmapData == null || sourceRect == null || destPoint == null || sourceRect.x > sourceBitmapData.width || sourceRect.y > sourceBitmapData.height || destPoint.x > this.width || destPoint.y > this.height) {
			return 0;
		}
		return this.image.threshold(sourceBitmapData.image,sourceRect.__toLimeRectangle(),destPoint.__toLimeVector2(),operation,threshold,color,mask,copySource,1);
	}
	,unlock: function(changeRect) {
	}
	,__applyAlpha: function(alpha) {
		lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(this.image);
		lime__$internal_graphics_ImageCanvasUtil.createImageData(this.image);
		var data = this.image.buffer.data;
		var _g = 0;
		var _g1 = openfl_utils_ByteArray.get_length(alpha);
		while(_g < _g1) {
			var i = _g++;
			data[i * 4 + 3] = alpha.readUnsignedByte();
		}
		this.image.version++;
	}
	,__drawCairo: function(source,renderer) {
	}
	,__drawCanvas: function(source,renderer) {
		var buffer = this.image.buffer;
		if(!renderer.__allowSmoothing) {
			renderer.applySmoothing(buffer.__srcContext,false);
		}
		renderer.__render(source);
		if(!renderer.__allowSmoothing) {
			renderer.applySmoothing(buffer.__srcContext,true);
		}
		buffer.__srcContext.setTransform(1,0,0,1,0,0);
		buffer.__srcImageData = null;
		buffer.data = null;
		this.image.dirty = true;
		this.image.version++;
	}
	,__drawGL: function(source,renderer) {
		var context = renderer.__context3D;
		var cacheRTT = context.__state.renderToTexture;
		var cacheRTTDepthStencil = context.__state.renderToTextureDepthStencil;
		var cacheRTTAntiAlias = context.__state.renderToTextureAntiAlias;
		var cacheRTTSurfaceSelector = context.__state.renderToTextureSurfaceSelector;
		context.setRenderToTexture(this.getTexture(context),true);
		renderer.__render(source);
		if(cacheRTT != null) {
			context.setRenderToTexture(cacheRTT,cacheRTTDepthStencil,cacheRTTAntiAlias,cacheRTTSurfaceSelector);
		} else {
			context.setRenderToBackBuffer();
		}
	}
	,__fillRect: function(rect,color,allowFramebuffer) {
		if(rect == null) {
			return;
		}
		if(this.transparent && (color & -16777216) == 0) {
			color = 0;
		}
		if(allowFramebuffer && this.__texture != null && this.__texture.__glFramebuffer != null && openfl_Lib.get_current().stage.__renderer.__type == "opengl") {
			var renderer = openfl_Lib.get_current().stage.__renderer;
			var context = renderer.__context3D;
			var color1 = color;
			var useScissor = !this.rect.equals(rect);
			var cacheRTT = context.__state.renderToTexture;
			var cacheRTTDepthStencil = context.__state.renderToTextureDepthStencil;
			var cacheRTTAntiAlias = context.__state.renderToTextureAntiAlias;
			var cacheRTTSurfaceSelector = context.__state.renderToTextureSurfaceSelector;
			context.setRenderToTexture(this.__texture);
			if(useScissor) {
				context.setScissorRectangle(rect);
			}
			context.clear((color1 >>> 16 & 255) / 255,(color1 >>> 8 & 255) / 255,(color1 & 255) / 255,this.transparent ? (color1 >>> 24 & 255) / 255 : 1,0,0,1);
			if(useScissor) {
				context.setScissorRectangle(null);
			}
			if(cacheRTT != null) {
				context.setRenderToTexture(cacheRTT,cacheRTTDepthStencil,cacheRTTAntiAlias,cacheRTTSurfaceSelector);
			} else {
				context.setRenderToBackBuffer();
			}
		} else if(this.readable) {
			this.image.fillRect(rect.__toLimeRectangle(),color,1);
		}
	}
	,__fromBase64: function(base64,type) {
		var image = lime_graphics_Image.fromBase64(base64,type);
		this.__fromImage(image);
	}
	,__fromBytes: function(bytes,rawAlpha) {
		var image = lime_graphics_Image.fromBytes(openfl_utils_ByteArray.toBytes(bytes));
		this.__fromImage(image);
		if(rawAlpha != null) {
			this.__applyAlpha(rawAlpha);
		}
	}
	,__fromFile: function(path) {
		var image = lime_graphics_Image.fromFile(path);
		this.__fromImage(image);
	}
	,__fromImage: function(image) {
		if(image != null && image.buffer != null) {
			this.image = image;
			this.width = image.width;
			this.height = image.height;
			this.rect = new openfl_geom_Rectangle(0,0,image.width,image.height);
			this.__textureWidth = this.width;
			this.__textureHeight = this.height;
			this.readable = true;
			this.__isValid = true;
		}
	}
	,__fromSymbol: function(swf,symbol) {
		var _gthis = this;
		this.__symbol = symbol;
		lime_graphics_Image.loadFromFile(symbol.path).onComplete(function(image) {
			if(symbol.alpha != null) {
				lime_graphics_Image.loadFromFile(symbol.alpha).onComplete(function(alpha) {
					if(image != null && alpha != null) {
						image.copyChannel(alpha,alpha.get_rect(),new lime_math_Vector2(),lime_graphics_ImageChannel.RED,lime_graphics_ImageChannel.ALPHA);
						image.buffer.premultiplied = true;
						image.set_premultiplied(false);
					}
					_gthis.__fromImage(image);
				});
			} else {
				_gthis.__fromImage(image);
			}
		});
	}
	,__getBounds: function(rect,matrix) {
		var bounds = openfl_geom_Rectangle.__pool.get();
		this.rect.__transform(bounds,matrix);
		rect.__expand(bounds.x,bounds.y,bounds.width,bounds.height);
		openfl_geom_Rectangle.__pool.release(bounds);
	}
	,__loadFromBase64: function(base64,type) {
		var _gthis = this;
		return lime_graphics_Image.loadFromBase64(base64,type).then(function(image) {
			_gthis.__fromImage(image);
			return lime_app_Future.withValue(_gthis);
		});
	}
	,__loadFromBytes: function(bytes,rawAlpha) {
		var _gthis = this;
		return lime_graphics_Image.loadFromBytes(openfl_utils_ByteArray.toBytes(bytes)).then(function(image) {
			_gthis.__fromImage(image);
			if(rawAlpha != null) {
				_gthis.__applyAlpha(rawAlpha);
			}
			return lime_app_Future.withValue(_gthis);
		});
	}
	,__loadFromFile: function(path) {
		var _gthis = this;
		return lime_graphics_Image.loadFromFile(path).then(function(image) {
			_gthis.__fromImage(image);
			return lime_app_Future.withValue(_gthis);
		});
	}
	,__renderCairo: function(renderer) {
	}
	,__renderCairoMask: function(renderer) {
	}
	,__renderCanvas: function(renderer) {
		if(!this.readable) {
			return;
		}
		if(this.image.type == lime_graphics_ImageType.DATA) {
			lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(this.image);
		}
		var context = renderer.context;
		context.globalAlpha = 1;
		renderer.setTransform(this.__renderTransform,context);
		context.drawImage(this.image.get_src(),0,0,this.image.width,this.image.height);
	}
	,__renderCanvasMask: function(renderer) {
	}
	,__renderDOM: function(renderer) {
	}
	,__renderGL: function(renderer) {
		var context = renderer.__context3D;
		var gl = context.gl;
		renderer.__setBlendMode(10);
		var shader = renderer.__defaultDisplayShader;
		renderer.setShader(shader);
		renderer.applyBitmapData(this,renderer.__upscaled);
		renderer.applyMatrix(renderer.__getMatrix(this.__worldTransform,1));
		renderer.applyAlpha(this.__worldAlpha);
		renderer.applyColorTransform(this.__worldColorTransform);
		renderer.updateShader();
		var vertexBuffer = this.getVertexBuffer(context);
		if(shader.__position != null) {
			context.setVertexBufferAt(shader.__position.index,vertexBuffer,0,3);
		}
		if(shader.__textureCoord != null) {
			context.setVertexBufferAt(shader.__textureCoord.index,vertexBuffer,3,2);
		}
		var indexBuffer = this.getIndexBuffer(context);
		context.drawTriangles(indexBuffer);
		openfl__$internal_renderer_context3D_stats_Context3DStats.incrementDrawCall(0);
		renderer.__clearShader();
	}
	,__renderGLMask: function(renderer) {
		var context = renderer.__context3D;
		var gl = context.gl;
		var shader = renderer.__maskShader;
		renderer.setShader(shader);
		renderer.applyBitmapData(this,renderer.__upscaled);
		renderer.applyMatrix(renderer.__getMatrix(this.__worldTransform,1));
		renderer.updateShader();
		var vertexBuffer = this.getVertexBuffer(context);
		if(shader.__position != null) {
			context.setVertexBufferAt(shader.__position.index,vertexBuffer,0,3);
		}
		if(shader.__textureCoord != null) {
			context.setVertexBufferAt(shader.__textureCoord.index,vertexBuffer,3,2);
		}
		var indexBuffer = this.getIndexBuffer(context);
		context.drawTriangles(indexBuffer);
		openfl__$internal_renderer_context3D_stats_Context3DStats.incrementDrawCall(0);
		renderer.__clearShader();
	}
	,__resize: function(width,height) {
		this.width = width;
		this.height = height;
		this.rect.width = width;
		this.rect.height = height;
		this.__textureWidth = width;
		this.__textureHeight = height;
	}
	,__setUVRect: function(context,x,y,width,height) {
		var buffer = this.getVertexBuffer(context);
		if(buffer != null && (width != this.__uvRect.width || height != this.__uvRect.height || x != this.__uvRect.x || y != this.__uvRect.y)) {
			var gl = context.gl;
			if(this.__uvRect == null) {
				this.__uvRect = new openfl_geom_Rectangle();
			}
			this.__uvRect.setTo(x,y,width,height);
			var uvX = this.__textureWidth > 0 ? x / this.__textureWidth : 0;
			var uvY = this.__textureHeight > 0 ? y / this.__textureHeight : 0;
			var uvWidth = this.__textureWidth > 0 ? width / this.__textureWidth : 0;
			var uvHeight = this.__textureHeight > 0 ? height / this.__textureHeight : 0;
			this.__vertexBufferData[0] = width;
			this.__vertexBufferData[1] = height;
			this.__vertexBufferData[3] = uvX + uvWidth;
			this.__vertexBufferData[4] = uvY + uvHeight;
			this.__vertexBufferData[15] = height;
			this.__vertexBufferData[17] = uvX;
			this.__vertexBufferData[18] = uvY + uvHeight;
			this.__vertexBufferData[28] = width;
			this.__vertexBufferData[31] = uvX + uvWidth;
			this.__vertexBufferData[32] = uvY;
			this.__vertexBufferData[45] = uvX;
			this.__vertexBufferData[46] = uvY;
			this.__vertexBuffer.uploadFromTypedArray(this.__vertexBufferData);
		}
	}
	,__sync: function() {
		lime__$internal_graphics_ImageCanvasUtil.sync(this.image,false);
	}
	,__update: function(transformOnly,updateChildren) {
		this.__updateTransforms();
	}
	,__updateTransforms: function(overrideTransform) {
		if(overrideTransform == null) {
			this.__worldTransform.identity();
		} else {
			this.__worldTransform.copyFrom(overrideTransform);
		}
		this.__renderTransform.copyFrom(this.__worldTransform);
	}
	,__class__: openfl_display_BitmapData
};
var openfl_geom_Rectangle = function(x,y,width,height) {
	if(height == null) {
		height = 0;
	}
	if(width == null) {
		width = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
	this.width = width;
	this.height = height;
};
$hxClasses["openfl.geom.Rectangle"] = openfl_geom_Rectangle;
openfl_geom_Rectangle.__name__ = "openfl.geom.Rectangle";
openfl_geom_Rectangle.prototype = {
	height: null
	,width: null
	,x: null
	,y: null
	,clone: function() {
		return new openfl_geom_Rectangle(this.x,this.y,this.width,this.height);
	}
	,contains: function(x,y) {
		if(x >= this.x && y >= this.y && x < this.get_right()) {
			return y < this.get_bottom();
		} else {
			return false;
		}
	}
	,containsPoint: function(point) {
		return this.contains(point.x,point.y);
	}
	,containsRect: function(rect) {
		if(rect.width <= 0 || rect.height <= 0) {
			if(rect.x > this.x && rect.y > this.y && rect.get_right() < this.get_right()) {
				return rect.get_bottom() < this.get_bottom();
			} else {
				return false;
			}
		} else if(rect.x >= this.x && rect.y >= this.y && rect.get_right() <= this.get_right()) {
			return rect.get_bottom() <= this.get_bottom();
		} else {
			return false;
		}
	}
	,copyFrom: function(sourceRect) {
		this.x = sourceRect.x;
		this.y = sourceRect.y;
		this.width = sourceRect.width;
		this.height = sourceRect.height;
	}
	,equals: function(toCompare) {
		if(toCompare == this) {
			return true;
		} else if(toCompare != null && this.x == toCompare.x && this.y == toCompare.y && this.width == toCompare.width) {
			return this.height == toCompare.height;
		} else {
			return false;
		}
	}
	,inflate: function(dx,dy) {
		this.x -= dx;
		this.width += dx * 2;
		this.y -= dy;
		this.height += dy * 2;
	}
	,inflatePoint: function(point) {
		this.inflate(point.x,point.y);
	}
	,intersection: function(toIntersect) {
		var x0 = this.x < toIntersect.x ? toIntersect.x : this.x;
		var x1 = this.get_right() > toIntersect.get_right() ? toIntersect.get_right() : this.get_right();
		if(x1 <= x0) {
			return new openfl_geom_Rectangle();
		}
		var y0 = this.y < toIntersect.y ? toIntersect.y : this.y;
		var y1 = this.get_bottom() > toIntersect.get_bottom() ? toIntersect.get_bottom() : this.get_bottom();
		if(y1 <= y0) {
			return new openfl_geom_Rectangle();
		}
		return new openfl_geom_Rectangle(x0,y0,x1 - x0,y1 - y0);
	}
	,intersects: function(toIntersect) {
		var x0 = this.x < toIntersect.x ? toIntersect.x : this.x;
		var x1 = this.get_right() > toIntersect.get_right() ? toIntersect.get_right() : this.get_right();
		if(x1 <= x0) {
			return false;
		}
		var y0 = this.y < toIntersect.y ? toIntersect.y : this.y;
		var y1 = this.get_bottom() > toIntersect.get_bottom() ? toIntersect.get_bottom() : this.get_bottom();
		return y1 > y0;
	}
	,isEmpty: function() {
		if(!(this.width <= 0)) {
			return this.height <= 0;
		} else {
			return true;
		}
	}
	,offset: function(dx,dy) {
		this.x += dx;
		this.y += dy;
	}
	,offsetPoint: function(point) {
		this.x += point.x;
		this.y += point.y;
	}
	,setEmpty: function() {
		this.x = this.y = this.width = this.height = 0;
	}
	,setTo: function(xa,ya,widtha,heighta) {
		this.x = xa;
		this.y = ya;
		this.width = widtha;
		this.height = heighta;
	}
	,toString: function() {
		return "(x=" + this.x + ", y=" + this.y + ", width=" + this.width + ", height=" + this.height + ")";
	}
	,union: function(toUnion) {
		if(this.width == 0 || this.height == 0) {
			return toUnion.clone();
		} else if(toUnion.width == 0 || toUnion.height == 0) {
			return this.clone();
		}
		var x0 = this.x > toUnion.x ? toUnion.x : this.x;
		var x1 = this.get_right() < toUnion.get_right() ? toUnion.get_right() : this.get_right();
		var y0 = this.y > toUnion.y ? toUnion.y : this.y;
		var y1 = this.get_bottom() < toUnion.get_bottom() ? toUnion.get_bottom() : this.get_bottom();
		return new openfl_geom_Rectangle(x0,y0,x1 - x0,y1 - y0);
	}
	,__contract: function(x,y,width,height) {
		if(this.width == 0 && this.height == 0) {
			return;
		}
		var offsetX = 0.0;
		var offsetY = 0.0;
		var offsetRight = 0.0;
		var offsetBottom = 0.0;
		if(this.x < x) {
			offsetX = x - this.x;
		}
		if(this.y < y) {
			offsetY = y - this.y;
		}
		if(this.get_right() > x + width) {
			offsetRight = x + width - this.get_right();
		}
		if(this.get_bottom() > y + height) {
			offsetBottom = y + height - this.get_bottom();
		}
		this.x += offsetX;
		this.y += offsetY;
		this.width += offsetRight - offsetX;
		this.height += offsetBottom - offsetY;
	}
	,__expand: function(x,y,width,height) {
		if(this.width == 0 && this.height == 0) {
			this.x = x;
			this.y = y;
			this.width = width;
			this.height = height;
			return;
		}
		var cacheRight = this.get_right();
		var cacheBottom = this.get_bottom();
		if(this.x > x) {
			this.x = x;
			this.width = cacheRight - x;
		}
		if(this.y > y) {
			this.y = y;
			this.height = cacheBottom - y;
		}
		if(cacheRight < x + width) {
			this.width = x + width - this.x;
		}
		if(cacheBottom < y + height) {
			this.height = y + height - this.y;
		}
	}
	,__toLimeRectangle: function() {
		if(openfl_geom_Rectangle.__limeRectangle == null) {
			openfl_geom_Rectangle.__limeRectangle = new lime_math_Rectangle();
		}
		openfl_geom_Rectangle.__limeRectangle.setTo(this.x,this.y,this.width,this.height);
		return openfl_geom_Rectangle.__limeRectangle;
	}
	,__transform: function(rect,m) {
		var tx0 = m.a * this.x + m.c * this.y;
		var tx1 = tx0;
		var ty0 = m.b * this.x + m.d * this.y;
		var ty1 = ty0;
		var tx = m.a * (this.x + this.width) + m.c * this.y;
		var ty = m.b * (this.x + this.width) + m.d * this.y;
		if(tx < tx0) {
			tx0 = tx;
		}
		if(ty < ty0) {
			ty0 = ty;
		}
		if(tx > tx1) {
			tx1 = tx;
		}
		if(ty > ty1) {
			ty1 = ty;
		}
		tx = m.a * (this.x + this.width) + m.c * (this.y + this.height);
		ty = m.b * (this.x + this.width) + m.d * (this.y + this.height);
		if(tx < tx0) {
			tx0 = tx;
		}
		if(ty < ty0) {
			ty0 = ty;
		}
		if(tx > tx1) {
			tx1 = tx;
		}
		if(ty > ty1) {
			ty1 = ty;
		}
		tx = m.a * this.x + m.c * (this.y + this.height);
		ty = m.b * this.x + m.d * (this.y + this.height);
		if(tx < tx0) {
			tx0 = tx;
		}
		if(ty < ty0) {
			ty0 = ty;
		}
		if(tx > tx1) {
			tx1 = tx;
		}
		if(ty > ty1) {
			ty1 = ty;
		}
		rect.setTo(tx0 + m.tx,ty0 + m.ty,tx1 - tx0,ty1 - ty0);
	}
	,get_bottom: function() {
		return this.y + this.height;
	}
	,set_bottom: function(b) {
		this.height = b - this.y;
		return b;
	}
	,get_bottomRight: function() {
		return new openfl_geom_Point(this.x + this.width,this.y + this.height);
	}
	,set_bottomRight: function(p) {
		this.width = p.x - this.x;
		this.height = p.y - this.y;
		return p.clone();
	}
	,get_left: function() {
		return this.x;
	}
	,set_left: function(l) {
		this.width -= l - this.x;
		this.x = l;
		return l;
	}
	,get_right: function() {
		return this.x + this.width;
	}
	,set_right: function(r) {
		this.width = r - this.x;
		return r;
	}
	,get_size: function() {
		return new openfl_geom_Point(this.width,this.height);
	}
	,set_size: function(p) {
		this.width = p.x;
		this.height = p.y;
		return p.clone();
	}
	,get_top: function() {
		return this.y;
	}
	,set_top: function(t) {
		this.height -= t - this.y;
		this.y = t;
		return t;
	}
	,get_topLeft: function() {
		return new openfl_geom_Point(this.x,this.y);
	}
	,set_topLeft: function(p) {
		this.x = p.x;
		this.y = p.y;
		return p.clone();
	}
	,__class__: openfl_geom_Rectangle
	,__properties__: {set_topLeft:"set_topLeft",get_topLeft:"get_topLeft",set_top:"set_top",get_top:"get_top",set_size:"set_size",get_size:"get_size",set_right:"set_right",get_right:"get_right",set_left:"set_left",get_left:"get_left",set_bottomRight:"set_bottomRight",get_bottomRight:"get_bottomRight",set_bottom:"set_bottom",get_bottom:"get_bottom"}
};
var openfl_geom_Matrix = function(a,b,c,d,tx,ty) {
	if(ty == null) {
		ty = 0;
	}
	if(tx == null) {
		tx = 0;
	}
	if(d == null) {
		d = 1;
	}
	if(c == null) {
		c = 0;
	}
	if(b == null) {
		b = 0;
	}
	if(a == null) {
		a = 1;
	}
	this.a = a;
	this.b = b;
	this.c = c;
	this.d = d;
	this.tx = tx;
	this.ty = ty;
};
$hxClasses["openfl.geom.Matrix"] = openfl_geom_Matrix;
openfl_geom_Matrix.__name__ = "openfl.geom.Matrix";
openfl_geom_Matrix.prototype = {
	a: null
	,b: null
	,c: null
	,d: null
	,tx: null
	,ty: null
	,__array: null
	,clone: function() {
		return new openfl_geom_Matrix(this.a,this.b,this.c,this.d,this.tx,this.ty);
	}
	,concat: function(m) {
		var a1 = this.a * m.a + this.b * m.c;
		this.b = this.a * m.b + this.b * m.d;
		this.a = a1;
		var c1 = this.c * m.a + this.d * m.c;
		this.d = this.c * m.b + this.d * m.d;
		this.c = c1;
		var tx1 = this.tx * m.a + this.ty * m.c + m.tx;
		this.ty = this.tx * m.b + this.ty * m.d + m.ty;
		this.tx = tx1;
	}
	,copyColumnFrom: function(column,vector3D) {
		if(column > 2) {
			throw haxe_Exception.thrown("Column " + column + " out of bounds (2)");
		} else if(column == 0) {
			this.a = vector3D.x;
			this.b = vector3D.y;
		} else if(column == 1) {
			this.c = vector3D.x;
			this.d = vector3D.y;
		} else {
			this.tx = vector3D.x;
			this.ty = vector3D.y;
		}
	}
	,copyColumnTo: function(column,vector3D) {
		if(column > 2) {
			throw haxe_Exception.thrown("Column " + column + " out of bounds (2)");
		} else if(column == 0) {
			vector3D.x = this.a;
			vector3D.y = this.b;
			vector3D.z = 0;
		} else if(column == 1) {
			vector3D.x = this.c;
			vector3D.y = this.d;
			vector3D.z = 0;
		} else {
			vector3D.x = this.tx;
			vector3D.y = this.ty;
			vector3D.z = 1;
		}
	}
	,copyFrom: function(sourceMatrix) {
		this.a = sourceMatrix.a;
		this.b = sourceMatrix.b;
		this.c = sourceMatrix.c;
		this.d = sourceMatrix.d;
		this.tx = sourceMatrix.tx;
		this.ty = sourceMatrix.ty;
	}
	,copyRowFrom: function(row,vector3D) {
		if(row > 2) {
			throw haxe_Exception.thrown("Row " + row + " out of bounds (2)");
		} else if(row == 0) {
			this.a = vector3D.x;
			this.c = vector3D.y;
			this.tx = vector3D.z;
		} else if(row == 1) {
			this.b = vector3D.x;
			this.d = vector3D.y;
			this.ty = vector3D.z;
		}
	}
	,copyRowTo: function(row,vector3D) {
		if(row > 2) {
			throw haxe_Exception.thrown("Row " + row + " out of bounds (2)");
		} else if(row == 0) {
			vector3D.x = this.a;
			vector3D.y = this.c;
			vector3D.z = this.tx;
		} else if(row == 1) {
			vector3D.x = this.b;
			vector3D.y = this.d;
			vector3D.z = this.ty;
		} else {
			vector3D.setTo(0,0,1);
		}
	}
	,createBox: function(scaleX,scaleY,rotation,tx,ty) {
		if(ty == null) {
			ty = 0;
		}
		if(tx == null) {
			tx = 0;
		}
		if(rotation == null) {
			rotation = 0;
		}
		if(rotation != 0) {
			var cos = Math.cos(rotation);
			var sin = Math.sin(rotation);
			this.a = cos * scaleX;
			this.b = sin * scaleY;
			this.c = -sin * scaleX;
			this.d = cos * scaleY;
		} else {
			this.a = scaleX;
			this.b = 0;
			this.c = 0;
			this.d = scaleY;
		}
		this.tx = tx;
		this.ty = ty;
	}
	,createGradientBox: function(width,height,rotation,tx,ty) {
		if(ty == null) {
			ty = 0;
		}
		if(tx == null) {
			tx = 0;
		}
		if(rotation == null) {
			rotation = 0;
		}
		this.a = width / 1638.4;
		this.d = height / 1638.4;
		if(rotation != 0) {
			var cos = Math.cos(rotation);
			var sin = Math.sin(rotation);
			this.b = sin * this.d;
			this.c = -sin * this.a;
			this.a *= cos;
			this.d *= cos;
		} else {
			this.b = 0;
			this.c = 0;
		}
		this.tx = tx + width / 2;
		this.ty = ty + height / 2;
	}
	,deltaTransformPoint: function(point) {
		return new openfl_geom_Point(point.x * this.a + point.y * this.c,point.x * this.b + point.y * this.d);
	}
	,equals: function(matrix) {
		if(matrix != null && this.tx == matrix.tx && this.ty == matrix.ty && this.a == matrix.a && this.b == matrix.b && this.c == matrix.c) {
			return this.d == matrix.d;
		} else {
			return false;
		}
	}
	,identity: function() {
		this.a = 1;
		this.b = 0;
		this.c = 0;
		this.d = 1;
		this.tx = 0;
		this.ty = 0;
	}
	,invert: function() {
		var norm = this.a * this.d - this.b * this.c;
		if(norm == 0) {
			this.a = this.b = this.c = this.d = 0;
			this.tx = -this.tx;
			this.ty = -this.ty;
		} else {
			norm = 1.0 / norm;
			var a1 = this.d * norm;
			this.d = this.a * norm;
			this.a = a1;
			this.b *= -norm;
			this.c *= -norm;
			var tx1 = -this.a * this.tx - this.c * this.ty;
			this.ty = -this.b * this.tx - this.d * this.ty;
			this.tx = tx1;
		}
		return this;
	}
	,rotate: function(theta) {
		var cos = Math.cos(theta);
		var sin = Math.sin(theta);
		var a1 = this.a * cos - this.b * sin;
		this.b = this.a * sin + this.b * cos;
		this.a = a1;
		var c1 = this.c * cos - this.d * sin;
		this.d = this.c * sin + this.d * cos;
		this.c = c1;
		var tx1 = this.tx * cos - this.ty * sin;
		this.ty = this.tx * sin + this.ty * cos;
		this.tx = tx1;
	}
	,scale: function(sx,sy) {
		this.a *= sx;
		this.b *= sy;
		this.c *= sx;
		this.d *= sy;
		this.tx *= sx;
		this.ty *= sy;
	}
	,setRotation: function(theta,scale) {
		if(scale == null) {
			scale = 1;
		}
		this.a = Math.cos(theta) * scale;
		this.c = Math.sin(theta) * scale;
		this.b = -this.c;
		this.d = this.a;
	}
	,setTo: function(a,b,c,d,tx,ty) {
		this.a = a;
		this.b = b;
		this.c = c;
		this.d = d;
		this.tx = tx;
		this.ty = ty;
	}
	,to3DString: function(roundPixels) {
		if(roundPixels == null) {
			roundPixels = false;
		}
		if(roundPixels) {
			return "matrix3d(" + this.a + ", " + this.b + ", 0, 0, " + this.c + ", " + this.d + ", 0, 0, 0, 0, 1, 0, " + (this.tx | 0) + ", " + (this.ty | 0) + ", 0, 1)";
		} else {
			return "matrix3d(" + this.a + ", " + this.b + ", 0, 0, " + this.c + ", " + this.d + ", 0, 0, 0, 0, 1, 0, " + this.tx + ", " + this.ty + ", 0, 1)";
		}
	}
	,toMozString: function() {
		return "matrix(" + this.a + ", " + this.b + ", " + this.c + ", " + this.d + ", " + this.tx + "px, " + this.ty + "px)";
	}
	,toString: function() {
		return "matrix(" + this.a + ", " + this.b + ", " + this.c + ", " + this.d + ", " + this.tx + ", " + this.ty + ")";
	}
	,transformPoint: function(pos) {
		return new openfl_geom_Point(pos.x * this.a + pos.y * this.c + this.tx,pos.x * this.b + pos.y * this.d + this.ty);
	}
	,translate: function(dx,dy) {
		this.tx += dx;
		this.ty += dy;
	}
	,toArray: function(transpose) {
		if(transpose == null) {
			transpose = false;
		}
		if(this.__array == null) {
			var array = null;
			var vector = null;
			var view = null;
			var buffer = null;
			var len = null;
			var this1 = new Float32Array(9);
			this.__array = this1;
		}
		if(transpose) {
			this.__array[0] = this.a;
			this.__array[1] = this.b;
			this.__array[2] = 0;
			this.__array[3] = this.c;
			this.__array[4] = this.d;
			this.__array[5] = 0;
			this.__array[6] = this.tx;
			this.__array[7] = this.ty;
			this.__array[8] = 1;
		} else {
			this.__array[0] = this.a;
			this.__array[1] = this.c;
			this.__array[2] = this.tx;
			this.__array[3] = this.b;
			this.__array[4] = this.d;
			this.__array[5] = this.ty;
			this.__array[6] = 0;
			this.__array[7] = 0;
			this.__array[8] = 1;
		}
		return this.__array;
	}
	,__cleanValues: function() {
		this.a = Math.round(this.a * 1000) / 1000;
		this.b = Math.round(this.b * 1000) / 1000;
		this.c = Math.round(this.c * 1000) / 1000;
		this.d = Math.round(this.d * 1000) / 1000;
		this.tx = Math.round(this.tx * 10) / 10;
		this.ty = Math.round(this.ty * 10) / 10;
	}
	,__toMatrix3: function() {
		openfl_geom_Matrix.__matrix3.setTo(this.a,this.b,this.c,this.d,this.tx,this.ty);
		return openfl_geom_Matrix.__matrix3;
	}
	,__transformInversePoint: function(point) {
		var norm = this.a * this.d - this.b * this.c;
		if(norm == 0) {
			point.x = -this.tx;
			point.y = -this.ty;
		} else {
			var px = 1.0 / norm * (this.c * (this.ty - point.y) + this.d * (point.x - this.tx));
			point.y = 1.0 / norm * (this.a * (point.y - this.ty) + this.b * (this.tx - point.x));
			point.x = px;
		}
	}
	,__transformInverseX: function(px,py) {
		var norm = this.a * this.d - this.b * this.c;
		if(norm == 0) {
			return -this.tx;
		} else {
			return 1.0 / norm * (this.c * (this.ty - py) + this.d * (px - this.tx));
		}
	}
	,__transformInverseY: function(px,py) {
		var norm = this.a * this.d - this.b * this.c;
		if(norm == 0) {
			return -this.ty;
		} else {
			return 1.0 / norm * (this.a * (py - this.ty) + this.b * (this.tx - px));
		}
	}
	,__transformPoint: function(point) {
		var px = point.x;
		var py = point.y;
		point.x = px * this.a + py * this.c + this.tx;
		point.y = px * this.b + py * this.d + this.ty;
	}
	,__transformX: function(px,py) {
		return px * this.a + py * this.c + this.tx;
	}
	,__transformY: function(px,py) {
		return px * this.b + py * this.d + this.ty;
	}
	,__translateTransformed: function(px,py) {
		this.tx = px * this.a + py * this.c + this.tx;
		this.ty = px * this.b + py * this.d + this.ty;
	}
	,__class__: openfl_geom_Matrix
};
var openfl_geom_ColorTransform = function(redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier,redOffset,greenOffset,blueOffset,alphaOffset) {
	if(alphaOffset == null) {
		alphaOffset = 0;
	}
	if(blueOffset == null) {
		blueOffset = 0;
	}
	if(greenOffset == null) {
		greenOffset = 0;
	}
	if(redOffset == null) {
		redOffset = 0;
	}
	if(alphaMultiplier == null) {
		alphaMultiplier = 1;
	}
	if(blueMultiplier == null) {
		blueMultiplier = 1;
	}
	if(greenMultiplier == null) {
		greenMultiplier = 1;
	}
	if(redMultiplier == null) {
		redMultiplier = 1;
	}
	this.redMultiplier = redMultiplier;
	this.greenMultiplier = greenMultiplier;
	this.blueMultiplier = blueMultiplier;
	this.alphaMultiplier = alphaMultiplier;
	this.redOffset = redOffset;
	this.greenOffset = greenOffset;
	this.blueOffset = blueOffset;
	this.alphaOffset = alphaOffset;
};
$hxClasses["openfl.geom.ColorTransform"] = openfl_geom_ColorTransform;
openfl_geom_ColorTransform.__name__ = "openfl.geom.ColorTransform";
openfl_geom_ColorTransform.prototype = {
	alphaMultiplier: null
	,alphaOffset: null
	,blueMultiplier: null
	,blueOffset: null
	,greenMultiplier: null
	,greenOffset: null
	,redMultiplier: null
	,redOffset: null
	,concat: function(second) {
		this.redOffset = second.redOffset * this.redMultiplier + this.redOffset;
		this.greenOffset = second.greenOffset * this.greenMultiplier + this.greenOffset;
		this.blueOffset = second.blueOffset * this.blueMultiplier + this.blueOffset;
		this.alphaOffset = second.alphaOffset * this.alphaMultiplier + this.alphaOffset;
		this.redMultiplier *= second.redMultiplier;
		this.greenMultiplier *= second.greenMultiplier;
		this.blueMultiplier *= second.blueMultiplier;
		this.alphaMultiplier *= second.alphaMultiplier;
	}
	,toString: function() {
		return "(redMultiplier=" + this.redMultiplier + ", greenMultiplier=" + this.greenMultiplier + ", blueMultiplier=" + this.blueMultiplier + ", alphaMultiplier=" + this.alphaMultiplier + ", redOffset=" + this.redOffset + ", greenOffset=" + this.greenOffset + ", blueOffset=" + this.blueOffset + ", alphaOffset=" + this.alphaOffset + ")";
	}
	,__clone: function() {
		return new openfl_geom_ColorTransform(this.redMultiplier,this.greenMultiplier,this.blueMultiplier,this.alphaMultiplier,this.redOffset,this.greenOffset,this.blueOffset,this.alphaOffset);
	}
	,__copyFrom: function(ct) {
		this.redMultiplier = ct.redMultiplier;
		this.greenMultiplier = ct.greenMultiplier;
		this.blueMultiplier = ct.blueMultiplier;
		this.alphaMultiplier = ct.alphaMultiplier;
		this.redOffset = ct.redOffset;
		this.greenOffset = ct.greenOffset;
		this.blueOffset = ct.blueOffset;
		this.alphaOffset = ct.alphaOffset;
	}
	,__combine: function(ct) {
		this.redMultiplier *= ct.redMultiplier;
		this.greenMultiplier *= ct.greenMultiplier;
		this.blueMultiplier *= ct.blueMultiplier;
		this.alphaMultiplier *= ct.alphaMultiplier;
		this.redOffset += ct.redOffset;
		this.greenOffset += ct.greenOffset;
		this.blueOffset += ct.blueOffset;
		this.alphaOffset += ct.alphaOffset;
	}
	,__identity: function() {
		this.redMultiplier = 1;
		this.greenMultiplier = 1;
		this.blueMultiplier = 1;
		this.alphaMultiplier = 1;
		this.redOffset = 0;
		this.greenOffset = 0;
		this.blueOffset = 0;
		this.alphaOffset = 0;
	}
	,__invert: function() {
		this.redMultiplier = this.redMultiplier != 0 ? 1 / this.redMultiplier : 1;
		this.greenMultiplier = this.greenMultiplier != 0 ? 1 / this.greenMultiplier : 1;
		this.blueMultiplier = this.blueMultiplier != 0 ? 1 / this.blueMultiplier : 1;
		this.alphaMultiplier = this.alphaMultiplier != 0 ? 1 / this.alphaMultiplier : 1;
		this.redOffset = -this.redOffset;
		this.greenOffset = -this.greenOffset;
		this.blueOffset = -this.blueOffset;
		this.alphaOffset = -this.alphaOffset;
	}
	,__equals: function(ct,ignoreAlphaMultiplier) {
		if(ct != null && this.redMultiplier == ct.redMultiplier && this.greenMultiplier == ct.greenMultiplier && this.blueMultiplier == ct.blueMultiplier && (ignoreAlphaMultiplier || this.alphaMultiplier == ct.alphaMultiplier) && this.redOffset == ct.redOffset && this.greenOffset == ct.greenOffset && this.blueOffset == ct.blueOffset) {
			return this.alphaOffset == ct.alphaOffset;
		} else {
			return false;
		}
	}
	,__isDefault: function(ignoreAlphaMultiplier) {
		if(ignoreAlphaMultiplier) {
			if(this.redMultiplier == 1 && this.greenMultiplier == 1 && this.blueMultiplier == 1 && this.redOffset == 0 && this.greenOffset == 0 && this.blueOffset == 0) {
				return this.alphaOffset == 0;
			} else {
				return false;
			}
		} else if(this.redMultiplier == 1 && this.greenMultiplier == 1 && this.blueMultiplier == 1 && this.alphaMultiplier == 1 && this.redOffset == 0 && this.greenOffset == 0 && this.blueOffset == 0) {
			return this.alphaOffset == 0;
		} else {
			return false;
		}
	}
	,__setArrays: function(colorMultipliers,colorOffsets) {
		colorMultipliers[0] = this.redMultiplier;
		colorMultipliers[1] = this.greenMultiplier;
		colorMultipliers[2] = this.blueMultiplier;
		colorMultipliers[3] = this.alphaMultiplier;
		colorOffsets[0] = this.redOffset;
		colorOffsets[1] = this.greenOffset;
		colorOffsets[2] = this.blueOffset;
		colorOffsets[3] = this.alphaOffset;
	}
	,get_color: function() {
		return (this.redOffset | 0) << 16 | (this.greenOffset | 0) << 8 | (this.blueOffset | 0);
	}
	,set_color: function(value) {
		this.redOffset = value >> 16 & 255;
		this.greenOffset = value >> 8 & 255;
		this.blueOffset = value & 255;
		this.redMultiplier = 0;
		this.greenMultiplier = 0;
		this.blueMultiplier = 0;
		return this.get_color();
	}
	,__toLimeColorMatrix: function() {
		if(openfl_geom_ColorTransform.__limeColorMatrix == null) {
			var array = null;
			var vector = null;
			var view = null;
			var buffer = null;
			var len = null;
			var this1 = new Float32Array(20);
			openfl_geom_ColorTransform.__limeColorMatrix = this1;
		}
		openfl_geom_ColorTransform.__limeColorMatrix[0] = this.redMultiplier;
		openfl_geom_ColorTransform.__limeColorMatrix[4] = this.redOffset / 255;
		openfl_geom_ColorTransform.__limeColorMatrix[6] = this.greenMultiplier;
		openfl_geom_ColorTransform.__limeColorMatrix[9] = this.greenOffset / 255;
		openfl_geom_ColorTransform.__limeColorMatrix[12] = this.blueMultiplier;
		openfl_geom_ColorTransform.__limeColorMatrix[14] = this.blueOffset / 255;
		openfl_geom_ColorTransform.__limeColorMatrix[18] = this.alphaMultiplier;
		openfl_geom_ColorTransform.__limeColorMatrix[19] = this.alphaOffset / 255;
		return openfl_geom_ColorTransform.__limeColorMatrix;
	}
	,__class__: openfl_geom_ColorTransform
	,__properties__: {set_color:"set_color",get_color:"get_color"}
};
var openfl__$internal_renderer_context3D_Context3DGraphics = function() { };
$hxClasses["openfl._internal.renderer.context3D.Context3DGraphics"] = openfl__$internal_renderer_context3D_Context3DGraphics;
openfl__$internal_renderer_context3D_Context3DGraphics.__name__ = "openfl._internal.renderer.context3D.Context3DGraphics";
openfl__$internal_renderer_context3D_Context3DGraphics.buildBuffer = function(graphics,renderer) {
	var quadBufferPosition = 0;
	var triangleIndexBufferPosition = 0;
	var vertexBufferPosition = 0;
	var vertexBufferPositionUVT = 0;
	var data = new openfl__$internal_renderer_DrawCommandReader(graphics.__commands);
	var context = renderer.__context3D;
	var tileRect = openfl_geom_Rectangle.__pool.get();
	var tileTransform = openfl_geom_Matrix.__pool.get();
	var bitmap = null;
	var _g = 0;
	var _g1 = graphics.__commands.types;
	while(_g < _g1.length) {
		var type = _g1[_g];
		++_g;
		switch(type._hx_index) {
		case 0:
			switch(data.prev._hx_index) {
			case 0:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 1:
				data.iPos += 1;
				data.fPos += 1;
				break;
			case 2:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 3:
				data.oPos += 1;
				break;
			case 4:
				data.fPos += 6;
				break;
			case 5:
				data.fPos += 4;
				break;
			case 6:
				data.fPos += 3;
				break;
			case 7:
				data.fPos += 4;
				break;
			case 8:
				data.oPos += 3;
				break;
			case 9:
				data.fPos += 4;
				break;
			case 10:
				data.fPos += 5;
				data.oPos += 1;
				break;
			case 12:
				data.oPos += 4;
				break;
			case 13:
				break;
			case 14:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 15:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 16:
				data.oPos += 4;
				data.iPos += 1;
				data.fPos += 2;
				data.bPos += 1;
				break;
			case 17:
				data.fPos += 2;
				break;
			case 18:
				data.fPos += 2;
				break;
			case 19:
				data.oPos += 1;
				break;
			case 20:
				data.oPos += 1;
				break;
			case 21:case 22:
				break;
			default:
			}
			data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL;
			var this1 = data;
			var c = this1;
			bitmap = c.buffer.o[c.oPos];
			break;
		case 1:
			bitmap = null;
			switch(data.prev._hx_index) {
			case 0:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 1:
				data.iPos += 1;
				data.fPos += 1;
				break;
			case 2:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 3:
				data.oPos += 1;
				break;
			case 4:
				data.fPos += 6;
				break;
			case 5:
				data.fPos += 4;
				break;
			case 6:
				data.fPos += 3;
				break;
			case 7:
				data.fPos += 4;
				break;
			case 8:
				data.oPos += 3;
				break;
			case 9:
				data.fPos += 4;
				break;
			case 10:
				data.fPos += 5;
				data.oPos += 1;
				break;
			case 12:
				data.oPos += 4;
				break;
			case 13:
				break;
			case 14:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 15:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 16:
				data.oPos += 4;
				data.iPos += 1;
				data.fPos += 2;
				data.bPos += 1;
				break;
			case 17:
				data.fPos += 2;
				break;
			case 18:
				data.fPos += 2;
				break;
			case 19:
				data.oPos += 1;
				break;
			case 20:
				data.oPos += 1;
				break;
			case 21:case 22:
				break;
			default:
			}
			data.prev = type;
			break;
		case 3:
			switch(data.prev._hx_index) {
			case 0:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 1:
				data.iPos += 1;
				data.fPos += 1;
				break;
			case 2:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 3:
				data.oPos += 1;
				break;
			case 4:
				data.fPos += 6;
				break;
			case 5:
				data.fPos += 4;
				break;
			case 6:
				data.fPos += 3;
				break;
			case 7:
				data.fPos += 4;
				break;
			case 8:
				data.oPos += 3;
				break;
			case 9:
				data.fPos += 4;
				break;
			case 10:
				data.fPos += 5;
				data.oPos += 1;
				break;
			case 12:
				data.oPos += 4;
				break;
			case 13:
				break;
			case 14:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 15:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 16:
				data.oPos += 4;
				data.iPos += 1;
				data.fPos += 2;
				data.bPos += 1;
				break;
			case 17:
				data.fPos += 2;
				break;
			case 18:
				data.fPos += 2;
				break;
			case 19:
				data.oPos += 1;
				break;
			case 20:
				data.oPos += 1;
				break;
			case 21:case 22:
				break;
			default:
			}
			data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_SHADER_FILL;
			var this2 = data;
			var c1 = this2;
			var shaderBuffer = c1.buffer.o[c1.oPos];
			bitmap = null;
			if(shaderBuffer != null) {
				var _g2 = 0;
				var _g3 = shaderBuffer.inputCount;
				while(_g2 < _g3) {
					var i = _g2++;
					if(shaderBuffer.inputRefs[i].name == "bitmap") {
						bitmap = shaderBuffer.inputs[i];
						break;
					}
				}
			}
			break;
		case 8:
			if(bitmap != null) {
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_QUADS;
				var this3 = data;
				var c2 = this3;
				var rects = c2.buffer.o[c2.oPos];
				var indices = c2.buffer.o[c2.oPos + 1];
				var transforms = c2.buffer.o[c2.oPos + 2];
				var hasIndices = indices != null;
				var transformABCD = false;
				var transformXY = false;
				var length = hasIndices ? indices.get_length() : Math.floor(rects.get_length() / 4);
				if(length == 0) {
					return;
				}
				if(transforms != null) {
					if(transforms.get_length() >= length * 6) {
						transformABCD = true;
						transformXY = true;
					} else if(transforms.get_length() >= length * 4) {
						transformABCD = true;
					} else if(transforms.get_length() >= length * 2) {
						transformXY = true;
					}
				}
				var dataPerVertex = 4;
				var stride = dataPerVertex * 4;
				if(graphics.__quadBuffer == null) {
					graphics.__quadBuffer = new openfl__$internal_renderer_context3D_Context3DBuffer(context,openfl__$internal_renderer_context3D_Context3DElementType.QUADS,length,dataPerVertex);
				} else {
					graphics.__quadBuffer.resize(quadBufferPosition + length,dataPerVertex);
				}
				var vertexOffset;
				var alpha = 1.0;
				var tileData;
				var id;
				var tileWidth;
				var tileHeight;
				var uvX;
				var uvY;
				var uvWidth;
				var uvHeight;
				var x;
				var y;
				var x2;
				var y2;
				var x3;
				var y3;
				var x4;
				var y4;
				var ri;
				var ti;
				var vertexBufferData = graphics.__quadBuffer.vertexBufferData;
				var bitmapWidth = bitmap.width;
				var bitmapHeight = bitmap.height;
				var sourceRect = bitmap.rect;
				var _g4 = 0;
				var _g5 = length;
				while(_g4 < _g5) {
					var i1 = _g4++;
					vertexOffset = (quadBufferPosition + i1) * stride;
					ri = hasIndices ? indices.get(i1) * 4 : i1 * 4;
					if(ri < 0) {
						continue;
					}
					tileRect.setTo(rects.get(ri),rects.get(ri + 1),rects.get(ri + 2),rects.get(ri + 3));
					tileWidth = tileRect.width;
					tileHeight = tileRect.height;
					if(tileWidth <= 0 || tileHeight <= 0) {
						continue;
					}
					if(transformABCD && transformXY) {
						ti = i1 * 6;
						tileTransform.setTo(transforms.get(ti),transforms.get(ti + 1),transforms.get(ti + 2),transforms.get(ti + 3),transforms.get(ti + 4),transforms.get(ti + 5));
					} else if(transformABCD) {
						ti = i1 * 4;
						tileTransform.setTo(transforms.get(ti),transforms.get(ti + 1),transforms.get(ti + 2),transforms.get(ti + 3),tileRect.x,tileRect.y);
					} else if(transformXY) {
						ti = i1 * 2;
						tileTransform.tx = transforms.get(ti);
						tileTransform.ty = transforms.get(ti + 1);
					} else {
						tileTransform.tx = tileRect.x;
						tileTransform.ty = tileRect.y;
					}
					uvX = tileRect.x / bitmapWidth;
					uvY = tileRect.y / bitmapHeight;
					uvWidth = tileRect.get_right() / bitmapWidth;
					uvHeight = tileRect.get_bottom() / bitmapHeight;
					x = 0 * tileTransform.a + 0 * tileTransform.c + tileTransform.tx;
					y = 0 * tileTransform.b + 0 * tileTransform.d + tileTransform.ty;
					x2 = tileWidth * tileTransform.a + 0 * tileTransform.c + tileTransform.tx;
					y2 = tileWidth * tileTransform.b + 0 * tileTransform.d + tileTransform.ty;
					x3 = 0 * tileTransform.a + tileHeight * tileTransform.c + tileTransform.tx;
					y3 = 0 * tileTransform.b + tileHeight * tileTransform.d + tileTransform.ty;
					x4 = tileWidth * tileTransform.a + tileHeight * tileTransform.c + tileTransform.tx;
					y4 = tileWidth * tileTransform.b + tileHeight * tileTransform.d + tileTransform.ty;
					vertexBufferData[vertexOffset] = x;
					vertexBufferData[vertexOffset + 1] = y;
					vertexBufferData[vertexOffset + 2] = uvX;
					vertexBufferData[vertexOffset + 3] = uvY;
					vertexBufferData[vertexOffset + dataPerVertex] = x2;
					vertexBufferData[vertexOffset + dataPerVertex + 1] = y2;
					vertexBufferData[vertexOffset + dataPerVertex + 2] = uvWidth;
					vertexBufferData[vertexOffset + dataPerVertex + 3] = uvY;
					vertexBufferData[vertexOffset + dataPerVertex * 2] = x3;
					vertexBufferData[vertexOffset + dataPerVertex * 2 + 1] = y3;
					vertexBufferData[vertexOffset + dataPerVertex * 2 + 2] = uvX;
					vertexBufferData[vertexOffset + dataPerVertex * 2 + 3] = uvHeight;
					vertexBufferData[vertexOffset + dataPerVertex * 3] = x4;
					vertexBufferData[vertexOffset + dataPerVertex * 3 + 1] = y4;
					vertexBufferData[vertexOffset + dataPerVertex * 3 + 2] = uvWidth;
					vertexBufferData[vertexOffset + dataPerVertex * 3 + 3] = uvHeight;
				}
				quadBufferPosition += length;
			}
			break;
		case 12:
			switch(data.prev._hx_index) {
			case 0:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 1:
				data.iPos += 1;
				data.fPos += 1;
				break;
			case 2:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 3:
				data.oPos += 1;
				break;
			case 4:
				data.fPos += 6;
				break;
			case 5:
				data.fPos += 4;
				break;
			case 6:
				data.fPos += 3;
				break;
			case 7:
				data.fPos += 4;
				break;
			case 8:
				data.oPos += 3;
				break;
			case 9:
				data.fPos += 4;
				break;
			case 10:
				data.fPos += 5;
				data.oPos += 1;
				break;
			case 12:
				data.oPos += 4;
				break;
			case 13:
				break;
			case 14:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 15:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 16:
				data.oPos += 4;
				data.iPos += 1;
				data.fPos += 2;
				data.bPos += 1;
				break;
			case 17:
				data.fPos += 2;
				break;
			case 18:
				data.fPos += 2;
				break;
			case 19:
				data.oPos += 1;
				break;
			case 20:
				data.oPos += 1;
				break;
			case 21:case 22:
				break;
			default:
			}
			data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_TRIANGLES;
			var this4 = data;
			var c3 = this4;
			var vertices = c3.buffer.o[c3.oPos];
			var indices1 = c3.buffer.o[c3.oPos + 1];
			var uvtData = c3.buffer.o[c3.oPos + 2];
			var culling = c3.buffer.o[c3.oPos + 3];
			var hasIndices1 = indices1 != null;
			var numVertices = Math.floor(vertices.get_length() / 2);
			var length1 = hasIndices1 ? indices1.get_length() : numVertices;
			var hasUVData = uvtData != null;
			var hasUVTData = hasUVData && uvtData.get_length() >= numVertices * 3;
			var vertLength = hasUVTData ? 4 : 2;
			var uvStride = hasUVTData ? 3 : 2;
			var dataPerVertex1 = vertLength + 2;
			var vertexOffset1 = hasUVTData ? vertexBufferPositionUVT : vertexBufferPosition;
			openfl__$internal_renderer_context3D_Context3DGraphics.resizeVertexBuffer(graphics,hasUVTData,vertexOffset1 + length1 * dataPerVertex1);
			var vertexBufferData1 = hasUVTData ? graphics.__vertexBufferDataUVT : graphics.__vertexBufferData;
			var offset;
			var vertOffset;
			var uvOffset;
			var t;
			var _g6 = 0;
			var _g7 = length1;
			while(_g6 < _g7) {
				var i2 = _g6++;
				offset = vertexOffset1 + i2 * dataPerVertex1;
				vertOffset = hasIndices1 ? indices1.get(i2) * 2 : i2 * 2;
				uvOffset = hasIndices1 ? indices1.get(i2) * uvStride : i2 * uvStride;
				if(hasUVTData) {
					t = uvtData.get(uvOffset + 2);
					vertexBufferData1[offset] = vertices.get(vertOffset) / t;
					vertexBufferData1[offset + 1] = vertices.get(vertOffset + 1) / t;
					vertexBufferData1[offset + 2] = 0;
					vertexBufferData1[offset + 3] = 1 / t;
				} else {
					vertexBufferData1[offset] = vertices.get(vertOffset);
					vertexBufferData1[offset + 1] = vertices.get(vertOffset + 1);
				}
				vertexBufferData1[offset + vertLength] = hasUVData ? uvtData.get(uvOffset) : 0;
				vertexBufferData1[offset + vertLength + 1] = hasUVData ? uvtData.get(uvOffset + 1) : 0;
			}
			if(hasUVTData) {
				vertexBufferPositionUVT += length1 * dataPerVertex1;
			} else {
				vertexBufferPosition += length1 * dataPerVertex1;
			}
			break;
		case 13:
			bitmap = null;
			break;
		default:
			switch(data.prev._hx_index) {
			case 0:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 1:
				data.iPos += 1;
				data.fPos += 1;
				break;
			case 2:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 3:
				data.oPos += 1;
				break;
			case 4:
				data.fPos += 6;
				break;
			case 5:
				data.fPos += 4;
				break;
			case 6:
				data.fPos += 3;
				break;
			case 7:
				data.fPos += 4;
				break;
			case 8:
				data.oPos += 3;
				break;
			case 9:
				data.fPos += 4;
				break;
			case 10:
				data.fPos += 5;
				data.oPos += 1;
				break;
			case 12:
				data.oPos += 4;
				break;
			case 13:
				break;
			case 14:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 15:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 16:
				data.oPos += 4;
				data.iPos += 1;
				data.fPos += 2;
				data.bPos += 1;
				break;
			case 17:
				data.fPos += 2;
				break;
			case 18:
				data.fPos += 2;
				break;
			case 19:
				data.oPos += 1;
				break;
			case 20:
				data.oPos += 1;
				break;
			case 21:case 22:
				break;
			default:
			}
			data.prev = type;
		}
	}
	if(quadBufferPosition > 0) {
		graphics.__quadBuffer.flushVertexBufferData();
	}
	if(triangleIndexBufferPosition > 0) {
		var buffer = graphics.__triangleIndexBuffer;
		if(buffer == null || triangleIndexBufferPosition > graphics.__triangleIndexBufferCount) {
			buffer = context.createIndexBuffer(triangleIndexBufferPosition,0);
			graphics.__triangleIndexBuffer = buffer;
			graphics.__triangleIndexBufferCount = triangleIndexBufferPosition;
		}
		buffer.uploadFromTypedArray(graphics.__triangleIndexBufferData);
	}
	if(vertexBufferPosition > 0) {
		var buffer = graphics.__vertexBuffer;
		if(buffer == null || vertexBufferPosition > graphics.__vertexBufferCount) {
			buffer = context.createVertexBuffer(vertexBufferPosition,4,0);
			graphics.__vertexBuffer = buffer;
			graphics.__vertexBufferCount = vertexBufferPosition;
		}
		buffer.uploadFromTypedArray(graphics.__vertexBufferData);
	}
	if(vertexBufferPositionUVT > 0) {
		var buffer = graphics.__vertexBufferUVT;
		if(buffer == null || vertexBufferPositionUVT > graphics.__vertexBufferCountUVT) {
			buffer = context.createVertexBuffer(vertexBufferPositionUVT,6,0);
			graphics.__vertexBufferUVT = buffer;
			graphics.__vertexBufferCountUVT = vertexBufferPositionUVT;
		}
		buffer.uploadFromTypedArray(graphics.__vertexBufferDataUVT);
	}
	openfl_geom_Rectangle.__pool.release(tileRect);
	openfl_geom_Matrix.__pool.release(tileTransform);
};
openfl__$internal_renderer_context3D_Context3DGraphics.isCompatible = function(graphics) {
	if(graphics.__owner.__worldScale9Grid != null) {
		return false;
	}
	var data = new openfl__$internal_renderer_DrawCommandReader(graphics.__commands);
	var hasColorFill = false;
	var hasBitmapFill = false;
	var hasShaderFill = false;
	var _g = 0;
	var _g1 = graphics.__commands.types;
	while(_g < _g1.length) {
		var type = _g1[_g];
		++_g;
		switch(type._hx_index) {
		case 0:
			hasBitmapFill = true;
			hasColorFill = false;
			hasShaderFill = false;
			switch(data.prev._hx_index) {
			case 0:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 1:
				data.iPos += 1;
				data.fPos += 1;
				break;
			case 2:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 3:
				data.oPos += 1;
				break;
			case 4:
				data.fPos += 6;
				break;
			case 5:
				data.fPos += 4;
				break;
			case 6:
				data.fPos += 3;
				break;
			case 7:
				data.fPos += 4;
				break;
			case 8:
				data.oPos += 3;
				break;
			case 9:
				data.fPos += 4;
				break;
			case 10:
				data.fPos += 5;
				data.oPos += 1;
				break;
			case 12:
				data.oPos += 4;
				break;
			case 13:
				break;
			case 14:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 15:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 16:
				data.oPos += 4;
				data.iPos += 1;
				data.fPos += 2;
				data.bPos += 1;
				break;
			case 17:
				data.fPos += 2;
				break;
			case 18:
				data.fPos += 2;
				break;
			case 19:
				data.oPos += 1;
				break;
			case 20:
				data.oPos += 1;
				break;
			case 21:case 22:
				break;
			default:
			}
			data.prev = type;
			break;
		case 1:
			hasBitmapFill = false;
			hasColorFill = true;
			hasShaderFill = false;
			switch(data.prev._hx_index) {
			case 0:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 1:
				data.iPos += 1;
				data.fPos += 1;
				break;
			case 2:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 3:
				data.oPos += 1;
				break;
			case 4:
				data.fPos += 6;
				break;
			case 5:
				data.fPos += 4;
				break;
			case 6:
				data.fPos += 3;
				break;
			case 7:
				data.fPos += 4;
				break;
			case 8:
				data.oPos += 3;
				break;
			case 9:
				data.fPos += 4;
				break;
			case 10:
				data.fPos += 5;
				data.oPos += 1;
				break;
			case 12:
				data.oPos += 4;
				break;
			case 13:
				break;
			case 14:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 15:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 16:
				data.oPos += 4;
				data.iPos += 1;
				data.fPos += 2;
				data.bPos += 1;
				break;
			case 17:
				data.fPos += 2;
				break;
			case 18:
				data.fPos += 2;
				break;
			case 19:
				data.oPos += 1;
				break;
			case 20:
				data.oPos += 1;
				break;
			case 21:case 22:
				break;
			default:
			}
			data.prev = type;
			break;
		case 3:
			hasBitmapFill = false;
			hasColorFill = false;
			hasShaderFill = true;
			switch(data.prev._hx_index) {
			case 0:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 1:
				data.iPos += 1;
				data.fPos += 1;
				break;
			case 2:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 3:
				data.oPos += 1;
				break;
			case 4:
				data.fPos += 6;
				break;
			case 5:
				data.fPos += 4;
				break;
			case 6:
				data.fPos += 3;
				break;
			case 7:
				data.fPos += 4;
				break;
			case 8:
				data.oPos += 3;
				break;
			case 9:
				data.fPos += 4;
				break;
			case 10:
				data.fPos += 5;
				data.oPos += 1;
				break;
			case 12:
				data.oPos += 4;
				break;
			case 13:
				break;
			case 14:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 15:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 16:
				data.oPos += 4;
				data.iPos += 1;
				data.fPos += 2;
				data.bPos += 1;
				break;
			case 17:
				data.fPos += 2;
				break;
			case 18:
				data.fPos += 2;
				break;
			case 19:
				data.oPos += 1;
				break;
			case 20:
				data.oPos += 1;
				break;
			case 21:case 22:
				break;
			default:
			}
			data.prev = type;
			break;
		case 8:
			if(hasBitmapFill || hasShaderFill) {
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = type;
			} else {
				data.destroy();
				return false;
			}
			break;
		case 9:
			if(hasColorFill) {
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = type;
			} else {
				data.destroy();
				return false;
			}
			break;
		case 12:
			if(hasBitmapFill || hasShaderFill) {
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = type;
			} else {
				data.destroy();
				return false;
			}
			break;
		case 13:
			hasBitmapFill = false;
			hasColorFill = false;
			hasShaderFill = false;
			switch(data.prev._hx_index) {
			case 0:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 1:
				data.iPos += 1;
				data.fPos += 1;
				break;
			case 2:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 3:
				data.oPos += 1;
				break;
			case 4:
				data.fPos += 6;
				break;
			case 5:
				data.fPos += 4;
				break;
			case 6:
				data.fPos += 3;
				break;
			case 7:
				data.fPos += 4;
				break;
			case 8:
				data.oPos += 3;
				break;
			case 9:
				data.fPos += 4;
				break;
			case 10:
				data.fPos += 5;
				data.oPos += 1;
				break;
			case 12:
				data.oPos += 4;
				break;
			case 13:
				break;
			case 14:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 15:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 16:
				data.oPos += 4;
				data.iPos += 1;
				data.fPos += 2;
				data.bPos += 1;
				break;
			case 17:
				data.fPos += 2;
				break;
			case 18:
				data.fPos += 2;
				break;
			case 19:
				data.oPos += 1;
				break;
			case 20:
				data.oPos += 1;
				break;
			case 21:case 22:
				break;
			default:
			}
			data.prev = type;
			break;
		case 18:
			switch(data.prev._hx_index) {
			case 0:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 1:
				data.iPos += 1;
				data.fPos += 1;
				break;
			case 2:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 3:
				data.oPos += 1;
				break;
			case 4:
				data.fPos += 6;
				break;
			case 5:
				data.fPos += 4;
				break;
			case 6:
				data.fPos += 3;
				break;
			case 7:
				data.fPos += 4;
				break;
			case 8:
				data.oPos += 3;
				break;
			case 9:
				data.fPos += 4;
				break;
			case 10:
				data.fPos += 5;
				data.oPos += 1;
				break;
			case 12:
				data.oPos += 4;
				break;
			case 13:
				break;
			case 14:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 15:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 16:
				data.oPos += 4;
				data.iPos += 1;
				data.fPos += 2;
				data.bPos += 1;
				break;
			case 17:
				data.fPos += 2;
				break;
			case 18:
				data.fPos += 2;
				break;
			case 19:
				data.oPos += 1;
				break;
			case 20:
				data.oPos += 1;
				break;
			case 21:case 22:
				break;
			default:
			}
			data.prev = type;
			break;
		case 19:
			switch(data.prev._hx_index) {
			case 0:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 1:
				data.iPos += 1;
				data.fPos += 1;
				break;
			case 2:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 3:
				data.oPos += 1;
				break;
			case 4:
				data.fPos += 6;
				break;
			case 5:
				data.fPos += 4;
				break;
			case 6:
				data.fPos += 3;
				break;
			case 7:
				data.fPos += 4;
				break;
			case 8:
				data.oPos += 3;
				break;
			case 9:
				data.fPos += 4;
				break;
			case 10:
				data.fPos += 5;
				data.oPos += 1;
				break;
			case 12:
				data.oPos += 4;
				break;
			case 13:
				break;
			case 14:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 15:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 16:
				data.oPos += 4;
				data.iPos += 1;
				data.fPos += 2;
				data.bPos += 1;
				break;
			case 17:
				data.fPos += 2;
				break;
			case 18:
				data.fPos += 2;
				break;
			case 19:
				data.oPos += 1;
				break;
			case 20:
				data.oPos += 1;
				break;
			case 21:case 22:
				break;
			default:
			}
			data.prev = type;
			break;
		default:
			data.destroy();
			return false;
		}
	}
	data.destroy();
	return true;
};
openfl__$internal_renderer_context3D_Context3DGraphics.render = function(graphics,renderer) {
	if(!graphics.__visible || graphics.__commands.get_length() == 0) {
		return;
	}
	if(graphics.__bitmap != null && !graphics.__dirty || !openfl__$internal_renderer_context3D_Context3DGraphics.isCompatible(graphics)) {
		var cacheTransform = renderer.__softwareRenderer.__worldTransform;
		renderer.__softwareRenderer.__worldTransform = renderer.__worldTransform;
		openfl__$internal_renderer_canvas_CanvasGraphics.render(graphics,renderer.__softwareRenderer);
		renderer.__softwareRenderer.__worldTransform = cacheTransform;
	} else {
		graphics.__bitmap = null;
		graphics.__update(renderer.__worldTransform);
		var bounds = graphics.__bounds;
		var width = graphics.__width;
		var height = graphics.__height;
		if(bounds != null && width >= 1 && height >= 1) {
			if(graphics.__hardwareDirty || graphics.__quadBuffer == null && graphics.__vertexBuffer == null && graphics.__vertexBufferUVT == null) {
				openfl__$internal_renderer_context3D_Context3DGraphics.buildBuffer(graphics,renderer);
			}
			var data = new openfl__$internal_renderer_DrawCommandReader(graphics.__commands);
			var context = renderer.__context3D;
			var gl = context.gl;
			var matrix = openfl_geom_Matrix.__pool.get();
			var shaderBuffer = null;
			var bitmap = null;
			var repeat = false;
			var smooth = false;
			var fill = null;
			var positionX = 0.0;
			var positionY = 0.0;
			var quadBufferPosition = 0;
			var shaderBufferOffset = 0;
			var triangleIndexBufferPosition = 0;
			var vertexBufferPosition = 0;
			var vertexBufferPositionUVT = 0;
			var _g = 0;
			var _g1 = graphics.__commands.types;
			while(_g < _g1.length) {
				var type = _g1[_g];
				++_g;
				switch(type._hx_index) {
				case 0:
					switch(data.prev._hx_index) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.oPos += 1;
						break;
					case 4:
						data.fPos += 6;
						break;
					case 5:
						data.fPos += 4;
						break;
					case 6:
						data.fPos += 3;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.oPos += 3;
						break;
					case 9:
						data.fPos += 4;
						break;
					case 10:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 12:
						data.oPos += 4;
						break;
					case 13:
						break;
					case 14:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 15:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 16:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 17:
						data.fPos += 2;
						break;
					case 18:
						data.fPos += 2;
						break;
					case 19:
						data.oPos += 1;
						break;
					case 20:
						data.oPos += 1;
						break;
					case 21:case 22:
						break;
					default:
					}
					data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL;
					var this1 = data;
					var c = this1;
					bitmap = c.buffer.o[c.oPos];
					repeat = c.buffer.b[c.bPos];
					smooth = c.buffer.b[c.bPos + 1];
					shaderBuffer = null;
					fill = null;
					break;
				case 1:
					switch(data.prev._hx_index) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.oPos += 1;
						break;
					case 4:
						data.fPos += 6;
						break;
					case 5:
						data.fPos += 4;
						break;
					case 6:
						data.fPos += 3;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.oPos += 3;
						break;
					case 9:
						data.fPos += 4;
						break;
					case 10:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 12:
						data.oPos += 4;
						break;
					case 13:
						break;
					case 14:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 15:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 16:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 17:
						data.fPos += 2;
						break;
					case 18:
						data.fPos += 2;
						break;
					case 19:
						data.oPos += 1;
						break;
					case 20:
						data.oPos += 1;
						break;
					case 21:case 22:
						break;
					default:
					}
					data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_FILL;
					var this2 = data;
					var c1 = this2;
					var color = c1.buffer.i[c1.iPos] | 0;
					var alpha = c1.buffer.f[c1.fPos] * 255 | 0;
					fill = color & 16777215 | alpha << 24;
					shaderBuffer = null;
					bitmap = null;
					break;
				case 3:
					switch(data.prev._hx_index) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.oPos += 1;
						break;
					case 4:
						data.fPos += 6;
						break;
					case 5:
						data.fPos += 4;
						break;
					case 6:
						data.fPos += 3;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.oPos += 3;
						break;
					case 9:
						data.fPos += 4;
						break;
					case 10:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 12:
						data.oPos += 4;
						break;
					case 13:
						break;
					case 14:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 15:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 16:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 17:
						data.fPos += 2;
						break;
					case 18:
						data.fPos += 2;
						break;
					case 19:
						data.oPos += 1;
						break;
					case 20:
						data.oPos += 1;
						break;
					case 21:case 22:
						break;
					default:
					}
					data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_SHADER_FILL;
					var this3 = data;
					var c2 = this3;
					shaderBuffer = c2.buffer.o[c2.oPos];
					shaderBufferOffset = 0;
					if(shaderBuffer == null || shaderBuffer.shader == null || shaderBuffer.shader.__bitmap == null) {
						bitmap = null;
					} else {
						bitmap = shaderBuffer.shader.__bitmap.input;
					}
					fill = null;
					break;
				case 8:
					if(bitmap != null) {
						switch(data.prev._hx_index) {
						case 0:
							data.oPos += 2;
							data.bPos += 2;
							break;
						case 1:
							data.iPos += 1;
							data.fPos += 1;
							break;
						case 2:
							data.oPos += 4;
							data.iiPos += 2;
							data.ffPos += 1;
							data.fPos += 1;
							break;
						case 3:
							data.oPos += 1;
							break;
						case 4:
							data.fPos += 6;
							break;
						case 5:
							data.fPos += 4;
							break;
						case 6:
							data.fPos += 3;
							break;
						case 7:
							data.fPos += 4;
							break;
						case 8:
							data.oPos += 3;
							break;
						case 9:
							data.fPos += 4;
							break;
						case 10:
							data.fPos += 5;
							data.oPos += 1;
							break;
						case 12:
							data.oPos += 4;
							break;
						case 13:
							break;
						case 14:
							data.oPos += 2;
							data.bPos += 2;
							break;
						case 15:
							data.oPos += 4;
							data.iiPos += 2;
							data.ffPos += 1;
							data.fPos += 1;
							break;
						case 16:
							data.oPos += 4;
							data.iPos += 1;
							data.fPos += 2;
							data.bPos += 1;
							break;
						case 17:
							data.fPos += 2;
							break;
						case 18:
							data.fPos += 2;
							break;
						case 19:
							data.oPos += 1;
							break;
						case 20:
							data.oPos += 1;
							break;
						case 21:case 22:
							break;
						default:
						}
						data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_QUADS;
						var this4 = data;
						var c3 = this4;
						var rects = c3.buffer.o[c3.oPos];
						var indices = c3.buffer.o[c3.oPos + 1];
						var transforms = c3.buffer.o[c3.oPos + 2];
						var hasIndices = indices != null;
						var length = hasIndices ? indices.get_length() : Math.floor(rects.get_length() / 4);
						var uMatrix = renderer.__getMatrix(graphics.__owner.__renderTransform,1);
						var shader;
						if(shaderBuffer != null && !openfl__$internal_renderer_context3D_Context3DGraphics.maskRender) {
							shader = renderer.__initShaderBuffer(shaderBuffer);
							renderer.__setShaderBuffer(shaderBuffer);
							renderer.applyMatrix(uMatrix);
							renderer.applyBitmapData(bitmap,false,repeat);
							renderer.applyAlpha(graphics.__owner.__worldAlpha);
							renderer.applyColorTransform(graphics.__owner.__worldColorTransform);
						} else {
							shader = openfl__$internal_renderer_context3D_Context3DGraphics.maskRender ? renderer.__maskShader : renderer.__initGraphicsShader(null);
							renderer.setShader(shader);
							renderer.applyMatrix(uMatrix);
							renderer.applyBitmapData(bitmap,smooth,repeat);
							renderer.applyAlpha(graphics.__owner.__worldAlpha);
							renderer.applyColorTransform(graphics.__owner.__worldColorTransform);
							renderer.updateShader();
						}
						var end = quadBufferPosition + length;
						while(quadBufferPosition < end) {
							length = Math.min(end - quadBufferPosition,context.__quadIndexBufferElements) | 0;
							if(length <= 0) {
								break;
							}
							if(shaderBuffer != null && !openfl__$internal_renderer_context3D_Context3DGraphics.maskRender) {
								renderer.__updateShaderBuffer(shaderBufferOffset);
							}
							if(shader.__position != null) {
								context.setVertexBufferAt(shader.__position.index,graphics.__quadBuffer.vertexBuffer,quadBufferPosition * 16,2);
							}
							if(shader.__textureCoord != null) {
								context.setVertexBufferAt(shader.__textureCoord.index,graphics.__quadBuffer.vertexBuffer,quadBufferPosition * 16 + 2,2);
							}
							context.drawTriangles(context.__quadIndexBuffer,0,length * 2);
							shaderBufferOffset += length * 4;
							quadBufferPosition += length;
						}
						openfl__$internal_renderer_context3D_stats_Context3DStats.incrementDrawCall(0);
						renderer.__clearShader();
					}
					break;
				case 9:
					if(fill != null) {
						switch(data.prev._hx_index) {
						case 0:
							data.oPos += 2;
							data.bPos += 2;
							break;
						case 1:
							data.iPos += 1;
							data.fPos += 1;
							break;
						case 2:
							data.oPos += 4;
							data.iiPos += 2;
							data.ffPos += 1;
							data.fPos += 1;
							break;
						case 3:
							data.oPos += 1;
							break;
						case 4:
							data.fPos += 6;
							break;
						case 5:
							data.fPos += 4;
							break;
						case 6:
							data.fPos += 3;
							break;
						case 7:
							data.fPos += 4;
							break;
						case 8:
							data.oPos += 3;
							break;
						case 9:
							data.fPos += 4;
							break;
						case 10:
							data.fPos += 5;
							data.oPos += 1;
							break;
						case 12:
							data.oPos += 4;
							break;
						case 13:
							break;
						case 14:
							data.oPos += 2;
							data.bPos += 2;
							break;
						case 15:
							data.oPos += 4;
							data.iiPos += 2;
							data.ffPos += 1;
							data.fPos += 1;
							break;
						case 16:
							data.oPos += 4;
							data.iPos += 1;
							data.fPos += 2;
							data.bPos += 1;
							break;
						case 17:
							data.fPos += 2;
							break;
						case 18:
							data.fPos += 2;
							break;
						case 19:
							data.oPos += 1;
							break;
						case 20:
							data.oPos += 1;
							break;
						case 21:case 22:
							break;
						default:
						}
						data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_RECT;
						var this5 = data;
						var c4 = this5;
						var x = c4.buffer.f[c4.fPos];
						var y = c4.buffer.f[c4.fPos + 1];
						var width = c4.buffer.f[c4.fPos + 2];
						var height = c4.buffer.f[c4.fPos + 3];
						var color1 = fill;
						openfl__$internal_renderer_context3D_Context3DGraphics.tempColorTransform.redOffset = color1 >>> 16 & 255;
						openfl__$internal_renderer_context3D_Context3DGraphics.tempColorTransform.greenOffset = color1 >>> 8 & 255;
						openfl__$internal_renderer_context3D_Context3DGraphics.tempColorTransform.blueOffset = color1 & 255;
						openfl__$internal_renderer_context3D_Context3DGraphics.tempColorTransform.__combine(graphics.__owner.__worldColorTransform);
						matrix.identity();
						matrix.scale(width,height);
						matrix.tx = x;
						matrix.ty = y;
						matrix.concat(graphics.__owner.__renderTransform);
						var shader1 = openfl__$internal_renderer_context3D_Context3DGraphics.maskRender ? renderer.__maskShader : renderer.__initGraphicsShader(null);
						renderer.setShader(shader1);
						renderer.applyMatrix(renderer.__getMatrix(matrix,1));
						renderer.applyBitmapData(openfl__$internal_renderer_context3D_Context3DGraphics.blankBitmapData,true,repeat);
						renderer.applyAlpha((color1 >>> 24 & 255) / 255 * graphics.__owner.__worldAlpha);
						renderer.applyColorTransform(openfl__$internal_renderer_context3D_Context3DGraphics.tempColorTransform);
						renderer.updateShader();
						var vertexBuffer = openfl__$internal_renderer_context3D_Context3DGraphics.blankBitmapData.getVertexBuffer(context);
						if(shader1.__position != null) {
							context.setVertexBufferAt(shader1.__position.index,vertexBuffer,0,3);
						}
						if(shader1.__textureCoord != null) {
							context.setVertexBufferAt(shader1.__textureCoord.index,vertexBuffer,3,2);
						}
						var indexBuffer = openfl__$internal_renderer_context3D_Context3DGraphics.blankBitmapData.getIndexBuffer(context);
						context.drawTriangles(indexBuffer);
						shaderBufferOffset += 4;
						openfl__$internal_renderer_context3D_stats_Context3DStats.incrementDrawCall(0);
						renderer.__clearShader();
					}
					break;
				case 12:
					switch(data.prev._hx_index) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.oPos += 1;
						break;
					case 4:
						data.fPos += 6;
						break;
					case 5:
						data.fPos += 4;
						break;
					case 6:
						data.fPos += 3;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.oPos += 3;
						break;
					case 9:
						data.fPos += 4;
						break;
					case 10:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 12:
						data.oPos += 4;
						break;
					case 13:
						break;
					case 14:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 15:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 16:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 17:
						data.fPos += 2;
						break;
					case 18:
						data.fPos += 2;
						break;
					case 19:
						data.oPos += 1;
						break;
					case 20:
						data.oPos += 1;
						break;
					case 21:case 22:
						break;
					default:
					}
					data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_TRIANGLES;
					var this6 = data;
					var c5 = this6;
					var vertices = c5.buffer.o[c5.oPos];
					var indices1 = c5.buffer.o[c5.oPos + 1];
					var uvtData = c5.buffer.o[c5.oPos + 2];
					var culling = c5.buffer.o[c5.oPos + 3];
					var hasIndices1 = indices1 != null;
					var numVertices = Math.floor(vertices.get_length() / 2);
					var length1 = hasIndices1 ? indices1.get_length() : numVertices;
					var hasUVData = uvtData != null;
					var hasUVTData = hasUVData && uvtData.get_length() >= numVertices * 3;
					var vertLength = hasUVTData ? 4 : 2;
					var uvStride = hasUVTData ? 3 : 2;
					var dataPerVertex = vertLength + 2;
					var vertexBuffer1 = hasUVTData ? graphics.__vertexBufferUVT : graphics.__vertexBuffer;
					var bufferPosition = hasUVTData ? vertexBufferPositionUVT : vertexBufferPosition;
					var uMatrix1 = renderer.__getMatrix(graphics.__owner.__renderTransform,1);
					var shader2;
					if(shaderBuffer != null && !openfl__$internal_renderer_context3D_Context3DGraphics.maskRender) {
						shader2 = renderer.__initShaderBuffer(shaderBuffer);
						renderer.__setShaderBuffer(shaderBuffer);
						renderer.applyMatrix(uMatrix1);
						renderer.applyBitmapData(bitmap,false,repeat);
						renderer.applyAlpha(1);
						renderer.applyColorTransform(null);
						renderer.__updateShaderBuffer(shaderBufferOffset);
					} else {
						shader2 = openfl__$internal_renderer_context3D_Context3DGraphics.maskRender ? renderer.__maskShader : renderer.__initGraphicsShader(null);
						renderer.setShader(shader2);
						renderer.applyMatrix(uMatrix1);
						renderer.applyBitmapData(bitmap,smooth,repeat);
						renderer.applyAlpha(graphics.__owner.__worldAlpha);
						renderer.applyColorTransform(graphics.__owner.__worldColorTransform);
						renderer.updateShader();
					}
					if(shader2.__position != null) {
						context.setVertexBufferAt(shader2.__position.index,vertexBuffer1,bufferPosition,hasUVTData ? 4 : 2);
					}
					if(shader2.__textureCoord != null) {
						context.setVertexBufferAt(shader2.__textureCoord.index,vertexBuffer1,bufferPosition + vertLength,2);
					}
					switch(culling) {
					case 0:
						context.setCulling(0);
						break;
					case 1:
						context.setCulling(3);
						break;
					case 2:
						context.setCulling(1);
						break;
					default:
					}
					context.__drawTriangles(0,length1);
					shaderBufferOffset += length1;
					if(hasUVTData) {
						vertexBufferPositionUVT += dataPerVertex * length1;
					} else {
						vertexBufferPosition += dataPerVertex * length1;
					}
					switch(culling) {
					case 1:case 2:
						context.setCulling(0);
						break;
					default:
					}
					openfl__$internal_renderer_context3D_stats_Context3DStats.incrementDrawCall(0);
					renderer.__clearShader();
					break;
				case 13:
					bitmap = null;
					fill = null;
					shaderBuffer = null;
					switch(data.prev._hx_index) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.oPos += 1;
						break;
					case 4:
						data.fPos += 6;
						break;
					case 5:
						data.fPos += 4;
						break;
					case 6:
						data.fPos += 3;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.oPos += 3;
						break;
					case 9:
						data.fPos += 4;
						break;
					case 10:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 12:
						data.oPos += 4;
						break;
					case 13:
						break;
					case 14:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 15:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 16:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 17:
						data.fPos += 2;
						break;
					case 18:
						data.fPos += 2;
						break;
					case 19:
						data.oPos += 1;
						break;
					case 20:
						data.oPos += 1;
						break;
					case 21:case 22:
						break;
					default:
					}
					data.prev = type;
					break;
				case 18:
					switch(data.prev._hx_index) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.oPos += 1;
						break;
					case 4:
						data.fPos += 6;
						break;
					case 5:
						data.fPos += 4;
						break;
					case 6:
						data.fPos += 3;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.oPos += 3;
						break;
					case 9:
						data.fPos += 4;
						break;
					case 10:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 12:
						data.oPos += 4;
						break;
					case 13:
						break;
					case 14:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 15:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 16:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 17:
						data.fPos += 2;
						break;
					case 18:
						data.fPos += 2;
						break;
					case 19:
						data.oPos += 1;
						break;
					case 20:
						data.oPos += 1;
						break;
					case 21:case 22:
						break;
					default:
					}
					data.prev = openfl__$internal_renderer_DrawCommandType.MOVE_TO;
					var this7 = data;
					var c6 = this7;
					positionX = c6.buffer.f[c6.fPos];
					positionY = c6.buffer.f[c6.fPos + 1];
					break;
				case 19:
					switch(data.prev._hx_index) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.oPos += 1;
						break;
					case 4:
						data.fPos += 6;
						break;
					case 5:
						data.fPos += 4;
						break;
					case 6:
						data.fPos += 3;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.oPos += 3;
						break;
					case 9:
						data.fPos += 4;
						break;
					case 10:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 12:
						data.oPos += 4;
						break;
					case 13:
						break;
					case 14:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 15:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 16:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 17:
						data.fPos += 2;
						break;
					case 18:
						data.fPos += 2;
						break;
					case 19:
						data.oPos += 1;
						break;
					case 20:
						data.oPos += 1;
						break;
					case 21:case 22:
						break;
					default:
					}
					data.prev = openfl__$internal_renderer_DrawCommandType.OVERRIDE_BLEND_MODE;
					var this8 = data;
					var c7 = this8;
					renderer.__setBlendMode(c7.buffer.o[c7.oPos]);
					break;
				default:
					switch(data.prev._hx_index) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.oPos += 1;
						break;
					case 4:
						data.fPos += 6;
						break;
					case 5:
						data.fPos += 4;
						break;
					case 6:
						data.fPos += 3;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.oPos += 3;
						break;
					case 9:
						data.fPos += 4;
						break;
					case 10:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 12:
						data.oPos += 4;
						break;
					case 13:
						break;
					case 14:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 15:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 16:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 17:
						data.fPos += 2;
						break;
					case 18:
						data.fPos += 2;
						break;
					case 19:
						data.oPos += 1;
						break;
					case 20:
						data.oPos += 1;
						break;
					case 21:case 22:
						break;
					default:
					}
					data.prev = type;
				}
			}
			openfl_geom_Matrix.__pool.release(matrix);
		}
		graphics.__hardwareDirty = false;
		graphics.set___dirty(false);
	}
};
openfl__$internal_renderer_context3D_Context3DGraphics.renderMask = function(graphics,renderer) {
	openfl__$internal_renderer_context3D_Context3DGraphics.maskRender = true;
	openfl__$internal_renderer_context3D_Context3DGraphics.render(graphics,renderer);
	openfl__$internal_renderer_context3D_Context3DGraphics.maskRender = false;
};
openfl__$internal_renderer_context3D_Context3DGraphics.resizeIndexBuffer = function(graphics,isQuad,length) {
	if(isQuad) {
		return;
	}
	var buffer = isQuad ? null : graphics.__triangleIndexBufferData;
	var position = 0;
	var newBuffer = null;
	if(buffer == null) {
		var array = null;
		var vector = null;
		var view = null;
		var buffer1 = null;
		var len = null;
		var this1;
		if(length != null) {
			this1 = new Uint16Array(length);
		} else if(array != null) {
			this1 = new Uint16Array(array);
		} else if(vector != null) {
			this1 = new Uint16Array(vector.__array);
		} else if(view != null) {
			this1 = new Uint16Array(view);
		} else if(buffer1 != null) {
			if(len == null) {
				this1 = new Uint16Array(buffer1,0);
			} else {
				this1 = new Uint16Array(buffer1,0,len);
			}
		} else {
			this1 = null;
		}
		newBuffer = this1;
	} else if(length > buffer.length) {
		var array = null;
		var vector = null;
		var view = null;
		var buffer1 = null;
		var len = null;
		var this1;
		if(length != null) {
			this1 = new Uint16Array(length);
		} else if(array != null) {
			this1 = new Uint16Array(array);
		} else if(vector != null) {
			this1 = new Uint16Array(vector.__array);
		} else if(view != null) {
			this1 = new Uint16Array(view);
		} else if(buffer1 != null) {
			if(len == null) {
				this1 = new Uint16Array(buffer1,0);
			} else {
				this1 = new Uint16Array(buffer1,0,len);
			}
		} else {
			this1 = null;
		}
		newBuffer = this1;
		newBuffer.set(buffer);
		position = buffer.length;
	}
	if(newBuffer != null) {
		if(!isQuad) {
			graphics.__triangleIndexBufferData = newBuffer;
		}
	}
};
openfl__$internal_renderer_context3D_Context3DGraphics.resizeVertexBuffer = function(graphics,hasUVTData,length) {
	var buffer = hasUVTData ? graphics.__vertexBufferDataUVT : graphics.__vertexBufferData;
	var newBuffer = null;
	if(buffer == null) {
		var array = null;
		var vector = null;
		var view = null;
		var buffer1 = null;
		var len = null;
		var this1;
		if(length != null) {
			this1 = new Float32Array(length);
		} else if(array != null) {
			this1 = new Float32Array(array);
		} else if(vector != null) {
			this1 = new Float32Array(vector.__array);
		} else if(view != null) {
			this1 = new Float32Array(view);
		} else if(buffer1 != null) {
			if(len == null) {
				this1 = new Float32Array(buffer1,0);
			} else {
				this1 = new Float32Array(buffer1,0,len);
			}
		} else {
			this1 = null;
		}
		newBuffer = this1;
	} else if(length > buffer.length) {
		var array = null;
		var vector = null;
		var view = null;
		var buffer1 = null;
		var len = null;
		var this1;
		if(length != null) {
			this1 = new Float32Array(length);
		} else if(array != null) {
			this1 = new Float32Array(array);
		} else if(vector != null) {
			this1 = new Float32Array(vector.__array);
		} else if(view != null) {
			this1 = new Float32Array(view);
		} else if(buffer1 != null) {
			if(len == null) {
				this1 = new Float32Array(buffer1,0);
			} else {
				this1 = new Float32Array(buffer1,0,len);
			}
		} else {
			this1 = null;
		}
		newBuffer = this1;
		newBuffer.set(buffer);
	}
	if(newBuffer != null) {
		if(hasUVTData) {
			graphics.__vertexBufferDataUVT = newBuffer;
		} else {
			graphics.__vertexBufferData = newBuffer;
		}
	}
};
var openfl_display_Shader = function(code) {
	this.byteCode = code;
	this.precisionHint = 1;
	this.__glSourceDirty = true;
	this.__numPasses = 1;
	this.__data = openfl_display_ShaderData._new(code);
};
$hxClasses["openfl.display.Shader"] = openfl_display_Shader;
openfl_display_Shader.__name__ = "openfl.display.Shader";
openfl_display_Shader.prototype = {
	byteCode: null
	,glProgram: null
	,precisionHint: null
	,program: null
	,__alpha: null
	,__bitmap: null
	,__colorMultiplier: null
	,__colorOffset: null
	,__context: null
	,__data: null
	,__glFragmentSource: null
	,__glSourceDirty: null
	,__glVertexSource: null
	,__hasColorTransform: null
	,__inputBitmapData: null
	,__isGenerated: null
	,__matrix: null
	,__numPasses: null
	,__paramBool: null
	,__paramFloat: null
	,__paramInt: null
	,__position: null
	,__textureCoord: null
	,__texture: null
	,__textureSize: null
	,__clearUseArray: function() {
		var _g = 0;
		var _g1 = this.__paramBool;
		while(_g < _g1.length) {
			var parameter = _g1[_g];
			++_g;
			parameter.__useArray = false;
		}
		var _g = 0;
		var _g1 = this.__paramFloat;
		while(_g < _g1.length) {
			var parameter = _g1[_g];
			++_g;
			parameter.__useArray = false;
		}
		var _g = 0;
		var _g1 = this.__paramInt;
		while(_g < _g1.length) {
			var parameter = _g1[_g];
			++_g;
			parameter.__useArray = false;
		}
	}
	,__createGLShader: function(source,type) {
		var gl = this.__context.gl;
		var shader = gl.createShader(type);
		gl.shaderSource(shader,source);
		gl.compileShader(shader);
		if(gl.getShaderParameter(shader,gl.COMPILE_STATUS) == 0) {
			var message = type == gl.VERTEX_SHADER ? "Error compiling vertex shader" : "Error compiling fragment shader";
			message += "\n" + gl.getShaderInfoLog(shader);
			message += "\n" + source;
			lime_utils_Log.error(message,{ fileName : "openfl/display/Shader.hx", lineNumber : 328, className : "openfl.display.Shader", methodName : "__createGLShader"});
		}
		return shader;
	}
	,__createGLProgram: function(vertexSource,fragmentSource) {
		var gl = this.__context.gl;
		var vertexShader = this.__createGLShader(vertexSource,gl.VERTEX_SHADER);
		var fragmentShader = this.__createGLShader(fragmentSource,gl.FRAGMENT_SHADER);
		var program = gl.createProgram();
		var _g = 0;
		var _g1 = this.__paramFloat;
		while(_g < _g1.length) {
			var param = _g1[_g];
			++_g;
			if(param.name.indexOf("Position") > -1 && StringTools.startsWith(param.name,"openfl_")) {
				gl.bindAttribLocation(program,0,param.name);
				break;
			}
		}
		gl.attachShader(program,vertexShader);
		gl.attachShader(program,fragmentShader);
		gl.linkProgram(program);
		if(gl.getProgramParameter(program,gl.LINK_STATUS) == 0) {
			var message = "Unable to initialize the shader program";
			message += "\n" + gl.getProgramInfoLog(program);
			lime_utils_Log.error(message,{ fileName : "openfl/display/Shader.hx", lineNumber : 361, className : "openfl.display.Shader", methodName : "__createGLProgram"});
		}
		return program;
	}
	,__disable: function() {
		if(this.program != null) {
			this.__disableGL();
		}
	}
	,__disableGL: function() {
		var gl = this.__context.gl;
		var textureCount = 0;
		var _g = 0;
		var _g1 = this.__inputBitmapData;
		while(_g < _g1.length) {
			var input = _g1[_g];
			++_g;
			input.__disableGL(this.__context,textureCount);
			++textureCount;
		}
		var _g = 0;
		var _g1 = this.__paramBool;
		while(_g < _g1.length) {
			var parameter = _g1[_g];
			++_g;
			parameter.__disableGL(this.__context);
		}
		var _g = 0;
		var _g1 = this.__paramFloat;
		while(_g < _g1.length) {
			var parameter = _g1[_g];
			++_g;
			parameter.__disableGL(this.__context);
		}
		var _g = 0;
		var _g1 = this.__paramInt;
		while(_g < _g1.length) {
			var parameter = _g1[_g];
			++_g;
			parameter.__disableGL(this.__context);
		}
		this.__context.__bindGLArrayBuffer(null);
		if(this.__context.__context.type == "opengl") {
			gl.disable(gl.TEXTURE_2D);
		}
	}
	,__enable: function() {
		this.__init();
		if(this.program != null) {
			this.__enableGL();
		}
	}
	,__enableGL: function() {
		var textureCount = 0;
		var gl = this.__context.gl;
		var _g = 0;
		var _g1 = this.__inputBitmapData;
		while(_g < _g1.length) {
			var input = _g1[_g];
			++_g;
			gl.uniform1i(input.index,textureCount);
			++textureCount;
		}
		if(this.__context.__context.type == "opengl" && textureCount > 0) {
			gl.enable(gl.TEXTURE_2D);
		}
	}
	,__init: function() {
		if(this.__data == null) {
			this.__data = openfl_display_ShaderData._new(null);
		}
		if(this.__glFragmentSource != null && this.__glVertexSource != null && (this.program == null || this.__glSourceDirty)) {
			this.__initGL();
		}
	}
	,__initGL: function() {
		if(this.__glSourceDirty || this.__paramBool == null) {
			this.__glSourceDirty = false;
			this.program = null;
			this.__inputBitmapData = [];
			this.__paramBool = [];
			this.__paramFloat = [];
			this.__paramInt = [];
			this.__processGLData(this.get_glVertexSource(),"attribute");
			this.__processGLData(this.get_glVertexSource(),"uniform");
			this.__processGLData(this.get_glFragmentSource(),"uniform");
		}
		if(this.__context != null && this.program == null) {
			var gl = this.__context.gl;
			var prefix = "#ifdef GL_ES\n\t\t\t\t" + (this.precisionHint == 1 ? "#ifdef GL_FRAGMENT_PRECISION_HIGH\n\t\t\t\tprecision highp float;\n\t\t\t\t#else\n\t\t\t\tprecision mediump float;\n\t\t\t\t#endif" : "precision lowp float;") + "\n\t\t\t\t#endif\n\t\t\t\t";
			var vertex = prefix + this.get_glVertexSource();
			var fragment = prefix + this.get_glFragmentSource();
			var id = vertex + fragment;
			if(Object.prototype.hasOwnProperty.call(this.__context.__programs.h,id)) {
				this.program = this.__context.__programs.h[id];
			} else {
				this.program = this.__context.createProgram(1);
				this.program.__glProgram = this.__createGLProgram(vertex,fragment);
				this.__context.__programs.h[id] = this.program;
			}
			if(this.program != null) {
				this.glProgram = this.program.__glProgram;
				var _g = 0;
				var _g1 = this.__inputBitmapData;
				while(_g < _g1.length) {
					var input = _g1[_g];
					++_g;
					if(input.__isUniform) {
						input.index = gl.getUniformLocation(this.glProgram,input.name);
					} else {
						input.index = gl.getAttribLocation(this.glProgram,input.name);
					}
				}
				var _g = 0;
				var _g1 = this.__paramBool;
				while(_g < _g1.length) {
					var parameter = _g1[_g];
					++_g;
					if(parameter.__isUniform) {
						parameter.index = gl.getUniformLocation(this.glProgram,parameter.name);
					} else {
						parameter.index = gl.getAttribLocation(this.glProgram,parameter.name);
					}
				}
				var _g = 0;
				var _g1 = this.__paramFloat;
				while(_g < _g1.length) {
					var parameter = _g1[_g];
					++_g;
					if(parameter.__isUniform) {
						parameter.index = gl.getUniformLocation(this.glProgram,parameter.name);
					} else {
						parameter.index = gl.getAttribLocation(this.glProgram,parameter.name);
					}
				}
				var _g = 0;
				var _g1 = this.__paramInt;
				while(_g < _g1.length) {
					var parameter = _g1[_g];
					++_g;
					if(parameter.__isUniform) {
						parameter.index = gl.getUniformLocation(this.glProgram,parameter.name);
					} else {
						parameter.index = gl.getAttribLocation(this.glProgram,parameter.name);
					}
				}
			}
		}
	}
	,__processGLData: function(source,storageType) {
		var lastMatch = 0;
		var position;
		var regex;
		var name;
		var type;
		if(storageType == "uniform") {
			regex = new EReg("uniform ([A-Za-z0-9]+) ([A-Za-z0-9_]+)","");
		} else {
			regex = new EReg("attribute ([A-Za-z0-9]+) ([A-Za-z0-9_]+)","");
		}
		while(regex.matchSub(source,lastMatch)) {
			type = regex.matched(1);
			name = regex.matched(2);
			if(StringTools.startsWith(name,"gl_")) {
				continue;
			}
			var isUniform = storageType == "uniform";
			if(StringTools.startsWith(type,"sampler")) {
				var input = new openfl_display_ShaderInput();
				input.name = name;
				input.__isUniform = isUniform;
				this.__inputBitmapData.push(input);
				switch(name) {
				case "bitmap":
					this.__bitmap = input;
					break;
				case "openfl_Texture":
					this.__texture = input;
					break;
				default:
				}
				this.__data[name] = input;
				if(this.__isGenerated) {
					this[name] = input;
				}
			} else if(!Object.prototype.hasOwnProperty.call(this.__data,name) || Reflect.field(this.__data,name) == null) {
				var parameterType;
				switch(type) {
				case "bool":
					parameterType = 0;
					break;
				case "bvec2":
					parameterType = 1;
					break;
				case "bvec3":
					parameterType = 2;
					break;
				case "bvec4":
					parameterType = 3;
					break;
				case "dvec2":case "vec2":
					parameterType = 5;
					break;
				case "dvec3":case "vec3":
					parameterType = 6;
					break;
				case "double":case "float":
					parameterType = 4;
					break;
				case "ivec3":case "uvec3":
					parameterType = 10;
					break;
				case "ivec4":case "uvec4":
					parameterType = 11;
					break;
				case "mat2":case "mat2x2":
					parameterType = 12;
					break;
				case "mat2x3":
					parameterType = 13;
					break;
				case "mat2x4":
					parameterType = 14;
					break;
				case "mat3x2":
					parameterType = 15;
					break;
				case "mat3":case "mat3x3":
					parameterType = 16;
					break;
				case "mat3x4":
					parameterType = 17;
					break;
				case "mat4":case "mat4x4":
					parameterType = 20;
					break;
				case "mat4x2":
					parameterType = 18;
					break;
				case "mat4x3":
					parameterType = 19;
					break;
				case "int":case "uint":
					parameterType = 8;
					break;
				case "ivec2":case "uvec2":
					parameterType = 9;
					break;
				case "dvec4":case "vec4":
					parameterType = 7;
					break;
				default:
					parameterType = null;
				}
				var length;
				switch(parameterType) {
				case 1:case 5:case 9:
					length = 2;
					break;
				case 3:case 7:case 11:case 12:
					length = 4;
					break;
				case 2:case 6:case 10:
					length = 3;
					break;
				case 16:
					length = 9;
					break;
				case 20:
					length = 16;
					break;
				default:
					length = 1;
				}
				var arrayLength;
				switch(parameterType) {
				case 12:
					arrayLength = 2;
					break;
				case 16:
					arrayLength = 3;
					break;
				case 20:
					arrayLength = 4;
					break;
				default:
					arrayLength = 1;
				}
				switch(parameterType) {
				case 0:case 1:case 2:case 3:
					var parameter = new openfl_display_ShaderParameter();
					parameter.set_name(name);
					parameter.type = parameterType;
					parameter.__arrayLength = arrayLength;
					parameter.__isBool = true;
					parameter.__isUniform = isUniform;
					parameter.__length = length;
					this.__paramBool.push(parameter);
					if(name == "openfl_HasColorTransform") {
						this.__hasColorTransform = parameter;
					}
					this.__data[name] = parameter;
					if(this.__isGenerated) {
						this[name] = parameter;
					}
					break;
				case 8:case 9:case 10:case 11:
					var parameter1 = new openfl_display_ShaderParameter();
					parameter1.set_name(name);
					parameter1.type = parameterType;
					parameter1.__arrayLength = arrayLength;
					parameter1.__isInt = true;
					parameter1.__isUniform = isUniform;
					parameter1.__length = length;
					this.__paramInt.push(parameter1);
					this.__data[name] = parameter1;
					if(this.__isGenerated) {
						this[name] = parameter1;
					}
					break;
				default:
					var parameter2 = new openfl_display_ShaderParameter();
					parameter2.set_name(name);
					parameter2.type = parameterType;
					parameter2.__arrayLength = arrayLength;
					if(arrayLength > 0) {
						var elements = arrayLength * arrayLength;
						var array = null;
						var vector = null;
						var view = null;
						var buffer = null;
						var len = null;
						var this1;
						if(elements != null) {
							this1 = new Float32Array(elements);
						} else if(array != null) {
							this1 = new Float32Array(array);
						} else if(vector != null) {
							this1 = new Float32Array(vector.__array);
						} else if(view != null) {
							this1 = new Float32Array(view);
						} else if(buffer != null) {
							if(len == null) {
								this1 = new Float32Array(buffer,0);
							} else {
								this1 = new Float32Array(buffer,0,len);
							}
						} else {
							this1 = null;
						}
						parameter2.__uniformMatrix = this1;
					}
					parameter2.__isFloat = true;
					parameter2.__isUniform = isUniform;
					parameter2.__length = length;
					this.__paramFloat.push(parameter2);
					if(StringTools.startsWith(name,"openfl_")) {
						switch(name) {
						case "openfl_Alpha":
							this.__alpha = parameter2;
							break;
						case "openfl_ColorMultiplier":
							this.__colorMultiplier = parameter2;
							break;
						case "openfl_ColorOffset":
							this.__colorOffset = parameter2;
							break;
						case "openfl_Matrix":
							this.__matrix = parameter2;
							break;
						case "openfl_Position":
							this.__position = parameter2;
							break;
						case "openfl_TextureCoord":
							this.__textureCoord = parameter2;
							break;
						case "openfl_TextureSize":
							this.__textureSize = parameter2;
							break;
						default:
						}
					}
					this.__data[name] = parameter2;
					if(this.__isGenerated) {
						this[name] = parameter2;
					}
				}
			}
			position = regex.matchedPos();
			lastMatch = position.pos + position.len;
		}
	}
	,__update: function() {
		if(this.program != null) {
			this.__updateGL();
		}
	}
	,__updateFromBuffer: function(shaderBuffer,bufferOffset) {
		if(this.program != null) {
			this.__updateGLFromBuffer(shaderBuffer,bufferOffset);
		}
	}
	,__updateGL: function() {
		var textureCount = 0;
		var _g = 0;
		var _g1 = this.__inputBitmapData;
		while(_g < _g1.length) {
			var input = _g1[_g];
			++_g;
			input.__updateGL(this.__context,textureCount);
			++textureCount;
		}
		var _g = 0;
		var _g1 = this.__paramBool;
		while(_g < _g1.length) {
			var parameter = _g1[_g];
			++_g;
			parameter.__updateGL(this.__context);
		}
		var _g = 0;
		var _g1 = this.__paramFloat;
		while(_g < _g1.length) {
			var parameter = _g1[_g];
			++_g;
			parameter.__updateGL(this.__context);
		}
		var _g = 0;
		var _g1 = this.__paramInt;
		while(_g < _g1.length) {
			var parameter = _g1[_g];
			++_g;
			parameter.__updateGL(this.__context);
		}
	}
	,__updateGLFromBuffer: function(shaderBuffer,bufferOffset) {
		var textureCount = 0;
		var input;
		var inputData;
		var inputFilter;
		var inputMipFilter;
		var inputWrap;
		var _g = 0;
		var _g1 = shaderBuffer.inputCount;
		while(_g < _g1) {
			var i = _g++;
			input = shaderBuffer.inputRefs[i];
			inputData = shaderBuffer.inputs[i];
			inputFilter = shaderBuffer.inputFilter[i];
			inputMipFilter = shaderBuffer.inputMipFilter[i];
			inputWrap = shaderBuffer.inputWrap[i];
			if(inputData != null) {
				input.__updateGL(this.__context,textureCount,inputData,inputFilter,inputMipFilter,inputWrap);
				++textureCount;
			}
		}
		var gl = this.__context.gl;
		if(shaderBuffer.paramDataLength > 0) {
			if(shaderBuffer.paramDataBuffer == null) {
				shaderBuffer.paramDataBuffer = gl.createBuffer();
			}
			this.__context.__bindGLArrayBuffer(shaderBuffer.paramDataBuffer);
			lime_graphics_WebGLRenderContext.bufferData(gl,gl.ARRAY_BUFFER,shaderBuffer.paramData,gl.DYNAMIC_DRAW);
		} else {
			this.__context.__bindGLArrayBuffer(null);
		}
		var boolIndex = 0;
		var floatIndex = 0;
		var intIndex = 0;
		var boolCount = shaderBuffer.paramBoolCount;
		var floatCount = shaderBuffer.paramFloatCount;
		var paramData = shaderBuffer.paramData;
		var boolRef;
		var floatRef;
		var intRef;
		var hasOverride;
		var overrideBoolValue = null;
		var overrideFloatValue = null;
		var overrideIntValue = null;
		var _g = 0;
		var _g1 = shaderBuffer.paramCount;
		while(_g < _g1) {
			var i = _g++;
			hasOverride = false;
			if(i < boolCount) {
				boolRef = shaderBuffer.paramRefs_Bool[boolIndex];
				var _g2 = 0;
				var _g3 = shaderBuffer.overrideBoolCount;
				while(_g2 < _g3) {
					var j = _g2++;
					if(boolRef.name == shaderBuffer.overrideBoolNames[j]) {
						overrideBoolValue = shaderBuffer.overrideBoolValues[j];
						hasOverride = true;
						break;
					}
				}
				if(hasOverride) {
					boolRef.__updateGL(this.__context,overrideBoolValue);
				} else {
					boolRef.__updateGLFromBuffer(this.__context,paramData,shaderBuffer.paramPositions[i],shaderBuffer.paramLengths[i],bufferOffset);
				}
				++boolIndex;
			} else if(i < boolCount + floatCount) {
				floatRef = shaderBuffer.paramRefs_Float[floatIndex];
				var _g4 = 0;
				var _g5 = shaderBuffer.overrideFloatCount;
				while(_g4 < _g5) {
					var j1 = _g4++;
					if(floatRef.name == shaderBuffer.overrideFloatNames[j1]) {
						overrideFloatValue = shaderBuffer.overrideFloatValues[j1];
						hasOverride = true;
						break;
					}
				}
				if(hasOverride) {
					floatRef.__updateGL(this.__context,overrideFloatValue);
				} else {
					floatRef.__updateGLFromBuffer(this.__context,paramData,shaderBuffer.paramPositions[i],shaderBuffer.paramLengths[i],bufferOffset);
				}
				++floatIndex;
			} else {
				intRef = shaderBuffer.paramRefs_Int[intIndex];
				var _g6 = 0;
				var _g7 = shaderBuffer.overrideIntCount;
				while(_g6 < _g7) {
					var j2 = _g6++;
					if(intRef.name == shaderBuffer.overrideIntNames[j2]) {
						overrideIntValue = shaderBuffer.overrideIntValues[j2];
						hasOverride = true;
						break;
					}
				}
				if(hasOverride) {
					intRef.__updateGL(this.__context,overrideIntValue);
				} else {
					intRef.__updateGLFromBuffer(this.__context,paramData,shaderBuffer.paramPositions[i],shaderBuffer.paramLengths[i],bufferOffset);
				}
				++intIndex;
			}
		}
	}
	,get_data: function() {
		if(this.__glSourceDirty || this.__data == null) {
			this.__init();
		}
		return this.__data;
	}
	,set_data: function(value) {
		return this.__data = value;
	}
	,get_glFragmentSource: function() {
		return this.__glFragmentSource;
	}
	,set_glFragmentSource: function(value) {
		if(value != this.__glFragmentSource) {
			this.__glSourceDirty = true;
		}
		return this.__glFragmentSource = value;
	}
	,get_glVertexSource: function() {
		return this.__glVertexSource;
	}
	,set_glVertexSource: function(value) {
		if(value != this.__glVertexSource) {
			this.__glSourceDirty = true;
		}
		return this.__glVertexSource = value;
	}
	,__class__: openfl_display_Shader
	,__properties__: {set_glVertexSource:"set_glVertexSource",get_glVertexSource:"get_glVertexSource",set_glFragmentSource:"set_glFragmentSource",get_glFragmentSource:"get_glFragmentSource",set_data:"set_data",get_data:"get_data"}
};
var openfl__$internal_renderer_context3D_Context3DMaskShader = function() {
	if(this.__glFragmentSource == null) {
		this.__glFragmentSource = "varying vec2 openfl_TextureCoordv;\n\t\t\n\t\tuniform sampler2D openfl_Texture;\n\t\t\n\t\tvoid main(void) {\n\t\t\t\n\t\t\tvec4 color = texture2D (openfl_Texture, openfl_TextureCoordv);\n\t\t\t\n\t\t\tif (color.a == 0.0) {\n\t\t\t\t\n\t\t\t\tdiscard;\n\t\t\t\t\n\t\t\t} else {\n\t\t\t\t\n\t\t\t\tgl_FragColor = color;\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t}";
	}
	if(this.__glVertexSource == null) {
		this.__glVertexSource = "attribute vec4 openfl_Position;\n\t\tattribute vec2 openfl_TextureCoord;\n\t\tvarying vec2 openfl_TextureCoordv;\n\t\t\n\t\tuniform mat4 openfl_Matrix;\n\t\t\n\t\tvoid main(void) {\n\t\t\t\n\t\t\topenfl_TextureCoordv = openfl_TextureCoord;\n\t\t\t\n\t\t\tgl_Position = openfl_Matrix * openfl_Position;\n\t\t\t\n\t\t}";
	}
	openfl_display_Shader.call(this);
	this.__isGenerated = true;
	this.__initGL();
};
$hxClasses["openfl._internal.renderer.context3D.Context3DMaskShader"] = openfl__$internal_renderer_context3D_Context3DMaskShader;
openfl__$internal_renderer_context3D_Context3DMaskShader.__name__ = "openfl._internal.renderer.context3D.Context3DMaskShader";
openfl__$internal_renderer_context3D_Context3DMaskShader.__super__ = openfl_display_Shader;
openfl__$internal_renderer_context3D_Context3DMaskShader.prototype = $extend(openfl_display_Shader.prototype,{
	openfl_Position: null
	,openfl_TextureCoord: null
	,openfl_Matrix: null
	,openfl_Texture: null
	,__class__: openfl__$internal_renderer_context3D_Context3DMaskShader
});
var openfl__$internal_renderer_context3D_Context3DShape = function() { };
$hxClasses["openfl._internal.renderer.context3D.Context3DShape"] = openfl__$internal_renderer_context3D_Context3DShape;
openfl__$internal_renderer_context3D_Context3DShape.__name__ = "openfl._internal.renderer.context3D.Context3DShape";
openfl__$internal_renderer_context3D_Context3DShape.render = function(shape,renderer) {
	if(!shape.__renderable || shape.__worldAlpha <= 0) {
		return;
	}
	var graphics = shape.__graphics;
	if(graphics != null) {
		renderer.__setBlendMode(shape.__worldBlendMode);
		renderer.__pushMaskObject(shape);
		openfl__$internal_renderer_context3D_Context3DGraphics.render(graphics,renderer);
		if(graphics.__bitmap != null && graphics.__visible) {
			var context = renderer.__context3D;
			var scale9Grid = shape.__worldScale9Grid;
			var shader = renderer.__initDisplayShader(shape.__worldShader);
			renderer.setShader(shader);
			renderer.applyBitmapData(graphics.__bitmap,true);
			renderer.applyMatrix(renderer.__getMatrix(graphics.__worldTransform,1));
			renderer.applyAlpha(shape.__worldAlpha);
			renderer.applyColorTransform(shape.__worldColorTransform);
			renderer.updateShader();
			var vertexBuffer = graphics.__bitmap.getVertexBuffer(context);
			if(shader.__position != null) {
				context.setVertexBufferAt(shader.__position.index,vertexBuffer,0,3);
			}
			if(shader.__textureCoord != null) {
				context.setVertexBufferAt(shader.__textureCoord.index,vertexBuffer,3,2);
			}
			var indexBuffer = graphics.__bitmap.getIndexBuffer(context);
			context.drawTriangles(indexBuffer);
			openfl__$internal_renderer_context3D_stats_Context3DStats.incrementDrawCall(0);
			renderer.__clearShader();
		}
		renderer.__popMaskObject(shape);
	}
};
openfl__$internal_renderer_context3D_Context3DShape.renderMask = function(shape,renderer) {
	var graphics = shape.__graphics;
	if(graphics != null) {
		openfl__$internal_renderer_context3D_Context3DGraphics.renderMask(graphics,renderer);
		if(graphics.__bitmap != null) {
			var context = renderer.__context3D;
			var shader = renderer.__maskShader;
			renderer.setShader(shader);
			renderer.applyBitmapData(graphics.__bitmap,true);
			renderer.applyMatrix(renderer.__getMatrix(graphics.__worldTransform,1));
			renderer.updateShader();
			var vertexBuffer = graphics.__bitmap.getVertexBuffer(context);
			if(shader.__position != null) {
				context.setVertexBufferAt(shader.__position.index,vertexBuffer,0,3);
			}
			if(shader.__textureCoord != null) {
				context.setVertexBufferAt(shader.__textureCoord.index,vertexBuffer,3,2);
			}
			var indexBuffer = graphics.__bitmap.getIndexBuffer(context);
			context.drawTriangles(indexBuffer);
			openfl__$internal_renderer_context3D_stats_Context3DStats.incrementDrawCall(0);
			renderer.__clearShader();
		}
	}
};
var openfl__$internal_renderer_context3D_Context3DState = function() {
	this.backBufferEnableDepthAndStencil = false;
	this.blendDestinationAlphaFactor = 9;
	this.blendSourceAlphaFactor = 2;
	this.blendDestinationRGBFactor = 9;
	this.blendSourceRGBFactor = 2;
	this.colorMaskRed = true;
	this.colorMaskGreen = true;
	this.colorMaskBlue = true;
	this.colorMaskAlpha = true;
	this.culling = 3;
	this.depthCompareMode = 4;
	this.depthMask = true;
	this.samplerStates = [];
	this.scissorRectangle = new openfl_geom_Rectangle();
	this.stencilCompareMode = 0;
	this.stencilDepthFail = 5;
	this.stencilFail = 5;
	this.stencilPass = 5;
	this.stencilReadMask = 255;
	this.stencilReferenceValue = 0;
	this.stencilTriangleFace = 2;
	this.stencilWriteMask = 255;
	this.textures = [];
	this.__frontFaceGLCCW = true;
	this.__glBlendEquation = 32774;
};
$hxClasses["openfl._internal.renderer.context3D.Context3DState"] = openfl__$internal_renderer_context3D_Context3DState;
openfl__$internal_renderer_context3D_Context3DState.__name__ = "openfl._internal.renderer.context3D.Context3DState";
openfl__$internal_renderer_context3D_Context3DState.prototype = {
	backBufferEnableDepthAndStencil: null
	,blendDestinationAlphaFactor: null
	,blendSourceAlphaFactor: null
	,blendDestinationRGBFactor: null
	,blendSourceRGBFactor: null
	,colorMaskRed: null
	,colorMaskGreen: null
	,colorMaskBlue: null
	,colorMaskAlpha: null
	,culling: null
	,depthCompareMode: null
	,depthMask: null
	,program: null
	,renderToTexture: null
	,renderToTextureAntiAlias: null
	,renderToTextureDepthStencil: null
	,renderToTextureSurfaceSelector: null
	,samplerStates: null
	,scissorEnabled: null
	,scissorRectangle: null
	,stencilCompareMode: null
	,stencilDepthFail: null
	,stencilFail: null
	,stencilPass: null
	,stencilReadMask: null
	,stencilReferenceValue: null
	,stencilTriangleFace: null
	,stencilWriteMask: null
	,textures: null
	,shader: null
	,__currentGLArrayBuffer: null
	,__currentGLElementArrayBuffer: null
	,__currentGLFramebuffer: null
	,__currentGLTexture2D: null
	,__currentGLTextureCubeMap: null
	,__enableGLBlend: null
	,__enableGLCullFace: null
	,__enableGLDepthTest: null
	,__enableGLScissorTest: null
	,__enableGLStencilTest: null
	,__frontFaceGLCCW: null
	,__glBlendEquation: null
	,__primaryGLFramebuffer: null
	,__rttDepthGLRenderbuffer: null
	,__rttGLFramebuffer: null
	,__rttGLRenderbuffer: null
	,__rttStencilGLRenderbuffer: null
	,__class__: openfl__$internal_renderer_context3D_Context3DState
};
var openfl__$internal_renderer_context3D_Context3DTextField = function() { };
$hxClasses["openfl._internal.renderer.context3D.Context3DTextField"] = openfl__$internal_renderer_context3D_Context3DTextField;
openfl__$internal_renderer_context3D_Context3DTextField.__name__ = "openfl._internal.renderer.context3D.Context3DTextField";
openfl__$internal_renderer_context3D_Context3DTextField.render = function(textField,renderer) {
	var renderer1 = renderer.__softwareRenderer;
	var transform = textField.__worldTransform;
	var textEngine = textField.__textEngine;
	var bounds = textEngine.background || textEngine.border ? textEngine.bounds : textEngine.textBounds;
	var graphics = textField.__graphics;
	if(textField.__dirty) {
		textField.__updateLayout();
		if(graphics.__bounds == null) {
			graphics.__bounds = new openfl_geom_Rectangle();
		}
		graphics.__bounds.copyFrom(bounds);
	}
	graphics.__update(renderer1.__worldTransform);
	if(textField.__dirty || graphics.__softwareDirty) {
		var width = graphics.__width;
		var height = graphics.__height;
		if((textEngine.text == null || textEngine.text == "") && !textEngine.background && !textEngine.border && !textEngine.__hasFocus && (textEngine.type != 1 || !textEngine.selectable) || (textEngine.width <= 0 || textEngine.height <= 0) && textEngine.autoSize != 2) {
			textField.__graphics.__canvas = null;
			textField.__graphics.__context = null;
			textField.__graphics.__bitmap = null;
			textField.__graphics.__softwareDirty = false;
			textField.__graphics.set___dirty(false);
			textField.__dirty = false;
		} else {
			if(textField.__graphics.__canvas == null) {
				textField.__graphics.__canvas = window.document.createElement("canvas");
				textField.__graphics.__context = textField.__graphics.__canvas.getContext("2d");
			}
			openfl__$internal_renderer_canvas_CanvasTextField.context = graphics.__context;
			var transform = graphics.__renderTransform;
			if(renderer1.__isDOM) {
				var scale = renderer1.pixelRatio;
				graphics.__canvas.width = width * scale | 0;
				graphics.__canvas.height = height * scale | 0;
				graphics.__canvas.style.width = width + "px";
				graphics.__canvas.style.height = height + "px";
				var matrix = openfl_geom_Matrix.__pool.get();
				matrix.copyFrom(transform);
				matrix.scale(scale,scale);
				renderer1.setTransform(matrix,openfl__$internal_renderer_canvas_CanvasTextField.context);
				openfl_geom_Matrix.__pool.release(matrix);
			} else {
				graphics.__canvas.width = width;
				graphics.__canvas.height = height;
				openfl__$internal_renderer_canvas_CanvasTextField.context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx,transform.ty);
			}
			if(openfl__$internal_renderer_canvas_CanvasTextField.clearRect == null) {
				openfl__$internal_renderer_canvas_CanvasTextField.clearRect = (typeof navigator !== 'undefined' && typeof navigator['isCocoonJS'] !== 'undefined');
			}
			if(openfl__$internal_renderer_canvas_CanvasTextField.clearRect) {
				openfl__$internal_renderer_canvas_CanvasTextField.context.clearRect(0,0,graphics.__canvas.width,graphics.__canvas.height);
			}
			if(textEngine.text != null && textEngine.text != "" || textEngine.__hasFocus) {
				var text = textEngine.text;
				if(!renderer1.__allowSmoothing || textEngine.antiAliasType == 0 && textEngine.sharpness == 400) {
					graphics.__context.imageSmoothingEnabled = false;
				} else {
					graphics.__context.imageSmoothingEnabled = true;
				}
				if(textEngine.border || textEngine.background) {
					openfl__$internal_renderer_canvas_CanvasTextField.context.rect(0.5,0.5,bounds.width - 1,bounds.height - 1);
					if(textEngine.background) {
						var tmp = StringTools.hex(textEngine.backgroundColor & 16777215,6);
						openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#" + tmp;
						openfl__$internal_renderer_canvas_CanvasTextField.context.fill();
					}
					if(textEngine.border) {
						openfl__$internal_renderer_canvas_CanvasTextField.context.lineWidth = 1;
						var tmp = StringTools.hex(textEngine.borderColor & 16777215,6);
						openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle = "#" + tmp;
						openfl__$internal_renderer_canvas_CanvasTextField.context.stroke();
					}
				}
				openfl__$internal_renderer_canvas_CanvasTextField.context.textBaseline = "alphabetic";
				openfl__$internal_renderer_canvas_CanvasTextField.context.textAlign = "start";
				var scrollX = -textField.get_scrollH();
				var scrollY = 0.0;
				var _g = 0;
				var _g1 = textField.get_scrollV() - 1;
				while(_g < _g1) {
					var i = _g++;
					scrollY -= textEngine.lineHeights.get(i);
				}
				var advance;
				var group = textEngine.layoutGroups.iterator();
				while(group.hasNext()) {
					var group1 = group.next();
					if(group1.lineIndex < textField.get_scrollV() - 1) {
						continue;
					}
					if(group1.lineIndex > textEngine.get_bottomScrollV() - 1) {
						break;
					}
					var color = "#" + StringTools.hex(group1.format.color & 16777215,6);
					openfl__$internal_renderer_canvas_CanvasTextField.context.font = openfl__$internal_text_TextEngine.getFont(group1.format);
					openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = color;
					openfl__$internal_renderer_canvas_CanvasTextField.context.fillText(text.substring(group1.startIndex,group1.endIndex),group1.offsetX + scrollX - bounds.x,group1.offsetY + group1.ascent + scrollY - bounds.y);
					if(textField.__caretIndex > -1 && textEngine.selectable) {
						if(textField.__selectionIndex == textField.__caretIndex) {
							if(textField.__showCursor && group1.startIndex <= textField.__caretIndex && group1.endIndex >= textField.__caretIndex) {
								advance = 0.0;
								var _g = 0;
								var _g1 = textField.__caretIndex - group1.startIndex;
								while(_g < _g1) {
									var i = _g++;
									if(group1.positions.length <= i) {
										break;
									}
									advance += group1.positions[i];
								}
								var scrollY1 = 0.0;
								var _g2 = textField.get_scrollV();
								var _g3 = group1.lineIndex + 1;
								while(_g2 < _g3) {
									var i1 = _g2++;
									scrollY1 += textEngine.lineHeights.get(i1 - 1);
								}
								openfl__$internal_renderer_canvas_CanvasTextField.context.beginPath();
								var tmp = StringTools.hex(group1.format.color & 16777215,6);
								openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle = "#" + tmp;
								openfl__$internal_renderer_canvas_CanvasTextField.context.moveTo(group1.offsetX + advance - textField.get_scrollH() - bounds.x,scrollY1 + 2 - bounds.y);
								openfl__$internal_renderer_canvas_CanvasTextField.context.lineWidth = 1;
								openfl__$internal_renderer_canvas_CanvasTextField.context.lineTo(group1.offsetX + advance - textField.get_scrollH() - bounds.x,scrollY1 + openfl__$internal_text_TextEngine.getFormatHeight(textField.get_defaultTextFormat()) - 1 - bounds.y);
								openfl__$internal_renderer_canvas_CanvasTextField.context.stroke();
								openfl__$internal_renderer_canvas_CanvasTextField.context.closePath();
							}
						} else if(group1.startIndex <= textField.__caretIndex && group1.endIndex >= textField.__caretIndex || group1.startIndex <= textField.__selectionIndex && group1.endIndex >= textField.__selectionIndex || group1.startIndex > textField.__caretIndex && group1.endIndex < textField.__selectionIndex || group1.startIndex > textField.__selectionIndex && group1.endIndex < textField.__caretIndex) {
							var selectionStart = Math.min(textField.__selectionIndex,textField.__caretIndex) | 0;
							var selectionEnd = Math.max(textField.__selectionIndex,textField.__caretIndex) | 0;
							if(group1.startIndex > selectionStart) {
								selectionStart = group1.startIndex;
							}
							if(group1.endIndex < selectionEnd) {
								selectionEnd = group1.endIndex;
							}
							var end;
							var start = textField.getCharBoundaries(selectionStart);
							if(selectionEnd >= group1.endIndex) {
								end = textField.getCharBoundaries(group1.endIndex - 1);
								if(end != null) {
									end.x += end.width + 2;
								}
							} else {
								end = textField.getCharBoundaries(selectionEnd);
							}
							if(start != null && end != null) {
								openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#000000";
								openfl__$internal_renderer_canvas_CanvasTextField.context.fillRect(start.x + scrollX,start.y + scrollY,end.x - start.x,group1.height);
								openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#FFFFFF";
								openfl__$internal_renderer_canvas_CanvasTextField.context.fillText(text.substring(selectionStart,selectionEnd),scrollX + start.x,group1.offsetY + group1.ascent + scrollY);
							}
						}
					}
					if(group1.format.underline) {
						openfl__$internal_renderer_canvas_CanvasTextField.context.beginPath();
						openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle = color;
						openfl__$internal_renderer_canvas_CanvasTextField.context.lineWidth = 1;
						var x = group1.offsetX + scrollX - bounds.x;
						var y = Math.floor(group1.offsetY + scrollY + group1.ascent - bounds.y) + 0.5;
						openfl__$internal_renderer_canvas_CanvasTextField.context.moveTo(x,y);
						openfl__$internal_renderer_canvas_CanvasTextField.context.lineTo(x + group1.width,y);
						openfl__$internal_renderer_canvas_CanvasTextField.context.stroke();
						openfl__$internal_renderer_canvas_CanvasTextField.context.closePath();
					}
				}
			} else {
				if(textEngine.border || textEngine.background) {
					if(textEngine.border) {
						openfl__$internal_renderer_canvas_CanvasTextField.context.rect(0.5,0.5,bounds.width - 1,bounds.height - 1);
					} else {
						openfl__$internal_renderer_canvas_CanvasTextField.context.rect(0,0,bounds.width,bounds.height);
					}
					if(textEngine.background) {
						var tmp = StringTools.hex(textEngine.backgroundColor & 16777215,6);
						openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#" + tmp;
						openfl__$internal_renderer_canvas_CanvasTextField.context.fill();
					}
					if(textEngine.border) {
						openfl__$internal_renderer_canvas_CanvasTextField.context.lineWidth = 1;
						openfl__$internal_renderer_canvas_CanvasTextField.context.lineCap = "square";
						var tmp = StringTools.hex(textEngine.borderColor & 16777215,6);
						openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle = "#" + tmp;
						openfl__$internal_renderer_canvas_CanvasTextField.context.stroke();
					}
				}
				if(textField.__caretIndex > -1 && textEngine.selectable && textField.__showCursor) {
					var scrollX = -textField.get_scrollH();
					var scrollY = 0.0;
					var _g = 0;
					var _g1 = textField.get_scrollV() - 1;
					while(_g < _g1) {
						var i = _g++;
						scrollY += textEngine.lineHeights.get(i);
					}
					openfl__$internal_renderer_canvas_CanvasTextField.context.beginPath();
					var tmp = StringTools.hex(textField.get_defaultTextFormat().color & 16777215,6);
					openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle = "#" + tmp;
					openfl__$internal_renderer_canvas_CanvasTextField.context.moveTo(scrollX + 2.5,scrollY + 2.5);
					openfl__$internal_renderer_canvas_CanvasTextField.context.lineWidth = 1;
					openfl__$internal_renderer_canvas_CanvasTextField.context.lineTo(scrollX + 2.5,scrollY + openfl__$internal_text_TextEngine.getFormatHeight(textField.get_defaultTextFormat()) - 1);
					openfl__$internal_renderer_canvas_CanvasTextField.context.stroke();
					openfl__$internal_renderer_canvas_CanvasTextField.context.closePath();
				}
			}
			graphics.__bitmap = openfl_display_BitmapData.fromCanvas(textField.__graphics.__canvas);
			graphics.__visible = true;
			textField.__dirty = false;
			graphics.__softwareDirty = false;
			graphics.set___dirty(false);
		}
	}
	textField.__graphics.__hardwareDirty = false;
};
openfl__$internal_renderer_context3D_Context3DTextField.renderMask = function(textField,renderer) {
	var renderer1 = renderer.__softwareRenderer;
	var transform = textField.__worldTransform;
	var textEngine = textField.__textEngine;
	var bounds = textEngine.background || textEngine.border ? textEngine.bounds : textEngine.textBounds;
	var graphics = textField.__graphics;
	if(textField.__dirty) {
		textField.__updateLayout();
		if(graphics.__bounds == null) {
			graphics.__bounds = new openfl_geom_Rectangle();
		}
		graphics.__bounds.copyFrom(bounds);
	}
	graphics.__update(renderer1.__worldTransform);
	if(textField.__dirty || graphics.__softwareDirty) {
		var width = graphics.__width;
		var height = graphics.__height;
		if((textEngine.text == null || textEngine.text == "") && !textEngine.background && !textEngine.border && !textEngine.__hasFocus && (textEngine.type != 1 || !textEngine.selectable) || (textEngine.width <= 0 || textEngine.height <= 0) && textEngine.autoSize != 2) {
			textField.__graphics.__canvas = null;
			textField.__graphics.__context = null;
			textField.__graphics.__bitmap = null;
			textField.__graphics.__softwareDirty = false;
			textField.__graphics.set___dirty(false);
			textField.__dirty = false;
		} else {
			if(textField.__graphics.__canvas == null) {
				textField.__graphics.__canvas = window.document.createElement("canvas");
				textField.__graphics.__context = textField.__graphics.__canvas.getContext("2d");
			}
			openfl__$internal_renderer_canvas_CanvasTextField.context = graphics.__context;
			var transform = graphics.__renderTransform;
			if(renderer1.__isDOM) {
				var scale = renderer1.pixelRatio;
				graphics.__canvas.width = width * scale | 0;
				graphics.__canvas.height = height * scale | 0;
				graphics.__canvas.style.width = width + "px";
				graphics.__canvas.style.height = height + "px";
				var matrix = openfl_geom_Matrix.__pool.get();
				matrix.copyFrom(transform);
				matrix.scale(scale,scale);
				renderer1.setTransform(matrix,openfl__$internal_renderer_canvas_CanvasTextField.context);
				openfl_geom_Matrix.__pool.release(matrix);
			} else {
				graphics.__canvas.width = width;
				graphics.__canvas.height = height;
				openfl__$internal_renderer_canvas_CanvasTextField.context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx,transform.ty);
			}
			if(openfl__$internal_renderer_canvas_CanvasTextField.clearRect == null) {
				openfl__$internal_renderer_canvas_CanvasTextField.clearRect = (typeof navigator !== 'undefined' && typeof navigator['isCocoonJS'] !== 'undefined');
			}
			if(openfl__$internal_renderer_canvas_CanvasTextField.clearRect) {
				openfl__$internal_renderer_canvas_CanvasTextField.context.clearRect(0,0,graphics.__canvas.width,graphics.__canvas.height);
			}
			if(textEngine.text != null && textEngine.text != "" || textEngine.__hasFocus) {
				var text = textEngine.text;
				if(!renderer1.__allowSmoothing || textEngine.antiAliasType == 0 && textEngine.sharpness == 400) {
					graphics.__context.imageSmoothingEnabled = false;
				} else {
					graphics.__context.imageSmoothingEnabled = true;
				}
				if(textEngine.border || textEngine.background) {
					openfl__$internal_renderer_canvas_CanvasTextField.context.rect(0.5,0.5,bounds.width - 1,bounds.height - 1);
					if(textEngine.background) {
						var tmp = StringTools.hex(textEngine.backgroundColor & 16777215,6);
						openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#" + tmp;
						openfl__$internal_renderer_canvas_CanvasTextField.context.fill();
					}
					if(textEngine.border) {
						openfl__$internal_renderer_canvas_CanvasTextField.context.lineWidth = 1;
						var tmp = StringTools.hex(textEngine.borderColor & 16777215,6);
						openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle = "#" + tmp;
						openfl__$internal_renderer_canvas_CanvasTextField.context.stroke();
					}
				}
				openfl__$internal_renderer_canvas_CanvasTextField.context.textBaseline = "alphabetic";
				openfl__$internal_renderer_canvas_CanvasTextField.context.textAlign = "start";
				var scrollX = -textField.get_scrollH();
				var scrollY = 0.0;
				var _g = 0;
				var _g1 = textField.get_scrollV() - 1;
				while(_g < _g1) {
					var i = _g++;
					scrollY -= textEngine.lineHeights.get(i);
				}
				var advance;
				var group = textEngine.layoutGroups.iterator();
				while(group.hasNext()) {
					var group1 = group.next();
					if(group1.lineIndex < textField.get_scrollV() - 1) {
						continue;
					}
					if(group1.lineIndex > textEngine.get_bottomScrollV() - 1) {
						break;
					}
					var color = "#" + StringTools.hex(group1.format.color & 16777215,6);
					openfl__$internal_renderer_canvas_CanvasTextField.context.font = openfl__$internal_text_TextEngine.getFont(group1.format);
					openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = color;
					openfl__$internal_renderer_canvas_CanvasTextField.context.fillText(text.substring(group1.startIndex,group1.endIndex),group1.offsetX + scrollX - bounds.x,group1.offsetY + group1.ascent + scrollY - bounds.y);
					if(textField.__caretIndex > -1 && textEngine.selectable) {
						if(textField.__selectionIndex == textField.__caretIndex) {
							if(textField.__showCursor && group1.startIndex <= textField.__caretIndex && group1.endIndex >= textField.__caretIndex) {
								advance = 0.0;
								var _g = 0;
								var _g1 = textField.__caretIndex - group1.startIndex;
								while(_g < _g1) {
									var i = _g++;
									if(group1.positions.length <= i) {
										break;
									}
									advance += group1.positions[i];
								}
								var scrollY1 = 0.0;
								var _g2 = textField.get_scrollV();
								var _g3 = group1.lineIndex + 1;
								while(_g2 < _g3) {
									var i1 = _g2++;
									scrollY1 += textEngine.lineHeights.get(i1 - 1);
								}
								openfl__$internal_renderer_canvas_CanvasTextField.context.beginPath();
								var tmp = StringTools.hex(group1.format.color & 16777215,6);
								openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle = "#" + tmp;
								openfl__$internal_renderer_canvas_CanvasTextField.context.moveTo(group1.offsetX + advance - textField.get_scrollH() - bounds.x,scrollY1 + 2 - bounds.y);
								openfl__$internal_renderer_canvas_CanvasTextField.context.lineWidth = 1;
								openfl__$internal_renderer_canvas_CanvasTextField.context.lineTo(group1.offsetX + advance - textField.get_scrollH() - bounds.x,scrollY1 + openfl__$internal_text_TextEngine.getFormatHeight(textField.get_defaultTextFormat()) - 1 - bounds.y);
								openfl__$internal_renderer_canvas_CanvasTextField.context.stroke();
								openfl__$internal_renderer_canvas_CanvasTextField.context.closePath();
							}
						} else if(group1.startIndex <= textField.__caretIndex && group1.endIndex >= textField.__caretIndex || group1.startIndex <= textField.__selectionIndex && group1.endIndex >= textField.__selectionIndex || group1.startIndex > textField.__caretIndex && group1.endIndex < textField.__selectionIndex || group1.startIndex > textField.__selectionIndex && group1.endIndex < textField.__caretIndex) {
							var selectionStart = Math.min(textField.__selectionIndex,textField.__caretIndex) | 0;
							var selectionEnd = Math.max(textField.__selectionIndex,textField.__caretIndex) | 0;
							if(group1.startIndex > selectionStart) {
								selectionStart = group1.startIndex;
							}
							if(group1.endIndex < selectionEnd) {
								selectionEnd = group1.endIndex;
							}
							var end;
							var start = textField.getCharBoundaries(selectionStart);
							if(selectionEnd >= group1.endIndex) {
								end = textField.getCharBoundaries(group1.endIndex - 1);
								if(end != null) {
									end.x += end.width + 2;
								}
							} else {
								end = textField.getCharBoundaries(selectionEnd);
							}
							if(start != null && end != null) {
								openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#000000";
								openfl__$internal_renderer_canvas_CanvasTextField.context.fillRect(start.x + scrollX,start.y + scrollY,end.x - start.x,group1.height);
								openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#FFFFFF";
								openfl__$internal_renderer_canvas_CanvasTextField.context.fillText(text.substring(selectionStart,selectionEnd),scrollX + start.x,group1.offsetY + group1.ascent + scrollY);
							}
						}
					}
					if(group1.format.underline) {
						openfl__$internal_renderer_canvas_CanvasTextField.context.beginPath();
						openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle = color;
						openfl__$internal_renderer_canvas_CanvasTextField.context.lineWidth = 1;
						var x = group1.offsetX + scrollX - bounds.x;
						var y = Math.floor(group1.offsetY + scrollY + group1.ascent - bounds.y) + 0.5;
						openfl__$internal_renderer_canvas_CanvasTextField.context.moveTo(x,y);
						openfl__$internal_renderer_canvas_CanvasTextField.context.lineTo(x + group1.width,y);
						openfl__$internal_renderer_canvas_CanvasTextField.context.stroke();
						openfl__$internal_renderer_canvas_CanvasTextField.context.closePath();
					}
				}
			} else {
				if(textEngine.border || textEngine.background) {
					if(textEngine.border) {
						openfl__$internal_renderer_canvas_CanvasTextField.context.rect(0.5,0.5,bounds.width - 1,bounds.height - 1);
					} else {
						openfl__$internal_renderer_canvas_CanvasTextField.context.rect(0,0,bounds.width,bounds.height);
					}
					if(textEngine.background) {
						var tmp = StringTools.hex(textEngine.backgroundColor & 16777215,6);
						openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#" + tmp;
						openfl__$internal_renderer_canvas_CanvasTextField.context.fill();
					}
					if(textEngine.border) {
						openfl__$internal_renderer_canvas_CanvasTextField.context.lineWidth = 1;
						openfl__$internal_renderer_canvas_CanvasTextField.context.lineCap = "square";
						var tmp = StringTools.hex(textEngine.borderColor & 16777215,6);
						openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle = "#" + tmp;
						openfl__$internal_renderer_canvas_CanvasTextField.context.stroke();
					}
				}
				if(textField.__caretIndex > -1 && textEngine.selectable && textField.__showCursor) {
					var scrollX = -textField.get_scrollH();
					var scrollY = 0.0;
					var _g = 0;
					var _g1 = textField.get_scrollV() - 1;
					while(_g < _g1) {
						var i = _g++;
						scrollY += textEngine.lineHeights.get(i);
					}
					openfl__$internal_renderer_canvas_CanvasTextField.context.beginPath();
					var tmp = StringTools.hex(textField.get_defaultTextFormat().color & 16777215,6);
					openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle = "#" + tmp;
					openfl__$internal_renderer_canvas_CanvasTextField.context.moveTo(scrollX + 2.5,scrollY + 2.5);
					openfl__$internal_renderer_canvas_CanvasTextField.context.lineWidth = 1;
					openfl__$internal_renderer_canvas_CanvasTextField.context.lineTo(scrollX + 2.5,scrollY + openfl__$internal_text_TextEngine.getFormatHeight(textField.get_defaultTextFormat()) - 1);
					openfl__$internal_renderer_canvas_CanvasTextField.context.stroke();
					openfl__$internal_renderer_canvas_CanvasTextField.context.closePath();
				}
			}
			graphics.__bitmap = openfl_display_BitmapData.fromCanvas(textField.__graphics.__canvas);
			graphics.__visible = true;
			textField.__dirty = false;
			graphics.__softwareDirty = false;
			graphics.set___dirty(false);
		}
	}
	textField.__graphics.__hardwareDirty = false;
};
var openfl__$internal_renderer_context3D_Context3DTilemap = function() { };
$hxClasses["openfl._internal.renderer.context3D.Context3DTilemap"] = openfl__$internal_renderer_context3D_Context3DTilemap;
openfl__$internal_renderer_context3D_Context3DTilemap.__name__ = "openfl._internal.renderer.context3D.Context3DTilemap";
openfl__$internal_renderer_context3D_Context3DTilemap.buildBuffer = function(tilemap,renderer) {
	if(!tilemap.__renderable || tilemap.__group.__tiles.length == 0 || tilemap.__worldAlpha <= 0) {
		return;
	}
	openfl__$internal_renderer_context3D_Context3DTilemap.numTiles = 0;
	openfl__$internal_renderer_context3D_Context3DTilemap.vertexBufferData = tilemap.__buffer != null ? tilemap.__buffer.vertexBufferData : null;
	openfl__$internal_renderer_context3D_Context3DTilemap.vertexDataPosition = 0;
	var rect = openfl_geom_Rectangle.__pool.get();
	var matrix = openfl_geom_Matrix.__pool.get();
	var parentTransform = openfl_geom_Matrix.__pool.get();
	openfl__$internal_renderer_context3D_Context3DTilemap.dataPerVertex = 4;
	if(tilemap.tileAlphaEnabled) {
		openfl__$internal_renderer_context3D_Context3DTilemap.dataPerVertex++;
	}
	if(tilemap.tileColorTransformEnabled) {
		openfl__$internal_renderer_context3D_Context3DTilemap.dataPerVertex += 8;
	}
	openfl__$internal_renderer_context3D_Context3DTilemap.buildBufferTileContainer(tilemap,tilemap.__group,renderer,parentTransform,tilemap.__tileset,tilemap.tileAlphaEnabled,tilemap.__worldAlpha,tilemap.tileColorTransformEnabled,tilemap.__worldColorTransform,null,rect,matrix);
	tilemap.__buffer.flushVertexBufferData();
	openfl_geom_Rectangle.__pool.release(rect);
	openfl_geom_Matrix.__pool.release(matrix);
	openfl_geom_Matrix.__pool.release(parentTransform);
};
openfl__$internal_renderer_context3D_Context3DTilemap.buildBufferTileContainer = function(tilemap,group,renderer,parentTransform,defaultTileset,alphaEnabled,worldAlpha,colorTransformEnabled,defaultColorTransform,cacheBitmapData,rect,matrix) {
	var tileTransform = openfl_geom_Matrix.__pool.get();
	var roundPixels = renderer.__roundPixels;
	var tiles = group.__tiles;
	var length = group.__length;
	openfl__$internal_renderer_context3D_Context3DTilemap.resizeBuffer(tilemap,openfl__$internal_renderer_context3D_Context3DTilemap.numTiles + length);
	var tile;
	var tileset;
	var alpha;
	var visible;
	var colorTransform = null;
	var id;
	var tileData;
	var tileRect;
	var bitmapData;
	var tileWidth;
	var tileHeight;
	var uvX;
	var uvY;
	var uvHeight;
	var uvWidth;
	var vertexOffset;
	var x;
	var y;
	var x2;
	var y2;
	var x3;
	var y3;
	var x4;
	var y4;
	var alphaPosition = 4;
	var ctPosition = alphaEnabled ? 5 : 4;
	var _g = 0;
	while(_g < tiles.length) {
		var tile = tiles[_g];
		++_g;
		tileTransform.setTo(1,0,0,1,-tile.get_originX(),-tile.get_originY());
		tileTransform.concat(tile.get_matrix());
		tileTransform.concat(parentTransform);
		if(roundPixels) {
			tileTransform.tx = Math.round(tileTransform.tx);
			tileTransform.ty = Math.round(tileTransform.ty);
		}
		tileset = tile.get_tileset() != null ? tile.get_tileset() : defaultTileset;
		alpha = tile.get_alpha() * worldAlpha;
		visible = tile.get_visible();
		tile.__dirty = false;
		if(!visible || alpha <= 0) {
			continue;
		}
		if(colorTransformEnabled) {
			if(tile.get_colorTransform() != null) {
				if(defaultColorTransform == null) {
					colorTransform = tile.get_colorTransform();
				} else {
					if(openfl__$internal_renderer_context3D_Context3DTilemap.cacheColorTransform == null) {
						openfl__$internal_renderer_context3D_Context3DTilemap.cacheColorTransform = new openfl_geom_ColorTransform();
					}
					colorTransform = openfl__$internal_renderer_context3D_Context3DTilemap.cacheColorTransform;
					colorTransform.redMultiplier = defaultColorTransform.redMultiplier * tile.get_colorTransform().redMultiplier;
					colorTransform.greenMultiplier = defaultColorTransform.greenMultiplier * tile.get_colorTransform().greenMultiplier;
					colorTransform.blueMultiplier = defaultColorTransform.blueMultiplier * tile.get_colorTransform().blueMultiplier;
					colorTransform.alphaMultiplier = defaultColorTransform.alphaMultiplier * tile.get_colorTransform().alphaMultiplier;
					colorTransform.redOffset = defaultColorTransform.redOffset + tile.get_colorTransform().redOffset;
					colorTransform.greenOffset = defaultColorTransform.greenOffset + tile.get_colorTransform().greenOffset;
					colorTransform.blueOffset = defaultColorTransform.blueOffset + tile.get_colorTransform().blueOffset;
					colorTransform.alphaOffset = defaultColorTransform.alphaOffset + tile.get_colorTransform().alphaOffset;
				}
			} else {
				colorTransform = defaultColorTransform;
			}
		}
		if(!alphaEnabled) {
			alpha = 1;
		}
		if(tile.__length > 0) {
			openfl__$internal_renderer_context3D_Context3DTilemap.buildBufferTileContainer(tilemap,tile,renderer,tileTransform,tileset,alphaEnabled,alpha,colorTransformEnabled,colorTransform,cacheBitmapData,rect,matrix);
		} else {
			if(tileset == null) {
				continue;
			}
			id = tile.get_id();
			bitmapData = tileset.__bitmapData;
			if(bitmapData == null) {
				continue;
			}
			if(id == -1) {
				tileRect = tile.__rect;
				if(tileRect == null || tileRect.width <= 0 || tileRect.height <= 0) {
					continue;
				}
				uvX = tileRect.x / bitmapData.width;
				uvY = tileRect.y / bitmapData.height;
				uvWidth = tileRect.get_right() / bitmapData.width;
				uvHeight = tileRect.get_bottom() / bitmapData.height;
			} else {
				tileData = tileset.__data[id];
				if(tileData == null) {
					continue;
				}
				rect.setTo(tileData.x,tileData.y,tileData.width,tileData.height);
				tileRect = rect;
				uvX = tileData.__uvX;
				uvY = tileData.__uvY;
				uvWidth = tileData.__uvWidth;
				uvHeight = tileData.__uvHeight;
			}
			tileWidth = tileRect.width;
			tileHeight = tileRect.height;
			x = 0 * tileTransform.a + 0 * tileTransform.c + tileTransform.tx;
			y = 0 * tileTransform.b + 0 * tileTransform.d + tileTransform.ty;
			x2 = tileWidth * tileTransform.a + 0 * tileTransform.c + tileTransform.tx;
			y2 = tileWidth * tileTransform.b + 0 * tileTransform.d + tileTransform.ty;
			x3 = 0 * tileTransform.a + tileHeight * tileTransform.c + tileTransform.tx;
			y3 = 0 * tileTransform.b + tileHeight * tileTransform.d + tileTransform.ty;
			x4 = tileWidth * tileTransform.a + tileHeight * tileTransform.c + tileTransform.tx;
			y4 = tileWidth * tileTransform.b + tileHeight * tileTransform.d + tileTransform.ty;
			vertexOffset = openfl__$internal_renderer_context3D_Context3DTilemap.vertexDataPosition;
			openfl__$internal_renderer_context3D_Context3DTilemap.vertexBufferData[vertexOffset] = x;
			openfl__$internal_renderer_context3D_Context3DTilemap.vertexBufferData[vertexOffset + 1] = y;
			openfl__$internal_renderer_context3D_Context3DTilemap.vertexBufferData[vertexOffset + 2] = uvX;
			openfl__$internal_renderer_context3D_Context3DTilemap.vertexBufferData[vertexOffset + 3] = uvY;
			openfl__$internal_renderer_context3D_Context3DTilemap.vertexBufferData[vertexOffset + openfl__$internal_renderer_context3D_Context3DTilemap.dataPerVertex] = x2;
			openfl__$internal_renderer_context3D_Context3DTilemap.vertexBufferData[vertexOffset + openfl__$internal_renderer_context3D_Context3DTilemap.dataPerVertex + 1] = y2;
			openfl__$internal_renderer_context3D_Context3DTilemap.vertexBufferData[vertexOffset + openfl__$internal_renderer_context3D_Context3DTilemap.dataPerVertex + 2] = uvWidth;
			openfl__$internal_renderer_context3D_Context3DTilemap.vertexBufferData[vertexOffset + openfl__$internal_renderer_context3D_Context3DTilemap.dataPerVertex + 3] = uvY;
			openfl__$internal_renderer_context3D_Context3DTilemap.vertexBufferData[vertexOffset + openfl__$internal_renderer_context3D_Context3DTilemap.dataPerVertex * 2] = x3;
			openfl__$internal_renderer_context3D_Context3DTilemap.vertexBufferData[vertexOffset + openfl__$internal_renderer_context3D_Context3DTilemap.dataPerVertex * 2 + 1] = y3;
			openfl__$internal_renderer_context3D_Context3DTilemap.vertexBufferData[vertexOffset + openfl__$internal_renderer_context3D_Context3DTilemap.dataPerVertex * 2 + 2] = uvX;
			openfl__$internal_renderer_context3D_Context3DTilemap.vertexBufferData[vertexOffset + openfl__$internal_renderer_context3D_Context3DTilemap.dataPerVertex * 2 + 3] = uvHeight;
			openfl__$internal_renderer_context3D_Context3DTilemap.vertexBufferData[vertexOffset + openfl__$internal_renderer_context3D_Context3DTilemap.dataPerVertex * 3] = x4;
			openfl__$internal_renderer_context3D_Context3DTilemap.vertexBufferData[vertexOffset + openfl__$internal_renderer_context3D_Context3DTilemap.dataPerVertex * 3 + 1] = y4;
			openfl__$internal_renderer_context3D_Context3DTilemap.vertexBufferData[vertexOffset + openfl__$internal_renderer_context3D_Context3DTilemap.dataPerVertex * 3 + 2] = uvWidth;
			openfl__$internal_renderer_context3D_Context3DTilemap.vertexBufferData[vertexOffset + openfl__$internal_renderer_context3D_Context3DTilemap.dataPerVertex * 3 + 3] = uvHeight;
			if(alphaEnabled) {
				openfl__$internal_renderer_context3D_Context3DTilemap.vertexBufferData[vertexOffset + openfl__$internal_renderer_context3D_Context3DTilemap.dataPerVertex * 0 + alphaPosition] = alpha;
				openfl__$internal_renderer_context3D_Context3DTilemap.vertexBufferData[vertexOffset + openfl__$internal_renderer_context3D_Context3DTilemap.dataPerVertex + alphaPosition] = alpha;
				openfl__$internal_renderer_context3D_Context3DTilemap.vertexBufferData[vertexOffset + openfl__$internal_renderer_context3D_Context3DTilemap.dataPerVertex * 2 + alphaPosition] = alpha;
				openfl__$internal_renderer_context3D_Context3DTilemap.vertexBufferData[vertexOffset + openfl__$internal_renderer_context3D_Context3DTilemap.dataPerVertex * 3 + alphaPosition] = alpha;
			}
			if(colorTransformEnabled) {
				if(colorTransform != null) {
					var _g1 = 0;
					while(_g1 < 4) {
						var i = _g1++;
						openfl__$internal_renderer_context3D_Context3DTilemap.vertexBufferData[vertexOffset + openfl__$internal_renderer_context3D_Context3DTilemap.dataPerVertex * i + ctPosition] = colorTransform.redMultiplier;
						openfl__$internal_renderer_context3D_Context3DTilemap.vertexBufferData[vertexOffset + openfl__$internal_renderer_context3D_Context3DTilemap.dataPerVertex * i + ctPosition + 1] = colorTransform.greenMultiplier;
						openfl__$internal_renderer_context3D_Context3DTilemap.vertexBufferData[vertexOffset + openfl__$internal_renderer_context3D_Context3DTilemap.dataPerVertex * i + ctPosition + 2] = colorTransform.blueMultiplier;
						openfl__$internal_renderer_context3D_Context3DTilemap.vertexBufferData[vertexOffset + openfl__$internal_renderer_context3D_Context3DTilemap.dataPerVertex * i + ctPosition + 3] = colorTransform.alphaMultiplier;
						openfl__$internal_renderer_context3D_Context3DTilemap.vertexBufferData[vertexOffset + openfl__$internal_renderer_context3D_Context3DTilemap.dataPerVertex * i + ctPosition + 4] = colorTransform.redOffset;
						openfl__$internal_renderer_context3D_Context3DTilemap.vertexBufferData[vertexOffset + openfl__$internal_renderer_context3D_Context3DTilemap.dataPerVertex * i + ctPosition + 5] = colorTransform.greenOffset;
						openfl__$internal_renderer_context3D_Context3DTilemap.vertexBufferData[vertexOffset + openfl__$internal_renderer_context3D_Context3DTilemap.dataPerVertex * i + ctPosition + 6] = colorTransform.blueOffset;
						openfl__$internal_renderer_context3D_Context3DTilemap.vertexBufferData[vertexOffset + openfl__$internal_renderer_context3D_Context3DTilemap.dataPerVertex * i + ctPosition + 7] = colorTransform.alphaOffset;
					}
				} else {
					var _g2 = 0;
					while(_g2 < 4) {
						var i1 = _g2++;
						openfl__$internal_renderer_context3D_Context3DTilemap.vertexBufferData[vertexOffset + openfl__$internal_renderer_context3D_Context3DTilemap.dataPerVertex * i1 + ctPosition] = 1;
						openfl__$internal_renderer_context3D_Context3DTilemap.vertexBufferData[vertexOffset + openfl__$internal_renderer_context3D_Context3DTilemap.dataPerVertex * i1 + ctPosition + 1] = 1;
						openfl__$internal_renderer_context3D_Context3DTilemap.vertexBufferData[vertexOffset + openfl__$internal_renderer_context3D_Context3DTilemap.dataPerVertex * i1 + ctPosition + 2] = 1;
						openfl__$internal_renderer_context3D_Context3DTilemap.vertexBufferData[vertexOffset + openfl__$internal_renderer_context3D_Context3DTilemap.dataPerVertex * i1 + ctPosition + 3] = 1;
						openfl__$internal_renderer_context3D_Context3DTilemap.vertexBufferData[vertexOffset + openfl__$internal_renderer_context3D_Context3DTilemap.dataPerVertex * i1 + ctPosition + 4] = 0;
						openfl__$internal_renderer_context3D_Context3DTilemap.vertexBufferData[vertexOffset + openfl__$internal_renderer_context3D_Context3DTilemap.dataPerVertex * i1 + ctPosition + 5] = 0;
						openfl__$internal_renderer_context3D_Context3DTilemap.vertexBufferData[vertexOffset + openfl__$internal_renderer_context3D_Context3DTilemap.dataPerVertex * i1 + ctPosition + 6] = 0;
						openfl__$internal_renderer_context3D_Context3DTilemap.vertexBufferData[vertexOffset + openfl__$internal_renderer_context3D_Context3DTilemap.dataPerVertex * i1 + ctPosition + 7] = 0;
					}
				}
			}
			openfl__$internal_renderer_context3D_Context3DTilemap.vertexDataPosition += openfl__$internal_renderer_context3D_Context3DTilemap.dataPerVertex * 4;
		}
	}
	group.__dirty = false;
	openfl_geom_Matrix.__pool.release(tileTransform);
};
openfl__$internal_renderer_context3D_Context3DTilemap.flush = function(tilemap,renderer,blendMode) {
	if(openfl__$internal_renderer_context3D_Context3DTilemap.currentShader == null) {
		openfl__$internal_renderer_context3D_Context3DTilemap.currentShader = renderer.__defaultDisplayShader;
	}
	if(openfl__$internal_renderer_context3D_Context3DTilemap.bufferPosition > openfl__$internal_renderer_context3D_Context3DTilemap.lastFlushedPosition && openfl__$internal_renderer_context3D_Context3DTilemap.currentBitmapData != null && openfl__$internal_renderer_context3D_Context3DTilemap.currentShader != null) {
		var shader = renderer.__initDisplayShader(openfl__$internal_renderer_context3D_Context3DTilemap.currentShader);
		renderer.setShader(shader);
		renderer.applyBitmapData(openfl__$internal_renderer_context3D_Context3DTilemap.currentBitmapData,tilemap.smoothing);
		renderer.applyMatrix(renderer.__getMatrix(tilemap.__renderTransform,1));
		if(tilemap.tileAlphaEnabled) {
			renderer.useAlphaArray();
		} else {
			renderer.applyAlpha(tilemap.__worldAlpha);
		}
		if(tilemap.tileBlendModeEnabled) {
			renderer.__setBlendMode(blendMode);
		}
		if(tilemap.tileColorTransformEnabled) {
			renderer.applyHasColorTransform(true);
			renderer.useColorTransformArray();
		} else {
			renderer.applyColorTransform(tilemap.__worldColorTransform);
		}
		renderer.updateShader();
		var vertexBuffer = tilemap.__buffer.vertexBuffer;
		var vertexBufferPosition = openfl__$internal_renderer_context3D_Context3DTilemap.lastFlushedPosition * openfl__$internal_renderer_context3D_Context3DTilemap.dataPerVertex * 4;
		var length = openfl__$internal_renderer_context3D_Context3DTilemap.bufferPosition - openfl__$internal_renderer_context3D_Context3DTilemap.lastFlushedPosition;
		while(openfl__$internal_renderer_context3D_Context3DTilemap.lastFlushedPosition < openfl__$internal_renderer_context3D_Context3DTilemap.bufferPosition) {
			length = Math.min(openfl__$internal_renderer_context3D_Context3DTilemap.bufferPosition - openfl__$internal_renderer_context3D_Context3DTilemap.lastFlushedPosition,openfl__$internal_renderer_context3D_Context3DTilemap.context.__quadIndexBufferElements) | 0;
			if(length <= 0) {
				break;
			}
			if(shader.__position != null) {
				openfl__$internal_renderer_context3D_Context3DTilemap.context.setVertexBufferAt(shader.__position.index,vertexBuffer,vertexBufferPosition,2);
			}
			if(shader.__textureCoord != null) {
				openfl__$internal_renderer_context3D_Context3DTilemap.context.setVertexBufferAt(shader.__textureCoord.index,vertexBuffer,vertexBufferPosition + 2,2);
			}
			if(tilemap.tileAlphaEnabled) {
				if(shader.__alpha != null) {
					openfl__$internal_renderer_context3D_Context3DTilemap.context.setVertexBufferAt(shader.__alpha.index,vertexBuffer,vertexBufferPosition + 4,1);
				}
			}
			if(tilemap.tileColorTransformEnabled) {
				var position = tilemap.tileAlphaEnabled ? 5 : 4;
				if(shader.__colorMultiplier != null) {
					openfl__$internal_renderer_context3D_Context3DTilemap.context.setVertexBufferAt(shader.__colorMultiplier.index,vertexBuffer,vertexBufferPosition + position,4);
				}
				if(shader.__colorOffset != null) {
					openfl__$internal_renderer_context3D_Context3DTilemap.context.setVertexBufferAt(shader.__colorOffset.index,vertexBuffer,vertexBufferPosition + position + 4,4);
				}
			}
			openfl__$internal_renderer_context3D_Context3DTilemap.context.drawTriangles(openfl__$internal_renderer_context3D_Context3DTilemap.context.__quadIndexBuffer,0,length * 2);
			openfl__$internal_renderer_context3D_Context3DTilemap.lastFlushedPosition += length;
		}
		openfl__$internal_renderer_context3D_stats_Context3DStats.incrementDrawCall(0);
		renderer.__clearShader();
	}
	openfl__$internal_renderer_context3D_Context3DTilemap.lastUsedBitmapData = openfl__$internal_renderer_context3D_Context3DTilemap.currentBitmapData;
	openfl__$internal_renderer_context3D_Context3DTilemap.lastUsedShader = openfl__$internal_renderer_context3D_Context3DTilemap.currentShader;
};
openfl__$internal_renderer_context3D_Context3DTilemap.render = function(tilemap,renderer) {
	if(!tilemap.__renderable || tilemap.__worldAlpha <= 0) {
		return;
	}
	openfl__$internal_renderer_context3D_Context3DTilemap.context = renderer.__context3D;
	openfl__$internal_renderer_context3D_Context3DTilemap.buildBuffer(tilemap,renderer);
	if(openfl__$internal_renderer_context3D_Context3DTilemap.numTiles == 0) {
		return;
	}
	openfl__$internal_renderer_context3D_Context3DTilemap.bufferPosition = 0;
	openfl__$internal_renderer_context3D_Context3DTilemap.lastFlushedPosition = 0;
	openfl__$internal_renderer_context3D_Context3DTilemap.lastUsedBitmapData = null;
	openfl__$internal_renderer_context3D_Context3DTilemap.lastUsedShader = null;
	openfl__$internal_renderer_context3D_Context3DTilemap.currentBitmapData = null;
	openfl__$internal_renderer_context3D_Context3DTilemap.currentShader = null;
	openfl__$internal_renderer_context3D_Context3DTilemap.currentBlendMode = tilemap.__worldBlendMode;
	if(!tilemap.tileBlendModeEnabled) {
		renderer.__setBlendMode(openfl__$internal_renderer_context3D_Context3DTilemap.currentBlendMode);
	}
	renderer.__pushMaskObject(tilemap);
	var rect = openfl_geom_Rectangle.__pool.get();
	rect.setTo(0,0,tilemap.__width,tilemap.__height);
	renderer.__pushMaskRect(rect,tilemap.__renderTransform);
	openfl__$internal_renderer_context3D_Context3DTilemap.renderTileContainer(tilemap,renderer,tilemap.__group,tilemap.__worldShader,tilemap.__tileset,tilemap.__worldAlpha,tilemap.tileBlendModeEnabled,openfl__$internal_renderer_context3D_Context3DTilemap.currentBlendMode,null);
	openfl__$internal_renderer_context3D_Context3DTilemap.flush(tilemap,renderer,openfl__$internal_renderer_context3D_Context3DTilemap.currentBlendMode);
	renderer.__popMaskRect();
	renderer.__popMaskObject(tilemap);
	openfl_geom_Rectangle.__pool.release(rect);
};
openfl__$internal_renderer_context3D_Context3DTilemap.renderTileContainer = function(tilemap,renderer,group,defaultShader,defaultTileset,worldAlpha,blendModeEnabled,defaultBlendMode,cacheBitmapData) {
	var tiles = group.__tiles;
	var tile;
	var tileset;
	var alpha;
	var visible;
	var blendMode = null;
	var id;
	var tileData;
	var tileRect;
	var shader;
	var bitmapData;
	var _g = 0;
	while(_g < tiles.length) {
		var tile = tiles[_g];
		++_g;
		tileset = tile.get_tileset() != null ? tile.get_tileset() : defaultTileset;
		alpha = tile.get_alpha() * worldAlpha;
		visible = tile.get_visible();
		if(!visible || alpha <= 0) {
			continue;
		}
		shader = tile.get_shader() != null ? tile.get_shader() : defaultShader;
		if(blendModeEnabled) {
			blendMode = tile.__blendMode != null ? tile.__blendMode : defaultBlendMode;
		}
		if(tile.__length > 0) {
			openfl__$internal_renderer_context3D_Context3DTilemap.renderTileContainer(tilemap,renderer,tile,shader,tileset,alpha,blendModeEnabled,blendMode,cacheBitmapData);
		} else {
			if(tileset == null) {
				continue;
			}
			id = tile.get_id();
			bitmapData = tileset.__bitmapData;
			if(bitmapData == null) {
				continue;
			}
			if(id == -1) {
				tileRect = tile.__rect;
				if(tileRect == null || tileRect.width <= 0 || tileRect.height <= 0) {
					continue;
				}
			} else {
				tileData = tileset.__data[id];
				if(tileData == null) {
					continue;
				}
			}
			if(shader != openfl__$internal_renderer_context3D_Context3DTilemap.currentShader || bitmapData != openfl__$internal_renderer_context3D_Context3DTilemap.currentBitmapData && openfl__$internal_renderer_context3D_Context3DTilemap.currentBitmapData != null || openfl__$internal_renderer_context3D_Context3DTilemap.currentBlendMode != blendMode) {
				openfl__$internal_renderer_context3D_Context3DTilemap.flush(tilemap,renderer,openfl__$internal_renderer_context3D_Context3DTilemap.currentBlendMode);
			}
			openfl__$internal_renderer_context3D_Context3DTilemap.currentBitmapData = bitmapData;
			openfl__$internal_renderer_context3D_Context3DTilemap.currentShader = shader;
			openfl__$internal_renderer_context3D_Context3DTilemap.currentBlendMode = blendMode;
			openfl__$internal_renderer_context3D_Context3DTilemap.bufferPosition++;
		}
	}
};
openfl__$internal_renderer_context3D_Context3DTilemap.renderMask = function(tilemap,renderer) {
};
openfl__$internal_renderer_context3D_Context3DTilemap.resizeBuffer = function(tilemap,count) {
	openfl__$internal_renderer_context3D_Context3DTilemap.numTiles = count;
	if(tilemap.__buffer == null) {
		tilemap.__buffer = new openfl__$internal_renderer_context3D_Context3DBuffer(openfl__$internal_renderer_context3D_Context3DTilemap.context,openfl__$internal_renderer_context3D_Context3DElementType.QUADS,openfl__$internal_renderer_context3D_Context3DTilemap.numTiles,openfl__$internal_renderer_context3D_Context3DTilemap.dataPerVertex);
	} else {
		tilemap.__buffer.resize(openfl__$internal_renderer_context3D_Context3DTilemap.numTiles,openfl__$internal_renderer_context3D_Context3DTilemap.dataPerVertex);
	}
	openfl__$internal_renderer_context3D_Context3DTilemap.vertexBufferData = tilemap.__buffer.vertexBufferData;
};
var openfl__$internal_renderer_context3D_stats_DrawCallCounter = function() {
	this.drawCallsCounter = 0;
	this.currentDrawCallsNum = 0;
	this.currentDrawCallsNum = 0;
	this.drawCallsCounter = 0;
};
$hxClasses["openfl._internal.renderer.context3D.stats.DrawCallCounter"] = openfl__$internal_renderer_context3D_stats_DrawCallCounter;
openfl__$internal_renderer_context3D_stats_DrawCallCounter.__name__ = "openfl._internal.renderer.context3D.stats.DrawCallCounter";
openfl__$internal_renderer_context3D_stats_DrawCallCounter.prototype = {
	currentDrawCallsNum: null
	,drawCallsCounter: null
	,increment: function() {
		this.drawCallsCounter++;
	}
	,reset: function() {
		this.currentDrawCallsNum = this.drawCallsCounter;
		this.drawCallsCounter = 0;
	}
	,__class__: openfl__$internal_renderer_context3D_stats_DrawCallCounter
};
var openfl__$internal_renderer_context3D_stats_Context3DStats = function() { };
$hxClasses["openfl._internal.renderer.context3D.stats.Context3DStats"] = openfl__$internal_renderer_context3D_stats_Context3DStats;
openfl__$internal_renderer_context3D_stats_Context3DStats.__name__ = "openfl._internal.renderer.context3D.stats.Context3DStats";
openfl__$internal_renderer_context3D_stats_Context3DStats.incrementDrawCall = function(context) {
	openfl__$internal_renderer_context3D_stats_Context3DStats.drawCallsCounters.h[context].increment();
};
openfl__$internal_renderer_context3D_stats_Context3DStats.resetDrawCalls = function() {
	var dcCounter = openfl__$internal_renderer_context3D_stats_Context3DStats.drawCallsCounters.iterator();
	while(dcCounter.hasNext()) {
		var dcCounter1 = dcCounter.next();
		dcCounter1.reset();
	}
};
openfl__$internal_renderer_context3D_stats_Context3DStats.totalDrawCalls = function() {
	var total = 0;
	var dcCounter = openfl__$internal_renderer_context3D_stats_Context3DStats.drawCallsCounters.iterator();
	while(dcCounter.hasNext()) {
		var dcCounter1 = dcCounter.next();
		total += dcCounter1.currentDrawCallsNum;
	}
	return total;
};
openfl__$internal_renderer_context3D_stats_Context3DStats.contextDrawCalls = function(context) {
	return openfl__$internal_renderer_context3D_stats_Context3DStats.drawCallsCounters.h[context].currentDrawCallsNum;
};
var openfl__$internal_renderer_dom_DOMBitmap = function() { };
$hxClasses["openfl._internal.renderer.dom.DOMBitmap"] = openfl__$internal_renderer_dom_DOMBitmap;
openfl__$internal_renderer_dom_DOMBitmap.__name__ = "openfl._internal.renderer.dom.DOMBitmap";
openfl__$internal_renderer_dom_DOMBitmap.clear = function(bitmap,renderer) {
	if(bitmap.__image != null) {
		renderer.element.removeChild(bitmap.__image);
		bitmap.__image = null;
		bitmap.__style = null;
	}
	if(bitmap.__canvas != null) {
		renderer.element.removeChild(bitmap.__canvas);
		bitmap.__canvas = null;
		bitmap.__style = null;
	}
};
openfl__$internal_renderer_dom_DOMBitmap.render = function(bitmap,renderer) {
	if(bitmap.stage != null && bitmap.__worldVisible && bitmap.__renderable && bitmap.__bitmapData != null && bitmap.__bitmapData.__isValid && bitmap.__bitmapData.readable) {
		renderer.__pushMaskObject(bitmap);
		if(bitmap.__bitmapData.image.buffer.__srcImage != null) {
			openfl__$internal_renderer_dom_DOMBitmap.renderImage(bitmap,renderer);
		} else {
			openfl__$internal_renderer_dom_DOMBitmap.renderCanvas(bitmap,renderer);
		}
		renderer.__popMaskObject(bitmap);
	} else {
		openfl__$internal_renderer_dom_DOMBitmap.clear(bitmap,renderer);
	}
};
openfl__$internal_renderer_dom_DOMBitmap.renderCanvas = function(bitmap,renderer) {
	if(bitmap.__image != null) {
		renderer.element.removeChild(bitmap.__image);
		bitmap.__image = null;
	}
	if(bitmap.__canvas == null) {
		bitmap.__canvas = window.document.createElement("canvas");
		bitmap.__context = bitmap.__canvas.getContext("2d");
		bitmap.__imageVersion = -1;
		if(!renderer.__allowSmoothing || !bitmap.smoothing) {
			bitmap.__context.imageSmoothingEnabled = false;
		}
		renderer.__initializeElement(bitmap,bitmap.__canvas);
	}
	if(bitmap.__imageVersion != bitmap.__bitmapData.image.version) {
		lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(bitmap.__bitmapData.image);
		bitmap.__canvas.width = bitmap.__bitmapData.width + 1;
		bitmap.__canvas.width = bitmap.__bitmapData.width;
		bitmap.__canvas.height = bitmap.__bitmapData.height;
		bitmap.__context.drawImage(bitmap.__bitmapData.image.buffer.__srcCanvas,0,0);
		bitmap.__imageVersion = bitmap.__bitmapData.image.version;
	}
	renderer.__updateClip(bitmap);
	renderer.__applyStyle(bitmap,true,true,true);
};
openfl__$internal_renderer_dom_DOMBitmap.renderImage = function(bitmap,renderer) {
	if(bitmap.__canvas != null) {
		renderer.element.removeChild(bitmap.__canvas);
		bitmap.__canvas = null;
	}
	if(bitmap.__image == null) {
		bitmap.__image = window.document.createElement("img");
		bitmap.__image.crossOrigin = "Anonymous";
		bitmap.__image.src = bitmap.__bitmapData.image.buffer.__srcImage.src;
		renderer.__initializeElement(bitmap,bitmap.__image);
	}
	renderer.__updateClip(bitmap);
	renderer.__applyStyle(bitmap,true,true,true);
};
var openfl__$internal_renderer_dom_DOMDisplayObject = function() { };
$hxClasses["openfl._internal.renderer.dom.DOMDisplayObject"] = openfl__$internal_renderer_dom_DOMDisplayObject;
openfl__$internal_renderer_dom_DOMDisplayObject.__name__ = "openfl._internal.renderer.dom.DOMDisplayObject";
openfl__$internal_renderer_dom_DOMDisplayObject.clear = function(displayObject,renderer) {
	if(displayObject.__cacheBitmap != null) {
		openfl__$internal_renderer_dom_DOMBitmap.clear(displayObject.__cacheBitmap,renderer);
	}
	openfl__$internal_renderer_dom_DOMShape.clear(displayObject,renderer);
};
openfl__$internal_renderer_dom_DOMDisplayObject.render = function(displayObject,renderer) {
	var tmp = displayObject.opaqueBackground != null && !displayObject.__isCacheBitmapRender && displayObject.get_width() > 0 && displayObject.get_height() > 0;
	var graphics = displayObject.__graphics;
	if(displayObject.stage != null && displayObject.__worldVisible && displayObject.__renderable && graphics != null) {
		openfl__$internal_renderer_canvas_CanvasGraphics.render(graphics,renderer.__canvasRenderer);
		if(graphics.__softwareDirty || displayObject.__worldAlphaChanged || displayObject.__canvas != graphics.__canvas) {
			if(graphics.__canvas != null) {
				if(displayObject.__canvas != graphics.__canvas) {
					if(displayObject.__canvas != null) {
						renderer.element.removeChild(displayObject.__canvas);
					}
					displayObject.__canvas = graphics.__canvas;
					displayObject.__context = graphics.__context;
					renderer.__initializeElement(displayObject,displayObject.__canvas);
				}
			} else {
				openfl__$internal_renderer_dom_DOMShape.clear(displayObject,renderer);
			}
		}
		if(displayObject.__canvas != null) {
			renderer.__pushMaskObject(displayObject);
			var cacheTransform = displayObject.__renderTransform;
			displayObject.__renderTransform = graphics.__worldTransform;
			if(graphics.__transformDirty) {
				graphics.__transformDirty = false;
				displayObject.__renderTransformChanged = true;
			}
			renderer.__updateClip(displayObject);
			renderer.__applyStyle(displayObject,true,true,true);
			displayObject.__renderTransform = cacheTransform;
			renderer.__popMaskObject(displayObject);
		}
	} else {
		openfl__$internal_renderer_dom_DOMShape.clear(displayObject,renderer);
	}
};
var openfl__$internal_renderer_dom_DOMShape = function() { };
$hxClasses["openfl._internal.renderer.dom.DOMShape"] = openfl__$internal_renderer_dom_DOMShape;
openfl__$internal_renderer_dom_DOMShape.__name__ = "openfl._internal.renderer.dom.DOMShape";
openfl__$internal_renderer_dom_DOMShape.clear = function(shape,renderer) {
	if(shape.__canvas != null) {
		renderer.element.removeChild(shape.__canvas);
		shape.__canvas = null;
		shape.__style = null;
	}
};
openfl__$internal_renderer_dom_DOMShape.render = function(shape,renderer) {
	var graphics = shape.__graphics;
	if(shape.stage != null && shape.__worldVisible && shape.__renderable && graphics != null) {
		openfl__$internal_renderer_canvas_CanvasGraphics.render(graphics,renderer.__canvasRenderer);
		if(graphics.__softwareDirty || shape.__worldAlphaChanged || shape.__canvas != graphics.__canvas) {
			if(graphics.__canvas != null) {
				if(shape.__canvas != graphics.__canvas) {
					if(shape.__canvas != null) {
						renderer.element.removeChild(shape.__canvas);
					}
					shape.__canvas = graphics.__canvas;
					shape.__context = graphics.__context;
					renderer.__initializeElement(shape,shape.__canvas);
				}
			} else {
				openfl__$internal_renderer_dom_DOMShape.clear(shape,renderer);
			}
		}
		if(shape.__canvas != null) {
			renderer.__pushMaskObject(shape);
			var cacheTransform = shape.__renderTransform;
			shape.__renderTransform = graphics.__worldTransform;
			if(graphics.__transformDirty) {
				graphics.__transformDirty = false;
				shape.__renderTransformChanged = true;
			}
			renderer.__updateClip(shape);
			renderer.__applyStyle(shape,true,true,true);
			shape.__renderTransform = cacheTransform;
			renderer.__popMaskObject(shape);
		}
	} else {
		openfl__$internal_renderer_dom_DOMShape.clear(shape,renderer);
	}
};
var openfl__$internal_renderer_dom_DOMTextField = function() { };
$hxClasses["openfl._internal.renderer.dom.DOMTextField"] = openfl__$internal_renderer_dom_DOMTextField;
openfl__$internal_renderer_dom_DOMTextField.__name__ = "openfl._internal.renderer.dom.DOMTextField";
openfl__$internal_renderer_dom_DOMTextField.clear = function(textField,renderer) {
	if(textField.__div != null) {
		renderer.element.removeChild(textField.__div);
		textField.__div = null;
		textField.__style = null;
	}
};
openfl__$internal_renderer_dom_DOMTextField.measureText = function(textField) {
	var textEngine = textField.__textEngine;
	var div = textField.__div;
	if(div == null) {
		div = window.document.createElement("div");
		var _this_r = new RegExp("\n","g".split("u").join(""));
		div.innerHTML = textEngine.text.replace(_this_r,"<br>");
		div.style.setProperty("font",openfl__$internal_text_TextEngine.getFont(textField.__textFormat),null);
		div.style.setProperty("pointer-events","none",null);
		div.style.position = "absolute";
		div.style.top = "110%";
		window.document.body.appendChild(div);
	}
	textEngine.__measuredWidth = div.clientWidth;
	if(textField.__div == null) {
		div.style.width = Std.string(textEngine.width - 4) + "px";
	}
	textEngine.__measuredHeight = div.clientHeight;
	if(textField.__div == null) {
		window.document.body.removeChild(div);
	}
};
openfl__$internal_renderer_dom_DOMTextField.render = function(textField,renderer) {
	var textEngine = textField.__textEngine;
	if(textField.stage != null && textField.__worldVisible && textField.__renderable) {
		if(textField.__dirty || textField.__renderTransformChanged || textField.__div == null) {
			if(textEngine.text != "" || textEngine.background || textEngine.border || textEngine.type == 1) {
				if(textField.__div == null) {
					textField.__div = window.document.createElement("div");
					renderer.__initializeElement(textField,textField.__div);
					textField.__style.setProperty("outline","none",null);
					textField.__div.addEventListener("input",function(event) {
						event.preventDefault();
						if(textField.get_htmlText() != textField.__div.innerHTML) {
							textField.set_htmlText(textField.__div.innerHTML);
							var textField1 = textField.__displayAsPassword;
							textField.__dirty = false;
						}
					},true);
				}
				if(!textEngine.wordWrap) {
					textField.__style.setProperty("white-space","nowrap",null);
				} else {
					textField.__style.setProperty("word-wrap","break-word",null);
				}
				textField.__style.setProperty("overflow","hidden",null);
				if(textEngine.selectable) {
					textField.__style.setProperty("cursor","text",null);
					textField.__style.setProperty("-webkit-user-select","text",null);
					textField.__style.setProperty("-moz-user-select","text",null);
					textField.__style.setProperty("-ms-user-select","text",null);
					textField.__style.setProperty("-o-user-select","text",null);
				} else {
					textField.__style.setProperty("cursor","inherit",null);
				}
				var div = textField.__div;
				div.contentEditable = textEngine.type == 1;
				var style = textField.__style;
				if(textEngine.background) {
					style.setProperty("background-color","#" + StringTools.hex(textEngine.backgroundColor & 16777215,6),null);
				} else {
					style.removeProperty("background-color");
				}
				var w = textEngine.width;
				var h = textEngine.height;
				var scale = 1;
				var unscaledSize = textField.__textFormat.size;
				var scaledSize = unscaledSize;
				var t = textField.__renderTransform;
				if(t.a != 1.0 || t.d != 1.0) {
					if(t.a == t.d) {
						scale = t.a;
						t.a = t.d = 1.0;
					} else if(t.a > t.d) {
						scale = t.a;
						t.d /= t.a;
						t.a = 1.0;
					} else {
						scale = t.d;
						t.a /= t.d;
						t.d = 1.0;
					}
					scaledSize *= scale;
					w = Math.ceil(w * scale);
					h = Math.ceil(h * scale);
				}
				textField.__textFormat.size = scaledSize;
				var text = textEngine.text;
				var adjustment = 0;
				if(!textField.__isHTML) {
					text = StringTools.htmlEscape(text);
				} else {
					var matchText = text;
					while(openfl__$internal_renderer_dom_DOMTextField.__regexFont.match(matchText)) {
						var fontText = openfl__$internal_renderer_dom_DOMTextField.__regexFont.matched(0);
						var style1 = "";
						if(openfl__$internal_renderer_dom_DOMTextField.__regexFace.match(fontText)) {
							style1 += "font-family:'" + openfl__$internal_renderer_dom_DOMTextField.__getAttributeMatch(openfl__$internal_renderer_dom_DOMTextField.__regexFace) + "';";
						}
						if(openfl__$internal_renderer_dom_DOMTextField.__regexColor.match(fontText)) {
							style1 += "color:#" + openfl__$internal_renderer_dom_DOMTextField.__getAttributeMatch(openfl__$internal_renderer_dom_DOMTextField.__regexColor) + ";";
						}
						if(openfl__$internal_renderer_dom_DOMTextField.__regexSize.match(fontText)) {
							var sizeAttr = openfl__$internal_renderer_dom_DOMTextField.__getAttributeMatch(openfl__$internal_renderer_dom_DOMTextField.__regexSize);
							var firstChar = HxOverrides.cca(sizeAttr,0);
							var size;
							adjustment = parseFloat(sizeAttr) * scale;
							if(firstChar == 43 || firstChar == 45) {
								size = scaledSize + adjustment;
							} else {
								size = adjustment;
							}
							style1 += "font-size:" + size + "px;";
						}
						text = StringTools.replace(text,fontText,"<span style='" + style1 + "'>");
						matchText = openfl__$internal_renderer_dom_DOMTextField.__regexFont.matchedRight();
					}
					text = text.replace(openfl__$internal_renderer_dom_DOMTextField.__regexCloseFont.r,"</span>");
				}
				text = StringTools.replace(text,"<p ","<p style='margin-top:0; margin-bottom:0;' ");
				var unscaledLeading = textField.__textFormat.leading;
				textField.__textFormat.leading += adjustment | 0;
				var _this_r = new RegExp("\r\n","g".split("u").join(""));
				var tmp = text.replace(_this_r,"<br>");
				textField.__div.innerHTML = tmp;
				var _this_r = new RegExp("\n","g".split("u").join(""));
				var tmp = textField.__div.innerHTML.replace(_this_r,"<br>");
				textField.__div.innerHTML = tmp;
				var _this_r = new RegExp("\r","g".split("u").join(""));
				var tmp = textField.__div.innerHTML.replace(_this_r,"<br>");
				textField.__div.innerHTML = tmp;
				style.setProperty("font",openfl__$internal_text_TextEngine.getFont(textField.__textFormat),null);
				textField.__textFormat.size = unscaledSize;
				textField.__textFormat.leading = unscaledLeading;
				style.setProperty("top","3px",null);
				if(textEngine.border) {
					style.setProperty("border","solid 1px #" + StringTools.hex(textEngine.borderColor & 16777215,6),null);
					textField.__renderTransform.translate(-1,-1);
					textField.__renderTransformChanged = true;
					textField.__transformDirty = true;
				} else if(style.border != "") {
					style.removeProperty("border");
					textField.__renderTransformChanged = true;
				}
				style.setProperty("color","#" + StringTools.hex(textField.__textFormat.color & 16777215,6),null);
				style.setProperty("width",w + "px",null);
				style.setProperty("height",h + "px",null);
				switch(textField.__textFormat.align) {
				case 0:
					style.setProperty("text-align","center",null);
					break;
				case 4:
					style.setProperty("text-align","right",null);
					break;
				default:
					style.setProperty("text-align","left",null);
				}
				textField.__dirty = false;
			} else if(textField.__div != null) {
				renderer.element.removeChild(textField.__div);
				textField.__div = null;
			}
		}
		if(textField.__div != null) {
			var old = renderer.__roundPixels;
			renderer.__roundPixels = true;
			renderer.__updateClip(textField);
			renderer.__applyStyle(textField,true,true,true);
			renderer.__roundPixels = old;
		}
	} else {
		openfl__$internal_renderer_dom_DOMTextField.clear(textField,renderer);
	}
};
openfl__$internal_renderer_dom_DOMTextField.__getAttributeMatch = function(regex) {
	if(regex.matched(2) != null) {
		return regex.matched(2);
	} else {
		return regex.matched(3);
	}
};
var openfl__$internal_renderer_dom_DOMTilemap = function() { };
$hxClasses["openfl._internal.renderer.dom.DOMTilemap"] = openfl__$internal_renderer_dom_DOMTilemap;
openfl__$internal_renderer_dom_DOMTilemap.__name__ = "openfl._internal.renderer.dom.DOMTilemap";
openfl__$internal_renderer_dom_DOMTilemap.clear = function(tilemap,renderer) {
	if(tilemap.__canvas != null) {
		renderer.element.removeChild(tilemap.__canvas);
		tilemap.__canvas = null;
		tilemap.__style = null;
	}
};
openfl__$internal_renderer_dom_DOMTilemap.render = function(tilemap,renderer) {
	if(tilemap.stage != null && tilemap.__worldVisible && tilemap.__renderable && tilemap.__group.__tiles.length > 0) {
		if(tilemap.__canvas == null) {
			tilemap.__canvas = window.document.createElement("canvas");
			tilemap.__context = tilemap.__canvas.getContext("2d");
			renderer.__initializeElement(tilemap,tilemap.__canvas);
		}
		tilemap.__canvas.width = tilemap.__width;
		tilemap.__canvas.height = tilemap.__height;
		renderer.__canvasRenderer.context = tilemap.__context;
		var renderer1 = renderer.__canvasRenderer;
		if(!(!tilemap.__renderable || tilemap.__group.__tiles.length == 0)) {
			var alpha = renderer1.__getAlpha(tilemap.__worldAlpha);
			if(!(alpha <= 0)) {
				var context = renderer1.context;
				renderer1.__setBlendMode(tilemap.__worldBlendMode);
				renderer1.__pushMaskObject(tilemap);
				var rect = openfl_geom_Rectangle.__pool.get();
				rect.setTo(0,0,tilemap.__width,tilemap.__height);
				renderer1.__pushMaskRect(rect,tilemap.__renderTransform);
				if(!renderer1.__allowSmoothing || !tilemap.smoothing) {
					context.imageSmoothingEnabled = false;
				}
				openfl__$internal_renderer_canvas_CanvasTilemap.renderTileContainer(tilemap.__group,renderer1,tilemap.__renderTransform,tilemap.__tileset,renderer1.__allowSmoothing && tilemap.smoothing,tilemap.tileAlphaEnabled,alpha,tilemap.tileBlendModeEnabled,tilemap.__worldBlendMode,null,null,rect);
				if(!renderer1.__allowSmoothing || !tilemap.smoothing) {
					context.imageSmoothingEnabled = true;
				}
				renderer1.__popMaskRect();
				renderer1.__popMaskObject(tilemap);
				openfl_geom_Rectangle.__pool.release(rect);
			}
		}
		renderer.__canvasRenderer.context = null;
		renderer.__updateClip(tilemap);
		renderer.__applyStyle(tilemap,true,false,true);
	} else {
		openfl__$internal_renderer_dom_DOMTilemap.clear(tilemap,renderer);
	}
};
var openfl__$internal_renderer_flash_FlashRenderer = function() { };
$hxClasses["openfl._internal.renderer.flash.FlashRenderer"] = openfl__$internal_renderer_flash_FlashRenderer;
openfl__$internal_renderer_flash_FlashRenderer.__name__ = "openfl._internal.renderer.flash.FlashRenderer";
openfl__$internal_renderer_flash_FlashRenderer.register = function(renderObject) {
	if(openfl__$internal_renderer_flash_FlashRenderer.instances == null) {
		openfl__$internal_renderer_flash_FlashRenderer.instances = openfl_utils_Dictionary.toObjectMap(null,true);
		openfl_Lib.get_current().stage.addEventListener("enterFrame",openfl__$internal_renderer_flash_FlashRenderer.render,false,-2147483648);
	}
	openfl__$internal_renderer_flash_FlashRenderer.instances.set(renderObject,true);
};
openfl__$internal_renderer_flash_FlashRenderer.render = function(_) {
	var instance = openfl__$internal_renderer_flash_FlashRenderer.instances.keys();
	while(instance.hasNext()) {
		var instance1 = instance.next();
		instance1.__renderFlash();
	}
};
var openfl__$internal_renderer_flash_IDisplayObject = function() { };
$hxClasses["openfl._internal.renderer.flash.IDisplayObject"] = openfl__$internal_renderer_flash_IDisplayObject;
openfl__$internal_renderer_flash_IDisplayObject.__name__ = "openfl._internal.renderer.flash.IDisplayObject";
openfl__$internal_renderer_flash_IDisplayObject.__isInterface__ = true;
openfl__$internal_renderer_flash_IDisplayObject.prototype = {
	__renderFlash: null
	,__class__: openfl__$internal_renderer_flash_IDisplayObject
};
var openfl_display_Bitmap = function(bitmapData,pixelSnapping,smoothing) {
	if(smoothing == null) {
		smoothing = false;
	}
	openfl_display_DisplayObject.call(this);
	this.__bitmapData = bitmapData;
	this.pixelSnapping = pixelSnapping;
	this.smoothing = smoothing;
	if(pixelSnapping == null) {
		this.pixelSnapping = 1;
	}
};
$hxClasses["openfl.display.Bitmap"] = openfl_display_Bitmap;
openfl_display_Bitmap.__name__ = "openfl.display.Bitmap";
openfl_display_Bitmap.__super__ = openfl_display_DisplayObject;
openfl_display_Bitmap.prototype = $extend(openfl_display_DisplayObject.prototype,{
	pixelSnapping: null
	,smoothing: null
	,__image: null
	,__bitmapData: null
	,__imageVersion: null
	,__enterFrame: function(deltaTime) {
		if(this.__bitmapData != null && this.__bitmapData.image != null && this.__bitmapData.image.version != this.__imageVersion) {
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
	}
	,__getBounds: function(rect,matrix) {
		var bounds = openfl_geom_Rectangle.__pool.get();
		if(this.__bitmapData != null) {
			bounds.setTo(0,0,this.__bitmapData.width,this.__bitmapData.height);
		} else {
			bounds.setTo(0,0,0,0);
		}
		bounds.__transform(bounds,matrix);
		rect.__expand(bounds.x,bounds.y,bounds.width,bounds.height);
		openfl_geom_Rectangle.__pool.release(bounds);
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly,hitObject) {
		if(!hitObject.get_visible() || this.__isMask || this.__bitmapData == null) {
			return false;
		}
		if(this.get_mask() != null && !this.get_mask().__hitTestMask(x,y)) {
			return false;
		}
		this.__getRenderTransform();
		var _this = this.__renderTransform;
		var norm = _this.a * _this.d - _this.b * _this.c;
		var px = norm == 0 ? -_this.tx : 1.0 / norm * (_this.c * (_this.ty - y) + _this.d * (x - _this.tx));
		var _this = this.__renderTransform;
		var norm = _this.a * _this.d - _this.b * _this.c;
		var py = norm == 0 ? -_this.ty : 1.0 / norm * (_this.a * (y - _this.ty) + _this.b * (_this.tx - x));
		if(px > 0 && py > 0 && px <= this.__bitmapData.width && py <= this.__bitmapData.height) {
			if(this.__scrollRect != null && !this.__scrollRect.contains(px,py)) {
				return false;
			}
			if(stack != null && !interactiveOnly) {
				stack.push(hitObject);
			}
			return true;
		}
		return false;
	}
	,__hitTestMask: function(x,y) {
		if(this.__bitmapData == null) {
			return false;
		}
		this.__getRenderTransform();
		var _this = this.__renderTransform;
		var norm = _this.a * _this.d - _this.b * _this.c;
		var px = norm == 0 ? -_this.tx : 1.0 / norm * (_this.c * (_this.ty - y) + _this.d * (x - _this.tx));
		var _this = this.__renderTransform;
		var norm = _this.a * _this.d - _this.b * _this.c;
		var py = norm == 0 ? -_this.ty : 1.0 / norm * (_this.a * (y - _this.ty) + _this.b * (_this.tx - x));
		if(px > 0 && py > 0 && px <= this.__bitmapData.width && py <= this.__bitmapData.height) {
			return true;
		}
		return false;
	}
	,__renderCairo: function(renderer) {
	}
	,__renderCairoMask: function(renderer) {
		renderer.cairo.rectangle(0,0,this.get_width(),this.get_height());
	}
	,__renderCanvas: function(renderer) {
		this.__updateCacheBitmap(renderer,false);
		if(this.__bitmapData != null && this.__bitmapData.image != null) {
			this.__imageVersion = this.__bitmapData.image.version;
		}
		if(this.__cacheBitmap != null && !this.__isCacheBitmapRender) {
			var bitmap = this.__cacheBitmap;
			if(bitmap.__renderable) {
				var alpha = renderer.__getAlpha(bitmap.__worldAlpha);
				if(alpha > 0 && bitmap.__bitmapData != null && bitmap.__bitmapData.__isValid && bitmap.__bitmapData.readable) {
					var context = renderer.context;
					renderer.__setBlendMode(bitmap.__worldBlendMode);
					renderer.__pushMaskObject(bitmap,false);
					lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(bitmap.__bitmapData.image);
					context.globalAlpha = alpha;
					var scrollRect = bitmap.__scrollRect;
					renderer.setTransform(bitmap.__renderTransform,context);
					if(!renderer.__allowSmoothing || !bitmap.smoothing) {
						context.imageSmoothingEnabled = false;
					}
					if(scrollRect == null) {
						context.drawImage(bitmap.__bitmapData.image.get_src(),0,0,bitmap.__bitmapData.image.width,bitmap.__bitmapData.image.height);
					} else {
						context.drawImage(bitmap.__bitmapData.image.get_src(),scrollRect.x,scrollRect.y,scrollRect.width,scrollRect.height);
					}
					if(!renderer.__allowSmoothing || !bitmap.smoothing) {
						context.imageSmoothingEnabled = true;
					}
					renderer.__popMaskObject(bitmap,false);
				}
			}
		} else {
			if(!(this.opaqueBackground == null && this.__graphics == null)) {
				if(this.__renderable) {
					var alpha = renderer.__getAlpha(this.__worldAlpha);
					if(!(alpha <= 0)) {
						if(this.opaqueBackground != null && !this.__isCacheBitmapRender && this.get_width() > 0 && this.get_height() > 0) {
							renderer.__setBlendMode(this.__worldBlendMode);
							renderer.__pushMaskObject(this);
							var context = renderer.context;
							renderer.setTransform(this.__renderTransform,context);
							var color = this.opaqueBackground;
							context.fillStyle = "rgb(" + (color >>> 16 & 255) + "," + (color >>> 8 & 255) + "," + (color & 255) + ")";
							context.fillRect(0,0,this.get_width(),this.get_height());
							renderer.__popMaskObject(this);
						}
						if(this.__graphics != null) {
							if(this.__renderable) {
								var alpha = renderer.__getAlpha(this.__worldAlpha);
								if(!(alpha <= 0)) {
									var graphics = this.__graphics;
									if(graphics != null) {
										openfl__$internal_renderer_canvas_CanvasGraphics.render(graphics,renderer);
										var width = graphics.__width;
										var height = graphics.__height;
										var canvas = graphics.__canvas;
										if(canvas != null && graphics.__visible && width >= 1 && height >= 1) {
											var transform = graphics.__worldTransform;
											var context = renderer.context;
											var scrollRect = this.__scrollRect;
											var scale9Grid = this.__worldScale9Grid;
											if(scrollRect == null || scrollRect.width > 0 && scrollRect.height > 0) {
												renderer.__setBlendMode(this.__worldBlendMode);
												renderer.__pushMaskObject(this);
												context.globalAlpha = alpha;
												if(scale9Grid != null && transform.b == 0 && transform.c == 0) {
													context.setTransform(1,0,0,1,transform.tx,transform.ty);
													var bounds = graphics.__bounds;
													var scaleX = graphics.__renderTransform.a;
													var scaleY = graphics.__renderTransform.d;
													var renderScaleX = transform.a;
													var renderScaleY = transform.d;
													var left = Math.max(1,Math.round(scale9Grid.x * scaleX));
													var top = Math.round(scale9Grid.y * scaleY);
													var right = Math.max(1,Math.round((bounds.get_right() - scale9Grid.get_right()) * scaleX));
													var bottom = Math.round((bounds.get_bottom() - scale9Grid.get_bottom()) * scaleY);
													var centerWidth = Math.round(scale9Grid.width * scaleX);
													var centerHeight = Math.round(scale9Grid.height * scaleY);
													var renderLeft = Math.round(scale9Grid.x * renderScaleX);
													var renderTop = Math.round(scale9Grid.y * renderScaleY);
													var renderRight = Math.round((bounds.get_right() - scale9Grid.get_right()) * renderScaleX);
													var renderBottom = Math.round((bounds.get_bottom() - scale9Grid.get_bottom()) * renderScaleY);
													var renderCenterWidth = Math.round(width * renderScaleX) - renderLeft - renderRight;
													var renderCenterHeight = Math.round(height * renderScaleY) - renderTop - renderBottom;
													renderer.applySmoothing(context,false);
													if(centerWidth != 0 && centerHeight != 0) {
														context.drawImage(canvas,0,0,left,top,0,0,renderLeft,renderTop);
														context.drawImage(canvas,left,0,centerWidth,top,renderLeft,0,renderCenterWidth,renderTop);
														context.drawImage(canvas,left + centerWidth,0,right,top,renderLeft + renderCenterWidth,0,renderRight,renderTop);
														context.drawImage(canvas,0,top,left,centerHeight,0,renderTop,renderLeft,renderCenterHeight);
														context.drawImage(canvas,left,top,centerWidth,centerHeight,renderLeft,renderTop,renderCenterWidth,renderCenterHeight);
														context.drawImage(canvas,left + centerWidth,top,right,centerHeight,renderLeft + renderCenterWidth,renderTop,renderRight,renderCenterHeight);
														context.drawImage(canvas,0,top + centerHeight,left,bottom,0,renderTop + renderCenterHeight,renderLeft,renderBottom);
														context.drawImage(canvas,left,top + centerHeight,centerWidth,bottom,renderLeft,renderTop + renderCenterHeight,renderCenterWidth,renderBottom);
														context.drawImage(canvas,left + centerWidth,top + centerHeight,right,bottom,renderLeft + renderCenterWidth,renderTop + renderCenterHeight,renderRight,renderBottom);
													} else if(centerWidth == 0 && centerHeight != 0) {
														var renderWidth = renderLeft + renderCenterWidth + renderRight;
														context.drawImage(canvas,0,0,width,top,0,0,renderWidth,renderTop);
														context.drawImage(canvas,0,top,width,centerHeight,0,renderTop,renderWidth,renderCenterHeight);
														context.drawImage(canvas,0,top + centerHeight,width,bottom,0,renderTop + renderCenterHeight,renderWidth,renderBottom);
													} else if(centerHeight == 0 && centerWidth != 0) {
														var renderHeight = renderTop + renderCenterHeight + renderBottom;
														context.drawImage(canvas,0,0,left,height,0,0,renderLeft,renderHeight);
														context.drawImage(canvas,left,0,centerWidth,height,renderLeft,0,renderCenterWidth,renderHeight);
														context.drawImage(canvas,left + centerWidth,0,right,height,renderLeft + renderCenterWidth,0,renderRight,renderHeight);
													}
												} else {
													renderer.setTransform(transform,context);
													if(renderer.__isDOM) {
														var reverseScale = 1 / renderer.pixelRatio;
														context.scale(reverseScale,reverseScale);
													}
													context.drawImage(canvas,0,0,width,height);
												}
												renderer.__popMaskObject(this);
											}
										}
									}
								}
							}
						}
					}
				}
			}
			if(this.__renderable) {
				var alpha = renderer.__getAlpha(this.__worldAlpha);
				if(alpha > 0 && this.__bitmapData != null && this.__bitmapData.__isValid && this.__bitmapData.readable) {
					var context = renderer.context;
					renderer.__setBlendMode(this.__worldBlendMode);
					renderer.__pushMaskObject(this,false);
					lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(this.__bitmapData.image);
					context.globalAlpha = alpha;
					var scrollRect = this.__scrollRect;
					renderer.setTransform(this.__renderTransform,context);
					if(!renderer.__allowSmoothing || !this.smoothing) {
						context.imageSmoothingEnabled = false;
					}
					if(scrollRect == null) {
						context.drawImage(this.__bitmapData.image.get_src(),0,0,this.__bitmapData.image.width,this.__bitmapData.image.height);
					} else {
						context.drawImage(this.__bitmapData.image.get_src(),scrollRect.x,scrollRect.y,scrollRect.width,scrollRect.height);
					}
					if(!renderer.__allowSmoothing || !this.smoothing) {
						context.imageSmoothingEnabled = true;
					}
					renderer.__popMaskObject(this,false);
				}
			}
		}
		this.__renderEvent(renderer);
	}
	,__renderCanvasMask: function(renderer) {
		renderer.context.rect(0,0,this.get_width(),this.get_height());
	}
	,__renderDOM: function(renderer) {
		this.__updateCacheBitmap(renderer,false);
		if(this.__cacheBitmap != null && !this.__isCacheBitmapRender) {
			this.__renderDOMClear(renderer);
			this.__cacheBitmap.stage = this.stage;
			var bitmap = this.__cacheBitmap;
			if(bitmap.stage != null && bitmap.__worldVisible && bitmap.__renderable && bitmap.__bitmapData != null && bitmap.__bitmapData.__isValid && bitmap.__bitmapData.readable) {
				renderer.__pushMaskObject(bitmap);
				if(bitmap.__bitmapData.image.buffer.__srcImage != null) {
					openfl__$internal_renderer_dom_DOMBitmap.renderImage(bitmap,renderer);
				} else {
					openfl__$internal_renderer_dom_DOMBitmap.renderCanvas(bitmap,renderer);
				}
				renderer.__popMaskObject(bitmap);
			} else {
				openfl__$internal_renderer_dom_DOMBitmap.clear(bitmap,renderer);
			}
		} else {
			var tmp = this.opaqueBackground != null && !this.__isCacheBitmapRender && this.get_width() > 0 && this.get_height() > 0;
			var graphics = this.__graphics;
			if(this.stage != null && this.__worldVisible && this.__renderable && graphics != null) {
				openfl__$internal_renderer_canvas_CanvasGraphics.render(graphics,renderer.__canvasRenderer);
				if(graphics.__softwareDirty || this.__worldAlphaChanged || this.__canvas != graphics.__canvas) {
					if(graphics.__canvas != null) {
						if(this.__canvas != graphics.__canvas) {
							if(this.__canvas != null) {
								renderer.element.removeChild(this.__canvas);
							}
							this.__canvas = graphics.__canvas;
							this.__context = graphics.__context;
							renderer.__initializeElement(this,this.__canvas);
						}
					} else {
						openfl__$internal_renderer_dom_DOMShape.clear(this,renderer);
					}
				}
				if(this.__canvas != null) {
					renderer.__pushMaskObject(this);
					var cacheTransform = this.__renderTransform;
					this.__renderTransform = graphics.__worldTransform;
					if(graphics.__transformDirty) {
						graphics.__transformDirty = false;
						this.__renderTransformChanged = true;
					}
					renderer.__updateClip(this);
					renderer.__applyStyle(this,true,true,true);
					this.__renderTransform = cacheTransform;
					renderer.__popMaskObject(this);
				}
			} else {
				openfl__$internal_renderer_dom_DOMShape.clear(this,renderer);
			}
			if(this.stage != null && this.__worldVisible && this.__renderable && this.__bitmapData != null && this.__bitmapData.__isValid && this.__bitmapData.readable) {
				renderer.__pushMaskObject(this);
				if(this.__bitmapData.image.buffer.__srcImage != null) {
					openfl__$internal_renderer_dom_DOMBitmap.renderImage(this,renderer);
				} else {
					openfl__$internal_renderer_dom_DOMBitmap.renderCanvas(this,renderer);
				}
				renderer.__popMaskObject(this);
			} else {
				openfl__$internal_renderer_dom_DOMBitmap.clear(this,renderer);
			}
		}
		this.__renderEvent(renderer);
	}
	,__renderDOMClear: function(renderer) {
		openfl__$internal_renderer_dom_DOMBitmap.clear(this,renderer);
	}
	,__renderGL: function(renderer) {
		this.__updateCacheBitmap(renderer,false);
		if(this.__bitmapData != null && this.__bitmapData.image != null) {
			this.__imageVersion = this.__bitmapData.image.version;
		}
		if(this.__cacheBitmap != null && !this.__isCacheBitmapRender) {
			openfl__$internal_renderer_context3D_Context3DBitmap.render(this.__cacheBitmap,renderer);
		} else {
			if(!(this.opaqueBackground == null && this.__graphics == null)) {
				if(!(!this.__renderable || this.__worldAlpha <= 0)) {
					if(this.opaqueBackground != null && !this.__isCacheBitmapRender && this.get_width() > 0 && this.get_height() > 0) {
						renderer.__setBlendMode(this.__worldBlendMode);
						renderer.__pushMaskObject(this);
						var context = renderer.__context3D;
						var rect = openfl_geom_Rectangle.__pool.get();
						rect.setTo(0,0,this.get_width(),this.get_height());
						renderer.__pushMaskRect(rect,this.__renderTransform);
						var color = this.opaqueBackground;
						context.clear((color >>> 16 & 255) / 255,(color >>> 8 & 255) / 255,(color & 255) / 255,1,0,0,1);
						renderer.__popMaskRect();
						renderer.__popMaskObject(this);
						openfl_geom_Rectangle.__pool.release(rect);
					}
					if(this.__graphics != null) {
						openfl__$internal_renderer_context3D_Context3DShape.render(this,renderer);
					}
				}
			}
			openfl__$internal_renderer_context3D_Context3DBitmap.render(this,renderer);
		}
		this.__renderEvent(renderer);
	}
	,__renderGLMask: function(renderer) {
		openfl__$internal_renderer_context3D_Context3DBitmap.renderMask(this,renderer);
	}
	,__updateCacheBitmap: function(renderer,force) {
		if(this.__bitmapData == null || this.__filters == null && renderer.__type == "opengl" && this.__cacheBitmap == null) {
			return false;
		}
		return openfl_display_DisplayObject.prototype.__updateCacheBitmap.call(this,renderer,this.__bitmapData.image != null && this.__bitmapData.image.version != this.__imageVersion);
	}
	,get_bitmapData: function() {
		return this.__bitmapData;
	}
	,set_bitmapData: function(value) {
		this.__bitmapData = value;
		this.smoothing = false;
		if(!this.__renderDirty) {
			this.__renderDirty = true;
			this.__setParentRenderDirty();
		}
		var tmp = this.__filters != null;
		this.__imageVersion = -1;
		return this.__bitmapData;
	}
	,set_height: function(value) {
		if(this.__bitmapData != null) {
			this.set_scaleY(value / this.__bitmapData.height);
		} else {
			this.set_scaleY(0);
		}
		return value;
	}
	,set_width: function(value) {
		if(this.__bitmapData != null) {
			this.set_scaleX(value / this.__bitmapData.width);
		} else {
			this.set_scaleX(0);
		}
		return value;
	}
	,__class__: openfl_display_Bitmap
	,__properties__: $extend(openfl_display_DisplayObject.prototype.__properties__,{set_bitmapData:"set_bitmapData",get_bitmapData:"get_bitmapData"})
});
var openfl_geom_Point = function(x,y) {
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
};
$hxClasses["openfl.geom.Point"] = openfl_geom_Point;
openfl_geom_Point.__name__ = "openfl.geom.Point";
openfl_geom_Point.distance = function(pt1,pt2) {
	var dx = pt1.x - pt2.x;
	var dy = pt1.y - pt2.y;
	return Math.sqrt(dx * dx + dy * dy);
};
openfl_geom_Point.interpolate = function(pt1,pt2,f) {
	return new openfl_geom_Point(pt2.x + f * (pt1.x - pt2.x),pt2.y + f * (pt1.y - pt2.y));
};
openfl_geom_Point.polar = function(len,angle) {
	return new openfl_geom_Point(len * Math.cos(angle),len * Math.sin(angle));
};
openfl_geom_Point.prototype = {
	x: null
	,y: null
	,add: function(v) {
		return new openfl_geom_Point(v.x + this.x,v.y + this.y);
	}
	,clone: function() {
		return new openfl_geom_Point(this.x,this.y);
	}
	,copyFrom: function(sourcePoint) {
		this.x = sourcePoint.x;
		this.y = sourcePoint.y;
	}
	,equals: function(toCompare) {
		if(toCompare != null && toCompare.x == this.x) {
			return toCompare.y == this.y;
		} else {
			return false;
		}
	}
	,normalize: function(thickness) {
		if(this.x == 0 && this.y == 0) {
			return;
		} else {
			var norm = thickness / Math.sqrt(this.x * this.x + this.y * this.y);
			this.x *= norm;
			this.y *= norm;
		}
	}
	,offset: function(dx,dy) {
		this.x += dx;
		this.y += dy;
	}
	,setTo: function(xa,ya) {
		this.x = xa;
		this.y = ya;
	}
	,subtract: function(v) {
		return new openfl_geom_Point(this.x - v.x,this.y - v.y);
	}
	,toString: function() {
		return "(x=" + this.x + ", y=" + this.y + ")";
	}
	,__toLimeVector2: function() {
		if(openfl_geom_Point.__limeVector2 == null) {
			openfl_geom_Point.__limeVector2 = new lime_math_Vector2();
		}
		var _this = openfl_geom_Point.__limeVector2;
		_this.x = this.x;
		_this.y = this.y;
		return openfl_geom_Point.__limeVector2;
	}
	,get_length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y);
	}
	,__class__: openfl_geom_Point
	,__properties__: {get_length:"get_length"}
};
var openfl__$internal_renderer_flash_FlashTilemap = function() { };
$hxClasses["openfl._internal.renderer.flash.FlashTilemap"] = openfl__$internal_renderer_flash_FlashTilemap;
openfl__$internal_renderer_flash_FlashTilemap.__name__ = "openfl._internal.renderer.flash.FlashTilemap";
openfl__$internal_renderer_flash_FlashTilemap.render = function(tilemap) {
};
openfl__$internal_renderer_flash_FlashTilemap.renderTileContainer = function(group,bitmapData,parentTransform,defaultTileset,smooth,alphaEnabled,worldAlpha,colorTransformEnabled,defaultColorTransform,blendModeEnabled,defaultBlendMode,cacheBitmapData) {
};
var openfl__$internal_symbols_SWFSymbol = function() {
};
$hxClasses["openfl._internal.symbols.SWFSymbol"] = openfl__$internal_symbols_SWFSymbol;
openfl__$internal_symbols_SWFSymbol.__name__ = "openfl._internal.symbols.SWFSymbol";
openfl__$internal_symbols_SWFSymbol.prototype = {
	className: null
	,id: null
	,__createObject: function(swf) {
		return null;
	}
	,__class__: openfl__$internal_symbols_SWFSymbol
};
var openfl__$internal_symbols_BitmapSymbol = function() {
	openfl__$internal_symbols_SWFSymbol.call(this);
};
$hxClasses["openfl._internal.symbols.BitmapSymbol"] = openfl__$internal_symbols_BitmapSymbol;
openfl__$internal_symbols_BitmapSymbol.__name__ = "openfl._internal.symbols.BitmapSymbol";
openfl__$internal_symbols_BitmapSymbol.__super__ = openfl__$internal_symbols_SWFSymbol;
openfl__$internal_symbols_BitmapSymbol.prototype = $extend(openfl__$internal_symbols_SWFSymbol.prototype,{
	alpha: null
	,path: null
	,smooth: null
	,__createObject: function(swf) {
		return new openfl_display_Bitmap(openfl_display_BitmapData.fromImage(swf.library.getImage(this.path)),1,this.smooth != false);
	}
	,__class__: openfl__$internal_symbols_BitmapSymbol
});
var openfl__$internal_symbols_ButtonSymbol = function() {
	openfl__$internal_symbols_SWFSymbol.call(this);
};
$hxClasses["openfl._internal.symbols.ButtonSymbol"] = openfl__$internal_symbols_ButtonSymbol;
openfl__$internal_symbols_ButtonSymbol.__name__ = "openfl._internal.symbols.ButtonSymbol";
openfl__$internal_symbols_ButtonSymbol.__super__ = openfl__$internal_symbols_SWFSymbol;
openfl__$internal_symbols_ButtonSymbol.prototype = $extend(openfl__$internal_symbols_SWFSymbol.prototype,{
	downState: null
	,hitState: null
	,overState: null
	,upState: null
	,__createObject: function(swf) {
		var simpleButton = null;
		openfl_display_SimpleButton.__initSWF = swf;
		openfl_display_SimpleButton.__initSymbol = this;
		if(this.className != null) {
			var name = this.className;
			var symbolType = $hxClasses[name];
			if(symbolType != null) {
				simpleButton = Type.createInstance(symbolType,[]);
			}
		}
		if(simpleButton == null) {
			simpleButton = new openfl_display_SimpleButton();
		}
		return simpleButton;
	}
	,__class__: openfl__$internal_symbols_ButtonSymbol
});
var openfl__$internal_symbols_DynamicTextSymbol = function() {
	openfl__$internal_symbols_SWFSymbol.call(this);
};
$hxClasses["openfl._internal.symbols.DynamicTextSymbol"] = openfl__$internal_symbols_DynamicTextSymbol;
openfl__$internal_symbols_DynamicTextSymbol.__name__ = "openfl._internal.symbols.DynamicTextSymbol";
openfl__$internal_symbols_DynamicTextSymbol.__super__ = openfl__$internal_symbols_SWFSymbol;
openfl__$internal_symbols_DynamicTextSymbol.prototype = $extend(openfl__$internal_symbols_SWFSymbol.prototype,{
	align: null
	,border: null
	,color: null
	,fontHeight: null
	,fontID: null
	,fontName: null
	,height: null
	,html: null
	,indent: null
	,input: null
	,leading: null
	,leftMargin: null
	,multiline: null
	,password: null
	,rightMargin: null
	,selectable: null
	,text: null
	,width: null
	,wordWrap: null
	,x: null
	,y: null
	,__createObject: function(swf) {
		var textField = new openfl_text_TextField();
		textField.__fromSymbol(swf,this);
		return textField;
	}
	,__class__: openfl__$internal_symbols_DynamicTextSymbol
});
var openfl__$internal_symbols_FontSymbol = function() {
	openfl__$internal_symbols_SWFSymbol.call(this);
};
$hxClasses["openfl._internal.symbols.FontSymbol"] = openfl__$internal_symbols_FontSymbol;
openfl__$internal_symbols_FontSymbol.__name__ = "openfl._internal.symbols.FontSymbol";
openfl__$internal_symbols_FontSymbol.__super__ = openfl__$internal_symbols_SWFSymbol;
openfl__$internal_symbols_FontSymbol.prototype = $extend(openfl__$internal_symbols_SWFSymbol.prototype,{
	advances: null
	,ascent: null
	,bold: null
	,codes: null
	,descent: null
	,glyphs: null
	,italic: null
	,leading: null
	,name: null
	,__class__: openfl__$internal_symbols_FontSymbol
});
var openfl__$internal_symbols_ShapeSymbol = function() {
	openfl__$internal_symbols_SWFSymbol.call(this);
};
$hxClasses["openfl._internal.symbols.ShapeSymbol"] = openfl__$internal_symbols_ShapeSymbol;
openfl__$internal_symbols_ShapeSymbol.__name__ = "openfl._internal.symbols.ShapeSymbol";
openfl__$internal_symbols_ShapeSymbol.__super__ = openfl__$internal_symbols_SWFSymbol;
openfl__$internal_symbols_ShapeSymbol.prototype = $extend(openfl__$internal_symbols_SWFSymbol.prototype,{
	commands: null
	,rendered: null
	,__createObject: function(swf) {
		var shape = new openfl_display_Shape();
		var graphics = shape.get_graphics();
		if(this.rendered != null) {
			graphics.copyFrom(this.rendered.get_graphics());
			return shape;
		}
		var _g = 0;
		var _g1 = this.commands;
		while(_g < _g1.length) {
			var command = _g1[_g];
			++_g;
			switch(command._hx_index) {
			case 0:
				var smooth = command.smooth;
				var repeat = command.repeat;
				var matrix = command.matrix;
				var bitmapID = command.bitmap;
				var bitmapSymbol = swf.symbols.h[bitmapID];
				var bitmap = swf.library.getImage(bitmapSymbol.path);
				if(bitmap != null) {
					graphics.beginBitmapFill(openfl_display_BitmapData.fromImage(bitmap),matrix,repeat,smooth);
				}
				break;
			case 1:
				var alpha = command.alpha;
				var color = command.color;
				graphics.beginFill(color,alpha);
				break;
			case 2:
				var focalPointRatio = command.focalPointRatio;
				var interpolationMethod = command.interpolationMethod;
				var spreadMethod = command.spreadMethod;
				var matrix1 = command.matrix;
				var ratios = command.ratios;
				var alphas = command.alphas;
				var colors = command.colors;
				var fillType = command.fillType;
				graphics.beginGradientFill(fillType,colors,alphas,ratios,matrix1,spreadMethod,interpolationMethod,focalPointRatio);
				break;
			case 3:
				var anchorY = command.anchorY;
				var anchorX = command.anchorX;
				var controlY = command.controlY;
				var controlX = command.controlX;
				graphics.curveTo(controlX,controlY,anchorX,anchorY);
				break;
			case 4:
				graphics.endFill();
				break;
			case 5:
				var miterLimit = command.miterLimit;
				var joints = command.joints;
				var caps = command.caps;
				var scaleMode = command.scaleMode;
				var pixelHinting = command.pixelHinting;
				var alpha1 = command.alpha;
				var color1 = command.color;
				var thickness = command.thickness;
				if(thickness != null) {
					graphics.lineStyle(thickness,color1,alpha1,pixelHinting,scaleMode,caps,joints,miterLimit);
				} else {
					graphics.lineStyle();
				}
				break;
			case 6:
				var y = command.y;
				var x = command.x;
				graphics.lineTo(x,y);
				break;
			case 7:
				var y1 = command.y;
				var x1 = command.x;
				graphics.moveTo(x1,y1);
				break;
			}
		}
		this.commands = null;
		this.rendered = new openfl_display_Shape();
		this.rendered.get_graphics().copyFrom(shape.get_graphics());
		return shape;
	}
	,__class__: openfl__$internal_symbols_ShapeSymbol
});
var openfl__$internal_symbols_SpriteSymbol = function() {
	openfl__$internal_symbols_SWFSymbol.call(this);
	this.frames = [];
};
$hxClasses["openfl._internal.symbols.SpriteSymbol"] = openfl__$internal_symbols_SpriteSymbol;
openfl__$internal_symbols_SpriteSymbol.__name__ = "openfl._internal.symbols.SpriteSymbol";
openfl__$internal_symbols_SpriteSymbol.__super__ = openfl__$internal_symbols_SWFSymbol;
openfl__$internal_symbols_SpriteSymbol.prototype = $extend(openfl__$internal_symbols_SWFSymbol.prototype,{
	baseClassName: null
	,frames: null
	,scale9Grid: null
	,__createObject: function(swf) {
		openfl_display_MovieClip.__initSWF = swf;
		openfl_display_MovieClip.__initSymbol = this;
		var symbolType = null;
		if(this.className != null) {
			var name = this.className;
			symbolType = $hxClasses[name];
			var tmp = symbolType == null;
		}
		if(symbolType == null && this.baseClassName != null) {
			var name = this.baseClassName;
			symbolType = $hxClasses[name];
			var tmp = symbolType == null;
		}
		var movieClip = null;
		if(symbolType != null) {
			movieClip = Type.createInstance(symbolType,[]);
		} else {
			movieClip = new openfl_display_MovieClip();
		}
		movieClip.set_scale9Grid(this.scale9Grid);
		return movieClip;
	}
	,__class__: openfl__$internal_symbols_SpriteSymbol
});
var openfl__$internal_symbols_StaticTextSymbol = function() {
	openfl__$internal_symbols_SWFSymbol.call(this);
};
$hxClasses["openfl._internal.symbols.StaticTextSymbol"] = openfl__$internal_symbols_StaticTextSymbol;
openfl__$internal_symbols_StaticTextSymbol.__name__ = "openfl._internal.symbols.StaticTextSymbol";
openfl__$internal_symbols_StaticTextSymbol.__super__ = openfl__$internal_symbols_SWFSymbol;
openfl__$internal_symbols_StaticTextSymbol.prototype = $extend(openfl__$internal_symbols_SWFSymbol.prototype,{
	matrix: null
	,records: null
	,rendered: null
	,__createObject: function(swf) {
		var staticText = new openfl_text_StaticText();
		var graphics = staticText.__graphics;
		if(this.rendered != null) {
			staticText.text = this.rendered.text;
			graphics.copyFrom(this.rendered.__graphics);
			return staticText;
		}
		var text = "";
		if(this.records != null) {
			var font = null;
			var color = 16777215;
			var offsetX = this.matrix.tx;
			var offsetY = this.matrix.ty;
			var scale;
			var index;
			var _g = 0;
			var _g1 = this.records;
			while(_g < _g1.length) {
				var record = _g1[_g];
				++_g;
				if(record.fontID != null) {
					font = swf.symbols.h[record.fontID];
				}
				if(record.offsetX != null) {
					offsetX = this.matrix.tx + record.offsetX * 0.05;
				}
				if(record.offsetY != null) {
					offsetY = this.matrix.ty + record.offsetY * 0.05;
				}
				if(record.color != null) {
					color = record.color;
				}
				if(font != null) {
					scale = record.fontHeight / 1024 * 0.05;
					var _g2 = 0;
					var _g3 = record.glyphs.length;
					while(_g2 < _g3) {
						var i = _g2++;
						index = record.glyphs[i];
						var code = font.codes[index];
						text += String.fromCodePoint(code);
						var _g4 = 0;
						var _g5 = font.glyphs[index];
						while(_g4 < _g5.length) {
							var command = _g5[_g4];
							++_g4;
							switch(command._hx_index) {
							case 1:
								var _g6 = command.color;
								var alpha = command.alpha;
								graphics.beginFill(color & 16777215,(color >> 24 & 255) / 255);
								break;
							case 3:
								var anchorY = command.anchorY;
								var anchorX = command.anchorX;
								var controlY = command.controlY;
								var controlX = command.controlX;
								graphics.curveTo(controlX * scale + offsetX,controlY * scale + offsetY,anchorX * scale + offsetX,anchorY * scale + offsetY);
								break;
							case 4:
								graphics.endFill();
								break;
							case 5:
								var miterLimit = command.miterLimit;
								var joints = command.joints;
								var caps = command.caps;
								var scaleMode = command.scaleMode;
								var pixelHinting = command.pixelHinting;
								var alpha1 = command.alpha;
								var color1 = command.color;
								var thickness = command.thickness;
								if(thickness != null) {
									graphics.lineStyle(thickness,color1,alpha1,pixelHinting,scaleMode,caps,joints,miterLimit);
								} else {
									graphics.lineStyle();
								}
								break;
							case 6:
								var y = command.y;
								var x = command.x;
								graphics.lineTo(x * scale + offsetX,y * scale + offsetY);
								break;
							case 7:
								var y1 = command.y;
								var x1 = command.x;
								graphics.moveTo(x1 * scale + offsetX,y1 * scale + offsetY);
								break;
							default:
							}
						}
						offsetX += record.advances[i] * 0.05;
					}
				}
			}
		}
		staticText.text = text;
		this.records = null;
		this.rendered = new openfl_text_StaticText();
		this.rendered.text = text;
		this.rendered.__graphics.copyFrom(staticText.__graphics);
		return staticText;
	}
	,__class__: openfl__$internal_symbols_StaticTextSymbol
});
var openfl__$internal_symbols_StaticTextRecord = function() {
};
$hxClasses["openfl._internal.symbols.StaticTextRecord"] = openfl__$internal_symbols_StaticTextRecord;
openfl__$internal_symbols_StaticTextRecord.__name__ = "openfl._internal.symbols.StaticTextRecord";
openfl__$internal_symbols_StaticTextRecord.prototype = {
	advances: null
	,color: null
	,fontHeight: null
	,fontID: null
	,glyphs: null
	,offsetX: null
	,offsetY: null
	,__class__: openfl__$internal_symbols_StaticTextRecord
};
var openfl__$internal_symbols_timeline_Frame = function() {
};
$hxClasses["openfl._internal.symbols.timeline.Frame"] = openfl__$internal_symbols_timeline_Frame;
openfl__$internal_symbols_timeline_Frame.__name__ = "openfl._internal.symbols.timeline.Frame";
openfl__$internal_symbols_timeline_Frame.prototype = {
	label: null
	,objects: null
	,script: null
	,scriptSource: null
	,__class__: openfl__$internal_symbols_timeline_Frame
};
var openfl__$internal_symbols_timeline_FrameObject = function() {
};
$hxClasses["openfl._internal.symbols.timeline.FrameObject"] = openfl__$internal_symbols_timeline_FrameObject;
openfl__$internal_symbols_timeline_FrameObject.__name__ = "openfl._internal.symbols.timeline.FrameObject";
openfl__$internal_symbols_timeline_FrameObject.prototype = {
	blendMode: null
	,cacheAsBitmap: null
	,clipDepth: null
	,colorTransform: null
	,depth: null
	,filters: null
	,id: null
	,matrix: null
	,name: null
	,symbol: null
	,type: null
	,visible: null
	,__class__: openfl__$internal_symbols_timeline_FrameObject
};
var openfl__$internal_symbols_timeline_FrameObjectType = $hxEnums["openfl._internal.symbols.timeline.FrameObjectType"] = { __ename__ : "openfl._internal.symbols.timeline.FrameObjectType", __constructs__ : ["CREATE","UPDATE","DESTROY"]
	,CREATE: {_hx_index:0,__enum__:"openfl._internal.symbols.timeline.FrameObjectType",toString:$estr}
	,UPDATE: {_hx_index:1,__enum__:"openfl._internal.symbols.timeline.FrameObjectType",toString:$estr}
	,DESTROY: {_hx_index:2,__enum__:"openfl._internal.symbols.timeline.FrameObjectType",toString:$estr}
};
var openfl__$internal_text_GlyphPosition = function(glyph,advance,offset) {
	this.glyph = glyph;
	this.advance = advance;
	if(offset != null) {
		this.offset = offset;
	} else {
		this.offset = new lime_math_Vector2();
	}
};
$hxClasses["openfl._internal.text.GlyphPosition"] = openfl__$internal_text_GlyphPosition;
openfl__$internal_text_GlyphPosition.__name__ = "openfl._internal.text.GlyphPosition";
openfl__$internal_text_GlyphPosition.prototype = {
	advance: null
	,glyph: null
	,offset: null
	,__class__: openfl__$internal_text_GlyphPosition
};
var openfl__$internal_text_TextEngine = function(textField) {
	this.textField = textField;
	this.width = 100;
	this.height = 100;
	this.set_text("");
	this.bounds = new openfl_geom_Rectangle(0,0,0,0);
	this.textBounds = new openfl_geom_Rectangle(0,0,0,0);
	this.type = 0;
	this.autoSize = 2;
	this.embedFonts = false;
	this.selectable = true;
	this.borderColor = 0;
	this.border = false;
	this.backgroundColor = 16777215;
	this.background = false;
	this.gridFitType = 1;
	this.maxChars = 0;
	this.multiline = false;
	this.numLines = 1;
	this.sharpness = 0;
	this.scrollH = 0;
	this.set_scrollV(1);
	this.wordWrap = false;
	this.lineAscents = openfl_Vector.toFloatVector(null);
	this.lineBreaks = openfl_Vector.toIntVector(null);
	this.lineDescents = openfl_Vector.toFloatVector(null);
	this.lineLeadings = openfl_Vector.toFloatVector(null);
	this.lineHeights = openfl_Vector.toFloatVector(null);
	this.lineWidths = openfl_Vector.toFloatVector(null);
	this.layoutGroups = openfl_Vector.toObjectVector(null);
	this.textFormatRanges = openfl_Vector.toObjectVector(null);
	if(openfl__$internal_text_TextEngine.__context == null) {
		openfl__$internal_text_TextEngine.__context = window.document.createElement("canvas").getContext("2d");
	}
};
$hxClasses["openfl._internal.text.TextEngine"] = openfl__$internal_text_TextEngine;
openfl__$internal_text_TextEngine.__name__ = "openfl._internal.text.TextEngine";
openfl__$internal_text_TextEngine.findFont = function(name) {
	return openfl_text_Font.__fontByName.h[name];
};
openfl__$internal_text_TextEngine.findFontVariant = function(format) {
	var fontName = format.font;
	var bold = format.bold;
	var italic = format.italic;
	if(fontName == null) {
		fontName = "_serif";
	}
	var fontNamePrefix = StringTools.replace(StringTools.replace(fontName," Normal","")," Regular","");
	if(bold && italic && Object.prototype.hasOwnProperty.call(openfl_text_Font.__fontByName.h,fontNamePrefix + " Bold Italic")) {
		return openfl__$internal_text_TextEngine.findFont(fontNamePrefix + " Bold Italic");
	} else if(bold && Object.prototype.hasOwnProperty.call(openfl_text_Font.__fontByName.h,fontNamePrefix + " Bold")) {
		return openfl__$internal_text_TextEngine.findFont(fontNamePrefix + " Bold");
	} else if(italic && Object.prototype.hasOwnProperty.call(openfl_text_Font.__fontByName.h,fontNamePrefix + " Italic")) {
		return openfl__$internal_text_TextEngine.findFont(fontNamePrefix + " Italic");
	}
	return openfl__$internal_text_TextEngine.findFont(fontName);
};
openfl__$internal_text_TextEngine.getFormatHeight = function(format) {
	var ascent;
	var descent;
	openfl__$internal_text_TextEngine.__context.font = openfl__$internal_text_TextEngine.getFont(format);
	var font = openfl__$internal_text_TextEngine.getFontInstance(format);
	if(format.__ascent != null) {
		ascent = format.size * format.__ascent;
		descent = format.size * format.__descent;
	} else if(font != null && font.unitsPerEM != 0) {
		ascent = font.ascender / font.unitsPerEM * format.size;
		descent = Math.abs(font.descender / font.unitsPerEM * format.size);
	} else {
		ascent = format.size;
		descent = format.size * 0.185;
	}
	var leading = format.leading;
	return ascent + descent + leading;
};
openfl__$internal_text_TextEngine.getFont = function(format) {
	var fontName = format.font;
	var bold = format.bold;
	var italic = format.italic;
	if(fontName == null) {
		fontName = "_serif";
	}
	var fontNamePrefix = StringTools.replace(StringTools.replace(fontName," Normal","")," Regular","");
	if(bold && italic && Object.prototype.hasOwnProperty.call(openfl_text_Font.__fontByName.h,fontNamePrefix + " Bold Italic")) {
		fontName = fontNamePrefix + " Bold Italic";
		bold = false;
		italic = false;
	} else if(bold && Object.prototype.hasOwnProperty.call(openfl_text_Font.__fontByName.h,fontNamePrefix + " Bold")) {
		fontName = fontNamePrefix + " Bold";
		bold = false;
	} else if(italic && Object.prototype.hasOwnProperty.call(openfl_text_Font.__fontByName.h,fontNamePrefix + " Italic")) {
		fontName = fontNamePrefix + " Italic";
		italic = false;
	} else {
		if(bold && (fontName.indexOf(" Bold ") > -1 || StringTools.endsWith(fontName," Bold"))) {
			bold = false;
		}
		if(italic && (fontName.indexOf(" Italic ") > -1 || StringTools.endsWith(fontName," Italic"))) {
			italic = false;
		}
	}
	var font = italic ? "italic " : "normal ";
	font += "normal ";
	font += bold ? "bold " : "normal ";
	font += format.size + "px";
	font += "/" + (format.leading + format.size + 3) + "px ";
	var font1;
	switch(fontName) {
	case "_sans":
		font1 = "sans-serif";
		break;
	case "_serif":
		font1 = "serif";
		break;
	case "_typewriter":
		font1 = "monospace";
		break;
	default:
		var _this_r = new RegExp("^[\\s'\"]+(.*)[\\s'\"]+$","".split("u").join(""));
		font1 = "'" + fontName.replace(_this_r,"$1") + "'";
	}
	font += "" + font1;
	return font;
};
openfl__$internal_text_TextEngine.getFontInstance = function(format) {
	return openfl__$internal_text_TextEngine.findFontVariant(format);
};
openfl__$internal_text_TextEngine.prototype = {
	antiAliasType: null
	,autoSize: null
	,background: null
	,backgroundColor: null
	,border: null
	,borderColor: null
	,bottomScrollV: null
	,bounds: null
	,caretIndex: null
	,embedFonts: null
	,gridFitType: null
	,height: null
	,layoutGroups: null
	,lineAscents: null
	,lineBreaks: null
	,lineDescents: null
	,lineLeadings: null
	,lineHeights: null
	,lineWidths: null
	,maxChars: null
	,maxScrollH: null
	,maxScrollV: null
	,multiline: null
	,numLines: null
	,restrict: null
	,scrollH: null
	,scrollV: null
	,selectable: null
	,sharpness: null
	,text: null
	,textBounds: null
	,textHeight: null
	,textFormatRanges: null
	,textWidth: null
	,type: null
	,width: null
	,wordWrap: null
	,textField: null
	,__cursorTimer: null
	,__hasFocus: null
	,__isKeyDown: null
	,__measuredHeight: null
	,__measuredWidth: null
	,__restrictRegexp: null
	,__selectionStart: null
	,__showCursor: null
	,__textFormat: null
	,__textLayout: null
	,__texture: null
	,__useIntAdvances: null
	,__cairoFont: null
	,__font: null
	,createRestrictRegexp: function(restrict) {
		var declinedRange = new EReg("\\^(.-.|.)","gu");
		var declined = "";
		var accepted = declinedRange.map(restrict,function(ereg) {
			declined += ereg.matched(1);
			return "";
		});
		var testRegexpParts = [];
		if(accepted.length > 0) {
			testRegexpParts.push("[^" + restrict + "]");
		}
		if(declined.length > 0) {
			testRegexpParts.push("[" + declined + "]");
		}
		return new EReg("(" + testRegexpParts.join("|") + ")","g");
	}
	,getBounds: function() {
		var padding = this.border ? 1 : 0;
		this.bounds.width = this.width + padding;
		this.bounds.height = this.height + padding;
		var x = this.width;
		var y = this.width;
		var group = this.layoutGroups.iterator();
		while(group.hasNext()) {
			var group1 = group.next();
			if(group1.offsetX < x) {
				x = group1.offsetX;
			}
			if(group1.offsetY < y) {
				y = group1.offsetY;
			}
		}
		if(x >= this.width) {
			x = 2;
		}
		if(y >= this.height) {
			y = 2;
		}
		var textHeight = this.textHeight * 1.185;
		this.textBounds.setTo(Math.max(x - 2,0),Math.max(y - 2,0),Math.min(this.textWidth + 4,this.bounds.width + 4),Math.min(textHeight + 4,this.bounds.height + 4));
	}
	,getLine: function(index) {
		if(index < 0 || index > this.lineBreaks.get_length() + 1) {
			return null;
		}
		if(this.lineBreaks.get_length() == 0) {
			return this.text;
		} else {
			return this.text.substring(index > 0 ? this.lineBreaks.get(index - 1) : 0,this.lineBreaks.get(index));
		}
	}
	,getLineBreakIndex: function(startIndex) {
		if(startIndex == null) {
			startIndex = 0;
		}
		var cr = this.text.indexOf("\n",startIndex);
		var lf = this.text.indexOf("\r",startIndex);
		if(cr == -1) {
			return lf;
		}
		if(lf == -1) {
			return cr;
		}
		if(cr < lf) {
			return cr;
		} else {
			return lf;
		}
	}
	,getLineMeasurements: function() {
		this.lineAscents.set_length(0);
		this.lineDescents.set_length(0);
		this.lineLeadings.set_length(0);
		this.lineHeights.set_length(0);
		this.lineWidths.set_length(0);
		var currentLineAscent = 0.0;
		var currentLineDescent = 0.0;
		var currentLineLeading = null;
		var currentLineHeight = 0.0;
		var currentLineWidth = 0.0;
		var currentTextHeight = 0.0;
		this.textWidth = 0;
		this.textHeight = 0;
		this.numLines = 1;
		this.maxScrollH = 0;
		var group = this.layoutGroups.iterator();
		while(group.hasNext()) {
			var group1 = group.next();
			while(group1.lineIndex > this.numLines - 1) {
				this.lineAscents.push(currentLineAscent);
				this.lineDescents.push(currentLineDescent);
				this.lineLeadings.push(currentLineLeading != null ? currentLineLeading : 0);
				this.lineHeights.push(currentLineHeight);
				this.lineWidths.push(currentLineWidth);
				currentLineAscent = 0;
				currentLineDescent = 0;
				currentLineLeading = null;
				currentLineHeight = 0;
				currentLineWidth = 0;
				this.numLines++;
			}
			currentLineAscent = Math.max(currentLineAscent,group1.ascent);
			currentLineDescent = Math.max(currentLineDescent,group1.descent);
			if(currentLineLeading == null) {
				currentLineLeading = group1.leading;
			} else {
				currentLineLeading = Math.max(currentLineLeading,group1.leading) | 0;
			}
			currentLineHeight = Math.max(currentLineHeight,group1.height);
			currentLineWidth = group1.offsetX - 2 + group1.width;
			if(currentLineWidth > this.textWidth) {
				this.textWidth = currentLineWidth;
			}
			currentTextHeight = group1.offsetY - 2 + group1.ascent + group1.descent;
			if(currentTextHeight > this.textHeight) {
				this.textHeight = currentTextHeight;
			}
		}
		if(this.textHeight == 0 && this.textField != null && this.textField.get_type() == 1) {
			var currentFormat = this.textField.__textFormat;
			var ascent;
			var descent;
			var font = openfl__$internal_text_TextEngine.getFontInstance(currentFormat);
			if(currentFormat.__ascent != null) {
				ascent = currentFormat.size * currentFormat.__ascent;
				descent = currentFormat.size * currentFormat.__descent;
			} else if(font != null && font.unitsPerEM != 0) {
				ascent = font.ascender / font.unitsPerEM * currentFormat.size;
				descent = Math.abs(font.descender / font.unitsPerEM * currentFormat.size);
			} else {
				ascent = currentFormat.size;
				descent = currentFormat.size * 0.185;
			}
			var leading = currentFormat.leading;
			var heightValue = ascent + descent + leading;
			currentLineAscent = ascent;
			currentLineDescent = descent;
			currentLineLeading = leading;
			currentTextHeight = ascent + descent;
			this.textHeight = currentTextHeight;
		}
		this.lineAscents.push(currentLineAscent);
		this.lineDescents.push(currentLineDescent);
		this.lineLeadings.push(currentLineLeading != null ? currentLineLeading : 0);
		this.lineHeights.push(currentLineHeight);
		this.lineWidths.push(currentLineWidth);
		if(this.numLines == 1) {
			if(currentLineLeading > 0) {
				this.textHeight += currentLineLeading;
			}
		}
		if(this.layoutGroups.get_length() > 0) {
			var group = this.layoutGroups.get(this.layoutGroups.get_length() - 1);
			if(group != null && group.startIndex == group.endIndex) {
				this.textHeight -= currentLineHeight;
			}
		}
		if(this.autoSize != 2) {
			switch(this.autoSize) {
			case 0:case 1:case 3:
				if(!this.wordWrap) {
					this.width = this.textWidth + 4;
				}
				this.height = this.textHeight + 4;
				this.bottomScrollV = this.numLines;
				break;
			default:
			}
		}
		if(this.textWidth > this.width - 4) {
			this.maxScrollH = this.textWidth - this.width + 4 | 0;
		} else {
			this.maxScrollH = 0;
		}
		if(this.scrollH > this.maxScrollH) {
			this.scrollH = this.maxScrollH;
		}
	}
	,getLayoutGroups: function() {
		var _gthis = this;
		this.layoutGroups.set_length(0);
		if(this.text == null || this.text == "") {
			return;
		}
		var rangeIndex = -1;
		var formatRange = null;
		var font = null;
		var currentFormat = openfl_text_TextField.__defaultTextFormat.clone();
		var leading = 0;
		var ascent = 0.0;
		var maxAscent = 0.0;
		var descent = 0.0;
		var align = 3;
		var blockIndent = 0;
		var bullet = false;
		var indent = 0;
		var leftMargin = 0;
		var rightMargin = 0;
		var tabStops = null;
		var layoutGroup = null;
		var positions = null;
		var widthValue = 0.0;
		var heightValue = 0;
		var maxHeightValue = 0;
		var previousSpaceIndex = -2;
		var previousBreakIndex = -1;
		var spaceIndex = this.text.indexOf(" ");
		var breakIndex = this.getLineBreakIndex();
		var offsetX = 2.0;
		var offsetY = 2.0;
		var textIndex = 0;
		var lineIndex = 0;
		var getPositions = function(text,startIndex,endIndex) {
			var positions = [];
			var letterSpacing = 0.0;
			if(formatRange.format.letterSpacing != null) {
				letterSpacing = formatRange.format.letterSpacing;
			}
			if(_gthis.__useIntAdvances == null) {
				var getPositions = new EReg("Trident/7.0","");
				_gthis.__useIntAdvances = getPositions.match($global.navigator.userAgent);
			}
			if(_gthis.__useIntAdvances) {
				var previousWidth = 0.0;
				var width;
				var _g = startIndex;
				var _g1 = endIndex;
				while(_g < _g1) {
					var i = _g++;
					width = openfl__$internal_text_TextEngine.__context.measureText(text.substring(startIndex,i + 1)).width;
					positions.push(width - previousWidth);
					previousWidth = width;
				}
			} else {
				var _g = startIndex;
				var _g1 = endIndex;
				while(_g < _g1) {
					var i = _g++;
					var advance;
					if(i < text.length - 1) {
						var nextWidth = openfl__$internal_text_TextEngine.__context.measureText(text.charAt(i + 1)).width;
						var twoWidths = openfl__$internal_text_TextEngine.__context.measureText(HxOverrides.substr(text,i,2)).width;
						advance = twoWidths - nextWidth;
					} else {
						advance = openfl__$internal_text_TextEngine.__context.measureText(text.charAt(i)).width;
					}
					positions.push(advance);
				}
			}
			return positions;
		};
		var getPositionsWidth = function(positions) {
			var width = 0.0;
			var _g = 0;
			while(_g < positions.length) {
				var position = positions[_g];
				++_g;
				width += position;
			}
			return width;
		};
		var getTextWidth = function(text) {
			return openfl__$internal_text_TextEngine.__context.measureText(text).width;
		};
		var nextLayoutGroup = function(startIndex,endIndex) {
			if(layoutGroup == null || layoutGroup.startIndex != layoutGroup.endIndex) {
				layoutGroup = new openfl__$internal_text_TextLayoutGroup(formatRange.format,startIndex,endIndex);
				_gthis.layoutGroups.push(layoutGroup);
			} else {
				layoutGroup.format = formatRange.format;
				layoutGroup.startIndex = startIndex;
				layoutGroup.endIndex = endIndex;
			}
		};
		var setLineMetrics = function() {
			if(currentFormat.__ascent != null) {
				ascent = currentFormat.size * currentFormat.__ascent;
				descent = currentFormat.size * currentFormat.__descent;
			} else if(font != null && font.unitsPerEM != 0) {
				ascent = font.ascender / font.unitsPerEM * currentFormat.size;
				descent = Math.abs(font.descender / font.unitsPerEM * currentFormat.size);
			} else {
				ascent = currentFormat.size;
				descent = currentFormat.size * 0.185;
			}
			leading = currentFormat.leading;
			heightValue = Math.ceil(ascent + descent + leading);
			if(heightValue > maxHeightValue) {
				maxHeightValue = heightValue;
			}
			if(ascent > maxAscent) {
				maxAscent = ascent;
			}
		};
		var setParagraphMetrics = function() {
			if(currentFormat.align != null) {
				align = currentFormat.align;
			}
			var setParagraphMetrics = currentFormat.blockIndent != null;
			var setParagraphMetrics = currentFormat.bullet != null;
			var setParagraphMetrics = currentFormat.indent != null;
			if(currentFormat.leftMargin != null) {
				leftMargin = currentFormat.leftMargin;
			}
			if(currentFormat.rightMargin != null) {
				rightMargin = currentFormat.rightMargin;
			}
			var setParagraphMetrics = currentFormat.tabStops != null;
		};
		var nextFormatRange = function() {
			if(rangeIndex < _gthis.textFormatRanges.get_length() - 1) {
				rangeIndex += 1;
				formatRange = _gthis.textFormatRanges.get(rangeIndex);
				currentFormat.__merge(formatRange.format);
				openfl__$internal_text_TextEngine.__context.font = openfl__$internal_text_TextEngine.getFont(currentFormat);
				font = openfl__$internal_text_TextEngine.getFontInstance(currentFormat);
				return true;
			}
			return false;
		};
		var setFormattedPositions = function(startIndex,endIndex) {
			if(endIndex <= formatRange.end) {
				positions = getPositions(_gthis.text,startIndex,endIndex);
				widthValue = getPositionsWidth(positions);
			} else {
				var tempIndex = startIndex;
				var tempRangeEnd = formatRange.end;
				var countRanges = 0;
				positions = [];
				widthValue = 0;
				while(true) {
					if(tempIndex != tempRangeEnd) {
						var tempPositions = getPositions(_gthis.text,tempIndex,tempRangeEnd);
						positions = positions.concat(tempPositions);
					}
					if(tempRangeEnd != endIndex) {
						if(!nextFormatRange()) {
							lime_utils_Log.warn("You found a bug in OpenFL's text code! Please save a copy of your project and contact Joshua Granick (@singmajesty) so we can fix this.",{ fileName : "openfl/_internal/text/TextEngine.hx", lineNumber : 1059, className : "openfl._internal.text.TextEngine", methodName : "getLayoutGroups"});
							break;
						}
						tempIndex = tempRangeEnd;
						tempRangeEnd = endIndex < formatRange.end ? endIndex : formatRange.end;
						++countRanges;
					} else {
						widthValue = getPositionsWidth(positions);
						break;
					}
				}
				rangeIndex -= countRanges + 1;
				nextFormatRange();
			}
		};
		var placeFormattedText = function(endIndex) {
			if(endIndex <= formatRange.end) {
				positions = getPositions(_gthis.text,textIndex,endIndex);
				widthValue = getPositionsWidth(positions);
				nextLayoutGroup(textIndex,endIndex);
				layoutGroup.positions = positions;
				layoutGroup.offsetX = offsetX;
				layoutGroup.ascent = ascent;
				layoutGroup.descent = descent;
				layoutGroup.leading = leading;
				layoutGroup.lineIndex = lineIndex;
				layoutGroup.offsetY = offsetY;
				layoutGroup.width = widthValue;
				layoutGroup.height = heightValue;
				offsetX += widthValue;
				if(endIndex == formatRange.end) {
					layoutGroup = null;
					nextFormatRange();
					setLineMetrics();
				}
			} else {
				while(true) {
					var tempRangeEnd = endIndex < formatRange.end ? endIndex : formatRange.end;
					if(textIndex != tempRangeEnd) {
						positions = getPositions(_gthis.text,textIndex,tempRangeEnd);
						widthValue = getPositionsWidth(positions);
						nextLayoutGroup(textIndex,tempRangeEnd);
						layoutGroup.positions = positions;
						layoutGroup.offsetX = offsetX;
						layoutGroup.ascent = ascent;
						layoutGroup.descent = descent;
						layoutGroup.leading = leading;
						layoutGroup.lineIndex = lineIndex;
						layoutGroup.offsetY = offsetY;
						layoutGroup.width = widthValue;
						layoutGroup.height = heightValue;
						offsetX += widthValue;
						textIndex = tempRangeEnd;
					}
					if(tempRangeEnd == formatRange.end) {
						layoutGroup = null;
					}
					if(tempRangeEnd == endIndex) {
						break;
					}
					if(!nextFormatRange()) {
						lime_utils_Log.warn("You found a bug in OpenFL's text code! Please save a copy of your project and contact Joshua Granick (@singmajesty) so we can fix this.",{ fileName : "openfl/_internal/text/TextEngine.hx", lineNumber : 1147, className : "openfl._internal.text.TextEngine", methodName : "getLayoutGroups"});
						break;
					}
					setLineMetrics();
				}
			}
			textIndex = endIndex;
		};
		var alignBaseline = function() {
			setLineMetrics();
			var i = _gthis.layoutGroups.get_length();
			while(--i > -1) {
				var lg = _gthis.layoutGroups.get(i);
				if(lg.lineIndex < lineIndex) {
					break;
				}
				if(lg.lineIndex > lineIndex) {
					continue;
				}
				lg.ascent = maxAscent;
				lg.height = maxHeightValue;
			}
			offsetY += maxHeightValue;
			maxAscent = 0.0;
			maxHeightValue = 0;
			lineIndex += 1;
			offsetX = 2;
		};
		var breakLongWords = function(endIndex) {
			var remainingPositions = positions;
			var i;
			var bufferCount;
			var placeIndex;
			var positionWidth;
			var currentPosition;
			var tempWidth = getPositionsWidth(remainingPositions);
			while(offsetX + tempWidth > _gthis.width - 2) {
				bufferCount = 0;
				i = bufferCount;
				positionWidth = 0.0;
				while(offsetX + positionWidth < _gthis.width - 2) {
					currentPosition = remainingPositions[i];
					if(currentPosition == 0.0) {
						++i;
						++bufferCount;
					} else {
						positionWidth += currentPosition;
						++i;
					}
				}
				if(positionWidth == 0.0) {
					break;
				} else if(i < 2 && positionWidth + offsetX > _gthis.width - 2) {
					if(textIndex + i - bufferCount == endIndex) {
						break;
					}
				} else {
					while(offsetX + positionWidth > _gthis.width - 2) {
						--i;
						if(i - bufferCount > 0) {
							setFormattedPositions(textIndex,textIndex + i - bufferCount);
							positionWidth = widthValue;
						} else {
							i = 1;
							bufferCount = 0;
							setFormattedPositions(textIndex,textIndex + 1);
							positionWidth = 0;
						}
					}
				}
				placeIndex = textIndex + i - bufferCount;
				placeFormattedText(placeIndex);
				alignBaseline();
				setFormattedPositions(placeIndex,endIndex);
				remainingPositions = positions;
				tempWidth = widthValue;
			}
		};
		var placeText = function(endIndex) {
			if(_gthis.width >= 4 && _gthis.wordWrap) {
				breakLongWords(endIndex);
			}
			placeFormattedText(endIndex);
		};
		nextFormatRange();
		setParagraphMetrics();
		setLineMetrics();
		var wrap;
		var maxLoops = this.text.length + 1;
		while(textIndex < maxLoops) if(breakIndex > -1 && (spaceIndex == -1 || breakIndex < spaceIndex)) {
			if(textIndex <= breakIndex) {
				setFormattedPositions(textIndex,breakIndex);
				placeText(breakIndex);
				layoutGroup = null;
			} else if(layoutGroup != null && layoutGroup.startIndex != layoutGroup.endIndex) {
				if(layoutGroup.endIndex == spaceIndex) {
					layoutGroup.width -= layoutGroup.positions[layoutGroup.positions.length - 1];
				}
				layoutGroup = null;
			}
			if(formatRange.end == breakIndex) {
				nextFormatRange();
				setLineMetrics();
			}
			alignBaseline();
			textIndex = breakIndex + 1;
			previousBreakIndex = breakIndex;
			breakIndex = this.getLineBreakIndex(textIndex);
			setParagraphMetrics();
		} else if(spaceIndex > -1) {
			if(layoutGroup != null && layoutGroup.startIndex != layoutGroup.endIndex) {
				layoutGroup = null;
			}
			wrap = false;
			while(textIndex < this.text.length) {
				var endIndex = -1;
				if(spaceIndex == -1) {
					endIndex = breakIndex;
				} else {
					endIndex = spaceIndex + 1;
					if(breakIndex > -1 && breakIndex < endIndex) {
						endIndex = breakIndex;
					}
				}
				if(endIndex == -1) {
					endIndex = this.text.length;
				}
				setFormattedPositions(textIndex,endIndex);
				if(align == 2) {
					if(positions.length > 0 && textIndex == previousSpaceIndex) {
						textIndex += 1;
						var spaceWidth = positions.shift();
						widthValue -= spaceWidth;
						offsetX += spaceWidth;
					}
					if(positions.length > 0 && endIndex == spaceIndex + 1) {
						--endIndex;
						var spaceWidth1 = positions.pop();
						widthValue -= spaceWidth1;
					}
				}
				if(this.wordWrap) {
					if(offsetX + widthValue > this.width - 2) {
						wrap = true;
						if(positions.length > 0 && endIndex == spaceIndex + 1) {
							var lastPosition = positions[positions.length - 1];
							var spaceWidth2 = lastPosition;
							if(offsetX + widthValue - spaceWidth2 <= this.width - 2) {
								wrap = false;
							}
						}
					}
				}
				if(wrap) {
					if(align != 2 && (layoutGroup != null || this.layoutGroups.get_length() > 0)) {
						var previous = layoutGroup;
						if(previous == null) {
							previous = this.layoutGroups.get(this.layoutGroups.get_length() - 1);
						}
						previous.width -= previous.positions[previous.positions.length - 1];
						previous.endIndex--;
					}
					var i = this.layoutGroups.get_length() - 1;
					var offsetCount = 0;
					while(true) {
						layoutGroup = this.layoutGroups.get(i);
						if(i > 0 && layoutGroup.startIndex > previousSpaceIndex) {
							++offsetCount;
						} else {
							break;
						}
						--i;
					}
					if(textIndex == previousSpaceIndex + 1) {
						alignBaseline();
					}
					offsetX = 2;
					if(offsetCount > 0) {
						var bumpX = this.layoutGroups.get(this.layoutGroups.get_length() - offsetCount).offsetX;
						var _g = this.layoutGroups.get_length() - offsetCount;
						var _g1 = this.layoutGroups.get_length();
						while(_g < _g1) {
							var i1 = _g++;
							layoutGroup = this.layoutGroups.get(i1);
							layoutGroup.offsetX -= bumpX;
							layoutGroup.offsetY = offsetY;
							layoutGroup.lineIndex = lineIndex;
							offsetX += layoutGroup.width;
						}
					}
					placeText(endIndex);
					wrap = false;
				} else if(layoutGroup != null && textIndex == spaceIndex) {
					if(align != 2) {
						layoutGroup.endIndex = spaceIndex;
						layoutGroup.positions = layoutGroup.positions.concat(positions);
						layoutGroup.width += widthValue;
					}
					offsetX += widthValue;
					textIndex = endIndex;
				} else if(layoutGroup == null || align == 2) {
					placeText(endIndex);
				} else {
					var tempRangeEnd = endIndex < formatRange.end ? endIndex : formatRange.end;
					if(tempRangeEnd < endIndex) {
						positions = getPositions(this.text,textIndex,tempRangeEnd);
						widthValue = getPositionsWidth(positions);
					}
					layoutGroup.endIndex = tempRangeEnd;
					layoutGroup.positions = layoutGroup.positions.concat(positions);
					layoutGroup.width += widthValue;
					offsetX += widthValue;
					if(tempRangeEnd == formatRange.end) {
						layoutGroup = null;
						nextFormatRange();
						setLineMetrics();
						textIndex = tempRangeEnd;
						if(tempRangeEnd != endIndex) {
							placeFormattedText(endIndex);
						}
					}
					if(breakIndex == endIndex) {
						++endIndex;
					}
					textIndex = endIndex;
				}
				var nextSpaceIndex = this.text.indexOf(" ",textIndex);
				if(breakIndex == previousSpaceIndex) {
					layoutGroup.endIndex = breakIndex;
					if(breakIndex - layoutGroup.startIndex - layoutGroup.positions.length < 0) {
						layoutGroup.positions.push(0.0);
					}
					textIndex = breakIndex + 1;
				}
				previousSpaceIndex = spaceIndex;
				spaceIndex = nextSpaceIndex;
				if(breakIndex > -1 && breakIndex <= textIndex && (spaceIndex > breakIndex || spaceIndex == -1) || textIndex > this.text.length) {
					break;
				}
			}
		} else {
			if(textIndex < this.text.length) {
				setFormattedPositions(textIndex,this.text.length);
				placeText(this.text.length);
				alignBaseline();
			}
			textIndex += 1;
		}
		if(previousBreakIndex == textIndex - 2 && previousBreakIndex > -1) {
			nextLayoutGroup(textIndex,textIndex);
			layoutGroup.positions = [];
			layoutGroup.ascent = ascent;
			layoutGroup.descent = descent;
			layoutGroup.leading = leading;
			layoutGroup.lineIndex = lineIndex;
			layoutGroup.offsetX = 2;
			layoutGroup.offsetY = offsetY;
			layoutGroup.width = 0;
			layoutGroup.height = heightValue;
		}
	}
	,restrictText: function(value) {
		if(value == null) {
			return value;
		}
		if(this.__restrictRegexp != null) {
			value = this.__restrictRegexp.split(value).join("");
		}
		return value;
	}
	,setTextAlignment: function() {
		var lineIndex = -1;
		var offsetX = 0.0;
		var totalWidth = this.width - 4;
		var group;
		var lineLength;
		var lineMeasurementsDirty = false;
		var _g = 0;
		var _g1 = this.layoutGroups.get_length();
		while(_g < _g1) {
			var i = _g++;
			group = this.layoutGroups.get(i);
			if(group.lineIndex != lineIndex) {
				lineIndex = group.lineIndex;
				totalWidth = this.width - 4 - group.format.rightMargin;
				switch(group.format.align) {
				case 0:
					if(this.lineWidths.get(lineIndex) < totalWidth) {
						offsetX = Math.round((totalWidth - this.lineWidths.get(lineIndex)) / 2);
					} else {
						offsetX = 0;
					}
					break;
				case 2:
					if(this.lineWidths.get(lineIndex) < totalWidth) {
						lineLength = 1;
						var _g2 = i + 1;
						var _g3 = this.layoutGroups.get_length();
						while(_g2 < _g3) {
							var j = _g2++;
							if(this.layoutGroups.get(j).lineIndex == lineIndex) {
								if(j == 0 || HxOverrides.cca(this.text,this.layoutGroups.get(j).startIndex - 1) == 32) {
									++lineLength;
								}
							} else {
								break;
							}
						}
						if(lineLength > 1) {
							group = this.layoutGroups.get(i + lineLength - 1);
							var endChar = HxOverrides.cca(this.text,group.endIndex);
							if(group.endIndex < this.text.length && endChar != 10 && endChar != 13) {
								offsetX = (totalWidth - this.lineWidths.get(lineIndex)) / (lineLength - 1);
								lineMeasurementsDirty = true;
								var j1 = 1;
								while(true) {
									this.layoutGroups.get(i + j1).offsetX += offsetX * j1;
									if(!(++j1 < lineLength)) {
										break;
									}
								}
							}
						}
					}
					offsetX = 0;
					break;
				case 4:
					if(this.lineWidths.get(lineIndex) < totalWidth) {
						offsetX = Math.round(totalWidth - this.lineWidths.get(lineIndex));
					} else {
						offsetX = 0;
					}
					break;
				default:
					offsetX = 0;
				}
			}
			if(offsetX > 0) {
				group.offsetX += offsetX;
			}
		}
		if(lineMeasurementsDirty) {
			this.getLineMeasurements();
		}
	}
	,trimText: function(value) {
		if(value == null) {
			return value;
		}
		if(this.maxChars > 0 && value.length > this.maxChars) {
			value = HxOverrides.substr(value,0,this.maxChars);
		}
		return value;
	}
	,update: function() {
		if(this.text == null || this.textFormatRanges.get_length() == 0) {
			this.lineAscents.set_length(0);
			this.lineBreaks.set_length(0);
			this.lineDescents.set_length(0);
			this.lineLeadings.set_length(0);
			this.lineHeights.set_length(0);
			this.lineWidths.set_length(0);
			this.layoutGroups.set_length(0);
			this.textWidth = 0;
			this.textHeight = 0;
			this.numLines = 1;
			this.maxScrollH = 0;
			this.maxScrollV = 1;
			this.bottomScrollV = 1;
		} else {
			this.getLayoutGroups();
			this.getLineMeasurements();
			this.setTextAlignment();
		}
		this.getBounds();
	}
	,get_bottomScrollV: function() {
		if(this.numLines == 1 || this.lineHeights == null) {
			return 1;
		} else {
			var tempHeight = 0.0;
			var ret = this.lineHeights.get_length();
			var _g = ret - 1;
			var _g1 = this.lineHeights.get_length();
			while(_g < _g1) {
				var i = _g++;
				if(tempHeight + this.lineHeights.get(i) <= this.height - 4) {
					tempHeight += this.lineHeights.get(i);
				} else {
					ret = i;
					break;
				}
			}
			if(ret < 1) {
				return 1;
			}
			return ret;
		}
	}
	,get_maxScrollV: function() {
		if(this.numLines == 1 || this.lineHeights == null) {
			return 1;
		} else {
			var i = this.numLines - 1;
			var tempHeight = 0.0;
			if(HxOverrides.cca(this.text,this.text.length - 1) == 10) {
				--i;
			}
			var j = i;
			while(i >= 0) if(tempHeight + this.lineHeights.get(i) <= this.height - 4) {
				tempHeight += this.lineHeights.get(i);
				--i;
			} else {
				break;
			}
			if(i == j) {
				i = this.numLines;
			} else {
				i += 2;
			}
			if(i < 1) {
				return 1;
			}
			return i;
		}
	}
	,set_restrict: function(value) {
		if(this.restrict == value) {
			return this.restrict;
		}
		this.restrict = value;
		if(this.restrict == null || this.restrict.length == 0) {
			this.__restrictRegexp = null;
		} else {
			this.__restrictRegexp = this.createRestrictRegexp(value);
		}
		return this.restrict;
	}
	,get_scrollV: function() {
		if(this.numLines == 1 || this.lineHeights == null) {
			return 1;
		}
		var max = this.get_maxScrollV();
		if(this.scrollV > max) {
			return max;
		}
		return this.scrollV;
	}
	,set_scrollV: function(value) {
		if(value < 1) {
			value = 1;
		}
		return this.scrollV = value;
	}
	,set_text: function(value) {
		return this.text = value;
	}
	,__class__: openfl__$internal_text_TextEngine
	,__properties__: {set_text:"set_text",set_scrollV:"set_scrollV",get_scrollV:"get_scrollV",set_restrict:"set_restrict",get_maxScrollV:"get_maxScrollV",get_bottomScrollV:"get_bottomScrollV"}
};
var openfl__$internal_text_TextFormatRange = function(format,start,end) {
	this.format = format;
	this.start = start;
	this.end = end;
};
$hxClasses["openfl._internal.text.TextFormatRange"] = openfl__$internal_text_TextFormatRange;
openfl__$internal_text_TextFormatRange.__name__ = "openfl._internal.text.TextFormatRange";
openfl__$internal_text_TextFormatRange.prototype = {
	end: null
	,format: null
	,start: null
	,__class__: openfl__$internal_text_TextFormatRange
};
var openfl__$internal_text_TextLayout = function(text,font,size,direction,script,language) {
	if(language == null) {
		language = "en";
	}
	if(script == null) {
		script = "Zyyy";
	}
	if(direction == null) {
		direction = 4;
	}
	if(size == null) {
		size = 12;
	}
	if(text == null) {
		text = "";
	}
	this.letterSpacing = 0;
	this.set_text(text);
	this.set_font(font);
	this.set_size(size);
	this.__direction = direction;
	this.__script = script;
	this.__language = language;
	this.positions = [];
	this.__dirty = true;
	this.__create(this.__direction,this.__script,this.__language);
};
$hxClasses["openfl._internal.text.TextLayout"] = openfl__$internal_text_TextLayout;
openfl__$internal_text_TextLayout.__name__ = "openfl._internal.text.TextLayout";
openfl__$internal_text_TextLayout.prototype = {
	autoHint: null
	,font: null
	,glyphs: null
	,letterSpacing: null
	,positions: null
	,size: null
	,text: null
	,__buffer: null
	,__direction: null
	,__dirty: null
	,__handle: null
	,__language: null
	,__script: null
	,__font: null
	,__hbBuffer: null
	,__hbFont: null
	,__create: function(direction,script,language) {
		if(language.length != 4) {
			return;
		}
		this.__hbBuffer = lime_text_harfbuzz_HBBuffer._new();
		switch(direction) {
		case 4:
			break;
		case 5:
			break;
		case 6:
			break;
		case 7:
			break;
		default:
		}
		var this1 = this.__hbBuffer;
		var value = lime_text_harfbuzz_HBLanguage._new(language);
	}
	,__position: function() {
		this.positions = [];
	}
	,get_positions: function() {
		if(this.__dirty) {
			this.__dirty = false;
			this.__position();
		}
		return this.positions;
	}
	,get_direction: function() {
		return this.__direction;
	}
	,set_direction: function(value) {
		if(value == this.__direction) {
			return value;
		}
		this.__direction = value;
		this.__dirty = true;
		return value;
	}
	,set_font: function(value) {
		if(value == this.font) {
			return value;
		}
		this.font = value;
		this.__dirty = true;
		return value;
	}
	,get_glyphs: function() {
		var glyphs = [];
		var _g = 0;
		var _g1 = this.get_positions();
		while(_g < _g1.length) {
			var position = _g1[_g];
			++_g;
			glyphs.push(position.glyph);
		}
		return glyphs;
	}
	,get_language: function() {
		return this.__language;
	}
	,set_language: function(value) {
		if(value == this.__language) {
			return value;
		}
		this.__language = value;
		this.__dirty = true;
		return value;
	}
	,get_script: function() {
		return this.__script;
	}
	,set_script: function(value) {
		if(value == this.__script) {
			return value;
		}
		this.__script = value;
		this.__dirty = true;
		return value;
	}
	,set_size: function(value) {
		if(value == this.size) {
			return value;
		}
		this.size = value;
		this.__dirty = true;
		return value;
	}
	,set_text: function(value) {
		if(value == this.text) {
			return value;
		}
		this.text = value;
		this.__dirty = true;
		return value;
	}
	,__class__: openfl__$internal_text_TextLayout
	,__properties__: {set_text:"set_text",set_size:"set_size",set_script:"set_script",get_script:"get_script",get_positions:"get_positions",set_language:"set_language",get_language:"get_language",get_glyphs:"get_glyphs",set_font:"set_font",set_direction:"set_direction",get_direction:"get_direction"}
};
var openfl__$internal_text_TextDirection = {};
openfl__$internal_text_TextDirection.__properties__ = {get_vertical:"get_vertical",get_horizontal:"get_horizontal",get_forward:"get_forward",get_backward:"get_backward"};
openfl__$internal_text_TextDirection.reverse = function(this1) {
	this1 ^= 1;
};
openfl__$internal_text_TextDirection.toString = function(this1) {
	switch(this1) {
	case 4:
		return "leftToRight";
	case 5:
		return "rightToLeft";
	case 6:
		return "topToBottom";
	case 7:
		return "bottomToTop";
	default:
		return "";
	}
};
openfl__$internal_text_TextDirection.toHBDirection = function(this1) {
	switch(this1) {
	case 4:
		return 4;
	case 5:
		return 5;
	case 6:
		return 6;
	case 7:
		return 7;
	default:
		return 0;
	}
};
openfl__$internal_text_TextDirection.get_backward = function(this1) {
	return (this1 & -3) == 5;
};
openfl__$internal_text_TextDirection.get_forward = function(this1) {
	return (this1 & -3) == 4;
};
openfl__$internal_text_TextDirection.get_horizontal = function(this1) {
	return (this1 & -2) == 4;
};
openfl__$internal_text_TextDirection.get_vertical = function(this1) {
	return (this1 & -2) == 6;
};
var openfl__$internal_text_TextScript = {};
openfl__$internal_text_TextScript.__properties__ = {get_rightToLeft:"get_rightToLeft"};
openfl__$internal_text_TextScript.toHBScript = function(this1) {
	return 1517910393;
};
openfl__$internal_text_TextScript.get_rightToLeft = function(this1) {
	switch(this1) {
	case "Arab":case "Armi":case "Avst":case "Cprt":case "Hebr":case "Khar":case "Lydi":case "Mand":case "Nkoo":case "Orkh":case "Phli":case "Phlp":case "Phnx":case "Samr":case "Sarb":case "Syrc":case "Thaa":
		return true;
	default:
		return false;
	}
};
var openfl__$internal_text_TextLayoutGroup = function(format,startIndex,endIndex) {
	this.format = format;
	this.startIndex = startIndex;
	this.endIndex = endIndex;
};
$hxClasses["openfl._internal.text.TextLayoutGroup"] = openfl__$internal_text_TextLayoutGroup;
openfl__$internal_text_TextLayoutGroup.__name__ = "openfl._internal.text.TextLayoutGroup";
openfl__$internal_text_TextLayoutGroup.prototype = {
	ascent: null
	,descent: null
	,endIndex: null
	,format: null
	,height: null
	,leading: null
	,lineIndex: null
	,offsetX: null
	,offsetY: null
	,positions: null
	,startIndex: null
	,width: null
	,getAdvance: function(index) {
		return this.positions[index];
	}
	,__class__: openfl__$internal_text_TextLayoutGroup
};
var openfl__$internal_utils_AbstractNoise = function(seed,octaves,channels,grayScale,falloff,stitch,stitch_threshold) {
	if(stitch_threshold == null) {
		stitch_threshold = 0.05;
	}
	if(stitch == null) {
		stitch = false;
	}
	this.stitch = stitch;
	this.stitch_threshold = stitch_threshold;
	this.octaves = octaves;
	this.channels = channels;
	this.grayscale = grayScale;
	this.calculateOctaves(falloff);
};
$hxClasses["openfl._internal.utils.AbstractNoise"] = openfl__$internal_utils_AbstractNoise;
openfl__$internal_utils_AbstractNoise.__name__ = "openfl._internal.utils.AbstractNoise";
openfl__$internal_utils_AbstractNoise.prototype = {
	octaves: null
	,stitch: null
	,stitch_threshold: null
	,channels: null
	,grayscale: null
	,octaves_frequencies: null
	,octaves_persistences: null
	,persistence_max: null
	,fill: function(bitmap,_scale_x,_scale_y,_scale_z) {
	}
	,stitching: function(bitmap,color,px,py,stitch_w,stitch_h,width,height) {
		var r = color >> 16 & 255;
		var g = color >> 8 & 255;
		var b = color & 255;
		if(width - stitch_w < px) {
			var dest = bitmap.getPixel32(width - px,py);
			var dest_r = dest >> 16 & 255;
			var dest_g = dest >> 8 & 255;
			var dest_b = dest & 255;
			var u = (width - px) / stitch_w;
			var uu = u * u;
			r = this.mixI(dest_r,r,u);
			g = this.mixI(dest_g,g,u);
			b = this.mixI(dest_b,b,u);
		}
		if(height - stitch_h < py) {
			var dest = bitmap.getPixel32(px,height - py);
			var dest_r = dest >> 16 & 255;
			var dest_g = dest >> 8 & 255;
			var dest_b = dest & 255;
			var u = (height - py) / stitch_h;
			var uu = u * u;
			r = this.mixI(dest_r,r,u);
			g = this.mixI(dest_g,g,u);
			b = this.mixI(dest_b,b,u);
		}
		return -16777216 | r << 16 | g << 8 | b;
	}
	,color: function(r_noise,g_noise,b_noise) {
		var color_r = 0;
		var color_g = 0;
		var color_b = 0;
		if(null != r_noise) {
			color_r = this.noiseToColor(r_noise);
		}
		if(null != g_noise) {
			color_g = this.noiseToColor(g_noise);
		}
		if(null != b_noise) {
			color_b = this.noiseToColor(b_noise);
		}
		return -16777216 | color_r << 16 | color_g << 8 | color_b;
	}
	,noiseToColor: function(noise) {
		return (noise * this.persistence_max + 1.0) * 128 | 0;
	}
	,fade: function(t) {
		return t * t * t * (t * (t * 6.0 - 15.0) + 10.0);
	}
	,mixI: function(x,y,t) {
		return (1.0 - t) * x + t * y | 0;
	}
	,mix: function(x,y,t) {
		return (1.0 - t) * x + t * y;
	}
	,fastfloor: function(x) {
		if(x > 0) {
			return x | 0;
		} else {
			return x - 1 | 0;
		}
	}
	,dot2d: function(grad,x,y) {
		return grad[0] * x + grad[1] * y;
	}
	,dot: function(grad,x,y,z) {
		return grad[0] * x + grad[1] * y + grad[2] * z;
	}
	,calculateOctaves: function(fPersistence) {
		var fFreq;
		var fPers;
		this.octaves_frequencies = [];
		this.octaves_persistences = [];
		this.persistence_max = 0;
		var _g = 0;
		var _g1 = this.octaves;
		while(_g < _g1) {
			var i = _g++;
			fFreq = Math.pow(2.0,i);
			fPers = Math.pow(fPersistence,i);
			this.persistence_max += fPers;
			this.octaves_frequencies.push(fFreq);
			this.octaves_persistences.push(fPers);
		}
		this.persistence_max = 1.0 / this.persistence_max;
	}
	,__class__: openfl__$internal_utils_AbstractNoise
};
var openfl__$internal_utils_PerlinNoise = function(seed,octaves,channels,grayScale,falloff,stitch,stitch_threshold) {
	if(stitch_threshold == null) {
		stitch_threshold = 0.05;
	}
	if(stitch == null) {
		stitch = false;
	}
	openfl__$internal_utils_AbstractNoise.call(this,seed,octaves,channels,grayScale,falloff,stitch,stitch_threshold);
	this.p_perm = [];
	var _g = 0;
	while(_g < 512) {
		var i = _g++;
		this.p_perm[i] = openfl__$internal_utils_PerlinNoise.P[i & 255];
	}
	this.base_factor = 0.03125;
	this.setSeed(seed);
};
$hxClasses["openfl._internal.utils.PerlinNoise"] = openfl__$internal_utils_PerlinNoise;
openfl__$internal_utils_PerlinNoise.__name__ = "openfl._internal.utils.PerlinNoise";
openfl__$internal_utils_PerlinNoise.__super__ = openfl__$internal_utils_AbstractNoise;
openfl__$internal_utils_PerlinNoise.prototype = $extend(openfl__$internal_utils_AbstractNoise.prototype,{
	p_perm: null
	,x_offset: null
	,y_offset: null
	,z_offset: null
	,base_factor: null
	,fill: function(bitmap,_scale_x,_scale_y,_scale_z) {
		var width = bitmap.width;
		var height = bitmap.height;
		var octaves = this.octaves;
		var octaves_frequencies = this.octaves_frequencies;
		var octaves_persistences = this.octaves_persistences;
		var isRed = (1 & this.channels) == 1;
		var isGreen = (2 & this.channels) == 2;
		var isBlue = (4 & this.channels) == 4;
		var channels = 0;
		if(isRed) {
			++channels;
		}
		if(isGreen) {
			++channels;
		}
		if(isBlue) {
			++channels;
		}
		var grayscale = this.grayscale;
		var stitch_w = this.stitch_threshold * width | 0;
		var stitch_h = this.stitch_threshold * height | 0;
		var base_x = _scale_x * this.base_factor + this.x_offset;
		_scale_y = _scale_y * this.base_factor + this.y_offset;
		_scale_z = _scale_z * this.base_factor + this.z_offset;
		var g_offset = 1.0;
		var b_offset = 2.0;
		var _g = 0;
		var _g1 = height;
		while(_g < _g1) {
			var py = _g++;
			_scale_x = base_x;
			var _g2 = 0;
			var _g3 = width;
			while(_g2 < _g3) {
				var px = _g2++;
				var color1 = 0.0;
				var color2 = 0.0;
				var color3 = 0.0;
				var _g4 = 0;
				var _g5 = octaves;
				while(_g4 < _g5) {
					var i = _g4++;
					var frequency = octaves_frequencies[i];
					var persistence = octaves_persistences[i];
					color1 += this.noise(_scale_x * frequency,_scale_y * frequency,_scale_z * frequency) * persistence;
					if(!grayscale) {
						if(1 < channels) {
							color2 += this.noise((_scale_x + g_offset) * frequency,(_scale_y + g_offset) * frequency,_scale_z * frequency) * persistence;
						}
						if(2 < channels) {
							color3 += this.noise((_scale_x + b_offset) * frequency,(_scale_y + b_offset) * frequency,_scale_z * frequency) * persistence;
						}
					}
				}
				var color = 0;
				if(grayscale) {
					color = this.color(color1,color1,color1);
				} else if(isRed && isGreen && isBlue) {
					color = this.color(color1,color2,color3);
				} else if(isRed && isGreen) {
					color = this.color(color1,color2,null);
				} else if(isRed && isBlue) {
					color = this.color(color1,null,color2);
				} else if(isGreen && isBlue) {
					color = this.color(null,color1,color2);
				} else if(isRed) {
					color = this.color(color1,null,null);
				} else if(isGreen) {
					color = this.color(null,color1,null);
				} else if(isBlue) {
					color = this.color(null,null,color1);
				}
				if(this.stitch) {
					color = this.stitching(bitmap,color,px,py,stitch_w,stitch_h,width,height);
				}
				bitmap.setPixel32(px,py,color);
				_scale_x += this.base_factor;
			}
			_scale_y += this.base_factor;
		}
	}
	,noise: function(x,y,z) {
		var xf = x - x % 1;
		var yf = y - y % 1;
		var zf = z - z % 1;
		x -= xf;
		y -= yf;
		z -= zf;
		var X = (xf | 0) & 255;
		var Y = (yf | 0) & 255;
		var Z = (zf | 0) & 255;
		var u = this.fade(x);
		var v = this.fade(y);
		var w = this.fade(z);
		var A = this.p_perm[X] + Y;
		var AA = this.p_perm[A] + Z;
		var AB = this.p_perm[A + 1] + Z;
		var B = this.p_perm[X + 1] + Y;
		var BA = this.p_perm[B] + Z;
		var BB = this.p_perm[B + 1] + Z;
		var x1 = x - 1;
		var y1 = y - 1;
		var z1 = z - 1;
		var hash = this.p_perm[BB + 1] & 15;
		var g1 = ((hash & 1) == 0 ? hash < 8 ? x1 : y1 : hash < 8 ? -x1 : -y1) + ((hash & 2) == 0 ? hash < 4 ? y1 : hash == 12 ? x1 : z1 : hash < 4 ? -y1 : hash == 14 ? -x1 : -z1);
		hash = this.p_perm[AB + 1] & 15;
		var g2 = ((hash & 1) == 0 ? hash < 8 ? x : y1 : hash < 8 ? -x : -y1) + ((hash & 2) == 0 ? hash < 4 ? y1 : hash == 12 ? x : z1 : hash < 4 ? -y1 : hash == 14 ? -x : -z1);
		hash = this.p_perm[BA + 1] & 15;
		var g3 = ((hash & 1) == 0 ? hash < 8 ? x1 : y : hash < 8 ? -x1 : -y) + ((hash & 2) == 0 ? hash < 4 ? y : hash == 12 ? x1 : z1 : hash < 4 ? -y : hash == 14 ? -x1 : -z1);
		hash = this.p_perm[AA + 1] & 15;
		var g4 = ((hash & 1) == 0 ? hash < 8 ? x : y : hash < 8 ? -x : -y) + ((hash & 2) == 0 ? hash < 4 ? y : hash == 12 ? x : z1 : hash < 4 ? -y : hash == 14 ? -x : -z1);
		hash = this.p_perm[BB] & 15;
		var g5 = ((hash & 1) == 0 ? hash < 8 ? x1 : y1 : hash < 8 ? -x1 : -y1) + ((hash & 2) == 0 ? hash < 4 ? y1 : hash == 12 ? x1 : z : hash < 4 ? -y1 : hash == 14 ? -x1 : -z);
		hash = this.p_perm[AB] & 15;
		var g6 = ((hash & 1) == 0 ? hash < 8 ? x : y1 : hash < 8 ? -x : -y1) + ((hash & 2) == 0 ? hash < 4 ? y1 : hash == 12 ? x : z : hash < 4 ? -y1 : hash == 14 ? -x : -z);
		hash = this.p_perm[BA] & 15;
		var g7 = ((hash & 1) == 0 ? hash < 8 ? x1 : y : hash < 8 ? -x1 : -y) + ((hash & 2) == 0 ? hash < 4 ? y : hash == 12 ? x1 : z : hash < 4 ? -y : hash == 14 ? -x1 : -z);
		hash = this.p_perm[AA] & 15;
		var g8 = ((hash & 1) == 0 ? hash < 8 ? x : y : hash < 8 ? -x : -y) + ((hash & 2) == 0 ? hash < 4 ? y : hash == 12 ? x : z : hash < 4 ? -y : hash == 14 ? -x : -z);
		g2 += u * (g1 - g2);
		g4 += u * (g3 - g4);
		g6 += u * (g5 - g6);
		g8 += u * (g7 - g8);
		g4 += v * (g2 - g4);
		g8 += v * (g6 - g8);
		return g8 + w * (g4 - g8);
	}
	,setSeed: function(seed) {
		seed = seed * 16807.0 % 2147483647 | 0;
		this.x_offset = seed;
		seed = seed * 16807.0 % 2147483647 | 0;
		this.y_offset = seed;
		seed = seed * 16807.0 % 2147483647 | 0;
		this.z_offset = seed;
	}
	,__class__: openfl__$internal_utils_PerlinNoise
});
var openfl__$internal_utils_TouchData = function() {
	this.rollOutStack = [];
};
$hxClasses["openfl._internal.utils.TouchData"] = openfl__$internal_utils_TouchData;
openfl__$internal_utils_TouchData.__name__ = "openfl._internal.utils.TouchData";
openfl__$internal_utils_TouchData.prototype = {
	rollOutStack: null
	,touch: null
	,touchDownTarget: null
	,touchOverTarget: null
	,reset: function() {
		this.touch = null;
		this.touchDownTarget = null;
		this.touchOverTarget = null;
		this.rollOutStack.splice(0,this.rollOutStack.length);
	}
	,__class__: openfl__$internal_utils_TouchData
};
var openfl_desktop_Clipboard = function() {
};
$hxClasses["openfl.desktop.Clipboard"] = openfl_desktop_Clipboard;
openfl_desktop_Clipboard.__name__ = "openfl.desktop.Clipboard";
openfl_desktop_Clipboard.__properties__ = {get_generalClipboard:"get_generalClipboard"};
openfl_desktop_Clipboard.get_generalClipboard = function() {
	if(openfl_desktop_Clipboard.__generalClipboard == null) {
		openfl_desktop_Clipboard.__generalClipboard = new openfl_desktop_Clipboard();
		openfl_desktop_Clipboard.__generalClipboard.__systemClipboard = true;
	}
	return openfl_desktop_Clipboard.__generalClipboard;
};
openfl_desktop_Clipboard.prototype = {
	__htmlText: null
	,__richText: null
	,__systemClipboard: null
	,__text: null
	,clear: function() {
		if(this.__systemClipboard) {
			lime_system_Clipboard.set_text(null);
			return;
		}
		this.__htmlText = null;
		this.__richText = null;
		this.__text = null;
	}
	,clearData: function(format) {
		if(this.__systemClipboard) {
			switch(format) {
			case 0:case 1:case 2:
				lime_system_Clipboard.set_text(null);
				break;
			default:
			}
			return;
		}
		switch(format) {
		case 0:
			this.__htmlText = null;
			break;
		case 1:
			this.__richText = null;
			break;
		case 2:
			this.__text = null;
			break;
		default:
		}
	}
	,getData: function(format,transferMode) {
		if(transferMode == null) {
			transferMode = 3;
		}
		if(this.__systemClipboard) {
			switch(format) {
			case 0:case 1:case 2:
				return lime_system_Clipboard.get_text();
			default:
				return null;
			}
		}
		switch(format) {
		case 0:
			return this.__htmlText;
		case 1:
			return this.__richText;
		case 2:
			return this.__text;
		default:
			return null;
		}
	}
	,hasFormat: function(format) {
		if(this.__systemClipboard) {
			switch(format) {
			case 0:case 1:case 2:
				return lime_system_Clipboard.get_text() != null;
			default:
				return false;
			}
		}
		switch(format) {
		case 0:
			return this.__htmlText != null;
		case 1:
			return this.__richText != null;
		case 2:
			return this.__text != null;
		default:
			return false;
		}
	}
	,setData: function(format,data,serializable) {
		if(serializable == null) {
			serializable = true;
		}
		if(this.__systemClipboard) {
			switch(format) {
			case 0:case 1:case 2:
				lime_system_Clipboard.set_text(Std.string(data));
				return true;
			default:
				return false;
			}
		}
		switch(format) {
		case 0:
			this.__htmlText = Std.string(data);
			return true;
		case 1:
			this.__richText = Std.string(data);
			return true;
		case 2:
			this.__text = Std.string(data);
			return true;
		default:
			return false;
		}
	}
	,setDataHandler: function(format,handler,serializable) {
		if(serializable == null) {
			serializable = true;
		}
		openfl__$internal_Lib.notImplemented({ fileName : "openfl/desktop/Clipboard.hx", lineNumber : 509, className : "openfl.desktop.Clipboard", methodName : "setDataHandler"});
		return false;
	}
	,get_formats: function() {
		var formats = [];
		if(this.hasFormat(0)) {
			formats.push(0);
		}
		if(this.hasFormat(1)) {
			formats.push(1);
		}
		if(this.hasFormat(2)) {
			formats.push(2);
		}
		return formats;
	}
	,__class__: openfl_desktop_Clipboard
	,__properties__: {get_formats:"get_formats"}
};
var openfl_desktop_ClipboardFormats = {};
openfl_desktop_ClipboardFormats.fromString = function(value) {
	switch(value) {
	case "air:html":
		return 0;
	case "air:rtf":
		return 1;
	case "air:text":
		return 2;
	default:
		return null;
	}
};
openfl_desktop_ClipboardFormats.toString = function(this1) {
	switch(this1) {
	case 0:
		return "air:html";
	case 1:
		return "air:rtf";
	case 2:
		return "air:text";
	default:
		return null;
	}
};
var openfl_desktop_ClipboardTransferMode = {};
openfl_desktop_ClipboardTransferMode.fromString = function(value) {
	switch(value) {
	case "cloneOnly":
		return 0;
	case "clonePreferred":
		return 1;
	case "originalOnly":
		return 2;
	case "originalPreferred":
		return 3;
	default:
		return null;
	}
};
openfl_desktop_ClipboardTransferMode.toString = function(this1) {
	switch(this1) {
	case 0:
		return "cloneOnly";
	case 1:
		return "clonePreferred";
	case 2:
		return "originalOnly";
	case 3:
		return "originalPreferred";
	default:
		return null;
	}
};
var openfl_display_Application = function() {
	lime_app_Application.call(this);
	if(openfl__$internal_Lib.application == null) {
		openfl__$internal_Lib.application = this;
	}
	if(openfl__$internal_Lib.current == null) {
		openfl__$internal_Lib.current = new openfl_display_MovieClip();
	}
	openfl__$internal_Lib.current.__loaderInfo = openfl_display_LoaderInfo.create(null);
	openfl__$internal_Lib.current.__loaderInfo.content = openfl__$internal_Lib.current;
};
$hxClasses["openfl.display.Application"] = openfl_display_Application;
openfl_display_Application.__name__ = "openfl.display.Application";
openfl_display_Application.__super__ = lime_app_Application;
openfl_display_Application.prototype = $extend(lime_app_Application.prototype,{
	createWindow: function(attributes) {
		var $window = new openfl_display_Window(this,attributes);
		this.__windows.push($window);
		this.__windowByID.h[$window.id] = $window;
		var _g = $bind(this,this.__onWindowClose);
		var window1 = $window;
		var tmp = function() {
			_g(window1);
		};
		$window.onClose.add(tmp,false,-10000);
		if(this.__window == null) {
			this.__window = $window;
			$window.onActivate.add($bind(this,this.onWindowActivate));
			$window.onRenderContextLost.add($bind(this,this.onRenderContextLost));
			$window.onRenderContextRestored.add($bind(this,this.onRenderContextRestored));
			$window.onDeactivate.add($bind(this,this.onWindowDeactivate));
			$window.onDropFile.add($bind(this,this.onWindowDropFile));
			$window.onEnter.add($bind(this,this.onWindowEnter));
			$window.onExpose.add($bind(this,this.onWindowExpose));
			$window.onFocusIn.add($bind(this,this.onWindowFocusIn));
			$window.onFocusOut.add($bind(this,this.onWindowFocusOut));
			$window.onFullscreen.add($bind(this,this.onWindowFullscreen));
			$window.onKeyDown.add($bind(this,this.onKeyDown));
			$window.onKeyUp.add($bind(this,this.onKeyUp));
			$window.onLeave.add($bind(this,this.onWindowLeave));
			$window.onMinimize.add($bind(this,this.onWindowMinimize));
			$window.onMouseDown.add($bind(this,this.onMouseDown));
			$window.onMouseMove.add($bind(this,this.onMouseMove));
			$window.onMouseMoveRelative.add($bind(this,this.onMouseMoveRelative));
			$window.onMouseUp.add($bind(this,this.onMouseUp));
			$window.onMouseWheel.add($bind(this,this.onMouseWheel));
			$window.onMove.add($bind(this,this.onWindowMove));
			$window.onRender.add($bind(this,this.render));
			$window.onResize.add($bind(this,this.onWindowResize));
			$window.onRestore.add($bind(this,this.onWindowRestore));
			$window.onTextEdit.add($bind(this,this.onTextEdit));
			$window.onTextInput.add($bind(this,this.onTextInput));
			this.onWindowCreate();
		}
		this.onCreateWindow.dispatch($window);
		return $window;
	}
	,__class__: openfl_display_Application
});
var openfl_display_BlendMode = {};
openfl_display_BlendMode.fromString = function(value) {
	switch(value) {
	case "add":
		return 0;
	case "alpha":
		return 1;
	case "darken":
		return 2;
	case "difference":
		return 3;
	case "erase":
		return 4;
	case "hardlight":
		return 5;
	case "invert":
		return 6;
	case "layer":
		return 7;
	case "lighten":
		return 8;
	case "multiply":
		return 9;
	case "normal":
		return 10;
	case "overlay":
		return 11;
	case "screen":
		return 12;
	case "shader":
		return 13;
	case "subtract":
		return 14;
	default:
		return null;
	}
};
openfl_display_BlendMode.toString = function(this1) {
	switch(this1) {
	case 0:
		return "add";
	case 1:
		return "alpha";
	case 2:
		return "darken";
	case 3:
		return "difference";
	case 4:
		return "erase";
	case 5:
		return "hardlight";
	case 6:
		return "invert";
	case 7:
		return "layer";
	case 8:
		return "lighten";
	case 9:
		return "multiply";
	case 10:
		return "normal";
	case 11:
		return "overlay";
	case 12:
		return "screen";
	case 13:
		return "shader";
	case 14:
		return "subtract";
	default:
		return null;
	}
};
var openfl_display_DisplayObjectRenderer = function() {
	openfl_events_EventDispatcher.call(this);
	this.__allowSmoothing = true;
	this.__tempColorTransform = new openfl_geom_ColorTransform();
	this.__worldAlpha = 1;
};
$hxClasses["openfl.display.DisplayObjectRenderer"] = openfl_display_DisplayObjectRenderer;
openfl_display_DisplayObjectRenderer.__name__ = "openfl.display.DisplayObjectRenderer";
openfl_display_DisplayObjectRenderer.__super__ = openfl_events_EventDispatcher;
openfl_display_DisplayObjectRenderer.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	__allowSmoothing: null
	,__blendMode: null
	,__cleared: null
	,__context: null
	,__overrideBlendMode: null
	,__roundPixels: null
	,__stage: null
	,__tempColorTransform: null
	,__transparent: null
	,__type: null
	,__worldAlpha: null
	,__worldColorTransform: null
	,__worldTransform: null
	,__clear: function() {
	}
	,__getAlpha: function(value) {
		return value * this.__worldAlpha;
	}
	,__getColorTransform: function(value) {
		if(this.__worldColorTransform != null) {
			this.__tempColorTransform.__copyFrom(this.__worldColorTransform);
			this.__tempColorTransform.__combine(value);
			return this.__tempColorTransform;
		} else {
			return value;
		}
	}
	,__popMask: function() {
	}
	,__popMaskObject: function(object,handleScrollRect) {
		if(handleScrollRect == null) {
			handleScrollRect = true;
		}
	}
	,__popMaskRect: function() {
	}
	,__pushMask: function(mask) {
	}
	,__pushMaskObject: function(object,handleScrollRect) {
		if(handleScrollRect == null) {
			handleScrollRect = true;
		}
	}
	,__pushMaskRect: function(rect,transform) {
	}
	,__render: function(object) {
	}
	,__resize: function(width,height) {
	}
	,__setBlendMode: function(value) {
	}
	,__class__: openfl_display_DisplayObjectRenderer
});
var openfl_display_CairoRenderer = function(cairo) {
	openfl_display_DisplayObjectRenderer.call(this);
};
$hxClasses["openfl.display.CairoRenderer"] = openfl_display_CairoRenderer;
openfl_display_CairoRenderer.__name__ = "openfl.display.CairoRenderer";
openfl_display_CairoRenderer.__super__ = openfl_display_DisplayObjectRenderer;
openfl_display_CairoRenderer.prototype = $extend(openfl_display_DisplayObjectRenderer.prototype,{
	cairo: null
	,__matrix: null
	,__matrix3: null
	,applyMatrix: function(transform,cairo) {
		if(cairo == null) {
			cairo = this.cairo;
		}
		this.__matrix.copyFrom(transform);
		if(this.cairo == cairo && this.__worldTransform != null) {
			this.__matrix.concat(this.__worldTransform);
		}
		this.__matrix3.a = this.__matrix.a;
		this.__matrix3.b = this.__matrix.b;
		this.__matrix3.c = this.__matrix.c;
		this.__matrix3.d = this.__matrix.d;
		if(this.__roundPixels) {
			this.__matrix3.tx = Math.round(this.__matrix.tx);
			this.__matrix3.ty = Math.round(this.__matrix.ty);
		} else {
			this.__matrix3.tx = this.__matrix.tx;
			this.__matrix3.ty = this.__matrix.ty;
		}
		cairo.set_matrix(this.__matrix3);
	}
	,__clear: function() {
		if(this.cairo == null) {
			return;
		}
		this.cairo.identityMatrix();
		if(this.__stage != null && this.__stage.__clearBeforeRender) {
			var cacheBlendMode = this.__blendMode;
			this.__setBlendMode(10);
			this.cairo.setSourceRGB(this.__stage.__colorSplit[0],this.__stage.__colorSplit[1],this.__stage.__colorSplit[2]);
			this.cairo.paint();
			this.__setBlendMode(cacheBlendMode);
		}
	}
	,__popMask: function() {
		this.cairo.restore();
	}
	,__popMaskObject: function(object,handleScrollRect) {
		if(handleScrollRect == null) {
			handleScrollRect = true;
		}
		if(!object.__isCacheBitmapRender && object.__mask != null) {
			this.__popMask();
		}
		if(handleScrollRect && object.__scrollRect != null) {
			this.__popMaskRect();
		}
	}
	,__popMaskRect: function() {
		this.cairo.restore();
	}
	,__pushMask: function(mask) {
		this.cairo.save();
		this.applyMatrix(mask.__renderTransform,this.cairo);
		this.cairo.newPath();
		mask.__renderCairoMask(this);
		this.cairo.clip();
	}
	,__pushMaskObject: function(object,handleScrollRect) {
		if(handleScrollRect == null) {
			handleScrollRect = true;
		}
		if(handleScrollRect && object.__scrollRect != null) {
			this.__pushMaskRect(object.__scrollRect,object.__renderTransform);
		}
		if(!object.__isCacheBitmapRender && object.__mask != null) {
			this.__pushMask(object.__mask);
		}
	}
	,__pushMaskRect: function(rect,transform) {
		this.cairo.save();
		this.applyMatrix(transform,this.cairo);
		this.cairo.newPath();
		this.cairo.rectangle(rect.x,rect.y,rect.width,rect.height);
		this.cairo.clip();
	}
	,__render: function(object) {
		if(this.cairo == null) {
			return;
		}
		object.__renderCairo(this);
	}
	,__setBlendMode: function(value) {
		if(this.__overrideBlendMode != null) {
			value = this.__overrideBlendMode;
		}
		if(this.__blendMode == value) {
			return;
		}
		this.__blendMode = value;
		this.__setBlendModeCairo(this.cairo,value);
	}
	,__setBlendModeCairo: function(cairo,value) {
		switch(value) {
		case 0:
			cairo.setOperator(12);
			break;
		case 2:
			cairo.setOperator(17);
			break;
		case 3:
			cairo.setOperator(23);
			break;
		case 5:
			cairo.setOperator(21);
			break;
		case 7:
			cairo.setOperator(2);
			break;
		case 8:
			cairo.setOperator(18);
			break;
		case 9:
			cairo.setOperator(14);
			break;
		case 11:
			cairo.setOperator(16);
			break;
		case 12:
			cairo.setOperator(15);
			break;
		default:
			cairo.setOperator(2);
		}
	}
	,__class__: openfl_display_CairoRenderer
});
var openfl_display_CanvasRenderer = function(context) {
	this.pixelRatio = 1;
	openfl_display_DisplayObjectRenderer.call(this);
	this.context = context;
	this.__tempMatrix = new openfl_geom_Matrix();
	this.__type = "canvas";
};
$hxClasses["openfl.display.CanvasRenderer"] = openfl_display_CanvasRenderer;
openfl_display_CanvasRenderer.__name__ = "openfl.display.CanvasRenderer";
openfl_display_CanvasRenderer.__super__ = openfl_display_DisplayObjectRenderer;
openfl_display_CanvasRenderer.prototype = $extend(openfl_display_DisplayObjectRenderer.prototype,{
	context: null
	,pixelRatio: null
	,__isDOM: null
	,__tempMatrix: null
	,applySmoothing: function(context,value) {
		context.imageSmoothingEnabled = value;
	}
	,setTransform: function(transform,context) {
		if(context == null) {
			context = this.context;
		} else if(this.context == context && this.__worldTransform != null) {
			this.__tempMatrix.copyFrom(transform);
			this.__tempMatrix.concat(this.__worldTransform);
			transform = this.__tempMatrix;
		}
		if(this.__roundPixels) {
			context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx | 0,transform.ty | 0);
		} else {
			context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx,transform.ty);
		}
	}
	,__clear: function() {
		if(this.__stage != null) {
			var cacheBlendMode = this.__blendMode;
			this.__blendMode = null;
			this.__setBlendMode(10);
			this.context.setTransform(1,0,0,1,0,0);
			this.context.globalAlpha = 1;
			if(!this.__stage.__transparent && this.__stage.__clearBeforeRender) {
				this.context.fillStyle = this.__stage.__colorString;
				this.context.fillRect(0,0,this.__stage.stageWidth * this.__stage.window.__scale,this.__stage.stageHeight * this.__stage.window.__scale);
			} else if(this.__stage.__transparent && this.__stage.__clearBeforeRender) {
				this.context.clearRect(0,0,this.__stage.stageWidth * this.__stage.window.__scale,this.__stage.stageHeight * this.__stage.window.__scale);
			}
			this.__setBlendMode(cacheBlendMode);
		}
	}
	,__popMask: function() {
		this.context.restore();
	}
	,__popMaskObject: function(object,handleScrollRect) {
		if(handleScrollRect == null) {
			handleScrollRect = true;
		}
		if(!object.__isCacheBitmapRender && object.__mask != null) {
			this.__popMask();
		}
		if(handleScrollRect && object.__scrollRect != null) {
			this.__popMaskRect();
		}
	}
	,__popMaskRect: function() {
		this.context.restore();
	}
	,__pushMask: function(mask) {
		this.context.save();
		this.setTransform(mask.__renderTransform,this.context);
		this.context.beginPath();
		mask.__renderCanvasMask(this);
		this.context.closePath();
		this.context.clip();
	}
	,__pushMaskObject: function(object,handleScrollRect) {
		if(handleScrollRect == null) {
			handleScrollRect = true;
		}
		if(handleScrollRect && object.__scrollRect != null) {
			this.__pushMaskRect(object.__scrollRect,object.__renderTransform);
		}
		if(!object.__isCacheBitmapRender && object.__mask != null) {
			this.__pushMask(object.__mask);
		}
	}
	,__pushMaskRect: function(rect,transform) {
		this.context.save();
		this.setTransform(transform,this.context);
		this.context.beginPath();
		this.context.rect(rect.x,rect.y,rect.width,rect.height);
		this.context.clip();
	}
	,__render: function(object) {
		object.__renderCanvas(this);
	}
	,__setBlendMode: function(value) {
		if(this.__overrideBlendMode != null) {
			value = this.__overrideBlendMode;
		}
		if(this.__blendMode == value) {
			return;
		}
		this.__blendMode = value;
		this.__setBlendModeContext(this.context,value);
	}
	,__setBlendModeContext: function(context,value) {
		switch(value) {
		case 0:
			context.globalCompositeOperation = "lighter";
			break;
		case 2:
			context.globalCompositeOperation = "darken";
			break;
		case 3:
			context.globalCompositeOperation = "difference";
			break;
		case 5:
			context.globalCompositeOperation = "hard-light";
			break;
		case 8:
			context.globalCompositeOperation = "lighten";
			break;
		case 9:
			context.globalCompositeOperation = "multiply";
			break;
		case 11:
			context.globalCompositeOperation = "overlay";
			break;
		case 12:
			context.globalCompositeOperation = "screen";
			break;
		default:
			context.globalCompositeOperation = "source-over";
		}
	}
	,__class__: openfl_display_CanvasRenderer
});
var openfl_display_CapsStyle = {};
openfl_display_CapsStyle.fromInt = function(value) {
	return value;
};
openfl_display_CapsStyle.fromString = function(value) {
	switch(value) {
	case "none":
		return 0;
	case "round":
		return 1;
	case "square":
		return 2;
	default:
		return null;
	}
};
openfl_display_CapsStyle.toInt = function(this1) {
	return this1;
};
openfl_display_CapsStyle.toString = function(this1) {
	switch(this1) {
	case 0:
		return "none";
	case 1:
		return "round";
	case 2:
		return "square";
	default:
		return null;
	}
};
var openfl_display_DOMRenderer = function(element) {
	this.pixelRatio = 1;
	openfl_display_DisplayObjectRenderer.call(this);
	this.element = element;
	openfl_display_DisplayObject.__supportDOM = true;
	var prefix = (function () {
		  var styles = window.getComputedStyle(document.documentElement, ''),
			pre = (Array.prototype.slice
			  .call(styles)
			  .join('')
			  .match(/-(moz|webkit|ms)-/) || (styles.OLink === '' && ['', 'o'])
			)[1],
			dom = ('WebKit|Moz|MS|O').match(new RegExp('(' + pre + ')', 'i'))[1];
		  return {
			dom: dom,
			lowercase: pre,
			css: '-' + pre + '-',
			js: pre[0].toUpperCase() + pre.substr(1)
		  };
		})();
	this.__vendorPrefix = prefix.lowercase;
	this.__transformProperty = prefix.lowercase == "webkit" ? "-webkit-transform" : "transform";
	this.__transformOriginProperty = prefix.lowercase == "webkit" ? "-webkit-transform-origin" : "transform-origin";
	this.__clipRects = [];
	this.__numClipRects = 0;
	this.__z = 0;
	this.__type = "dom";
	this.__canvasRenderer = new openfl_display_CanvasRenderer(null);
	this.__canvasRenderer.__isDOM = true;
};
$hxClasses["openfl.display.DOMRenderer"] = openfl_display_DOMRenderer;
openfl_display_DOMRenderer.__name__ = "openfl.display.DOMRenderer";
openfl_display_DOMRenderer.__super__ = openfl_display_DisplayObjectRenderer;
openfl_display_DOMRenderer.prototype = $extend(openfl_display_DisplayObjectRenderer.prototype,{
	element: null
	,pixelRatio: null
	,__canvasRenderer: null
	,__clipRects: null
	,__currentClipRect: null
	,__numClipRects: null
	,__transformOriginProperty: null
	,__transformProperty: null
	,__vendorPrefix: null
	,__z: null
	,applyStyle: function(parent,childElement) {
		if(parent != null && childElement != null) {
			if(parent.__style == null || childElement.parentElement != this.element) {
				this.__initializeElement(parent,childElement);
			}
			parent.__style = childElement.style;
			this.__updateClip(parent);
			this.__applyStyle(parent,true,true,true);
		}
	}
	,clearStyle: function(childElement) {
		if(childElement != null && childElement.parentElement == this.element) {
			this.element.removeChild(childElement);
		}
	}
	,__applyStyle: function(displayObject,setTransform,setAlpha,setClip) {
		var style = displayObject.__style;
		if(setTransform && displayObject.__renderTransformChanged) {
			var _this = displayObject.__renderTransform;
			var roundPixels = this.__roundPixels;
			if(roundPixels == null) {
				roundPixels = false;
			}
			style.setProperty(this.__transformProperty,roundPixels ? "matrix3d(" + _this.a + ", " + _this.b + ", 0, 0, " + _this.c + ", " + _this.d + ", 0, 0, 0, 0, 1, 0, " + (_this.tx | 0) + ", " + (_this.ty | 0) + ", 0, 1)" : "matrix3d(" + _this.a + ", " + _this.b + ", 0, 0, " + _this.c + ", " + _this.d + ", 0, 0, 0, 0, 1, 0, " + _this.tx + ", " + _this.ty + ", 0, 1)",null);
		}
		if(displayObject.__worldZ != ++this.__z) {
			displayObject.__worldZ = this.__z;
			style.setProperty("z-index",displayObject.__worldZ == null ? "null" : "" + displayObject.__worldZ,null);
		}
		if(setAlpha && displayObject.__worldAlphaChanged) {
			if(displayObject.__worldAlpha < 1) {
				style.setProperty("opacity",displayObject.__worldAlpha == null ? "null" : "" + displayObject.__worldAlpha,null);
			} else {
				style.removeProperty("opacity");
			}
		}
		if(setClip && displayObject.__worldClipChanged) {
			if(displayObject.__worldClip == null) {
				style.removeProperty("clip");
			} else {
				var clip = displayObject.__worldClip;
				style.setProperty("clip","rect(" + clip.y + "px, " + clip.get_right() + "px, " + clip.get_bottom() + "px, " + clip.x + "px)",null);
			}
		}
	}
	,__initializeElement: function(displayObject,element) {
		var style = displayObject.__style = element.style;
		style.setProperty("position","absolute",null);
		style.setProperty("top","0",null);
		style.setProperty("left","0",null);
		style.setProperty(this.__transformOriginProperty,"0 0 0",null);
		this.element.appendChild(element);
		displayObject.__worldAlphaChanged = true;
		displayObject.__renderTransformChanged = true;
		displayObject.__worldVisibleChanged = true;
		displayObject.__worldClipChanged = true;
		displayObject.__worldClip = null;
		displayObject.__worldZ = -1;
	}
	,__popMask: function() {
		this.__popMaskRect();
	}
	,__popMaskObject: function(object,handleScrollRect) {
		if(handleScrollRect == null) {
			handleScrollRect = true;
		}
		if(object.__mask != null) {
			this.__popMask();
		}
		if(handleScrollRect && object.__scrollRect != null) {
			this.__popMaskRect();
		}
	}
	,__popMaskRect: function() {
		if(this.__numClipRects > 0) {
			this.__numClipRects--;
			if(this.__numClipRects > 0) {
				this.__currentClipRect = this.__clipRects[this.__numClipRects - 1];
			} else {
				this.__currentClipRect = null;
			}
		}
	}
	,__pushMask: function(mask) {
		this.__pushMaskRect(mask.getBounds(mask),mask.__renderTransform);
	}
	,__pushMaskObject: function(object,handleScrollRect) {
		if(handleScrollRect == null) {
			handleScrollRect = true;
		}
		if(handleScrollRect && object.__scrollRect != null) {
			this.__pushMaskRect(object.__scrollRect,object.__renderTransform);
		}
		if(object.__mask != null) {
			this.__pushMask(object.__mask);
		}
	}
	,__pushMaskRect: function(rect,transform) {
		if(this.__numClipRects == this.__clipRects.length) {
			this.__clipRects[this.__numClipRects] = new openfl_geom_Rectangle();
		}
		var clipRect = this.__clipRects[this.__numClipRects];
		rect.__transform(clipRect,transform);
		if(this.__numClipRects > 0) {
			var parentClipRect = this.__clipRects[this.__numClipRects - 1];
			clipRect.__contract(parentClipRect.x,parentClipRect.y,parentClipRect.width,parentClipRect.height);
		}
		if(clipRect.height < 0) {
			clipRect.height = 0;
		}
		if(clipRect.width < 0) {
			clipRect.width = 0;
		}
		this.__currentClipRect = clipRect;
		this.__numClipRects++;
	}
	,__render: function(object) {
		if(!this.__stage.__transparent) {
			this.element.style.background = this.__stage.__colorString;
		} else {
			this.element.style.background = "none";
		}
		this.__z = 1;
		object.__renderDOM(this);
	}
	,__setBlendMode: function(value) {
		if(this.__overrideBlendMode != null) {
			value = this.__overrideBlendMode;
		}
		if(this.__blendMode == value) {
			return;
		}
		this.__blendMode = value;
	}
	,__updateClip: function(displayObject) {
		if(this.__currentClipRect == null) {
			displayObject.__worldClipChanged = displayObject.__worldClip != null;
			displayObject.__worldClip = null;
		} else {
			if(displayObject.__worldClip == null) {
				displayObject.__worldClip = new openfl_geom_Rectangle();
			}
			var clip = openfl_geom_Rectangle.__pool.get();
			var matrix = openfl_geom_Matrix.__pool.get();
			matrix.copyFrom(displayObject.__renderTransform);
			matrix.invert();
			this.__currentClipRect.__transform(clip,matrix);
			if(clip.equals(displayObject.__worldClip)) {
				displayObject.__worldClipChanged = false;
			} else {
				displayObject.__worldClip.copyFrom(clip);
				displayObject.__worldClipChanged = true;
			}
			openfl_geom_Rectangle.__pool.release(clip);
			openfl_geom_Matrix.__pool.release(matrix);
		}
	}
	,__class__: openfl_display_DOMRenderer
});
var openfl_display_DisplayObjectShader = function(code) {
	if(this.__glFragmentSource == null) {
		this.__glFragmentSource = "varying float openfl_Alphav;\n\t\tvarying vec4 openfl_ColorMultiplierv;\n\t\tvarying vec4 openfl_ColorOffsetv;\n\t\tvarying vec2 openfl_TextureCoordv;\n\n\t\tuniform bool openfl_HasColorTransform;\n\t\tuniform sampler2D openfl_Texture;\n\t\tuniform vec2 openfl_TextureSize;\n\n\t\tvoid main(void) {\n\n\t\t\tvec4 color = texture2D (openfl_Texture, openfl_TextureCoordv);\n\n\t\tif (color.a == 0.0) {\n\n\t\t\tgl_FragColor = vec4 (0.0, 0.0, 0.0, 0.0);\n\n\t\t} else if (openfl_HasColorTransform) {\n\n\t\t\tcolor = vec4 (color.rgb / color.a, color.a);\n\n\t\t\tmat4 colorMultiplier = mat4 (0);\n\t\t\tcolorMultiplier[0][0] = openfl_ColorMultiplierv.x;\n\t\t\tcolorMultiplier[1][1] = openfl_ColorMultiplierv.y;\n\t\t\tcolorMultiplier[2][2] = openfl_ColorMultiplierv.z;\n\t\t\tcolorMultiplier[3][3] = 1.0; // openfl_ColorMultiplierv.w;\n\n\t\t\tcolor = clamp (openfl_ColorOffsetv + (color * colorMultiplier), 0.0, 1.0);\n\n\t\t\tif (color.a > 0.0) {\n\n\t\t\t\tgl_FragColor = vec4 (color.rgb * color.a * openfl_Alphav, color.a * openfl_Alphav);\n\n\t\t\t} else {\n\n\t\t\t\tgl_FragColor = vec4 (0.0, 0.0, 0.0, 0.0);\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tgl_FragColor = color * openfl_Alphav;\n\n\t\t}\n\n\t\t}";
	}
	if(this.__glVertexSource == null) {
		this.__glVertexSource = "attribute float openfl_Alpha;\n\t\tattribute vec4 openfl_ColorMultiplier;\n\t\tattribute vec4 openfl_ColorOffset;\n\t\tattribute vec4 openfl_Position;\n\t\tattribute vec2 openfl_TextureCoord;\n\n\t\tvarying float openfl_Alphav;\n\t\tvarying vec4 openfl_ColorMultiplierv;\n\t\tvarying vec4 openfl_ColorOffsetv;\n\t\tvarying vec2 openfl_TextureCoordv;\n\n\t\tuniform mat4 openfl_Matrix;\n\t\tuniform bool openfl_HasColorTransform;\n\t\tuniform vec2 openfl_TextureSize;\n\n\t\tvoid main(void) {\n\n\t\t\topenfl_Alphav = openfl_Alpha;\n\t\topenfl_TextureCoordv = openfl_TextureCoord;\n\n\t\tif (openfl_HasColorTransform) {\n\n\t\t\topenfl_ColorMultiplierv = openfl_ColorMultiplier;\n\t\t\topenfl_ColorOffsetv = openfl_ColorOffset / 255.0;\n\n\t\t}\n\n\t\tgl_Position = openfl_Matrix * openfl_Position;\n\n\t\t}";
	}
	openfl_display_Shader.call(this,code);
	this.__isGenerated = true;
	this.__initGL();
};
$hxClasses["openfl.display.DisplayObjectShader"] = openfl_display_DisplayObjectShader;
openfl_display_DisplayObjectShader.__name__ = "openfl.display.DisplayObjectShader";
openfl_display_DisplayObjectShader.__super__ = openfl_display_Shader;
openfl_display_DisplayObjectShader.prototype = $extend(openfl_display_Shader.prototype,{
	openfl_Alpha: null
	,openfl_ColorMultiplier: null
	,openfl_ColorOffset: null
	,openfl_Position: null
	,openfl_TextureCoord: null
	,openfl_Matrix: null
	,openfl_HasColorTransform: null
	,openfl_TextureSize: null
	,openfl_Texture: null
	,__class__: openfl_display_DisplayObjectShader
});
var openfl_display_FrameLabel = function(name,frame) {
	openfl_events_EventDispatcher.call(this);
	this.__name = name;
	this.__frame = frame;
};
$hxClasses["openfl.display.FrameLabel"] = openfl_display_FrameLabel;
openfl_display_FrameLabel.__name__ = "openfl.display.FrameLabel";
openfl_display_FrameLabel.__super__ = openfl_events_EventDispatcher;
openfl_display_FrameLabel.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	__frame: null
	,__name: null
	,get_frame: function() {
		return this.__frame;
	}
	,get_name: function() {
		return this.__name;
	}
	,__class__: openfl_display_FrameLabel
	,__properties__: {get_name:"get_name",get_frame:"get_frame"}
});
var openfl_display_GradientType = {};
openfl_display_GradientType.fromInt = function(value) {
	return value;
};
openfl_display_GradientType.fromString = function(value) {
	switch(value) {
	case "linear":
		return 0;
	case "radial":
		return 1;
	default:
		return null;
	}
};
openfl_display_GradientType.toInt = function(this1) {
	return this1;
};
openfl_display_GradientType.toString = function(this1) {
	switch(this1) {
	case 0:
		return "linear";
	case 1:
		return "radial";
	default:
		return null;
	}
};
var openfl_display_Graphics = function(owner) {
	this.__dirty = true;
	this.__owner = owner;
	this.__commands = new openfl__$internal_renderer_DrawCommandBuffer();
	this.__strokePadding = 0;
	this.__positionX = 0;
	this.__positionY = 0;
	this.__renderTransform = new openfl_geom_Matrix();
	this.__usedShaderBuffers = new haxe_ds_List();
	this.__worldTransform = new openfl_geom_Matrix();
	this.__width = 0;
	this.__height = 0;
	this.__shaderBufferPool = new lime_utils_ObjectPool(function() {
		return new openfl__$internal_renderer_ShaderBuffer();
	});
	this.moveTo(0,0);
};
$hxClasses["openfl.display.Graphics"] = openfl_display_Graphics;
openfl_display_Graphics.__name__ = "openfl.display.Graphics";
openfl_display_Graphics.prototype = {
	__bounds: null
	,__commands: null
	,__dirty: null
	,__hardwareDirty: null
	,__height: null
	,__managed: null
	,__positionX: null
	,__positionY: null
	,__quadBuffer: null
	,__renderTransform: null
	,__shaderBufferPool: null
	,__softwareDirty: null
	,__strokePadding: null
	,__transformDirty: null
	,__triangleIndexBuffer: null
	,__triangleIndexBufferCount: null
	,__triangleIndexBufferData: null
	,__usedShaderBuffers: null
	,__vertexBuffer: null
	,__vertexBufferCount: null
	,__vertexBufferCountUVT: null
	,__vertexBufferData: null
	,__vertexBufferDataUVT: null
	,__vertexBufferUVT: null
	,__visible: null
	,__owner: null
	,__width: null
	,__worldTransform: null
	,__canvas: null
	,__context: null
	,__bitmap: null
	,beginBitmapFill: function(bitmap,matrix,repeat,smooth) {
		if(smooth == null) {
			smooth = false;
		}
		if(repeat == null) {
			repeat = true;
		}
		this.__commands.beginBitmapFill(bitmap,matrix != null ? matrix.clone() : null,repeat,smooth);
		this.__visible = true;
	}
	,beginFill: function(color,alpha) {
		if(alpha == null) {
			alpha = 1;
		}
		if(color == null) {
			color = 0;
		}
		this.__commands.beginFill(color & 16777215,alpha);
		if(alpha > 0) {
			this.__visible = true;
		}
	}
	,beginGradientFill: function(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) {
		if(focalPointRatio == null) {
			focalPointRatio = 0;
		}
		if(interpolationMethod == null) {
			interpolationMethod = 1;
		}
		if(spreadMethod == null) {
			spreadMethod = 0;
		}
		if(colors == null || colors.length == 0) {
			return;
		}
		if(alphas == null) {
			alphas = [];
			var _g = 0;
			var _g1 = colors.length;
			while(_g < _g1) {
				var i = _g++;
				alphas.push(1);
			}
		}
		if(ratios == null) {
			ratios = [];
			var _g = 0;
			var _g1 = colors.length;
			while(_g < _g1) {
				var i = _g++;
				ratios.push(Math.ceil(i / colors.length * 255));
			}
		}
		if(alphas.length < colors.length || ratios.length < colors.length) {
			return;
		}
		this.__commands.beginGradientFill(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio);
		var _g = 0;
		while(_g < alphas.length) {
			var alpha = alphas[_g];
			++_g;
			if(alpha > 0) {
				this.__visible = true;
				break;
			}
		}
	}
	,beginShaderFill: function(shader,matrix) {
		if(shader != null) {
			var shaderBuffer = this.__shaderBufferPool.get();
			this.__usedShaderBuffers.add(shaderBuffer);
			shaderBuffer.update(shader);
			this.__commands.beginShaderFill(shaderBuffer);
		}
	}
	,clear: function() {
		var _g_head = this.__usedShaderBuffers.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var shaderBuffer = val;
			this.__shaderBufferPool.release(shaderBuffer);
		}
		this.__usedShaderBuffers.clear();
		this.__commands.clear();
		this.__strokePadding = 0;
		if(this.__bounds != null) {
			this.set___dirty(true);
			this.__transformDirty = true;
			this.__bounds = null;
		}
		this.__visible = false;
		this.__positionX = 0;
		this.__positionY = 0;
		this.moveTo(0,0);
	}
	,copyFrom: function(sourceGraphics) {
		this.__bounds = sourceGraphics.__bounds != null ? sourceGraphics.__bounds.clone() : null;
		this.__commands = sourceGraphics.__commands.copy();
		this.set___dirty(true);
		this.__strokePadding = sourceGraphics.__strokePadding;
		this.__positionX = sourceGraphics.__positionX;
		this.__positionY = sourceGraphics.__positionY;
		this.__transformDirty = true;
		this.__visible = sourceGraphics.__visible;
	}
	,cubicCurveTo: function(controlX1,controlY1,controlX2,controlY2,anchorX,anchorY) {
		this.__inflateBounds(this.__positionX - this.__strokePadding,this.__positionY - this.__strokePadding);
		this.__inflateBounds(this.__positionX + this.__strokePadding,this.__positionY + this.__strokePadding);
		var ix1 = anchorX;
		var ix2 = anchorX;
		if(!((controlX1 < anchorX && controlX1 > this.__positionX || controlX1 > anchorX && controlX1 < this.__positionX) && (controlX2 < anchorX && controlX2 > this.__positionX || controlX2 > anchorX && controlX2 < this.__positionX))) {
			var u = 2 * this.__positionX - 4 * controlX1 + 2 * controlX2;
			var v = controlX1 - this.__positionX;
			var w = -this.__positionX + 3 * controlX1 + anchorX - 3 * controlX2;
			var t1 = (-u + Math.sqrt(u * u - 4 * v * w)) / (2 * w);
			var t2 = (-u - Math.sqrt(u * u - 4 * v * w)) / (2 * w);
			if(t1 > 0 && t1 < 1) {
				ix1 = this.__calculateBezierCubicPoint(t1,this.__positionX,controlX1,controlX2,anchorX);
			}
			if(t2 > 0 && t2 < 1) {
				ix2 = this.__calculateBezierCubicPoint(t2,this.__positionX,controlX1,controlX2,anchorX);
			}
		}
		var iy1 = anchorY;
		var iy2 = anchorY;
		if(!((controlY1 < anchorY && controlY1 > this.__positionX || controlY1 > anchorY && controlY1 < this.__positionX) && (controlY2 < anchorY && controlY2 > this.__positionX || controlY2 > anchorY && controlY2 < this.__positionX))) {
			var u = 2 * this.__positionX - 4 * controlY1 + 2 * controlY2;
			var v = controlY1 - this.__positionX;
			var w = -this.__positionX + 3 * controlY1 + anchorY - 3 * controlY2;
			var t1 = (-u + Math.sqrt(u * u - 4 * v * w)) / (2 * w);
			var t2 = (-u - Math.sqrt(u * u - 4 * v * w)) / (2 * w);
			if(t1 > 0 && t1 < 1) {
				iy1 = this.__calculateBezierCubicPoint(t1,this.__positionX,controlY1,controlY2,anchorY);
			}
			if(t2 > 0 && t2 < 1) {
				iy2 = this.__calculateBezierCubicPoint(t2,this.__positionX,controlY1,controlY2,anchorY);
			}
		}
		this.__inflateBounds(ix1 - this.__strokePadding,iy1 - this.__strokePadding);
		this.__inflateBounds(ix1 + this.__strokePadding,iy1 + this.__strokePadding);
		this.__inflateBounds(ix2 - this.__strokePadding,iy2 - this.__strokePadding);
		this.__inflateBounds(ix2 + this.__strokePadding,iy2 + this.__strokePadding);
		this.__positionX = anchorX;
		this.__positionY = anchorY;
		this.__inflateBounds(this.__positionX - this.__strokePadding,this.__positionY - this.__strokePadding);
		this.__inflateBounds(this.__positionX + this.__strokePadding,this.__positionY + this.__strokePadding);
		this.__commands.cubicCurveTo(controlX1,controlY1,controlX2,controlY2,anchorX,anchorY);
		this.set___dirty(true);
	}
	,curveTo: function(controlX,controlY,anchorX,anchorY) {
		this.__inflateBounds(this.__positionX - this.__strokePadding,this.__positionY - this.__strokePadding);
		this.__inflateBounds(this.__positionX + this.__strokePadding,this.__positionY + this.__strokePadding);
		var ix;
		var iy;
		if(controlX < anchorX && controlX > this.__positionX || controlX > anchorX && controlX < this.__positionX) {
			ix = anchorX;
		} else {
			var tx = (this.__positionX - controlX) / (this.__positionX - 2 * controlX + anchorX);
			ix = this.__calculateBezierQuadPoint(tx,this.__positionX,controlX,anchorX);
		}
		if(controlY < anchorY && controlY > this.__positionY || controlY > anchorY && controlY < this.__positionY) {
			iy = anchorY;
		} else {
			var ty = (this.__positionY - controlY) / (this.__positionY - 2 * controlY + anchorY);
			iy = this.__calculateBezierQuadPoint(ty,this.__positionY,controlY,anchorY);
		}
		this.__inflateBounds(ix - this.__strokePadding,iy - this.__strokePadding);
		this.__inflateBounds(ix + this.__strokePadding,iy + this.__strokePadding);
		this.__positionX = anchorX;
		this.__positionY = anchorY;
		this.__commands.curveTo(controlX,controlY,anchorX,anchorY);
		this.set___dirty(true);
	}
	,drawCircle: function(x,y,radius) {
		if(radius <= 0) {
			return;
		}
		this.__inflateBounds(x - radius - this.__strokePadding,y - radius - this.__strokePadding);
		this.__inflateBounds(x + radius + this.__strokePadding,y + radius + this.__strokePadding);
		this.__commands.drawCircle(x,y,radius);
		this.set___dirty(true);
	}
	,drawEllipse: function(x,y,width,height) {
		if(width <= 0 || height <= 0) {
			return;
		}
		this.__inflateBounds(x - this.__strokePadding,y - this.__strokePadding);
		this.__inflateBounds(x + width + this.__strokePadding,y + height + this.__strokePadding);
		this.__commands.drawEllipse(x,y,width,height);
		this.set___dirty(true);
	}
	,drawGraphicsData: function(graphicsData) {
		var fill;
		var bitmapFill;
		var gradientFill;
		var shaderFill;
		var stroke;
		var path;
		var trianglePath;
		var quadPath;
		var graphics = graphicsData.iterator();
		while(graphics.hasNext()) {
			var graphics1 = graphics.next();
			switch(graphics1.__graphicsDataType) {
			case 0:
				stroke = graphics1;
				if(stroke.fill != null) {
					var thickness = stroke.thickness;
					if(isNaN(thickness)) {
						thickness = null;
					}
					switch(stroke.fill.__graphicsFillType) {
					case 0:
						fill = stroke.fill;
						this.lineStyle(thickness,fill.color,fill.alpha,stroke.pixelHinting,stroke.scaleMode,stroke.caps,stroke.joints,stroke.miterLimit);
						break;
					case 1:
						gradientFill = stroke.fill;
						this.lineStyle(thickness,0,1,stroke.pixelHinting,stroke.scaleMode,stroke.caps,stroke.joints,stroke.miterLimit);
						this.lineGradientStyle(gradientFill.type,gradientFill.colors,gradientFill.alphas,gradientFill.ratios,gradientFill.matrix,gradientFill.spreadMethod,gradientFill.interpolationMethod,gradientFill.focalPointRatio);
						break;
					case 2:
						bitmapFill = stroke.fill;
						this.lineStyle(thickness,0,1,stroke.pixelHinting,stroke.scaleMode,stroke.caps,stroke.joints,stroke.miterLimit);
						this.lineBitmapStyle(bitmapFill.bitmapData,bitmapFill.matrix,bitmapFill.repeat,bitmapFill.smooth);
						break;
					default:
					}
				} else {
					this.lineStyle();
				}
				break;
			case 1:
				fill = graphics1;
				this.beginFill(fill.color,fill.alpha);
				break;
			case 2:
				gradientFill = graphics1;
				this.beginGradientFill(gradientFill.type,gradientFill.colors,gradientFill.alphas,gradientFill.ratios,gradientFill.matrix,gradientFill.spreadMethod,gradientFill.interpolationMethod,gradientFill.focalPointRatio);
				break;
			case 3:
				path = graphics1;
				this.drawPath(path.commands,path.data,path.winding);
				break;
			case 4:
				bitmapFill = graphics1;
				this.beginBitmapFill(bitmapFill.bitmapData,bitmapFill.matrix,bitmapFill.repeat,bitmapFill.smooth);
				break;
			case 5:
				this.endFill();
				break;
			case 6:
				quadPath = graphics1;
				this.drawQuads(quadPath.rects,quadPath.indices,quadPath.transforms);
				break;
			case 7:
				trianglePath = graphics1;
				this.drawTriangles(trianglePath.vertices,trianglePath.indices,trianglePath.uvtData,trianglePath.culling);
				break;
			case 8:
				shaderFill = graphics1;
				this.beginShaderFill(shaderFill.shader,shaderFill.matrix);
				break;
			}
		}
	}
	,drawPath: function(commands,data,winding) {
		if(winding == null) {
			winding = 0;
		}
		var dataIndex = 0;
		if(winding == 1) {
			this.__commands.windingNonZero();
		}
		var command = commands.iterator();
		_hx_loop1: while(command.hasNext()) {
			var command1 = command.next();
			switch(command1) {
			case 1:
				this.moveTo(data.get(dataIndex),data.get(dataIndex + 1));
				dataIndex += 2;
				break;
			case 2:
				this.lineTo(data.get(dataIndex),data.get(dataIndex + 1));
				dataIndex += 2;
				break;
			case 3:
				this.curveTo(data.get(dataIndex),data.get(dataIndex + 1),data.get(dataIndex + 2),data.get(dataIndex + 3));
				dataIndex += 4;
				break;
			case 4:
				this.moveTo(data.get(dataIndex + 2),data.get(dataIndex + 3));
				break _hx_loop1;
			case 5:
				this.lineTo(data.get(dataIndex + 2),data.get(dataIndex + 3));
				break _hx_loop1;
			case 6:
				this.cubicCurveTo(data.get(dataIndex),data.get(dataIndex + 1),data.get(dataIndex + 2),data.get(dataIndex + 3),data.get(dataIndex + 4),data.get(dataIndex + 5));
				dataIndex += 6;
				break;
			default:
			}
		}
	}
	,drawQuads: function(rects,indices,transforms) {
		if(rects == null) {
			return;
		}
		var hasIndices = indices != null;
		var transformABCD = false;
		var transformXY = false;
		var length = hasIndices ? indices.get_length() : Math.floor(rects.get_length() / 4);
		if(length == 0) {
			return;
		}
		if(transforms != null) {
			if(transforms.get_length() >= length * 6) {
				transformABCD = true;
				transformXY = true;
			} else if(transforms.get_length() >= length * 4) {
				transformABCD = true;
			} else if(transforms.get_length() >= length * 2) {
				transformXY = true;
			}
		}
		var tileRect = openfl_geom_Rectangle.__pool.get();
		var tileTransform = openfl_geom_Matrix.__pool.get();
		var minX = Infinity;
		var minY = Infinity;
		var maxX = -Infinity;
		var maxY = -Infinity;
		var ri;
		var ti;
		var _g = 0;
		var _g1 = length;
		while(_g < _g1) {
			var i = _g++;
			ri = hasIndices ? indices.get(i) * 4 : i * 4;
			if(ri < 0) {
				continue;
			}
			tileRect.setTo(0,0,rects.get(ri + 2),rects.get(ri + 3));
			if(tileRect.width <= 0 || tileRect.height <= 0) {
				continue;
			}
			if(transformABCD && transformXY) {
				ti = i * 6;
				tileTransform.setTo(transforms.get(ti),transforms.get(ti + 1),transforms.get(ti + 2),transforms.get(ti + 3),transforms.get(ti + 4),transforms.get(ti + 5));
			} else if(transformABCD) {
				ti = i * 4;
				tileTransform.setTo(transforms.get(ti),transforms.get(ti + 1),transforms.get(ti + 2),transforms.get(ti + 3),tileRect.x,tileRect.y);
			} else if(transformXY) {
				ti = i * 2;
				tileTransform.tx = transforms.get(ti);
				tileTransform.ty = transforms.get(ti + 1);
			} else {
				tileTransform.tx = tileRect.x;
				tileTransform.ty = tileRect.y;
			}
			tileRect.__transform(tileRect,tileTransform);
			if(minX > tileRect.x) {
				minX = tileRect.x;
			}
			if(minY > tileRect.y) {
				minY = tileRect.y;
			}
			if(maxX < tileRect.get_right()) {
				maxX = tileRect.get_right();
			}
			if(maxY < tileRect.get_bottom()) {
				maxY = tileRect.get_bottom();
			}
		}
		this.__inflateBounds(minX,minY);
		this.__inflateBounds(maxX,maxY);
		this.__commands.drawQuads(rects,indices,transforms);
		this.set___dirty(true);
		this.__visible = true;
		openfl_geom_Rectangle.__pool.release(tileRect);
		openfl_geom_Matrix.__pool.release(tileTransform);
	}
	,drawRect: function(x,y,width,height) {
		if(width == 0 && height == 0) {
			return;
		}
		var xSign = width < 0 ? -1 : 1;
		var ySign = height < 0 ? -1 : 1;
		this.__inflateBounds(x - this.__strokePadding * xSign,y - this.__strokePadding * ySign);
		this.__inflateBounds(x + width + this.__strokePadding * xSign,y + height + this.__strokePadding * ySign);
		this.__commands.drawRect(x,y,width,height);
		this.set___dirty(true);
	}
	,drawRoundRect: function(x,y,width,height,ellipseWidth,ellipseHeight) {
		if(width == 0 && height == 0) {
			return;
		}
		var xSign = width < 0 ? -1 : 1;
		var ySign = height < 0 ? -1 : 1;
		this.__inflateBounds(x - this.__strokePadding * xSign,y - this.__strokePadding * ySign);
		this.__inflateBounds(x + width + this.__strokePadding * xSign,y + height + this.__strokePadding * ySign);
		this.__commands.drawRoundRect(x,y,width,height,ellipseWidth,ellipseHeight);
		this.set___dirty(true);
	}
	,drawRoundRectComplex: function(x,y,width,height,topLeftRadius,topRightRadius,bottomLeftRadius,bottomRightRadius) {
		if(width <= 0 || height <= 0) {
			return;
		}
		this.__inflateBounds(x - this.__strokePadding,y - this.__strokePadding);
		this.__inflateBounds(x + width + this.__strokePadding,y + height + this.__strokePadding);
		var xw = x + width;
		var yh = y + height;
		var minSize = width < height ? width * 2 : height * 2;
		if(!(topLeftRadius < minSize)) {
			topLeftRadius = minSize;
		}
		if(!(topRightRadius < minSize)) {
			topRightRadius = minSize;
		}
		if(!(bottomLeftRadius < minSize)) {
			bottomLeftRadius = minSize;
		}
		if(!(bottomRightRadius < minSize)) {
			bottomRightRadius = minSize;
		}
		var anchor = 1 - Math.sin(45 * (Math.PI / 180));
		var control = 1 - Math.tan(22.5 * (Math.PI / 180));
		var a = bottomRightRadius * anchor;
		var s = bottomRightRadius * control;
		this.moveTo(xw,yh - bottomRightRadius);
		this.curveTo(xw,yh - s,xw - a,yh - a);
		this.curveTo(xw - s,yh,xw - bottomRightRadius,yh);
		a = bottomLeftRadius * anchor;
		s = bottomLeftRadius * control;
		this.lineTo(x + bottomLeftRadius,yh);
		this.curveTo(x + s,yh,x + a,yh - a);
		this.curveTo(x,yh - s,x,yh - bottomLeftRadius);
		a = topLeftRadius * anchor;
		s = topLeftRadius * control;
		this.lineTo(x,y + topLeftRadius);
		this.curveTo(x,y + s,x + a,y + a);
		this.curveTo(x + s,y,x + topLeftRadius,y);
		a = topRightRadius * anchor;
		s = topRightRadius * control;
		this.lineTo(xw - topRightRadius,y);
		this.curveTo(xw - s,y,xw - a,y + a);
		this.curveTo(xw,y + s,xw,y + topRightRadius);
		this.lineTo(xw,yh - bottomRightRadius);
		this.set___dirty(true);
	}
	,drawTriangles: function(vertices,indices,uvtData,culling) {
		if(culling == null) {
			culling = 1;
		}
		if(vertices == null || vertices.get_length() == 0) {
			return;
		}
		var vertLength = vertices.get_length() / 2 | 0;
		if(indices == null) {
			if(vertLength % 3 != 0) {
				throw haxe_Exception.thrown(new openfl_errors_ArgumentError("Not enough vertices to close a triangle."));
			}
			indices = openfl_Vector.toIntVector(null);
			var _g = 0;
			var _g1 = vertLength;
			while(_g < _g1) {
				var i = _g++;
				indices.push(i);
			}
		}
		if(culling == null) {
			culling = 1;
		}
		var x;
		var y;
		var minX = Infinity;
		var minY = Infinity;
		var maxX = -Infinity;
		var maxY = -Infinity;
		var _g = 0;
		var _g1 = vertLength;
		while(_g < _g1) {
			var i = _g++;
			x = vertices.get(i * 2);
			y = vertices.get(i * 2 + 1);
			if(minX > x) {
				minX = x;
			}
			if(minY > y) {
				minY = y;
			}
			if(maxX < x) {
				maxX = x;
			}
			if(maxY < y) {
				maxY = y;
			}
		}
		this.__inflateBounds(minX,minY);
		this.__inflateBounds(maxX,maxY);
		this.__commands.drawTriangles(vertices,indices,uvtData,culling);
		this.set___dirty(true);
		this.__visible = true;
	}
	,endFill: function() {
		this.__commands.endFill();
	}
	,lineBitmapStyle: function(bitmap,matrix,repeat,smooth) {
		if(smooth == null) {
			smooth = false;
		}
		if(repeat == null) {
			repeat = true;
		}
		this.__commands.lineBitmapStyle(bitmap,matrix != null ? matrix.clone() : null,repeat,smooth);
	}
	,lineGradientStyle: function(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) {
		if(focalPointRatio == null) {
			focalPointRatio = 0;
		}
		if(interpolationMethod == null) {
			interpolationMethod = 1;
		}
		if(spreadMethod == null) {
			spreadMethod = 0;
		}
		this.__commands.lineGradientStyle(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio);
	}
	,lineStyle: function(thickness,color,alpha,pixelHinting,scaleMode,caps,joints,miterLimit) {
		if(miterLimit == null) {
			miterLimit = 3;
		}
		if(scaleMode == null) {
			scaleMode = 2;
		}
		if(pixelHinting == null) {
			pixelHinting = false;
		}
		if(alpha == null) {
			alpha = 1;
		}
		if(color == null) {
			color = 0;
		}
		if(thickness != null) {
			if(joints == 1) {
				if(thickness > this.__strokePadding) {
					this.__strokePadding = thickness;
				}
			} else if(thickness / 2 > this.__strokePadding) {
				this.__strokePadding = thickness / 2;
			}
		}
		this.__commands.lineStyle(thickness,color,alpha,pixelHinting,scaleMode,caps,joints,miterLimit);
		if(thickness != null) {
			this.__visible = true;
		}
	}
	,lineTo: function(x,y) {
		if(!isFinite(x) || !isFinite(y)) {
			return;
		}
		this.__inflateBounds(this.__positionX - this.__strokePadding,this.__positionY - this.__strokePadding);
		this.__inflateBounds(this.__positionX + this.__strokePadding,this.__positionY + this.__strokePadding);
		this.__positionX = x;
		this.__positionY = y;
		this.__inflateBounds(this.__positionX - this.__strokePadding,this.__positionY - this.__strokePadding);
		this.__inflateBounds(this.__positionX + this.__strokePadding * 2,this.__positionY + this.__strokePadding);
		this.__commands.lineTo(x,y);
		this.set___dirty(true);
	}
	,moveTo: function(x,y) {
		this.__positionX = x;
		this.__positionY = y;
		this.__commands.moveTo(x,y);
	}
	,overrideBlendMode: function(blendMode) {
		if(blendMode == null) {
			blendMode = 10;
		}
		this.__commands.overrideBlendMode(blendMode);
	}
	,readGraphicsData: function(recurse) {
		if(recurse == null) {
			recurse = true;
		}
		var graphicsData = openfl_Vector.toObjectVector(null);
		this.__owner.__readGraphicsData(graphicsData,recurse);
		return graphicsData;
	}
	,__calculateBezierCubicPoint: function(t,p1,p2,p3,p4) {
		var iT = 1 - t;
		return p1 * (iT * iT * iT) + 3 * p2 * t * (iT * iT) + 3 * p3 * iT * (t * t) + p4 * (t * t * t);
	}
	,__calculateBezierQuadPoint: function(t,p1,p2,p3) {
		var iT = 1 - t;
		return iT * iT * p1 + 2 * iT * t * p2 + t * t * p3;
	}
	,__cleanup: function() {
		if(this.__bounds != null && this.__canvas != null) {
			this.set___dirty(true);
			this.__transformDirty = true;
		}
		this.__bitmap = null;
		this.__canvas = null;
		this.__context = null;
	}
	,__getBounds: function(rect,matrix) {
		if(this.__bounds == null) {
			return;
		}
		var bounds = openfl_geom_Rectangle.__pool.get();
		this.__bounds.__transform(bounds,matrix);
		rect.__expand(bounds.x,bounds.y,bounds.width,bounds.height);
		openfl_geom_Rectangle.__pool.release(bounds);
	}
	,__hitTest: function(x,y,shapeFlag,matrix) {
		if(this.__bounds == null) {
			return false;
		}
		var norm = matrix.a * matrix.d - matrix.b * matrix.c;
		var px = norm == 0 ? -matrix.tx : 1.0 / norm * (matrix.c * (matrix.ty - y) + matrix.d * (x - matrix.tx));
		var norm = matrix.a * matrix.d - matrix.b * matrix.c;
		var py = norm == 0 ? -matrix.ty : 1.0 / norm * (matrix.a * (y - matrix.ty) + matrix.b * (matrix.tx - x));
		if(px > this.__bounds.x && py > this.__bounds.y && this.__bounds.contains(px,py)) {
			if(shapeFlag) {
				return openfl__$internal_renderer_canvas_CanvasGraphics.hitTest(this,px,py);
			}
			return true;
		}
		return false;
	}
	,__inflateBounds: function(x,y) {
		if(this.__bounds == null) {
			this.__bounds = new openfl_geom_Rectangle(x,y,0,0);
			this.__transformDirty = true;
			return;
		}
		if(x < this.__bounds.x) {
			this.__bounds.width += this.__bounds.x - x;
			this.__bounds.x = x;
			this.__transformDirty = true;
		}
		if(y < this.__bounds.y) {
			this.__bounds.height += this.__bounds.y - y;
			this.__bounds.y = y;
			this.__transformDirty = true;
		}
		if(x > this.__bounds.x + this.__bounds.width) {
			this.__bounds.width = x - this.__bounds.x;
		}
		if(y > this.__bounds.y + this.__bounds.height) {
			this.__bounds.height = y - this.__bounds.y;
		}
	}
	,__readGraphicsData: function(graphicsData) {
		var data = new openfl__$internal_renderer_DrawCommandReader(this.__commands);
		var path = null;
		var stroke;
		var _g = 0;
		var _g1 = this.__commands.types;
		while(_g < _g1.length) {
			var type = _g1[_g];
			++_g;
			switch(type._hx_index) {
			case 4:case 5:case 6:case 7:case 9:case 10:case 17:case 18:
				if(path == null) {
					path = new openfl_display_GraphicsPath();
				}
				break;
			default:
				if(path != null) {
					graphicsData.push(path);
					path = null;
				}
			}
			switch(type._hx_index) {
			case 0:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL;
				var this1 = data;
				var c = this1;
				graphicsData.push(new openfl_display_GraphicsBitmapFill(c.buffer.o[c.oPos],c.buffer.o[c.oPos + 1],c.buffer.b[c.bPos],c.buffer.b[c.bPos + 1]));
				break;
			case 1:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_FILL;
				var this2 = data;
				var c1 = this2;
				graphicsData.push(new openfl_display_GraphicsSolidFill(c1.buffer.i[c1.iPos],1));
				break;
			case 2:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL;
				var this3 = data;
				var c2 = this3;
				graphicsData.push(new openfl_display_GraphicsGradientFill(c2.buffer.o[c2.oPos],c2.buffer.ii[c2.iiPos],c2.buffer.ff[c2.ffPos],c2.buffer.ii[c2.iiPos + 1],c2.buffer.o[c2.oPos + 1],c2.buffer.o[c2.oPos + 2],c2.buffer.o[c2.oPos + 3],c2.buffer.f[c2.fPos]));
				break;
			case 3:
				break;
			case 4:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO;
				var this4 = data;
				var c3 = this4;
				path.cubicCurveTo(c3.buffer.f[c3.fPos],c3.buffer.f[c3.fPos + 1],c3.buffer.f[c3.fPos + 2],c3.buffer.f[c3.fPos + 3],c3.buffer.f[c3.fPos + 4],c3.buffer.f[c3.fPos + 5]);
				break;
			case 5:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.CURVE_TO;
				var this5 = data;
				var c4 = this5;
				path.curveTo(c4.buffer.f[c4.fPos],c4.buffer.f[c4.fPos + 1],c4.buffer.f[c4.fPos + 2],c4.buffer.f[c4.fPos + 3]);
				break;
			case 6:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE;
				var this6 = data;
				var c5 = this6;
				path.__drawCircle(c5.buffer.f[c5.fPos],c5.buffer.f[c5.fPos + 1],c5.buffer.f[c5.fPos + 2]);
				break;
			case 7:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE;
				var this7 = data;
				var c6 = this7;
				path.__drawEllipse(c6.buffer.f[c6.fPos],c6.buffer.f[c6.fPos + 1],c6.buffer.f[c6.fPos + 2],c6.buffer.f[c6.fPos + 3]);
				break;
			case 9:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_RECT;
				var this8 = data;
				var c7 = this8;
				path.__drawRect(c7.buffer.f[c7.fPos],c7.buffer.f[c7.fPos + 1],c7.buffer.f[c7.fPos + 2],c7.buffer.f[c7.fPos + 3]);
				break;
			case 10:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT;
				var this9 = data;
				var c8 = this9;
				path.__drawRoundRect(c8.buffer.f[c8.fPos],c8.buffer.f[c8.fPos + 1],c8.buffer.f[c8.fPos + 2],c8.buffer.f[c8.fPos + 3],c8.buffer.f[c8.fPos + 4],c8.buffer.o[c8.oPos] != null ? c8.buffer.o[c8.oPos] : c8.buffer.f[c8.fPos + 4]);
				break;
			case 13:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.END_FILL;
				var this10 = data;
				graphicsData.push(new openfl_display_GraphicsEndFill());
				break;
			case 14:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_BITMAP_STYLE;
				var this11 = data;
				var c9 = this11;
				path = null;
				break;
			case 15:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_GRADIENT_STYLE;
				var this12 = data;
				var c10 = this12;
				break;
			case 16:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_STYLE;
				var this13 = data;
				var c11 = this13;
				stroke = new openfl_display_GraphicsStroke(c11.buffer.o[c11.oPos],c11.buffer.b[c11.bPos],c11.buffer.o[c11.oPos + 1],c11.buffer.o[c11.oPos + 2],c11.buffer.o[c11.oPos + 3],c11.buffer.f[c11.fPos + 1]);
				stroke.fill = new openfl_display_GraphicsSolidFill(c11.buffer.i[c11.iPos],c11.buffer.f[c11.fPos]);
				graphicsData.push(stroke);
				break;
			case 17:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_TO;
				var this14 = data;
				var c12 = this14;
				path.lineTo(c12.buffer.f[c12.fPos],c12.buffer.f[c12.fPos + 1]);
				break;
			case 18:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.MOVE_TO;
				var this15 = data;
				var c13 = this15;
				path.moveTo(c13.buffer.f[c13.fPos],c13.buffer.f[c13.fPos + 1]);
				break;
			default:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = type;
			}
		}
		if(path != null) {
			graphicsData.push(path);
		}
	}
	,__update: function(displayMatrix) {
		if(this.__bounds == null || this.__bounds.width <= 0 || this.__bounds.height <= 0) {
			return;
		}
		var parentTransform = this.__owner.__renderTransform;
		var scaleX = 1.0;
		var scaleY = 1.0;
		if(parentTransform != null) {
			if(parentTransform.b == 0) {
				scaleX = Math.abs(parentTransform.a);
			} else {
				scaleX = Math.sqrt(parentTransform.a * parentTransform.a + parentTransform.b * parentTransform.b);
			}
			if(parentTransform.c == 0) {
				scaleY = Math.abs(parentTransform.d);
			} else {
				scaleY = Math.sqrt(parentTransform.c * parentTransform.c + parentTransform.d * parentTransform.d);
			}
		} else {
			return;
		}
		if(displayMatrix != null) {
			if(displayMatrix.b == 0) {
				scaleX *= displayMatrix.a;
			} else {
				scaleX *= Math.sqrt(displayMatrix.a * displayMatrix.a + displayMatrix.b * displayMatrix.b);
			}
			if(displayMatrix.c == 0) {
				scaleY *= displayMatrix.d;
			} else {
				scaleY *= Math.sqrt(displayMatrix.c * displayMatrix.c + displayMatrix.d * displayMatrix.d);
			}
		}
		var width = this.__bounds.width * scaleX;
		var height = this.__bounds.height * scaleY;
		if(width < 1 || height < 1) {
			if(this.__width >= 1 || this.__height >= 1) {
				this.set___dirty(true);
			}
			this.__width = 0;
			this.__height = 0;
			return;
		}
		if(openfl_display_Graphics.maxTextureWidth != null && width > openfl_display_Graphics.maxTextureWidth) {
			width = openfl_display_Graphics.maxTextureWidth;
			scaleX = openfl_display_Graphics.maxTextureWidth / this.__bounds.width;
		}
		if(openfl_display_Graphics.maxTextureWidth != null && height > openfl_display_Graphics.maxTextureHeight) {
			height = openfl_display_Graphics.maxTextureHeight;
			scaleY = openfl_display_Graphics.maxTextureHeight / this.__bounds.height;
		}
		this.__renderTransform.a = width / this.__bounds.width;
		this.__renderTransform.d = height / this.__bounds.height;
		var inverseA = 1 / this.__renderTransform.a;
		var inverseD = 1 / this.__renderTransform.d;
		this.__worldTransform.a = inverseA * parentTransform.a;
		this.__worldTransform.b = inverseA * parentTransform.b;
		this.__worldTransform.c = inverseD * parentTransform.c;
		this.__worldTransform.d = inverseD * parentTransform.d;
		var x = this.__bounds.x;
		var y = this.__bounds.y;
		var tx = x * parentTransform.a + y * parentTransform.c + parentTransform.tx;
		var ty = x * parentTransform.b + y * parentTransform.d + parentTransform.ty;
		this.__worldTransform.tx = Math.floor(tx);
		this.__worldTransform.ty = Math.floor(ty);
		var _this = this.__worldTransform;
		var norm = _this.a * _this.d - _this.b * _this.c;
		this.__renderTransform.tx = norm == 0 ? -_this.tx : 1.0 / norm * (_this.c * (_this.ty - ty) + _this.d * (tx - _this.tx));
		var _this = this.__worldTransform;
		var norm = _this.a * _this.d - _this.b * _this.c;
		this.__renderTransform.ty = norm == 0 ? -_this.ty : 1.0 / norm * (_this.a * (ty - _this.ty) + _this.b * (_this.tx - tx));
		var newWidth = Math.ceil(width + 1.0);
		var newHeight = Math.ceil(height + 1.0);
		if(newWidth != this.__width || newHeight != this.__height) {
			this.set___dirty(true);
		}
		this.__width = newWidth;
		this.__height = newHeight;
	}
	,set___dirty: function(value) {
		if(value && this.__owner != null) {
			var _this = this.__owner;
			if(!_this.__renderDirty) {
				_this.__renderDirty = true;
				_this.__setParentRenderDirty();
			}
		}
		if(value) {
			this.__softwareDirty = true;
			this.__hardwareDirty = true;
		}
		return this.__dirty = value;
	}
	,__class__: openfl_display_Graphics
	,__properties__: {set___dirty:"set___dirty"}
};
var openfl_display_IGraphicsFill = function() { };
$hxClasses["openfl.display.IGraphicsFill"] = openfl_display_IGraphicsFill;
openfl_display_IGraphicsFill.__name__ = "openfl.display.IGraphicsFill";
openfl_display_IGraphicsFill.__isInterface__ = true;
openfl_display_IGraphicsFill.prototype = {
	__graphicsFillType: null
	,__class__: openfl_display_IGraphicsFill
};
var openfl_display_IGraphicsData = function() { };
$hxClasses["openfl.display.IGraphicsData"] = openfl_display_IGraphicsData;
openfl_display_IGraphicsData.__name__ = "openfl.display.IGraphicsData";
openfl_display_IGraphicsData.__isInterface__ = true;
openfl_display_IGraphicsData.prototype = {
	__graphicsDataType: null
	,__class__: openfl_display_IGraphicsData
};
var openfl_display_GraphicsBitmapFill = function(bitmapData,matrix,repeat,smooth) {
	if(smooth == null) {
		smooth = false;
	}
	if(repeat == null) {
		repeat = true;
	}
	this.bitmapData = bitmapData;
	this.matrix = matrix;
	this.repeat = repeat;
	this.smooth = smooth;
	this.__graphicsDataType = 4;
	this.__graphicsFillType = 2;
};
$hxClasses["openfl.display.GraphicsBitmapFill"] = openfl_display_GraphicsBitmapFill;
openfl_display_GraphicsBitmapFill.__name__ = "openfl.display.GraphicsBitmapFill";
openfl_display_GraphicsBitmapFill.__interfaces__ = [openfl_display_IGraphicsFill,openfl_display_IGraphicsData];
openfl_display_GraphicsBitmapFill.prototype = {
	bitmapData: null
	,matrix: null
	,repeat: null
	,smooth: null
	,__graphicsDataType: null
	,__graphicsFillType: null
	,__class__: openfl_display_GraphicsBitmapFill
};
var openfl_display_GraphicsEndFill = function() {
	this.__graphicsDataType = 5;
	this.__graphicsFillType = 3;
};
$hxClasses["openfl.display.GraphicsEndFill"] = openfl_display_GraphicsEndFill;
openfl_display_GraphicsEndFill.__name__ = "openfl.display.GraphicsEndFill";
openfl_display_GraphicsEndFill.__interfaces__ = [openfl_display_IGraphicsFill,openfl_display_IGraphicsData];
openfl_display_GraphicsEndFill.prototype = {
	__graphicsDataType: null
	,__graphicsFillType: null
	,__class__: openfl_display_GraphicsEndFill
};
var openfl_display_GraphicsGradientFill = function(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) {
	if(focalPointRatio == null) {
		focalPointRatio = 0;
	}
	if(type == null) {
		type = 0;
	}
	if(spreadMethod == null) {
		spreadMethod = 0;
	}
	if(interpolationMethod == null) {
		interpolationMethod = 1;
	}
	this.type = type;
	this.colors = colors;
	this.alphas = alphas;
	this.ratios = ratios;
	this.matrix = matrix;
	this.spreadMethod = spreadMethod;
	this.interpolationMethod = interpolationMethod;
	this.focalPointRatio = focalPointRatio;
	this.__graphicsDataType = 2;
	this.__graphicsFillType = 1;
};
$hxClasses["openfl.display.GraphicsGradientFill"] = openfl_display_GraphicsGradientFill;
openfl_display_GraphicsGradientFill.__name__ = "openfl.display.GraphicsGradientFill";
openfl_display_GraphicsGradientFill.__interfaces__ = [openfl_display_IGraphicsFill,openfl_display_IGraphicsData];
openfl_display_GraphicsGradientFill.prototype = {
	alphas: null
	,colors: null
	,focalPointRatio: null
	,interpolationMethod: null
	,matrix: null
	,ratios: null
	,spreadMethod: null
	,type: null
	,__graphicsDataType: null
	,__graphicsFillType: null
	,__class__: openfl_display_GraphicsGradientFill
};
var openfl_display_IGraphicsPath = function() { };
$hxClasses["openfl.display.IGraphicsPath"] = openfl_display_IGraphicsPath;
openfl_display_IGraphicsPath.__name__ = "openfl.display.IGraphicsPath";
openfl_display_IGraphicsPath.__isInterface__ = true;
var openfl_display_GraphicsPath = function(commands,data,winding) {
	if(winding == null) {
		winding = 0;
	}
	this.commands = commands;
	this.data = data;
	this.winding = winding;
	this.__graphicsDataType = 3;
};
$hxClasses["openfl.display.GraphicsPath"] = openfl_display_GraphicsPath;
openfl_display_GraphicsPath.__name__ = "openfl.display.GraphicsPath";
openfl_display_GraphicsPath.__interfaces__ = [openfl_display_IGraphicsPath,openfl_display_IGraphicsData];
openfl_display_GraphicsPath.prototype = {
	commands: null
	,data: null
	,winding: null
	,__graphicsDataType: null
	,cubicCurveTo: function(controlX1,controlY1,controlX2,controlY2,anchorX,anchorY) {
		if(this.commands == null) {
			this.commands = openfl_Vector.toIntVector(null);
		}
		if(this.data == null) {
			this.data = openfl_Vector.toFloatVector(null);
		}
		this.commands.push(6);
		this.data.push(controlX1);
		this.data.push(controlY1);
		this.data.push(controlX2);
		this.data.push(controlY2);
		this.data.push(anchorX);
		this.data.push(anchorY);
	}
	,curveTo: function(controlX,controlY,anchorX,anchorY) {
		if(this.commands == null) {
			this.commands = openfl_Vector.toIntVector(null);
		}
		if(this.data == null) {
			this.data = openfl_Vector.toFloatVector(null);
		}
		this.commands.push(3);
		this.data.push(controlX);
		this.data.push(controlY);
		this.data.push(anchorX);
		this.data.push(anchorY);
	}
	,lineTo: function(x,y) {
		if(this.commands == null) {
			this.commands = openfl_Vector.toIntVector(null);
		}
		if(this.data == null) {
			this.data = openfl_Vector.toFloatVector(null);
		}
		this.commands.push(2);
		this.data.push(x);
		this.data.push(y);
	}
	,moveTo: function(x,y) {
		if(this.commands == null) {
			this.commands = openfl_Vector.toIntVector(null);
		}
		if(this.data == null) {
			this.data = openfl_Vector.toFloatVector(null);
		}
		this.commands.push(1);
		this.data.push(x);
		this.data.push(y);
	}
	,wideLineTo: function(x,y) {
		if(this.commands == null) {
			this.commands = openfl_Vector.toIntVector(null);
		}
		if(this.data == null) {
			this.data = openfl_Vector.toFloatVector(null);
		}
		this.commands.push(2);
		this.data.push(x);
		this.data.push(y);
	}
	,wideMoveTo: function(x,y) {
		if(this.commands == null) {
			this.commands = openfl_Vector.toIntVector(null);
		}
		if(this.data == null) {
			this.data = openfl_Vector.toFloatVector(null);
		}
		this.commands.push(1);
		this.data.push(x);
		this.data.push(y);
	}
	,__drawCircle: function(x,y,radius) {
		this.__drawRoundRect(x - radius,y - radius,radius * 2,radius * 2,radius * 2,radius * 2);
	}
	,__drawEllipse: function(x,y,width,height) {
		this.__drawRoundRect(x,y,width,height,width,height);
	}
	,__drawRect: function(x,y,width,height) {
		this.moveTo(x,y);
		this.lineTo(x + width,y);
		this.lineTo(x + width,y + height);
		this.lineTo(x,y + height);
		this.lineTo(x,y);
	}
	,__drawRoundRect: function(x,y,width,height,ellipseWidth,ellipseHeight) {
		ellipseWidth *= 0.5;
		ellipseHeight *= 0.5;
		if(ellipseWidth > width / 2) {
			ellipseWidth = width / 2;
		}
		if(ellipseHeight > height / 2) {
			ellipseHeight = height / 2;
		}
		var xe = x + width;
		var ye = y + height;
		var cx1 = -ellipseWidth + ellipseWidth * 0.70710678118654752440084436210485;
		var cx2 = -ellipseWidth + ellipseWidth * 0.4142135623730950488016887242097;
		var cy1 = -ellipseHeight + ellipseHeight * 0.70710678118654752440084436210485;
		var cy2 = -ellipseHeight + ellipseHeight * 0.4142135623730950488016887242097;
		this.moveTo(xe,ye - ellipseHeight);
		this.curveTo(xe,ye + cy2,xe + cx1,ye + cy1);
		this.curveTo(xe + cx2,ye,xe - ellipseWidth,ye);
		this.lineTo(x + ellipseWidth,ye);
		this.curveTo(x - cx2,ye,x - cx1,ye + cy1);
		this.curveTo(x,ye + cy2,x,ye - ellipseHeight);
		this.lineTo(x,y + ellipseHeight);
		this.curveTo(x,y - cy2,x - cx1,y - cy1);
		this.curveTo(x - cx2,y,x + ellipseWidth,y);
		this.lineTo(xe - ellipseWidth,y);
		this.curveTo(xe + cx2,y,xe + cx1,y - cy1);
		this.curveTo(xe,y - cy2,xe,y + ellipseHeight);
		this.lineTo(xe,ye - ellipseHeight);
	}
	,__class__: openfl_display_GraphicsPath
};
var openfl_display_GraphicsPathWinding = {};
openfl_display_GraphicsPathWinding.fromString = function(value) {
	switch(value) {
	case "evenOdd":
		return 0;
	case "nonZero":
		return 1;
	default:
		return null;
	}
};
openfl_display_GraphicsPathWinding.toString = function(this1) {
	switch(this1) {
	case 0:
		return "evenOdd";
	case 1:
		return "nonZero";
	default:
		return null;
	}
};
var openfl_display_GraphicsQuadPath = function(rects,indices,transforms) {
	this.rects = rects;
	this.indices = indices;
	this.transforms = transforms;
	this.__graphicsDataType = 6;
};
$hxClasses["openfl.display.GraphicsQuadPath"] = openfl_display_GraphicsQuadPath;
openfl_display_GraphicsQuadPath.__name__ = "openfl.display.GraphicsQuadPath";
openfl_display_GraphicsQuadPath.__interfaces__ = [openfl_display_IGraphicsPath,openfl_display_IGraphicsData];
openfl_display_GraphicsQuadPath.prototype = {
	indices: null
	,rects: null
	,transforms: null
	,__graphicsDataType: null
	,__class__: openfl_display_GraphicsQuadPath
};
var openfl_display_GraphicsShader = function(code) {
	if(this.__glFragmentSource == null) {
		this.__glFragmentSource = "varying float openfl_Alphav;\n\t\tvarying vec4 openfl_ColorMultiplierv;\n\t\tvarying vec4 openfl_ColorOffsetv;\n\t\tvarying vec2 openfl_TextureCoordv;\n\n\t\tuniform bool openfl_HasColorTransform;\n\t\tuniform vec2 openfl_TextureSize;\n\t\tuniform sampler2D bitmap;\n\n\t\tvoid main(void) {\n\n\t\t\tvec4 color = texture2D (bitmap, openfl_TextureCoordv);\n\n\t\tif (color.a == 0.0) {\n\n\t\t\tgl_FragColor = vec4 (0.0, 0.0, 0.0, 0.0);\n\n\t\t} else if (openfl_HasColorTransform) {\n\n\t\t\tcolor = vec4 (color.rgb / color.a, color.a);\n\n\t\t\tmat4 colorMultiplier = mat4 (0);\n\t\t\tcolorMultiplier[0][0] = openfl_ColorMultiplierv.x;\n\t\t\tcolorMultiplier[1][1] = openfl_ColorMultiplierv.y;\n\t\t\tcolorMultiplier[2][2] = openfl_ColorMultiplierv.z;\n\t\t\tcolorMultiplier[3][3] = 1.0; // openfl_ColorMultiplierv.w;\n\n\t\t\tcolor = clamp (openfl_ColorOffsetv + (color * colorMultiplier), 0.0, 1.0);\n\n\t\t\tif (color.a > 0.0) {\n\n\t\t\t\tgl_FragColor = vec4 (color.rgb * color.a * openfl_Alphav, color.a * openfl_Alphav);\n\n\t\t\t} else {\n\n\t\t\t\tgl_FragColor = vec4 (0.0, 0.0, 0.0, 0.0);\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tgl_FragColor = color * openfl_Alphav;\n\n\t\t}\n\n\t\t}";
	}
	if(this.__glVertexSource == null) {
		this.__glVertexSource = "attribute float openfl_Alpha;\n\t\tattribute vec4 openfl_ColorMultiplier;\n\t\tattribute vec4 openfl_ColorOffset;\n\t\tattribute vec4 openfl_Position;\n\t\tattribute vec2 openfl_TextureCoord;\n\n\t\tvarying float openfl_Alphav;\n\t\tvarying vec4 openfl_ColorMultiplierv;\n\t\tvarying vec4 openfl_ColorOffsetv;\n\t\tvarying vec2 openfl_TextureCoordv;\n\n\t\tuniform mat4 openfl_Matrix;\n\t\tuniform bool openfl_HasColorTransform;\n\t\tuniform vec2 openfl_TextureSize;\n\n\t\tvoid main(void) {\n\n\t\t\topenfl_Alphav = openfl_Alpha;\n\t\topenfl_TextureCoordv = openfl_TextureCoord;\n\n\t\tif (openfl_HasColorTransform) {\n\n\t\t\topenfl_ColorMultiplierv = openfl_ColorMultiplier;\n\t\t\topenfl_ColorOffsetv = openfl_ColorOffset / 255.0;\n\n\t\t}\n\n\t\tgl_Position = openfl_Matrix * openfl_Position;\n\n\t\t}";
	}
	openfl_display_Shader.call(this,code);
	this.__isGenerated = true;
	this.__initGL();
};
$hxClasses["openfl.display.GraphicsShader"] = openfl_display_GraphicsShader;
openfl_display_GraphicsShader.__name__ = "openfl.display.GraphicsShader";
openfl_display_GraphicsShader.__super__ = openfl_display_Shader;
openfl_display_GraphicsShader.prototype = $extend(openfl_display_Shader.prototype,{
	openfl_Alpha: null
	,openfl_ColorMultiplier: null
	,openfl_ColorOffset: null
	,openfl_Position: null
	,openfl_TextureCoord: null
	,openfl_Matrix: null
	,openfl_HasColorTransform: null
	,openfl_TextureSize: null
	,bitmap: null
	,__class__: openfl_display_GraphicsShader
});
var openfl_display_GraphicsShaderFill = function(shader,matrix) {
	this.shader = shader;
	this.matrix = matrix;
	this.__graphicsDataType = 8;
	this.__graphicsFillType = 4;
};
$hxClasses["openfl.display.GraphicsShaderFill"] = openfl_display_GraphicsShaderFill;
openfl_display_GraphicsShaderFill.__name__ = "openfl.display.GraphicsShaderFill";
openfl_display_GraphicsShaderFill.__interfaces__ = [openfl_display_IGraphicsFill,openfl_display_IGraphicsData];
openfl_display_GraphicsShaderFill.prototype = {
	matrix: null
	,shader: null
	,__graphicsDataType: null
	,__graphicsFillType: null
	,__class__: openfl_display_GraphicsShaderFill
};
var openfl_display_GraphicsSolidFill = function(color,alpha) {
	if(alpha == null) {
		alpha = 1;
	}
	if(color == null) {
		color = 0;
	}
	this.alpha = alpha;
	this.color = color;
	this.__graphicsDataType = 1;
	this.__graphicsFillType = 0;
};
$hxClasses["openfl.display.GraphicsSolidFill"] = openfl_display_GraphicsSolidFill;
openfl_display_GraphicsSolidFill.__name__ = "openfl.display.GraphicsSolidFill";
openfl_display_GraphicsSolidFill.__interfaces__ = [openfl_display_IGraphicsFill,openfl_display_IGraphicsData];
openfl_display_GraphicsSolidFill.prototype = {
	alpha: null
	,color: null
	,__graphicsDataType: null
	,__graphicsFillType: null
	,__class__: openfl_display_GraphicsSolidFill
};
var openfl_display_IGraphicsStroke = function() { };
$hxClasses["openfl.display.IGraphicsStroke"] = openfl_display_IGraphicsStroke;
openfl_display_IGraphicsStroke.__name__ = "openfl.display.IGraphicsStroke";
openfl_display_IGraphicsStroke.__isInterface__ = true;
var openfl_display_GraphicsStroke = function(thickness,pixelHinting,scaleMode,caps,joints,miterLimit,fill) {
	if(miterLimit == null) {
		miterLimit = 3;
	}
	if(joints == null) {
		joints = 2;
	}
	if(caps == null) {
		caps = 0;
	}
	if(scaleMode == null) {
		scaleMode = 2;
	}
	if(pixelHinting == null) {
		pixelHinting = false;
	}
	if(thickness == null) {
		thickness = NaN;
	}
	this.caps = caps;
	this.fill = fill;
	this.joints = joints;
	this.miterLimit = miterLimit;
	this.pixelHinting = pixelHinting;
	this.scaleMode = scaleMode;
	this.thickness = thickness;
	this.__graphicsDataType = 0;
};
$hxClasses["openfl.display.GraphicsStroke"] = openfl_display_GraphicsStroke;
openfl_display_GraphicsStroke.__name__ = "openfl.display.GraphicsStroke";
openfl_display_GraphicsStroke.__interfaces__ = [openfl_display_IGraphicsStroke,openfl_display_IGraphicsData];
openfl_display_GraphicsStroke.prototype = {
	caps: null
	,fill: null
	,joints: null
	,miterLimit: null
	,pixelHinting: null
	,scaleMode: null
	,thickness: null
	,__graphicsDataType: null
	,__class__: openfl_display_GraphicsStroke
};
var openfl_display_GraphicsTrianglePath = function(vertices,indices,uvtData,culling) {
	if(culling == null) {
		culling = 1;
	}
	this.vertices = vertices;
	this.indices = indices;
	this.uvtData = uvtData;
	this.culling = culling;
	this.__graphicsDataType = 7;
};
$hxClasses["openfl.display.GraphicsTrianglePath"] = openfl_display_GraphicsTrianglePath;
openfl_display_GraphicsTrianglePath.__name__ = "openfl.display.GraphicsTrianglePath";
openfl_display_GraphicsTrianglePath.__interfaces__ = [openfl_display_IGraphicsPath,openfl_display_IGraphicsData];
openfl_display_GraphicsTrianglePath.prototype = {
	culling: null
	,indices: null
	,uvtData: null
	,vertices: null
	,__graphicsDataType: null
	,__class__: openfl_display_GraphicsTrianglePath
};
var openfl_display_ITileContainer = function() { };
$hxClasses["openfl.display.ITileContainer"] = openfl_display_ITileContainer;
openfl_display_ITileContainer.__name__ = "openfl.display.ITileContainer";
openfl_display_ITileContainer.__isInterface__ = true;
openfl_display_ITileContainer.prototype = {
	get_numTiles: null
	,addTile: null
	,addTileAt: null
	,addTiles: null
	,contains: null
	,getTileAt: null
	,getTileIndex: null
	,removeTile: null
	,removeTileAt: null
	,removeTiles: null
	,setTileIndex: null
	,sortTiles: null
	,swapTiles: null
	,swapTilesAt: null
	,__class__: openfl_display_ITileContainer
	,__properties__: {get_numTiles:"get_numTiles"}
};
var openfl_display_InterpolationMethod = {};
openfl_display_InterpolationMethod.fromInt = function(value) {
	return value;
};
openfl_display_InterpolationMethod.fromString = function(value) {
	switch(value) {
	case "linearRGB":
		return 0;
	case "rgb":
		return 1;
	default:
		return null;
	}
};
openfl_display_InterpolationMethod.toInt = function(this1) {
	return this1;
};
openfl_display_InterpolationMethod.toString = function(this1) {
	switch(this1) {
	case 0:
		return "linearRGB";
	case 1:
		return "rgb";
	default:
		return null;
	}
};
var openfl_display_JPEGEncoderOptions = function(quality) {
	if(quality == null) {
		quality = 80;
	}
	this.quality = quality;
};
$hxClasses["openfl.display.JPEGEncoderOptions"] = openfl_display_JPEGEncoderOptions;
openfl_display_JPEGEncoderOptions.__name__ = "openfl.display.JPEGEncoderOptions";
openfl_display_JPEGEncoderOptions.prototype = {
	quality: null
	,__class__: openfl_display_JPEGEncoderOptions
};
var openfl_display_JointStyle = {};
openfl_display_JointStyle.fromInt = function(value) {
	return value;
};
openfl_display_JointStyle.fromString = function(value) {
	switch(value) {
	case "bevel":
		return 0;
	case "miter":
		return 1;
	case "round":
		return 2;
	default:
		return null;
	}
};
openfl_display_JointStyle.toInt = function(this1) {
	return this1;
};
openfl_display_JointStyle.toString = function(this1) {
	switch(this1) {
	case 0:
		return "bevel";
	case 1:
		return "miter";
	case 2:
		return "round";
	default:
		return null;
	}
};
var openfl_display_LineScaleMode = {};
openfl_display_LineScaleMode.fromInt = function(value) {
	return value;
};
openfl_display_LineScaleMode.fromString = function(value) {
	switch(value) {
	case "horizontal":
		return 0;
	case "none":
		return 1;
	case "normal":
		return 2;
	case "vertical":
		return 3;
	default:
		return null;
	}
};
openfl_display_LineScaleMode.toInt = function(this1) {
	return this1;
};
openfl_display_LineScaleMode.toString = function(this1) {
	switch(this1) {
	case 0:
		return "horizontal";
	case 1:
		return "none";
	case 2:
		return "normal";
	case 3:
		return "vertical";
	default:
		return null;
	}
};
var openfl_display_Loader = function() {
	openfl_display_DisplayObjectContainer.call(this);
	this.contentLoaderInfo = openfl_display_LoaderInfo.create(this);
	this.uncaughtErrorEvents = this.contentLoaderInfo.uncaughtErrorEvents;
	this.__unloaded = true;
};
$hxClasses["openfl.display.Loader"] = openfl_display_Loader;
openfl_display_Loader.__name__ = "openfl.display.Loader";
openfl_display_Loader.__super__ = openfl_display_DisplayObjectContainer;
openfl_display_Loader.prototype = $extend(openfl_display_DisplayObjectContainer.prototype,{
	content: null
	,contentLoaderInfo: null
	,uncaughtErrorEvents: null
	,__library: null
	,__path: null
	,__unloaded: null
	,close: function() {
		openfl__$internal_Lib.notImplemented({ fileName : "openfl/display/Loader.hx", lineNumber : 229, className : "openfl.display.Loader", methodName : "close"});
	}
	,load: function(request,context) {
		this.unload();
		this.contentLoaderInfo.loaderURL = openfl_Lib.get_current().get_loaderInfo().url;
		this.contentLoaderInfo.url = request.url;
		this.__unloaded = false;
		if(request.contentType == null || request.contentType == "") {
			var extension = "";
			this.__path = request.url;
			var queryIndex = this.__path.indexOf("?");
			if(queryIndex > -1) {
				this.__path = this.__path.substring(0,queryIndex);
			}
			while(StringTools.endsWith(this.__path,"/")) this.__path = this.__path.substring(0,this.__path.length - 1);
			if(StringTools.endsWith(this.__path,".bundle")) {
				this.__path += "/library.json";
				if(queryIndex > -1) {
					request.url = this.__path + request.url.substring(queryIndex);
				} else {
					request.url = this.__path;
				}
			}
			var extIndex = this.__path.lastIndexOf(".");
			if(extIndex > -1) {
				extension = this.__path.substring(extIndex + 1);
			}
			var tmp;
			switch(extension) {
			case "gif":
				tmp = "image/gif";
				break;
			case "jpeg":case "jpg":
				tmp = "image/jpeg";
				break;
			case "js":
				tmp = "application/javascript";
				break;
			case "json":
				tmp = "application/json";
				break;
			case "png":
				tmp = "image/png";
				break;
			case "swf":
				tmp = "application/x-shockwave-flash";
				break;
			default:
				tmp = "application/x-www-form-urlencoded";
			}
			this.contentLoaderInfo.contentType = tmp;
		} else {
			this.contentLoaderInfo.contentType = request.contentType;
		}
		if(this.contentLoaderInfo.contentType.indexOf("image/") > -1 && request.method == "GET" && (request.requestHeaders == null || request.requestHeaders.length == 0) && request.userAgent == null) {
			openfl_display_BitmapData.loadFromFile(request.url).onComplete($bind(this,this.BitmapData_onLoad)).onError($bind(this,this.BitmapData_onError)).onProgress($bind(this,this.BitmapData_onProgress));
			return;
		}
		var loader = new openfl_net_URLLoader();
		loader.dataFormat = 0;
		if(this.contentLoaderInfo.contentType.indexOf("/json") > -1 || this.contentLoaderInfo.contentType.indexOf("/javascript") > -1 || this.contentLoaderInfo.contentType.indexOf("/ecmascript") > -1) {
			loader.dataFormat = 1;
		}
		loader.addEventListener("complete",$bind(this,this.loader_onComplete));
		loader.addEventListener("ioError",$bind(this,this.loader_onError));
		loader.addEventListener("progress",$bind(this,this.loader_onProgress));
		loader.load(request);
	}
	,loadBytes: function(buffer,context) {
		openfl_display_BitmapData.loadFromBytes(buffer).onComplete($bind(this,this.BitmapData_onLoad)).onError($bind(this,this.BitmapData_onError));
	}
	,unload: function() {
		if(!this.__unloaded) {
			if(this.content != null && this.content.parent == this) {
				openfl_display_DisplayObjectContainer.prototype.removeChild.call(this,this.content);
			}
			if(this.__library != null) {
				openfl_utils_Assets.unloadLibrary(this.contentLoaderInfo.url);
				this.__library = null;
			}
			this.content = null;
			this.contentLoaderInfo.url = null;
			this.contentLoaderInfo.contentType = null;
			this.contentLoaderInfo.content = null;
			this.contentLoaderInfo.bytesLoaded = 0;
			this.contentLoaderInfo.bytesTotal = 0;
			this.contentLoaderInfo.width = 0;
			this.contentLoaderInfo.height = 0;
			this.__unloaded = true;
			this.contentLoaderInfo.dispatchEvent(new openfl_events_Event("unload"));
		}
	}
	,unloadAndStop: function(gc) {
		if(gc == null) {
			gc = true;
		}
		if(this.content != null) {
			this.content.__stopAllMovieClips();
		}
		var _g = 0;
		var _g1 = this.get_numChildren();
		while(_g < _g1) {
			var i = _g++;
			this.getChildAt(i).__stopAllMovieClips();
		}
		this.unload();
		var gc1 = gc;
	}
	,__dispatchError: function(text) {
		var event = new openfl_events_IOErrorEvent("ioError");
		event.text = text;
		this.contentLoaderInfo.dispatchEvent(event);
	}
	,__setContent: function(content,width,height) {
		this.content = content;
		this.contentLoaderInfo.content = content;
		this.contentLoaderInfo.width = width;
		this.contentLoaderInfo.height = height;
		if(content != null) {
			openfl_display_DisplayObjectContainer.prototype.addChildAt.call(this,content,0);
		}
	}
	,BitmapData_onError: function(error) {
		this.__dispatchError(Std.string(error));
	}
	,BitmapData_onLoad: function(bitmapData) {
		if(bitmapData == null) {
			this.__dispatchError("Unknown error");
			return;
		}
		this.__setContent(new openfl_display_Bitmap(bitmapData),bitmapData.width,bitmapData.height);
		this.contentLoaderInfo.dispatchEvent(new openfl_events_Event("complete"));
	}
	,BitmapData_onProgress: function(bytesLoaded,bytesTotal) {
		var event = new openfl_events_ProgressEvent("progress");
		event.bytesLoaded = bytesLoaded;
		event.bytesTotal = bytesTotal;
		this.contentLoaderInfo.dispatchEvent(event);
	}
	,loader_onComplete: function(event) {
		var _gthis = this;
		var loader = event.target;
		if(this.contentLoaderInfo.contentType != null && this.contentLoaderInfo.contentType.indexOf("/json") > -1) {
			var manifest = lime_utils_AssetManifest.parse(loader.data,haxe_io_Path.directory(this.__path));
			if(manifest == null) {
				this.__dispatchError("Cannot parse asset manifest");
				return;
			}
			var library = lime_utils_AssetLibrary.fromManifest(manifest);
			if(library == null) {
				this.__dispatchError("Cannot open library");
				return;
			}
			if(((library) instanceof openfl_utils_AssetLibrary)) {
				library.load().onComplete(function(_) {
					_gthis.__library = library;
					openfl_utils_Assets.registerLibrary(_gthis.contentLoaderInfo.url,_gthis.__library);
					if(manifest.name != null && !openfl_utils_Assets.hasLibrary(manifest.name)) {
						openfl_utils_Assets.registerLibrary(manifest.name,_gthis.__library);
					}
					var clip = _gthis.__library.getMovieClip("");
					_gthis.__setContent(clip,clip.get_width() | 0,clip.get_height() | 0);
					_gthis.contentLoaderInfo.dispatchEvent(new openfl_events_Event("complete"));
				}).onError(function(e) {
					_gthis.__dispatchError(e);
				});
			}
		} else if(this.contentLoaderInfo.contentType != null && (this.contentLoaderInfo.contentType.indexOf("/javascript") > -1 || this.contentLoaderInfo.contentType.indexOf("/ecmascript") > -1)) {
			this.__setContent(new openfl_display_Sprite(),0,0);
			eval("(function () {" + Std.string(loader.data) + "})()");
			this.contentLoaderInfo.dispatchEvent(new openfl_events_Event("complete"));
		} else {
			this.contentLoaderInfo.bytes = loader.data;
			openfl_display_BitmapData.loadFromBytes(loader.data).onComplete($bind(this,this.BitmapData_onLoad)).onError($bind(this,this.BitmapData_onError));
		}
	}
	,loader_onError: function(event) {
		event.target = this.contentLoaderInfo;
		this.contentLoaderInfo.dispatchEvent(event);
	}
	,loader_onProgress: function(event) {
		event.target = this.contentLoaderInfo;
		this.contentLoaderInfo.dispatchEvent(event);
	}
	,__class__: openfl_display_Loader
});
var openfl_display_LoaderInfo = function() {
	openfl_events_EventDispatcher.call(this);
	this.applicationDomain = openfl_system_ApplicationDomain.currentDomain;
	this.bytesLoaded = 0;
	this.bytesTotal = 0;
	this.childAllowsParent = true;
	this.parameters = { };
};
$hxClasses["openfl.display.LoaderInfo"] = openfl_display_LoaderInfo;
openfl_display_LoaderInfo.__name__ = "openfl.display.LoaderInfo";
openfl_display_LoaderInfo.create = function(loader) {
	var loaderInfo = new openfl_display_LoaderInfo();
	loaderInfo.uncaughtErrorEvents = new openfl_events_UncaughtErrorEvents();
	if(loader != null) {
		loaderInfo.loader = loader;
	} else {
		loaderInfo.url = openfl_display_LoaderInfo.__rootURL;
	}
	return loaderInfo;
};
openfl_display_LoaderInfo.__super__ = openfl_events_EventDispatcher;
openfl_display_LoaderInfo.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	applicationDomain: null
	,bytes: null
	,bytesLoaded: null
	,bytesTotal: null
	,childAllowsParent: null
	,content: null
	,contentType: null
	,frameRate: null
	,height: null
	,loader: null
	,loaderURL: null
	,parameters: null
	,parentAllowsChild: null
	,sameDomain: null
	,sharedEvents: null
	,uncaughtErrorEvents: null
	,url: null
	,width: null
	,__completed: null
	,__complete: function() {
		if(!this.__completed) {
			if(this.bytesLoaded < this.bytesTotal) {
				this.bytesLoaded = this.bytesTotal;
			}
			this.__update(this.bytesLoaded,this.bytesTotal);
			this.__completed = true;
			this.dispatchEvent(new openfl_events_Event("complete"));
		}
	}
	,__update: function(bytesLoaded,bytesTotal) {
		this.bytesLoaded = bytesLoaded;
		this.bytesTotal = bytesTotal;
		this.dispatchEvent(new openfl_events_ProgressEvent("progress",false,false,bytesLoaded,bytesTotal));
	}
	,__class__: openfl_display_LoaderInfo
});
var openfl_display_MovieClip = function() {
	openfl_display_Sprite.call(this);
	this.__currentFrame = 1;
	this.__currentLabels = [];
	this.__instanceFields = [];
	this.__totalFrames = 0;
	this.__enabled = true;
	if(openfl_display_MovieClip.__initSymbol != null) {
		this.__swf = openfl_display_MovieClip.__initSWF;
		this.__symbol = openfl_display_MovieClip.__initSymbol;
		openfl_display_MovieClip.__initSWF = null;
		openfl_display_MovieClip.__initSymbol = null;
		this.__fromSymbol(this.__swf,this.__symbol);
	}
};
$hxClasses["openfl.display.MovieClip"] = openfl_display_MovieClip;
openfl_display_MovieClip.__name__ = "openfl.display.MovieClip";
openfl_display_MovieClip.__super__ = openfl_display_Sprite;
openfl_display_MovieClip.prototype = $extend(openfl_display_Sprite.prototype,{
	__activeInstances: null
	,__activeInstancesByFrameObjectID: null
	,__currentFrame: null
	,__currentFrameLabel: null
	,__currentLabel: null
	,__currentLabels: null
	,__enabled: null
	,__frameScripts: null
	,__frameTime: null
	,__hasDown: null
	,__hasOver: null
	,__hasUp: null
	,__instanceFields: null
	,__lastFrameScriptEval: null
	,__lastFrameUpdate: null
	,__mouseIsDown: null
	,__playing: null
	,__swf: null
	,__symbol: null
	,__timeElapsed: null
	,__totalFrames: null
	,addFrameScript: function(index,method) {
		if(index < 0) {
			return;
		}
		var frame = index + 1;
		if(method != null) {
			if(this.__frameScripts == null) {
				this.__frameScripts = new haxe_ds_IntMap();
			}
			this.__frameScripts.h[frame] = method;
		} else if(this.__frameScripts != null) {
			this.__frameScripts.remove(frame);
		}
	}
	,gotoAndPlay: function(frame,scene) {
		this.play();
		this.__goto(this.__resolveFrameReference(frame));
	}
	,gotoAndStop: function(frame,scene) {
		this.stop();
		this.__goto(this.__resolveFrameReference(frame));
	}
	,nextFrame: function() {
		this.stop();
		this.__goto(this.__currentFrame + 1);
	}
	,play: function() {
		if(this.__symbol == null || this.__playing || this.__totalFrames < 2) {
			return;
		}
		this.__playing = true;
		this.__frameTime = 1000 / this.__swf.frameRate | 0;
		this.__timeElapsed = 0;
	}
	,prevFrame: function() {
		this.stop();
		this.__goto(this.__currentFrame - 1);
	}
	,stop: function() {
		this.__playing = false;
	}
	,__enterFrame: function(deltaTime) {
		this.__updateFrameScript(deltaTime);
		this.__updateSymbol(this.__currentFrame);
		openfl_display_Sprite.prototype.__enterFrame.call(this,deltaTime);
	}
	,__updateFrameScript: function(deltaTime) {
		if(this.__symbol != null && this.__playing) {
			var nextFrame = this.__getNextFrame(deltaTime);
			if(this.__lastFrameScriptEval == nextFrame) {
				openfl_display_Sprite.prototype.__enterFrame.call(this,deltaTime);
				return;
			}
			if(this.__frameScripts != null) {
				if(nextFrame < this.__currentFrame) {
					if(!this.__evaluateFrameScripts(this.__totalFrames)) {
						openfl_display_Sprite.prototype.__enterFrame.call(this,deltaTime);
						return;
					}
					this.__currentFrame = 1;
				}
				if(!this.__evaluateFrameScripts(nextFrame)) {
					openfl_display_Sprite.prototype.__enterFrame.call(this,deltaTime);
					return;
				}
			} else {
				this.__currentFrame = nextFrame;
			}
		}
	}
	,__updateSymbol: function(targetFrame) {
		if(this.__symbol != null && this.__currentFrame != this.__lastFrameUpdate) {
			this.__updateFrameLabel();
			var currentInstancesByFrameObjectID = new haxe_ds_IntMap();
			var frame;
			var frameData;
			var instance;
			var _g = 0;
			var _g1 = targetFrame;
			while(_g < _g1) {
				var i = _g++;
				frame = i + 1;
				frameData = this.__symbol.frames[i];
				if(frameData.objects == null) {
					continue;
				}
				var _g2 = 0;
				var _g3 = frameData.objects;
				while(_g2 < _g3.length) {
					var frameObject = _g3[_g2];
					++_g2;
					switch(frameObject.type._hx_index) {
					case 0:
						instance = this.__activeInstancesByFrameObjectID.h[frameObject.id];
						if(instance != null) {
							currentInstancesByFrameObjectID.h[frameObject.id] = instance;
							this.__updateDisplayObject(instance.displayObject,frameObject,true);
						}
						break;
					case 1:
						instance = currentInstancesByFrameObjectID.h[frameObject.id];
						if(instance != null && instance.displayObject != null) {
							this.__updateDisplayObject(instance.displayObject,frameObject);
						}
						break;
					case 2:
						currentInstancesByFrameObjectID.remove(frameObject.id);
						break;
					}
				}
			}
			var currentInstances = [];
			var currentMasks = [];
			var instance1 = currentInstancesByFrameObjectID.iterator();
			while(instance1.hasNext()) {
				var instance2 = instance1.next();
				if(currentInstances.indexOf(instance2) == -1) {
					currentInstances.push(instance2);
					if(instance2.clipDepth > 0) {
						currentMasks.push(instance2);
					}
				}
			}
			currentInstances.sort($bind(this,this.__sortDepths));
			var existingChild;
			var targetDepth;
			var targetChild;
			var child;
			var maskApplied;
			var _g = 0;
			var _g1 = currentInstances.length;
			while(_g < _g1) {
				var i = _g++;
				existingChild = this.__children[i];
				instance = currentInstances[i];
				targetDepth = instance.depth;
				targetChild = instance.displayObject;
				if(existingChild != targetChild) {
					child = targetChild;
					this.addChildAt(targetChild,i);
				} else {
					child = this.__children[i];
				}
				maskApplied = false;
				var _g2 = 0;
				while(_g2 < currentMasks.length) {
					var mask = currentMasks[_g2];
					++_g2;
					if(targetDepth > mask.depth && targetDepth <= mask.clipDepth) {
						child.set_mask(mask.displayObject);
						maskApplied = true;
						break;
					}
				}
				if(currentMasks.length > 0 && !maskApplied && child.get_mask() != null) {
					child.set_mask(null);
				}
			}
			var child;
			var i = currentInstances.length;
			var length = this.__children.length;
			while(i < length) {
				child = this.__children[i];
				var _g = 0;
				var _g1 = this.__activeInstances;
				while(_g < _g1.length) {
					var instance = _g1[_g];
					++_g;
					if(instance.displayObject == child) {
						if(((child) instanceof openfl_display_MovieClip)) {
							var movie = child;
							movie.gotoAndPlay(1);
						}
						this.removeChild(child);
						--i;
						--length;
					}
				}
				++i;
			}
			this.__lastFrameUpdate = this.__currentFrame;
			this.__updateInstanceFields();
		}
	}
	,__evaluateFrameScripts: function(advanceToFrame) {
		var _g = this.__currentFrame;
		var _g1 = advanceToFrame + 1;
		while(_g < _g1) {
			var frame = _g++;
			if(frame == this.__lastFrameScriptEval) {
				continue;
			}
			this.__lastFrameScriptEval = frame;
			this.__currentFrame = frame;
			if(this.__frameScripts.h.hasOwnProperty(frame)) {
				this.__updateSymbol(frame);
				var script = this.__frameScripts.h[frame];
				script();
				if(this.__currentFrame != frame) {
					return false;
				}
			}
			if(!this.__playing) {
				return false;
			}
		}
		return true;
	}
	,__fromSymbol: function(swf,symbol) {
		if(this.__activeInstances != null) {
			return;
		}
		this.__swf = swf;
		this.__symbol = symbol;
		this.__activeInstances = [];
		this.__activeInstancesByFrameObjectID = new haxe_ds_IntMap();
		this.__currentFrame = 1;
		this.__lastFrameScriptEval = -1;
		this.__lastFrameUpdate = -1;
		this.__totalFrames = this.__symbol.frames.length;
		var frame;
		var frameData;
		var parser = null;
		var _g = 0;
		var _g1 = this.__symbol.frames.length;
		while(_g < _g1) {
			var i = _g++;
			frame = i + 1;
			frameData = this.__symbol.frames[i];
			if(frameData.label != null) {
				this.__currentLabels.push(new openfl_display_FrameLabel(frameData.label,i + 1));
			}
			if(frameData.script != null) {
				if(this.__frameScripts == null) {
					this.__frameScripts = new haxe_ds_IntMap();
				}
				this.__frameScripts.h[frame] = frameData.script;
			} else if(frameData.scriptSource != null) {
				if(this.__frameScripts == null) {
					this.__frameScripts = new haxe_ds_IntMap();
				}
				try {
					if(parser == null) {
						parser = new hscript_Parser();
						parser.allowTypes = true;
					}
					var program = [parser.parseString(frameData.scriptSource)];
					var interp = [new hscript_Interp()];
					interp[0].variables.h["this"] = this;
					interp[0].variables.h["flash.events_Event"] = openfl_events_Event;
					var script = (function(interp,program) {
						return function() {
							interp[0].execute(program[0]);
						};
					})(interp,program);
					this.__frameScripts.h[frame] = script;
				} catch( _g2 ) {
					haxe_NativeStackTrace.lastError = _g2;
					if(this.__symbol.className != null) {
						lime_utils_Log.warn("Unable to evaluate frame script source for symbol \"" + this.__symbol.className + "\" frame " + frame + "\n" + frameData.scriptSource,{ fileName : "openfl/display/MovieClip.hx", lineNumber : 675, className : "openfl.display.MovieClip", methodName : "__fromSymbol"});
					} else {
						lime_utils_Log.warn("Unable to evaluate frame script source:\n" + frameData.scriptSource,{ fileName : "openfl/display/MovieClip.hx", lineNumber : 680, className : "openfl.display.MovieClip", methodName : "__fromSymbol"});
					}
				}
			}
		}
		var frame;
		var frameData;
		var instance;
		var duplicate;
		var symbol;
		var displayObject;
		var _g = 0;
		var _g1 = this.__totalFrames;
		while(_g < _g1) {
			var i = _g++;
			frame = i + 1;
			frameData = this.__symbol.frames[i];
			if(frameData.objects == null) {
				continue;
			}
			var _g2 = 0;
			var _g3 = frameData.objects;
			while(_g2 < _g3.length) {
				var frameObject = _g3[_g2];
				++_g2;
				if(frameObject.type == openfl__$internal_symbols_timeline_FrameObjectType.CREATE) {
					if(this.__activeInstancesByFrameObjectID.h.hasOwnProperty(frameObject.id)) {
						continue;
					} else {
						instance = null;
						duplicate = false;
						var _g4 = 0;
						var _g5 = this.__activeInstances;
						while(_g4 < _g5.length) {
							var activeInstance = _g5[_g4];
							++_g4;
							if(activeInstance.displayObject != null && activeInstance.characterID == frameObject.symbol && activeInstance.depth == frameObject.depth) {
								instance = activeInstance;
								duplicate = true;
								break;
							}
						}
					}
					if(instance == null) {
						symbol = this.__swf.symbols.h[frameObject.symbol];
						if(symbol != null) {
							displayObject = symbol.__createObject(this.__swf);
							if(displayObject != null) {
								displayObject.parent = this;
								displayObject.stage = this.stage;
								if(this.stage != null) {
									displayObject.dispatchEvent(new openfl_events_Event("addedToStage",false,false));
								}
								instance = new openfl_display__$MovieClip_FrameSymbolInstance(frame,frameObject.id,frameObject.symbol,frameObject.depth,displayObject,frameObject.clipDepth);
							}
						}
					}
					if(instance != null) {
						this.__activeInstancesByFrameObjectID.h[frameObject.id] = instance;
						if(!duplicate) {
							this.__activeInstances.push(instance);
							this.__updateDisplayObject(instance.displayObject,frameObject);
						}
					}
				}
			}
		}
		if(this.__totalFrames > 1) {
			this.play();
		}
		this.__enterFrame(0);
		this.__instanceFields = Type.getInstanceFields(js_Boot.getClass(this));
		this.__updateInstanceFields();
	}
	,__getNextFrame: function(deltaTime) {
		var nextFrame = 0;
		this.__timeElapsed += deltaTime;
		nextFrame = this.__currentFrame + Math.floor(this.__timeElapsed / this.__frameTime);
		if(nextFrame < 1) {
			nextFrame = 1;
		}
		if(nextFrame > this.__totalFrames) {
			nextFrame = Math.floor((nextFrame - 1) % this.__totalFrames) + 1;
		}
		this.__timeElapsed %= this.__frameTime;
		return nextFrame;
	}
	,__goto: function(frame) {
		if(this.__symbol == null) {
			return;
		}
		if(frame < 1) {
			frame = 1;
		} else if(frame > this.__totalFrames) {
			frame = this.__totalFrames;
		}
		this.__currentFrame = frame;
		this.__enterFrame(0);
	}
	,__resolveFrameReference: function(frame) {
		if(typeof(frame) == "number" && ((frame | 0) === frame)) {
			return frame;
		} else if(typeof(frame) == "string") {
			var label = frame;
			var _g = 0;
			var _g1 = this.__currentLabels;
			while(_g < _g1.length) {
				var frameLabel = _g1[_g];
				++_g;
				if(frameLabel.get_name() == label) {
					return frameLabel.get_frame();
				}
			}
			throw haxe_Exception.thrown(new openfl_errors_ArgumentError("Error #2109: Frame label " + label + " not found in scene."));
		} else {
			throw haxe_Exception.thrown("Invalid type for frame " + frame.__name__);
		}
	}
	,__sortDepths: function(a,b) {
		return a.depth - b.depth;
	}
	,__stopAllMovieClips: function() {
		openfl_display_Sprite.prototype.__stopAllMovieClips.call(this);
		this.stop();
	}
	,__tabTest: function(stack) {
		if(!this.__enabled) {
			return;
		}
		openfl_display_Sprite.prototype.__tabTest.call(this,stack);
	}
	,__updateDisplayObject: function(displayObject,frameObject,reset) {
		if(reset == null) {
			reset = false;
		}
		if(displayObject == null) {
			return;
		}
		if(frameObject.name != null) {
			displayObject.set_name(frameObject.name);
		}
		if(frameObject.matrix != null) {
			displayObject.get_transform().set_matrix(frameObject.matrix);
		}
		if(frameObject.colorTransform != null) {
			displayObject.get_transform().set_colorTransform(frameObject.colorTransform);
		} else if(reset && !displayObject.get_transform().get_colorTransform().__isDefault(true)) {
			displayObject.get_transform().set_colorTransform(new openfl_geom_ColorTransform());
		}
		if(frameObject.filters != null) {
			var filters = [];
			var _g = 0;
			var _g1 = frameObject.filters;
			while(_g < _g1.length) {
				var filter = _g1[_g];
				++_g;
				switch(filter._hx_index) {
				case 0:
					var quality = filter.quality;
					var blurY = filter.blurY;
					var blurX = filter.blurX;
					filters.push(new openfl_filters_BlurFilter(blurX,blurY,quality));
					break;
				case 1:
					var matrix = filter.matrix;
					filters.push(new openfl_filters_ColorMatrixFilter(matrix));
					break;
				case 2:
					var hideObject = filter.hideObject;
					var knockout = filter.knockout;
					var inner = filter.inner;
					var quality1 = filter.quality;
					var strength = filter.strength;
					var blurY1 = filter.blurY;
					var blurX1 = filter.blurX;
					var alpha = filter.alpha;
					var color = filter.color;
					var angle = filter.angle;
					var distance = filter.distance;
					filters.push(new openfl_filters_DropShadowFilter(distance,angle,color,alpha,blurX1,blurY1,strength,quality1,inner,knockout,hideObject));
					break;
				case 3:
					var knockout1 = filter.knockout;
					var inner1 = filter.inner;
					var quality2 = filter.quality;
					var strength1 = filter.strength;
					var blurY2 = filter.blurY;
					var blurX2 = filter.blurX;
					var alpha1 = filter.alpha;
					var color1 = filter.color;
					filters.push(new openfl_filters_GlowFilter(color1,alpha1,blurX2,blurY2,strength1,quality2,inner1,knockout1));
					break;
				}
			}
			displayObject.set_filters(filters);
		} else {
			displayObject.set_filters(null);
		}
		if(frameObject.visible != null) {
			displayObject.set_visible(frameObject.visible);
		}
		if(frameObject.blendMode != null) {
			displayObject.set_blendMode(frameObject.blendMode);
		}
		if(frameObject.cacheAsBitmap != null) {
			displayObject.set_cacheAsBitmap(frameObject.cacheAsBitmap);
		}
	}
	,__updateFrameLabel: function() {
		this.__currentFrameLabel = this.__symbol.frames[this.__currentFrame - 1].label;
		if(this.__currentFrameLabel != null) {
			this.__currentLabel = this.__currentFrameLabel;
		} else {
			this.__currentLabel = null;
			var _g = 0;
			var _g1 = this.__currentLabels;
			while(_g < _g1.length) {
				var label = _g1[_g];
				++_g;
				if(label.get_frame() < this.__currentFrame) {
					this.__currentLabel = label.get_name();
				} else {
					break;
				}
			}
		}
	}
	,__updateInstanceFields: function() {
		var _g = 0;
		var _g1 = this.__instanceFields;
		while(_g < _g1.length) {
			var field = _g1[_g];
			++_g;
			var _g2 = 0;
			var _g3 = this.__children;
			while(_g2 < _g3.length) {
				var child = _g3[_g2];
				++_g2;
				if(child.get_name() == field) {
					this[field] = child;
					break;
				}
			}
		}
	}
	,__onMouseDown: function(event) {
		if(this.__enabled && this.__hasDown) {
			this.gotoAndStop("_down");
		}
		this.__mouseIsDown = true;
		this.stage.addEventListener("mouseUp",$bind(this,this.__onMouseUp),true);
	}
	,__onMouseUp: function(event) {
		this.__mouseIsDown = false;
		if(this.stage != null) {
			this.stage.removeEventListener("mouseUp",$bind(this,this.__onMouseUp));
		}
		if(!this.__buttonMode) {
			return;
		}
		if(event.target == this && this.__enabled && this.__hasOver) {
			this.gotoAndStop("_over");
		} else if(this.__enabled && this.__hasUp) {
			this.gotoAndStop("_up");
		}
	}
	,__onRollOut: function(event) {
		if(!this.__enabled) {
			return;
		}
		if(this.__mouseIsDown && this.__hasOver) {
			this.gotoAndStop("_over");
		} else if(this.__hasUp) {
			this.gotoAndStop("_up");
		}
	}
	,__onRollOver: function(event) {
		if(this.__enabled && this.__hasOver) {
			this.gotoAndStop("_over");
		}
	}
	,set_buttonMode: function(value) {
		if(this.__buttonMode != value) {
			if(value) {
				this.__hasDown = false;
				this.__hasOver = false;
				this.__hasUp = false;
				var _g = 0;
				var _g1 = this.__currentLabels;
				while(_g < _g1.length) {
					var frameLabel = _g1[_g];
					++_g;
					switch(frameLabel.get_name()) {
					case "_down":
						this.__hasDown = true;
						break;
					case "_over":
						this.__hasOver = true;
						break;
					case "_up":
						this.__hasUp = true;
						break;
					default:
					}
				}
				if(this.__hasDown || this.__hasOver || this.__hasUp) {
					this.addEventListener("rollOver",$bind(this,this.__onRollOver));
					this.addEventListener("rollOut",$bind(this,this.__onRollOut));
					this.addEventListener("mouseDown",$bind(this,this.__onMouseDown));
				}
			} else {
				this.removeEventListener("rollOver",$bind(this,this.__onRollOver));
				this.removeEventListener("rollOut",$bind(this,this.__onRollOut));
				this.removeEventListener("mouseDown",$bind(this,this.__onMouseDown));
			}
			this.__buttonMode = value;
		}
		return value;
	}
	,get_currentFrame: function() {
		return this.__currentFrame;
	}
	,get_currentFrameLabel: function() {
		return this.__currentFrameLabel;
	}
	,get_currentLabel: function() {
		return this.__currentLabel;
	}
	,get_currentLabels: function() {
		return this.__currentLabels;
	}
	,get_enabled: function() {
		return this.__enabled;
	}
	,set_enabled: function(value) {
		return this.__enabled = value;
	}
	,get_framesLoaded: function() {
		return this.__totalFrames;
	}
	,get_isPlaying: function() {
		return this.__playing;
	}
	,get_totalFrames: function() {
		return this.__totalFrames;
	}
	,__class__: openfl_display_MovieClip
	,__properties__: $extend(openfl_display_Sprite.prototype.__properties__,{get_totalFrames:"get_totalFrames",get_isPlaying:"get_isPlaying",get_framesLoaded:"get_framesLoaded",set_enabled:"set_enabled",get_enabled:"get_enabled",get_currentLabels:"get_currentLabels",get_currentLabel:"get_currentLabel",get_currentFrameLabel:"get_currentFrameLabel",get_currentFrame:"get_currentFrame"})
});
var openfl_display__$MovieClip_FrameSymbolInstance = function(initFrame,initFrameObjectID,characterID,depth,displayObject,clipDepth) {
	this.initFrame = initFrame;
	this.initFrameObjectID = initFrameObjectID;
	this.characterID = characterID;
	this.depth = depth;
	this.displayObject = displayObject;
	this.clipDepth = clipDepth;
};
$hxClasses["openfl.display._MovieClip.FrameSymbolInstance"] = openfl_display__$MovieClip_FrameSymbolInstance;
openfl_display__$MovieClip_FrameSymbolInstance.__name__ = "openfl.display._MovieClip.FrameSymbolInstance";
openfl_display__$MovieClip_FrameSymbolInstance.prototype = {
	characterID: null
	,clipDepth: null
	,depth: null
	,displayObject: null
	,initFrame: null
	,initFrameObjectID: null
	,__class__: openfl_display__$MovieClip_FrameSymbolInstance
};
var openfl_display_OpenGLRenderer = function(context,defaultRenderTarget) {
	openfl_display_DisplayObjectRenderer.call(this);
	this.__context3D = context;
	this.__context = context.__context;
	this.gl = context.__context.webgl;
	this.__gl = this.gl;
	this.__defaultRenderTarget = defaultRenderTarget;
	this.__flipped = this.__defaultRenderTarget == null;
	if(openfl_display_Graphics.maxTextureWidth == null) {
		openfl_display_Graphics.maxTextureWidth = openfl_display_Graphics.maxTextureHeight = this.__gl.getParameter(this.__gl.MAX_TEXTURE_SIZE);
	}
	this.__matrix = lime_math_Matrix4._new();
	this.__values = [];
	this.__softwareRenderer = new openfl_display_CanvasRenderer(null);
	this.__type = "opengl";
	this.__setBlendMode(10);
	this.__context3D.__setGLBlend(true);
	this.__clipRects = [];
	this.__maskObjects = [];
	this.__numClipRects = 0;
	this.__projection = lime_math_Matrix4._new();
	this.__projectionFlipped = lime_math_Matrix4._new();
	this.__stencilReference = 0;
	this.__tempRect = new openfl_geom_Rectangle();
	this.__defaultDisplayShader = new openfl_display_DisplayObjectShader();
	this.__defaultGraphicsShader = new openfl_display_GraphicsShader();
	this.__defaultShader = this.__defaultDisplayShader;
	this.__initShader(this.__defaultShader);
	this.__scrollRectMasks = new lime_utils_ObjectPool(function() {
		return new openfl_display_Shape();
	});
	this.__maskShader = new openfl__$internal_renderer_context3D_Context3DMaskShader();
};
$hxClasses["openfl.display.OpenGLRenderer"] = openfl_display_OpenGLRenderer;
openfl_display_OpenGLRenderer.__name__ = "openfl.display.OpenGLRenderer";
openfl_display_OpenGLRenderer.__super__ = openfl_display_DisplayObjectRenderer;
openfl_display_OpenGLRenderer.prototype = $extend(openfl_display_DisplayObjectRenderer.prototype,{
	gl: null
	,__context3D: null
	,__clipRects: null
	,__currentDisplayShader: null
	,__currentGraphicsShader: null
	,__currentRenderTarget: null
	,__currentShader: null
	,__currentShaderBuffer: null
	,__defaultDisplayShader: null
	,__defaultGraphicsShader: null
	,__defaultRenderTarget: null
	,__defaultShader: null
	,__displayHeight: null
	,__displayWidth: null
	,__flipped: null
	,__gl: null
	,__height: null
	,__maskShader: null
	,__matrix: null
	,__maskObjects: null
	,__numClipRects: null
	,__offsetX: null
	,__offsetY: null
	,__projection: null
	,__projectionFlipped: null
	,__scrollRectMasks: null
	,__softwareRenderer: null
	,__stencilReference: null
	,__tempRect: null
	,__updatedStencil: null
	,__upscaled: null
	,__values: null
	,__width: null
	,applyAlpha: function(alpha) {
		openfl_display_OpenGLRenderer.__alphaValue[0] = alpha;
		if(this.__currentShaderBuffer != null) {
			this.__currentShaderBuffer.addFloatOverride("openfl_Alpha",openfl_display_OpenGLRenderer.__alphaValue);
		} else if(this.__currentShader != null) {
			if(this.__currentShader.__alpha != null) {
				this.__currentShader.__alpha.value = openfl_display_OpenGLRenderer.__alphaValue;
			}
		}
	}
	,applyBitmapData: function(bitmapData,smooth,repeat) {
		if(repeat == null) {
			repeat = false;
		}
		if(this.__currentShaderBuffer != null) {
			if(bitmapData != null) {
				openfl_display_OpenGLRenderer.__textureSizeValue[0] = bitmapData.__textureWidth;
				openfl_display_OpenGLRenderer.__textureSizeValue[1] = bitmapData.__textureHeight;
				this.__currentShaderBuffer.addFloatOverride("openfl_TextureSize",openfl_display_OpenGLRenderer.__textureSizeValue);
			}
		} else if(this.__currentShader != null) {
			if(this.__currentShader.__bitmap != null) {
				this.__currentShader.__bitmap.input = bitmapData;
				this.__currentShader.__bitmap.filter = smooth && this.__allowSmoothing ? 4 : 5;
				this.__currentShader.__bitmap.mipFilter = 2;
				this.__currentShader.__bitmap.wrap = repeat ? 2 : 0;
			}
			if(this.__currentShader.__texture != null) {
				this.__currentShader.__texture.input = bitmapData;
				this.__currentShader.__texture.filter = smooth && this.__allowSmoothing ? 4 : 5;
				this.__currentShader.__texture.mipFilter = 2;
				this.__currentShader.__texture.wrap = repeat ? 2 : 0;
			}
			if(this.__currentShader.__textureSize != null) {
				if(bitmapData != null) {
					openfl_display_OpenGLRenderer.__textureSizeValue[0] = bitmapData.__textureWidth;
					openfl_display_OpenGLRenderer.__textureSizeValue[1] = bitmapData.__textureHeight;
					this.__currentShader.__textureSize.value = openfl_display_OpenGLRenderer.__textureSizeValue;
				} else {
					this.__currentShader.__textureSize.value = null;
				}
			}
		}
	}
	,applyColorTransform: function(colorTransform) {
		var enabled = colorTransform != null && !colorTransform.__isDefault(true);
		this.applyHasColorTransform(enabled);
		if(enabled) {
			colorTransform.__setArrays(openfl_display_OpenGLRenderer.__colorMultipliersValue,openfl_display_OpenGLRenderer.__colorOffsetsValue);
			if(this.__currentShaderBuffer != null) {
				this.__currentShaderBuffer.addFloatOverride("openfl_ColorMultiplier",openfl_display_OpenGLRenderer.__colorMultipliersValue);
				this.__currentShaderBuffer.addFloatOverride("openfl_ColorOffset",openfl_display_OpenGLRenderer.__colorOffsetsValue);
			} else if(this.__currentShader != null) {
				if(this.__currentShader.__colorMultiplier != null) {
					this.__currentShader.__colorMultiplier.value = openfl_display_OpenGLRenderer.__colorMultipliersValue;
				}
				if(this.__currentShader.__colorOffset != null) {
					this.__currentShader.__colorOffset.value = openfl_display_OpenGLRenderer.__colorOffsetsValue;
				}
			}
		} else if(this.__currentShaderBuffer != null) {
			this.__currentShaderBuffer.addFloatOverride("openfl_ColorMultiplier",openfl_display_OpenGLRenderer.__emptyColorValue);
			this.__currentShaderBuffer.addFloatOverride("openfl_ColorOffset",openfl_display_OpenGLRenderer.__emptyColorValue);
		} else if(this.__currentShader != null) {
			if(this.__currentShader.__colorMultiplier != null) {
				this.__currentShader.__colorMultiplier.value = openfl_display_OpenGLRenderer.__emptyColorValue;
			}
			if(this.__currentShader.__colorOffset != null) {
				this.__currentShader.__colorOffset.value = openfl_display_OpenGLRenderer.__emptyColorValue;
			}
		}
	}
	,applyHasColorTransform: function(enabled) {
		openfl_display_OpenGLRenderer.__hasColorTransformValue[0] = enabled;
		if(this.__currentShaderBuffer != null) {
			this.__currentShaderBuffer.addBoolOverride("openfl_HasColorTransform",openfl_display_OpenGLRenderer.__hasColorTransformValue);
		} else if(this.__currentShader != null) {
			if(this.__currentShader.__hasColorTransform != null) {
				this.__currentShader.__hasColorTransform.value = openfl_display_OpenGLRenderer.__hasColorTransformValue;
			}
		}
	}
	,applyMatrix: function(matrix) {
		if(this.__currentShaderBuffer != null) {
			this.__currentShaderBuffer.addFloatOverride("openfl_Matrix",matrix);
		} else if(this.__currentShader != null) {
			if(this.__currentShader.__matrix != null) {
				this.__currentShader.__matrix.value = matrix;
			}
		}
	}
	,getMatrix: function(transform) {
		if(this.gl != null) {
			var values = this.__getMatrix(transform,1);
			lime_math_Matrix4.set(this.__matrix,0,values[0]);
			lime_math_Matrix4.set(this.__matrix,1,values[1]);
			lime_math_Matrix4.set(this.__matrix,2,values[2]);
			lime_math_Matrix4.set(this.__matrix,3,values[3]);
			lime_math_Matrix4.set(this.__matrix,4,values[4]);
			lime_math_Matrix4.set(this.__matrix,5,values[5]);
			lime_math_Matrix4.set(this.__matrix,6,values[6]);
			lime_math_Matrix4.set(this.__matrix,7,values[7]);
			lime_math_Matrix4.set(this.__matrix,8,values[8]);
			lime_math_Matrix4.set(this.__matrix,9,values[9]);
			lime_math_Matrix4.set(this.__matrix,10,values[10]);
			lime_math_Matrix4.set(this.__matrix,11,values[11]);
			lime_math_Matrix4.set(this.__matrix,12,values[12]);
			lime_math_Matrix4.set(this.__matrix,13,values[13]);
			lime_math_Matrix4.set(this.__matrix,14,values[14]);
			lime_math_Matrix4.set(this.__matrix,15,values[15]);
			return this.__matrix;
		} else {
			lime_math_Matrix4.identity(this.__matrix);
			lime_math_Matrix4.set(this.__matrix,0,transform.a);
			lime_math_Matrix4.set(this.__matrix,1,transform.b);
			lime_math_Matrix4.set(this.__matrix,4,transform.c);
			lime_math_Matrix4.set(this.__matrix,5,transform.d);
			lime_math_Matrix4.set(this.__matrix,12,transform.tx);
			lime_math_Matrix4.set(this.__matrix,13,transform.ty);
			return this.__matrix;
		}
	}
	,setShader: function(shader) {
		this.__currentShaderBuffer = null;
		if(this.__currentShader == shader) {
			return;
		}
		var tmp = this.__currentShader != null;
		if(shader == null) {
			this.__currentShader = null;
			this.__context3D.setProgram(null);
			return;
		} else {
			this.__currentShader = shader;
			this.__initShader(shader);
			this.__context3D.setProgram(shader.program);
			this.__context3D.__flushGLProgram();
			this.__currentShader.__enable();
			this.__context3D.__state.shader = shader;
		}
	}
	,setViewport: function() {
		this.__gl.viewport(this.__offsetX,this.__offsetY,this.__displayWidth,this.__displayHeight);
	}
	,updateShader: function() {
		if(this.__currentShader != null) {
			if(this.__currentShader.__position != null) {
				this.__currentShader.__position.__useArray = true;
			}
			if(this.__currentShader.__textureCoord != null) {
				this.__currentShader.__textureCoord.__useArray = true;
			}
			this.__context3D.setProgram(this.__currentShader.program);
			this.__context3D.__flushGLProgram();
			this.__context3D.__flushGLTextures();
			this.__currentShader.__update();
		}
	}
	,useAlphaArray: function() {
		if(this.__currentShader != null) {
			if(this.__currentShader.__alpha != null) {
				this.__currentShader.__alpha.__useArray = true;
			}
		}
	}
	,useColorTransformArray: function() {
		if(this.__currentShader != null) {
			if(this.__currentShader.__colorMultiplier != null) {
				this.__currentShader.__colorMultiplier.__useArray = true;
			}
			if(this.__currentShader.__colorOffset != null) {
				this.__currentShader.__colorOffset.__useArray = true;
			}
		}
	}
	,__cleanup: function() {
		if(this.__stencilReference > 0) {
			this.__stencilReference = 0;
			this.__context3D.setStencilActions();
			this.__context3D.setStencilReferenceValue(0,0,0);
		}
		if(this.__numClipRects > 0) {
			this.__numClipRects = 0;
			this.__scissorRect();
		}
	}
	,__clear: function() {
		if(this.__stage == null || this.__stage.__transparent) {
			this.__context3D.clear(0,0,0,0,0,0,1);
		} else {
			this.__context3D.clear(this.__stage.__colorSplit[0],this.__stage.__colorSplit[1],this.__stage.__colorSplit[2],1,0,0,1);
		}
		this.__cleared = true;
	}
	,__clearShader: function() {
		if(this.__currentShader != null) {
			if(this.__currentShaderBuffer == null) {
				if(this.__currentShader.__bitmap != null) {
					this.__currentShader.__bitmap.input = null;
				}
			} else {
				this.__currentShaderBuffer.clearOverride();
			}
			if(this.__currentShader.__texture != null) {
				this.__currentShader.__texture.input = null;
			}
			if(this.__currentShader.__textureSize != null) {
				this.__currentShader.__textureSize.value = null;
			}
			if(this.__currentShader.__hasColorTransform != null) {
				this.__currentShader.__hasColorTransform.value = null;
			}
			if(this.__currentShader.__position != null) {
				this.__currentShader.__position.value = null;
			}
			if(this.__currentShader.__matrix != null) {
				this.__currentShader.__matrix.value = null;
			}
			this.__currentShader.__clearUseArray();
		}
	}
	,__copyShader: function(other) {
		this.__currentShader = other.__currentShader;
		this.__currentShaderBuffer = other.__currentShaderBuffer;
		this.__currentDisplayShader = other.__currentDisplayShader;
		this.__currentGraphicsShader = other.__currentGraphicsShader;
	}
	,__getMatrix: function(transform,pixelSnapping) {
		var _matrix = openfl_geom_Matrix.__pool.get();
		_matrix.copyFrom(transform);
		_matrix.concat(this.__worldTransform);
		if(pixelSnapping == 0 || pixelSnapping == 1 && _matrix.b == 0 && _matrix.c == 0 && (_matrix.a < 1.001 && _matrix.a > 0.999) && (_matrix.d < 1.001 && _matrix.d > 0.999)) {
			_matrix.tx = Math.round(_matrix.tx);
			_matrix.ty = Math.round(_matrix.ty);
		}
		lime_math_Matrix4.identity(this.__matrix);
		lime_math_Matrix4.set(this.__matrix,0,_matrix.a);
		lime_math_Matrix4.set(this.__matrix,1,_matrix.b);
		lime_math_Matrix4.set(this.__matrix,4,_matrix.c);
		lime_math_Matrix4.set(this.__matrix,5,_matrix.d);
		lime_math_Matrix4.set(this.__matrix,12,_matrix.tx);
		lime_math_Matrix4.set(this.__matrix,13,_matrix.ty);
		lime_math_Matrix4.append(this.__matrix,this.__flipped ? this.__projectionFlipped : this.__projection);
		this.__values[0] = lime_math_Matrix4.get(this.__matrix,0);
		this.__values[1] = lime_math_Matrix4.get(this.__matrix,1);
		this.__values[2] = lime_math_Matrix4.get(this.__matrix,2);
		this.__values[3] = lime_math_Matrix4.get(this.__matrix,3);
		this.__values[4] = lime_math_Matrix4.get(this.__matrix,4);
		this.__values[5] = lime_math_Matrix4.get(this.__matrix,5);
		this.__values[6] = lime_math_Matrix4.get(this.__matrix,6);
		this.__values[7] = lime_math_Matrix4.get(this.__matrix,7);
		this.__values[8] = lime_math_Matrix4.get(this.__matrix,8);
		this.__values[9] = lime_math_Matrix4.get(this.__matrix,9);
		this.__values[10] = lime_math_Matrix4.get(this.__matrix,10);
		this.__values[11] = lime_math_Matrix4.get(this.__matrix,11);
		this.__values[12] = lime_math_Matrix4.get(this.__matrix,12);
		this.__values[13] = lime_math_Matrix4.get(this.__matrix,13);
		this.__values[14] = lime_math_Matrix4.get(this.__matrix,14);
		this.__values[15] = lime_math_Matrix4.get(this.__matrix,15);
		openfl_geom_Matrix.__pool.release(_matrix);
		return this.__values;
	}
	,__initShader: function(shader) {
		if(shader != null) {
			if(shader.__context == null) {
				shader.__context = this.__context3D;
				shader.__init();
			}
			return shader;
		}
		return this.__defaultShader;
	}
	,__initDisplayShader: function(shader) {
		if(shader != null) {
			if(shader.__context == null) {
				shader.__context = this.__context3D;
				shader.__init();
			}
			return shader;
		}
		return this.__defaultDisplayShader;
	}
	,__initGraphicsShader: function(shader) {
		if(shader != null) {
			if(shader.__context == null) {
				shader.__context = this.__context3D;
				shader.__init();
			}
			return shader;
		}
		return this.__defaultGraphicsShader;
	}
	,__initShaderBuffer: function(shaderBuffer) {
		if(shaderBuffer != null) {
			return this.__initGraphicsShader(shaderBuffer.shader);
		}
		return this.__defaultGraphicsShader;
	}
	,__popMask: function() {
		if(this.__stencilReference == 0) {
			return;
		}
		var mask = this.__maskObjects.pop();
		if(this.__stencilReference > 1) {
			this.__context3D.setStencilActions(2,1,0,0,5);
			this.__context3D.setStencilReferenceValue(this.__stencilReference,255,255);
			this.__context3D.setColorMask(false,false,false,false);
			mask.__renderGLMask(this);
			this.__stencilReference--;
			this.__context3D.setStencilActions(2,1,5,5,5);
			this.__context3D.setStencilReferenceValue(this.__stencilReference,255,0);
			this.__context3D.setColorMask(true,true,true,true);
		} else {
			this.__stencilReference = 0;
			this.__context3D.setStencilActions();
			this.__context3D.setStencilReferenceValue(0,0,0);
		}
	}
	,__popMaskObject: function(object,handleScrollRect) {
		if(handleScrollRect == null) {
			handleScrollRect = true;
		}
		if(object.__mask != null) {
			this.__popMask();
		}
		if(handleScrollRect && object.__scrollRect != null) {
			if(object.__renderTransform.b != 0 || object.__renderTransform.c != 0) {
				this.__scrollRectMasks.release(this.__maskObjects[this.__maskObjects.length - 1]);
				this.__popMask();
			} else {
				this.__popMaskRect();
			}
		}
	}
	,__popMaskRect: function() {
		if(this.__numClipRects > 0) {
			this.__numClipRects--;
			if(this.__numClipRects > 0) {
				this.__scissorRect(this.__clipRects[this.__numClipRects - 1]);
			} else {
				this.__scissorRect();
			}
		}
	}
	,__pushMask: function(mask) {
		if(this.__stencilReference == 0) {
			this.__context3D.clear(0,0,0,0,0,0,4);
			this.__updatedStencil = true;
		}
		this.__context3D.setStencilActions(2,1,2,5,5);
		this.__context3D.setStencilReferenceValue(this.__stencilReference,255,255);
		this.__context3D.setColorMask(false,false,false,false);
		mask.__renderGLMask(this);
		this.__maskObjects.push(mask);
		this.__stencilReference++;
		this.__context3D.setStencilActions(2,1,5,5,5);
		this.__context3D.setStencilReferenceValue(this.__stencilReference,255,0);
		this.__context3D.setColorMask(true,true,true,true);
	}
	,__pushMaskObject: function(object,handleScrollRect) {
		if(handleScrollRect == null) {
			handleScrollRect = true;
		}
		if(handleScrollRect && object.__scrollRect != null) {
			if(object.__renderTransform.b != 0 || object.__renderTransform.c != 0) {
				var shape = this.__scrollRectMasks.get();
				shape.get_graphics().clear();
				shape.get_graphics().beginFill(65280);
				shape.get_graphics().drawRect(object.__scrollRect.x,object.__scrollRect.y,object.__scrollRect.width,object.__scrollRect.height);
				shape.__renderTransform.copyFrom(object.__renderTransform);
				this.__pushMask(shape);
			} else {
				this.__pushMaskRect(object.__scrollRect,object.__renderTransform);
			}
		}
		if(object.__mask != null) {
			this.__pushMask(object.__mask);
		}
	}
	,__pushMaskRect: function(rect,transform) {
		if(this.__numClipRects == this.__clipRects.length) {
			this.__clipRects[this.__numClipRects] = new openfl_geom_Rectangle();
		}
		var _matrix = openfl_geom_Matrix.__pool.get();
		_matrix.copyFrom(transform);
		_matrix.concat(this.__worldTransform);
		var clipRect = this.__clipRects[this.__numClipRects];
		rect.__transform(clipRect,_matrix);
		if(this.__numClipRects > 0) {
			var parentClipRect = this.__clipRects[this.__numClipRects - 1];
			clipRect.__contract(parentClipRect.x,parentClipRect.y,parentClipRect.width,parentClipRect.height);
		}
		if(clipRect.height < 0) {
			clipRect.height = 0;
		}
		if(clipRect.width < 0) {
			clipRect.width = 0;
		}
		openfl_geom_Matrix.__pool.release(_matrix);
		this.__scissorRect(clipRect);
		this.__numClipRects++;
	}
	,__render: function(object) {
		this.__context3D.setColorMask(true,true,true,true);
		this.__context3D.setCulling(3);
		this.__context3D.setDepthTest(false,0);
		this.__context3D.setStencilActions();
		this.__context3D.setStencilReferenceValue(0,0,0);
		this.__context3D.setScissorRectangle(null);
		this.__blendMode = null;
		this.__setBlendMode(10);
		if(this.__defaultRenderTarget == null) {
			openfl_display_OpenGLRenderer.__scissorRectangle.setTo(this.__offsetX,this.__offsetY,this.__displayWidth,this.__displayHeight);
			this.__context3D.setScissorRectangle(openfl_display_OpenGLRenderer.__scissorRectangle);
			this.__upscaled = this.__worldTransform.a != 1 || this.__worldTransform.d != 1;
			object.__renderGL(this);
			if(this.__offsetX > 0 || this.__offsetY > 0) {
				if(this.__offsetX > 0) {
					openfl_display_OpenGLRenderer.__scissorRectangle.setTo(0,0,this.__offsetX,this.__height);
					this.__context3D.setScissorRectangle(openfl_display_OpenGLRenderer.__scissorRectangle);
					this.__context3D.__flushGL();
					this.__gl.clearColor(0,0,0,1);
					this.__gl.clear(this.__gl.COLOR_BUFFER_BIT);
					openfl_display_OpenGLRenderer.__scissorRectangle.setTo(this.__offsetX + this.__displayWidth,0,this.__width,this.__height);
					this.__context3D.setScissorRectangle(openfl_display_OpenGLRenderer.__scissorRectangle);
					this.__context3D.__flushGL();
					this.__gl.clearColor(0,0,0,1);
					this.__gl.clear(this.__gl.COLOR_BUFFER_BIT);
				}
				if(this.__offsetY > 0) {
					openfl_display_OpenGLRenderer.__scissorRectangle.setTo(0,0,this.__width,this.__offsetY);
					this.__context3D.setScissorRectangle(openfl_display_OpenGLRenderer.__scissorRectangle);
					this.__context3D.__flushGL();
					this.__gl.clearColor(0,0,0,1);
					this.__gl.clear(this.__gl.COLOR_BUFFER_BIT);
					openfl_display_OpenGLRenderer.__scissorRectangle.setTo(0,this.__offsetY + this.__displayHeight,this.__width,this.__height);
					this.__context3D.setScissorRectangle(openfl_display_OpenGLRenderer.__scissorRectangle);
					this.__context3D.__flushGL();
					this.__gl.clearColor(0,0,0,1);
					this.__gl.clear(this.__gl.COLOR_BUFFER_BIT);
				}
				this.__context3D.setScissorRectangle(null);
			}
		} else {
			openfl_display_OpenGLRenderer.__scissorRectangle.setTo(this.__offsetX,this.__offsetY,this.__displayWidth,this.__displayHeight);
			this.__context3D.setScissorRectangle(openfl_display_OpenGLRenderer.__scissorRectangle);
			var cacheMask = object.__mask;
			var cacheScrollRect = object.__scrollRect;
			object.__mask = null;
			object.__scrollRect = null;
			object.__renderGL(this);
			object.__mask = cacheMask;
			object.__scrollRect = cacheScrollRect;
		}
		this.__context3D.present();
	}
	,__renderFilterPass: function(source,shader,smooth,clear) {
		if(clear == null) {
			clear = true;
		}
		if(source == null || shader == null) {
			return;
		}
		if(this.__defaultRenderTarget == null) {
			return;
		}
		var cacheRTT = this.__context3D.__state.renderToTexture;
		var cacheRTTDepthStencil = this.__context3D.__state.renderToTextureDepthStencil;
		var cacheRTTAntiAlias = this.__context3D.__state.renderToTextureAntiAlias;
		var cacheRTTSurfaceSelector = this.__context3D.__state.renderToTextureSurfaceSelector;
		this.__context3D.setRenderToTexture(this.__defaultRenderTarget.getTexture(this.__context3D),false);
		if(clear) {
			this.__context3D.clear(0,0,0,0,0,0,1);
		}
		var shader1 = this.__initShader(shader);
		this.setShader(shader1);
		this.applyAlpha(1);
		this.applyBitmapData(source,smooth);
		this.applyColorTransform(null);
		this.applyMatrix(this.__getMatrix(source.__renderTransform,1));
		this.updateShader();
		var vertexBuffer = source.getVertexBuffer(this.__context3D);
		if(shader1.__position != null) {
			this.__context3D.setVertexBufferAt(shader1.__position.index,vertexBuffer,0,3);
		}
		if(shader1.__textureCoord != null) {
			this.__context3D.setVertexBufferAt(shader1.__textureCoord.index,vertexBuffer,3,2);
		}
		var indexBuffer = source.getIndexBuffer(this.__context3D);
		this.__context3D.drawTriangles(indexBuffer);
		if(cacheRTT != null) {
			this.__context3D.setRenderToTexture(cacheRTT,cacheRTTDepthStencil,cacheRTTAntiAlias,cacheRTTSurfaceSelector);
		} else {
			this.__context3D.setRenderToBackBuffer();
		}
		this.__clearShader();
	}
	,__resize: function(width,height) {
		this.__width = width;
		this.__height = height;
		var w = this.__defaultRenderTarget == null ? this.__stage.stageWidth : this.__defaultRenderTarget.width;
		var h = this.__defaultRenderTarget == null ? this.__stage.stageHeight : this.__defaultRenderTarget.height;
		var tmp;
		if(this.__defaultRenderTarget == null) {
			var _this = this.__worldTransform;
			tmp = Math.round(0 * _this.a + 0 * _this.c + _this.tx);
		} else {
			tmp = 0;
		}
		this.__offsetX = tmp;
		var tmp;
		if(this.__defaultRenderTarget == null) {
			var _this = this.__worldTransform;
			tmp = Math.round(0 * _this.b + 0 * _this.d + _this.ty);
		} else {
			tmp = 0;
		}
		this.__offsetY = tmp;
		var tmp;
		if(this.__defaultRenderTarget == null) {
			var _this = this.__worldTransform;
			tmp = Math.round(w * _this.a + 0 * _this.c + _this.tx - this.__offsetX);
		} else {
			tmp = w;
		}
		this.__displayWidth = tmp;
		var tmp;
		if(this.__defaultRenderTarget == null) {
			var _this = this.__worldTransform;
			tmp = Math.round(0 * _this.b + h * _this.d + _this.ty - this.__offsetY);
		} else {
			tmp = h;
		}
		this.__displayHeight = tmp;
		lime_math_Matrix4.createOrtho(this.__projection,0,this.__displayWidth + this.__offsetX * 2,0,this.__displayHeight + this.__offsetY * 2,-1000,1000);
		lime_math_Matrix4.createOrtho(this.__projectionFlipped,0,this.__displayWidth + this.__offsetX * 2,this.__displayHeight + this.__offsetY * 2,0,-1000,1000);
	}
	,__resumeClipAndMask: function(childRenderer) {
		if(this.__stencilReference > 0) {
			this.__context3D.setStencilActions(2,1,5,5,5);
			this.__context3D.setStencilReferenceValue(this.__stencilReference,255,0);
		} else {
			this.__context3D.setStencilActions();
			this.__context3D.setStencilReferenceValue(0,0,0);
		}
		if(this.__numClipRects > 0) {
			this.__scissorRect(this.__clipRects[this.__numClipRects - 1]);
		} else {
			this.__scissorRect();
		}
	}
	,__scissorRect: function(clipRect) {
		if(clipRect != null) {
			var x = Math.floor(clipRect.x);
			var y = Math.floor(clipRect.y);
			var width = clipRect.width > 0 ? Math.ceil(clipRect.get_right()) - x : 0;
			var height = clipRect.height > 0 ? Math.ceil(clipRect.get_bottom()) - y : 0;
			if(width < 0) {
				width = 0;
			}
			if(height < 0) {
				height = 0;
			}
			openfl_display_OpenGLRenderer.__scissorRectangle.setTo(x,y,width,height);
			this.__context3D.setScissorRectangle(openfl_display_OpenGLRenderer.__scissorRectangle);
		} else {
			this.__context3D.setScissorRectangle(null);
		}
	}
	,__setBlendMode: function(value) {
		if(this.__overrideBlendMode != null) {
			value = this.__overrideBlendMode;
		}
		if(this.__blendMode == value) {
			return;
		}
		this.__blendMode = value;
		switch(value) {
		case 0:
			this.__context3D.setBlendFactors(2,2);
			break;
		case 9:
			this.__context3D.setBlendFactors(1,5);
			break;
		case 12:
			this.__context3D.setBlendFactors(2,6);
			break;
		case 14:
			this.__context3D.setBlendFactors(2,2);
			this.__context3D.__setGLBlendEquation(this.__gl.FUNC_REVERSE_SUBTRACT);
			break;
		default:
			this.__context3D.setBlendFactors(2,5);
		}
	}
	,__setRenderTarget: function(renderTarget) {
		this.__defaultRenderTarget = renderTarget;
		this.__flipped = renderTarget == null;
		if(renderTarget != null) {
			this.__resize(renderTarget.width,renderTarget.height);
		}
	}
	,__setShaderBuffer: function(shaderBuffer) {
		this.setShader(shaderBuffer.shader);
		this.__currentShaderBuffer = shaderBuffer;
	}
	,__suspendClipAndMask: function() {
		if(this.__stencilReference > 0) {
			this.__context3D.setStencilActions();
			this.__context3D.setStencilReferenceValue(0,0,0);
		}
		if(this.__numClipRects > 0) {
			this.__scissorRect();
		}
	}
	,__updateShaderBuffer: function(bufferOffset) {
		if(this.__currentShader != null && this.__currentShaderBuffer != null) {
			this.__currentShader.__updateFromBuffer(this.__currentShaderBuffer,bufferOffset);
		}
	}
	,__class__: openfl_display_OpenGLRenderer
});
var openfl_display_PNGEncoderOptions = function(fastCompression) {
	if(fastCompression == null) {
		fastCompression = false;
	}
	this.fastCompression = fastCompression;
};
$hxClasses["openfl.display.PNGEncoderOptions"] = openfl_display_PNGEncoderOptions;
openfl_display_PNGEncoderOptions.__name__ = "openfl.display.PNGEncoderOptions";
openfl_display_PNGEncoderOptions.prototype = {
	fastCompression: null
	,__class__: openfl_display_PNGEncoderOptions
};
var openfl_display_PixelSnapping = {};
openfl_display_PixelSnapping.fromString = function(value) {
	switch(value) {
	case "always":
		return 0;
	case "auto":
		return 1;
	case "never":
		return 2;
	default:
		return null;
	}
};
openfl_display_PixelSnapping.toString = function(this1) {
	switch(this1) {
	case 0:
		return "always";
	case 1:
		return "auto";
	case 2:
		return "never";
	default:
		return null;
	}
};
var openfl_display_Preloader = function(display) {
	this.onComplete = new lime_app__$Event_$Void_$Void();
	this.display = display;
	if(display != null) {
		display.addEventListener("unload",$bind(this,this.display_onUnload));
		openfl_Lib.get_current().addChild(display);
	}
};
$hxClasses["openfl.display.Preloader"] = openfl_display_Preloader;
openfl_display_Preloader.__name__ = "openfl.display.Preloader";
openfl_display_Preloader.prototype = {
	onComplete: null
	,complete: null
	,display: null
	,ready: null
	,start: function() {
		this.ready = true;
		openfl_Lib.get_current().get_loaderInfo().__complete();
		if(this.display != null) {
			var complete = new openfl_events_Event("complete",true,true);
			this.display.dispatchEvent(complete);
			if(!complete.isDefaultPrevented()) {
				this.display.dispatchEvent(new openfl_events_Event("unload"));
			}
		} else if(!this.complete) {
			this.complete = true;
			this.onComplete.dispatch();
		}
	}
	,update: function(loaded,total) {
		openfl_Lib.get_current().get_loaderInfo().__update(loaded,total);
		if(this.display != null) {
			this.display.dispatchEvent(new openfl_events_ProgressEvent("progress",true,true,loaded,total));
		}
	}
	,display_onUnload: function(event) {
		if(this.display != null) {
			this.display.removeEventListener("unload",$bind(this,this.display_onUnload));
			if(this.display.parent == openfl_Lib.get_current()) {
				openfl_Lib.get_current().removeChild(this.display);
			}
			openfl_Lib.get_current().stage.set_focus(null);
			this.display = null;
		}
		if(this.ready) {
			if(!this.complete) {
				this.complete = true;
				this.onComplete.dispatch();
			}
		}
	}
	,__class__: openfl_display_Preloader
};
var openfl_display_DefaultPreloader = function() {
	openfl_display_Sprite.call(this);
	var backgroundColor = this.getBackgroundColor();
	var r = backgroundColor >> 16 & 255;
	var g = backgroundColor >> 8 & 255;
	var b = backgroundColor & 255;
	var perceivedLuminosity = 0.299 * r + 0.587 * g + 0.114 * b;
	var color = 0;
	if(perceivedLuminosity < 70) {
		color = 16777215;
	}
	var x = 30;
	var height = 7;
	var y = this.getHeight() / 2 - height / 2;
	var width = this.getWidth() - x * 2;
	var padding = 2;
	this.outline = new openfl_display_Sprite();
	this.outline.get_graphics().beginFill(color,0.07);
	this.outline.get_graphics().drawRect(0,0,width,height);
	this.outline.set_x(x);
	this.outline.set_y(y);
	this.outline.set_alpha(0);
	this.addChild(this.outline);
	this.progress = new openfl_display_Sprite();
	this.progress.get_graphics().beginFill(color,0.35);
	this.progress.get_graphics().drawRect(0,0,width - padding * 2,height - padding * 2);
	this.progress.set_x(x + padding);
	this.progress.set_y(y + padding);
	this.progress.set_scaleX(0);
	this.progress.set_alpha(0);
	this.addChild(this.progress);
	this.startAnimation = openfl_Lib.getTimer() + 100;
	this.endAnimation = this.startAnimation + 1000;
	this.addEventListener("addedToStage",$bind(this,this.this_onAddedToStage));
};
$hxClasses["openfl.display.DefaultPreloader"] = openfl_display_DefaultPreloader;
openfl_display_DefaultPreloader.__name__ = "openfl.display.DefaultPreloader";
openfl_display_DefaultPreloader.__super__ = openfl_display_Sprite;
openfl_display_DefaultPreloader.prototype = $extend(openfl_display_Sprite.prototype,{
	endAnimation: null
	,outline: null
	,progress: null
	,startAnimation: null
	,getBackgroundColor: function() {
		var attributes = openfl_Lib.get_current().stage.window.context.attributes;
		if(Object.prototype.hasOwnProperty.call(attributes,"background") && attributes.background != null) {
			return attributes.background;
		} else {
			return 0;
		}
	}
	,getHeight: function() {
		var height = openfl_Lib.get_current().stage.window.__height;
		if(height > 0) {
			return height;
		} else {
			return openfl_Lib.get_current().stage.stageHeight;
		}
	}
	,getWidth: function() {
		var width = openfl_Lib.get_current().stage.window.__width;
		if(width > 0) {
			return width;
		} else {
			return openfl_Lib.get_current().stage.stageWidth;
		}
	}
	,onInit: function() {
		this.addEventListener("enterFrame",$bind(this,this.this_onEnterFrame));
	}
	,onLoaded: function() {
		this.removeEventListener("enterFrame",$bind(this,this.this_onEnterFrame));
		this.dispatchEvent(new openfl_events_Event("unload"));
	}
	,onUpdate: function(bytesLoaded,bytesTotal) {
		var percentLoaded = 0.0;
		if(bytesTotal > 0) {
			percentLoaded = bytesLoaded / bytesTotal;
			if(percentLoaded > 1) {
				percentLoaded = 1;
			}
		}
		this.progress.set_scaleX(percentLoaded);
	}
	,this_onAddedToStage: function(event) {
		this.removeEventListener("addedToStage",$bind(this,this.this_onAddedToStage));
		this.onInit();
		this.onUpdate(this.get_loaderInfo().bytesLoaded,this.get_loaderInfo().bytesTotal);
		this.addEventListener("progress",$bind(this,this.this_onProgress));
		this.addEventListener("complete",$bind(this,this.this_onComplete));
	}
	,this_onComplete: function(event) {
		event.preventDefault();
		this.removeEventListener("progress",$bind(this,this.this_onProgress));
		this.removeEventListener("complete",$bind(this,this.this_onComplete));
		this.onLoaded();
	}
	,this_onEnterFrame: function(event) {
		var elapsed = openfl_Lib.getTimer() - this.startAnimation;
		var total = this.endAnimation - this.startAnimation;
		var percent = elapsed / total;
		if(percent < 0) {
			percent = 0;
		}
		if(percent > 1) {
			percent = 1;
		}
		this.outline.set_alpha(percent);
		this.progress.set_alpha(percent);
	}
	,this_onProgress: function(event) {
		this.onUpdate(event.bytesLoaded | 0,event.bytesTotal | 0);
	}
	,__class__: openfl_display_DefaultPreloader
});
var openfl_display_ShaderData = {};
openfl_display_ShaderData._new = function(byteArray) {
	var this1 = { };
	return this1;
};
var openfl_display_ShaderInput = function() {
	this.channels = 0;
	this.filter = 5;
	this.height = 0;
	this.index = 0;
	this.mipFilter = 2;
	this.width = 0;
	this.wrap = 0;
};
$hxClasses["openfl.display.ShaderInput"] = openfl_display_ShaderInput;
openfl_display_ShaderInput.__name__ = "openfl.display.ShaderInput";
openfl_display_ShaderInput.prototype = {
	channels: null
	,filter: null
	,height: null
	,index: null
	,input: null
	,mipFilter: null
	,name: null
	,width: null
	,wrap: null
	,__isUniform: null
	,__disableGL: function(context,id) {
		var gl = context.gl;
		context.setTextureAt(id,null);
	}
	,__updateGL: function(context,id,overrideInput,overrideFilter,overrideMipFilter,overrideWrap) {
		var gl = context.gl;
		var input = overrideInput != null ? overrideInput : this.input;
		var filter = overrideFilter != null ? overrideFilter : this.filter;
		var mipFilter = overrideMipFilter != null ? overrideMipFilter : this.mipFilter;
		var wrap = overrideWrap != null ? overrideWrap : this.wrap;
		if(input != null) {
			var bitmapData = input;
			context.setTextureAt(id,bitmapData.getTexture(context));
			context.setSamplerStateAt(id,wrap,filter,mipFilter);
		} else {
			context.setTextureAt(id,null);
		}
	}
	,__class__: openfl_display_ShaderInput
};
var openfl_display_ShaderParameter = function() {
	this.index = 0;
};
$hxClasses["openfl.display.ShaderParameter"] = openfl_display_ShaderParameter;
openfl_display_ShaderParameter.__name__ = "openfl.display.ShaderParameter";
openfl_display_ShaderParameter.prototype = {
	index: null
	,name: null
	,type: null
	,value: null
	,__arrayLength: null
	,__internal: null
	,__isBool: null
	,__isFloat: null
	,__isInt: null
	,__isUniform: null
	,__length: null
	,__uniformMatrix: null
	,__useArray: null
	,__disableGL: function(context) {
		var gl = context.gl;
		if(!this.__isUniform) {
			var _g = 0;
			var _g1 = this.__arrayLength;
			while(_g < _g1) {
				var i = _g++;
				gl.disableVertexAttribArray(this.index + i);
			}
		}
	}
	,__updateGL: function(context,overrideValue) {
		var gl = context.gl;
		var value = overrideValue != null ? overrideValue : this.value;
		var boolValue = this.__isBool ? value : null;
		var floatValue = this.__isFloat ? value : null;
		var intValue = this.__isInt ? value : null;
		if(this.__isUniform) {
			if(value != null && value.length >= this.__length) {
				switch(this.type) {
				case 0:
					gl.uniform1i(this.index,boolValue[0] ? 1 : 0);
					break;
				case 1:
					gl.uniform2i(this.index,boolValue[0] ? 1 : 0,boolValue[1] ? 1 : 0);
					break;
				case 2:
					gl.uniform3i(this.index,boolValue[0] ? 1 : 0,boolValue[1] ? 1 : 0,boolValue[2] ? 1 : 0);
					break;
				case 3:
					gl.uniform4i(this.index,boolValue[0] ? 1 : 0,boolValue[1] ? 1 : 0,boolValue[2] ? 1 : 0,boolValue[3] ? 1 : 0);
					break;
				case 4:
					gl.uniform1f(this.index,floatValue[0]);
					break;
				case 5:
					gl.uniform2f(this.index,floatValue[0],floatValue[1]);
					break;
				case 6:
					gl.uniform3f(this.index,floatValue[0],floatValue[1],floatValue[2]);
					break;
				case 7:
					gl.uniform4f(this.index,floatValue[0],floatValue[1],floatValue[2],floatValue[3]);
					break;
				case 8:
					gl.uniform1i(this.index,intValue[0]);
					break;
				case 9:
					gl.uniform2i(this.index,intValue[0],intValue[1]);
					break;
				case 10:
					gl.uniform3i(this.index,intValue[0],intValue[1],intValue[2]);
					break;
				case 11:
					gl.uniform4i(this.index,intValue[0],intValue[1],intValue[2],intValue[3]);
					break;
				case 12:
					this.__uniformMatrix[0] = floatValue[0];
					this.__uniformMatrix[1] = floatValue[1];
					this.__uniformMatrix[2] = floatValue[2];
					this.__uniformMatrix[3] = floatValue[3];
					lime_graphics_WebGLRenderContext.uniformMatrix2fv(gl,this.index,false,this.__uniformMatrix);
					break;
				case 16:
					this.__uniformMatrix[0] = floatValue[0];
					this.__uniformMatrix[1] = floatValue[1];
					this.__uniformMatrix[2] = floatValue[2];
					this.__uniformMatrix[3] = floatValue[3];
					this.__uniformMatrix[4] = floatValue[4];
					this.__uniformMatrix[5] = floatValue[5];
					this.__uniformMatrix[6] = floatValue[6];
					this.__uniformMatrix[7] = floatValue[7];
					this.__uniformMatrix[8] = floatValue[8];
					lime_graphics_WebGLRenderContext.uniformMatrix3fv(gl,this.index,false,this.__uniformMatrix);
					break;
				case 20:
					this.__uniformMatrix[0] = floatValue[0];
					this.__uniformMatrix[1] = floatValue[1];
					this.__uniformMatrix[2] = floatValue[2];
					this.__uniformMatrix[3] = floatValue[3];
					this.__uniformMatrix[4] = floatValue[4];
					this.__uniformMatrix[5] = floatValue[5];
					this.__uniformMatrix[6] = floatValue[6];
					this.__uniformMatrix[7] = floatValue[7];
					this.__uniformMatrix[8] = floatValue[8];
					this.__uniformMatrix[9] = floatValue[9];
					this.__uniformMatrix[10] = floatValue[10];
					this.__uniformMatrix[11] = floatValue[11];
					this.__uniformMatrix[12] = floatValue[12];
					this.__uniformMatrix[13] = floatValue[13];
					this.__uniformMatrix[14] = floatValue[14];
					this.__uniformMatrix[15] = floatValue[15];
					lime_graphics_WebGLRenderContext.uniformMatrix4fv(gl,this.index,false,this.__uniformMatrix);
					break;
				default:
				}
			} else {
				switch(this.type) {
				case 1:case 9:
					gl.uniform2i(this.index,0,0);
					break;
				case 3:case 11:
					gl.uniform4i(this.index,0,0,0,0);
					break;
				case 4:
					gl.uniform1f(this.index,0);
					break;
				case 5:
					gl.uniform2f(this.index,0,0);
					break;
				case 6:
					gl.uniform3f(this.index,0,0,0);
					break;
				case 7:
					gl.uniform4f(this.index,0,0,0,0);
					break;
				case 0:case 8:
					gl.uniform1i(this.index,0);
					break;
				case 2:case 10:
					gl.uniform3i(this.index,0,0,0);
					break;
				case 12:
					this.__uniformMatrix[0] = 0;
					this.__uniformMatrix[1] = 0;
					this.__uniformMatrix[2] = 0;
					this.__uniformMatrix[3] = 0;
					lime_graphics_WebGLRenderContext.uniformMatrix2fv(gl,this.index,false,this.__uniformMatrix);
					break;
				case 16:
					this.__uniformMatrix[0] = 0;
					this.__uniformMatrix[1] = 0;
					this.__uniformMatrix[2] = 0;
					this.__uniformMatrix[3] = 0;
					this.__uniformMatrix[4] = 0;
					this.__uniformMatrix[5] = 0;
					this.__uniformMatrix[6] = 0;
					this.__uniformMatrix[7] = 0;
					this.__uniformMatrix[8] = 0;
					lime_graphics_WebGLRenderContext.uniformMatrix3fv(gl,this.index,false,this.__uniformMatrix);
					break;
				case 20:
					this.__uniformMatrix[0] = 0;
					this.__uniformMatrix[1] = 0;
					this.__uniformMatrix[2] = 0;
					this.__uniformMatrix[3] = 0;
					this.__uniformMatrix[4] = 0;
					this.__uniformMatrix[5] = 0;
					this.__uniformMatrix[6] = 0;
					this.__uniformMatrix[7] = 0;
					this.__uniformMatrix[8] = 0;
					this.__uniformMatrix[9] = 0;
					this.__uniformMatrix[10] = 0;
					this.__uniformMatrix[11] = 0;
					this.__uniformMatrix[12] = 0;
					this.__uniformMatrix[13] = 0;
					this.__uniformMatrix[14] = 0;
					this.__uniformMatrix[15] = 0;
					lime_graphics_WebGLRenderContext.uniformMatrix4fv(gl,this.index,false,this.__uniformMatrix);
					break;
				default:
				}
			}
		} else if(!this.__useArray && (value == null || value.length == this.__length)) {
			var _g = 0;
			var _g1 = this.__arrayLength;
			while(_g < _g1) {
				var i = _g++;
				gl.disableVertexAttribArray(this.index + i);
			}
			if(value != null) {
				switch(this.type) {
				case 0:
					gl.vertexAttrib1f(this.index,boolValue[0] ? 1 : 0);
					break;
				case 1:
					gl.vertexAttrib2f(this.index,boolValue[0] ? 1 : 0,boolValue[1] ? 1 : 0);
					break;
				case 2:
					gl.vertexAttrib3f(this.index,boolValue[0] ? 1 : 0,boolValue[1] ? 1 : 0,boolValue[2] ? 1 : 0);
					break;
				case 3:
					gl.vertexAttrib4f(this.index,boolValue[0] ? 1 : 0,boolValue[1] ? 1 : 0,boolValue[2] ? 1 : 0,boolValue[3] ? 1 : 0);
					break;
				case 4:
					gl.vertexAttrib1f(this.index,floatValue[0]);
					break;
				case 5:
					gl.vertexAttrib2f(this.index,floatValue[0],floatValue[1]);
					break;
				case 6:
					gl.vertexAttrib3f(this.index,floatValue[0],floatValue[1],floatValue[2]);
					break;
				case 7:
					gl.vertexAttrib4f(this.index,floatValue[0],floatValue[1],floatValue[2],floatValue[3]);
					break;
				case 8:
					gl.vertexAttrib1f(this.index,intValue[0]);
					break;
				case 9:
					gl.vertexAttrib2f(this.index,intValue[0],intValue[1]);
					break;
				case 10:
					gl.vertexAttrib3f(this.index,intValue[0],intValue[1],intValue[2]);
					break;
				case 11:
					gl.vertexAttrib4f(this.index,intValue[0],intValue[1],intValue[2],intValue[3]);
					break;
				case 12:
					gl.vertexAttrib2f(this.index + 0,floatValue[0],floatValue[1]);
					gl.vertexAttrib2f(this.index + 1,floatValue[2],floatValue[3]);
					break;
				case 16:
					gl.vertexAttrib3f(this.index + 0,floatValue[0],floatValue[1],floatValue[2]);
					gl.vertexAttrib3f(this.index + 1,floatValue[3],floatValue[4],floatValue[5]);
					gl.vertexAttrib3f(this.index + 2,floatValue[6],floatValue[7],floatValue[8]);
					break;
				case 20:
					gl.vertexAttrib4f(this.index + 0,floatValue[0],floatValue[1],floatValue[2],floatValue[3]);
					gl.vertexAttrib4f(this.index + 1,floatValue[4],floatValue[5],floatValue[6],floatValue[7]);
					gl.vertexAttrib4f(this.index + 2,floatValue[8],floatValue[9],floatValue[10],floatValue[11]);
					gl.vertexAttrib4f(this.index + 3,floatValue[12],floatValue[13],floatValue[14],floatValue[15]);
					break;
				default:
				}
			} else {
				switch(this.type) {
				case 1:case 5:case 9:
					gl.vertexAttrib2f(this.index,0,0);
					break;
				case 3:case 7:case 11:
					gl.vertexAttrib4f(this.index,0,0,0,0);
					break;
				case 0:case 4:case 8:
					gl.vertexAttrib1f(this.index,0);
					break;
				case 2:case 6:case 10:
					gl.vertexAttrib3f(this.index,0,0,0);
					break;
				case 12:
					gl.vertexAttrib2f(this.index + 0,0,0);
					gl.vertexAttrib2f(this.index + 1,0,0);
					break;
				case 16:
					gl.vertexAttrib3f(this.index + 0,0,0,0);
					gl.vertexAttrib3f(this.index + 1,0,0,0);
					gl.vertexAttrib3f(this.index + 2,0,0,0);
					break;
				case 20:
					gl.vertexAttrib4f(this.index + 0,0,0,0,0);
					gl.vertexAttrib4f(this.index + 1,0,0,0,0);
					gl.vertexAttrib4f(this.index + 2,0,0,0,0);
					gl.vertexAttrib4f(this.index + 3,0,0,0,0);
					break;
				default:
				}
			}
		} else {
			var _g = 0;
			var _g1 = this.__arrayLength;
			while(_g < _g1) {
				var i = _g++;
				gl.enableVertexAttribArray(this.index + i);
			}
		}
	}
	,__updateGLFromBuffer: function(context,buffer,position,length,bufferOffset) {
		var gl = context.gl;
		if(this.__isUniform) {
			if(length >= this.__length) {
				switch(this.type) {
				case 1:case 9:
					gl.uniform2i(this.index,buffer[position] | 0,buffer[position + 1] | 0);
					break;
				case 3:case 11:
					gl.uniform4i(this.index,buffer[position] | 0,buffer[position + 1] | 0,buffer[position + 2] | 0,buffer[position + 3] | 0);
					break;
				case 4:
					gl.uniform1f(this.index,buffer[position]);
					break;
				case 5:
					gl.uniform2f(this.index,buffer[position],buffer[position + 1]);
					break;
				case 6:
					gl.uniform3f(this.index,buffer[position],buffer[position + 1],buffer[position + 2]);
					break;
				case 7:
					gl.uniform4f(this.index,buffer[position],buffer[position + 1],buffer[position + 2],buffer[position + 3]);
					break;
				case 0:case 8:
					gl.uniform1i(this.index,buffer[position] | 0);
					break;
				case 2:case 10:
					gl.uniform3i(this.index,buffer[position] | 0,buffer[position + 1] | 0,buffer[position + 2] | 0);
					break;
				case 12:
					this.__uniformMatrix[0] = buffer[position];
					this.__uniformMatrix[1] = buffer[position + 1];
					this.__uniformMatrix[2] = buffer[position + 2];
					this.__uniformMatrix[3] = buffer[position + 3];
					lime_graphics_WebGLRenderContext.uniformMatrix2fv(gl,this.index,false,this.__uniformMatrix);
					break;
				case 16:
					this.__uniformMatrix[0] = buffer[position];
					this.__uniformMatrix[1] = buffer[position + 1];
					this.__uniformMatrix[2] = buffer[position + 2];
					this.__uniformMatrix[3] = buffer[position + 3];
					this.__uniformMatrix[4] = buffer[position + 4];
					this.__uniformMatrix[5] = buffer[position + 5];
					this.__uniformMatrix[6] = buffer[position + 6];
					this.__uniformMatrix[7] = buffer[position + 7];
					this.__uniformMatrix[8] = buffer[position + 8];
					lime_graphics_WebGLRenderContext.uniformMatrix3fv(gl,this.index,false,this.__uniformMatrix);
					break;
				case 20:
					this.__uniformMatrix[0] = buffer[position];
					this.__uniformMatrix[1] = buffer[position + 1];
					this.__uniformMatrix[2] = buffer[position + 2];
					this.__uniformMatrix[3] = buffer[position + 3];
					this.__uniformMatrix[4] = buffer[position + 4];
					this.__uniformMatrix[5] = buffer[position + 5];
					this.__uniformMatrix[6] = buffer[position + 6];
					this.__uniformMatrix[7] = buffer[position + 7];
					this.__uniformMatrix[8] = buffer[position + 8];
					this.__uniformMatrix[9] = buffer[position + 9];
					this.__uniformMatrix[10] = buffer[position + 10];
					this.__uniformMatrix[11] = buffer[position + 11];
					this.__uniformMatrix[12] = buffer[position + 12];
					this.__uniformMatrix[13] = buffer[position + 13];
					this.__uniformMatrix[14] = buffer[position + 14];
					this.__uniformMatrix[15] = buffer[position + 15];
					lime_graphics_WebGLRenderContext.uniformMatrix4fv(gl,this.index,false,this.__uniformMatrix);
					break;
				default:
				}
			}
		} else if(!this.__internal && (length == 0 || length == this.__length)) {
			var _g = 0;
			var _g1 = this.__arrayLength;
			while(_g < _g1) {
				var i = _g++;
				gl.disableVertexAttribArray(this.index + i);
			}
			if(length > 0) {
				switch(this.type) {
				case 1:case 5:case 9:
					gl.vertexAttrib2f(this.index,buffer[position],buffer[position + 1]);
					break;
				case 3:case 7:case 11:
					gl.vertexAttrib4f(this.index,buffer[position],buffer[position + 1],buffer[position + 2],buffer[position + 3]);
					break;
				case 0:case 4:case 8:
					gl.vertexAttrib1f(this.index,buffer[position]);
					break;
				case 2:case 6:case 10:
					gl.vertexAttrib3f(this.index,buffer[position],buffer[position + 1],buffer[position + 2]);
					break;
				case 12:
					gl.vertexAttrib2f(this.index + 0,buffer[position],buffer[position + 1]);
					gl.vertexAttrib2f(this.index + 1,buffer[position + 2],buffer[position + 2 + 1]);
					break;
				case 16:
					gl.vertexAttrib3f(this.index + 0,buffer[position],buffer[position + 1],buffer[position + 2]);
					gl.vertexAttrib3f(this.index + 1,buffer[position + 3],buffer[position + 3 + 1],buffer[position + 3 + 2]);
					gl.vertexAttrib3f(this.index + 2,buffer[position + 6],buffer[position + 6 + 1],buffer[position + 6 + 2]);
					break;
				case 20:
					gl.vertexAttrib4f(this.index + 0,buffer[position],buffer[position + 1],buffer[position + 2],buffer[position + 3]);
					gl.vertexAttrib4f(this.index + 1,buffer[position + 4],buffer[position + 4 + 1],buffer[position + 4 + 2],buffer[position + 4 + 3]);
					gl.vertexAttrib4f(this.index + 2,buffer[position + 8],buffer[position + 8 + 1],buffer[position + 8 + 2],buffer[position + 8 + 3]);
					gl.vertexAttrib4f(this.index + 3,buffer[position + 12],buffer[position + 12 + 1],buffer[position + 12 + 2],buffer[position + 12 + 3]);
					break;
				default:
				}
			} else {
				switch(this.type) {
				case 1:case 5:case 9:
					gl.vertexAttrib2f(this.index,0,0);
					break;
				case 3:case 7:case 11:
					gl.vertexAttrib4f(this.index,0,0,0,0);
					break;
				case 0:case 4:case 8:
					gl.vertexAttrib1f(this.index,0);
					break;
				case 2:case 6:case 10:
					gl.vertexAttrib3f(this.index,0,0,0);
					break;
				case 12:
					gl.vertexAttrib2f(this.index + 0,0,0);
					gl.vertexAttrib2f(this.index + 1,0,0);
					break;
				case 16:
					gl.vertexAttrib3f(this.index + 0,0,0,0);
					gl.vertexAttrib3f(this.index + 1,0,0,0);
					gl.vertexAttrib3f(this.index + 2,0,0,0);
					break;
				case 20:
					gl.vertexAttrib4f(this.index + 0,0,0,0,0);
					gl.vertexAttrib4f(this.index + 1,0,0,0,0);
					gl.vertexAttrib4f(this.index + 2,0,0,0,0);
					gl.vertexAttrib4f(this.index + 3,0,0,0,0);
					break;
				default:
				}
			}
		} else {
			var type = gl.FLOAT;
			if(this.__isBool) {
				type = gl.INT;
			} else if(this.__isInt) {
				type = gl.INT;
			}
			var _g = 0;
			var _g1 = this.__arrayLength;
			while(_g < _g1) {
				var i = _g++;
				gl.enableVertexAttribArray(this.index + i);
			}
			if(length > 0) {
				var _g = 0;
				var _g1 = this.__arrayLength;
				while(_g < _g1) {
					var i = _g++;
					gl.vertexAttribPointer(this.index + i,this.__length,type,false,this.__length * 4,(position + bufferOffset * this.__length + i * this.__arrayLength) * 4);
				}
			}
		}
	}
	,set_name: function(value) {
		this.__internal = StringTools.startsWith(value,"openfl_");
		return this.name = value;
	}
	,__class__: openfl_display_ShaderParameter
	,__properties__: {set_name:"set_name"}
};
var openfl_display_ShaderParameterType = {};
openfl_display_ShaderParameterType.fromString = function(value) {
	switch(value) {
	case "bool":
		return 0;
	case "bool2":
		return 1;
	case "bool3":
		return 1;
	case "bool4":
		return 1;
	case "float":
		return 4;
	case "float2":
		return 5;
	case "float3":
		return 6;
	case "float4":
		return 7;
	case "int":
		return 8;
	case "int2":
		return 9;
	case "int3":
		return 10;
	case "int4":
		return 11;
	case "matrix2x2":
		return 12;
	case "matrix2x3":
		return 13;
	case "matrix2x4":
		return 14;
	case "matrix3x2":
		return 15;
	case "matrix3x3":
		return 16;
	case "matrix3x4":
		return 17;
	case "matrix4x2":
		return 18;
	case "matrix4x3":
		return 19;
	case "matrix4x4":
		return 20;
	default:
		return null;
	}
};
openfl_display_ShaderParameterType.toString = function(this1) {
	switch(this1) {
	case 0:
		return "bool";
	case 1:
		return "bool2";
	case 2:
		return "bool3";
	case 3:
		return "bool4";
	case 4:
		return "float";
	case 5:
		return "float2";
	case 6:
		return "float3";
	case 7:
		return "float4";
	case 8:
		return "int";
	case 9:
		return "int2";
	case 10:
		return "int3";
	case 11:
		return "int4";
	case 12:
		return "matrix2x2";
	case 13:
		return "matrix2x3";
	case 14:
		return "matrix2x4";
	case 15:
		return "matrix3x2";
	case 16:
		return "matrix3x3";
	case 17:
		return "matrix3x4";
	case 18:
		return "matrix4x2";
	case 19:
		return "matrix4x3";
	case 20:
		return "matrix4x4";
	default:
		return null;
	}
};
var openfl_display_ShaderPrecision = {};
openfl_display_ShaderPrecision.fromString = function(value) {
	switch(value) {
	case "fast":
		return 0;
	case "full":
		return 1;
	default:
		return null;
	}
};
openfl_display_ShaderPrecision.toString = function(this1) {
	switch(this1) {
	case 0:
		return "fast";
	case 1:
		return "full";
	default:
		return null;
	}
};
var openfl_display_Shape = function() {
	openfl_display_DisplayObject.call(this);
};
$hxClasses["openfl.display.Shape"] = openfl_display_Shape;
openfl_display_Shape.__name__ = "openfl.display.Shape";
openfl_display_Shape.__super__ = openfl_display_DisplayObject;
openfl_display_Shape.prototype = $extend(openfl_display_DisplayObject.prototype,{
	get_graphics: function() {
		if(this.__graphics == null) {
			this.__graphics = new openfl_display_Graphics(this);
		}
		return this.__graphics;
	}
	,__class__: openfl_display_Shape
	,__properties__: $extend(openfl_display_DisplayObject.prototype.__properties__,{get_graphics:"get_graphics"})
});
var openfl_display_SimpleButton = function(upState,overState,downState,hitTestState) {
	openfl_display_InteractiveObject.call(this);
	this.enabled = true;
	this.trackAsMenu = false;
	this.useHandCursor = true;
	this.__upState = upState != null ? upState : new openfl_display_DisplayObject();
	this.__overState = overState;
	this.__downState = downState;
	this.set_hitTestState(hitTestState != null ? hitTestState : new openfl_display_DisplayObject());
	this.addEventListener("mouseDown",$bind(this,this.__this_onMouseDown));
	this.addEventListener("mouseOut",$bind(this,this.__this_onMouseOut));
	this.addEventListener("mouseOver",$bind(this,this.__this_onMouseOver));
	this.addEventListener("mouseUp",$bind(this,this.__this_onMouseUp));
	this.__tabEnabled = true;
	this.set___currentState(this.__upState);
	if(openfl_display_SimpleButton.__initSymbol != null) {
		var swf = openfl_display_SimpleButton.__initSWF;
		this.__symbol = openfl_display_SimpleButton.__initSymbol;
		openfl_display_SimpleButton.__initSWF = null;
		openfl_display_SimpleButton.__initSymbol = null;
		this.__fromSymbol(swf,this.__symbol);
	}
};
$hxClasses["openfl.display.SimpleButton"] = openfl_display_SimpleButton;
openfl_display_SimpleButton.__name__ = "openfl.display.SimpleButton";
openfl_display_SimpleButton.__super__ = openfl_display_InteractiveObject;
openfl_display_SimpleButton.prototype = $extend(openfl_display_InteractiveObject.prototype,{
	enabled: null
	,trackAsMenu: null
	,useHandCursor: null
	,__currentState: null
	,__downState: null
	,__hitTestState: null
	,__ignoreEvent: null
	,__overState: null
	,__previousStates: null
	,__soundTransform: null
	,__symbol: null
	,__upState: null
	,__fromSymbol: function(swf,symbol) {
		this.__symbol = symbol;
		if(symbol.downState != null) {
			this.set_downState(symbol.downState.__createObject(swf));
		}
		if(symbol.hitState != null) {
			this.set_hitTestState(symbol.hitState.__createObject(swf));
		}
		if(symbol.overState != null) {
			this.set_overState(symbol.overState.__createObject(swf));
		}
		if(symbol.upState != null) {
			this.set_upState(symbol.upState.__createObject(swf));
		}
	}
	,__getBounds: function(rect,matrix) {
		openfl_display_InteractiveObject.prototype.__getBounds.call(this,rect,matrix);
		var childWorldTransform = openfl_geom_Matrix.__pool.get();
		var local = this.__currentState.__transform;
		childWorldTransform.a = local.a * matrix.a + local.b * matrix.c;
		childWorldTransform.b = local.a * matrix.b + local.b * matrix.d;
		childWorldTransform.c = local.c * matrix.a + local.d * matrix.c;
		childWorldTransform.d = local.c * matrix.b + local.d * matrix.d;
		childWorldTransform.tx = local.tx * matrix.a + local.ty * matrix.c + matrix.tx;
		childWorldTransform.ty = local.tx * matrix.b + local.ty * matrix.d + matrix.ty;
		this.__currentState.__getBounds(rect,childWorldTransform);
		openfl_geom_Matrix.__pool.release(childWorldTransform);
	}
	,__getRenderBounds: function(rect,matrix) {
		if(this.__scrollRect != null) {
			openfl_display_InteractiveObject.prototype.__getRenderBounds.call(this,rect,matrix);
			return;
		} else {
			openfl_display_InteractiveObject.prototype.__getBounds.call(this,rect,matrix);
		}
		var childWorldTransform = openfl_geom_Matrix.__pool.get();
		var local = this.__currentState.__transform;
		childWorldTransform.a = local.a * matrix.a + local.b * matrix.c;
		childWorldTransform.b = local.a * matrix.b + local.b * matrix.d;
		childWorldTransform.c = local.c * matrix.a + local.d * matrix.c;
		childWorldTransform.d = local.c * matrix.b + local.d * matrix.d;
		childWorldTransform.tx = local.tx * matrix.a + local.ty * matrix.c + matrix.tx;
		childWorldTransform.ty = local.tx * matrix.b + local.ty * matrix.d + matrix.ty;
		this.__currentState.__getRenderBounds(rect,childWorldTransform);
		openfl_geom_Matrix.__pool.release(childWorldTransform);
	}
	,__getCursor: function() {
		if(this.useHandCursor && !this.__ignoreEvent && this.enabled) {
			return "button";
		} else {
			return null;
		}
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly,hitObject) {
		var hitTest = false;
		if(this.get_hitTestState() != null) {
			if(this.get_hitTestState().__hitTest(x,y,shapeFlag,stack,interactiveOnly,hitObject)) {
				if(stack != null) {
					if(stack.length == 0) {
						stack[0] = hitObject;
					} else {
						stack[stack.length - 1] = hitObject;
					}
				}
				hitTest = !interactiveOnly || this.mouseEnabled;
			}
		} else if(this.__currentState != null) {
			if(!hitObject.get_visible() || this.__isMask || interactiveOnly && !this.mouseEnabled) {
				return false;
			}
			if(this.get_mask() != null && !this.get_mask().__hitTestMask(x,y)) {
				return false;
			}
			if(this.__currentState.__hitTest(x,y,shapeFlag,stack,interactiveOnly,hitObject)) {
				hitTest = interactiveOnly;
			}
		}
		if(stack != null) {
			while(stack.length > 1 && stack[stack.length - 1] == stack[stack.length - 2]) stack.pop();
		}
		return hitTest;
	}
	,__hitTestMask: function(x,y) {
		var hitTest = false;
		if(this.__currentState.__hitTestMask(x,y)) {
			hitTest = true;
		}
		return hitTest;
	}
	,__renderCairo: function(renderer) {
		if(!this.__renderable || this.__worldAlpha <= 0 || this.__currentState == null) {
			return;
		}
		renderer.__pushMaskObject(this);
		this.__currentState.__renderCairo(renderer);
		renderer.__popMaskObject(this);
		this.__renderEvent(renderer);
	}
	,__renderCairoMask: function(renderer) {
		this.__currentState.__renderCairoMask(renderer);
	}
	,__renderCanvas: function(renderer) {
		if(!this.__renderable || this.__worldAlpha <= 0 || this.__currentState == null) {
			return;
		}
		renderer.__pushMaskObject(this);
		this.__currentState.__renderCanvas(renderer);
		renderer.__popMaskObject(this);
		this.__renderEvent(renderer);
	}
	,__renderCanvasMask: function(renderer) {
		this.__currentState.__renderCanvasMask(renderer);
	}
	,__renderDOM: function(renderer) {
		renderer.__pushMaskObject(this);
		var previousState = this.__previousStates.iterator();
		while(previousState.hasNext()) {
			var previousState1 = previousState.next();
			previousState1.__renderDOM(renderer);
		}
		this.__previousStates.set_length(0);
		if(this.__currentState != null) {
			if(this.__currentState.stage != this.stage) {
				this.__currentState.__setStageReference(this.stage);
			}
			this.__currentState.__renderDOM(renderer);
		}
		renderer.__popMaskObject(this);
		this.__renderEvent(renderer);
	}
	,__renderGL: function(renderer) {
		if(!this.__renderable || this.__worldAlpha <= 0 || this.__currentState == null) {
			return;
		}
		renderer.__pushMaskObject(this);
		this.__currentState.__renderGL(renderer);
		renderer.__popMaskObject(this);
		this.__renderEvent(renderer);
	}
	,__renderGLMask: function(renderer) {
		if(this.__currentState == null) {
			return;
		}
		this.__currentState.__renderGLMask(renderer);
	}
	,__setStageReference: function(stage) {
		openfl_display_InteractiveObject.prototype.__setStageReference.call(this,stage);
		if(this.__currentState != null) {
			this.__currentState.__setStageReference(stage);
		}
		if(this.get_hitTestState() != null && this.get_hitTestState() != this.__currentState) {
			this.get_hitTestState().__setStageReference(stage);
		}
	}
	,__setTransformDirty: function() {
		openfl_display_InteractiveObject.prototype.__setTransformDirty.call(this);
		if(this.__currentState != null) {
			this.__currentState.__setTransformDirty();
		}
		if(this.get_hitTestState() != null && this.get_hitTestState() != this.__currentState) {
			this.get_hitTestState().__setTransformDirty();
		}
	}
	,__update: function(transformOnly,updateChildren) {
		openfl_display_InteractiveObject.prototype.__update.call(this,transformOnly,updateChildren);
		if(updateChildren) {
			if(this.__currentState != null) {
				this.__currentState.__update(transformOnly,true);
			}
			if(this.get_hitTestState() != null && this.get_hitTestState() != this.__currentState) {
				this.get_hitTestState().__update(transformOnly,true);
			}
		}
	}
	,__updateTransforms: function(overrideTransform) {
		openfl_display_InteractiveObject.prototype.__updateTransforms.call(this,overrideTransform);
		if(this.__currentState != null) {
			this.__currentState.__updateTransforms();
		}
		if(this.get_hitTestState() != null && this.get_hitTestState() != this.__currentState) {
			this.get_hitTestState().__updateTransforms();
		}
	}
	,get_downState: function() {
		return this.__downState;
	}
	,set_downState: function(downState) {
		if(this.__downState != null && this.__currentState == this.__downState) {
			this.set___currentState(this.__downState);
		}
		return this.__downState = downState;
	}
	,get_hitTestState: function() {
		return this.__hitTestState;
	}
	,set_hitTestState: function(hitTestState) {
		if(this.__hitTestState != null && this.__hitTestState != hitTestState) {
			if(this.__hitTestState != this.get_downState() && this.__hitTestState != this.get_upState() && this.__hitTestState != this.get_overState()) {
				this.__hitTestState.__renderParent = null;
			}
		}
		if(hitTestState != null) {
			hitTestState.__renderParent = this;
			if(!hitTestState.__renderDirty) {
				hitTestState.__renderDirty = true;
				hitTestState.__setParentRenderDirty();
			}
		}
		return this.__hitTestState = hitTestState;
	}
	,get_overState: function() {
		return this.__overState;
	}
	,set_overState: function(overState) {
		if(this.__overState != null && this.__currentState == this.__overState) {
			this.set___currentState(overState);
		}
		return this.__overState = overState;
	}
	,get_soundTransform: function() {
		if(this.__soundTransform == null) {
			this.__soundTransform = new openfl_media_SoundTransform();
		}
		return new openfl_media_SoundTransform(this.__soundTransform.volume,this.__soundTransform.pan);
	}
	,set_soundTransform: function(value) {
		this.__soundTransform = new openfl_media_SoundTransform(value.volume,value.pan);
		return value;
	}
	,get_upState: function() {
		return this.__upState;
	}
	,set_upState: function(upState) {
		if(this.__upState != null && this.__currentState == this.__upState) {
			this.set___currentState(upState);
		}
		return this.__upState = upState;
	}
	,set___currentState: function(value) {
		if(this.__currentState != null && this.__currentState != this.get_hitTestState()) {
			this.__currentState.__renderParent = null;
		}
		if(value != null && value.parent != null) {
			value.parent.removeChild(value);
		}
		if(openfl_display_DisplayObject.__supportDOM && this.__previousStates == null) {
			this.__previousStates = openfl_Vector.toObjectVector(null);
		}
		if(value != this.__currentState) {
			if(openfl_display_DisplayObject.__supportDOM) {
				if(this.__currentState != null) {
					this.__currentState.__setStageReference(null);
					this.__previousStates.push(this.__currentState);
				}
				var index = this.__previousStates.indexOf(value,0);
				if(index > -1) {
					this.__previousStates.splice(index,1);
				}
			}
			if(value != null) {
				value.__renderParent = this;
				if(!value.__renderDirty) {
					value.__renderDirty = true;
					value.__setParentRenderDirty();
				}
			}
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		this.__currentState = value;
		return value;
	}
	,__this_onMouseDown: function(event) {
		if(this.enabled) {
			this.set___currentState(this.get_downState());
		}
	}
	,__this_onMouseOut: function(event) {
		this.__ignoreEvent = false;
		if(this.get_upState() != this.__currentState) {
			this.set___currentState(this.get_upState());
		}
	}
	,__this_onMouseOver: function(event) {
		if(event.buttonDown) {
			this.__ignoreEvent = true;
		}
		if(this.get_overState() != this.__currentState && this.get_overState() != null && !this.__ignoreEvent && this.enabled) {
			this.set___currentState(this.get_overState());
		}
	}
	,__this_onMouseUp: function(event) {
		this.__ignoreEvent = false;
		if(this.enabled && this.get_overState() != null) {
			this.set___currentState(this.get_overState());
		} else {
			this.set___currentState(this.get_upState());
		}
	}
	,__class__: openfl_display_SimpleButton
	,__properties__: $extend(openfl_display_InteractiveObject.prototype.__properties__,{set___currentState:"set___currentState",set_upState:"set_upState",get_upState:"get_upState",set_soundTransform:"set_soundTransform",get_soundTransform:"get_soundTransform",set_overState:"set_overState",get_overState:"get_overState",set_hitTestState:"set_hitTestState",get_hitTestState:"get_hitTestState",set_downState:"set_downState",get_downState:"get_downState"})
});
var openfl_display_SpreadMethod = {};
openfl_display_SpreadMethod.fromInt = function(value) {
	return value;
};
openfl_display_SpreadMethod.fromString = function(value) {
	switch(value) {
	case "pad":
		return 0;
	case "reflect":
		return 1;
	case "repeat":
		return 2;
	default:
		return null;
	}
};
openfl_display_SpreadMethod.toInt = function(this1) {
	return this1;
};
openfl_display_SpreadMethod.toString = function(this1) {
	switch(this1) {
	case 0:
		return "pad";
	case 1:
		return "reflect";
	case 2:
		return "repeat";
	default:
		return null;
	}
};
var openfl_display_Stage = function($window,color) {
	openfl_display_DisplayObjectContainer.call(this);
	this.set_name(null);
	this.__color = -1;
	this.__colorSplit = [255,255,255];
	this.__colorString = "#FFFFFF";
	this.__contentsScaleFactor = 1;
	this.__currentTabOrderIndex = 0;
	this.__deltaTime = 0;
	this.__displayState = 2;
	this.__mouseX = 0;
	this.__mouseY = 0;
	this.__lastClickTime = 0;
	this.__logicalWidth = 0;
	this.__logicalHeight = 0;
	this.__displayMatrix = new openfl_geom_Matrix();
	this.__displayRect = new openfl_geom_Rectangle();
	this.__renderDirty = true;
	this.stage3Ds = openfl_Vector.toObjectVector(null);
	this.stage3Ds.push(new openfl_display_Stage3D(this));
	this.stage3Ds.push(new openfl_display_Stage3D(this));
	this.stage3Ds.push(new openfl_display_Stage3D(this));
	this.stage3Ds.push(new openfl_display_Stage3D(this));
	this.stage = this;
	this.align = 6;
	this.allowsFullScreen = true;
	this.allowsFullScreenInteractive = true;
	this.__quality = 1;
	this.__scaleMode = 2;
	this.showDefaultContextMenu = true;
	this.softKeyboardRect = new openfl_geom_Rectangle();
	this.stageFocusRect = true;
	this.__macKeyboard = /AppleWebKit/.test (navigator.userAgent) && /Mobile\/\w+/.test (navigator.userAgent) || /Mac/.test (navigator.platform);
	this.__clearBeforeRender = true;
	this.__forceRender = false;
	this.__stack = [];
	this.__rollOutStack = [];
	this.__mouseOutStack = [];
	this.__touchData = new haxe_ds_IntMap();
	this.application = $window.application;
	this.window = $window;
	this.set_color(color);
	this.__contentsScaleFactor = $window.__scale;
	this.__wasFullscreen = $window.__fullscreen;
	this.__resize();
	if(openfl_Lib.get_current().stage == null) {
		this.stage.addChild(openfl_Lib.get_current());
	}
};
$hxClasses["openfl.display.Stage"] = openfl_display_Stage;
openfl_display_Stage.__name__ = "openfl.display.Stage";
openfl_display_Stage.__interfaces__ = [lime_app_IModule];
openfl_display_Stage.__super__ = openfl_display_DisplayObjectContainer;
openfl_display_Stage.prototype = $extend(openfl_display_DisplayObjectContainer.prototype,{
	align: null
	,allowsFullScreen: null
	,allowsFullScreenInteractive: null
	,application: null
	,context3D: null
	,showDefaultContextMenu: null
	,softKeyboardRect: null
	,stage3Ds: null
	,stageFocusRect: null
	,stageHeight: null
	,stageWidth: null
	,window: null
	,__cacheFocus: null
	,__clearBeforeRender: null
	,__color: null
	,__colorSplit: null
	,__colorString: null
	,__contentsScaleFactor: null
	,__currentTabOrderIndex: null
	,__deltaTime: null
	,__dirty: null
	,__displayMatrix: null
	,__displayRect: null
	,__displayState: null
	,__dragBounds: null
	,__dragObject: null
	,__dragOffsetX: null
	,__dragOffsetY: null
	,__focus: null
	,__forceRender: null
	,__fullscreen: null
	,__fullScreenSourceRect: null
	,__invalidated: null
	,__lastClickTime: null
	,__logicalWidth: null
	,__logicalHeight: null
	,__macKeyboard: null
	,__mouseDownLeft: null
	,__mouseDownMiddle: null
	,__mouseDownRight: null
	,__mouseOutStack: null
	,__mouseOverTarget: null
	,__mouseX: null
	,__mouseY: null
	,__pendingMouseEvent: null
	,__pendingMouseX: null
	,__pendingMouseY: null
	,__quality: null
	,__renderer: null
	,__rendering: null
	,__rollOutStack: null
	,__scaleMode: null
	,__stack: null
	,__touchData: null
	,__transparent: null
	,__wasDirty: null
	,__wasFullscreen: null
	,__primaryTouch: null
	,invalidate: function() {
		this.__invalidated = true;
		this.__renderDirty = true;
	}
	,localToGlobal: function(pos) {
		return pos.clone();
	}
	,__broadcastEvent: function(event) {
		if(Object.prototype.hasOwnProperty.call(openfl_display_DisplayObject.__broadcastEvents.h,event.type)) {
			var dispatchers = openfl_display_DisplayObject.__broadcastEvents.h[event.type];
			var _g = 0;
			while(_g < dispatchers.length) {
				var dispatcher = dispatchers[_g];
				++_g;
				if(dispatcher.stage == this || dispatcher.stage == null) {
					try {
						dispatcher.__dispatch(event);
					} catch( _g1 ) {
						haxe_NativeStackTrace.lastError = _g1;
						var e = haxe_Exception.caught(_g1).unwrap();
						this.__handleError(e);
					}
				}
			}
		}
	}
	,__createRenderer: function() {
		var pixelRatio = 1;
		if(this.window.__scale > 1) {
			pixelRatio = this.window.devicePixelRatio || 1;
		}
		var windowWidth = this.window.__width * this.window.__scale | 0;
		var windowHeight = this.window.__height * this.window.__scale | 0;
		switch(this.window.context.type) {
		case "cairo":
			break;
		case "canvas":
			this.__renderer = new openfl_display_CanvasRenderer(this.window.context.canvas2D);
			(js_Boot.__cast(this.__renderer , openfl_display_CanvasRenderer)).pixelRatio = pixelRatio;
			break;
		case "dom":
			this.__renderer = new openfl_display_DOMRenderer(this.window.context.dom);
			(js_Boot.__cast(this.__renderer , openfl_display_DOMRenderer)).pixelRatio = pixelRatio;
			break;
		case "opengl":case "opengles":case "webgl":
			this.context3D = new openfl_display3D_Context3D(this);
			this.context3D.configureBackBuffer(windowWidth,windowHeight,0,true,true,true);
			this.context3D.present();
			this.__renderer = new openfl_display_OpenGLRenderer(this.context3D);
			break;
		default:
		}
		if(this.__renderer != null) {
			var tmp = this.get_quality();
			this.__renderer.__allowSmoothing = tmp != 2;
			this.__renderer.__worldTransform = this.__displayMatrix;
			this.__renderer.__stage = this;
			this.__renderer.__resize(windowWidth,windowHeight);
		}
	}
	,__dispatchEvent: function(event) {
		try {
			return openfl_display_DisplayObjectContainer.prototype.__dispatchEvent.call(this,event);
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
			var e = haxe_Exception.caught(_g).unwrap();
			this.__handleError(e);
			return false;
		}
	}
	,__dispatchPendingMouseEvent: function() {
		if(this.__pendingMouseEvent) {
			this.__onMouse("mouseMove",this.__pendingMouseX,this.__pendingMouseY,0);
			this.__pendingMouseEvent = false;
		}
	}
	,__dispatchStack: function(event,stack) {
		try {
			var target;
			var length = stack.length;
			if(length == 0) {
				event.eventPhase = 2;
				target = event.target;
				target.__dispatch(event);
			} else {
				event.eventPhase = 1;
				event.target = stack[stack.length - 1];
				var _g = 0;
				var _g1 = length - 1;
				while(_g < _g1) {
					var i = _g++;
					stack[i].__dispatch(event);
					if(event.__isCanceled) {
						return;
					}
				}
				event.eventPhase = 2;
				target = event.target;
				target.__dispatch(event);
				if(event.__isCanceled) {
					return;
				}
				if(event.bubbles) {
					event.eventPhase = 3;
					var i = length - 2;
					while(i >= 0) {
						stack[i].__dispatch(event);
						if(event.__isCanceled) {
							return;
						}
						--i;
					}
				}
			}
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
			var e = haxe_Exception.caught(_g).unwrap();
			this.__handleError(e);
		}
	}
	,__dispatchTarget: function(target,event) {
		try {
			return target.__dispatchEvent(event);
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
			var e = haxe_Exception.caught(_g).unwrap();
			this.__handleError(e);
			return false;
		}
	}
	,__drag: function(mouse) {
		var parent = this.__dragObject.parent;
		if(parent != null) {
			var _this = parent.__getWorldTransform();
			var norm = _this.a * _this.d - _this.b * _this.c;
			if(norm == 0) {
				mouse.x = -_this.tx;
				mouse.y = -_this.ty;
			} else {
				var px = 1.0 / norm * (_this.c * (_this.ty - mouse.y) + _this.d * (mouse.x - _this.tx));
				mouse.y = 1.0 / norm * (_this.a * (mouse.y - _this.ty) + _this.b * (_this.tx - mouse.x));
				mouse.x = px;
			}
		}
		var x = mouse.x + this.__dragOffsetX;
		var y = mouse.y + this.__dragOffsetY;
		if(this.__dragBounds != null) {
			if(x < this.__dragBounds.x) {
				x = this.__dragBounds.x;
			} else if(x > this.__dragBounds.get_right()) {
				x = this.__dragBounds.get_right();
			}
			if(y < this.__dragBounds.y) {
				y = this.__dragBounds.y;
			} else if(y > this.__dragBounds.get_bottom()) {
				y = this.__dragBounds.get_bottom();
			}
		}
		this.__dragObject.set_x(x);
		this.__dragObject.set_y(y);
	}
	,__getInteractive: function(stack) {
		if(stack != null) {
			stack.push(this);
		}
		return true;
	}
	,__globalToLocal: function(global,local) {
		if(global != local) {
			local.copyFrom(global);
		}
		return local;
	}
	,__handleError: function(e) {
		var event = new openfl_events_UncaughtErrorEvent("uncaughtError",true,true,e);
		try {
			openfl_Lib.get_current().__loaderInfo.uncaughtErrorEvents.dispatchEvent(event);
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
		}
		if(!event.__preventDefault) {
			try {
				var exc = e;
				if(exc != null && Object.prototype.hasOwnProperty.call(exc,"stack") && exc.stack != null && exc.stack != "") {
					console.log(exc.stack);
					e.stack = exc.stack;
				}
			} catch( _g ) {
				haxe_NativeStackTrace.lastError = _g;
			}
			throw e;
		}
	}
	,__onKey: function(type,keyCode,modifier) {
		this.__dispatchPendingMouseEvent();
		openfl_events_MouseEvent.__altKey = lime_ui_KeyModifier.get_altKey(modifier);
		openfl_events_MouseEvent.__commandKey = lime_ui_KeyModifier.get_metaKey(modifier);
		openfl_events_MouseEvent.__ctrlKey = lime_ui_KeyModifier.get_ctrlKey(modifier);
		openfl_events_MouseEvent.__shiftKey = lime_ui_KeyModifier.get_shiftKey(modifier);
		var stack = [];
		if(this.__focus == null) {
			this.__getInteractive(stack);
		} else {
			this.__focus.__getInteractive(stack);
		}
		if(stack.length > 0) {
			var keyLocation;
			switch(keyCode) {
			case 1073741908:case 1073741909:case 1073741910:case 1073741911:case 1073741912:case 1073741913:case 1073741914:case 1073741915:case 1073741916:case 1073741917:case 1073741918:case 1073741919:case 1073741920:case 1073741921:case 1073741922:case 1073741923:case 1073742044:
				keyLocation = 3;
				break;
			case 1073742048:case 1073742049:case 1073742050:case 1073742051:
				keyLocation = 1;
				break;
			case 1073742052:case 1073742053:case 1073742054:case 1073742055:
				keyLocation = 2;
				break;
			default:
				keyLocation = 0;
			}
			var keyCode1;
			switch(keyCode) {
			case 8:
				keyCode1 = 8;
				break;
			case 9:
				keyCode1 = 9;
				break;
			case 13:
				keyCode1 = 13;
				break;
			case 27:
				keyCode1 = 27;
				break;
			case 32:
				keyCode1 = 32;
				break;
			case 33:
				keyCode1 = 49;
				break;
			case 34:
				keyCode1 = 222;
				break;
			case 35:
				keyCode1 = 51;
				break;
			case 36:
				keyCode1 = 52;
				break;
			case 37:
				keyCode1 = 53;
				break;
			case 38:
				keyCode1 = 55;
				break;
			case 39:
				keyCode1 = 222;
				break;
			case 40:
				keyCode1 = 57;
				break;
			case 41:
				keyCode1 = 48;
				break;
			case 42:
				keyCode1 = 56;
				break;
			case 44:
				keyCode1 = 188;
				break;
			case 45:
				keyCode1 = 189;
				break;
			case 46:
				keyCode1 = 190;
				break;
			case 47:
				keyCode1 = 191;
				break;
			case 48:
				keyCode1 = 48;
				break;
			case 49:
				keyCode1 = 49;
				break;
			case 50:
				keyCode1 = 50;
				break;
			case 51:
				keyCode1 = 51;
				break;
			case 52:
				keyCode1 = 52;
				break;
			case 53:
				keyCode1 = 53;
				break;
			case 54:
				keyCode1 = 54;
				break;
			case 55:
				keyCode1 = 55;
				break;
			case 56:
				keyCode1 = 56;
				break;
			case 57:
				keyCode1 = 57;
				break;
			case 58:
				keyCode1 = 186;
				break;
			case 59:
				keyCode1 = 186;
				break;
			case 60:
				keyCode1 = 60;
				break;
			case 61:
				keyCode1 = 187;
				break;
			case 62:
				keyCode1 = 190;
				break;
			case 63:
				keyCode1 = 191;
				break;
			case 64:
				keyCode1 = 50;
				break;
			case 91:
				keyCode1 = 219;
				break;
			case 92:
				keyCode1 = 220;
				break;
			case 93:
				keyCode1 = 221;
				break;
			case 94:
				keyCode1 = 54;
				break;
			case 95:
				keyCode1 = 189;
				break;
			case 96:
				keyCode1 = 192;
				break;
			case 97:
				keyCode1 = 65;
				break;
			case 98:
				keyCode1 = 66;
				break;
			case 99:
				keyCode1 = 67;
				break;
			case 100:
				keyCode1 = 68;
				break;
			case 101:
				keyCode1 = 69;
				break;
			case 102:
				keyCode1 = 70;
				break;
			case 103:
				keyCode1 = 71;
				break;
			case 104:
				keyCode1 = 72;
				break;
			case 105:
				keyCode1 = 73;
				break;
			case 106:
				keyCode1 = 74;
				break;
			case 107:
				keyCode1 = 75;
				break;
			case 108:
				keyCode1 = 76;
				break;
			case 109:
				keyCode1 = 77;
				break;
			case 110:
				keyCode1 = 78;
				break;
			case 111:
				keyCode1 = 79;
				break;
			case 112:
				keyCode1 = 80;
				break;
			case 113:
				keyCode1 = 81;
				break;
			case 114:
				keyCode1 = 82;
				break;
			case 115:
				keyCode1 = 83;
				break;
			case 116:
				keyCode1 = 84;
				break;
			case 117:
				keyCode1 = 85;
				break;
			case 118:
				keyCode1 = 86;
				break;
			case 119:
				keyCode1 = 87;
				break;
			case 120:
				keyCode1 = 88;
				break;
			case 121:
				keyCode1 = 89;
				break;
			case 122:
				keyCode1 = 90;
				break;
			case 127:
				keyCode1 = 46;
				break;
			case 1073741881:
				keyCode1 = 20;
				break;
			case 1073741882:
				keyCode1 = 112;
				break;
			case 1073741883:
				keyCode1 = 113;
				break;
			case 1073741884:
				keyCode1 = 114;
				break;
			case 1073741885:
				keyCode1 = 115;
				break;
			case 1073741886:
				keyCode1 = 116;
				break;
			case 1073741887:
				keyCode1 = 117;
				break;
			case 1073741888:
				keyCode1 = 118;
				break;
			case 1073741889:
				keyCode1 = 119;
				break;
			case 1073741890:
				keyCode1 = 120;
				break;
			case 1073741891:
				keyCode1 = 121;
				break;
			case 1073741892:
				keyCode1 = 122;
				break;
			case 1073741893:
				keyCode1 = 123;
				break;
			case 1073741894:
				keyCode1 = 301;
				break;
			case 1073741895:
				keyCode1 = 145;
				break;
			case 1073741896:
				keyCode1 = 19;
				break;
			case 1073741897:
				keyCode1 = 45;
				break;
			case 1073741898:
				keyCode1 = 36;
				break;
			case 1073741899:
				keyCode1 = 33;
				break;
			case 1073741901:
				keyCode1 = 35;
				break;
			case 1073741902:
				keyCode1 = 34;
				break;
			case 1073741903:
				keyCode1 = 39;
				break;
			case 1073741904:
				keyCode1 = 37;
				break;
			case 1073741905:
				keyCode1 = 40;
				break;
			case 1073741906:
				keyCode1 = 38;
				break;
			case 1073741907:
				keyCode1 = 144;
				break;
			case 1073741908:
				keyCode1 = 111;
				break;
			case 1073741909:
				keyCode1 = 106;
				break;
			case 1073741910:
				keyCode1 = 109;
				break;
			case 1073741911:
				keyCode1 = 107;
				break;
			case 1073741912:
				keyCode1 = 13;
				break;
			case 1073741913:
				keyCode1 = 97;
				break;
			case 1073741914:
				keyCode1 = 98;
				break;
			case 1073741915:
				keyCode1 = 99;
				break;
			case 1073741916:
				keyCode1 = 100;
				break;
			case 1073741917:
				keyCode1 = 101;
				break;
			case 1073741918:
				keyCode1 = 102;
				break;
			case 1073741919:
				keyCode1 = 103;
				break;
			case 1073741920:
				keyCode1 = 104;
				break;
			case 1073741921:
				keyCode1 = 105;
				break;
			case 1073741922:
				keyCode1 = 96;
				break;
			case 1073741923:
				keyCode1 = 110;
				break;
			case 1073741925:
				keyCode1 = 302;
				break;
			case 1073741928:
				keyCode1 = 124;
				break;
			case 1073741929:
				keyCode1 = 125;
				break;
			case 1073741930:
				keyCode1 = 126;
				break;
			case 1073741982:
				keyCode1 = 13;
				break;
			case 1073742044:
				keyCode1 = 110;
				break;
			case 1073742048:
				keyCode1 = 17;
				break;
			case 1073742049:
				keyCode1 = 16;
				break;
			case 1073742050:
				keyCode1 = 18;
				break;
			case 1073742051:
				keyCode1 = 15;
				break;
			case 1073742052:
				keyCode1 = 17;
				break;
			case 1073742053:
				keyCode1 = 16;
				break;
			case 1073742054:
				keyCode1 = 18;
				break;
			case 1073742055:
				keyCode1 = 15;
				break;
			default:
				keyCode1 = keyCode;
			}
			var charCode = openfl_ui_Keyboard.__getCharCode(keyCode1,lime_ui_KeyModifier.get_shiftKey(modifier));
			var event = new openfl_events_KeyboardEvent(type,true,true,charCode,keyCode1,keyLocation,this.__macKeyboard ? lime_ui_KeyModifier.get_ctrlKey(modifier) || lime_ui_KeyModifier.get_metaKey(modifier) : lime_ui_KeyModifier.get_ctrlKey(modifier),lime_ui_KeyModifier.get_altKey(modifier),lime_ui_KeyModifier.get_shiftKey(modifier),lime_ui_KeyModifier.get_ctrlKey(modifier),lime_ui_KeyModifier.get_metaKey(modifier));
			stack.reverse();
			this.__dispatchStack(event,stack);
			if(event.__preventDefault) {
				if(type == "keyDown") {
					this.window.onKeyDown.cancel();
				} else {
					this.window.onKeyUp.cancel();
				}
			} else if(type == "keyDown" && keyCode1 == 9) {
				var tabStack = [];
				this.__tabTest(tabStack);
				var nextIndex = -1;
				var nextObject = null;
				var nextOffset = lime_ui_KeyModifier.get_shiftKey(modifier) ? -1 : 1;
				if(tabStack.length > 1) {
					haxe_ds_ArraySort.sort(tabStack,function(a,b) {
						return a.get_tabIndex() - b.get_tabIndex();
					});
					if(tabStack[tabStack.length - 1].get_tabIndex() == -1) {
						if(this.get_focus() != null) {
							nextIndex = 0;
						} else {
							nextIndex = this.__currentTabOrderIndex;
						}
					} else {
						var i = 0;
						while(i < tabStack.length) {
							if(tabStack[i].get_tabIndex() > -1) {
								if(i > 0) {
									tabStack.splice(0,i);
								}
								break;
							}
							++i;
						}
						if(this.get_focus() != null) {
							var index = tabStack.indexOf(this.get_focus());
							if(index < 0) {
								nextIndex = 0;
							} else {
								nextIndex = index + nextOffset;
							}
						} else {
							nextIndex = this.__currentTabOrderIndex;
						}
					}
				} else if(tabStack.length == 1) {
					nextObject = tabStack[0];
					if(this.get_focus() == nextObject) {
						nextObject = null;
					}
				}
				if(tabStack.length == 1 || tabStack.length == 0 && this.get_focus() != null) {
					nextIndex = 0;
				} else if(tabStack.length > 1) {
					if(nextIndex < 0) {
						nextIndex += tabStack.length;
					}
					nextIndex %= tabStack.length;
					nextObject = tabStack[nextIndex];
					if(nextObject == this.get_focus()) {
						nextIndex += nextOffset;
						if(nextIndex < 0) {
							nextIndex += tabStack.length;
						}
						nextIndex %= tabStack.length;
						nextObject = tabStack[nextIndex];
					}
				}
				var focusEvent = null;
				if(this.get_focus() != null) {
					focusEvent = new openfl_events_FocusEvent("keyFocusChange",true,true,nextObject,lime_ui_KeyModifier.get_shiftKey(modifier),0);
					stack = [];
					this.get_focus().__getInteractive(stack);
					stack.reverse();
					this.__dispatchStack(focusEvent,stack);
				}
				if(focusEvent == null || !focusEvent.isDefaultPrevented()) {
					this.__currentTabOrderIndex = nextIndex;
					if(nextObject != null) {
						this.set_focus(nextObject);
					}
				}
			}
		}
	}
	,__onLimeCreateWindow: function($window) {
		if(this.window != $window) {
			return;
		}
		var _g = $bind(this,this.__onLimeWindowActivate);
		var window1 = $window;
		var tmp = function() {
			_g(window1);
		};
		$window.onActivate.add(tmp);
		var _g1 = $bind(this,this.__onLimeWindowClose);
		var window2 = $window;
		var tmp = function() {
			_g1(window2);
		};
		$window.onClose.add(tmp,false,-9000);
		var _g2 = $bind(this,this.__onLimeWindowDeactivate);
		var window3 = $window;
		var tmp = function() {
			_g2(window3);
		};
		$window.onDeactivate.add(tmp);
		var _g3 = $bind(this,this.__onLimeWindowDropFile);
		var window4 = $window;
		var tmp = function(file) {
			_g3(window4,file);
		};
		$window.onDropFile.add(tmp);
		var _g4 = $bind(this,this.__onLimeWindowEnter);
		var window5 = $window;
		var tmp = function() {
			_g4(window5);
		};
		$window.onEnter.add(tmp);
		var _g5 = $bind(this,this.__onLimeWindowExpose);
		var window6 = $window;
		var tmp = function() {
			_g5(window6);
		};
		$window.onExpose.add(tmp);
		var _g6 = $bind(this,this.__onLimeWindowFocusIn);
		var window7 = $window;
		var tmp = function() {
			_g6(window7);
		};
		$window.onFocusIn.add(tmp);
		var _g7 = $bind(this,this.__onLimeWindowFocusOut);
		var window8 = $window;
		var tmp = function() {
			_g7(window8);
		};
		$window.onFocusOut.add(tmp);
		var _g8 = $bind(this,this.__onLimeWindowFullscreen);
		var window9 = $window;
		var tmp = function() {
			_g8(window9);
		};
		$window.onFullscreen.add(tmp);
		var _g9 = $bind(this,this.__onLimeKeyDown);
		var window10 = $window;
		var tmp = function(keyCode,modifier) {
			_g9(window10,keyCode,modifier);
		};
		$window.onKeyDown.add(tmp);
		var _g10 = $bind(this,this.__onLimeKeyUp);
		var window11 = $window;
		var tmp = function(keyCode,modifier) {
			_g10(window11,keyCode,modifier);
		};
		$window.onKeyUp.add(tmp);
		var _g11 = $bind(this,this.__onLimeWindowLeave);
		var window12 = $window;
		var tmp = function() {
			_g11(window12);
		};
		$window.onLeave.add(tmp);
		var _g12 = $bind(this,this.__onLimeWindowMinimize);
		var window13 = $window;
		var tmp = function() {
			_g12(window13);
		};
		$window.onMinimize.add(tmp);
		var _g13 = $bind(this,this.__onLimeMouseDown);
		var window14 = $window;
		var tmp = function(x,y,button) {
			_g13(window14,x,y,button);
		};
		$window.onMouseDown.add(tmp);
		var _g14 = $bind(this,this.__onLimeMouseMove);
		var window15 = $window;
		var tmp = function(x,y) {
			_g14(window15,x,y);
		};
		$window.onMouseMove.add(tmp);
		var _g15 = $bind(this,this.__onLimeMouseMoveRelative);
		var window16 = $window;
		var tmp = function(x,y) {
			_g15(window16,x,y);
		};
		$window.onMouseMoveRelative.add(tmp);
		var _g16 = $bind(this,this.__onLimeMouseUp);
		var window17 = $window;
		var tmp = function(x,y,button) {
			_g16(window17,x,y,button);
		};
		$window.onMouseUp.add(tmp);
		var _g17 = $bind(this,this.__onLimeMouseWheel);
		var window18 = $window;
		var tmp = function(deltaX,deltaY,deltaMode) {
			_g17(window18,deltaX,deltaY,deltaMode);
		};
		$window.onMouseWheel.add(tmp);
		var _g18 = $bind(this,this.__onLimeWindowMove);
		var window19 = $window;
		var tmp = function(x,y) {
			_g18(window19,x,y);
		};
		$window.onMove.add(tmp);
		$window.onRender.add($bind(this,this.__onLimeRender));
		$window.onRenderContextLost.add($bind(this,this.__onLimeRenderContextLost));
		$window.onRenderContextRestored.add($bind(this,this.__onLimeRenderContextRestored));
		var _g19 = $bind(this,this.__onLimeWindowResize);
		var window20 = $window;
		var tmp = function(width,height) {
			_g19(window20,width,height);
		};
		$window.onResize.add(tmp);
		var _g20 = $bind(this,this.__onLimeWindowRestore);
		var window21 = $window;
		var tmp = function() {
			_g20(window21);
		};
		$window.onRestore.add(tmp);
		var _g21 = $bind(this,this.__onLimeTextEdit);
		var window22 = $window;
		var tmp = function(text,start,length) {
			_g21(window22,text,start,length);
		};
		$window.onTextEdit.add(tmp);
		var _g22 = $bind(this,this.__onLimeTextInput);
		var window23 = $window;
		var tmp = function(text) {
			_g22(window23,text);
		};
		$window.onTextInput.add(tmp);
		this.__onLimeWindowCreate($window);
	}
	,__onLimeGamepadAxisMove: function(gamepad,axis,value) {
		try {
			openfl_ui_GameInput.__onGamepadAxisMove(gamepad,axis,value);
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
			var e = haxe_Exception.caught(_g).unwrap();
			this.__handleError(e);
		}
	}
	,__onLimeGamepadButtonDown: function(gamepad,button) {
		try {
			openfl_ui_GameInput.__onGamepadButtonDown(gamepad,button);
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
			var e = haxe_Exception.caught(_g).unwrap();
			this.__handleError(e);
		}
	}
	,__onLimeGamepadButtonUp: function(gamepad,button) {
		try {
			openfl_ui_GameInput.__onGamepadButtonUp(gamepad,button);
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
			var e = haxe_Exception.caught(_g).unwrap();
			this.__handleError(e);
		}
	}
	,__onLimeGamepadConnect: function(gamepad) {
		try {
			openfl_ui_GameInput.__onGamepadConnect(gamepad);
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
			var e = haxe_Exception.caught(_g).unwrap();
			this.__handleError(e);
		}
		var _g = $bind(this,this.__onLimeGamepadAxisMove);
		var gamepad1 = gamepad;
		var tmp = function(axis,value) {
			_g(gamepad1,axis,value);
		};
		gamepad.onAxisMove.add(tmp);
		var _g1 = $bind(this,this.__onLimeGamepadButtonDown);
		var gamepad2 = gamepad;
		var tmp = function(button) {
			_g1(gamepad2,button);
		};
		gamepad.onButtonDown.add(tmp);
		var _g2 = $bind(this,this.__onLimeGamepadButtonUp);
		var gamepad3 = gamepad;
		var tmp = function(button) {
			_g2(gamepad3,button);
		};
		gamepad.onButtonUp.add(tmp);
		var _g3 = $bind(this,this.__onLimeGamepadDisconnect);
		var gamepad4 = gamepad;
		var tmp = function() {
			_g3(gamepad4);
		};
		gamepad.onDisconnect.add(tmp);
	}
	,__onLimeGamepadDisconnect: function(gamepad) {
		try {
			openfl_ui_GameInput.__onGamepadDisconnect(gamepad);
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
			var e = haxe_Exception.caught(_g).unwrap();
			this.__handleError(e);
		}
	}
	,__onLimeKeyDown: function($window,keyCode,modifier) {
		if(this.window == null || this.window != $window) {
			return;
		}
		this.__onKey("keyDown",keyCode,modifier);
	}
	,__onLimeKeyUp: function($window,keyCode,modifier) {
		if(this.window == null || this.window != $window) {
			return;
		}
		this.__onKey("keyUp",keyCode,modifier);
	}
	,__onLimeModuleExit: function(code) {
		if(this.window != null) {
			var event = null;
			event = new openfl_events_Event("deactivate");
			this.__broadcastEvent(event);
		}
	}
	,__onLimeMouseDown: function($window,x,y,button) {
		if(this.window == null || this.window != $window) {
			return;
		}
		this.__dispatchPendingMouseEvent();
		var type;
		switch(button) {
		case 1:
			type = "middleMouseDown";
			break;
		case 2:
			type = "rightMouseDown";
			break;
		default:
			type = "mouseDown";
		}
		this.__onMouse(type,x * $window.__scale | 0,y * $window.__scale | 0,button);
		if(!this.showDefaultContextMenu && button == 2) {
			$window.onMouseDown.cancel();
		}
	}
	,__onLimeMouseMove: function($window,x,y) {
		if(this.window == null || this.window != $window) {
			return;
		}
		this.__pendingMouseEvent = true;
		this.__pendingMouseX = x * $window.__scale | 0;
		this.__pendingMouseY = y * $window.__scale | 0;
	}
	,__onLimeMouseMoveRelative: function($window,x,y) {
	}
	,__onLimeMouseUp: function($window,x,y,button) {
		if(this.window == null || this.window != $window) {
			return;
		}
		this.__dispatchPendingMouseEvent();
		var type;
		switch(button) {
		case 1:
			type = "middleMouseUp";
			break;
		case 2:
			type = "rightMouseUp";
			break;
		default:
			type = "mouseUp";
		}
		this.__onMouse(type,x * $window.__scale | 0,y * $window.__scale | 0,button);
		if(!this.showDefaultContextMenu && button == 2) {
			$window.onMouseUp.cancel();
		}
	}
	,__onLimeMouseWheel: function($window,deltaX,deltaY,deltaMode) {
		if(this.window == null || this.window != $window) {
			return;
		}
		this.__dispatchPendingMouseEvent();
		if(deltaMode == lime_ui_MouseWheelMode.PIXELS) {
			this.__onMouseWheel(deltaX * $window.__scale | 0,deltaY * $window.__scale | 0,deltaMode);
		} else {
			this.__onMouseWheel(deltaX | 0,deltaY | 0,deltaMode);
		}
	}
	,__onLimeRender: function(context) {
		if(this.__rendering) {
			return;
		}
		this.__rendering = true;
		openfl__$internal_renderer_context3D_stats_Context3DStats.resetDrawCalls();
		var event = null;
		this.__broadcastEvent(new openfl_events_Event("enterFrame"));
		this.__broadcastEvent(new openfl_events_Event("frameConstructed"));
		this.__broadcastEvent(new openfl_events_Event("exitFrame"));
		this.__renderable = true;
		this.__enterFrame(this.__deltaTime);
		this.__deltaTime = 0;
		var shouldRender = this.__renderer != null && (this.__renderDirty || this.__forceRender);
		if(this.__invalidated && shouldRender) {
			this.__invalidated = false;
			event = new openfl_events_Event("render");
			this.__broadcastEvent(event);
		}
		this.__update(false,true);
		if(this.__renderer != null) {
			if(this.context3D != null) {
				var stage3D = this.stage3Ds.iterator();
				while(stage3D.hasNext()) {
					var stage3D1 = stage3D.next();
					this.context3D.__renderStage3D(stage3D1);
				}
				if(this.context3D.__present) {
					shouldRender = true;
				}
			}
			if(shouldRender) {
				var tmp = this.__renderer.__type == "cairo";
				if(this.context3D == null) {
					this.__renderer.__clear();
				}
				this.__renderer.__render(this);
			} else if(this.context3D == null) {
				this.window.onRender.cancel();
			}
			if(this.context3D != null) {
				if(!this.context3D.__present) {
					this.window.onRender.cancel();
				} else {
					if(!this.__renderer.__cleared) {
						this.__renderer.__clear();
					}
					this.context3D.__present = false;
					this.context3D.__cleared = false;
				}
			}
			this.__renderer.__cleared = false;
		}
		this.__rendering = false;
	}
	,__onLimeRenderContextLost: function() {
		this.__renderer = null;
		this.context3D = null;
		var stage3D = this.stage3Ds.iterator();
		while(stage3D.hasNext()) {
			var stage3D1 = stage3D.next();
			stage3D1.__lostContext();
		}
	}
	,__onLimeRenderContextRestored: function(context) {
		this.__createRenderer();
		var stage3D = this.stage3Ds.iterator();
		while(stage3D.hasNext()) {
			var stage3D1 = stage3D.next();
			stage3D1.__restoreContext();
		}
	}
	,__onLimeTextEdit: function($window,text,start,length) {
	}
	,__onLimeTextInput: function($window,text) {
		if(this.window == null || this.window != $window) {
			return;
		}
		var stack = [];
		if(this.__focus == null) {
			this.__getInteractive(stack);
		} else {
			this.__focus.__getInteractive(stack);
		}
		var event = new openfl_events_TextEvent("textInput",true,true,text);
		if(stack.length > 0) {
			stack.reverse();
			this.__dispatchStack(event,stack);
		} else {
			this.__dispatchEvent(event);
		}
		if(event.isDefaultPrevented()) {
			$window.onTextInput.cancel();
		}
	}
	,__onLimeTouchCancel: function(touch) {
		if(this.__primaryTouch == touch) {
			this.__primaryTouch = null;
		}
		this.__onTouch("touchEnd",touch);
	}
	,__onLimeTouchMove: function(touch) {
		this.__onTouch("touchMove",touch);
	}
	,__onLimeTouchEnd: function(touch) {
		if(this.__primaryTouch == touch) {
			this.__primaryTouch = null;
		}
		this.__onTouch("touchEnd",touch);
	}
	,__onLimeTouchStart: function(touch) {
		if(this.__primaryTouch == null) {
			this.__primaryTouch = touch;
		}
		this.__onTouch("touchBegin",touch);
	}
	,__onLimeUpdate: function(deltaTime) {
		this.__deltaTime = deltaTime;
		this.__dispatchPendingMouseEvent();
	}
	,__onLimeWindowActivate: function($window) {
		if(this.window == null || this.window != $window) {
			return;
		}
	}
	,__onLimeWindowClose: function($window) {
		if(this.window == $window) {
			this.window = null;
		}
		this.__primaryTouch = null;
		var event = null;
		event = new openfl_events_Event("deactivate");
		this.__broadcastEvent(event);
	}
	,__onLimeWindowCreate: function($window) {
		if(this.window == null || this.window != $window) {
			return;
		}
		if($window.context != null) {
			this.__createRenderer();
		}
	}
	,__onLimeWindowDeactivate: function($window) {
		if(this.window == null || this.window != $window) {
			return;
		}
	}
	,__onLimeWindowDropFile: function($window,file) {
	}
	,__onLimeWindowEnter: function($window) {
	}
	,__onLimeWindowExpose: function($window) {
		if(this.window == null || this.window != $window) {
			return;
		}
		this.__renderDirty = true;
	}
	,__onLimeWindowFocusIn: function($window) {
		if(this.window == null || this.window != $window) {
			return;
		}
		this.__renderDirty = true;
		var event = null;
		event = new openfl_events_Event("activate");
		this.__broadcastEvent(event);
		this.set_focus(this.__cacheFocus);
	}
	,__onLimeWindowFocusOut: function($window) {
		if(this.window == null || this.window != $window) {
			return;
		}
		this.__primaryTouch = null;
		var event = null;
		event = new openfl_events_Event("deactivate");
		this.__broadcastEvent(event);
		var currentFocus = this.get_focus();
		this.set_focus(null);
		this.__cacheFocus = currentFocus;
		openfl_events_MouseEvent.__altKey = false;
		openfl_events_MouseEvent.__commandKey = false;
		openfl_events_MouseEvent.__ctrlKey = false;
		openfl_events_MouseEvent.__shiftKey = false;
	}
	,__onLimeWindowFullscreen: function($window) {
		if(this.window == null || this.window != $window) {
			return;
		}
		this.__resize();
		if(!this.__wasFullscreen) {
			this.__wasFullscreen = true;
			if(this.__displayState == 2) {
				this.__displayState = 1;
			}
			this.__dispatchEvent(new openfl_events_FullScreenEvent("fullScreen",false,false,true,true));
		}
	}
	,__onLimeWindowLeave: function($window) {
		if(this.window == null || this.window != $window || openfl_events_MouseEvent.__buttonDown) {
			return;
		}
		this.__dispatchPendingMouseEvent();
		var event = null;
		event = new openfl_events_Event("mouseLeave");
		this.__dispatchEvent(event);
	}
	,__onLimeWindowMinimize: function($window) {
		if(this.window == null || this.window != $window) {
			return;
		}
	}
	,__onLimeWindowMove: function($window,x,y) {
	}
	,__onLimeWindowResize: function($window,width,height) {
		if(this.window == null || this.window != $window) {
			return;
		}
		this.__resize();
		if(this.__wasFullscreen && !$window.__fullscreen) {
			this.__wasFullscreen = false;
			this.__displayState = 2;
			this.__dispatchEvent(new openfl_events_FullScreenEvent("fullScreen",false,false,false,true));
		}
	}
	,__onLimeWindowRestore: function($window) {
		if(this.window == null || this.window != $window) {
			return;
		}
		if(this.__wasFullscreen && !$window.__fullscreen) {
			this.__wasFullscreen = false;
			this.__displayState = 2;
			this.__dispatchEvent(new openfl_events_FullScreenEvent("fullScreen",false,false,false,true));
		}
	}
	,__onMouse: function(type,x,y,button) {
		if(button > 2) {
			return;
		}
		var targetPoint = openfl_geom_Point.__pool.get();
		targetPoint.setTo(x,y);
		var _this = this.__displayMatrix;
		var norm = _this.a * _this.d - _this.b * _this.c;
		if(norm == 0) {
			targetPoint.x = -_this.tx;
			targetPoint.y = -_this.ty;
		} else {
			var px = 1.0 / norm * (_this.c * (_this.ty - targetPoint.y) + _this.d * (targetPoint.x - _this.tx));
			targetPoint.y = 1.0 / norm * (_this.a * (targetPoint.y - _this.ty) + _this.b * (_this.tx - targetPoint.x));
			targetPoint.x = px;
		}
		this.__mouseX = targetPoint.x;
		this.__mouseY = targetPoint.y;
		var stack = [];
		var target = null;
		if(this.__hitTest(this.__mouseX,this.__mouseY,true,stack,true,this)) {
			target = stack[stack.length - 1];
		} else {
			target = this;
			stack = [this];
		}
		if(target == null) {
			target = this;
		}
		var clickType = null;
		switch(type) {
		case "middleMouseDown":
			this.__mouseDownMiddle = target;
			break;
		case "middleMouseUp":
			if(this.__mouseDownMiddle == target) {
				clickType = "middleClick";
			}
			this.__mouseDownMiddle = null;
			break;
		case "mouseDown":
			if(target.__allowMouseFocus()) {
				if(this.get_focus() != null) {
					var focusEvent = new openfl_events_FocusEvent("mouseFocusChange",true,true,target,false,0);
					this.__dispatchStack(focusEvent,stack);
					if(!focusEvent.isDefaultPrevented()) {
						this.set_focus(target);
					}
				} else {
					this.set_focus(target);
				}
			} else {
				this.set_focus(null);
			}
			this.__mouseDownLeft = target;
			openfl_events_MouseEvent.__buttonDown = true;
			break;
		case "mouseUp":
			if(this.__mouseDownLeft != null) {
				openfl_events_MouseEvent.__buttonDown = false;
				if(this.__mouseDownLeft == target) {
					clickType = "click";
				} else {
					var event = null;
					event = openfl_events_MouseEvent.__create("releaseOutside",1,this.__mouseX,this.__mouseY,new openfl_geom_Point(this.__mouseX,this.__mouseY),this);
					this.__mouseDownLeft.dispatchEvent(event);
				}
				this.__mouseDownLeft = null;
			}
			break;
		case "rightMouseDown":
			this.__mouseDownRight = target;
			break;
		case "rightMouseUp":
			if(this.__mouseDownRight == target) {
				clickType = "rightClick";
			}
			this.__mouseDownRight = null;
			break;
		default:
		}
		var localPoint = openfl_geom_Point.__pool.get();
		var event = null;
		event = openfl_events_MouseEvent.__create(type,button,this.__mouseX,this.__mouseY,target.__globalToLocal(targetPoint,localPoint),target);
		this.__dispatchStack(event,stack);
		if(clickType != null) {
			event = openfl_events_MouseEvent.__create(clickType,button,this.__mouseX,this.__mouseY,target.__globalToLocal(targetPoint,localPoint),target);
			this.__dispatchStack(event,stack);
			if(type == "mouseUp" && (js_Boot.__cast(target , openfl_display_InteractiveObject)).doubleClickEnabled) {
				var currentTime = openfl_Lib.getTimer();
				if(currentTime - this.__lastClickTime < 500) {
					event = openfl_events_MouseEvent.__create("doubleClick",button,this.__mouseX,this.__mouseY,target.__globalToLocal(targetPoint,localPoint),target);
					this.__dispatchStack(event,stack);
					this.__lastClickTime = 0;
				} else {
					this.__lastClickTime = currentTime;
				}
			}
		}
		if(openfl_ui_Mouse.__cursor == "auto" && !openfl_ui_Mouse.__hidden) {
			var cursor = null;
			if(this.__mouseDownLeft != null) {
				cursor = this.__mouseDownLeft.__getCursor();
			} else {
				var _g = 0;
				while(_g < stack.length) {
					var target1 = stack[_g];
					++_g;
					cursor = target1.__getCursor();
					if(cursor != null) {
						this.window.set_cursor(openfl_ui_MouseCursor.toLimeCursor(cursor));
						break;
					}
				}
			}
			if(cursor == null) {
				this.window.set_cursor(lime_ui_MouseCursor.ARROW);
			}
		}
		var event;
		if(target != this.__mouseOverTarget) {
			if(this.__mouseOverTarget != null) {
				event = openfl_events_MouseEvent.__create("mouseOut",button,this.__mouseX,this.__mouseY,this.__mouseOverTarget.__globalToLocal(targetPoint,localPoint),this.__mouseOverTarget);
				this.__dispatchStack(event,this.__mouseOutStack);
			}
		}
		var item;
		var i = 0;
		while(i < this.__rollOutStack.length) {
			item = this.__rollOutStack[i];
			if(stack.indexOf(item) == -1) {
				HxOverrides.remove(this.__rollOutStack,item);
				event = openfl_events_MouseEvent.__create("rollOut",button,this.__mouseX,this.__mouseY,this.__mouseOverTarget.__globalToLocal(targetPoint,localPoint),this.__mouseOverTarget);
				event.bubbles = false;
				this.__dispatchTarget(item,event);
			} else {
				++i;
			}
		}
		var _g = 0;
		while(_g < stack.length) {
			var item = stack[_g];
			++_g;
			if(this.__rollOutStack.indexOf(item) == -1 && this.__mouseOverTarget != null) {
				if(item.hasEventListener("rollOver")) {
					event = openfl_events_MouseEvent.__create("rollOver",button,this.__mouseX,this.__mouseY,this.__mouseOverTarget.__globalToLocal(targetPoint,localPoint),item);
					event.bubbles = false;
					this.__dispatchTarget(item,event);
				}
				if(item.hasEventListener("rollOut") || item.hasEventListener("rollOver")) {
					this.__rollOutStack.push(item);
				}
			}
		}
		if(target != this.__mouseOverTarget) {
			if(target != null) {
				event = openfl_events_MouseEvent.__create("mouseOver",button,this.__mouseX,this.__mouseY,target.__globalToLocal(targetPoint,localPoint),target);
				this.__dispatchStack(event,stack);
			}
			this.__mouseOverTarget = target;
			this.__mouseOutStack = stack;
		}
		if(this.__dragObject != null) {
			this.__drag(targetPoint);
			var dropTarget = null;
			if(this.__mouseOverTarget == this.__dragObject) {
				var cacheMouseEnabled = this.__dragObject.mouseEnabled;
				var cacheMouseChildren = this.__dragObject.mouseChildren;
				this.__dragObject.mouseEnabled = false;
				this.__dragObject.mouseChildren = false;
				var stack = [];
				if(this.__hitTest(this.__mouseX,this.__mouseY,true,stack,true,this)) {
					dropTarget = stack[stack.length - 1];
				}
				this.__dragObject.mouseEnabled = cacheMouseEnabled;
				this.__dragObject.mouseChildren = cacheMouseChildren;
			} else if(this.__mouseOverTarget != this) {
				dropTarget = this.__mouseOverTarget;
			}
			this.__dragObject.dropTarget = dropTarget;
		}
		openfl_geom_Point.__pool.release(targetPoint);
		openfl_geom_Point.__pool.release(localPoint);
	}
	,__onMouseWheel: function(deltaX,deltaY,deltaMode) {
		var x = this.__mouseX;
		var y = this.__mouseY;
		var stack = [];
		var target = null;
		if(this.__hitTest(this.__mouseX,this.__mouseY,true,stack,true,this)) {
			target = stack[stack.length - 1];
		} else {
			target = this;
			stack = [this];
		}
		if(target == null) {
			target = this;
		}
		var targetPoint = openfl_geom_Point.__pool.get();
		targetPoint.setTo(x,y);
		var _this = this.__displayMatrix;
		var norm = _this.a * _this.d - _this.b * _this.c;
		if(norm == 0) {
			targetPoint.x = -_this.tx;
			targetPoint.y = -_this.ty;
		} else {
			var px = 1.0 / norm * (_this.c * (_this.ty - targetPoint.y) + _this.d * (targetPoint.x - _this.tx));
			targetPoint.y = 1.0 / norm * (_this.a * (targetPoint.y - _this.ty) + _this.b * (_this.tx - targetPoint.x));
			targetPoint.x = px;
		}
		var delta = deltaY | 0;
		var event = openfl_events_MouseEvent.__create("mouseWheel",0,this.__mouseX,this.__mouseY,target.__globalToLocal(targetPoint,targetPoint),target,delta);
		event.cancelable = true;
		this.__dispatchStack(event,stack);
		if(event.isDefaultPrevented()) {
			this.window.onMouseWheel.cancel();
		}
		openfl_geom_Point.__pool.release(targetPoint);
	}
	,__onTouch: function(type,touch) {
		var targetPoint = openfl_geom_Point.__pool.get();
		targetPoint.setTo(Math.round(touch.x * this.window.__width * this.window.__scale),Math.round(touch.y * this.window.__height * this.window.__scale));
		var _this = this.__displayMatrix;
		var norm = _this.a * _this.d - _this.b * _this.c;
		if(norm == 0) {
			targetPoint.x = -_this.tx;
			targetPoint.y = -_this.ty;
		} else {
			var px = 1.0 / norm * (_this.c * (_this.ty - targetPoint.y) + _this.d * (targetPoint.x - _this.tx));
			targetPoint.y = 1.0 / norm * (_this.a * (targetPoint.y - _this.ty) + _this.b * (_this.tx - targetPoint.x));
			targetPoint.x = px;
		}
		var touchX = targetPoint.x;
		var touchY = targetPoint.y;
		var stack = [];
		var target = null;
		if(this.__hitTest(touchX,touchY,false,stack,true,this)) {
			target = stack[stack.length - 1];
		} else {
			target = this;
			stack = [this];
		}
		if(target == null) {
			target = this;
		}
		var touchId = touch.id;
		var touchData = null;
		if(this.__touchData.h.hasOwnProperty(touchId)) {
			touchData = this.__touchData.h[touchId];
		} else {
			touchData = openfl__$internal_utils_TouchData.__pool.get();
			touchData.reset();
			touchData.touch = touch;
			this.__touchData.h[touchId] = touchData;
		}
		var touchType = null;
		var releaseTouchData = false;
		switch(type) {
		case "touchBegin":
			touchData.touchDownTarget = target;
			break;
		case "touchEnd":
			if(touchData.touchDownTarget == target) {
				touchType = "touchTap";
			}
			touchData.touchDownTarget = null;
			releaseTouchData = true;
			break;
		default:
		}
		var localPoint = openfl_geom_Point.__pool.get();
		var isPrimaryTouchPoint = this.__primaryTouch == touch;
		var touchEvent = openfl_events_TouchEvent.__create(type,null,touchX,touchY,target.__globalToLocal(targetPoint,localPoint),target);
		touchEvent.touchPointID = touchId;
		touchEvent.isPrimaryTouchPoint = isPrimaryTouchPoint;
		touchEvent.pressure = touch.pressure;
		this.__dispatchStack(touchEvent,stack);
		if(touchType != null) {
			touchEvent = openfl_events_TouchEvent.__create(touchType,null,touchX,touchY,target.__globalToLocal(targetPoint,localPoint),target);
			touchEvent.touchPointID = touchId;
			touchEvent.isPrimaryTouchPoint = isPrimaryTouchPoint;
			touchEvent.pressure = touch.pressure;
			this.__dispatchStack(touchEvent,stack);
		}
		var touchOverTarget = touchData.touchOverTarget;
		if(target != touchOverTarget && touchOverTarget != null) {
			touchEvent = openfl_events_TouchEvent.__create("touchOut",null,touchX,touchY,touchOverTarget.__globalToLocal(targetPoint,localPoint),touchOverTarget);
			touchEvent.touchPointID = touchId;
			touchEvent.isPrimaryTouchPoint = isPrimaryTouchPoint;
			touchEvent.pressure = touch.pressure;
			this.__dispatchTarget(touchOverTarget,touchEvent);
		}
		var touchOutStack = touchData.rollOutStack;
		var item;
		var i = 0;
		while(i < touchOutStack.length) {
			item = touchOutStack[i];
			if(stack.indexOf(item) == -1) {
				HxOverrides.remove(touchOutStack,item);
				touchEvent = openfl_events_TouchEvent.__create("touchRollOut",null,touchX,touchY,touchOverTarget.__globalToLocal(targetPoint,localPoint),touchOverTarget);
				touchEvent.touchPointID = touchId;
				touchEvent.isPrimaryTouchPoint = isPrimaryTouchPoint;
				touchEvent.bubbles = false;
				touchEvent.pressure = touch.pressure;
				this.__dispatchTarget(item,touchEvent);
			} else {
				++i;
			}
		}
		var _g = 0;
		while(_g < stack.length) {
			var item = stack[_g];
			++_g;
			if(touchOutStack.indexOf(item) == -1) {
				if(item.hasEventListener("touchRollOver")) {
					touchEvent = openfl_events_TouchEvent.__create("touchRollOver",null,touchX,touchY,touchOverTarget.__globalToLocal(targetPoint,localPoint),item);
					touchEvent.touchPointID = touchId;
					touchEvent.isPrimaryTouchPoint = isPrimaryTouchPoint;
					touchEvent.bubbles = false;
					touchEvent.pressure = touch.pressure;
					this.__dispatchTarget(item,touchEvent);
				}
				if(item.hasEventListener("touchRollOut")) {
					touchOutStack.push(item);
				}
			}
		}
		if(target != touchOverTarget) {
			if(target != null) {
				touchEvent = openfl_events_TouchEvent.__create("touchOver",null,touchX,touchY,target.__globalToLocal(targetPoint,localPoint),target);
				touchEvent.touchPointID = touchId;
				touchEvent.isPrimaryTouchPoint = isPrimaryTouchPoint;
				touchEvent.bubbles = true;
				touchEvent.pressure = touch.pressure;
				this.__dispatchTarget(target,touchEvent);
			}
			touchData.touchOverTarget = target;
		}
		openfl_geom_Point.__pool.release(targetPoint);
		openfl_geom_Point.__pool.release(localPoint);
		if(releaseTouchData) {
			this.__touchData.remove(touchId);
			touchData.reset();
			openfl__$internal_utils_TouchData.__pool.release(touchData);
		}
	}
	,__registerLimeModule: function(application) {
		application.onCreateWindow.add($bind(this,this.__onLimeCreateWindow));
		application.onUpdate.add($bind(this,this.__onLimeUpdate));
		application.onExit.add($bind(this,this.__onLimeModuleExit),false,0);
		var gamepad = lime_ui_Gamepad.devices.iterator();
		while(gamepad.hasNext()) {
			var gamepad1 = gamepad.next();
			this.__onLimeGamepadConnect(gamepad1);
		}
		lime_ui_Gamepad.onConnect.add($bind(this,this.__onLimeGamepadConnect));
		lime_ui_Touch.onStart.add($bind(this,this.__onLimeTouchStart));
		lime_ui_Touch.onMove.add($bind(this,this.__onLimeTouchMove));
		lime_ui_Touch.onEnd.add($bind(this,this.__onLimeTouchEnd));
		lime_ui_Touch.onCancel.add($bind(this,this.__onLimeTouchCancel));
	}
	,__resize: function() {
		var cacheWidth = this.stageWidth;
		var cacheHeight = this.stageHeight;
		var windowWidth = this.window.__width * this.window.__scale | 0;
		var windowHeight = this.window.__height * this.window.__scale | 0;
		this.__logicalWidth = windowWidth;
		this.__logicalHeight = windowHeight;
		this.__displayMatrix.identity();
		if(this.get_fullScreenSourceRect() != null && this.window.__fullscreen) {
			this.stageWidth = this.get_fullScreenSourceRect().width | 0;
			this.stageHeight = this.get_fullScreenSourceRect().height | 0;
			var displayScaleX = windowWidth / this.stageWidth;
			var displayScaleY = windowHeight / this.stageHeight;
			this.__displayMatrix.translate(-this.get_fullScreenSourceRect().x,-this.get_fullScreenSourceRect().y);
			this.__displayMatrix.scale(displayScaleX,displayScaleY);
			this.__displayRect.setTo(this.get_fullScreenSourceRect().get_left(),this.get_fullScreenSourceRect().get_right(),this.get_fullScreenSourceRect().get_top(),this.get_fullScreenSourceRect().get_bottom());
		} else {
			if(this.__logicalWidth == 0 && this.__logicalHeight == 0) {
				this.stageWidth = windowWidth;
				this.stageHeight = windowHeight;
			} else {
				this.stageWidth = this.__logicalWidth;
				this.stageHeight = this.__logicalHeight;
				var scaleX = windowWidth / this.stageWidth;
				var scaleY = windowHeight / this.stageHeight;
				var targetScale = Math.min(scaleX,scaleY);
				var offsetX = Math.round((windowWidth - this.stageWidth * targetScale) / 2);
				var offsetY = Math.round((windowHeight - this.stageHeight * targetScale) / 2);
				this.__displayMatrix.scale(targetScale,targetScale);
				this.__displayMatrix.translate(offsetX,offsetY);
			}
			this.__displayRect.setTo(0,0,this.stageWidth,this.stageHeight);
		}
		if(this.context3D != null) {
			this.context3D.configureBackBuffer(windowWidth,windowHeight,0,true,true,true);
		}
		var stage3D = this.stage3Ds.iterator();
		while(stage3D.hasNext()) {
			var stage3D1 = stage3D.next();
			stage3D1.__resize(windowWidth,windowHeight);
		}
		if(this.__renderer != null) {
			this.__renderer.__resize(windowWidth,windowHeight);
		}
		if(this.stageWidth != cacheWidth || this.stageHeight != cacheHeight) {
			this.__renderDirty = true;
			this.__setTransformDirty();
			var event = null;
			event = new openfl_events_Event("resize");
			this.__dispatchEvent(event);
		}
	}
	,__setLogicalSize: function(width,height) {
		this.__logicalWidth = width;
		this.__logicalHeight = height;
		this.__resize();
	}
	,__startDrag: function(sprite,lockCenter,bounds) {
		if(bounds == null) {
			this.__dragBounds = null;
		} else {
			this.__dragBounds = new openfl_geom_Rectangle();
			var right = bounds.get_right();
			var bottom = bounds.get_bottom();
			this.__dragBounds.x = right < bounds.x ? right : bounds.x;
			this.__dragBounds.y = bottom < bounds.y ? bottom : bounds.y;
			this.__dragBounds.width = Math.abs(bounds.width);
			this.__dragBounds.height = Math.abs(bounds.height);
		}
		this.__dragObject = sprite;
		if(this.__dragObject != null) {
			if(lockCenter) {
				this.__dragOffsetX = 0;
				this.__dragOffsetY = 0;
			} else {
				var mouse = openfl_geom_Point.__pool.get();
				mouse.setTo(this.get_mouseX(),this.get_mouseY());
				var parent = this.__dragObject.parent;
				if(parent != null) {
					var _this = parent.__getWorldTransform();
					var norm = _this.a * _this.d - _this.b * _this.c;
					if(norm == 0) {
						mouse.x = -_this.tx;
						mouse.y = -_this.ty;
					} else {
						var px = 1.0 / norm * (_this.c * (_this.ty - mouse.y) + _this.d * (mouse.x - _this.tx));
						mouse.y = 1.0 / norm * (_this.a * (mouse.y - _this.ty) + _this.b * (_this.tx - mouse.x));
						mouse.x = px;
					}
				}
				this.__dragOffsetX = this.__dragObject.get_x() - mouse.x;
				this.__dragOffsetY = this.__dragObject.get_y() - mouse.y;
				openfl_geom_Point.__pool.release(mouse);
			}
		}
	}
	,__stopDrag: function(sprite) {
		this.__dragBounds = null;
		this.__dragObject = null;
	}
	,__unregisterLimeModule: function(application) {
		application.onCreateWindow.remove($bind(this,this.__onLimeCreateWindow));
		application.onUpdate.remove($bind(this,this.__onLimeUpdate));
		application.onExit.remove($bind(this,this.__onLimeModuleExit));
		lime_ui_Gamepad.onConnect.remove($bind(this,this.__onLimeGamepadConnect));
		lime_ui_Touch.onStart.remove($bind(this,this.__onLimeTouchStart));
		lime_ui_Touch.onMove.remove($bind(this,this.__onLimeTouchMove));
		lime_ui_Touch.onEnd.remove($bind(this,this.__onLimeTouchEnd));
		lime_ui_Touch.onCancel.remove($bind(this,this.__onLimeTouchCancel));
	}
	,__update: function(transformOnly,updateChildren) {
		if(transformOnly) {
			if(this.__transformDirty) {
				openfl_display_DisplayObjectContainer.prototype.__update.call(this,true,updateChildren);
				if(updateChildren) {
					this.__transformDirty = false;
				}
			}
		} else if(this.__transformDirty || this.__renderDirty) {
			openfl_display_DisplayObjectContainer.prototype.__update.call(this,false,updateChildren);
			if(updateChildren) {
				if(openfl_display_DisplayObject.__supportDOM) {
					this.__wasDirty = true;
				}
			}
		} else if(!this.__renderDirty && this.__wasDirty) {
			openfl_display_DisplayObjectContainer.prototype.__update.call(this,false,updateChildren);
			if(updateChildren) {
				this.__wasDirty = false;
			}
		}
	}
	,get_color: function() {
		return this.__color;
	}
	,set_color: function(value) {
		if(value == null) {
			this.__transparent = true;
			value = 0;
		} else {
			this.__transparent = false;
		}
		if(this.__color != value) {
			var r = (value & 16711680) >>> 16;
			var g = (value & 65280) >>> 8;
			var b = value & 255;
			this.__colorSplit[0] = r / 255;
			this.__colorSplit[1] = g / 255;
			this.__colorSplit[2] = b / 255;
			this.__colorString = "#" + StringTools.hex(value & 16777215,6);
			this.__renderDirty = true;
			this.__color = -16777216 | value & 16777215;
		}
		return value;
	}
	,get_contentsScaleFactor: function() {
		return this.__contentsScaleFactor;
	}
	,get_displayState: function() {
		return this.__displayState;
	}
	,set_displayState: function(value) {
		if(this.window != null) {
			if(value == 2) {
				if(this.window.__fullscreen) {
					this.window.set_fullscreen(false);
				}
			} else if(!this.window.__fullscreen) {
				this.window.set_fullscreen(true);
			}
		}
		return this.__displayState = value;
	}
	,get_focus: function() {
		return this.__focus;
	}
	,set_focus: function(value) {
		if(value != this.__focus) {
			var oldFocus = this.__focus;
			this.__focus = value;
			this.__cacheFocus = value;
			if(oldFocus != null) {
				var event = new openfl_events_FocusEvent("focusOut",true,false,value,false,0);
				var stack = [];
				oldFocus.__getInteractive(stack);
				stack.reverse();
				this.__dispatchStack(event,stack);
			}
			if(value != null) {
				var event = new openfl_events_FocusEvent("focusIn",true,false,oldFocus,false,0);
				var stack = [];
				value.__getInteractive(stack);
				stack.reverse();
				this.__dispatchStack(event,stack);
			}
		}
		return value;
	}
	,get_frameRate: function() {
		if(this.window != null) {
			return this.window.__backend.getFrameRate();
		}
		return 0;
	}
	,set_frameRate: function(value) {
		if(this.window != null) {
			return this.window.__backend.setFrameRate(value);
		}
		return value;
	}
	,get_fullScreenHeight: function() {
		return Math.ceil(this.window.get_display().currentMode.height * this.window.__scale);
	}
	,get_fullScreenSourceRect: function() {
		if(this.__fullScreenSourceRect == null) {
			return null;
		} else {
			return this.__fullScreenSourceRect.clone();
		}
	}
	,set_fullScreenSourceRect: function(value) {
		if(value == null) {
			if(this.__fullScreenSourceRect != null) {
				this.__fullScreenSourceRect = null;
				this.__resize();
			}
		} else if(!value.equals(this.__fullScreenSourceRect)) {
			this.__fullScreenSourceRect = value.clone();
			this.__resize();
		}
		return value;
	}
	,get_fullScreenWidth: function() {
		return Math.ceil(this.window.get_display().currentMode.width * this.window.__scale);
	}
	,set_height: function(value) {
		return this.get_height();
	}
	,get_mouseX: function() {
		return this.__mouseX;
	}
	,get_mouseY: function() {
		return this.__mouseY;
	}
	,get_quality: function() {
		return this.__quality;
	}
	,set_quality: function(value) {
		this.__quality = value;
		if(this.__renderer != null) {
			var tmp = this.get_quality();
			this.__renderer.__allowSmoothing = tmp != 2;
		}
		return value;
	}
	,set_rotation: function(value) {
		return 0;
	}
	,get_scaleMode: function() {
		return this.__scaleMode;
	}
	,set_scaleMode: function(value) {
		return this.__scaleMode = value;
	}
	,set_scaleX: function(value) {
		return 0;
	}
	,set_scaleY: function(value) {
		return 0;
	}
	,get_tabEnabled: function() {
		return false;
	}
	,set_tabEnabled: function(value) {
		throw haxe_Exception.thrown(new openfl_errors_IllegalOperationError("Error: The Stage class does not implement this property or method."));
	}
	,get_tabIndex: function() {
		return -1;
	}
	,set_tabIndex: function(value) {
		throw haxe_Exception.thrown(new openfl_errors_IllegalOperationError("Error: The Stage class does not implement this property or method."));
	}
	,set_transform: function(value) {
		return this.get_transform();
	}
	,set_width: function(value) {
		return this.get_width();
	}
	,set_x: function(value) {
		return 0;
	}
	,set_y: function(value) {
		return 0;
	}
	,__class__: openfl_display_Stage
	,__properties__: $extend(openfl_display_DisplayObjectContainer.prototype.__properties__,{set_scaleMode:"set_scaleMode",get_scaleMode:"get_scaleMode",set_quality:"set_quality",get_quality:"get_quality",get_fullScreenWidth:"get_fullScreenWidth",set_fullScreenSourceRect:"set_fullScreenSourceRect",get_fullScreenSourceRect:"get_fullScreenSourceRect",get_fullScreenHeight:"get_fullScreenHeight",set_frameRate:"set_frameRate",get_frameRate:"get_frameRate",set_focus:"set_focus",get_focus:"get_focus",set_displayState:"set_displayState",get_displayState:"get_displayState",get_contentsScaleFactor:"get_contentsScaleFactor",set_color:"set_color",get_color:"get_color"})
});
var openfl_display_Stage3D = function(stage) {
	openfl_events_EventDispatcher.call(this);
	this.__stage = stage;
	this.__height = 0;
	this.__projectionTransform = new openfl_geom_Matrix3D();
	this.__renderTransform = new openfl_geom_Matrix3D();
	this.__width = 0;
	this.__x = 0;
	this.__y = 0;
	this.visible = true;
	if(stage.stageWidth > 0 && stage.stageHeight > 0) {
		this.__resize(stage.stageWidth,stage.stageHeight);
	}
};
$hxClasses["openfl.display.Stage3D"] = openfl_display_Stage3D;
openfl_display_Stage3D.__name__ = "openfl.display.Stage3D";
openfl_display_Stage3D.__super__ = openfl_events_EventDispatcher;
openfl_display_Stage3D.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	context3D: null
	,visible: null
	,__contextLost: null
	,__contextRequested: null
	,__height: null
	,__indexBuffer: null
	,__projectionTransform: null
	,__renderTransform: null
	,__stage: null
	,__vertexBuffer: null
	,__width: null
	,__x: null
	,__y: null
	,__canvas: null
	,__renderContext: null
	,__style: null
	,__webgl: null
	,requestContext3D: function(context3DRenderMode,profile) {
		if(profile == null) {
			profile = 0;
		}
		if(context3DRenderMode == null) {
			context3DRenderMode = 0;
		}
		if(this.__contextLost) {
			this.__contextRequested = true;
			return;
		}
		if(this.context3D != null) {
			this.__contextRequested = true;
			haxe_Timer.delay($bind(this,this.__dispatchCreate),1);
		} else if(!this.__contextRequested) {
			this.__contextRequested = true;
			haxe_Timer.delay($bind(this,this.__createContext),1);
		}
	}
	,requestContext3DMatchingProfiles: function(profiles) {
		this.requestContext3D();
	}
	,__createContext: function() {
		var stage = this.__stage;
		var renderer = stage.__renderer;
		if(renderer.__type == "cairo" || renderer.__type == "canvas") {
			this.__dispatchError();
			return;
		}
		if(renderer.__type == "opengl") {
			this.context3D = new openfl_display3D_Context3D(stage,stage.context3D.__contextState,this);
			this.__dispatchCreate();
		} else if(renderer.__type == "dom") {
			this.__canvas = window.document.createElement("canvas");
			this.__canvas.width = stage.stageWidth;
			this.__canvas.height = stage.stageHeight;
			var $window = stage.window;
			var attributes = renderer.__context.attributes;
			var transparentBackground = Object.prototype.hasOwnProperty.call(attributes,"background") && attributes.background == null;
			var colorDepth = Object.prototype.hasOwnProperty.call(attributes,"colorDepth") ? attributes.colorDepth : 32;
			var options = Object.prototype.hasOwnProperty.call(attributes,"antialiasing") && attributes.antialiasing > 0;
			var options1 = { alpha : transparentBackground || colorDepth > 16, antialias : options, depth : true, premultipliedAlpha : true, stencil : true, preserveDrawingBuffer : false};
			this.__webgl = js_html__$CanvasElement_CanvasUtil.getContextWebGL(this.__canvas,options1);
			if(this.__webgl != null) {
				this.__dispatchError();
			} else {
				this.__dispatchError();
			}
		}
	}
	,__dispatchError: function() {
		this.__contextRequested = false;
		this.dispatchEvent(new openfl_events_ErrorEvent("error",false,false,"Context3D not available"));
	}
	,__dispatchCreate: function() {
		if(this.__contextRequested) {
			this.__contextRequested = false;
			this.dispatchEvent(new openfl_events_Event("context3DCreate"));
		}
	}
	,__lostContext: function() {
		this.__contextLost = true;
		if(this.context3D != null) {
			this.context3D.__dispose();
			this.__contextRequested = true;
		}
	}
	,__resize: function(width,height) {
		if(width != this.__width || height != this.__height) {
			if(this.__canvas != null) {
				this.__canvas.width = width;
				this.__canvas.height = height;
			}
			this.__projectionTransform.copyRawDataFrom(openfl_Vector.toFloatVector(null,null,null,[2.0 / (width > 0 ? width : 1),0.0,0.0,0.0,0.0,-2.0 / (height > 0 ? height : 1),0.0,0.0,0.0,0.0,-0.001,0.0,-1.0,1.0,0.0,1.0]));
			this.__renderTransform.identity();
			this.__renderTransform.appendTranslation(this.__x,this.__y,0);
			this.__renderTransform.append(this.__projectionTransform);
			this.__width = width;
			this.__height = height;
		}
	}
	,__restoreContext: function() {
		this.__contextLost = false;
		this.__createContext();
	}
	,get_x: function() {
		return this.__x;
	}
	,set_x: function(value) {
		if(this.__x == value) {
			return value;
		}
		this.__x = value;
		this.__renderTransform.identity();
		this.__renderTransform.appendTranslation(this.__x,this.__y,0);
		this.__renderTransform.append(this.__projectionTransform);
		return value;
	}
	,get_y: function() {
		return this.__y;
	}
	,set_y: function(value) {
		if(this.__y == value) {
			return value;
		}
		this.__y = value;
		this.__renderTransform.identity();
		this.__renderTransform.appendTranslation(this.__x,this.__y,0);
		this.__renderTransform.append(this.__projectionTransform);
		return value;
	}
	,__class__: openfl_display_Stage3D
	,__properties__: {set_y:"set_y",get_y:"get_y",set_x:"set_x",get_x:"get_x"}
});
var openfl_display_StageAlign = {};
openfl_display_StageAlign.fromString = function(value) {
	switch(value) {
	case "bottom":
		return 0;
	case "bottomLeft":
		return 1;
	case "bottomRight":
		return 2;
	case "left":
		return 3;
	case "right":
		return 4;
	case "top":
		return 5;
	case "topLeft":
		return 6;
	case "topRight":
		return 7;
	default:
		return null;
	}
};
openfl_display_StageAlign.toString = function(this1) {
	switch(this1) {
	case 0:
		return "bottom";
	case 1:
		return "bottomLeft";
	case 2:
		return "bottomRight";
	case 3:
		return "left";
	case 4:
		return "right";
	case 5:
		return "top";
	case 6:
		return "topLeft";
	case 7:
		return "topRight";
	default:
		return null;
	}
};
var openfl_display_StageDisplayState = {};
openfl_display_StageDisplayState.fromString = function(value) {
	switch(value) {
	case "fullScreen":
		return 0;
	case "fullScreenInteractive":
		return 1;
	case "normal":
		return 2;
	default:
		return null;
	}
};
openfl_display_StageDisplayState.toString = function(this1) {
	switch(this1) {
	case 0:
		return "fullScreen";
	case 1:
		return "fullScreenInteractive";
	case 2:
		return "normal";
	default:
		return null;
	}
};
var openfl_display_StageQuality = {};
openfl_display_StageQuality.fromString = function(value) {
	switch(value) {
	case "best":
		return 0;
	case "high":
		return 1;
	case "low":
		return 2;
	case "medium":
		return 3;
	default:
		return null;
	}
};
openfl_display_StageQuality.toString = function(this1) {
	switch(this1) {
	case 0:
		return "best";
	case 1:
		return "high";
	case 2:
		return "low";
	case 3:
		return "medium";
	default:
		return null;
	}
};
var openfl_display_StageScaleMode = {};
openfl_display_StageScaleMode.fromString = function(value) {
	switch(value) {
	case "exactFit":
		return 0;
	case "noBorder":
		return 1;
	case "noScale":
		return 2;
	case "showAll":
		return 3;
	default:
		return null;
	}
};
openfl_display_StageScaleMode.toString = function(this1) {
	switch(this1) {
	case 0:
		return "exactFit";
	case 1:
		return "noBorder";
	case 2:
		return "noScale";
	case 3:
		return "showAll";
	default:
		return null;
	}
};
var openfl_display_Tile = function(id,x,y,scaleX,scaleY,rotation,originX,originY) {
	if(originY == null) {
		originY = 0;
	}
	if(originX == null) {
		originX = 0;
	}
	if(rotation == null) {
		rotation = 0;
	}
	if(scaleY == null) {
		scaleY = 1;
	}
	if(scaleX == null) {
		scaleX = 1;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	if(id == null) {
		id = 0;
	}
	this.__id = id;
	this.__matrix = new openfl_geom_Matrix();
	if(x != 0) {
		this.set_x(x);
	}
	if(y != 0) {
		this.set_y(y);
	}
	if(scaleX != 1) {
		this.set_scaleX(scaleX);
	}
	if(scaleY != 1) {
		this.set_scaleY(scaleY);
	}
	if(rotation != 0) {
		this.set_rotation(rotation);
	}
	this.__dirty = true;
	this.__length = 0;
	this.__originX = originX;
	this.__originY = originY;
	this.__alpha = 1;
	this.__blendMode = null;
	this.__visible = true;
};
$hxClasses["openfl.display.Tile"] = openfl_display_Tile;
openfl_display_Tile.__name__ = "openfl.display.Tile";
openfl_display_Tile.prototype = {
	data: null
	,parent: null
	,__alpha: null
	,__blendMode: null
	,__colorTransform: null
	,__dirty: null
	,__id: null
	,__length: null
	,__matrix: null
	,__originX: null
	,__originY: null
	,__rect: null
	,__rotation: null
	,__rotationCosine: null
	,__rotationSine: null
	,__scaleX: null
	,__scaleY: null
	,__shader: null
	,__tileset: null
	,__visible: null
	,clone: function() {
		var tile = new openfl_display_Tile(this.__id);
		tile.__alpha = this.__alpha;
		tile.__blendMode = this.__blendMode;
		tile.__originX = this.__originX;
		tile.__originY = this.__originY;
		if(this.__rect != null) {
			tile.__rect = this.__rect.clone();
		}
		tile.set_matrix(this.__matrix.clone());
		tile.__shader = this.__shader;
		tile.set_tileset(this.__tileset);
		if(this.__colorTransform != null) {
			tile.__colorTransform = this.__colorTransform.__clone();
		}
		return tile;
	}
	,getBounds: function(targetCoordinateSpace) {
		var result = new openfl_geom_Rectangle();
		this.__findTileRect(result);
		var matrix = openfl_geom_Matrix.__pool.get();
		if(targetCoordinateSpace != null && targetCoordinateSpace != this) {
			matrix.copyFrom(this.__getWorldTransform());
			var targetMatrix = openfl_geom_Matrix.__pool.get();
			targetMatrix.copyFrom(targetCoordinateSpace.__getWorldTransform());
			targetMatrix.invert();
			matrix.concat(targetMatrix);
			openfl_geom_Matrix.__pool.release(targetMatrix);
		} else {
			matrix.identity();
		}
		this.__getBounds(result,matrix);
		openfl_geom_Matrix.__pool.release(matrix);
		return result;
	}
	,__getBounds: function(result,matrix) {
		result.__transform(result,matrix);
	}
	,hitTestTile: function(obj) {
		if(obj != null && obj.parent != null && this.parent != null) {
			var currentBounds = this.getBounds(this);
			var targetBounds = obj.getBounds(this);
			return currentBounds.intersects(targetBounds);
		}
		return false;
	}
	,invalidate: function() {
		this.__setRenderDirty();
	}
	,__findTileRect: function(result) {
		if(this.get_tileset() == null) {
			if(this.parent != null) {
				var parentTileset = this.parent.__findTileset();
				if(parentTileset == null) {
					result.setTo(0,0,0,0);
				} else {
					var _g = parentTileset.getRect(this.get_id());
					if(_g == null) {
						result.setTo(0,0,0,0);
					} else {
						var not_null = _g;
						result.copyFrom(not_null);
					}
				}
			} else {
				result.setTo(0,0,0,0);
			}
		} else {
			result.copyFrom(this.get_tileset().getRect(this.get_id()));
		}
		result.x = 0;
		result.y = 0;
	}
	,__findTileset: function() {
		if(this.get_tileset() != null) {
			return this.get_tileset();
		}
		if(((this.parent) instanceof openfl_display_Tilemap)) {
			return this.parent.get_tileset();
		}
		if(this.parent == null) {
			return null;
		}
		return this.parent.__findTileset();
	}
	,__getWorldTransform: function() {
		var retval = this.get_matrix().clone();
		if(this.parent != null) {
			retval.concat(this.parent.__getWorldTransform());
		}
		return retval;
	}
	,__setRenderDirty: function() {
		if(!this.__dirty) {
			this.__dirty = true;
			if(this.parent != null) {
				this.parent.__setRenderDirty();
			}
		}
	}
	,get_alpha: function() {
		return this.__alpha;
	}
	,set_alpha: function(value) {
		if(value != this.__alpha) {
			this.__alpha = value;
			this.__setRenderDirty();
		}
		return value;
	}
	,get_blendMode: function() {
		return this.__blendMode;
	}
	,set_blendMode: function(value) {
		if(value != this.__blendMode) {
			this.__blendMode = value;
			this.__setRenderDirty();
		}
		return value;
	}
	,get_colorTransform: function() {
		return this.__colorTransform;
	}
	,set_colorTransform: function(value) {
		if(value != this.__colorTransform) {
			this.__colorTransform = value;
			this.__setRenderDirty();
		}
		return value;
	}
	,get_height: function() {
		var result = openfl_geom_Rectangle.__pool.get();
		this.__findTileRect(result);
		this.__getBounds(result,this.get_matrix());
		var h = result.height;
		openfl_geom_Rectangle.__pool.release(result);
		return h;
	}
	,set_height: function(value) {
		var result = openfl_geom_Rectangle.__pool.get();
		this.__findTileRect(result);
		if(result.height != 0) {
			this.set_scaleY(value / result.height);
		}
		openfl_geom_Rectangle.__pool.release(result);
		return value;
	}
	,get_id: function() {
		return this.__id;
	}
	,set_id: function(value) {
		if(value != this.__id) {
			this.__id = value;
			this.__setRenderDirty();
		}
		return value;
	}
	,get_matrix: function() {
		return this.__matrix;
	}
	,set_matrix: function(value) {
		if(value != this.__matrix) {
			this.__rotation = null;
			this.__scaleX = null;
			this.__scaleY = null;
			this.__matrix = value;
			this.__setRenderDirty();
		}
		return value;
	}
	,get_originX: function() {
		return this.__originX;
	}
	,set_originX: function(value) {
		if(value != this.__originX) {
			this.__originX = value;
			this.__setRenderDirty();
		}
		return value;
	}
	,get_originY: function() {
		return this.__originY;
	}
	,set_originY: function(value) {
		if(value != this.__originY) {
			this.__originY = value;
			this.__setRenderDirty();
		}
		return value;
	}
	,get_rect: function() {
		return this.__rect;
	}
	,set_rect: function(value) {
		if(value != this.__rect) {
			this.__rect = value;
			this.__setRenderDirty();
		}
		return value;
	}
	,get_rotation: function() {
		if(this.__rotation == null) {
			if(this.__matrix.b == 0 && this.__matrix.c == 0) {
				this.__rotation = 0;
				this.__rotationSine = 0;
				this.__rotationCosine = 1;
			} else {
				var radians = Math.atan2(this.__matrix.d,this.__matrix.c) - Math.PI / 2;
				this.__rotation = radians * (180 / Math.PI);
				this.__rotationSine = Math.sin(radians);
				this.__rotationCosine = Math.cos(radians);
			}
		}
		return this.__rotation;
	}
	,set_rotation: function(value) {
		if(value != this.__rotation) {
			this.__rotation = value;
			var radians = value * (Math.PI / 180);
			this.__rotationSine = Math.sin(radians);
			this.__rotationCosine = Math.cos(radians);
			var __scaleX = this.get_scaleX();
			var __scaleY = this.get_scaleY();
			this.__matrix.a = this.__rotationCosine * __scaleX;
			this.__matrix.b = this.__rotationSine * __scaleX;
			this.__matrix.c = -this.__rotationSine * __scaleY;
			this.__matrix.d = this.__rotationCosine * __scaleY;
			this.__setRenderDirty();
		}
		return value;
	}
	,get_scaleX: function() {
		if(this.__scaleX == null) {
			if(this.get_matrix().b == 0) {
				this.__scaleX = this.__matrix.a;
			} else {
				this.__scaleX = Math.sqrt(this.__matrix.a * this.__matrix.a + this.__matrix.b * this.__matrix.b);
			}
		}
		return this.__scaleX;
	}
	,set_scaleX: function(value) {
		if(value != this.__scaleX) {
			this.__scaleX = value;
			if(this.__matrix.b == 0) {
				this.__matrix.a = value;
			} else {
				var rotation = this.get_rotation();
				var a = this.__rotationCosine * value;
				var b = this.__rotationSine * value;
				this.__matrix.a = a;
				this.__matrix.b = b;
			}
			this.__setRenderDirty();
		}
		return value;
	}
	,get_scaleY: function() {
		if(this.__scaleY == null) {
			if(this.__matrix.c == 0) {
				this.__scaleY = this.get_matrix().d;
			} else {
				this.__scaleY = Math.sqrt(this.__matrix.c * this.__matrix.c + this.__matrix.d * this.__matrix.d);
			}
		}
		return this.__scaleY;
	}
	,set_scaleY: function(value) {
		if(value != this.__scaleY) {
			this.__scaleY = value;
			if(this.__matrix.c == 0) {
				this.__matrix.d = value;
			} else {
				var rotation = this.get_rotation();
				var c = -this.__rotationSine * value;
				var d = this.__rotationCosine * value;
				this.__matrix.c = c;
				this.__matrix.d = d;
			}
			this.__setRenderDirty();
		}
		return value;
	}
	,get_shader: function() {
		return this.__shader;
	}
	,set_shader: function(value) {
		if(value != this.__shader) {
			this.__shader = value;
			this.__setRenderDirty();
		}
		return value;
	}
	,get_tileset: function() {
		return this.__tileset;
	}
	,set_tileset: function(value) {
		if(value != this.__tileset) {
			this.__tileset = value;
			this.__setRenderDirty();
		}
		return value;
	}
	,get_visible: function() {
		return this.__visible;
	}
	,set_visible: function(value) {
		if(value != this.__visible) {
			this.__visible = value;
			this.__setRenderDirty();
		}
		return value;
	}
	,get_width: function() {
		var result = openfl_geom_Rectangle.__pool.get();
		this.__findTileRect(result);
		this.__getBounds(result,this.get_matrix());
		var w = result.width;
		openfl_geom_Rectangle.__pool.release(result);
		return w;
	}
	,set_width: function(value) {
		var result = openfl_geom_Rectangle.__pool.get();
		this.__findTileRect(result);
		if(result.width != 0) {
			this.set_scaleX(value / result.width);
		}
		openfl_geom_Rectangle.__pool.release(result);
		return value;
	}
	,get_x: function() {
		return this.__matrix.tx;
	}
	,set_x: function(value) {
		if(value != this.__matrix.tx) {
			this.__matrix.tx = value;
			this.__setRenderDirty();
		}
		return value;
	}
	,get_y: function() {
		return this.__matrix.ty;
	}
	,set_y: function(value) {
		if(value != this.__matrix.ty) {
			this.__matrix.ty = value;
			this.__setRenderDirty();
		}
		return value;
	}
	,__class__: openfl_display_Tile
	,__properties__: {set_y:"set_y",get_y:"get_y",set_x:"set_x",get_x:"get_x",set_width:"set_width",get_width:"get_width",set_visible:"set_visible",get_visible:"get_visible",set_tileset:"set_tileset",get_tileset:"get_tileset",set_shader:"set_shader",get_shader:"get_shader",set_scaleY:"set_scaleY",get_scaleY:"get_scaleY",set_scaleX:"set_scaleX",get_scaleX:"get_scaleX",set_rotation:"set_rotation",get_rotation:"get_rotation",set_rect:"set_rect",get_rect:"get_rect",set_originY:"set_originY",get_originY:"get_originY",set_originX:"set_originX",get_originX:"get_originX",set_matrix:"set_matrix",get_matrix:"get_matrix",set_id:"set_id",get_id:"get_id",set_height:"set_height",get_height:"get_height",set_colorTransform:"set_colorTransform",get_colorTransform:"get_colorTransform",set_blendMode:"set_blendMode",get_blendMode:"get_blendMode",set_alpha:"set_alpha",get_alpha:"get_alpha"}
};
var openfl_display_TileContainer = function(x,y,scaleX,scaleY,rotation,originX,originY) {
	if(originY == null) {
		originY = 0;
	}
	if(originX == null) {
		originX = 0;
	}
	if(rotation == null) {
		rotation = 0;
	}
	if(scaleY == null) {
		scaleY = 1;
	}
	if(scaleX == null) {
		scaleX = 1;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	openfl_display_Tile.call(this,-1,x,y,scaleX,scaleY,rotation,originX,originY);
	this.__tiles = [];
	this.__length = 0;
};
$hxClasses["openfl.display.TileContainer"] = openfl_display_TileContainer;
openfl_display_TileContainer.__name__ = "openfl.display.TileContainer";
openfl_display_TileContainer.__interfaces__ = [openfl_display_ITileContainer];
openfl_display_TileContainer.__super__ = openfl_display_Tile;
openfl_display_TileContainer.prototype = $extend(openfl_display_Tile.prototype,{
	__tiles: null
	,addTile: function(tile) {
		if(tile == null) {
			return null;
		}
		if(tile.parent == this) {
			HxOverrides.remove(this.__tiles,tile);
			this.__length--;
		}
		this.__tiles[this.get_numTiles()] = tile;
		tile.parent = this;
		this.__length++;
		this.__setRenderDirty();
		return tile;
	}
	,addTileAt: function(tile,index) {
		if(tile == null) {
			return null;
		}
		if(tile.parent == this) {
			HxOverrides.remove(this.__tiles,tile);
			this.__length--;
		}
		this.__tiles.splice(index,0,tile);
		tile.parent = this;
		this.__length++;
		this.__setRenderDirty();
		return tile;
	}
	,addTiles: function(tiles) {
		var _g = 0;
		while(_g < tiles.length) {
			var tile = tiles[_g];
			++_g;
			this.addTile(tile);
		}
		return tiles;
	}
	,clone: function() {
		var group = new openfl_display_TileContainer();
		var _g = 0;
		var _g1 = this.__tiles;
		while(_g < _g1.length) {
			var tile = _g1[_g];
			++_g;
			group.addTile(tile.clone());
		}
		return group;
	}
	,contains: function(tile) {
		return this.__tiles.indexOf(tile) > -1;
	}
	,getBounds: function(targetCoordinateSpace) {
		var result = new openfl_geom_Rectangle();
		var rect = null;
		var _g = 0;
		var _g1 = this.__tiles;
		while(_g < _g1.length) {
			var tile = _g1[_g];
			++_g;
			rect = tile.getBounds(targetCoordinateSpace);
			result.__expand(rect.x,rect.y,rect.width,rect.height);
		}
		return result;
	}
	,getTileAt: function(index) {
		if(index >= 0 && index < this.get_numTiles()) {
			return this.__tiles[index];
		}
		return null;
	}
	,getTileIndex: function(tile) {
		var _g = 0;
		var _g1 = this.__tiles.length;
		while(_g < _g1) {
			var i = _g++;
			if(this.__tiles[i] == tile) {
				return i;
			}
		}
		return -1;
	}
	,removeTile: function(tile) {
		if(tile != null && tile.parent == this) {
			tile.parent = null;
			HxOverrides.remove(this.__tiles,tile);
			this.__length--;
			this.__setRenderDirty();
		}
		return tile;
	}
	,removeTileAt: function(index) {
		if(index >= 0 && index < this.get_numTiles()) {
			return this.removeTile(this.__tiles[index]);
		}
		return null;
	}
	,removeTiles: function(beginIndex,endIndex) {
		if(endIndex == null) {
			endIndex = 2147483647;
		}
		if(beginIndex == null) {
			beginIndex = 0;
		}
		if(beginIndex < 0) {
			beginIndex = 0;
		}
		if(endIndex > this.__tiles.length - 1) {
			endIndex = this.__tiles.length - 1;
		}
		var removed = this.__tiles.splice(beginIndex,endIndex - beginIndex + 1);
		var _g = 0;
		while(_g < removed.length) {
			var tile = removed[_g];
			++_g;
			tile.parent = null;
		}
		this.__length = this.__tiles.length;
		this.__setRenderDirty();
	}
	,setTileIndex: function(tile,index) {
		if(index >= 0 && index <= this.get_numTiles() && tile.parent == this) {
			HxOverrides.remove(this.__tiles,tile);
			this.__tiles.splice(index,0,tile);
			this.__setRenderDirty();
		}
	}
	,sortTiles: function(compareFunction) {
		this.__tiles.sort(compareFunction);
		this.__setRenderDirty();
	}
	,swapTiles: function(tile1,tile2) {
		if(tile1.parent == this && tile2.parent == this) {
			var index1 = this.__tiles.indexOf(tile1);
			var index2 = this.__tiles.indexOf(tile2);
			this.__tiles[index1] = tile2;
			this.__tiles[index2] = tile1;
			this.__setRenderDirty();
		}
	}
	,swapTilesAt: function(index1,index2) {
		var swap = this.__tiles[index1];
		this.__tiles[index1] = this.__tiles[index2];
		this.__tiles[index2] = swap;
		swap = null;
		this.__setRenderDirty();
	}
	,get_numTiles: function() {
		return this.__length;
	}
	,get_height: function() {
		var result = openfl_geom_Rectangle.__pool.get();
		var rect = null;
		var _g = 0;
		var _g1 = this.__tiles;
		while(_g < _g1.length) {
			var tile = _g1[_g];
			++_g;
			rect = tile.getBounds(this);
			result.__expand(rect.x,rect.y,rect.width,rect.height);
		}
		this.__getBounds(result,this.get_matrix());
		var h = result.height;
		openfl_geom_Rectangle.__pool.release(result);
		return h;
	}
	,set_height: function(value) {
		var result = openfl_geom_Rectangle.__pool.get();
		var rect = null;
		var _g = 0;
		var _g1 = this.__tiles;
		while(_g < _g1.length) {
			var tile = _g1[_g];
			++_g;
			rect = tile.getBounds(this);
			result.__expand(rect.x,rect.y,rect.width,rect.height);
		}
		if(result.height != 0) {
			this.set_scaleY(value / result.height);
		}
		openfl_geom_Rectangle.__pool.release(result);
		return value;
	}
	,get_width: function() {
		var result = openfl_geom_Rectangle.__pool.get();
		var rect = null;
		var _g = 0;
		var _g1 = this.__tiles;
		while(_g < _g1.length) {
			var tile = _g1[_g];
			++_g;
			rect = tile.getBounds(this);
			result.__expand(rect.x,rect.y,rect.width,rect.height);
		}
		this.__getBounds(result,this.get_matrix());
		var w = result.width;
		openfl_geom_Rectangle.__pool.release(result);
		return w;
	}
	,set_width: function(value) {
		var result = openfl_geom_Rectangle.__pool.get();
		var rect = null;
		var _g = 0;
		var _g1 = this.__tiles;
		while(_g < _g1.length) {
			var tile = _g1[_g];
			++_g;
			rect = tile.getBounds(this);
			result.__expand(rect.x,rect.y,rect.width,rect.height);
		}
		if(result.width != 0) {
			this.set_scaleX(value / result.width);
		}
		openfl_geom_Rectangle.__pool.release(result);
		return value;
	}
	,__class__: openfl_display_TileContainer
	,__properties__: $extend(openfl_display_Tile.prototype.__properties__,{get_numTiles:"get_numTiles"})
});
var openfl_display_Tilemap = function(width,height,tileset,smoothing) {
	if(smoothing == null) {
		smoothing = true;
	}
	openfl_display_DisplayObject.call(this);
	this.__tileset = tileset;
	this.smoothing = smoothing;
	this.tileAlphaEnabled = true;
	this.tileBlendModeEnabled = true;
	this.tileColorTransformEnabled = true;
	this.__group = new openfl_display_TileContainer();
	this.__group.set_tileset(tileset);
	this.__width = width;
	this.__height = height;
};
$hxClasses["openfl.display.Tilemap"] = openfl_display_Tilemap;
openfl_display_Tilemap.__name__ = "openfl.display.Tilemap";
openfl_display_Tilemap.__interfaces__ = [openfl_display_ITileContainer];
openfl_display_Tilemap.__super__ = openfl_display_DisplayObject;
openfl_display_Tilemap.prototype = $extend(openfl_display_DisplayObject.prototype,{
	tileAlphaEnabled: null
	,tileBlendModeEnabled: null
	,tileColorTransformEnabled: null
	,smoothing: null
	,__group: null
	,__tileset: null
	,__buffer: null
	,__bufferDirty: null
	,__height: null
	,__width: null
	,addTile: function(tile) {
		return this.__group.addTile(tile);
	}
	,addTileAt: function(tile,index) {
		return this.__group.addTileAt(tile,index);
	}
	,addTiles: function(tiles) {
		return this.__group.addTiles(tiles);
	}
	,contains: function(tile) {
		return this.__group.contains(tile);
	}
	,getTileAt: function(index) {
		return this.__group.getTileAt(index);
	}
	,getTileIndex: function(tile) {
		return this.__group.getTileIndex(tile);
	}
	,getTiles: function() {
		return this.__group.clone();
	}
	,removeTile: function(tile) {
		return this.__group.removeTile(tile);
	}
	,removeTileAt: function(index) {
		return this.__group.removeTileAt(index);
	}
	,removeTiles: function(beginIndex,endIndex) {
		if(endIndex == null) {
			endIndex = 2147483647;
		}
		if(beginIndex == null) {
			beginIndex = 0;
		}
		this.__group.removeTiles(beginIndex,endIndex);
	}
	,setTileIndex: function(tile,index) {
		this.__group.setTileIndex(tile,index);
	}
	,setTiles: function(group) {
		var _g = 0;
		var _g1 = this.__group.__tiles;
		while(_g < _g1.length) {
			var tile = _g1[_g];
			++_g;
			this.removeTile(tile);
		}
		var _g = 0;
		var _g1 = group.__tiles;
		while(_g < _g1.length) {
			var tile = _g1[_g];
			++_g;
			this.addTile(tile);
		}
	}
	,sortTiles: function(compareFunction) {
		this.__group.sortTiles(compareFunction);
	}
	,swapTiles: function(tile1,tile2) {
		this.__group.swapTiles(tile1,tile2);
	}
	,swapTilesAt: function(index1,index2) {
		this.__group.swapTilesAt(index1,index2);
	}
	,__enterFrame: function(deltaTime) {
		if(this.__group.__dirty) {
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
	}
	,__getBounds: function(rect,matrix) {
		var bounds = openfl_geom_Rectangle.__pool.get();
		bounds.setTo(0,0,this.__width,this.__height);
		bounds.__transform(bounds,matrix);
		rect.__expand(bounds.x,bounds.y,bounds.width,bounds.height);
		openfl_geom_Rectangle.__pool.release(bounds);
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly,hitObject) {
		if(!hitObject.get_visible() || this.__isMask) {
			return false;
		}
		if(this.get_mask() != null && !this.get_mask().__hitTestMask(x,y)) {
			return false;
		}
		this.__getRenderTransform();
		var _this = this.__renderTransform;
		var norm = _this.a * _this.d - _this.b * _this.c;
		var px = norm == 0 ? -_this.tx : 1.0 / norm * (_this.c * (_this.ty - y) + _this.d * (x - _this.tx));
		var _this = this.__renderTransform;
		var norm = _this.a * _this.d - _this.b * _this.c;
		var py = norm == 0 ? -_this.ty : 1.0 / norm * (_this.a * (y - _this.ty) + _this.b * (_this.tx - x));
		if(px > 0 && py > 0 && px <= this.__width && py <= this.__height) {
			if(stack != null && !interactiveOnly) {
				stack.push(hitObject);
			}
			return true;
		}
		return false;
	}
	,__renderCairo: function(renderer) {
	}
	,__renderCanvas: function(renderer) {
		this.__updateCacheBitmap(renderer,false);
		if(this.__cacheBitmap != null && !this.__isCacheBitmapRender) {
			var bitmap = this.__cacheBitmap;
			if(bitmap.__renderable) {
				var alpha = renderer.__getAlpha(bitmap.__worldAlpha);
				if(alpha > 0 && bitmap.__bitmapData != null && bitmap.__bitmapData.__isValid && bitmap.__bitmapData.readable) {
					var context = renderer.context;
					renderer.__setBlendMode(bitmap.__worldBlendMode);
					renderer.__pushMaskObject(bitmap,false);
					lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(bitmap.__bitmapData.image);
					context.globalAlpha = alpha;
					var scrollRect = bitmap.__scrollRect;
					renderer.setTransform(bitmap.__renderTransform,context);
					if(!renderer.__allowSmoothing || !bitmap.smoothing) {
						context.imageSmoothingEnabled = false;
					}
					if(scrollRect == null) {
						context.drawImage(bitmap.__bitmapData.image.get_src(),0,0,bitmap.__bitmapData.image.width,bitmap.__bitmapData.image.height);
					} else {
						context.drawImage(bitmap.__bitmapData.image.get_src(),scrollRect.x,scrollRect.y,scrollRect.width,scrollRect.height);
					}
					if(!renderer.__allowSmoothing || !bitmap.smoothing) {
						context.imageSmoothingEnabled = true;
					}
					renderer.__popMaskObject(bitmap,false);
				}
			}
		} else {
			if(!(this.opaqueBackground == null && this.__graphics == null)) {
				if(this.__renderable) {
					var alpha = renderer.__getAlpha(this.__worldAlpha);
					if(!(alpha <= 0)) {
						if(this.opaqueBackground != null && !this.__isCacheBitmapRender && this.get_width() > 0 && this.get_height() > 0) {
							renderer.__setBlendMode(this.__worldBlendMode);
							renderer.__pushMaskObject(this);
							var context = renderer.context;
							renderer.setTransform(this.__renderTransform,context);
							var color = this.opaqueBackground;
							context.fillStyle = "rgb(" + (color >>> 16 & 255) + "," + (color >>> 8 & 255) + "," + (color & 255) + ")";
							context.fillRect(0,0,this.get_width(),this.get_height());
							renderer.__popMaskObject(this);
						}
						if(this.__graphics != null) {
							if(this.__renderable) {
								var alpha = renderer.__getAlpha(this.__worldAlpha);
								if(!(alpha <= 0)) {
									var graphics = this.__graphics;
									if(graphics != null) {
										openfl__$internal_renderer_canvas_CanvasGraphics.render(graphics,renderer);
										var width = graphics.__width;
										var height = graphics.__height;
										var canvas = graphics.__canvas;
										if(canvas != null && graphics.__visible && width >= 1 && height >= 1) {
											var transform = graphics.__worldTransform;
											var context = renderer.context;
											var scrollRect = this.__scrollRect;
											var scale9Grid = this.__worldScale9Grid;
											if(scrollRect == null || scrollRect.width > 0 && scrollRect.height > 0) {
												renderer.__setBlendMode(this.__worldBlendMode);
												renderer.__pushMaskObject(this);
												context.globalAlpha = alpha;
												if(scale9Grid != null && transform.b == 0 && transform.c == 0) {
													context.setTransform(1,0,0,1,transform.tx,transform.ty);
													var bounds = graphics.__bounds;
													var scaleX = graphics.__renderTransform.a;
													var scaleY = graphics.__renderTransform.d;
													var renderScaleX = transform.a;
													var renderScaleY = transform.d;
													var left = Math.max(1,Math.round(scale9Grid.x * scaleX));
													var top = Math.round(scale9Grid.y * scaleY);
													var right = Math.max(1,Math.round((bounds.get_right() - scale9Grid.get_right()) * scaleX));
													var bottom = Math.round((bounds.get_bottom() - scale9Grid.get_bottom()) * scaleY);
													var centerWidth = Math.round(scale9Grid.width * scaleX);
													var centerHeight = Math.round(scale9Grid.height * scaleY);
													var renderLeft = Math.round(scale9Grid.x * renderScaleX);
													var renderTop = Math.round(scale9Grid.y * renderScaleY);
													var renderRight = Math.round((bounds.get_right() - scale9Grid.get_right()) * renderScaleX);
													var renderBottom = Math.round((bounds.get_bottom() - scale9Grid.get_bottom()) * renderScaleY);
													var renderCenterWidth = Math.round(width * renderScaleX) - renderLeft - renderRight;
													var renderCenterHeight = Math.round(height * renderScaleY) - renderTop - renderBottom;
													renderer.applySmoothing(context,false);
													if(centerWidth != 0 && centerHeight != 0) {
														context.drawImage(canvas,0,0,left,top,0,0,renderLeft,renderTop);
														context.drawImage(canvas,left,0,centerWidth,top,renderLeft,0,renderCenterWidth,renderTop);
														context.drawImage(canvas,left + centerWidth,0,right,top,renderLeft + renderCenterWidth,0,renderRight,renderTop);
														context.drawImage(canvas,0,top,left,centerHeight,0,renderTop,renderLeft,renderCenterHeight);
														context.drawImage(canvas,left,top,centerWidth,centerHeight,renderLeft,renderTop,renderCenterWidth,renderCenterHeight);
														context.drawImage(canvas,left + centerWidth,top,right,centerHeight,renderLeft + renderCenterWidth,renderTop,renderRight,renderCenterHeight);
														context.drawImage(canvas,0,top + centerHeight,left,bottom,0,renderTop + renderCenterHeight,renderLeft,renderBottom);
														context.drawImage(canvas,left,top + centerHeight,centerWidth,bottom,renderLeft,renderTop + renderCenterHeight,renderCenterWidth,renderBottom);
														context.drawImage(canvas,left + centerWidth,top + centerHeight,right,bottom,renderLeft + renderCenterWidth,renderTop + renderCenterHeight,renderRight,renderBottom);
													} else if(centerWidth == 0 && centerHeight != 0) {
														var renderWidth = renderLeft + renderCenterWidth + renderRight;
														context.drawImage(canvas,0,0,width,top,0,0,renderWidth,renderTop);
														context.drawImage(canvas,0,top,width,centerHeight,0,renderTop,renderWidth,renderCenterHeight);
														context.drawImage(canvas,0,top + centerHeight,width,bottom,0,renderTop + renderCenterHeight,renderWidth,renderBottom);
													} else if(centerHeight == 0 && centerWidth != 0) {
														var renderHeight = renderTop + renderCenterHeight + renderBottom;
														context.drawImage(canvas,0,0,left,height,0,0,renderLeft,renderHeight);
														context.drawImage(canvas,left,0,centerWidth,height,renderLeft,0,renderCenterWidth,renderHeight);
														context.drawImage(canvas,left + centerWidth,0,right,height,renderLeft + renderCenterWidth,0,renderRight,renderHeight);
													}
												} else {
													renderer.setTransform(transform,context);
													if(renderer.__isDOM) {
														var reverseScale = 1 / renderer.pixelRatio;
														context.scale(reverseScale,reverseScale);
													}
													context.drawImage(canvas,0,0,width,height);
												}
												renderer.__popMaskObject(this);
											}
										}
									}
								}
							}
						}
					}
				}
			}
			if(!(!this.__renderable || this.__group.__tiles.length == 0)) {
				var alpha = renderer.__getAlpha(this.__worldAlpha);
				if(!(alpha <= 0)) {
					var context = renderer.context;
					renderer.__setBlendMode(this.__worldBlendMode);
					renderer.__pushMaskObject(this);
					var rect = openfl_geom_Rectangle.__pool.get();
					rect.setTo(0,0,this.__width,this.__height);
					renderer.__pushMaskRect(rect,this.__renderTransform);
					if(!renderer.__allowSmoothing || !this.smoothing) {
						context.imageSmoothingEnabled = false;
					}
					openfl__$internal_renderer_canvas_CanvasTilemap.renderTileContainer(this.__group,renderer,this.__renderTransform,this.__tileset,renderer.__allowSmoothing && this.smoothing,this.tileAlphaEnabled,alpha,this.tileBlendModeEnabled,this.__worldBlendMode,null,null,rect);
					if(!renderer.__allowSmoothing || !this.smoothing) {
						context.imageSmoothingEnabled = true;
					}
					renderer.__popMaskRect();
					renderer.__popMaskObject(this);
					openfl_geom_Rectangle.__pool.release(rect);
				}
			}
		}
		this.__renderEvent(renderer);
	}
	,__renderDOM: function(renderer) {
		this.__updateCacheBitmap(renderer,false);
		if(this.__cacheBitmap != null && !this.__isCacheBitmapRender) {
			this.__renderDOMClear(renderer);
			this.__cacheBitmap.stage = this.stage;
			var bitmap = this.__cacheBitmap;
			if(bitmap.stage != null && bitmap.__worldVisible && bitmap.__renderable && bitmap.__bitmapData != null && bitmap.__bitmapData.__isValid && bitmap.__bitmapData.readable) {
				renderer.__pushMaskObject(bitmap);
				if(bitmap.__bitmapData.image.buffer.__srcImage != null) {
					openfl__$internal_renderer_dom_DOMBitmap.renderImage(bitmap,renderer);
				} else {
					openfl__$internal_renderer_dom_DOMBitmap.renderCanvas(bitmap,renderer);
				}
				renderer.__popMaskObject(bitmap);
			} else {
				openfl__$internal_renderer_dom_DOMBitmap.clear(bitmap,renderer);
			}
		} else {
			var tmp = this.opaqueBackground != null && !this.__isCacheBitmapRender && this.get_width() > 0 && this.get_height() > 0;
			var graphics = this.__graphics;
			if(this.stage != null && this.__worldVisible && this.__renderable && graphics != null) {
				openfl__$internal_renderer_canvas_CanvasGraphics.render(graphics,renderer.__canvasRenderer);
				if(graphics.__softwareDirty || this.__worldAlphaChanged || this.__canvas != graphics.__canvas) {
					if(graphics.__canvas != null) {
						if(this.__canvas != graphics.__canvas) {
							if(this.__canvas != null) {
								renderer.element.removeChild(this.__canvas);
							}
							this.__canvas = graphics.__canvas;
							this.__context = graphics.__context;
							renderer.__initializeElement(this,this.__canvas);
						}
					} else {
						openfl__$internal_renderer_dom_DOMShape.clear(this,renderer);
					}
				}
				if(this.__canvas != null) {
					renderer.__pushMaskObject(this);
					var cacheTransform = this.__renderTransform;
					this.__renderTransform = graphics.__worldTransform;
					if(graphics.__transformDirty) {
						graphics.__transformDirty = false;
						this.__renderTransformChanged = true;
					}
					renderer.__updateClip(this);
					renderer.__applyStyle(this,true,true,true);
					this.__renderTransform = cacheTransform;
					renderer.__popMaskObject(this);
				}
			} else {
				openfl__$internal_renderer_dom_DOMShape.clear(this,renderer);
			}
			if(this.stage != null && this.__worldVisible && this.__renderable && this.__group.__tiles.length > 0) {
				if(this.__canvas == null) {
					this.__canvas = window.document.createElement("canvas");
					this.__context = this.__canvas.getContext("2d");
					renderer.__initializeElement(this,this.__canvas);
				}
				this.__canvas.width = this.__width;
				this.__canvas.height = this.__height;
				renderer.__canvasRenderer.context = this.__context;
				var renderer1 = renderer.__canvasRenderer;
				if(!(!this.__renderable || this.__group.__tiles.length == 0)) {
					var alpha = renderer1.__getAlpha(this.__worldAlpha);
					if(!(alpha <= 0)) {
						var context = renderer1.context;
						renderer1.__setBlendMode(this.__worldBlendMode);
						renderer1.__pushMaskObject(this);
						var rect = openfl_geom_Rectangle.__pool.get();
						rect.setTo(0,0,this.__width,this.__height);
						renderer1.__pushMaskRect(rect,this.__renderTransform);
						if(!renderer1.__allowSmoothing || !this.smoothing) {
							context.imageSmoothingEnabled = false;
						}
						openfl__$internal_renderer_canvas_CanvasTilemap.renderTileContainer(this.__group,renderer1,this.__renderTransform,this.__tileset,renderer1.__allowSmoothing && this.smoothing,this.tileAlphaEnabled,alpha,this.tileBlendModeEnabled,this.__worldBlendMode,null,null,rect);
						if(!renderer1.__allowSmoothing || !this.smoothing) {
							context.imageSmoothingEnabled = true;
						}
						renderer1.__popMaskRect();
						renderer1.__popMaskObject(this);
						openfl_geom_Rectangle.__pool.release(rect);
					}
				}
				renderer.__canvasRenderer.context = null;
				renderer.__updateClip(this);
				renderer.__applyStyle(this,true,false,true);
			} else {
				openfl__$internal_renderer_dom_DOMTilemap.clear(this,renderer);
			}
		}
		this.__renderEvent(renderer);
	}
	,__renderDOMClear: function(renderer) {
		openfl__$internal_renderer_dom_DOMTilemap.clear(this,renderer);
	}
	,__renderFlash: function() {
	}
	,__renderGL: function(renderer) {
		this.__updateCacheBitmap(renderer,false);
		if(this.__cacheBitmap != null && !this.__isCacheBitmapRender) {
			openfl__$internal_renderer_context3D_Context3DBitmap.render(this.__cacheBitmap,renderer);
		} else {
			if(!(this.opaqueBackground == null && this.__graphics == null)) {
				if(!(!this.__renderable || this.__worldAlpha <= 0)) {
					if(this.opaqueBackground != null && !this.__isCacheBitmapRender && this.get_width() > 0 && this.get_height() > 0) {
						renderer.__setBlendMode(this.__worldBlendMode);
						renderer.__pushMaskObject(this);
						var context = renderer.__context3D;
						var rect = openfl_geom_Rectangle.__pool.get();
						rect.setTo(0,0,this.get_width(),this.get_height());
						renderer.__pushMaskRect(rect,this.__renderTransform);
						var color = this.opaqueBackground;
						context.clear((color >>> 16 & 255) / 255,(color >>> 8 & 255) / 255,(color & 255) / 255,1,0,0,1);
						renderer.__popMaskRect();
						renderer.__popMaskObject(this);
						openfl_geom_Rectangle.__pool.release(rect);
					}
					if(this.__graphics != null) {
						openfl__$internal_renderer_context3D_Context3DShape.render(this,renderer);
					}
				}
			}
			openfl__$internal_renderer_context3D_Context3DTilemap.render(this,renderer);
		}
		this.__renderEvent(renderer);
	}
	,__renderGLMask: function(renderer) {
		if(!(this.opaqueBackground == null && this.__graphics == null)) {
			var tmp = this.opaqueBackground != null && !this.__isCacheBitmapRender && this.get_width() > 0 && this.get_height() > 0;
			if(this.__graphics != null) {
				openfl__$internal_renderer_context3D_Context3DShape.renderMask(this,renderer);
			}
		}
		openfl__$internal_renderer_context3D_Context3DTilemap.renderMask(this,renderer);
	}
	,__shouldCacheHardware: function(value) {
		return true;
	}
	,__updateCacheBitmap: function(renderer,force) {
		if(this.__filters == null && renderer.__type == "opengl" && this.__cacheBitmap == null) {
			return false;
		}
		return openfl_display_DisplayObject.prototype.__updateCacheBitmap.call(this,renderer,force);
	}
	,get_height: function() {
		return this.__height * Math.abs(this.get_scaleY());
	}
	,set_height: function(value) {
		this.__height = value | 0;
		return this.__height * Math.abs(this.get_scaleY());
	}
	,get_numTiles: function() {
		return this.__group.__length;
	}
	,get_tileset: function() {
		return this.__tileset;
	}
	,set_tileset: function(value) {
		if(value != this.__tileset) {
			this.__tileset = value;
			this.__group.set_tileset(value);
			this.__group.__dirty = true;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		return value;
	}
	,get_width: function() {
		return this.__width * Math.abs(this.__scaleX);
	}
	,set_width: function(value) {
		this.__width = value | 0;
		return this.__width * Math.abs(this.__scaleX);
	}
	,__class__: openfl_display_Tilemap
	,__properties__: $extend(openfl_display_DisplayObject.prototype.__properties__,{set_tileset:"set_tileset",get_tileset:"get_tileset",get_numTiles:"get_numTiles"})
});
var openfl_display_Tileset = function(bitmapData,rects) {
	this.__bitmapData = bitmapData;
	this.rectData = openfl_Vector.toFloatVector(null);
	this.__data = [];
	if(rects != null) {
		var _g = 0;
		while(_g < rects.length) {
			var rect = rects[_g];
			++_g;
			this.addRect(rect);
		}
	}
};
$hxClasses["openfl.display.Tileset"] = openfl_display_Tileset;
openfl_display_Tileset.__name__ = "openfl.display.Tileset";
openfl_display_Tileset.prototype = {
	rectData: null
	,__bitmapData: null
	,__data: null
	,addRect: function(rect) {
		if(rect == null) {
			return -1;
		}
		this.rectData.push(rect.x);
		this.rectData.push(rect.y);
		this.rectData.push(rect.width);
		this.rectData.push(rect.height);
		var tileData = new openfl_display__$Tileset_TileData(rect);
		tileData.__update(this.__bitmapData);
		this.__data.push(tileData);
		return this.__data.length - 1;
	}
	,clone: function() {
		var tileset = new openfl_display_Tileset(this.__bitmapData,null);
		var rect = openfl_geom_Rectangle.__pool.get();
		var _g = 0;
		var _g1 = this.__data;
		while(_g < _g1.length) {
			var tileData = _g1[_g];
			++_g;
			rect.setTo(tileData.x,tileData.y,tileData.width,tileData.height);
			tileset.addRect(rect);
		}
		openfl_geom_Rectangle.__pool.release(rect);
		return tileset;
	}
	,hasRect: function(rect) {
		var _g = 0;
		var _g1 = this.__data;
		while(_g < _g1.length) {
			var tileData = _g1[_g];
			++_g;
			if(rect.x == tileData.x && rect.y == tileData.y && rect.width == tileData.width && rect.height == tileData.height) {
				return true;
			}
		}
		return false;
	}
	,getRect: function(id) {
		if(id < this.__data.length && id >= 0) {
			return new openfl_geom_Rectangle(this.__data[id].x,this.__data[id].y,this.__data[id].width,this.__data[id].height);
		}
		return null;
	}
	,getRectID: function(rect) {
		var tileData;
		var _g = 0;
		var _g1 = this.__data.length;
		while(_g < _g1) {
			var i = _g++;
			tileData = this.__data[i];
			if(rect.x == tileData.x && rect.y == tileData.y && rect.width == tileData.width && rect.height == tileData.height) {
				return i;
			}
		}
		return null;
	}
	,get_bitmapData: function() {
		return this.__bitmapData;
	}
	,set_bitmapData: function(value) {
		this.__bitmapData = value;
		var _g = 0;
		var _g1 = this.__data;
		while(_g < _g1.length) {
			var data = _g1[_g];
			++_g;
			data.__update(this.__bitmapData);
		}
		return value;
	}
	,get_numRects: function() {
		return this.__data.length;
	}
	,__class__: openfl_display_Tileset
	,__properties__: {get_numRects:"get_numRects",set_bitmapData:"set_bitmapData",get_bitmapData:"get_bitmapData"}
};
var openfl_display__$Tileset_TileData = function(rect) {
	if(rect != null) {
		this.x = rect.x | 0;
		this.y = rect.y | 0;
		this.width = rect.width | 0;
		this.height = rect.height | 0;
	}
};
$hxClasses["openfl.display._Tileset.TileData"] = openfl_display__$Tileset_TileData;
openfl_display__$Tileset_TileData.__name__ = "openfl.display._Tileset.TileData";
openfl_display__$Tileset_TileData.prototype = {
	height: null
	,width: null
	,x: null
	,y: null
	,__bitmapData: null
	,__uvHeight: null
	,__uvWidth: null
	,__uvX: null
	,__uvY: null
	,__update: function(bitmapData) {
		if(bitmapData != null) {
			var bitmapWidth = bitmapData.width;
			var bitmapHeight = bitmapData.height;
			this.__uvX = this.x / bitmapWidth;
			this.__uvY = this.y / bitmapHeight;
			this.__uvWidth = (this.x + this.width) / bitmapWidth;
			this.__uvHeight = (this.y + this.height) / bitmapHeight;
		}
	}
	,__class__: openfl_display__$Tileset_TileData
};
var openfl_display_TriangleCulling = {};
openfl_display_TriangleCulling.fromString = function(value) {
	switch(value) {
	case "negative":
		return 0;
	case "none":
		return 1;
	case "positive":
		return 2;
	default:
		return null;
	}
};
openfl_display_TriangleCulling.toString = function(this1) {
	switch(this1) {
	case 0:
		return "negative";
	case 1:
		return "none";
	case 2:
		return "positive";
	default:
		return null;
	}
};
var openfl_display_Window = function(application,attributes) {
	lime_ui_Window.call(this,application,attributes);
	this.stage = new openfl_display_Stage(this,Object.prototype.hasOwnProperty.call(attributes.context,"background") ? attributes.context.background : 16777215);
	if(Object.prototype.hasOwnProperty.call(attributes,"parameters")) {
		try {
			this.stage.get_loaderInfo().parameters = attributes.parameters;
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
		}
	}
	if(Object.prototype.hasOwnProperty.call(attributes,"resizable") && !attributes.resizable) {
		this.stage.__setLogicalSize(attributes.width,attributes.height);
	}
	application.addModule(this.stage);
};
$hxClasses["openfl.display.Window"] = openfl_display_Window;
openfl_display_Window.__name__ = "openfl.display.Window";
openfl_display_Window.__super__ = lime_ui_Window;
openfl_display_Window.prototype = $extend(lime_ui_Window.prototype,{
	__class__: openfl_display_Window
});
var openfl_display3D_Context3D = function(stage,contextState,stage3D) {
	this.profile = 3;
	this.driverInfo = "OpenGL (Direct blitting)";
	this.backBufferWidth = 0;
	this.backBufferHeight = 0;
	openfl_events_EventDispatcher.call(this);
	this.__stage = stage;
	this.__contextState = contextState;
	this.__stage3D = stage3D;
	this.__context = stage.window.context;
	this.gl = this.__context.webgl;
	if(this.__contextState == null) {
		this.__contextState = new openfl__$internal_renderer_context3D_Context3DState();
	}
	this.__state = new openfl__$internal_renderer_context3D_Context3DState();
	var array = null;
	var vector = null;
	var view = null;
	var buffer = null;
	var len = null;
	var this1 = new Float32Array(512);
	this.__vertexConstants = this1;
	var array = null;
	var vector = null;
	var view = null;
	var buffer = null;
	var len = null;
	var this1 = new Float32Array(512);
	this.__fragmentConstants = this1;
	var elements = null;
	var array = [1.0,1.0,1.0,1.0];
	var vector = null;
	var view = null;
	var buffer = null;
	var len = null;
	var this1;
	if(elements != null) {
		this1 = new Float32Array(elements);
	} else if(array != null) {
		this1 = new Float32Array(array);
	} else if(vector != null) {
		this1 = new Float32Array(vector.__array);
	} else if(view != null) {
		this1 = new Float32Array(view);
	} else if(buffer != null) {
		if(len == null) {
			this1 = new Float32Array(buffer,0);
		} else {
			this1 = new Float32Array(buffer,0,len);
		}
	} else {
		this1 = null;
	}
	this.__positionScale = this1;
	this.__programs = new haxe_ds_StringMap();
	if(openfl_display3D_Context3D.__glMaxViewportDims == -1) {
		openfl_display3D_Context3D.__glMaxViewportDims = this.gl.getParameter(this.gl.MAX_VIEWPORT_DIMS);
	}
	this.maxBackBufferWidth = openfl_display3D_Context3D.__glMaxViewportDims;
	this.maxBackBufferHeight = openfl_display3D_Context3D.__glMaxViewportDims;
	if(openfl_display3D_Context3D.__glMaxTextureMaxAnisotropy == -1) {
		var extension = this.gl.getExtension("EXT_texture_filter_anisotropic");
		if(extension == null || !Object.prototype.hasOwnProperty.call(extension,"MAX_TEXTURE_MAX_ANISOTROPY_EXT")) {
			extension = this.gl.getExtension("MOZ_EXT_texture_filter_anisotropic");
		}
		if(extension == null || !Object.prototype.hasOwnProperty.call(extension,"MAX_TEXTURE_MAX_ANISOTROPY_EXT")) {
			extension = this.gl.getExtension("WEBKIT_EXT_texture_filter_anisotropic");
		}
		if(extension != null) {
			openfl_display3D_Context3D.__glTextureMaxAnisotropy = extension.TEXTURE_MAX_ANISOTROPY_EXT;
			openfl_display3D_Context3D.__glMaxTextureMaxAnisotropy = this.gl.getParameter(extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT);
		} else {
			openfl_display3D_Context3D.__glTextureMaxAnisotropy = 0;
			openfl_display3D_Context3D.__glMaxTextureMaxAnisotropy = 0;
		}
	}
	if(openfl_display3D_Context3D.__glDepthStencil == -1) {
		openfl_display3D_Context3D.__glDepthStencil = this.gl.DEPTH_STENCIL;
	}
	if(openfl_display3D_Context3D.__glMemoryTotalAvailable == -1) {
		var extension = this.gl.getExtension("NVX_gpu_memory_info");
		if(extension != null) {
			openfl_display3D_Context3D.__glMemoryTotalAvailable = extension.GPU_MEMORY_INFO_DEDICATED_VIDMEM_NVX;
			openfl_display3D_Context3D.__glMemoryCurrentAvailable = extension.GPU_MEMORY_INFO_CURRENT_AVAILABLE_VIDMEM_NVX;
		}
	}
	if(openfl_display3D_Context3D.__driverInfo == null) {
		var vendor = this.gl.getParameter(this.gl.VENDOR);
		var version = this.gl.getParameter(this.gl.VERSION);
		var renderer = this.gl.getParameter(this.gl.RENDERER);
		var glslVersion = this.gl.getParameter(this.gl.SHADING_LANGUAGE_VERSION);
		openfl_display3D_Context3D.__driverInfo = "OpenGL Vendor=" + vendor + " Version=" + version + " Renderer=" + renderer + " GLSL=" + glslVersion;
	}
	this.driverInfo = openfl_display3D_Context3D.__driverInfo;
	this.__quadIndexBufferElements = 16383;
	this.__quadIndexBufferCount = this.__quadIndexBufferElements * 6;
	var elements = this.__quadIndexBufferCount;
	var array = null;
	var vector = null;
	var view = null;
	var buffer = null;
	var len = null;
	var this1;
	if(elements != null) {
		this1 = new Uint16Array(elements);
	} else if(array != null) {
		this1 = new Uint16Array(array);
	} else if(vector != null) {
		this1 = new Uint16Array(vector.__array);
	} else if(view != null) {
		this1 = new Uint16Array(view);
	} else if(buffer != null) {
		if(len == null) {
			this1 = new Uint16Array(buffer,0);
		} else {
			this1 = new Uint16Array(buffer,0,len);
		}
	} else {
		this1 = null;
	}
	var data = this1;
	var index = 0;
	var vertex = 0;
	var _g = 0;
	var _g1 = this.__quadIndexBufferElements;
	while(_g < _g1) {
		var i = _g++;
		data[index] = vertex;
		data[index + 1] = vertex + 1;
		data[index + 2] = vertex + 2;
		data[index + 3] = vertex + 2;
		data[index + 4] = vertex + 1;
		data[index + 5] = vertex + 3;
		index = index + 6;
		vertex = vertex + 4;
	}
	this.__quadIndexBuffer = this.createIndexBuffer(this.__quadIndexBufferCount);
	this.__quadIndexBuffer.uploadFromTypedArray(data);
};
$hxClasses["openfl.display3D.Context3D"] = openfl_display3D_Context3D;
openfl_display3D_Context3D.__name__ = "openfl.display3D.Context3D";
openfl_display3D_Context3D.__super__ = openfl_events_EventDispatcher;
openfl_display3D_Context3D.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	backBufferHeight: null
	,backBufferWidth: null
	,driverInfo: null
	,maxBackBufferHeight: null
	,maxBackBufferWidth: null
	,profile: null
	,gl: null
	,__backBufferAntiAlias: null
	,__backBufferTexture: null
	,__backBufferWantsBestResolution: null
	,__backBufferWantsBestResolutionOnBrowserZoom: null
	,__cleared: null
	,__context: null
	,__contextState: null
	,__renderStage3DProgram: null
	,__enableErrorChecking: null
	,__fragmentConstants: null
	,__frontBufferTexture: null
	,__positionScale: null
	,__present: null
	,__programs: null
	,__quadIndexBuffer: null
	,__quadIndexBufferCount: null
	,__quadIndexBufferElements: null
	,__stage: null
	,__stage3D: null
	,__state: null
	,__vertexConstants: null
	,clear: function(red,green,blue,alpha,depth,stencil,mask) {
		if(mask == null) {
			mask = 7;
		}
		if(stencil == null) {
			stencil = 0;
		}
		if(depth == null) {
			depth = 1;
		}
		if(alpha == null) {
			alpha = 1;
		}
		if(blue == null) {
			blue = 0;
		}
		if(green == null) {
			green = 0;
		}
		if(red == null) {
			red = 0;
		}
		this.__flushGLFramebuffer();
		this.__flushGLViewport();
		var clearMask = 0;
		if((mask & 1) != 0) {
			if(this.__state.renderToTexture == null) {
				if(this.__stage.context3D == this && !this.__stage.__renderer.__cleared) {
					this.__stage.__renderer.__cleared = true;
				}
				this.__cleared = true;
			}
			clearMask |= this.gl.COLOR_BUFFER_BIT;
			if(this.__contextState.colorMaskRed != true || this.__contextState.colorMaskGreen != true || this.__contextState.colorMaskBlue != true || this.__contextState.colorMaskAlpha != true) {
				this.gl.colorMask(true,true,true,true);
				this.__contextState.colorMaskRed = true;
				this.__contextState.colorMaskGreen = true;
				this.__contextState.colorMaskBlue = true;
				this.__contextState.colorMaskAlpha = true;
			}
			this.gl.clearColor(red,green,blue,alpha);
		}
		if((mask & 2) != 0) {
			clearMask |= this.gl.DEPTH_BUFFER_BIT;
			if(this.__contextState.depthMask != true) {
				this.gl.depthMask(true);
				this.__contextState.depthMask = true;
			}
			this.gl.clearDepth(depth);
		}
		if((mask & 4) != 0) {
			clearMask |= this.gl.STENCIL_BUFFER_BIT;
			if(this.__contextState.stencilWriteMask != 255) {
				this.gl.stencilMask(255);
				this.__contextState.stencilWriteMask = 255;
			}
			this.gl.clearStencil(stencil);
			this.__contextState.stencilWriteMask = 255;
		}
		if(clearMask == 0) {
			return;
		}
		this.__setGLScissorTest(false);
		this.gl.clear(clearMask);
	}
	,configureBackBuffer: function(width,height,antiAlias,enableDepthAndStencil,wantsBestResolution,wantsBestResolutionOnBrowserZoom) {
		if(wantsBestResolutionOnBrowserZoom == null) {
			wantsBestResolutionOnBrowserZoom = false;
		}
		if(wantsBestResolution == null) {
			wantsBestResolution = false;
		}
		if(enableDepthAndStencil == null) {
			enableDepthAndStencil = true;
		}
		if(this.__stage3D == null) {
			this.backBufferWidth = width;
			this.backBufferHeight = height;
			this.__backBufferAntiAlias = antiAlias;
			this.__state.backBufferEnableDepthAndStencil = enableDepthAndStencil;
			this.__backBufferWantsBestResolution = wantsBestResolution;
			this.__backBufferWantsBestResolutionOnBrowserZoom = wantsBestResolutionOnBrowserZoom;
		} else {
			if(this.__backBufferTexture == null || this.backBufferWidth != width || this.backBufferHeight != height) {
				if(this.__backBufferTexture != null) {
					this.__backBufferTexture.dispose();
				}
				if(this.__frontBufferTexture != null) {
					this.__frontBufferTexture.dispose();
				}
				this.__backBufferTexture = this.createRectangleTexture(width,height,1,true);
				this.__frontBufferTexture = this.createRectangleTexture(width,height,1,true);
				if(this.__stage3D.__vertexBuffer == null) {
					this.__stage3D.__vertexBuffer = this.createVertexBuffer(4,5);
				}
				var vertexData = openfl_Vector.toFloatVector(null,null,null,[width,height,0,1,1,0,height,0,0,1,width,0,0,1,0,0,0,0,0,0.0]);
				this.__stage3D.__vertexBuffer.uploadFromVector(vertexData,0,20);
				if(this.__stage3D.__indexBuffer == null) {
					this.__stage3D.__indexBuffer = this.createIndexBuffer(6);
					var indexData = openfl_Vector.toIntVector(null,null,null,[0,1,2,2,1,3]);
					this.__stage3D.__indexBuffer.uploadFromVector(indexData,0,6);
				}
			}
			this.backBufferWidth = width;
			this.backBufferHeight = height;
			this.__backBufferAntiAlias = antiAlias;
			this.__state.backBufferEnableDepthAndStencil = enableDepthAndStencil;
			this.__backBufferWantsBestResolution = wantsBestResolution;
			this.__backBufferWantsBestResolutionOnBrowserZoom = wantsBestResolutionOnBrowserZoom;
			this.__state.__primaryGLFramebuffer = this.__backBufferTexture.__getGLFramebuffer(enableDepthAndStencil,antiAlias,0);
			this.__frontBufferTexture.__getGLFramebuffer(enableDepthAndStencil,antiAlias,0);
		}
	}
	,createCubeTexture: function(size,format,optimizeForRenderToTexture,streamingLevels) {
		if(streamingLevels == null) {
			streamingLevels = 0;
		}
		return new openfl_display3D_textures_CubeTexture(this,size,format,optimizeForRenderToTexture,streamingLevels);
	}
	,createIndexBuffer: function(numIndices,bufferUsage) {
		if(bufferUsage == null) {
			bufferUsage = 1;
		}
		return new openfl_display3D_IndexBuffer3D(this,numIndices,bufferUsage);
	}
	,createProgram: function(format) {
		if(format == null) {
			format = 0;
		}
		return new openfl_display3D_Program3D(this,format);
	}
	,createRectangleTexture: function(width,height,format,optimizeForRenderToTexture) {
		return new openfl_display3D_textures_RectangleTexture(this,width,height,openfl_display3D_Context3DTextureFormat.toString(format),optimizeForRenderToTexture);
	}
	,createTexture: function(width,height,format,optimizeForRenderToTexture,streamingLevels) {
		if(streamingLevels == null) {
			streamingLevels = 0;
		}
		return new openfl_display3D_textures_Texture(this,width,height,format,optimizeForRenderToTexture,streamingLevels);
	}
	,createVertexBuffer: function(numVertices,data32PerVertex,bufferUsage) {
		if(bufferUsage == null) {
			bufferUsage = 1;
		}
		return new openfl_display3D_VertexBuffer3D(this,numVertices,data32PerVertex,openfl_display3D_Context3DBufferUsage.toString(bufferUsage));
	}
	,createVideoTexture: function() {
		return new openfl_display3D_textures_VideoTexture(this);
	}
	,dispose: function(recreate) {
		if(recreate == null) {
			recreate = true;
		}
		this.gl = null;
		this.__dispose();
	}
	,drawToBitmapData: function(destination,srcRect,destPoint) {
		if(destination == null) {
			return;
		}
		var sourceRect = srcRect != null ? srcRect.__toLimeRectangle() : new lime_math_Rectangle(0,0,this.backBufferWidth,this.backBufferHeight);
		var destVector = destPoint != null ? destPoint.__toLimeVector2() : new lime_math_Vector2();
		if(this.__stage.context3D == this) {
			if(this.__stage.window != null) {
				if(this.__stage3D != null) {
					var xa = -this.__stage3D.get_x() | 0;
					var ya = -this.__stage3D.get_y() | 0;
					destVector.x = xa;
					destVector.y = ya;
				}
				var image = this.__stage.window.readPixels();
				destination.image.copyPixels(image,sourceRect,destVector);
			}
		} else if(this.__backBufferTexture != null) {
			var cacheRenderToTexture = this.__state.renderToTexture;
			this.setRenderToBackBuffer();
			this.__flushGLFramebuffer();
			this.__flushGLViewport();
			var elements = this.backBufferWidth * this.backBufferHeight * 4;
			var array = null;
			var vector = null;
			var view = null;
			var buffer = null;
			var len = null;
			var this1;
			if(elements != null) {
				this1 = new Uint8Array(elements);
			} else if(array != null) {
				this1 = new Uint8Array(array);
			} else if(vector != null) {
				this1 = new Uint8Array(vector.__array);
			} else if(view != null) {
				this1 = new Uint8Array(view);
			} else if(buffer != null) {
				if(len == null) {
					this1 = new Uint8Array(buffer,0);
				} else {
					this1 = new Uint8Array(buffer,0,len);
				}
			} else {
				this1 = null;
			}
			var data = this1;
			var this1 = this.gl;
			var width = this.backBufferWidth;
			var height = this.backBufferHeight;
			var format = this.__backBufferTexture.__format;
			var type = this.gl.UNSIGNED_BYTE;
			var pixels = data;
			var dstOffset = null;
			if(dstOffset != null) {
				this1.readPixels(0,0,width,height,format,type,pixels,dstOffset);
			} else {
				this1.readPixels(0,0,width,height,format,type,pixels);
			}
			var image = new lime_graphics_Image(new lime_graphics_ImageBuffer(data,this.backBufferWidth,this.backBufferHeight,32,2));
			destination.image.copyPixels(image,sourceRect,destVector);
			if(cacheRenderToTexture != null) {
				this.setRenderToTexture(cacheRenderToTexture,this.__state.renderToTextureDepthStencil,this.__state.renderToTextureAntiAlias,this.__state.renderToTextureSurfaceSelector);
			}
		}
	}
	,drawTriangles: function(indexBuffer,firstIndex,numTriangles) {
		if(numTriangles == null) {
			numTriangles = -1;
		}
		if(firstIndex == null) {
			firstIndex = 0;
		}
		if(this.__state.renderToTexture == null) {
			if(this.__stage.context3D == this && !this.__stage.__renderer.__cleared) {
				this.__stage.__renderer.__clear();
			} else if(!this.__cleared) {
				this.clear(0,0,0,0,1,0,1);
			}
		}
		this.__flushGL();
		if(this.__state.program != null) {
			this.__state.program.__flush();
		}
		var count = numTriangles == -1 ? indexBuffer.__numIndices : numTriangles * 3;
		this.__bindGLElementArrayBuffer(indexBuffer.__id);
		this.gl.drawElements(this.gl.TRIANGLES,count,this.gl.UNSIGNED_SHORT,firstIndex * 2);
	}
	,present: function() {
		this.setRenderToBackBuffer();
		if(this.__stage3D != null && this.__backBufferTexture != null) {
			if(!this.__cleared) {
				this.clear(0,0,0,0,1,0,1);
			}
			var cacheBuffer = this.__backBufferTexture;
			this.__backBufferTexture = this.__frontBufferTexture;
			this.__frontBufferTexture = cacheBuffer;
			this.__state.__primaryGLFramebuffer = this.__backBufferTexture.__getGLFramebuffer(this.__state.backBufferEnableDepthAndStencil,this.__backBufferAntiAlias,0);
			this.__cleared = false;
		}
		this.__present = true;
	}
	,setBlendFactors: function(sourceFactor,destinationFactor) {
		this.setBlendFactorsSeparate(sourceFactor,destinationFactor,sourceFactor,destinationFactor);
	}
	,setBlendFactorsSeparate: function(sourceRGBFactor,destinationRGBFactor,sourceAlphaFactor,destinationAlphaFactor) {
		this.__state.blendSourceRGBFactor = sourceRGBFactor;
		this.__state.blendDestinationRGBFactor = destinationRGBFactor;
		this.__state.blendSourceAlphaFactor = sourceAlphaFactor;
		this.__state.blendDestinationAlphaFactor = destinationAlphaFactor;
		this.__setGLBlendEquation(this.gl.FUNC_ADD);
	}
	,setColorMask: function(red,green,blue,alpha) {
		this.__state.colorMaskRed = red;
		this.__state.colorMaskGreen = green;
		this.__state.colorMaskBlue = blue;
		this.__state.colorMaskAlpha = alpha;
	}
	,setCulling: function(triangleFaceToCull) {
		this.__state.culling = triangleFaceToCull;
	}
	,setDepthTest: function(depthMask,passCompareMode) {
		this.__state.depthMask = depthMask;
		this.__state.depthCompareMode = passCompareMode;
	}
	,setProgram: function(program) {
		this.__state.program = program;
		this.__state.shader = null;
		if(program != null) {
			var _g = 0;
			var _g1 = program.__samplerStates.length;
			while(_g < _g1) {
				var i = _g++;
				if(this.__state.samplerStates[i] == null) {
					this.__state.samplerStates[i] = program.__samplerStates[i].clone();
				} else {
					this.__state.samplerStates[i].copyFrom(program.__samplerStates[i]);
				}
			}
		}
	}
	,setProgramConstantsFromByteArray: function(programType,firstRegister,numRegisters,data,byteArrayOffset) {
		if(numRegisters == 0 || this.__state.program == null) {
			return;
		}
		if(!(this.__state.program != null && this.__state.program.__format == 1)) {
			if(numRegisters == -1) {
				numRegisters = (openfl_utils_ByteArray.get_length(data) >>> 2) - byteArrayOffset;
			}
			var isVertex = programType == 1;
			var dest = isVertex ? this.__vertexConstants : this.__fragmentConstants;
			var bytes = openfl_utils_ByteArray.toBytes(data);
			var byteOffset = 0;
			var len = openfl_utils_ByteArray.get_length(data);
			if(byteOffset == null) {
				byteOffset = 0;
			}
			var floatData = byteOffset == null ? new Float32Array(bytes.b.bufferValue) : len == null ? new Float32Array(bytes.b.bufferValue,byteOffset) : new Float32Array(bytes.b.bufferValue,byteOffset,len);
			var outOffset = firstRegister * 4;
			var inOffset = UInt.toFloat(byteArrayOffset) / UInt.toFloat(4) | 0;
			var _g = 0;
			var _g1 = numRegisters * 4;
			while(_g < _g1) {
				var i = _g++;
				dest[outOffset + i] = floatData[inOffset + i];
			}
			if(this.__state.program != null) {
				this.__state.program.__markDirty(isVertex,firstRegister,numRegisters);
			}
		}
	}
	,setProgramConstantsFromMatrix: function(programType,firstRegister,matrix,transposedMatrix) {
		if(transposedMatrix == null) {
			transposedMatrix = false;
		}
		if(this.__state.program != null && this.__state.program.__format == 1) {
			this.__flushGLProgram();
			var array = null;
			var vector = null;
			var view = null;
			var buffer = null;
			var len = null;
			var this1 = new Float32Array(16);
			var data = this1;
			data[0] = matrix.rawData.get(0);
			data[1] = matrix.rawData.get(1);
			data[2] = matrix.rawData.get(2);
			data[3] = matrix.rawData.get(3);
			data[4] = matrix.rawData.get(4);
			data[5] = matrix.rawData.get(5);
			data[6] = matrix.rawData.get(6);
			data[7] = matrix.rawData.get(7);
			data[8] = matrix.rawData.get(8);
			data[9] = matrix.rawData.get(9);
			data[10] = matrix.rawData.get(10);
			data[11] = matrix.rawData.get(11);
			data[12] = matrix.rawData.get(12);
			data[13] = matrix.rawData.get(13);
			data[14] = matrix.rawData.get(14);
			data[15] = matrix.rawData.get(15);
			lime_graphics_WebGLRenderContext.uniformMatrix4fv(this.gl,firstRegister,transposedMatrix,data);
		} else {
			var isVertex = programType == 1;
			var dest = isVertex ? this.__vertexConstants : this.__fragmentConstants;
			var source = matrix.rawData;
			var i = firstRegister * 4;
			if(transposedMatrix) {
				dest[i++] = source.get(0);
				dest[i++] = source.get(4);
				dest[i++] = source.get(8);
				dest[i++] = source.get(12);
				dest[i++] = source.get(1);
				dest[i++] = source.get(5);
				dest[i++] = source.get(9);
				dest[i++] = source.get(13);
				dest[i++] = source.get(2);
				dest[i++] = source.get(6);
				dest[i++] = source.get(10);
				dest[i++] = source.get(14);
				dest[i++] = source.get(3);
				dest[i++] = source.get(7);
				dest[i++] = source.get(11);
				dest[i++] = source.get(15);
			} else {
				dest[i++] = source.get(0);
				dest[i++] = source.get(1);
				dest[i++] = source.get(2);
				dest[i++] = source.get(3);
				dest[i++] = source.get(4);
				dest[i++] = source.get(5);
				dest[i++] = source.get(6);
				dest[i++] = source.get(7);
				dest[i++] = source.get(8);
				dest[i++] = source.get(9);
				dest[i++] = source.get(10);
				dest[i++] = source.get(11);
				dest[i++] = source.get(12);
				dest[i++] = source.get(13);
				dest[i++] = source.get(14);
				dest[i++] = source.get(15);
			}
			if(this.__state.program != null) {
				this.__state.program.__markDirty(isVertex,firstRegister,4);
			}
		}
	}
	,setProgramConstantsFromVector: function(programType,firstRegister,data,numRegisters) {
		if(numRegisters == null) {
			numRegisters = -1;
		}
		if(numRegisters == 0) {
			return;
		}
		if(!(this.__state.program != null && this.__state.program.__format == 1)) {
			if(numRegisters == -1) {
				numRegisters = data.get_length() >> 2;
			}
			var isVertex = programType == 1;
			var dest = isVertex ? this.__vertexConstants : this.__fragmentConstants;
			var source = data;
			var sourceIndex = 0;
			var destIndex = firstRegister * 4;
			var _g = 0;
			var _g1 = numRegisters;
			while(_g < _g1) {
				var i = _g++;
				dest[destIndex++] = source.get(sourceIndex++);
				dest[destIndex++] = source.get(sourceIndex++);
				dest[destIndex++] = source.get(sourceIndex++);
				dest[destIndex++] = source.get(sourceIndex++);
			}
			if(this.__state.program != null) {
				this.__state.program.__markDirty(isVertex,firstRegister,numRegisters);
			}
		}
	}
	,setRenderToBackBuffer: function() {
		this.__state.renderToTexture = null;
	}
	,setRenderToTexture: function(texture,enableDepthAndStencil,antiAlias,surfaceSelector) {
		if(surfaceSelector == null) {
			surfaceSelector = 0;
		}
		if(antiAlias == null) {
			antiAlias = 0;
		}
		if(enableDepthAndStencil == null) {
			enableDepthAndStencil = false;
		}
		this.__state.renderToTexture = texture;
		this.__state.renderToTextureDepthStencil = enableDepthAndStencil;
		this.__state.renderToTextureAntiAlias = antiAlias;
		this.__state.renderToTextureSurfaceSelector = surfaceSelector;
	}
	,setSamplerStateAt: function(sampler,wrap,filter,mipfilter) {
		if(this.__state.samplerStates[sampler] == null) {
			this.__state.samplerStates[sampler] = new openfl__$internal_renderer_SamplerState();
		}
		var state = this.__state.samplerStates[sampler];
		state.wrap = wrap;
		state.filter = filter;
		state.mipfilter = mipfilter;
	}
	,setScissorRectangle: function(rectangle) {
		if(rectangle != null) {
			this.__state.scissorEnabled = true;
			this.__state.scissorRectangle.copyFrom(rectangle);
		} else {
			this.__state.scissorEnabled = false;
		}
	}
	,setStencilActions: function(triangleFace,compareMode,actionOnBothPass,actionOnDepthFail,actionOnDepthPassStencilFail) {
		if(actionOnDepthPassStencilFail == null) {
			actionOnDepthPassStencilFail = 5;
		}
		if(actionOnDepthFail == null) {
			actionOnDepthFail = 5;
		}
		if(actionOnBothPass == null) {
			actionOnBothPass = 5;
		}
		if(compareMode == null) {
			compareMode = 0;
		}
		if(triangleFace == null) {
			triangleFace = 2;
		}
		this.__state.stencilTriangleFace = triangleFace;
		this.__state.stencilCompareMode = compareMode;
		this.__state.stencilPass = actionOnBothPass;
		this.__state.stencilDepthFail = actionOnDepthFail;
		this.__state.stencilFail = actionOnDepthPassStencilFail;
	}
	,setStencilReferenceValue: function(referenceValue,readMask,writeMask) {
		if(writeMask == null) {
			writeMask = 255;
		}
		if(readMask == null) {
			readMask = 255;
		}
		this.__state.stencilReferenceValue = referenceValue;
		this.__state.stencilReadMask = readMask;
		this.__state.stencilWriteMask = writeMask;
	}
	,setTextureAt: function(sampler,texture) {
		this.__state.textures[sampler] = texture;
	}
	,setVertexBufferAt: function(index,buffer,bufferOffset,format) {
		if(format == null) {
			format = 4;
		}
		if(bufferOffset == null) {
			bufferOffset = 0;
		}
		if(buffer == null) {
			this.gl.disableVertexAttribArray(index);
			this.__bindGLArrayBuffer(null);
			return;
		}
		this.__bindGLArrayBuffer(buffer.__id);
		this.gl.enableVertexAttribArray(index);
		var byteOffset = bufferOffset * 4;
		switch(format) {
		case 0:
			this.gl.vertexAttribPointer(index,4,this.gl.UNSIGNED_BYTE,true,buffer.__stride,byteOffset);
			break;
		case 1:
			this.gl.vertexAttribPointer(index,1,this.gl.FLOAT,false,buffer.__stride,byteOffset);
			break;
		case 2:
			this.gl.vertexAttribPointer(index,2,this.gl.FLOAT,false,buffer.__stride,byteOffset);
			break;
		case 3:
			this.gl.vertexAttribPointer(index,3,this.gl.FLOAT,false,buffer.__stride,byteOffset);
			break;
		case 4:
			this.gl.vertexAttribPointer(index,4,this.gl.FLOAT,false,buffer.__stride,byteOffset);
			break;
		default:
			throw haxe_Exception.thrown(new openfl_errors_IllegalOperationError());
		}
	}
	,__bindGLArrayBuffer: function(buffer) {
		if(this.__contextState.__currentGLArrayBuffer != buffer) {
			this.gl.bindBuffer(this.gl.ARRAY_BUFFER,buffer);
			this.__contextState.__currentGLArrayBuffer = buffer;
		}
	}
	,__bindGLElementArrayBuffer: function(buffer) {
		if(this.__contextState.__currentGLElementArrayBuffer != buffer) {
			this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER,buffer);
			this.__contextState.__currentGLElementArrayBuffer = buffer;
		}
	}
	,__bindGLFramebuffer: function(framebuffer) {
		if(this.__contextState.__currentGLFramebuffer != framebuffer) {
			this.gl.bindFramebuffer(this.gl.FRAMEBUFFER,framebuffer);
			this.__contextState.__currentGLFramebuffer = framebuffer;
		}
	}
	,__bindGLTexture2D: function(texture) {
		this.gl.bindTexture(this.gl.TEXTURE_2D,texture);
		this.__contextState.__currentGLTexture2D = texture;
	}
	,__bindGLTextureCubeMap: function(texture) {
		this.gl.bindTexture(this.gl.TEXTURE_CUBE_MAP,texture);
		this.__contextState.__currentGLTextureCubeMap = texture;
	}
	,__dispose: function() {
		this.driverInfo += " (Disposed)";
		if(this.__stage3D != null) {
			this.__stage3D.__indexBuffer = null;
			this.__stage3D.__vertexBuffer = null;
			this.__stage3D.context3D = null;
			this.__stage3D = null;
		}
		this.__backBufferTexture = null;
		this.__context = null;
		this.__renderStage3DProgram = null;
		this.__fragmentConstants = null;
		this.__frontBufferTexture = null;
		this.__positionScale = null;
		this.__present = false;
		this.__quadIndexBuffer = null;
		this.__stage = null;
		this.__vertexConstants = null;
	}
	,__drawTriangles: function(firstIndex,count) {
		if(firstIndex == null) {
			firstIndex = 0;
		}
		if(this.__state.renderToTexture == null) {
			if(this.__stage.context3D == this && !this.__stage.__renderer.__cleared) {
				this.__stage.__renderer.__clear();
			} else if(!this.__cleared) {
				this.clear(0,0,0,0,1,0,1);
			}
		}
		this.__flushGL();
		if(this.__state.program != null) {
			this.__state.program.__flush();
		}
		this.gl.drawArrays(this.gl.TRIANGLES,firstIndex,count);
	}
	,__flushGL: function() {
		this.__flushGLProgram();
		this.__flushGLFramebuffer();
		this.__flushGLViewport();
		this.__flushGLBlend();
		if(this.__contextState.colorMaskRed != this.__state.colorMaskRed || this.__contextState.colorMaskGreen != this.__state.colorMaskGreen || this.__contextState.colorMaskBlue != this.__state.colorMaskBlue || this.__contextState.colorMaskAlpha != this.__state.colorMaskAlpha) {
			this.gl.colorMask(this.__state.colorMaskRed,this.__state.colorMaskGreen,this.__state.colorMaskBlue,this.__state.colorMaskAlpha);
			this.__contextState.colorMaskRed = this.__state.colorMaskRed;
			this.__contextState.colorMaskGreen = this.__state.colorMaskGreen;
			this.__contextState.colorMaskBlue = this.__state.colorMaskBlue;
			this.__contextState.colorMaskAlpha = this.__state.colorMaskAlpha;
		}
		this.__flushGLCulling();
		this.__flushGLDepth();
		this.__flushGLScissor();
		this.__flushGLStencil();
		this.__flushGLTextures();
	}
	,__flushGLBlend: function() {
		if(this.__contextState.blendDestinationRGBFactor != this.__state.blendDestinationRGBFactor || this.__contextState.blendSourceRGBFactor != this.__state.blendSourceRGBFactor || this.__contextState.blendDestinationAlphaFactor != this.__state.blendDestinationAlphaFactor || this.__contextState.blendSourceAlphaFactor != this.__state.blendSourceAlphaFactor) {
			this.__setGLBlend(true);
			if(this.__state.blendDestinationRGBFactor == this.__state.blendDestinationAlphaFactor && this.__state.blendSourceRGBFactor == this.__state.blendSourceAlphaFactor) {
				this.gl.blendFunc(this.__getGLBlend(this.__state.blendSourceRGBFactor),this.__getGLBlend(this.__state.blendDestinationRGBFactor));
			} else {
				this.gl.blendFuncSeparate(this.__getGLBlend(this.__state.blendSourceRGBFactor),this.__getGLBlend(this.__state.blendDestinationRGBFactor),this.__getGLBlend(this.__state.blendSourceAlphaFactor),this.__getGLBlend(this.__state.blendDestinationAlphaFactor));
			}
			this.__contextState.blendDestinationRGBFactor = this.__state.blendDestinationRGBFactor;
			this.__contextState.blendSourceRGBFactor = this.__state.blendSourceRGBFactor;
			this.__contextState.blendDestinationAlphaFactor = this.__state.blendDestinationAlphaFactor;
			this.__contextState.blendSourceAlphaFactor = this.__state.blendSourceAlphaFactor;
		}
	}
	,__flushGLColor: function() {
		if(this.__contextState.colorMaskRed != this.__state.colorMaskRed || this.__contextState.colorMaskGreen != this.__state.colorMaskGreen || this.__contextState.colorMaskBlue != this.__state.colorMaskBlue || this.__contextState.colorMaskAlpha != this.__state.colorMaskAlpha) {
			this.gl.colorMask(this.__state.colorMaskRed,this.__state.colorMaskGreen,this.__state.colorMaskBlue,this.__state.colorMaskAlpha);
			this.__contextState.colorMaskRed = this.__state.colorMaskRed;
			this.__contextState.colorMaskGreen = this.__state.colorMaskGreen;
			this.__contextState.colorMaskBlue = this.__state.colorMaskBlue;
			this.__contextState.colorMaskAlpha = this.__state.colorMaskAlpha;
		}
	}
	,__flushGLCulling: function() {
		if(this.__contextState.culling != this.__state.culling) {
			if(this.__state.culling == 3) {
				this.__setGLCullFace(false);
			} else {
				this.__setGLCullFace(true);
				switch(this.__state.culling) {
				case 0:
					this.gl.cullFace(this.gl.BACK);
					break;
				case 1:
					this.gl.cullFace(this.gl.FRONT);
					break;
				case 2:
					this.gl.cullFace(this.gl.FRONT_AND_BACK);
					break;
				case 3:
					break;
				default:
					throw haxe_Exception.thrown(new openfl_errors_IllegalOperationError());
				}
			}
			this.__contextState.culling = this.__state.culling;
		}
	}
	,__flushGLDepth: function() {
		var depthMask = this.__state.depthMask && (this.__state.renderToTexture != null ? this.__state.renderToTextureDepthStencil : this.__state.backBufferEnableDepthAndStencil);
		if(this.__contextState.depthMask != depthMask) {
			this.gl.depthMask(depthMask);
			this.__contextState.depthMask = depthMask;
		}
		if(this.__contextState.depthCompareMode != this.__state.depthCompareMode) {
			switch(this.__state.depthCompareMode) {
			case 0:
				this.gl.depthFunc(this.gl.ALWAYS);
				break;
			case 1:
				this.gl.depthFunc(this.gl.EQUAL);
				break;
			case 2:
				this.gl.depthFunc(this.gl.GREATER);
				break;
			case 3:
				this.gl.depthFunc(this.gl.GEQUAL);
				break;
			case 4:
				this.gl.depthFunc(this.gl.LESS);
				break;
			case 5:
				this.gl.depthFunc(this.gl.LEQUAL);
				break;
			case 6:
				this.gl.depthFunc(this.gl.NEVER);
				break;
			case 7:
				this.gl.depthFunc(this.gl.NOTEQUAL);
				break;
			default:
				throw haxe_Exception.thrown(new openfl_errors_IllegalOperationError());
			}
			this.__contextState.depthCompareMode = this.__state.depthCompareMode;
		}
	}
	,__flushGLFramebuffer: function() {
		if(this.__state.renderToTexture != null) {
			if(this.__contextState.renderToTexture != this.__state.renderToTexture || this.__contextState.renderToTextureSurfaceSelector != this.__state.renderToTextureSurfaceSelector) {
				var framebuffer = this.__state.renderToTexture.__getGLFramebuffer(this.__state.renderToTextureDepthStencil,this.__state.renderToTextureAntiAlias,this.__state.renderToTextureSurfaceSelector);
				this.__bindGLFramebuffer(framebuffer);
				this.__contextState.renderToTexture = this.__state.renderToTexture;
				this.__contextState.renderToTextureAntiAlias = this.__state.renderToTextureAntiAlias;
				this.__contextState.renderToTextureDepthStencil = this.__state.renderToTextureDepthStencil;
				this.__contextState.renderToTextureSurfaceSelector = this.__state.renderToTextureSurfaceSelector;
			}
			this.__setGLDepthTest(this.__state.renderToTextureDepthStencil);
			this.__setGLStencilTest(this.__state.renderToTextureDepthStencil);
			this.__setGLFrontFace(true);
		} else {
			if(this.__stage == null && this.backBufferWidth == 0 && this.backBufferHeight == 0) {
				throw haxe_Exception.thrown(new openfl_errors_Error("Context3D backbuffer has not been configured"));
			}
			if(this.__contextState.renderToTexture != null || this.__contextState.__currentGLFramebuffer != this.__state.__primaryGLFramebuffer || this.__contextState.backBufferEnableDepthAndStencil != this.__state.backBufferEnableDepthAndStencil) {
				this.__bindGLFramebuffer(this.__state.__primaryGLFramebuffer);
				this.__contextState.renderToTexture = null;
				this.__contextState.backBufferEnableDepthAndStencil = this.__state.backBufferEnableDepthAndStencil;
			}
			this.__setGLDepthTest(this.__state.backBufferEnableDepthAndStencil);
			this.__setGLStencilTest(this.__state.backBufferEnableDepthAndStencil);
			this.__setGLFrontFace(this.__stage.context3D != this);
		}
	}
	,__flushGLProgram: function() {
		var shader = this.__state.shader;
		var program = this.__state.program;
		if(this.__contextState.shader != shader) {
			if(this.__contextState.shader != null) {
				this.__contextState.shader.__disable();
			}
			if(shader != null) {
				shader.__enable();
			}
			this.__contextState.shader = shader;
		}
		if(this.__contextState.program != program) {
			if(this.__contextState.program != null) {
				this.__contextState.program.__disable();
			}
			if(program != null) {
				program.__enable();
			}
			this.__contextState.program = program;
		}
		if(program != null && program.__format == 0) {
			this.__positionScale[1] = this.__stage.context3D == this && this.__state.renderToTexture == null ? 1.0 : -1.0;
			program.__setPositionScale(this.__positionScale);
		}
	}
	,__flushGLScissor: function() {
		if(!this.__state.scissorEnabled) {
			if(this.__contextState.scissorEnabled != this.__state.scissorEnabled) {
				this.__setGLScissorTest(false);
				this.__contextState.scissorEnabled = false;
			}
		} else {
			this.__setGLScissorTest(true);
			this.__contextState.scissorEnabled = true;
			var scissorX = this.__state.scissorRectangle.x | 0;
			var scissorY = this.__state.scissorRectangle.y | 0;
			var scissorWidth = this.__state.scissorRectangle.width | 0;
			var scissorHeight = this.__state.scissorRectangle.height | 0;
			if(this.__state.renderToTexture == null && this.__stage3D == null) {
				var contextHeight = this.__stage.window.__height * this.__stage.window.__scale | 0;
				scissorY = contextHeight - (this.__state.scissorRectangle.height | 0) - scissorY;
			}
			if(this.__contextState.scissorRectangle.x != scissorX || this.__contextState.scissorRectangle.y != scissorY || this.__contextState.scissorRectangle.width != scissorWidth || this.__contextState.scissorRectangle.height != scissorHeight) {
				this.gl.scissor(scissorX,scissorY,scissorWidth,scissorHeight);
				this.__contextState.scissorRectangle.setTo(scissorX,scissorY,scissorWidth,scissorHeight);
			}
		}
	}
	,__flushGLStencil: function() {
		if(this.__contextState.stencilTriangleFace != this.__state.stencilTriangleFace || this.__contextState.stencilPass != this.__state.stencilPass || this.__contextState.stencilDepthFail != this.__state.stencilDepthFail || this.__contextState.stencilFail != this.__state.stencilFail) {
			this.gl.stencilOpSeparate(this.__getGLTriangleFace(this.__state.stencilTriangleFace),this.__getGLStencilAction(this.__state.stencilFail),this.__getGLStencilAction(this.__state.stencilDepthFail),this.__getGLStencilAction(this.__state.stencilPass));
			this.__contextState.stencilTriangleFace = this.__state.stencilTriangleFace;
			this.__contextState.stencilPass = this.__state.stencilPass;
			this.__contextState.stencilDepthFail = this.__state.stencilDepthFail;
			this.__contextState.stencilFail = this.__state.stencilFail;
		}
		if(this.__contextState.stencilWriteMask != this.__state.stencilWriteMask) {
			this.gl.stencilMask(this.__state.stencilWriteMask);
			this.__contextState.stencilWriteMask = this.__state.stencilWriteMask;
		}
		if(this.__contextState.stencilCompareMode != this.__state.stencilCompareMode || this.__contextState.stencilReferenceValue != this.__state.stencilReferenceValue || this.__contextState.stencilReadMask != this.__state.stencilReadMask) {
			this.gl.stencilFunc(this.__getGLCompareMode(this.__state.stencilCompareMode),this.__state.stencilReferenceValue,this.__state.stencilReadMask);
			this.__contextState.stencilCompareMode = this.__state.stencilCompareMode;
			this.__contextState.stencilReferenceValue = this.__state.stencilReferenceValue;
			this.__contextState.stencilReadMask = this.__state.stencilReadMask;
		}
	}
	,__flushGLTextures: function() {
		var sampler = 0;
		var texture;
		var samplerState;
		var _g = 0;
		var _g1 = this.__state.textures.length;
		while(_g < _g1) {
			var i = _g++;
			texture = this.__state.textures[i];
			samplerState = this.__state.samplerStates[i];
			if(samplerState == null) {
				this.__state.samplerStates[i] = new openfl__$internal_renderer_SamplerState();
				samplerState = this.__state.samplerStates[i];
			}
			this.gl.activeTexture(this.gl.TEXTURE0 + sampler);
			if(texture != null) {
				if(texture.__textureTarget == this.gl.TEXTURE_2D) {
					this.__bindGLTexture2D(texture.__getTexture());
				} else {
					this.__bindGLTextureCubeMap(texture.__getTexture());
				}
				this.__contextState.textures[i] = texture;
				texture.__setSamplerState(samplerState);
			} else {
				this.__bindGLTexture2D(null);
			}
			if(this.__state.program != null && this.__state.program.__format == 0 && samplerState.textureAlpha) {
				this.gl.activeTexture(this.gl.TEXTURE0 + sampler + 4);
				if(texture != null && texture.__alphaTexture != null) {
					if(texture.__alphaTexture.__textureTarget == this.gl.TEXTURE_2D) {
						this.__bindGLTexture2D(texture.__alphaTexture.__getTexture());
					} else {
						this.__bindGLTextureCubeMap(texture.__alphaTexture.__getTexture());
					}
					texture.__alphaTexture.__setSamplerState(samplerState);
					this.gl.uniform1i(this.__state.program.__agalAlphaSamplerEnabled[sampler].location,1);
				} else {
					this.__bindGLTexture2D(null);
					if(this.__state.program.__agalAlphaSamplerEnabled[sampler] != null) {
						this.gl.uniform1i(this.__state.program.__agalAlphaSamplerEnabled[sampler].location,0);
					}
				}
			}
			++sampler;
		}
	}
	,__flushGLViewport: function() {
		if(this.__state.renderToTexture == null) {
			if(this.__stage.context3D == this) {
				var x = this.__stage3D == null ? 0 : this.__stage3D.get_x() | 0;
				var y = this.__stage.window.__height * this.__stage.window.__scale - this.backBufferHeight - (this.__stage3D == null ? 0 : this.__stage3D.get_y()) | 0;
				this.gl.viewport(x,y,this.backBufferWidth,this.backBufferHeight);
			} else {
				this.gl.viewport(0,0,this.backBufferWidth,this.backBufferHeight);
			}
		} else {
			var width = 0;
			var height = 0;
			if(((this.__state.renderToTexture) instanceof openfl_display3D_textures_Texture)) {
				var texture2D = this.__state.renderToTexture;
				width = texture2D.__width;
				height = texture2D.__height;
			} else if(((this.__state.renderToTexture) instanceof openfl_display3D_textures_RectangleTexture)) {
				var rectTexture = this.__state.renderToTexture;
				width = rectTexture.__width;
				height = rectTexture.__height;
			} else if(((this.__state.renderToTexture) instanceof openfl_display3D_textures_CubeTexture)) {
				var cubeTexture = this.__state.renderToTexture;
				width = cubeTexture.__size;
				height = cubeTexture.__size;
			}
			this.gl.viewport(0,0,width,height);
		}
	}
	,__getGLBlend: function(blendFactor) {
		switch(blendFactor) {
		case 0:
			return this.gl.DST_ALPHA;
		case 1:
			return this.gl.DST_COLOR;
		case 2:
			return this.gl.ONE;
		case 3:
			return this.gl.ONE_MINUS_DST_ALPHA;
		case 4:
			return this.gl.ONE_MINUS_DST_COLOR;
		case 5:
			return this.gl.ONE_MINUS_SRC_ALPHA;
		case 6:
			return this.gl.ONE_MINUS_SRC_COLOR;
		case 7:
			return this.gl.SRC_ALPHA;
		case 8:
			return this.gl.SRC_COLOR;
		case 9:
			return this.gl.ZERO;
		default:
			throw haxe_Exception.thrown(new openfl_errors_IllegalOperationError());
		}
	}
	,__getGLCompareMode: function(mode) {
		switch(mode) {
		case 0:
			return this.gl.ALWAYS;
		case 1:
			return this.gl.EQUAL;
		case 2:
			return this.gl.GREATER;
		case 3:
			return this.gl.GEQUAL;
		case 4:
			return this.gl.LESS;
		case 5:
			return this.gl.LEQUAL;
		case 6:
			return this.gl.NEVER;
		case 7:
			return this.gl.NOTEQUAL;
		default:
			return this.gl.EQUAL;
		}
	}
	,__getGLStencilAction: function(action) {
		switch(action) {
		case 0:
			return this.gl.DECR;
		case 1:
			return this.gl.DECR_WRAP;
		case 2:
			return this.gl.INCR;
		case 3:
			return this.gl.INCR_WRAP;
		case 4:
			return this.gl.INVERT;
		case 5:
			return this.gl.KEEP;
		case 6:
			return this.gl.REPLACE;
		case 7:
			return this.gl.ZERO;
		default:
			return this.gl.KEEP;
		}
	}
	,__getGLTriangleFace: function(face) {
		switch(face) {
		case 0:
			return this.gl.BACK;
		case 1:
			return this.gl.FRONT;
		case 2:
			return this.gl.FRONT_AND_BACK;
		case 3:
			return this.gl.NONE;
		default:
			return this.gl.FRONT_AND_BACK;
		}
	}
	,__renderStage3D: function(stage3D) {
		var context = stage3D.context3D;
		if(context != null && context != this && context.__frontBufferTexture != null && stage3D.visible && this.backBufferHeight > 0 && this.backBufferWidth > 0) {
			if(this.__renderStage3DProgram == null) {
				var vertexAssembler = new openfl_utils_AGALMiniAssembler();
				vertexAssembler.assemble(openfl_display3D_Context3DProgramType.toString(1),"m44 op, va0, vc0\n" + "mov v0, va1");
				var fragmentAssembler = new openfl_utils_AGALMiniAssembler();
				fragmentAssembler.assemble(openfl_display3D_Context3DProgramType.toString(0),"tex ft1, v0, fs0 <2d,nearest,nomip>\n" + "mov oc, ft1");
				this.__renderStage3DProgram = this.createProgram();
				this.__renderStage3DProgram.upload(vertexAssembler.agalcode,fragmentAssembler.agalcode);
			}
			this.setProgram(this.__renderStage3DProgram);
			this.setBlendFactors(2,9);
			this.setColorMask(true,true,true,true);
			this.setCulling(3);
			this.setDepthTest(false,0);
			this.setStencilActions();
			this.setStencilReferenceValue(0,0,0);
			this.setScissorRectangle(null);
			this.setTextureAt(0,context.__frontBufferTexture);
			this.setVertexBufferAt(0,stage3D.__vertexBuffer,0,3);
			this.setVertexBufferAt(1,stage3D.__vertexBuffer,3,2);
			this.setProgramConstantsFromMatrix(1,0,stage3D.__renderTransform,true);
			this.drawTriangles(stage3D.__indexBuffer);
			this.__present = true;
		}
	}
	,__setGLBlend: function(enable) {
		if(this.__contextState.__enableGLBlend != enable) {
			if(enable) {
				this.gl.enable(this.gl.BLEND);
			} else {
				this.gl.disable(this.gl.BLEND);
			}
			this.__contextState.__enableGLBlend = enable;
		}
	}
	,__setGLBlendEquation: function(value) {
		if(this.__contextState.__glBlendEquation != value) {
			this.gl.blendEquation(value);
			this.__contextState.__glBlendEquation = value;
		}
	}
	,__setGLCullFace: function(enable) {
		if(this.__contextState.__enableGLCullFace != enable) {
			if(enable) {
				this.gl.enable(this.gl.CULL_FACE);
			} else {
				this.gl.disable(this.gl.CULL_FACE);
			}
			this.__contextState.__enableGLCullFace = enable;
		}
	}
	,__setGLDepthTest: function(enable) {
		if(this.__contextState.__enableGLDepthTest != enable) {
			if(enable) {
				this.gl.enable(this.gl.DEPTH_TEST);
			} else {
				this.gl.disable(this.gl.DEPTH_TEST);
			}
			this.__contextState.__enableGLDepthTest = enable;
		}
	}
	,__setGLFrontFace: function(counterClockWise) {
		if(this.__contextState.__frontFaceGLCCW != counterClockWise) {
			this.gl.frontFace(counterClockWise ? this.gl.CCW : this.gl.CW);
			this.__contextState.__frontFaceGLCCW = counterClockWise;
		}
	}
	,__setGLScissorTest: function(enable) {
		if(this.__contextState.__enableGLScissorTest != enable) {
			if(enable) {
				this.gl.enable(this.gl.SCISSOR_TEST);
			} else {
				this.gl.disable(this.gl.SCISSOR_TEST);
			}
			this.__contextState.__enableGLScissorTest = enable;
		}
	}
	,__setGLStencilTest: function(enable) {
		if(this.__contextState.__enableGLStencilTest != enable) {
			if(enable) {
				this.gl.enable(this.gl.STENCIL_TEST);
			} else {
				this.gl.disable(this.gl.STENCIL_TEST);
			}
			this.__contextState.__enableGLStencilTest = enable;
		}
	}
	,get_enableErrorChecking: function() {
		return this.__enableErrorChecking;
	}
	,set_enableErrorChecking: function(value) {
		return this.__enableErrorChecking = value;
	}
	,get_totalGPUMemory: function() {
		if(openfl_display3D_Context3D.__glMemoryCurrentAvailable != -1) {
			var current = this.gl.getParameter(openfl_display3D_Context3D.__glMemoryCurrentAvailable);
			var total = this.gl.getParameter(openfl_display3D_Context3D.__glMemoryTotalAvailable);
			if(total > 0) {
				return (total - current) * 1024;
			}
		}
		return 0;
	}
	,__class__: openfl_display3D_Context3D
	,__properties__: {get_totalGPUMemory:"get_totalGPUMemory",set_enableErrorChecking:"set_enableErrorChecking",get_enableErrorChecking:"get_enableErrorChecking"}
});
var openfl_display3D_Context3DBlendFactor = {};
openfl_display3D_Context3DBlendFactor.fromString = function(value) {
	switch(value) {
	case "destinationAlpha":
		return 0;
	case "destinationColor":
		return 1;
	case "one":
		return 2;
	case "oneMinusDestinationAlpha":
		return 3;
	case "oneMinusDestinationColor":
		return 4;
	case "oneMinusSourceAlpha":
		return 5;
	case "oneMinusSourceColor":
		return 6;
	case "sourceAlpha":
		return 7;
	case "sourceColor":
		return 8;
	case "zero":
		return 9;
	default:
		return null;
	}
};
openfl_display3D_Context3DBlendFactor.toString = function(this1) {
	switch(this1) {
	case 0:
		return "destinationAlpha";
	case 1:
		return "destinationColor";
	case 2:
		return "one";
	case 3:
		return "oneMinusDestinationAlpha";
	case 4:
		return "oneMinusDestinationColor";
	case 5:
		return "oneMinusSourceAlpha";
	case 6:
		return "oneMinusSourceColor";
	case 7:
		return "sourceAlpha";
	case 8:
		return "sourceColor";
	case 9:
		return "zero";
	default:
		return null;
	}
};
var openfl_display3D_Context3DBufferUsage = {};
openfl_display3D_Context3DBufferUsage.fromString = function(value) {
	switch(value) {
	case "dynamicDraw":
		return 0;
	case "staticDraw":
		return 1;
	default:
		return null;
	}
};
openfl_display3D_Context3DBufferUsage.toString = function(this1) {
	switch(this1) {
	case 0:
		return "dynamicDraw";
	case 1:
		return "staticDraw";
	default:
		return null;
	}
};
var openfl_display3D_Context3DCompareMode = {};
openfl_display3D_Context3DCompareMode.fromString = function(value) {
	switch(value) {
	case "always":
		return 0;
	case "equal":
		return 1;
	case "greater":
		return 2;
	case "greaterEqual":
		return 3;
	case "less":
		return 4;
	case "lessEqual":
		return 5;
	case "never":
		return 6;
	case "notEqual":
		return 7;
	default:
		return null;
	}
};
openfl_display3D_Context3DCompareMode.toString = function(this1) {
	switch(this1) {
	case 0:
		return "always";
	case 1:
		return "equal";
	case 2:
		return "greater";
	case 3:
		return "greaterEqual";
	case 4:
		return "less";
	case 5:
		return "lessEqual";
	case 6:
		return "never";
	case 7:
		return "notEqual";
	default:
		return null;
	}
};
var openfl_display3D_Context3DMipFilter = {};
openfl_display3D_Context3DMipFilter.fromString = function(value) {
	switch(value) {
	case "miplinear":
		return 0;
	case "mipnearest":
		return 1;
	case "mipnone":
		return 2;
	default:
		return null;
	}
};
openfl_display3D_Context3DMipFilter.toString = function(this1) {
	switch(this1) {
	case 0:
		return "miplinear";
	case 1:
		return "mipnearest";
	case 2:
		return "mipnone";
	default:
		return null;
	}
};
var openfl_display3D_Context3DProfile = {};
openfl_display3D_Context3DProfile.fromString = function(value) {
	switch(value) {
	case "baseline":
		return 0;
	case "baselineConstrained":
		return 1;
	case "baselineExtended":
		return 2;
	case "standard":
		return 3;
	case "standardConstrained":
		return 4;
	case "standardExtended":
		return 5;
	default:
		return null;
	}
};
openfl_display3D_Context3DProfile.toString = function(this1) {
	switch(this1) {
	case 0:
		return "baseline";
	case 1:
		return "baselineConstrained";
	case 2:
		return "baselineExtended";
	case 3:
		return "standard";
	case 4:
		return "standardConstrained";
	case 5:
		return "standardExtended";
	default:
		return null;
	}
};
var openfl_display3D_Context3DProgramFormat = {};
openfl_display3D_Context3DProgramFormat.fromString = function(value) {
	switch(value) {
	case "agal":
		return 0;
	case "glsl":
		return 1;
	default:
		return null;
	}
};
openfl_display3D_Context3DProgramFormat.toString = function(this1) {
	switch(this1) {
	case 0:
		return "agal";
	case 1:
		return "glsl";
	default:
		return null;
	}
};
var openfl_display3D_Context3DProgramType = {};
openfl_display3D_Context3DProgramType.fromString = function(value) {
	switch(value) {
	case "fragment":
		return 0;
	case "vertex":
		return 1;
	default:
		return null;
	}
};
openfl_display3D_Context3DProgramType.toString = function(this1) {
	switch(this1) {
	case 0:
		return "fragment";
	case 1:
		return "vertex";
	default:
		return null;
	}
};
var openfl_display3D_Context3DRenderMode = {};
openfl_display3D_Context3DRenderMode.fromString = function(value) {
	switch(value) {
	case "auto":
		return 0;
	case "software":
		return 1;
	default:
		return null;
	}
};
openfl_display3D_Context3DRenderMode.toString = function(this1) {
	switch(this1) {
	case 0:
		return "auto";
	case 1:
		return "software";
	default:
		return null;
	}
};
var openfl_display3D_Context3DStencilAction = {};
openfl_display3D_Context3DStencilAction.fromString = function(value) {
	switch(value) {
	case "decrementSaturate":
		return 0;
	case "decrementWrap":
		return 1;
	case "incrementSaturate":
		return 2;
	case "incrementWrap":
		return 3;
	case "invert":
		return 4;
	case "keep":
		return 5;
	case "set":
		return 6;
	case "zero":
		return 7;
	default:
		return null;
	}
};
openfl_display3D_Context3DStencilAction.toString = function(this1) {
	switch(this1) {
	case 0:
		return "decrementSaturate";
	case 1:
		return "decrementWrap";
	case 2:
		return "incrementSaturate";
	case 3:
		return "incrementWrap";
	case 4:
		return "invert";
	case 5:
		return "keep";
	case 6:
		return "set";
	case 7:
		return "zero";
	default:
		return null;
	}
};
var openfl_display3D_Context3DTextureFilter = {};
openfl_display3D_Context3DTextureFilter.fromString = function(value) {
	switch(value) {
	case "anisotropic16x":
		return 0;
	case "anisotropic2x":
		return 1;
	case "anisotropic4x":
		return 2;
	case "anisotropic8x":
		return 3;
	case "linear":
		return 4;
	case "nearest":
		return 5;
	default:
		return null;
	}
};
openfl_display3D_Context3DTextureFilter.toString = function(this1) {
	switch(this1) {
	case 0:
		return "anisotropic16x";
	case 1:
		return "anisotropic2x";
	case 2:
		return "anisotropic4x";
	case 3:
		return "anisotropic8x";
	case 4:
		return "linear";
	case 5:
		return "nearest";
	default:
		return null;
	}
};
var openfl_display3D_Context3DTextureFormat = {};
openfl_display3D_Context3DTextureFormat.fromString = function(value) {
	switch(value) {
	case "bgrPacked565":
		return 0;
	case "bgra":
		return 1;
	case "bgraPacked4444":
		return 2;
	case "compressed":
		return 3;
	case "compressedAlpha":
		return 4;
	case "rgbaHalfFloat":
		return 5;
	default:
		return null;
	}
};
openfl_display3D_Context3DTextureFormat.toString = function(this1) {
	switch(this1) {
	case 0:
		return "bgrPacked565";
	case 1:
		return "bgra";
	case 2:
		return "bgraPacked4444";
	case 3:
		return "compressed";
	case 4:
		return "compressedAlpha";
	case 5:
		return "rgbaHalfFloat";
	default:
		return null;
	}
};
var openfl_display3D_Context3DTriangleFace = {};
openfl_display3D_Context3DTriangleFace.fromString = function(value) {
	switch(value) {
	case "back":
		return 0;
	case "front":
		return 1;
	case "frontAndBack":
		return 2;
	case "none":
		return 3;
	default:
		return null;
	}
};
openfl_display3D_Context3DTriangleFace.toString = function(this1) {
	switch(this1) {
	case 0:
		return "back";
	case 1:
		return "front";
	case 2:
		return "frontAndBack";
	case 3:
		return "none";
	default:
		return null;
	}
};
var openfl_display3D_Context3DVertexBufferFormat = {};
openfl_display3D_Context3DVertexBufferFormat.fromString = function(value) {
	switch(value) {
	case "bytes4":
		return 0;
	case "float1":
		return 1;
	case "float2":
		return 2;
	case "float3":
		return 3;
	case "float4":
		return 4;
	default:
		return null;
	}
};
openfl_display3D_Context3DVertexBufferFormat.toString = function(this1) {
	switch(this1) {
	case 0:
		return "bytes4";
	case 1:
		return "float1";
	case 2:
		return "float2";
	case 3:
		return "float3";
	case 4:
		return "float4";
	default:
		return null;
	}
};
var openfl_display3D_Context3DWrapMode = {};
openfl_display3D_Context3DWrapMode.fromString = function(value) {
	switch(value) {
	case "clamp":
		return 0;
	case "clamp_u_repeat_v":
		return 1;
	case "repeat":
		return 2;
	case "repeat_u_clamp_v":
		return 3;
	default:
		return null;
	}
};
openfl_display3D_Context3DWrapMode.toString = function(this1) {
	switch(this1) {
	case 0:
		return "clamp";
	case 1:
		return "clamp_u_repeat_v";
	case 2:
		return "repeat";
	case 3:
		return "repeat_u_clamp_v";
	default:
		return null;
	}
};
var openfl_display3D_IndexBuffer3D = function(context3D,numIndices,bufferUsage) {
	this.__context = context3D;
	this.__numIndices = numIndices;
	var gl = this.__context.gl;
	this.__id = gl.createBuffer();
	this.__usage = bufferUsage == 0 ? gl.DYNAMIC_DRAW : gl.STATIC_DRAW;
};
$hxClasses["openfl.display3D.IndexBuffer3D"] = openfl_display3D_IndexBuffer3D;
openfl_display3D_IndexBuffer3D.__name__ = "openfl.display3D.IndexBuffer3D";
openfl_display3D_IndexBuffer3D.prototype = {
	__context: null
	,__id: null
	,__memoryUsage: null
	,__numIndices: null
	,__tempUInt16Array: null
	,__usage: null
	,dispose: function() {
		var gl = this.__context.gl;
		gl.deleteBuffer(this.__id);
	}
	,uploadFromByteArray: function(data,byteArrayOffset,startOffset,count) {
		var offset = byteArrayOffset + startOffset * 2;
		var elements = null;
		var array = null;
		var vector = null;
		var view = null;
		var buffer = openfl_utils_ByteArray.toArrayBuffer(data);
		var byteoffset = offset;
		if(byteoffset == null) {
			byteoffset = 0;
		}
		var this1;
		if(elements != null) {
			this1 = new Uint16Array(elements);
		} else if(array != null) {
			this1 = new Uint16Array(array);
		} else if(vector != null) {
			this1 = new Uint16Array(vector.__array);
		} else if(view != null) {
			this1 = new Uint16Array(view);
		} else if(buffer != null) {
			if(count == null) {
				this1 = new Uint16Array(buffer,byteoffset);
			} else {
				this1 = new Uint16Array(buffer,byteoffset,count);
			}
		} else {
			this1 = null;
		}
		this.uploadFromTypedArray(this1);
	}
	,uploadFromTypedArray: function(data,byteLength) {
		if(byteLength == null) {
			byteLength = -1;
		}
		if(data == null) {
			return;
		}
		var gl = this.__context.gl;
		this.__context.__bindGLElementArrayBuffer(this.__id);
		lime_graphics_WebGLRenderContext.bufferData(gl,gl.ELEMENT_ARRAY_BUFFER,data,this.__usage);
	}
	,uploadFromVector: function(data,startOffset,count) {
		if(data == null) {
			return;
		}
		var gl = this.__context.gl;
		var length = startOffset + count;
		var existingUInt16Array = this.__tempUInt16Array;
		if(this.__tempUInt16Array == null || this.__tempUInt16Array.length < count) {
			var array = null;
			var vector = null;
			var view = null;
			var buffer = null;
			var len = null;
			var this1;
			if(count != null) {
				this1 = new Uint16Array(count);
			} else if(array != null) {
				this1 = new Uint16Array(array);
			} else if(vector != null) {
				this1 = new Uint16Array(vector.__array);
			} else if(view != null) {
				this1 = new Uint16Array(view);
			} else if(buffer != null) {
				if(len == null) {
					this1 = new Uint16Array(buffer,0);
				} else {
					this1 = new Uint16Array(buffer,0,len);
				}
			} else {
				this1 = null;
			}
			this.__tempUInt16Array = this1;
			if(existingUInt16Array != null) {
				this.__tempUInt16Array.set(existingUInt16Array);
			}
		}
		var _g = startOffset;
		var _g1 = length;
		while(_g < _g1) {
			var i = _g++;
			this.__tempUInt16Array[i - startOffset] = data.get(i);
		}
		this.uploadFromTypedArray(this.__tempUInt16Array);
	}
	,__class__: openfl_display3D_IndexBuffer3D
};
var openfl_display3D_Program3D = function(context3D,format) {
	this.__context = context3D;
	this.__format = format;
	if(this.__format == 0) {
		this.__agalSamplerUsageMask = 0;
		this.__agalUniforms = new haxe_ds_List();
		this.__agalSamplerUniforms = new haxe_ds_List();
		this.__agalAlphaSamplerUniforms = new haxe_ds_List();
		this.__agalAlphaSamplerEnabled = [];
	} else {
		this.__glslAttribNames = [];
		this.__glslAttribTypes = [];
		this.__glslSamplerNames = [];
		this.__glslUniformLocations = [];
		this.__glslUniformNames = [];
		this.__glslUniformTypes = [];
	}
	this.__samplerStates = [];
};
$hxClasses["openfl.display3D.Program3D"] = openfl_display3D_Program3D;
openfl_display3D_Program3D.__name__ = "openfl.display3D.Program3D";
openfl_display3D_Program3D.prototype = {
	__agalAlphaSamplerEnabled: null
	,__agalAlphaSamplerUniforms: null
	,__agalFragmentUniformMap: null
	,__agalPositionScale: null
	,__agalSamplerUniforms: null
	,__agalSamplerUsageMask: null
	,__agalUniforms: null
	,__agalVertexUniformMap: null
	,__context: null
	,__format: null
	,__glFragmentShader: null
	,__glFragmentSource: null
	,__glProgram: null
	,__glslAttribNames: null
	,__glslAttribTypes: null
	,__glslSamplerNames: null
	,__glslUniformLocations: null
	,__glslUniformNames: null
	,__glslUniformTypes: null
	,__glVertexShader: null
	,__glVertexSource: null
	,__samplerStates: null
	,dispose: function() {
		this.__deleteShaders();
	}
	,getAttributeIndex: function(name) {
		if(this.__format == 0) {
			if(StringTools.startsWith(name,"va")) {
				return Std.parseInt(name.substring(2));
			} else {
				return -1;
			}
		} else {
			var _g = 0;
			var _g1 = this.__glslAttribNames.length;
			while(_g < _g1) {
				var i = _g++;
				if(this.__glslAttribNames[i] == name) {
					return i;
				}
			}
			return -1;
		}
	}
	,getConstantIndex: function(name) {
		if(this.__format == 0) {
			if(StringTools.startsWith(name,"vc")) {
				return Std.parseInt(name.substring(2));
			} else if(StringTools.startsWith(name,"fc")) {
				return Std.parseInt(name.substring(2));
			} else {
				return -1;
			}
		} else {
			var _g = 0;
			var _g1 = this.__glslUniformNames.length;
			while(_g < _g1) {
				var i = _g++;
				if(this.__glslUniformNames[i] == name) {
					return this.__glslUniformLocations[i];
				}
			}
			return -1;
		}
	}
	,upload: function(vertexProgram,fragmentProgram) {
		if(this.__format != 0) {
			return;
		}
		var samplerStates = [];
		var glslVertex = openfl__$internal_formats_agal_AGALConverter.convertToGLSL(vertexProgram,null);
		var glslFragment = openfl__$internal_formats_agal_AGALConverter.convertToGLSL(fragmentProgram,samplerStates);
		if(lime_utils_Log.level == 5) {
			lime_utils_Log.info(glslVertex,{ fileName : "openfl/display3D/Program3D.hx", lineNumber : 399, className : "openfl.display3D.Program3D", methodName : "upload"});
			lime_utils_Log.info(glslFragment,{ fileName : "openfl/display3D/Program3D.hx", lineNumber : 400, className : "openfl.display3D.Program3D", methodName : "upload"});
		}
		this.__deleteShaders();
		this.__uploadFromGLSL(glslVertex,glslFragment);
		this.__buildAGALUniformList();
		var _g = 0;
		var _g1 = samplerStates.length;
		while(_g < _g1) {
			var i = _g++;
			this.__samplerStates[i] = samplerStates[i];
		}
	}
	,uploadSources: function(vertexSource,fragmentSource) {
		if(this.__format != 1) {
			return;
		}
		var prefix = "#ifdef GL_ES\n\t\t\t#ifdef GL_FRAGMENT_PRECISION_HIGH\n\t\t\tprecision highp float;\n\t\t\t#else\n\t\t\tprecision mediump float;\n\t\t\t#endif\n\t\t\t#endif\n\t\t\t";
		var vertex = prefix + vertexSource;
		var fragment = prefix + fragmentSource;
		if(vertex == this.__glVertexSource && fragment == this.__glFragmentSource) {
			return;
		}
		this.__processGLSLData(vertexSource,"attribute");
		this.__processGLSLData(vertexSource,"uniform");
		this.__processGLSLData(fragmentSource,"uniform");
		this.__deleteShaders();
		this.__uploadFromGLSL(vertex,fragment);
		var samplerNames = this.__glslSamplerNames;
		var attribNames = this.__glslAttribNames;
		var attribTypes = this.__glslAttribTypes;
		var uniformNames = this.__glslUniformNames;
		this.__glslSamplerNames = [];
		this.__glslAttribNames = [];
		this.__glslAttribTypes = [];
		this.__glslUniformLocations = [];
		var gl = this.__context.gl;
		var index;
		var location;
		var _g = 0;
		while(_g < samplerNames.length) {
			var name = samplerNames[_g];
			++_g;
			index = gl.getUniformLocation(this.__glProgram,name);
			this.__glslSamplerNames[index] = name;
		}
		var _g = 0;
		var _g1 = attribNames.length;
		while(_g < _g1) {
			var i = _g++;
			index = gl.getAttribLocation(this.__glProgram,attribNames[i]);
			this.__glslAttribNames[index] = attribNames[i];
			this.__glslAttribTypes[index] = attribTypes[i];
		}
		var _g = 0;
		var _g1 = uniformNames.length;
		while(_g < _g1) {
			var i = _g++;
			location = gl.getUniformLocation(this.__glProgram,uniformNames[i]);
			this.__glslUniformLocations[i] = location;
		}
	}
	,__buildAGALUniformList: function() {
		if(this.__format == 1) {
			return;
		}
		var gl = this.__context.gl;
		this.__agalUniforms.clear();
		this.__agalSamplerUniforms.clear();
		this.__agalAlphaSamplerUniforms.clear();
		this.__agalAlphaSamplerEnabled = [];
		this.__agalSamplerUsageMask = 0;
		var numActive = 0;
		numActive = gl.getProgramParameter(this.__glProgram,gl.ACTIVE_UNIFORMS);
		var vertexUniforms = new haxe_ds_List();
		var fragmentUniforms = new haxe_ds_List();
		var _g = 0;
		var _g1 = numActive;
		while(_g < _g1) {
			var i = _g++;
			var info = gl.getActiveUniform(this.__glProgram,i);
			var name = info.name;
			var size = info.size;
			var uniformType = info.type;
			var uniform = new openfl_display3D_Uniform(this.__context);
			uniform.name = name;
			uniform.size = size;
			uniform.type = uniformType;
			uniform.location = gl.getUniformLocation(this.__glProgram,uniform.name);
			var indexBracket = uniform.name.indexOf("[");
			if(indexBracket >= 0) {
				uniform.name = uniform.name.substring(0,indexBracket);
			}
			switch(uniform.type) {
			case 35674:
				uniform.regCount = 2;
				break;
			case 35675:
				uniform.regCount = 3;
				break;
			case 35676:
				uniform.regCount = 4;
				break;
			default:
				uniform.regCount = 1;
			}
			uniform.regCount *= uniform.size;
			this.__agalUniforms.add(uniform);
			if(uniform.name == "vcPositionScale") {
				this.__agalPositionScale = uniform;
			} else if(StringTools.startsWith(uniform.name,"vc")) {
				uniform.regIndex = Std.parseInt(uniform.name.substring(2));
				uniform.regData = this.__context.__vertexConstants;
				vertexUniforms.add(uniform);
			} else if(StringTools.startsWith(uniform.name,"fc")) {
				uniform.regIndex = Std.parseInt(uniform.name.substring(2));
				uniform.regData = this.__context.__fragmentConstants;
				fragmentUniforms.add(uniform);
			} else if(StringTools.startsWith(uniform.name,"sampler") && uniform.name.indexOf("alpha") == -1) {
				uniform.regIndex = Std.parseInt(uniform.name.substring(7));
				this.__agalSamplerUniforms.add(uniform);
				var _g2 = 0;
				var _g3 = uniform.regCount;
				while(_g2 < _g3) {
					var reg = _g2++;
					this.__agalSamplerUsageMask |= 1 << uniform.regIndex + reg;
				}
			} else if(StringTools.startsWith(uniform.name,"sampler") && StringTools.endsWith(uniform.name,"_alpha")) {
				var len = uniform.name.indexOf("_") - 7;
				uniform.regIndex = Std.parseInt(uniform.name.substring(7,7 + len)) + 4;
				this.__agalAlphaSamplerUniforms.add(uniform);
			} else if(StringTools.startsWith(uniform.name,"sampler") && StringTools.endsWith(uniform.name,"_alphaEnabled")) {
				uniform.regIndex = Std.parseInt(uniform.name.substring(7));
				this.__agalAlphaSamplerEnabled[uniform.regIndex] = uniform;
			}
			if(lime_utils_Log.level == 5) {
				lime_utils_Log.verbose("" + i + " name:" + uniform.name + " type:" + uniform.type + " size:" + uniform.size + " location:" + Std.string(uniform.location),{ fileName : "openfl/display3D/Program3D.hx", lineNumber : 577, className : "openfl.display3D.Program3D", methodName : "__buildAGALUniformList"});
			}
		}
		this.__agalVertexUniformMap = new openfl_display3D_UniformMap(Lambda.array(vertexUniforms));
		this.__agalFragmentUniformMap = new openfl_display3D_UniformMap(Lambda.array(fragmentUniforms));
	}
	,__deleteShaders: function() {
		var gl = this.__context.gl;
		if(this.__glProgram != null) {
			this.__glProgram = null;
		}
		if(this.__glVertexShader != null) {
			gl.deleteShader(this.__glVertexShader);
			this.__glVertexShader = null;
		}
		if(this.__glFragmentShader != null) {
			gl.deleteShader(this.__glFragmentShader);
			this.__glFragmentShader = null;
		}
	}
	,__disable: function() {
		var tmp = this.__format == 1;
	}
	,__enable: function() {
		var gl = this.__context.gl;
		gl.useProgram(this.__glProgram);
		if(this.__format == 0) {
			this.__agalVertexUniformMap.markAllDirty();
			this.__agalFragmentUniformMap.markAllDirty();
			var _g_head = this.__agalSamplerUniforms.h;
			while(_g_head != null) {
				var val = _g_head.item;
				_g_head = _g_head.next;
				var sampler = val;
				if(sampler.regCount == 1) {
					gl.uniform1i(sampler.location,sampler.regIndex);
				} else {
					throw haxe_Exception.thrown(new openfl_errors_IllegalOperationError("!!! TODO: uniform location on webgl"));
				}
			}
			var _g1_head = this.__agalAlphaSamplerUniforms.h;
			while(_g1_head != null) {
				var val = _g1_head.item;
				_g1_head = _g1_head.next;
				var sampler = val;
				if(sampler.regCount == 1) {
					gl.uniform1i(sampler.location,sampler.regIndex);
				} else {
					throw haxe_Exception.thrown(new openfl_errors_IllegalOperationError("!!! TODO: uniform location on webgl"));
				}
			}
		}
	}
	,__flush: function() {
		if(this.__format == 0) {
			this.__agalVertexUniformMap.flush();
			this.__agalFragmentUniformMap.flush();
		} else {
			return;
		}
	}
	,__getSamplerState: function(sampler) {
		return this.__samplerStates[sampler];
	}
	,__markDirty: function(isVertex,index,count) {
		if(this.__format == 1) {
			return;
		}
		if(isVertex) {
			this.__agalVertexUniformMap.markDirty(index,count);
		} else {
			this.__agalFragmentUniformMap.markDirty(index,count);
		}
	}
	,__processGLSLData: function(source,storageType) {
		var lastMatch = 0;
		var position;
		var regex;
		var name;
		var type;
		if(storageType == "uniform") {
			regex = new EReg("uniform ([A-Za-z0-9]+) ([A-Za-z0-9_]+)","");
		} else {
			regex = new EReg("attribute ([A-Za-z0-9]+) ([A-Za-z0-9_]+)","");
		}
		while(regex.matchSub(source,lastMatch)) {
			type = regex.matched(1);
			name = regex.matched(2);
			if(StringTools.startsWith(name,"gl_")) {
				continue;
			}
			if(StringTools.startsWith(type,"sampler")) {
				this.__glslSamplerNames.push(name);
			} else {
				var parameterType;
				switch(type) {
				case "bool":
					parameterType = 0;
					break;
				case "bvec2":
					parameterType = 1;
					break;
				case "bvec3":
					parameterType = 2;
					break;
				case "bvec4":
					parameterType = 3;
					break;
				case "dvec2":case "vec2":
					parameterType = 5;
					break;
				case "dvec3":case "vec3":
					parameterType = 6;
					break;
				case "double":case "float":
					parameterType = 4;
					break;
				case "ivec3":case "uvec3":
					parameterType = 10;
					break;
				case "ivec4":case "uvec4":
					parameterType = 11;
					break;
				case "mat2":case "mat2x2":
					parameterType = 12;
					break;
				case "mat2x3":
					parameterType = 13;
					break;
				case "mat2x4":
					parameterType = 14;
					break;
				case "mat3x2":
					parameterType = 15;
					break;
				case "mat3":case "mat3x3":
					parameterType = 16;
					break;
				case "mat3x4":
					parameterType = 17;
					break;
				case "mat4":case "mat4x4":
					parameterType = 20;
					break;
				case "mat4x2":
					parameterType = 18;
					break;
				case "mat4x3":
					parameterType = 19;
					break;
				case "int":case "uint":
					parameterType = 8;
					break;
				case "ivec2":case "uvec2":
					parameterType = 9;
					break;
				case "dvec4":case "vec4":
					parameterType = 7;
					break;
				default:
					parameterType = null;
				}
				if(storageType == "uniform") {
					this.__glslUniformNames.push(name);
					this.__glslUniformTypes.push(parameterType);
				} else {
					this.__glslAttribNames.push(name);
					this.__glslAttribTypes.push(parameterType);
				}
			}
			position = regex.matchedPos();
			lastMatch = position.pos + position.len;
		}
	}
	,__setPositionScale: function(positionScale) {
		if(this.__format == 1) {
			return;
		}
		if(this.__agalPositionScale != null) {
			var gl = this.__context.gl;
			var location = this.__agalPositionScale.location;
			var data = positionScale;
			var srcOffset = null;
			if(srcOffset != null) {
				gl.uniform4fv(location,data,srcOffset,null);
			} else {
				gl.uniform4fv(location,data);
			}
		}
	}
	,__setSamplerState: function(sampler,state) {
		this.__samplerStates[sampler] = state;
	}
	,__uploadFromGLSL: function(vertexShaderSource,fragmentShaderSource) {
		var gl = this.__context.gl;
		this.__glVertexSource = vertexShaderSource;
		this.__glFragmentSource = fragmentShaderSource;
		this.__glVertexShader = gl.createShader(gl.VERTEX_SHADER);
		gl.shaderSource(this.__glVertexShader,vertexShaderSource);
		gl.compileShader(this.__glVertexShader);
		if(gl.getShaderParameter(this.__glVertexShader,gl.COMPILE_STATUS) == 0) {
			var message = "Error compiling vertex shader";
			message += "\n" + gl.getShaderInfoLog(this.__glVertexShader);
			message += "\n" + vertexShaderSource;
			lime_utils_Log.error(message,{ fileName : "openfl/display3D/Program3D.hx", lineNumber : 869, className : "openfl.display3D.Program3D", methodName : "__uploadFromGLSL"});
		}
		this.__glFragmentShader = gl.createShader(gl.FRAGMENT_SHADER);
		gl.shaderSource(this.__glFragmentShader,fragmentShaderSource);
		gl.compileShader(this.__glFragmentShader);
		if(gl.getShaderParameter(this.__glFragmentShader,gl.COMPILE_STATUS) == 0) {
			var message = "Error compiling fragment shader";
			message += "\n" + gl.getShaderInfoLog(this.__glFragmentShader);
			message += "\n" + fragmentShaderSource;
			lime_utils_Log.error(message,{ fileName : "openfl/display3D/Program3D.hx", lineNumber : 881, className : "openfl.display3D.Program3D", methodName : "__uploadFromGLSL"});
		}
		this.__glProgram = gl.createProgram();
		if(this.__format == 0) {
			var _g = 0;
			while(_g < 16) {
				var i = _g++;
				var name = "va" + i;
				if(vertexShaderSource.indexOf(" " + name) != -1) {
					gl.bindAttribLocation(this.__glProgram,i,name);
				}
			}
		} else {
			var _g = 0;
			var _g1 = this.__glslAttribNames;
			while(_g < _g1.length) {
				var name = _g1[_g];
				++_g;
				if(name.indexOf("Position") > -1 && StringTools.startsWith(name,"openfl_")) {
					gl.bindAttribLocation(this.__glProgram,0,name);
					break;
				}
			}
		}
		gl.attachShader(this.__glProgram,this.__glVertexShader);
		gl.attachShader(this.__glProgram,this.__glFragmentShader);
		gl.linkProgram(this.__glProgram);
		if(gl.getProgramParameter(this.__glProgram,gl.LINK_STATUS) == 0) {
			var message = "Unable to initialize the shader program";
			message += "\n" + gl.getProgramInfoLog(this.__glProgram);
			lime_utils_Log.error(message,{ fileName : "openfl/display3D/Program3D.hx", lineNumber : 922, className : "openfl.display3D.Program3D", methodName : "__uploadFromGLSL"});
		}
	}
	,__class__: openfl_display3D_Program3D
};
var openfl_display3D_Uniform = function(context) {
	this.context = context;
	this.isDirty = true;
	var this1 = new lime_utils_BytePointerData(null,0);
	this.regDataPointer = this1;
};
$hxClasses["openfl.display3D.Uniform"] = openfl_display3D_Uniform;
openfl_display3D_Uniform.__name__ = "openfl.display3D.Uniform";
openfl_display3D_Uniform.prototype = {
	name: null
	,location: null
	,type: null
	,size: null
	,regData: null
	,regIndex: null
	,regCount: null
	,isDirty: null
	,context: null
	,regDataPointer: null
	,flush: function() {
		var gl = this.context.gl;
		var index = this.regIndex * 4;
		switch(this.type) {
		case 35664:
			lime_graphics_WebGL2RenderContext.uniform2fv(gl,this.location,this.regData.subarray(index,index + this.regCount * 2));
			break;
		case 35665:
			var location = this.location;
			var data = this.regData.subarray(index,index + this.regCount * 3);
			var srcOffset = null;
			if(srcOffset != null) {
				gl.uniform3fv(location,data,srcOffset,null);
			} else {
				gl.uniform3fv(location,data);
			}
			break;
		case 35666:
			var location = this.location;
			var data = this.regData.subarray(index,index + this.regCount * 4);
			var srcOffset = null;
			if(srcOffset != null) {
				gl.uniform4fv(location,data,srcOffset,null);
			} else {
				gl.uniform4fv(location,data);
			}
			break;
		case 35674:
			lime_graphics_WebGLRenderContext.uniformMatrix2fv(gl,this.location,false,this.regData.subarray(index,index + this.size * 2 * 2));
			break;
		case 35675:
			lime_graphics_WebGLRenderContext.uniformMatrix3fv(gl,this.location,false,this.regData.subarray(index,index + this.size * 3 * 3));
			break;
		case 35676:
			lime_graphics_WebGLRenderContext.uniformMatrix4fv(gl,this.location,false,this.regData.subarray(index,index + this.size * 4 * 4));
			break;
		default:
			var location = this.location;
			var data = this.regData.subarray(index,index + this.regCount * 4);
			var srcOffset = null;
			if(srcOffset != null) {
				gl.uniform4fv(location,data,srcOffset,null);
			} else {
				gl.uniform4fv(location,data);
			}
		}
	}
	,__getUniformRegisters: function(index,size) {
		return this.regData.subarray(index,index + size);
	}
	,__class__: openfl_display3D_Uniform
};
var openfl_display3D_UniformMap = function(list) {
	this.__uniforms = list;
	this.__uniforms.sort(function(a,b) {
		return Reflect.compare(a.regIndex,b.regIndex);
	});
	var total = 0;
	var _g = 0;
	var _g1 = this.__uniforms;
	while(_g < _g1.length) {
		var uniform = _g1[_g];
		++_g;
		if(uniform.regIndex + uniform.regCount > total) {
			total = uniform.regIndex + uniform.regCount;
		}
	}
	this.__registerLookup = openfl_Vector.toObjectVector(null,total);
	var _g = 0;
	var _g1 = this.__uniforms;
	while(_g < _g1.length) {
		var uniform = _g1[_g];
		++_g;
		var _g2 = 0;
		var _g3 = uniform.regCount;
		while(_g2 < _g3) {
			var i = _g2++;
			this.__registerLookup.set(uniform.regIndex + i,uniform);
		}
	}
	this.__anyDirty = this.__allDirty = true;
};
$hxClasses["openfl.display3D.UniformMap"] = openfl_display3D_UniformMap;
openfl_display3D_UniformMap.__name__ = "openfl.display3D.UniformMap";
openfl_display3D_UniformMap.prototype = {
	__allDirty: null
	,__anyDirty: null
	,__registerLookup: null
	,__uniforms: null
	,flush: function() {
		if(this.__anyDirty) {
			var _g = 0;
			var _g1 = this.__uniforms;
			while(_g < _g1.length) {
				var uniform = _g1[_g];
				++_g;
				if(this.__allDirty || uniform.isDirty) {
					uniform.flush();
					uniform.isDirty = false;
				}
			}
			this.__anyDirty = this.__allDirty = false;
		}
	}
	,markAllDirty: function() {
		this.__allDirty = true;
		this.__anyDirty = true;
	}
	,markDirty: function(start,count) {
		if(this.__allDirty) {
			return;
		}
		var end = start + count;
		if(end > this.__registerLookup.get_length()) {
			end = this.__registerLookup.get_length();
		}
		var index = start;
		while(index < end) {
			var uniform = this.__registerLookup.get(index);
			if(uniform != null) {
				uniform.isDirty = true;
				this.__anyDirty = true;
				index = uniform.regIndex + uniform.regCount;
			} else {
				++index;
			}
		}
	}
	,__class__: openfl_display3D_UniformMap
};
var openfl_display3D_VertexBuffer3D = function(context3D,numVertices,dataPerVertex,bufferUsage) {
	this.__context = context3D;
	this.__numVertices = numVertices;
	this.__vertexSize = dataPerVertex;
	var gl = this.__context.gl;
	this.__id = gl.createBuffer();
	this.__stride = this.__vertexSize * 4;
	this.__usage = openfl_display3D_Context3DBufferUsage.fromString(bufferUsage) == 0 ? gl.DYNAMIC_DRAW : gl.STATIC_DRAW;
};
$hxClasses["openfl.display3D.VertexBuffer3D"] = openfl_display3D_VertexBuffer3D;
openfl_display3D_VertexBuffer3D.__name__ = "openfl.display3D.VertexBuffer3D";
openfl_display3D_VertexBuffer3D.prototype = {
	__context: null
	,__data: null
	,__id: null
	,__memoryUsage: null
	,__numVertices: null
	,__stride: null
	,__tempFloat32Array: null
	,__usage: null
	,__vertexSize: null
	,dispose: function() {
		var gl = this.__context.gl;
		gl.deleteBuffer(this.__id);
	}
	,uploadFromByteArray: function(data,byteArrayOffset,startVertex,numVertices) {
		var offset = byteArrayOffset + startVertex * this.__stride;
		var length = numVertices * this.__vertexSize;
		var elements = null;
		var array = null;
		var vector = null;
		var view = null;
		var buffer = openfl_utils_ByteArray.toArrayBuffer(data);
		var byteoffset = offset;
		if(byteoffset == null) {
			byteoffset = 0;
		}
		var this1;
		if(elements != null) {
			this1 = new Float32Array(elements);
		} else if(array != null) {
			this1 = new Float32Array(array);
		} else if(vector != null) {
			this1 = new Float32Array(vector.__array);
		} else if(view != null) {
			this1 = new Float32Array(view);
		} else if(buffer != null) {
			if(length == null) {
				this1 = new Float32Array(buffer,byteoffset);
			} else {
				this1 = new Float32Array(buffer,byteoffset,length);
			}
		} else {
			this1 = null;
		}
		this.uploadFromTypedArray(this1);
	}
	,uploadFromTypedArray: function(data,byteLength) {
		if(byteLength == null) {
			byteLength = -1;
		}
		if(data == null) {
			return;
		}
		var gl = this.__context.gl;
		this.__context.__bindGLArrayBuffer(this.__id);
		lime_graphics_WebGLRenderContext.bufferData(gl,gl.ARRAY_BUFFER,data,this.__usage);
	}
	,uploadFromVector: function(data,startVertex,numVertices) {
		if(data == null) {
			return;
		}
		var gl = this.__context.gl;
		var start = startVertex * this.__vertexSize;
		var count = numVertices * this.__vertexSize;
		var length = start + count;
		var existingFloat32Array = this.__tempFloat32Array;
		if(this.__tempFloat32Array == null || this.__tempFloat32Array.length < count) {
			var array = null;
			var vector = null;
			var view = null;
			var buffer = null;
			var len = null;
			var this1;
			if(count != null) {
				this1 = new Float32Array(count);
			} else if(array != null) {
				this1 = new Float32Array(array);
			} else if(vector != null) {
				this1 = new Float32Array(vector.__array);
			} else if(view != null) {
				this1 = new Float32Array(view);
			} else if(buffer != null) {
				if(len == null) {
					this1 = new Float32Array(buffer,0);
				} else {
					this1 = new Float32Array(buffer,0,len);
				}
			} else {
				this1 = null;
			}
			this.__tempFloat32Array = this1;
			if(existingFloat32Array != null) {
				this.__tempFloat32Array.set(existingFloat32Array);
			}
		}
		var _g = start;
		var _g1 = length;
		while(_g < _g1) {
			var i = _g++;
			this.__tempFloat32Array[i - start] = data.get(i);
		}
		this.uploadFromTypedArray(this.__tempFloat32Array);
	}
	,__class__: openfl_display3D_VertexBuffer3D
};
var openfl_display3D_textures_TextureBase = function(context) {
	openfl_events_EventDispatcher.call(this);
	this.__context = context;
	var gl = this.__context.gl;
	this.__textureID = gl.createTexture();
	this.__textureContext = this.__context.__context;
	if(openfl_display3D_textures_TextureBase.__supportsBGRA == null) {
		openfl_display3D_textures_TextureBase.__textureInternalFormat = gl.RGBA;
		var bgraExtension = null;
		if(bgraExtension != null) {
			openfl_display3D_textures_TextureBase.__supportsBGRA = true;
			openfl_display3D_textures_TextureBase.__textureFormat = bgraExtension.BGRA_EXT;
			if(context.__context.type == "opengles") {
				openfl_display3D_textures_TextureBase.__textureInternalFormat = bgraExtension.BGRA_EXT;
			}
		} else {
			openfl_display3D_textures_TextureBase.__supportsBGRA = false;
			openfl_display3D_textures_TextureBase.__textureFormat = gl.RGBA;
		}
		openfl_display3D_textures_TextureBase.__compressedFormats = new haxe_ds_IntMap();
		openfl_display3D_textures_TextureBase.__compressedFormatsAlpha = new haxe_ds_IntMap();
		var dxtExtension = gl.getExtension("WEBGL_compressed_texture_s3tc");
		var etc1Extension = gl.getExtension("WEBGL_compressed_texture_etc1");
		var pvrtcExtension = gl.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");
		if(dxtExtension != null) {
			var v = dxtExtension.COMPRESSED_RGBA_S3TC_DXT1_EXT;
			openfl_display3D_textures_TextureBase.__compressedFormats.h[0] = v;
			var v = dxtExtension.COMPRESSED_RGBA_S3TC_DXT5_EXT;
			openfl_display3D_textures_TextureBase.__compressedFormatsAlpha.h[0] = v;
		}
		if(etc1Extension != null) {
			var v = etc1Extension.COMPRESSED_RGB_ETC1_WEBGL;
			openfl_display3D_textures_TextureBase.__compressedFormats.h[2] = v;
			var v = etc1Extension.COMPRESSED_RGB_ETC1_WEBGL;
			openfl_display3D_textures_TextureBase.__compressedFormatsAlpha.h[2] = v;
		}
		if(pvrtcExtension != null) {
			var v = pvrtcExtension.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;
			openfl_display3D_textures_TextureBase.__compressedFormats.h[1] = v;
			var v = pvrtcExtension.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;
			openfl_display3D_textures_TextureBase.__compressedFormatsAlpha.h[1] = v;
		}
	}
	this.__internalFormat = openfl_display3D_textures_TextureBase.__textureInternalFormat;
	this.__format = openfl_display3D_textures_TextureBase.__textureFormat;
};
$hxClasses["openfl.display3D.textures.TextureBase"] = openfl_display3D_textures_TextureBase;
openfl_display3D_textures_TextureBase.__name__ = "openfl.display3D.textures.TextureBase";
openfl_display3D_textures_TextureBase.__super__ = openfl_events_EventDispatcher;
openfl_display3D_textures_TextureBase.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	__alphaTexture: null
	,__context: null
	,__format: null
	,__glDepthRenderbuffer: null
	,__glFramebuffer: null
	,__glStencilRenderbuffer: null
	,__height: null
	,__internalFormat: null
	,__optimizeForRenderToTexture: null
	,__samplerState: null
	,__streamingLevels: null
	,__textureContext: null
	,__textureID: null
	,__textureTarget: null
	,__width: null
	,dispose: function() {
		var gl = this.__context.gl;
		if(this.__alphaTexture != null) {
			this.__alphaTexture.dispose();
			this.__alphaTexture = null;
		}
		if(this.__textureID != null) {
			gl.deleteTexture(this.__textureID);
			this.__textureID = null;
		}
		if(this.__glFramebuffer != null) {
			gl.deleteFramebuffer(this.__glFramebuffer);
			this.__glFramebuffer = null;
		}
		if(this.__glDepthRenderbuffer != null) {
			gl.deleteRenderbuffer(this.__glDepthRenderbuffer);
			this.__glDepthRenderbuffer = null;
		}
		if(this.__glStencilRenderbuffer != null) {
			gl.deleteRenderbuffer(this.__glStencilRenderbuffer);
			this.__glStencilRenderbuffer = null;
		}
	}
	,__getGLFramebuffer: function(enableDepthAndStencil,antiAlias,surfaceSelector) {
		var gl = this.__context.gl;
		if(this.__glFramebuffer == null) {
			this.__glFramebuffer = gl.createFramebuffer();
			this.__context.__bindGLFramebuffer(this.__glFramebuffer);
			gl.framebufferTexture2D(gl.FRAMEBUFFER,gl.COLOR_ATTACHMENT0,gl.TEXTURE_2D,this.__textureID,0);
			if(this.__context.__enableErrorChecking) {
				var code = gl.checkFramebufferStatus(gl.FRAMEBUFFER);
				if(code != gl.FRAMEBUFFER_COMPLETE) {
					lime_utils_Log.warn("Error: Context3D.setRenderToTexture status:" + code + " width:" + this.__width + " height:" + this.__height,{ fileName : "openfl/display3D/textures/TextureBase.hx", lineNumber : 201, className : "openfl.display3D.textures.TextureBase", methodName : "__getGLFramebuffer"});
				}
			}
		}
		if(enableDepthAndStencil && this.__glDepthRenderbuffer == null) {
			this.__context.__bindGLFramebuffer(this.__glFramebuffer);
			if(openfl_display3D_Context3D.__glDepthStencil != 0) {
				this.__glDepthRenderbuffer = gl.createRenderbuffer();
				this.__glStencilRenderbuffer = this.__glDepthRenderbuffer;
				gl.bindRenderbuffer(gl.RENDERBUFFER,this.__glDepthRenderbuffer);
				gl.renderbufferStorage(gl.RENDERBUFFER,openfl_display3D_Context3D.__glDepthStencil,this.__width,this.__height);
				gl.framebufferRenderbuffer(gl.FRAMEBUFFER,gl.DEPTH_STENCIL_ATTACHMENT,gl.RENDERBUFFER,this.__glDepthRenderbuffer);
			} else {
				this.__glDepthRenderbuffer = gl.createRenderbuffer();
				this.__glStencilRenderbuffer = gl.createRenderbuffer();
				gl.bindRenderbuffer(gl.RENDERBUFFER,this.__glDepthRenderbuffer);
				gl.renderbufferStorage(gl.RENDERBUFFER,gl.DEPTH_COMPONENT16,this.__width,this.__height);
				gl.bindRenderbuffer(gl.RENDERBUFFER,this.__glStencilRenderbuffer);
				gl.renderbufferStorage(gl.RENDERBUFFER,gl.STENCIL_INDEX8,this.__width,this.__height);
				gl.framebufferRenderbuffer(gl.FRAMEBUFFER,gl.DEPTH_ATTACHMENT,gl.RENDERBUFFER,this.__glDepthRenderbuffer);
				gl.framebufferRenderbuffer(gl.FRAMEBUFFER,gl.STENCIL_ATTACHMENT,gl.RENDERBUFFER,this.__glStencilRenderbuffer);
			}
			if(this.__context.__enableErrorChecking) {
				var code = gl.checkFramebufferStatus(gl.FRAMEBUFFER);
				if(code != gl.FRAMEBUFFER_COMPLETE) {
					lime_utils_Log.warn("Error: Context3D.setRenderToTexture status:" + code + " width:" + this.__width + " height:" + this.__height,{ fileName : "openfl/display3D/textures/TextureBase.hx", lineNumber : 239, className : "openfl.display3D.textures.TextureBase", methodName : "__getGLFramebuffer"});
				}
			}
			gl.bindRenderbuffer(gl.RENDERBUFFER,null);
		}
		return this.__glFramebuffer;
	}
	,__getImage: function(bitmapData) {
		var image = bitmapData.image;
		if(!bitmapData.__isValid || image == null) {
			return null;
		}
		lime__$internal_graphics_ImageCanvasUtil.sync(image,false);
		var gl = this.__context.gl;
		if(image.type != lime_graphics_ImageType.DATA && !image.get_premultiplied()) {
			gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL,1);
		} else if(!image.get_premultiplied() && image.get_transparent()) {
			gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL,0);
			image = image.clone();
			image.set_premultiplied(true);
		}
		if(image.get_format() != 0) {
			image = image.clone();
			image.set_format(0);
			image.buffer.premultiplied = true;
		}
		return image;
	}
	,__getTexture: function() {
		return this.__textureID;
	}
	,__setSamplerState: function(state) {
		if(!state.equals(this.__samplerState)) {
			var gl = this.__context.gl;
			if(this.__textureTarget == this.__context.gl.TEXTURE_CUBE_MAP) {
				this.__context.__bindGLTextureCubeMap(this.__textureID);
			} else {
				this.__context.__bindGLTexture2D(this.__textureID);
			}
			var wrapModeS = 0;
			var wrapModeT = 0;
			switch(state.wrap) {
			case 0:
				wrapModeS = gl.CLAMP_TO_EDGE;
				wrapModeT = gl.CLAMP_TO_EDGE;
				break;
			case 1:
				wrapModeS = gl.CLAMP_TO_EDGE;
				wrapModeT = gl.REPEAT;
				break;
			case 2:
				wrapModeS = gl.REPEAT;
				wrapModeT = gl.REPEAT;
				break;
			case 3:
				wrapModeS = gl.REPEAT;
				wrapModeT = gl.CLAMP_TO_EDGE;
				break;
			default:
				throw haxe_Exception.thrown(new openfl_errors_Error("wrap bad enum"));
			}
			var magFilter = 0;
			var minFilter = 0;
			if(state.filter == 5) {
				magFilter = gl.NEAREST;
			} else {
				magFilter = gl.LINEAR;
			}
			switch(state.mipfilter) {
			case 0:
				minFilter = state.filter == 5 ? gl.NEAREST_MIPMAP_LINEAR : gl.LINEAR_MIPMAP_LINEAR;
				break;
			case 1:
				minFilter = state.filter == 5 ? gl.NEAREST_MIPMAP_NEAREST : gl.LINEAR_MIPMAP_NEAREST;
				break;
			case 2:
				minFilter = state.filter == 5 ? gl.NEAREST : gl.LINEAR;
				break;
			default:
				throw haxe_Exception.thrown(new openfl_errors_Error("mipfiter bad enum"));
			}
			gl.texParameteri(this.__textureTarget,gl.TEXTURE_MIN_FILTER,minFilter);
			gl.texParameteri(this.__textureTarget,gl.TEXTURE_MAG_FILTER,magFilter);
			gl.texParameteri(this.__textureTarget,gl.TEXTURE_WRAP_S,wrapModeS);
			gl.texParameteri(this.__textureTarget,gl.TEXTURE_WRAP_T,wrapModeT);
			var tmp = state.lodBias != 0.0;
			if(this.__samplerState == null) {
				this.__samplerState = state.clone();
			}
			this.__samplerState.copyFrom(state);
			return true;
		}
		return false;
	}
	,__uploadFromImage: function(image) {
		var gl = this.__context.gl;
		var internalFormat;
		var format;
		if(this.__textureTarget != gl.TEXTURE_2D) {
			return;
		}
		if(image.buffer.bitsPerPixel == 1) {
			internalFormat = gl.ALPHA;
			format = gl.ALPHA;
		} else {
			internalFormat = openfl_display3D_textures_TextureBase.__textureInternalFormat;
			format = openfl_display3D_textures_TextureBase.__textureFormat;
		}
		this.__context.__bindGLTexture2D(this.__textureID);
		if(image.type != lime_graphics_ImageType.DATA && !image.get_premultiplied()) {
			gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL,1);
		} else if(!image.get_premultiplied() && image.get_transparent()) {
			gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL,1);
		}
		if(image.type == lime_graphics_ImageType.DATA) {
			lime_graphics_WebGLRenderContext.texImage2D(gl,gl.TEXTURE_2D,0,internalFormat,image.buffer.width,image.buffer.height,0,format,gl.UNSIGNED_BYTE,image.get_data());
		} else {
			lime_graphics_WebGLRenderContext.texImage2D(gl,gl.TEXTURE_2D,0,internalFormat,format,gl.UNSIGNED_BYTE,image.get_src());
		}
		this.__context.__bindGLTexture2D(null);
	}
	,__class__: openfl_display3D_textures_TextureBase
});
var openfl_display3D_textures_CubeTexture = function(context,size,format,optimizeForRenderToTexture,streamingLevels) {
	openfl_display3D_textures_TextureBase.call(this,context);
	this.__size = size;
	this.__width = this.__height = this.__size;
	this.__optimizeForRenderToTexture = optimizeForRenderToTexture;
	this.__streamingLevels = streamingLevels;
	this.__textureTarget = this.__context.gl.TEXTURE_CUBE_MAP;
	this.__uploadedSides = 0;
};
$hxClasses["openfl.display3D.textures.CubeTexture"] = openfl_display3D_textures_CubeTexture;
openfl_display3D_textures_CubeTexture.__name__ = "openfl.display3D.textures.CubeTexture";
openfl_display3D_textures_CubeTexture.__super__ = openfl_display3D_textures_TextureBase;
openfl_display3D_textures_CubeTexture.prototype = $extend(openfl_display3D_textures_TextureBase.prototype,{
	__framebufferSurface: null
	,__size: null
	,__uploadedSides: null
	,uploadCompressedTextureFromByteArray: function(data,byteArrayOffset,async) {
		if(async == null) {
			async = false;
		}
		var _gthis = this;
		if(!async) {
			this.__uploadCompressedTextureFromByteArray(data,byteArrayOffset);
		} else {
			haxe_Timer.delay(function() {
				_gthis.__uploadCompressedTextureFromByteArray(data,byteArrayOffset);
				var event = null;
				event = new openfl_events_Event("textureReady");
				_gthis.dispatchEvent(event);
			},1);
		}
	}
	,uploadFromBitmapData: function(source,side,miplevel,generateMipmap) {
		if(generateMipmap == null) {
			generateMipmap = false;
		}
		if(miplevel == null) {
			miplevel = 0;
		}
		if(source == null) {
			return;
		}
		var size = this.__size >> miplevel;
		if(size == 0) {
			return;
		}
		var image = this.__getImage(source);
		if(image == null) {
			return;
		}
		if(miplevel == 0 && image.buffer != null && image.buffer.data == null && image.buffer.get_src() != null) {
			var gl = this.__context.gl;
			var size = this.__size >> miplevel;
			if(size == 0) {
				return;
			}
			var target = this.__sideToTarget(side);
			this.__context.__bindGLTextureCubeMap(this.__textureID);
			lime_graphics_WebGLRenderContext.texImage2D(gl,target,miplevel,this.__internalFormat,this.__format,gl.UNSIGNED_BYTE,image.buffer.get_src());
			this.__context.__bindGLTextureCubeMap(null);
			this.__uploadedSides |= 1 << side;
			return;
		}
		this.uploadFromTypedArray(image.get_data(),side,miplevel);
	}
	,uploadFromByteArray: function(data,byteArrayOffset,side,miplevel) {
		if(miplevel == null) {
			miplevel = 0;
		}
		if(byteArrayOffset == 0) {
			this.uploadFromTypedArray(data.b,side,miplevel);
			return;
		}
		var elements = null;
		var array = null;
		var vector = null;
		var view = null;
		var buffer = openfl_utils_ByteArray.toArrayBuffer(data);
		var byteoffset = byteArrayOffset;
		var len = null;
		if(byteoffset == null) {
			byteoffset = 0;
		}
		var this1;
		if(elements != null) {
			this1 = new Uint8Array(elements);
		} else if(array != null) {
			this1 = new Uint8Array(array);
		} else if(vector != null) {
			this1 = new Uint8Array(vector.__array);
		} else if(view != null) {
			this1 = new Uint8Array(view);
		} else if(buffer != null) {
			if(len == null) {
				this1 = new Uint8Array(buffer,byteoffset);
			} else {
				this1 = new Uint8Array(buffer,byteoffset,len);
			}
		} else {
			this1 = null;
		}
		this.uploadFromTypedArray(this1,side,miplevel);
	}
	,uploadFromTypedArray: function(data,side,miplevel) {
		if(miplevel == null) {
			miplevel = 0;
		}
		if(data == null) {
			return;
		}
		var gl = this.__context.gl;
		var size = this.__size >> miplevel;
		if(size == 0) {
			return;
		}
		var target = this.__sideToTarget(side);
		this.__context.__bindGLTextureCubeMap(this.__textureID);
		lime_graphics_WebGLRenderContext.texImage2D(gl,target,miplevel,this.__internalFormat,size,size,0,this.__format,gl.UNSIGNED_BYTE,data);
		this.__context.__bindGLTextureCubeMap(null);
		this.__uploadedSides |= 1 << side;
	}
	,__getGLFramebuffer: function(enableDepthAndStencil,antiAlias,surfaceSelector) {
		var gl = this.__context.gl;
		if(this.__glFramebuffer == null) {
			this.__glFramebuffer = gl.createFramebuffer();
			this.__framebufferSurface = -1;
		}
		if(this.__framebufferSurface != surfaceSelector) {
			this.__framebufferSurface = surfaceSelector;
			this.__context.__bindGLFramebuffer(this.__glFramebuffer);
			gl.framebufferTexture2D(gl.FRAMEBUFFER,gl.COLOR_ATTACHMENT0,gl.TEXTURE_CUBE_MAP_POSITIVE_X + surfaceSelector,this.__textureID,0);
			if(this.__context.__enableErrorChecking) {
				var code = gl.checkFramebufferStatus(gl.FRAMEBUFFER);
				if(code != gl.FRAMEBUFFER_COMPLETE) {
					lime_utils_Log.error("Error: Context3D.setRenderToTexture status:" + code + " width:" + this.__width + " height:" + this.__height,{ fileName : "openfl/display3D/textures/CubeTexture.hx", lineNumber : 278, className : "openfl.display3D.textures.CubeTexture", methodName : "__getGLFramebuffer"});
				}
			}
		}
		return openfl_display3D_textures_TextureBase.prototype.__getGLFramebuffer.call(this,enableDepthAndStencil,antiAlias,surfaceSelector);
	}
	,__setSamplerState: function(state) {
		if(openfl_display3D_textures_TextureBase.prototype.__setSamplerState.call(this,state)) {
			var gl = this.__context.gl;
			if(state.mipfilter != 2 && !this.__samplerState.mipmapGenerated) {
				gl.generateMipmap(gl.TEXTURE_CUBE_MAP);
				this.__samplerState.mipmapGenerated = true;
			}
			if(openfl_display3D_Context3D.__glMaxTextureMaxAnisotropy != 0) {
				var aniso;
				switch(state.filter) {
				case 0:
					aniso = 16;
					break;
				case 1:
					aniso = 2;
					break;
				case 2:
					aniso = 4;
					break;
				case 3:
					aniso = 8;
					break;
				default:
					aniso = 1;
				}
				if(aniso > openfl_display3D_Context3D.__glMaxTextureMaxAnisotropy) {
					aniso = openfl_display3D_Context3D.__glMaxTextureMaxAnisotropy;
				}
				gl.texParameterf(gl.TEXTURE_CUBE_MAP,openfl_display3D_Context3D.__glTextureMaxAnisotropy,aniso);
			}
			return true;
		}
		return false;
	}
	,__sideToTarget: function(side) {
		var gl = this.__context.gl;
		switch(side) {
		case 0:
			return gl.TEXTURE_CUBE_MAP_POSITIVE_X;
		case 1:
			return gl.TEXTURE_CUBE_MAP_NEGATIVE_X;
		case 2:
			return gl.TEXTURE_CUBE_MAP_POSITIVE_Y;
		case 3:
			return gl.TEXTURE_CUBE_MAP_NEGATIVE_Y;
		case 4:
			return gl.TEXTURE_CUBE_MAP_POSITIVE_Z;
		case 5:
			return gl.TEXTURE_CUBE_MAP_NEGATIVE_Z;
		default:
			throw haxe_Exception.thrown(new openfl_errors_IllegalOperationError());
		}
	}
	,__uploadCompressedTextureFromByteArray: function(data,byteArrayOffset) {
		var _gthis = this;
		var reader = new openfl__$internal_formats_atf_ATFReader(data,byteArrayOffset);
		var alpha = reader.readHeader(this.__size,this.__size,true);
		var gl = this.__context.gl;
		this.__context.__bindGLTextureCubeMap(this.__textureID);
		var hasTexture = false;
		reader.readTextures(function(side,level,gpuFormat,width,height,blockLength,bytes) {
			var format = alpha ? openfl_display3D_textures_TextureBase.__compressedFormatsAlpha.h[gpuFormat] : openfl_display3D_textures_TextureBase.__compressedFormats.h[gpuFormat];
			if(format == 0) {
				return;
			}
			hasTexture = true;
			var target = _gthis.__sideToTarget(side);
			_gthis.__format = format;
			_gthis.__internalFormat = format;
			if(alpha && gpuFormat == 2) {
				var size = blockLength / 2 | 0;
				var elements = null;
				var array = null;
				var vector = null;
				var view = null;
				var buffer = bytes.b.buffer;
				var byteoffset = 0;
				if(byteoffset == null) {
					byteoffset = 0;
				}
				var this1;
				if(elements != null) {
					this1 = new Uint8Array(elements);
				} else if(array != null) {
					this1 = new Uint8Array(array);
				} else if(vector != null) {
					this1 = new Uint8Array(vector.__array);
				} else if(view != null) {
					this1 = new Uint8Array(view);
				} else if(buffer != null) {
					if(size == null) {
						this1 = new Uint8Array(buffer,byteoffset);
					} else {
						this1 = new Uint8Array(buffer,byteoffset,size);
					}
				} else {
					this1 = null;
				}
				lime_graphics_WebGLRenderContext.compressedTexImage2D(gl,target,level,_gthis.__internalFormat,width,height,0,this1);
				var alphaTexture = new openfl_display3D_textures_CubeTexture(_gthis.__context,_gthis.__size,3,_gthis.__optimizeForRenderToTexture,_gthis.__streamingLevels);
				alphaTexture.__format = format;
				alphaTexture.__internalFormat = format;
				_gthis.__context.__bindGLTextureCubeMap(alphaTexture.__textureID);
				var elements = null;
				var array = null;
				var vector = null;
				var view = null;
				var buffer = bytes.b.buffer;
				var byteoffset = size;
				if(byteoffset == null) {
					byteoffset = 0;
				}
				var this1;
				if(elements != null) {
					this1 = new Uint8Array(elements);
				} else if(array != null) {
					this1 = new Uint8Array(array);
				} else if(vector != null) {
					this1 = new Uint8Array(vector.__array);
				} else if(view != null) {
					this1 = new Uint8Array(view);
				} else if(buffer != null) {
					if(size == null) {
						this1 = new Uint8Array(buffer,byteoffset);
					} else {
						this1 = new Uint8Array(buffer,byteoffset,size);
					}
				} else {
					this1 = null;
				}
				lime_graphics_WebGLRenderContext.compressedTexImage2D(gl,target,level,alphaTexture.__internalFormat,width,height,0,this1);
				_gthis.__alphaTexture = alphaTexture;
			} else {
				var elements = null;
				var array = null;
				var vector = null;
				var view = null;
				var buffer = bytes.b.buffer;
				var byteoffset = 0;
				if(byteoffset == null) {
					byteoffset = 0;
				}
				var this1;
				if(elements != null) {
					this1 = new Uint8Array(elements);
				} else if(array != null) {
					this1 = new Uint8Array(array);
				} else if(vector != null) {
					this1 = new Uint8Array(vector.__array);
				} else if(view != null) {
					this1 = new Uint8Array(view);
				} else if(buffer != null) {
					if(blockLength == null) {
						this1 = new Uint8Array(buffer,byteoffset);
					} else {
						this1 = new Uint8Array(buffer,byteoffset,blockLength);
					}
				} else {
					this1 = null;
				}
				lime_graphics_WebGLRenderContext.compressedTexImage2D(gl,target,level,_gthis.__internalFormat,width,height,0,this1);
			}
		});
		if(!hasTexture) {
			var elements = this.__size * this.__size * 4;
			var array = null;
			var vector = null;
			var view = null;
			var buffer = null;
			var len = null;
			var this1;
			if(elements != null) {
				this1 = new Uint8Array(elements);
			} else if(array != null) {
				this1 = new Uint8Array(array);
			} else if(vector != null) {
				this1 = new Uint8Array(vector.__array);
			} else if(view != null) {
				this1 = new Uint8Array(view);
			} else if(buffer != null) {
				if(len == null) {
					this1 = new Uint8Array(buffer,0);
				} else {
					this1 = new Uint8Array(buffer,0,len);
				}
			} else {
				this1 = null;
			}
			var data = this1;
			lime_graphics_WebGLRenderContext.texImage2D(gl,this.__sideToTarget(0),0,this.__internalFormat,this.__size,this.__size,0,this.__format,gl.UNSIGNED_BYTE,data);
			var elements = this.__size * this.__size * 4;
			var array = null;
			var vector = null;
			var view = null;
			var buffer = null;
			var len = null;
			var this1;
			if(elements != null) {
				this1 = new Uint8Array(elements);
			} else if(array != null) {
				this1 = new Uint8Array(array);
			} else if(vector != null) {
				this1 = new Uint8Array(vector.__array);
			} else if(view != null) {
				this1 = new Uint8Array(view);
			} else if(buffer != null) {
				if(len == null) {
					this1 = new Uint8Array(buffer,0);
				} else {
					this1 = new Uint8Array(buffer,0,len);
				}
			} else {
				this1 = null;
			}
			var data = this1;
			lime_graphics_WebGLRenderContext.texImage2D(gl,this.__sideToTarget(1),0,this.__internalFormat,this.__size,this.__size,0,this.__format,gl.UNSIGNED_BYTE,data);
			var elements = this.__size * this.__size * 4;
			var array = null;
			var vector = null;
			var view = null;
			var buffer = null;
			var len = null;
			var this1;
			if(elements != null) {
				this1 = new Uint8Array(elements);
			} else if(array != null) {
				this1 = new Uint8Array(array);
			} else if(vector != null) {
				this1 = new Uint8Array(vector.__array);
			} else if(view != null) {
				this1 = new Uint8Array(view);
			} else if(buffer != null) {
				if(len == null) {
					this1 = new Uint8Array(buffer,0);
				} else {
					this1 = new Uint8Array(buffer,0,len);
				}
			} else {
				this1 = null;
			}
			var data = this1;
			lime_graphics_WebGLRenderContext.texImage2D(gl,this.__sideToTarget(2),0,this.__internalFormat,this.__size,this.__size,0,this.__format,gl.UNSIGNED_BYTE,data);
			var elements = this.__size * this.__size * 4;
			var array = null;
			var vector = null;
			var view = null;
			var buffer = null;
			var len = null;
			var this1;
			if(elements != null) {
				this1 = new Uint8Array(elements);
			} else if(array != null) {
				this1 = new Uint8Array(array);
			} else if(vector != null) {
				this1 = new Uint8Array(vector.__array);
			} else if(view != null) {
				this1 = new Uint8Array(view);
			} else if(buffer != null) {
				if(len == null) {
					this1 = new Uint8Array(buffer,0);
				} else {
					this1 = new Uint8Array(buffer,0,len);
				}
			} else {
				this1 = null;
			}
			var data = this1;
			lime_graphics_WebGLRenderContext.texImage2D(gl,this.__sideToTarget(3),0,this.__internalFormat,this.__size,this.__size,0,this.__format,gl.UNSIGNED_BYTE,data);
			var elements = this.__size * this.__size * 4;
			var array = null;
			var vector = null;
			var view = null;
			var buffer = null;
			var len = null;
			var this1;
			if(elements != null) {
				this1 = new Uint8Array(elements);
			} else if(array != null) {
				this1 = new Uint8Array(array);
			} else if(vector != null) {
				this1 = new Uint8Array(vector.__array);
			} else if(view != null) {
				this1 = new Uint8Array(view);
			} else if(buffer != null) {
				if(len == null) {
					this1 = new Uint8Array(buffer,0);
				} else {
					this1 = new Uint8Array(buffer,0,len);
				}
			} else {
				this1 = null;
			}
			var data = this1;
			lime_graphics_WebGLRenderContext.texImage2D(gl,this.__sideToTarget(4),0,this.__internalFormat,this.__size,this.__size,0,this.__format,gl.UNSIGNED_BYTE,data);
			var elements = this.__size * this.__size * 4;
			var array = null;
			var vector = null;
			var view = null;
			var buffer = null;
			var len = null;
			var this1;
			if(elements != null) {
				this1 = new Uint8Array(elements);
			} else if(array != null) {
				this1 = new Uint8Array(array);
			} else if(vector != null) {
				this1 = new Uint8Array(vector.__array);
			} else if(view != null) {
				this1 = new Uint8Array(view);
			} else if(buffer != null) {
				if(len == null) {
					this1 = new Uint8Array(buffer,0);
				} else {
					this1 = new Uint8Array(buffer,0,len);
				}
			} else {
				this1 = null;
			}
			var data = this1;
			lime_graphics_WebGLRenderContext.texImage2D(gl,this.__sideToTarget(5),0,this.__internalFormat,this.__size,this.__size,0,this.__format,gl.UNSIGNED_BYTE,data);
		}
		this.__context.__bindGLTextureCubeMap(null);
	}
	,__class__: openfl_display3D_textures_CubeTexture
});
var openfl_display3D_textures_RectangleTexture = function(context,width,height,format,optimizeForRenderToTexture) {
	openfl_display3D_textures_TextureBase.call(this,context);
	this.__width = width;
	this.__height = height;
	this.__optimizeForRenderToTexture = optimizeForRenderToTexture;
	this.__textureTarget = this.__context.gl.TEXTURE_2D;
	this.uploadFromTypedArray(null);
	if(optimizeForRenderToTexture) {
		this.__getGLFramebuffer(true,0,0);
	}
};
$hxClasses["openfl.display3D.textures.RectangleTexture"] = openfl_display3D_textures_RectangleTexture;
openfl_display3D_textures_RectangleTexture.__name__ = "openfl.display3D.textures.RectangleTexture";
openfl_display3D_textures_RectangleTexture.__super__ = openfl_display3D_textures_TextureBase;
openfl_display3D_textures_RectangleTexture.prototype = $extend(openfl_display3D_textures_TextureBase.prototype,{
	uploadFromBitmapData: function(source) {
		if(source == null) {
			return;
		}
		var image = this.__getImage(source);
		if(image == null) {
			return;
		}
		if(image.buffer != null && image.buffer.data == null && image.buffer.get_src() != null) {
			var gl = this.__context.gl;
			this.__context.__bindGLTexture2D(this.__textureID);
			lime_graphics_WebGLRenderContext.texImage2D(gl,this.__textureTarget,0,this.__internalFormat,this.__format,gl.UNSIGNED_BYTE,image.buffer.get_src());
			this.__context.__bindGLTexture2D(null);
			return;
		}
		this.uploadFromTypedArray(image.get_data());
	}
	,uploadFromByteArray: function(data,byteArrayOffset) {
		if(byteArrayOffset == 0) {
			this.uploadFromTypedArray(data.b);
			return;
		}
		var elements = null;
		var array = null;
		var vector = null;
		var view = null;
		var buffer = openfl_utils_ByteArray.toArrayBuffer(data);
		var byteoffset = byteArrayOffset;
		var len = null;
		if(byteoffset == null) {
			byteoffset = 0;
		}
		var this1;
		if(elements != null) {
			this1 = new Uint8Array(elements);
		} else if(array != null) {
			this1 = new Uint8Array(array);
		} else if(vector != null) {
			this1 = new Uint8Array(vector.__array);
		} else if(view != null) {
			this1 = new Uint8Array(view);
		} else if(buffer != null) {
			if(len == null) {
				this1 = new Uint8Array(buffer,byteoffset);
			} else {
				this1 = new Uint8Array(buffer,byteoffset,len);
			}
		} else {
			this1 = null;
		}
		this.uploadFromTypedArray(this1);
	}
	,uploadFromTypedArray: function(data) {
		var gl = this.__context.gl;
		this.__context.__bindGLTexture2D(this.__textureID);
		lime_graphics_WebGLRenderContext.texImage2D(gl,this.__textureTarget,0,this.__internalFormat,this.__width,this.__height,0,this.__format,gl.UNSIGNED_BYTE,data);
		this.__context.__bindGLTexture2D(null);
	}
	,__setSamplerState: function(state) {
		if(openfl_display3D_textures_TextureBase.prototype.__setSamplerState.call(this,state)) {
			var gl = this.__context.gl;
			if(openfl_display3D_Context3D.__glMaxTextureMaxAnisotropy != 0) {
				var aniso;
				switch(state.filter) {
				case 0:
					aniso = 16;
					break;
				case 1:
					aniso = 2;
					break;
				case 2:
					aniso = 4;
					break;
				case 3:
					aniso = 8;
					break;
				default:
					aniso = 1;
				}
				if(aniso > openfl_display3D_Context3D.__glMaxTextureMaxAnisotropy) {
					aniso = openfl_display3D_Context3D.__glMaxTextureMaxAnisotropy;
				}
				gl.texParameterf(gl.TEXTURE_2D,openfl_display3D_Context3D.__glTextureMaxAnisotropy,aniso);
			}
			return true;
		}
		return false;
	}
	,__class__: openfl_display3D_textures_RectangleTexture
});
var openfl_display3D_textures_Texture = function(context,width,height,format,optimizeForRenderToTexture,streamingLevels) {
	openfl_display3D_textures_TextureBase.call(this,context);
	this.__width = width;
	this.__height = height;
	this.__optimizeForRenderToTexture = optimizeForRenderToTexture;
	this.__streamingLevels = streamingLevels;
	var gl = this.__context.gl;
	this.__textureTarget = gl.TEXTURE_2D;
	this.__context.__bindGLTexture2D(this.__textureID);
	lime_graphics_WebGLRenderContext.texImage2D(gl,this.__textureTarget,0,this.__internalFormat,this.__width,this.__height,0,this.__format,gl.UNSIGNED_BYTE,null);
	this.__context.__bindGLTexture2D(null);
	if(optimizeForRenderToTexture) {
		this.__getGLFramebuffer(true,0,0);
	}
};
$hxClasses["openfl.display3D.textures.Texture"] = openfl_display3D_textures_Texture;
openfl_display3D_textures_Texture.__name__ = "openfl.display3D.textures.Texture";
openfl_display3D_textures_Texture.__super__ = openfl_display3D_textures_TextureBase;
openfl_display3D_textures_Texture.prototype = $extend(openfl_display3D_textures_TextureBase.prototype,{
	uploadCompressedTextureFromByteArray: function(data,byteArrayOffset,async) {
		if(async == null) {
			async = false;
		}
		var _gthis = this;
		if(!async) {
			this.__uploadCompressedTextureFromByteArray(data,byteArrayOffset);
		} else {
			haxe_Timer.delay(function() {
				_gthis.__uploadCompressedTextureFromByteArray(data,byteArrayOffset);
				var event = null;
				event = new openfl_events_Event("textureReady");
				_gthis.dispatchEvent(event);
			},1);
		}
	}
	,uploadFromBitmapData: function(source,miplevel,generateMipmap) {
		if(generateMipmap == null) {
			generateMipmap = false;
		}
		if(miplevel == null) {
			miplevel = 0;
		}
		if(source == null) {
			return;
		}
		var width = this.__width >> miplevel;
		var height = this.__height >> miplevel;
		if(width == 0 && height == 0) {
			return;
		}
		if(width == 0) {
			width = 1;
		}
		if(height == 0) {
			height = 1;
		}
		if(source.width != width || source.height != height) {
			var copy = new openfl_display_BitmapData(width,height,true,0);
			copy.draw(source);
			source = copy;
		}
		var image = this.__getImage(source);
		if(image == null) {
			return;
		}
		if(miplevel == 0 && image.buffer != null && image.buffer.data == null && image.buffer.get_src() != null) {
			var gl = this.__context.gl;
			var width = this.__width >> miplevel;
			var height = this.__height >> miplevel;
			if(width == 0 && height == 0) {
				return;
			}
			if(width == 0) {
				width = 1;
			}
			if(height == 0) {
				height = 1;
			}
			this.__context.__bindGLTexture2D(this.__textureID);
			lime_graphics_WebGLRenderContext.texImage2D(gl,this.__textureTarget,miplevel,this.__internalFormat,this.__format,gl.UNSIGNED_BYTE,image.buffer.get_src());
			this.__context.__bindGLTexture2D(null);
			return;
		}
		this.uploadFromTypedArray(image.get_data(),miplevel);
	}
	,uploadFromByteArray: function(data,byteArrayOffset,miplevel) {
		if(miplevel == null) {
			miplevel = 0;
		}
		if(byteArrayOffset == 0) {
			this.uploadFromTypedArray(data.b,miplevel);
			return;
		}
		var elements = null;
		var array = null;
		var vector = null;
		var view = null;
		var buffer = openfl_utils_ByteArray.toArrayBuffer(data);
		var byteoffset = byteArrayOffset;
		var len = null;
		if(byteoffset == null) {
			byteoffset = 0;
		}
		var this1;
		if(elements != null) {
			this1 = new Uint8Array(elements);
		} else if(array != null) {
			this1 = new Uint8Array(array);
		} else if(vector != null) {
			this1 = new Uint8Array(vector.__array);
		} else if(view != null) {
			this1 = new Uint8Array(view);
		} else if(buffer != null) {
			if(len == null) {
				this1 = new Uint8Array(buffer,byteoffset);
			} else {
				this1 = new Uint8Array(buffer,byteoffset,len);
			}
		} else {
			this1 = null;
		}
		this.uploadFromTypedArray(this1,miplevel);
	}
	,uploadFromTypedArray: function(data,miplevel) {
		if(miplevel == null) {
			miplevel = 0;
		}
		if(data == null) {
			return;
		}
		var gl = this.__context.gl;
		var width = this.__width >> miplevel;
		var height = this.__height >> miplevel;
		if(width == 0 && height == 0) {
			return;
		}
		if(width == 0) {
			width = 1;
		}
		if(height == 0) {
			height = 1;
		}
		this.__context.__bindGLTexture2D(this.__textureID);
		lime_graphics_WebGLRenderContext.texImage2D(gl,this.__textureTarget,miplevel,this.__internalFormat,width,height,0,this.__format,gl.UNSIGNED_BYTE,data);
		this.__context.__bindGLTexture2D(null);
	}
	,__setSamplerState: function(state) {
		if(openfl_display3D_textures_TextureBase.prototype.__setSamplerState.call(this,state)) {
			var gl = this.__context.gl;
			if(state.mipfilter != 2 && !this.__samplerState.mipmapGenerated) {
				gl.generateMipmap(gl.TEXTURE_2D);
				this.__samplerState.mipmapGenerated = true;
			}
			if(openfl_display3D_Context3D.__glMaxTextureMaxAnisotropy != 0) {
				var aniso;
				switch(state.filter) {
				case 0:
					aniso = 16;
					break;
				case 1:
					aniso = 2;
					break;
				case 2:
					aniso = 4;
					break;
				case 3:
					aniso = 8;
					break;
				default:
					aniso = 1;
				}
				if(aniso > openfl_display3D_Context3D.__glMaxTextureMaxAnisotropy) {
					aniso = openfl_display3D_Context3D.__glMaxTextureMaxAnisotropy;
				}
				gl.texParameterf(gl.TEXTURE_2D,openfl_display3D_Context3D.__glTextureMaxAnisotropy,aniso);
			}
			return true;
		}
		return false;
	}
	,__uploadCompressedTextureFromByteArray: function(data,byteArrayOffset) {
		var _gthis = this;
		var reader = new openfl__$internal_formats_atf_ATFReader(data,byteArrayOffset);
		var alpha = reader.readHeader(this.__width,this.__height,false);
		var context = this.__context;
		var gl = context.gl;
		this.__context.__bindGLTexture2D(this.__textureID);
		var hasTexture = false;
		reader.readTextures(function(target,level,gpuFormat,width,height,blockLength,bytes) {
			var format = alpha ? openfl_display3D_textures_TextureBase.__compressedFormatsAlpha.h[gpuFormat] : openfl_display3D_textures_TextureBase.__compressedFormats.h[gpuFormat];
			if(format == 0) {
				return;
			}
			hasTexture = true;
			_gthis.__format = format;
			_gthis.__internalFormat = format;
			if(alpha && gpuFormat == 2) {
				var size = blockLength / 2 | 0;
				var elements = null;
				var array = null;
				var vector = null;
				var view = null;
				var buffer = bytes.b.buffer;
				var byteoffset = 0;
				if(byteoffset == null) {
					byteoffset = 0;
				}
				var this1;
				if(elements != null) {
					this1 = new Uint8Array(elements);
				} else if(array != null) {
					this1 = new Uint8Array(array);
				} else if(vector != null) {
					this1 = new Uint8Array(vector.__array);
				} else if(view != null) {
					this1 = new Uint8Array(view);
				} else if(buffer != null) {
					if(size == null) {
						this1 = new Uint8Array(buffer,byteoffset);
					} else {
						this1 = new Uint8Array(buffer,byteoffset,size);
					}
				} else {
					this1 = null;
				}
				lime_graphics_WebGLRenderContext.compressedTexImage2D(gl,_gthis.__textureTarget,level,_gthis.__internalFormat,width,height,0,this1);
				var alphaTexture = new openfl_display3D_textures_Texture(_gthis.__context,_gthis.__width,_gthis.__height,3,_gthis.__optimizeForRenderToTexture,_gthis.__streamingLevels);
				alphaTexture.__format = format;
				alphaTexture.__internalFormat = format;
				_gthis.__context.__bindGLTexture2D(alphaTexture.__textureID);
				var elements = null;
				var array = null;
				var vector = null;
				var view = null;
				var buffer = bytes.b.buffer;
				var byteoffset = size;
				if(byteoffset == null) {
					byteoffset = 0;
				}
				var this1;
				if(elements != null) {
					this1 = new Uint8Array(elements);
				} else if(array != null) {
					this1 = new Uint8Array(array);
				} else if(vector != null) {
					this1 = new Uint8Array(vector.__array);
				} else if(view != null) {
					this1 = new Uint8Array(view);
				} else if(buffer != null) {
					if(size == null) {
						this1 = new Uint8Array(buffer,byteoffset);
					} else {
						this1 = new Uint8Array(buffer,byteoffset,size);
					}
				} else {
					this1 = null;
				}
				lime_graphics_WebGLRenderContext.compressedTexImage2D(gl,alphaTexture.__textureTarget,level,alphaTexture.__internalFormat,width,height,0,this1);
				_gthis.__alphaTexture = alphaTexture;
			} else {
				var elements = null;
				var array = null;
				var vector = null;
				var view = null;
				var buffer = bytes.b.buffer;
				var byteoffset = 0;
				if(byteoffset == null) {
					byteoffset = 0;
				}
				var this1;
				if(elements != null) {
					this1 = new Uint8Array(elements);
				} else if(array != null) {
					this1 = new Uint8Array(array);
				} else if(vector != null) {
					this1 = new Uint8Array(vector.__array);
				} else if(view != null) {
					this1 = new Uint8Array(view);
				} else if(buffer != null) {
					if(blockLength == null) {
						this1 = new Uint8Array(buffer,byteoffset);
					} else {
						this1 = new Uint8Array(buffer,byteoffset,blockLength);
					}
				} else {
					this1 = null;
				}
				lime_graphics_WebGLRenderContext.compressedTexImage2D(gl,_gthis.__textureTarget,level,_gthis.__internalFormat,width,height,0,this1);
			}
		});
		if(!hasTexture) {
			var elements = this.__width * this.__height * 4;
			var array = null;
			var vector = null;
			var view = null;
			var buffer = null;
			var len = null;
			var this1;
			if(elements != null) {
				this1 = new Uint8Array(elements);
			} else if(array != null) {
				this1 = new Uint8Array(array);
			} else if(vector != null) {
				this1 = new Uint8Array(vector.__array);
			} else if(view != null) {
				this1 = new Uint8Array(view);
			} else if(buffer != null) {
				if(len == null) {
					this1 = new Uint8Array(buffer,0);
				} else {
					this1 = new Uint8Array(buffer,0,len);
				}
			} else {
				this1 = null;
			}
			var data = this1;
			lime_graphics_WebGLRenderContext.texImage2D(gl,this.__textureTarget,0,this.__internalFormat,this.__width,this.__height,0,this.__format,gl.UNSIGNED_BYTE,data);
		}
		this.__context.__bindGLTexture2D(null);
	}
	,__class__: openfl_display3D_textures_Texture
});
var openfl_display3D_textures_VideoTexture = function(context) {
	openfl_display3D_textures_TextureBase.call(this,context);
	this.__textureTarget = this.__context.gl.TEXTURE_2D;
};
$hxClasses["openfl.display3D.textures.VideoTexture"] = openfl_display3D_textures_VideoTexture;
openfl_display3D_textures_VideoTexture.__name__ = "openfl.display3D.textures.VideoTexture";
openfl_display3D_textures_VideoTexture.__super__ = openfl_display3D_textures_TextureBase;
openfl_display3D_textures_VideoTexture.prototype = $extend(openfl_display3D_textures_TextureBase.prototype,{
	videoHeight: null
	,videoWidth: null
	,__netStream: null
	,attachNetStream: function(netStream) {
		var _gthis = this;
		if(this.__netStream != null) {
			this.__netStream.__video.removeEventListener("canplay",$bind(this,this.__onCanPlay),false);
		}
		this.__netStream = netStream;
		if(this.__netStream.__video.readyState == 4) {
			haxe_Timer.delay(function() {
				_gthis.__textureReady();
			},0);
		} else {
			this.__netStream.__video.addEventListener("canplay",$bind(this,this.__onCanPlay),false);
		}
	}
	,__onCanPlay: function(_) {
		this.__textureReady();
	}
	,__getTexture: function() {
		if((!this.__netStream.__video.paused || this.__netStream.get___seeking()) && this.__netStream.__video.readyState > 0) {
			this.__netStream.set___seeking(false);
			var gl = this.__context.gl;
			this.__context.__bindGLTexture2D(this.__textureID);
			lime_graphics_WebGLRenderContext.texImage2D(gl,gl.TEXTURE_2D,0,gl.RGBA,gl.RGBA,gl.UNSIGNED_BYTE,this.__netStream.__video);
		}
		return this.__textureID;
	}
	,__textureReady: function() {
		this.videoWidth = this.__netStream.__video.videoWidth;
		this.videoHeight = this.__netStream.__video.videoHeight;
		var event = null;
		event = new openfl_events_Event("textureReady");
		this.dispatchEvent(event);
	}
	,__class__: openfl_display3D_textures_VideoTexture
});
var openfl_errors_Error = function(message,id) {
	if(id == null) {
		id = 0;
	}
	if(message == null) {
		message = "";
	}
	this.message = message;
	this.errorID = id;
	this.name = "Error";
};
$hxClasses["openfl.errors.Error"] = openfl_errors_Error;
openfl_errors_Error.__name__ = "openfl.errors.Error";
openfl_errors_Error.prototype = {
	errorID: null
	,message: null
	,name: null
	,getStackTrace: function() {
		return haxe_CallStack.toString(haxe_CallStack.exceptionStack());
	}
	,toString: function() {
		if(this.message != null) {
			return this.message;
		} else {
			return "Error";
		}
	}
	,__class__: openfl_errors_Error
};
var openfl_errors_ArgumentError = function(message) {
	if(message == null) {
		message = "";
	}
	openfl_errors_Error.call(this,message);
	this.name = "ArgumentError";
};
$hxClasses["openfl.errors.ArgumentError"] = openfl_errors_ArgumentError;
openfl_errors_ArgumentError.__name__ = "openfl.errors.ArgumentError";
openfl_errors_ArgumentError.__super__ = openfl_errors_Error;
openfl_errors_ArgumentError.prototype = $extend(openfl_errors_Error.prototype,{
	__class__: openfl_errors_ArgumentError
});
var openfl_errors_IOError = function(message) {
	if(message == null) {
		message = "";
	}
	openfl_errors_Error.call(this,message);
	this.name = "IOError";
};
$hxClasses["openfl.errors.IOError"] = openfl_errors_IOError;
openfl_errors_IOError.__name__ = "openfl.errors.IOError";
openfl_errors_IOError.__super__ = openfl_errors_Error;
openfl_errors_IOError.prototype = $extend(openfl_errors_Error.prototype,{
	__class__: openfl_errors_IOError
});
var openfl_errors_EOFError = function(message,id) {
	if(id == null) {
		id = 0;
	}
	openfl_errors_IOError.call(this,"End of file was encountered");
	this.name = "EOFError";
	this.errorID = 2030;
};
$hxClasses["openfl.errors.EOFError"] = openfl_errors_EOFError;
openfl_errors_EOFError.__name__ = "openfl.errors.EOFError";
openfl_errors_EOFError.__super__ = openfl_errors_IOError;
openfl_errors_EOFError.prototype = $extend(openfl_errors_IOError.prototype,{
	__class__: openfl_errors_EOFError
});
var openfl_errors_IllegalOperationError = function(message) {
	if(message == null) {
		message = "";
	}
	openfl_errors_Error.call(this,message,0);
	this.name = "IllegalOperationError";
};
$hxClasses["openfl.errors.IllegalOperationError"] = openfl_errors_IllegalOperationError;
openfl_errors_IllegalOperationError.__name__ = "openfl.errors.IllegalOperationError";
openfl_errors_IllegalOperationError.__super__ = openfl_errors_Error;
openfl_errors_IllegalOperationError.prototype = $extend(openfl_errors_Error.prototype,{
	__class__: openfl_errors_IllegalOperationError
});
var openfl_errors_RangeError = function(message) {
	if(message == null) {
		message = "";
	}
	openfl_errors_Error.call(this,message,0);
	this.name = "RangeError";
};
$hxClasses["openfl.errors.RangeError"] = openfl_errors_RangeError;
openfl_errors_RangeError.__name__ = "openfl.errors.RangeError";
openfl_errors_RangeError.__super__ = openfl_errors_Error;
openfl_errors_RangeError.prototype = $extend(openfl_errors_Error.prototype,{
	__class__: openfl_errors_RangeError
});
var openfl_errors_TypeError = function(message) {
	if(message == null) {
		message = "";
	}
	openfl_errors_Error.call(this,message,0);
	this.name = "TypeError";
};
$hxClasses["openfl.errors.TypeError"] = openfl_errors_TypeError;
openfl_errors_TypeError.__name__ = "openfl.errors.TypeError";
openfl_errors_TypeError.__super__ = openfl_errors_Error;
openfl_errors_TypeError.prototype = $extend(openfl_errors_Error.prototype,{
	__class__: openfl_errors_TypeError
});
var openfl_events_Event = function(type,bubbles,cancelable) {
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	this.type = type;
	this.bubbles = bubbles;
	this.cancelable = cancelable;
	this.eventPhase = 2;
};
$hxClasses["openfl.events.Event"] = openfl_events_Event;
openfl_events_Event.__name__ = "openfl.events.Event";
openfl_events_Event.prototype = {
	bubbles: null
	,cancelable: null
	,currentTarget: null
	,eventPhase: null
	,target: null
	,type: null
	,__isCanceled: null
	,__isCanceledNow: null
	,__preventDefault: null
	,clone: function() {
		var event = new openfl_events_Event(this.type,this.bubbles,this.cancelable);
		event.eventPhase = this.eventPhase;
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		return event;
	}
	,formatToString: function(className,p1,p2,p3,p4,p5) {
		var parameters = [];
		if(p1 != null) {
			parameters.push(p1);
		}
		if(p2 != null) {
			parameters.push(p2);
		}
		if(p3 != null) {
			parameters.push(p3);
		}
		if(p4 != null) {
			parameters.push(p4);
		}
		if(p5 != null) {
			parameters.push(p5);
		}
		return $bind(this,this.__formatToString).apply(this,[className,parameters]);
	}
	,isDefaultPrevented: function() {
		return this.__preventDefault;
	}
	,preventDefault: function() {
		if(this.cancelable) {
			this.__preventDefault = true;
		}
	}
	,stopImmediatePropagation: function() {
		this.__isCanceled = true;
		this.__isCanceledNow = true;
	}
	,stopPropagation: function() {
		this.__isCanceled = true;
	}
	,toString: function() {
		return this.__formatToString("Event",["type","bubbles","cancelable"]);
	}
	,__formatToString: function(className,parameters) {
		var output = "[" + className;
		var arg = null;
		var _g = 0;
		while(_g < parameters.length) {
			var param = parameters[_g];
			++_g;
			arg = Reflect.field(this,param);
			if(typeof(arg) == "string") {
				output += " " + param + "=\"" + Std.string(arg) + "\"";
			} else {
				output += " " + param + "=" + Std.string(arg);
			}
		}
		output += "]";
		return output;
	}
	,__init: function() {
		this.target = null;
		this.currentTarget = null;
		this.bubbles = false;
		this.cancelable = false;
		this.eventPhase = 2;
		this.__isCanceled = false;
		this.__isCanceledNow = false;
		this.__preventDefault = false;
	}
	,__class__: openfl_events_Event
};
var openfl_events_AccelerometerEvent = function(type,bubbles,cancelable,timestamp,accelerationX,accelerationY,accelerationZ) {
	if(accelerationZ == null) {
		accelerationZ = 0;
	}
	if(accelerationY == null) {
		accelerationY = 0;
	}
	if(accelerationX == null) {
		accelerationX = 0;
	}
	if(timestamp == null) {
		timestamp = 0;
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.timestamp = timestamp;
	this.accelerationX = accelerationX;
	this.accelerationY = accelerationY;
	this.accelerationZ = accelerationZ;
};
$hxClasses["openfl.events.AccelerometerEvent"] = openfl_events_AccelerometerEvent;
openfl_events_AccelerometerEvent.__name__ = "openfl.events.AccelerometerEvent";
openfl_events_AccelerometerEvent.__super__ = openfl_events_Event;
openfl_events_AccelerometerEvent.prototype = $extend(openfl_events_Event.prototype,{
	accelerationX: null
	,accelerationY: null
	,accelerationZ: null
	,timestamp: null
	,clone: function() {
		var event = new openfl_events_AccelerometerEvent(this.type,this.bubbles,this.cancelable,this.timestamp,this.accelerationX,this.accelerationY,this.accelerationZ);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("AccelerometerEvent",["type","bubbles","cancelable","timestamp","accelerationX","accelerationY","accelerationZ"]);
	}
	,__init: function() {
		openfl_events_Event.prototype.__init.call(this);
		this.timestamp = 0;
		this.accelerationX = 0;
		this.accelerationY = 0;
		this.accelerationZ = 0;
	}
	,__class__: openfl_events_AccelerometerEvent
});
var openfl_events_ActivityEvent = function(type,bubbles,cancelable,activating) {
	if(activating == null) {
		activating = false;
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.activating = activating;
};
$hxClasses["openfl.events.ActivityEvent"] = openfl_events_ActivityEvent;
openfl_events_ActivityEvent.__name__ = "openfl.events.ActivityEvent";
openfl_events_ActivityEvent.__super__ = openfl_events_Event;
openfl_events_ActivityEvent.prototype = $extend(openfl_events_Event.prototype,{
	activating: null
	,clone: function() {
		var event = new openfl_events_ActivityEvent(this.type,this.bubbles,this.cancelable,this.activating);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("ActivityEvent",["type","bubbles","cancelable","activating"]);
	}
	,__init: function() {
		openfl_events_Event.prototype.__init.call(this);
		this.activating = false;
	}
	,__class__: openfl_events_ActivityEvent
});
var openfl_events_TextEvent = function(type,bubbles,cancelable,text) {
	if(text == null) {
		text = "";
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.text = text;
};
$hxClasses["openfl.events.TextEvent"] = openfl_events_TextEvent;
openfl_events_TextEvent.__name__ = "openfl.events.TextEvent";
openfl_events_TextEvent.__super__ = openfl_events_Event;
openfl_events_TextEvent.prototype = $extend(openfl_events_Event.prototype,{
	text: null
	,clone: function() {
		var event = new openfl_events_TextEvent(this.type,this.bubbles,this.cancelable,this.text);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("TextEvent",["type","bubbles","cancelable","text"]);
	}
	,__init: function() {
		openfl_events_Event.prototype.__init.call(this);
		this.text = "";
	}
	,__class__: openfl_events_TextEvent
});
var openfl_events_ErrorEvent = function(type,bubbles,cancelable,text,id) {
	if(id == null) {
		id = 0;
	}
	if(text == null) {
		text = "";
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	openfl_events_TextEvent.call(this,type,bubbles,cancelable,text);
	this.errorID = id;
};
$hxClasses["openfl.events.ErrorEvent"] = openfl_events_ErrorEvent;
openfl_events_ErrorEvent.__name__ = "openfl.events.ErrorEvent";
openfl_events_ErrorEvent.__super__ = openfl_events_TextEvent;
openfl_events_ErrorEvent.prototype = $extend(openfl_events_TextEvent.prototype,{
	errorID: null
	,clone: function() {
		var event = new openfl_events_ErrorEvent(this.type,this.bubbles,this.cancelable,this.text,this.errorID);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("ErrorEvent",["type","bubbles","cancelable","text","errorID"]);
	}
	,__init: function() {
		openfl_events_TextEvent.prototype.__init.call(this);
		this.errorID = 0;
	}
	,__class__: openfl_events_ErrorEvent
});
var openfl_events__$EventDispatcher_DispatchIterator = function(list) {
	this.active = false;
	this.reset(list);
};
$hxClasses["openfl.events._EventDispatcher.DispatchIterator"] = openfl_events__$EventDispatcher_DispatchIterator;
openfl_events__$EventDispatcher_DispatchIterator.__name__ = "openfl.events._EventDispatcher.DispatchIterator";
openfl_events__$EventDispatcher_DispatchIterator.prototype = {
	active: null
	,index: null
	,isCopy: null
	,list: null
	,copy: function() {
		if(!this.isCopy) {
			this.list = this.list.slice();
			this.isCopy = true;
		}
	}
	,hasNext: function() {
		return this.index < this.list.length;
	}
	,next: function() {
		return this.list[this.index++];
	}
	,remove: function(listener,listIndex) {
		if(this.active) {
			if(!this.isCopy) {
				if(listIndex < this.index) {
					this.index--;
				}
			} else {
				var _g = this.index;
				var _g1 = this.list.length;
				while(_g < _g1) {
					var i = _g++;
					if(this.list[i] == listener) {
						this.list.splice(i,1);
						break;
					}
				}
			}
		}
	}
	,reset: function(list) {
		this.list = list;
		this.isCopy = false;
		this.index = 0;
	}
	,start: function() {
		this.active = true;
	}
	,stop: function() {
		this.active = false;
	}
	,__class__: openfl_events__$EventDispatcher_DispatchIterator
};
var openfl_events__$EventDispatcher_Listener = function(callback,useCapture,priority) {
	this.callback = callback;
	this.useCapture = useCapture;
	this.priority = priority;
};
$hxClasses["openfl.events._EventDispatcher.Listener"] = openfl_events__$EventDispatcher_Listener;
openfl_events__$EventDispatcher_Listener.__name__ = "openfl.events._EventDispatcher.Listener";
openfl_events__$EventDispatcher_Listener.prototype = {
	callback: null
	,priority: null
	,useCapture: null
	,match: function(callback,useCapture) {
		if(Reflect.compareMethods(this.callback,callback)) {
			return this.useCapture == useCapture;
		} else {
			return false;
		}
	}
	,__class__: openfl_events__$EventDispatcher_Listener
};
var openfl_events_EventType = {};
openfl_events_EventType.equals = function(a,b) {
	return a == b;
};
openfl_events_EventType.notEquals = function(a,b) {
	return a != b;
};
var openfl_events_FocusEvent = function(type,bubbles,cancelable,relatedObject,shiftKey,keyCode) {
	if(keyCode == null) {
		keyCode = 0;
	}
	if(shiftKey == null) {
		shiftKey = false;
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.keyCode = keyCode;
	this.shiftKey = shiftKey;
	this.relatedObject = relatedObject;
};
$hxClasses["openfl.events.FocusEvent"] = openfl_events_FocusEvent;
openfl_events_FocusEvent.__name__ = "openfl.events.FocusEvent";
openfl_events_FocusEvent.__super__ = openfl_events_Event;
openfl_events_FocusEvent.prototype = $extend(openfl_events_Event.prototype,{
	keyCode: null
	,relatedObject: null
	,shiftKey: null
	,clone: function() {
		var event = new openfl_events_FocusEvent(this.type,this.bubbles,this.cancelable,this.relatedObject,this.shiftKey,this.keyCode);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("FocusEvent",["type","bubbles","cancelable","relatedObject","shiftKey","keyCode"]);
	}
	,__init: function() {
		openfl_events_Event.prototype.__init.call(this);
		this.keyCode = 0;
		this.shiftKey = false;
		this.relatedObject = null;
	}
	,__class__: openfl_events_FocusEvent
});
var openfl_events_FullScreenEvent = function(type,bubbles,cancelable,fullScreen,interactive) {
	if(interactive == null) {
		interactive = false;
	}
	if(fullScreen == null) {
		fullScreen = false;
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	openfl_events_ActivityEvent.call(this,type,bubbles,cancelable);
	this.fullScreen = fullScreen;
	this.interactive = interactive;
};
$hxClasses["openfl.events.FullScreenEvent"] = openfl_events_FullScreenEvent;
openfl_events_FullScreenEvent.__name__ = "openfl.events.FullScreenEvent";
openfl_events_FullScreenEvent.__super__ = openfl_events_ActivityEvent;
openfl_events_FullScreenEvent.prototype = $extend(openfl_events_ActivityEvent.prototype,{
	fullScreen: null
	,interactive: null
	,clone: function() {
		var event = new openfl_events_FullScreenEvent(this.type,this.bubbles,this.cancelable,this.fullScreen,this.interactive);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("FullscreenEvent",["type","bubbles","cancelable","fullscreen","interactive"]);
	}
	,__init: function() {
		openfl_events_ActivityEvent.prototype.__init.call(this);
		this.fullScreen = false;
		this.interactive = false;
	}
	,__class__: openfl_events_FullScreenEvent
});
var openfl_events_GameInputEvent = function(type,bubbles,cancelable,device) {
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = true;
	}
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.device = device;
};
$hxClasses["openfl.events.GameInputEvent"] = openfl_events_GameInputEvent;
openfl_events_GameInputEvent.__name__ = "openfl.events.GameInputEvent";
openfl_events_GameInputEvent.__super__ = openfl_events_Event;
openfl_events_GameInputEvent.prototype = $extend(openfl_events_Event.prototype,{
	device: null
	,clone: function() {
		var event = new openfl_events_GameInputEvent(this.type,this.bubbles,this.cancelable,this.device);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("GameInputEvent",["type","bubbles","cancelable","device"]);
	}
	,__init: function() {
		openfl_events_Event.prototype.__init.call(this);
		this.device = null;
	}
	,__class__: openfl_events_GameInputEvent
});
var openfl_events_HTTPStatusEvent = function(type,bubbles,cancelable,status,redirected) {
	if(redirected == null) {
		redirected = false;
	}
	if(status == null) {
		status = 0;
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	this.status = status;
	this.redirected = redirected;
	openfl_events_Event.call(this,type,bubbles,cancelable);
};
$hxClasses["openfl.events.HTTPStatusEvent"] = openfl_events_HTTPStatusEvent;
openfl_events_HTTPStatusEvent.__name__ = "openfl.events.HTTPStatusEvent";
openfl_events_HTTPStatusEvent.__super__ = openfl_events_Event;
openfl_events_HTTPStatusEvent.prototype = $extend(openfl_events_Event.prototype,{
	redirected: null
	,responseHeaders: null
	,responseURL: null
	,status: null
	,clone: function() {
		var event = new openfl_events_HTTPStatusEvent(this.type,this.bubbles,this.cancelable,this.status,this.redirected);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("HTTPStatusEvent",["type","bubbles","cancelable","status","redirected"]);
	}
	,__init: function() {
		openfl_events_Event.prototype.__init.call(this);
		this.status = 0;
		this.redirected = false;
	}
	,__class__: openfl_events_HTTPStatusEvent
});
var openfl_events_IOErrorEvent = function(type,bubbles,cancelable,text,id) {
	if(id == null) {
		id = 0;
	}
	if(text == null) {
		text = "";
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = true;
	}
	openfl_events_ErrorEvent.call(this,type,bubbles,cancelable,text,id);
};
$hxClasses["openfl.events.IOErrorEvent"] = openfl_events_IOErrorEvent;
openfl_events_IOErrorEvent.__name__ = "openfl.events.IOErrorEvent";
openfl_events_IOErrorEvent.__super__ = openfl_events_ErrorEvent;
openfl_events_IOErrorEvent.prototype = $extend(openfl_events_ErrorEvent.prototype,{
	clone: function() {
		var event = new openfl_events_IOErrorEvent(this.type,this.bubbles,this.cancelable,this.text,this.errorID);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("IOErrorEvent",["type","bubbles","cancelable","text","errorID"]);
	}
	,__class__: openfl_events_IOErrorEvent
});
var openfl_events_KeyboardEvent = function(type,bubbles,cancelable,charCodeValue,keyCodeValue,keyLocationValue,ctrlKeyValue,altKeyValue,shiftKeyValue,controlKeyValue,commandKeyValue) {
	if(commandKeyValue == null) {
		commandKeyValue = false;
	}
	if(controlKeyValue == null) {
		controlKeyValue = false;
	}
	if(shiftKeyValue == null) {
		shiftKeyValue = false;
	}
	if(altKeyValue == null) {
		altKeyValue = false;
	}
	if(ctrlKeyValue == null) {
		ctrlKeyValue = false;
	}
	if(keyCodeValue == null) {
		keyCodeValue = 0;
	}
	if(charCodeValue == null) {
		charCodeValue = 0;
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.charCode = charCodeValue;
	this.keyCode = keyCodeValue;
	this.keyLocation = keyLocationValue != null ? keyLocationValue : 0;
	this.ctrlKey = ctrlKeyValue;
	this.altKey = altKeyValue;
	this.shiftKey = shiftKeyValue;
	this.controlKey = controlKeyValue;
	this.commandKey = commandKeyValue;
};
$hxClasses["openfl.events.KeyboardEvent"] = openfl_events_KeyboardEvent;
openfl_events_KeyboardEvent.__name__ = "openfl.events.KeyboardEvent";
openfl_events_KeyboardEvent.__super__ = openfl_events_Event;
openfl_events_KeyboardEvent.prototype = $extend(openfl_events_Event.prototype,{
	altKey: null
	,charCode: null
	,commandKey: null
	,controlKey: null
	,ctrlKey: null
	,keyCode: null
	,keyLocation: null
	,shiftKey: null
	,clone: function() {
		var event = new openfl_events_KeyboardEvent(this.type,this.bubbles,this.cancelable,this.charCode,this.keyCode,this.keyLocation,this.ctrlKey,this.altKey,this.shiftKey,this.controlKey,this.commandKey);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("KeyboardEvent",["type","bubbles","cancelable","charCode","keyCode","keyLocation","ctrlKey","altKey","shiftKey"]);
	}
	,__init: function() {
		openfl_events_Event.prototype.__init.call(this);
		this.charCode = 0;
		this.keyCode = 0;
		this.keyLocation = 0;
		this.ctrlKey = false;
		this.altKey = false;
		this.shiftKey = false;
		this.controlKey = false;
		this.commandKey = false;
	}
	,__class__: openfl_events_KeyboardEvent
});
var openfl_events_MouseEvent = function(type,bubbles,cancelable,localX,localY,relatedObject,ctrlKey,altKey,shiftKey,buttonDown,delta,commandKey,clickCount) {
	if(clickCount == null) {
		clickCount = 0;
	}
	if(commandKey == null) {
		commandKey = false;
	}
	if(delta == null) {
		delta = 0;
	}
	if(buttonDown == null) {
		buttonDown = false;
	}
	if(shiftKey == null) {
		shiftKey = false;
	}
	if(altKey == null) {
		altKey = false;
	}
	if(ctrlKey == null) {
		ctrlKey = false;
	}
	if(localY == null) {
		localY = 0;
	}
	if(localX == null) {
		localX = 0;
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = true;
	}
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.shiftKey = shiftKey;
	this.altKey = altKey;
	this.ctrlKey = ctrlKey;
	this.bubbles = bubbles;
	this.relatedObject = relatedObject;
	this.delta = delta;
	this.localX = localX;
	this.localY = localY;
	this.buttonDown = buttonDown;
	this.commandKey = commandKey;
	this.clickCount = clickCount;
	this.isRelatedObjectInaccessible = false;
	this.stageX = NaN;
	this.stageY = NaN;
};
$hxClasses["openfl.events.MouseEvent"] = openfl_events_MouseEvent;
openfl_events_MouseEvent.__name__ = "openfl.events.MouseEvent";
openfl_events_MouseEvent.__create = function(type,button,stageX,stageY,local,target,delta) {
	if(delta == null) {
		delta = 0;
	}
	var event = new openfl_events_MouseEvent(type,true,false,local.x,local.y,null,openfl_events_MouseEvent.__ctrlKey,openfl_events_MouseEvent.__altKey,openfl_events_MouseEvent.__shiftKey,openfl_events_MouseEvent.__buttonDown,delta,openfl_events_MouseEvent.__commandKey);
	event.stageX = stageX;
	event.stageY = stageY;
	event.target = target;
	return event;
};
openfl_events_MouseEvent.__super__ = openfl_events_Event;
openfl_events_MouseEvent.prototype = $extend(openfl_events_Event.prototype,{
	altKey: null
	,buttonDown: null
	,commandKey: null
	,clickCount: null
	,ctrlKey: null
	,delta: null
	,isRelatedObjectInaccessible: null
	,localX: null
	,localY: null
	,relatedObject: null
	,shiftKey: null
	,stageX: null
	,stageY: null
	,clone: function() {
		var event = new openfl_events_MouseEvent(this.type,this.bubbles,this.cancelable,this.localX,this.localY,this.relatedObject,this.ctrlKey,this.altKey,this.shiftKey,this.buttonDown,this.delta,this.commandKey,this.clickCount);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("MouseEvent",["type","bubbles","cancelable","localX","localY","relatedObject","ctrlKey","altKey","shiftKey","buttonDown","delta"]);
	}
	,updateAfterEvent: function() {
	}
	,__init: function() {
		openfl_events_Event.prototype.__init.call(this);
		this.shiftKey = false;
		this.altKey = false;
		this.ctrlKey = false;
		this.bubbles = false;
		this.relatedObject = null;
		this.delta = 0;
		this.localX = 0;
		this.localY = 0;
		this.buttonDown = false;
		this.commandKey = false;
		this.clickCount = 0;
		this.isRelatedObjectInaccessible = false;
		this.stageX = NaN;
		this.stageY = NaN;
	}
	,__class__: openfl_events_MouseEvent
});
var openfl_events_NetStatusEvent = function(type,bubbles,cancelable,info) {
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	this.info = info;
	openfl_events_Event.call(this,type,bubbles,cancelable);
};
$hxClasses["openfl.events.NetStatusEvent"] = openfl_events_NetStatusEvent;
openfl_events_NetStatusEvent.__name__ = "openfl.events.NetStatusEvent";
openfl_events_NetStatusEvent.__super__ = openfl_events_Event;
openfl_events_NetStatusEvent.prototype = $extend(openfl_events_Event.prototype,{
	info: null
	,clone: function() {
		var event = new openfl_events_NetStatusEvent(this.type,this.bubbles,this.cancelable,this.info);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("NetStatusEvent",["type","bubbles","cancelable","info"]);
	}
	,__init: function() {
		openfl_events_Event.prototype.__init.call(this);
		this.info = null;
	}
	,__class__: openfl_events_NetStatusEvent
});
var openfl_events_ProgressEvent = function(type,bubbles,cancelable,bytesLoaded,bytesTotal) {
	if(bytesTotal == null) {
		bytesTotal = 0;
	}
	if(bytesLoaded == null) {
		bytesLoaded = 0;
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.bytesLoaded = bytesLoaded;
	this.bytesTotal = bytesTotal;
};
$hxClasses["openfl.events.ProgressEvent"] = openfl_events_ProgressEvent;
openfl_events_ProgressEvent.__name__ = "openfl.events.ProgressEvent";
openfl_events_ProgressEvent.__super__ = openfl_events_Event;
openfl_events_ProgressEvent.prototype = $extend(openfl_events_Event.prototype,{
	bytesLoaded: null
	,bytesTotal: null
	,clone: function() {
		var event = new openfl_events_ProgressEvent(this.type,this.bubbles,this.cancelable,this.bytesLoaded,this.bytesTotal);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("ProgressEvent",["type","bubbles","cancelable","bytesLoaded","bytesTotal"]);
	}
	,__init: function() {
		openfl_events_Event.prototype.__init.call(this);
		this.bytesLoaded = 0;
		this.bytesTotal = 0;
	}
	,__class__: openfl_events_ProgressEvent
});
var openfl_events_RenderEvent = function(type,bubbles,cancelable,objectMatrix,objectColorTransform,allowSmoothing) {
	if(allowSmoothing == null) {
		allowSmoothing = true;
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.objectMatrix = objectMatrix;
	this.objectColorTransform = objectColorTransform;
	this.allowSmoothing = allowSmoothing;
};
$hxClasses["openfl.events.RenderEvent"] = openfl_events_RenderEvent;
openfl_events_RenderEvent.__name__ = "openfl.events.RenderEvent";
openfl_events_RenderEvent.__super__ = openfl_events_Event;
openfl_events_RenderEvent.prototype = $extend(openfl_events_Event.prototype,{
	allowSmoothing: null
	,objectColorTransform: null
	,objectMatrix: null
	,renderer: null
	,clone: function() {
		var event = new openfl_events_RenderEvent(this.type,this.bubbles,this.cancelable,this.objectMatrix.clone(),this.objectColorTransform.__clone(),this.allowSmoothing);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("RenderEvent",["type","bubbles","cancelable"]);
	}
	,__init: function() {
		openfl_events_Event.prototype.__init.call(this);
		this.objectMatrix = null;
		this.objectColorTransform = null;
		this.allowSmoothing = false;
		this.renderer = null;
	}
	,__class__: openfl_events_RenderEvent
});
var openfl_events_SecurityErrorEvent = function(type,bubbles,cancelable,text,id) {
	if(id == null) {
		id = 0;
	}
	if(text == null) {
		text = "";
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	openfl_events_ErrorEvent.call(this,type,bubbles,cancelable,text,id);
};
$hxClasses["openfl.events.SecurityErrorEvent"] = openfl_events_SecurityErrorEvent;
openfl_events_SecurityErrorEvent.__name__ = "openfl.events.SecurityErrorEvent";
openfl_events_SecurityErrorEvent.__super__ = openfl_events_ErrorEvent;
openfl_events_SecurityErrorEvent.prototype = $extend(openfl_events_ErrorEvent.prototype,{
	clone: function() {
		var event = new openfl_events_SecurityErrorEvent(this.type,this.bubbles,this.cancelable,this.text,this.errorID);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("SecurityErrorEvent",["type","bubbles","cancelable","text","errorID"]);
	}
	,__class__: openfl_events_SecurityErrorEvent
});
var openfl_events_TouchEvent = function(type,bubbles,cancelable,touchPointID,isPrimaryTouchPoint,localX,localY,sizeX,sizeY,pressure,relatedObject,ctrlKey,altKey,shiftKey,commandKey,controlKey,timestamp,touchIntent,samples,isTouchPointCanceled) {
	if(isTouchPointCanceled == null) {
		isTouchPointCanceled = false;
	}
	if(timestamp == null) {
		timestamp = 0;
	}
	if(controlKey == null) {
		controlKey = false;
	}
	if(commandKey == null) {
		commandKey = false;
	}
	if(shiftKey == null) {
		shiftKey = false;
	}
	if(altKey == null) {
		altKey = false;
	}
	if(ctrlKey == null) {
		ctrlKey = false;
	}
	if(pressure == null) {
		pressure = 0;
	}
	if(sizeY == null) {
		sizeY = 0;
	}
	if(sizeX == null) {
		sizeX = 0;
	}
	if(localY == null) {
		localY = 0;
	}
	if(localX == null) {
		localX = 0;
	}
	if(isPrimaryTouchPoint == null) {
		isPrimaryTouchPoint = false;
	}
	if(touchPointID == null) {
		touchPointID = 0;
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = true;
	}
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.touchPointID = touchPointID;
	this.isPrimaryTouchPoint = isPrimaryTouchPoint;
	this.localX = localX;
	this.localY = localY;
	this.sizeX = sizeX;
	this.sizeY = sizeY;
	this.pressure = pressure;
	this.relatedObject = relatedObject;
	this.ctrlKey = ctrlKey;
	this.altKey = altKey;
	this.shiftKey = shiftKey;
	this.commandKey = commandKey;
	this.controlKey = controlKey;
	this.stageX = NaN;
	this.stageY = NaN;
};
$hxClasses["openfl.events.TouchEvent"] = openfl_events_TouchEvent;
openfl_events_TouchEvent.__name__ = "openfl.events.TouchEvent";
openfl_events_TouchEvent.__create = function(type,touch,stageX,stageY,local,target) {
	var evt = new openfl_events_TouchEvent(type,true,false,0,true,local.x,local.y,1,1,1);
	evt.stageX = stageX;
	evt.stageY = stageY;
	evt.target = target;
	return evt;
};
openfl_events_TouchEvent.__super__ = openfl_events_Event;
openfl_events_TouchEvent.prototype = $extend(openfl_events_Event.prototype,{
	altKey: null
	,commandKey: null
	,controlKey: null
	,ctrlKey: null
	,delta: null
	,isPrimaryTouchPoint: null
	,localX: null
	,localY: null
	,pressure: null
	,relatedObject: null
	,shiftKey: null
	,sizeX: null
	,sizeY: null
	,stageX: null
	,stageY: null
	,touchPointID: null
	,clone: function() {
		var event = new openfl_events_TouchEvent(this.type,this.bubbles,this.cancelable,this.touchPointID,this.isPrimaryTouchPoint,this.localX,this.localY,this.sizeX,this.sizeY,this.pressure,this.relatedObject,this.ctrlKey,this.altKey,this.shiftKey,this.commandKey,this.controlKey);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("TouchEvent",["type","bubbles","cancelable","touchPointID","isPrimaryTouchPoint","localX","localY","sizeX","sizeY","pressure","relatedObject","ctrlKey","altKey","shiftKey","commandKey","controlKey"]);
	}
	,updateAfterEvent: function() {
	}
	,__init: function() {
		openfl_events_Event.prototype.__init.call(this);
		this.touchPointID = 0;
		this.isPrimaryTouchPoint = false;
		this.localX = 0;
		this.localY = 0;
		this.sizeX = 0;
		this.sizeY = 0;
		this.pressure = 0;
		this.relatedObject = null;
		this.ctrlKey = false;
		this.altKey = false;
		this.shiftKey = false;
		this.commandKey = false;
		this.controlKey = false;
		this.stageX = NaN;
		this.stageY = NaN;
	}
	,__class__: openfl_events_TouchEvent
});
var openfl_events_UncaughtErrorEvent = function(type,bubbles,cancelable,error) {
	if(cancelable == null) {
		cancelable = true;
	}
	if(bubbles == null) {
		bubbles = true;
	}
	openfl_events_ErrorEvent.call(this,type,bubbles,cancelable);
	this.error = error;
};
$hxClasses["openfl.events.UncaughtErrorEvent"] = openfl_events_UncaughtErrorEvent;
openfl_events_UncaughtErrorEvent.__name__ = "openfl.events.UncaughtErrorEvent";
openfl_events_UncaughtErrorEvent.__super__ = openfl_events_ErrorEvent;
openfl_events_UncaughtErrorEvent.prototype = $extend(openfl_events_ErrorEvent.prototype,{
	error: null
	,clone: function() {
		var event = new openfl_events_UncaughtErrorEvent(this.type,this.bubbles,this.cancelable,this.error);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("UncaughtErrorEvent",["type","bubbles","cancelable","error"]);
	}
	,__init: function() {
		openfl_events_ErrorEvent.prototype.__init.call(this);
		this.error = null;
	}
	,__class__: openfl_events_UncaughtErrorEvent
});
var openfl_events_UncaughtErrorEvents = function() {
	openfl_events_EventDispatcher.call(this);
};
$hxClasses["openfl.events.UncaughtErrorEvents"] = openfl_events_UncaughtErrorEvents;
openfl_events_UncaughtErrorEvents.__name__ = "openfl.events.UncaughtErrorEvents";
openfl_events_UncaughtErrorEvents.__super__ = openfl_events_EventDispatcher;
openfl_events_UncaughtErrorEvents.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	__class__: openfl_events_UncaughtErrorEvents
});
var openfl_filters_BitmapFilter = function() {
	this.__bottomExtension = 0;
	this.__leftExtension = 0;
	this.__needSecondBitmapData = true;
	this.__numShaderPasses = 0;
	this.__preserveObject = false;
	this.__rightExtension = 0;
	this.__shaderBlendMode = 10;
	this.__topExtension = 0;
	this.__smooth = true;
};
$hxClasses["openfl.filters.BitmapFilter"] = openfl_filters_BitmapFilter;
openfl_filters_BitmapFilter.__name__ = "openfl.filters.BitmapFilter";
openfl_filters_BitmapFilter.prototype = {
	__bottomExtension: null
	,__leftExtension: null
	,__needSecondBitmapData: null
	,__numShaderPasses: null
	,__preserveObject: null
	,__renderDirty: null
	,__rightExtension: null
	,__shaderBlendMode: null
	,__smooth: null
	,__topExtension: null
	,clone: function() {
		return new openfl_filters_BitmapFilter();
	}
	,__applyFilter: function(bitmapData,sourceBitmapData,sourceRect,destPoint) {
		return sourceBitmapData;
	}
	,__initShader: function(renderer,pass) {
		return null;
	}
	,__class__: openfl_filters_BitmapFilter
};
var openfl_filters_BitmapFilterShader = function(code) {
	if(this.__glFragmentSource == null) {
		this.__glFragmentSource = "varying vec2 openfl_TextureCoordv;\n\n\t\tuniform sampler2D openfl_Texture;\n\t\tuniform vec2 openfl_TextureSize;\n\n\t\tvoid main(void) {\n\n\t\t\tgl_FragColor = texture2D (openfl_Texture, openfl_TextureCoordv);\n\n\t\t}";
	}
	if(this.__glVertexSource == null) {
		this.__glVertexSource = "attribute vec4 openfl_Position;\n\t\tattribute vec2 openfl_TextureCoord;\n\n\t\tvarying vec2 openfl_TextureCoordv;\n\n\t\tuniform mat4 openfl_Matrix;\n\t\tuniform vec2 openfl_TextureSize;\n\n\t\tvoid main(void) {\n\n\t\t\topenfl_TextureCoordv = openfl_TextureCoord;\n\n\t\tgl_Position = openfl_Matrix * openfl_Position;\n\n\t\t}";
	}
	openfl_display_Shader.call(this,code);
	this.__isGenerated = true;
	this.__initGL();
};
$hxClasses["openfl.filters.BitmapFilterShader"] = openfl_filters_BitmapFilterShader;
openfl_filters_BitmapFilterShader.__name__ = "openfl.filters.BitmapFilterShader";
openfl_filters_BitmapFilterShader.__super__ = openfl_display_Shader;
openfl_filters_BitmapFilterShader.prototype = $extend(openfl_display_Shader.prototype,{
	openfl_Position: null
	,openfl_TextureCoord: null
	,openfl_Matrix: null
	,openfl_TextureSize: null
	,openfl_Texture: null
	,__class__: openfl_filters_BitmapFilterShader
});
var openfl_filters__$BlurFilter_BlurShader = function() {
	if(this.__glFragmentSource == null) {
		this.__glFragmentSource = "uniform sampler2D openfl_Texture;\n\n\t\tvarying vec2 vBlurCoords[7];\n\n\t\tvoid main(void) {\n\n\t\t\tvec4 sum = vec4(0.0);\n\t\t\tsum += texture2D(openfl_Texture, vBlurCoords[0]) * 0.00443;\n\t\t\tsum += texture2D(openfl_Texture, vBlurCoords[1]) * 0.05399;\n\t\t\tsum += texture2D(openfl_Texture, vBlurCoords[2]) * 0.24197;\n\t\t\tsum += texture2D(openfl_Texture, vBlurCoords[3]) * 0.39894;\n\t\t\tsum += texture2D(openfl_Texture, vBlurCoords[4]) * 0.24197;\n\t\t\tsum += texture2D(openfl_Texture, vBlurCoords[5]) * 0.05399;\n\t\t\tsum += texture2D(openfl_Texture, vBlurCoords[6]) * 0.00443;\n\n\t\t\tgl_FragColor = sum;\n\n\t\t}";
	}
	if(this.__glVertexSource == null) {
		this.__glVertexSource = "attribute vec4 openfl_Position;\n\t\tattribute vec2 openfl_TextureCoord;\n\n\t\tuniform mat4 openfl_Matrix;\n\n\t\tuniform vec2 uRadius;\n\t\tvarying vec2 vBlurCoords[7];\n\t\tuniform vec2 uTextureSize;\n\n\t\tvoid main(void) {\n\n\t\t\tgl_Position = openfl_Matrix * openfl_Position;\n\n\t\t\tvec2 r = uRadius / uTextureSize;\n\t\t\tvBlurCoords[0] = openfl_TextureCoord - r * 1.0;\n\t\t\tvBlurCoords[1] = openfl_TextureCoord - r * 0.75;\n\t\t\tvBlurCoords[2] = openfl_TextureCoord - r * 0.5;\n\t\t\tvBlurCoords[3] = openfl_TextureCoord;\n\t\t\tvBlurCoords[4] = openfl_TextureCoord + r * 0.5;\n\t\t\tvBlurCoords[5] = openfl_TextureCoord + r * 0.75;\n\t\t\tvBlurCoords[6] = openfl_TextureCoord + r * 1.0;\n\n\t\t}";
	}
	openfl_filters_BitmapFilterShader.call(this);
	this.uRadius.value = [0,0];
	this.__isGenerated = true;
	this.__initGL();
};
$hxClasses["openfl.filters._BlurFilter.BlurShader"] = openfl_filters__$BlurFilter_BlurShader;
openfl_filters__$BlurFilter_BlurShader.__name__ = "openfl.filters._BlurFilter.BlurShader";
openfl_filters__$BlurFilter_BlurShader.__super__ = openfl_filters_BitmapFilterShader;
openfl_filters__$BlurFilter_BlurShader.prototype = $extend(openfl_filters_BitmapFilterShader.prototype,{
	__update: function() {
		this.uTextureSize.value = [this.__texture.input.width,this.__texture.input.height];
		openfl_filters_BitmapFilterShader.prototype.__update.call(this);
	}
	,uRadius: null
	,uTextureSize: null
	,__class__: openfl_filters__$BlurFilter_BlurShader
});
var openfl_filters_BlurFilter = function(blurX,blurY,quality) {
	if(quality == null) {
		quality = 1;
	}
	if(blurY == null) {
		blurY = 4;
	}
	if(blurX == null) {
		blurX = 4;
	}
	openfl_filters_BitmapFilter.call(this);
	this.set_blurX(blurX);
	this.set_blurY(blurY);
	this.set_quality(quality);
	this.__needSecondBitmapData = true;
	this.__preserveObject = false;
	this.__renderDirty = true;
};
$hxClasses["openfl.filters.BlurFilter"] = openfl_filters_BlurFilter;
openfl_filters_BlurFilter.__name__ = "openfl.filters.BlurFilter";
openfl_filters_BlurFilter.__super__ = openfl_filters_BitmapFilter;
openfl_filters_BlurFilter.prototype = $extend(openfl_filters_BitmapFilter.prototype,{
	__blurX: null
	,__blurY: null
	,__horizontalPasses: null
	,__quality: null
	,__verticalPasses: null
	,clone: function() {
		return new openfl_filters_BlurFilter(this.__blurX,this.__blurY,this.__quality);
	}
	,__applyFilter: function(bitmapData,sourceBitmapData,sourceRect,destPoint) {
		var time = new Date().getTime() / 1000;
		var finalImage = lime__$internal_graphics_ImageDataUtil.gaussianBlur(bitmapData.image,sourceBitmapData.image,sourceRect.__toLimeRectangle(),destPoint.__toLimeVector2(),this.__blurX,this.__blurY,this.__quality);
		var elapsed = new Date().getTime() / 1000 - time;
		if(finalImage == bitmapData.image) {
			return bitmapData;
		}
		return sourceBitmapData;
	}
	,__initShader: function(renderer,pass) {
		if(pass <= this.__horizontalPasses) {
			var scale = Math.pow(0.5,pass >> 1);
			openfl_filters_BlurFilter.__blurShader.uRadius.value[0] = this.get_blurX() * scale;
			openfl_filters_BlurFilter.__blurShader.uRadius.value[1] = 0;
		} else {
			var scale = Math.pow(0.5,pass - this.__horizontalPasses >> 1);
			openfl_filters_BlurFilter.__blurShader.uRadius.value[0] = 0;
			openfl_filters_BlurFilter.__blurShader.uRadius.value[1] = this.get_blurY() * scale;
		}
		return openfl_filters_BlurFilter.__blurShader;
	}
	,get_blurX: function() {
		return this.__blurX;
	}
	,set_blurX: function(value) {
		if(value != this.__blurX) {
			this.__blurX = value;
			this.__renderDirty = true;
			this.__leftExtension = value > 0 ? Math.ceil(value) : 0;
			this.__rightExtension = this.__leftExtension;
		}
		return value;
	}
	,get_blurY: function() {
		return this.__blurY;
	}
	,set_blurY: function(value) {
		if(value != this.__blurY) {
			this.__blurY = value;
			this.__renderDirty = true;
			this.__topExtension = value > 0 ? Math.ceil(value) : 0;
			this.__bottomExtension = this.__topExtension;
		}
		return value;
	}
	,get_quality: function() {
		return this.__quality;
	}
	,set_quality: function(value) {
		this.__horizontalPasses = this.__blurX <= 0 ? 0 : Math.round(this.__blurX * (value / 4)) + 1;
		this.__verticalPasses = this.__blurY <= 0 ? 0 : Math.round(this.__blurY * (value / 4)) + 1;
		this.__numShaderPasses = this.__horizontalPasses + this.__verticalPasses;
		if(value != this.__quality) {
			this.__renderDirty = true;
		}
		return this.__quality = value;
	}
	,__class__: openfl_filters_BlurFilter
	,__properties__: {set_quality:"set_quality",get_quality:"get_quality",set_blurY:"set_blurY",get_blurY:"get_blurY",set_blurX:"set_blurX",get_blurX:"get_blurX"}
});
var openfl_filters__$ColorMatrixFilter_ColorMatrixShader = function() {
	if(this.__glFragmentSource == null) {
		this.__glFragmentSource = "varying vec2 openfl_TextureCoordv;\n\t\tuniform sampler2D openfl_Texture;\n\n\t\tuniform mat4 uMultipliers;\n\t\tuniform vec4 uOffsets;\n\n\t\tvoid main(void) {\n\n\t\t\tvec4 color = texture2D (openfl_Texture, openfl_TextureCoordv);\n\n\t\t\tif (color.a == 0.0) {\n\n\t\t\t\tgl_FragColor = vec4 (0.0, 0.0, 0.0, 0.0);\n\n\t\t\t} else {\n\n\t\t\t\tcolor = vec4 (color.rgb / color.a, color.a);\n\t\t\t\tcolor = uOffsets + color * uMultipliers;\n\n\t\t\t\tgl_FragColor = vec4 (color.rgb * color.a, color.a);\n\n\t\t\t}\n\n\t\t}";
	}
	if(this.__glVertexSource == null) {
		this.__glVertexSource = "attribute vec4 openfl_Position;\n\t\tattribute vec2 openfl_TextureCoord;\n\n\t\tvarying vec2 openfl_TextureCoordv;\n\n\t\tuniform mat4 openfl_Matrix;\n\t\tuniform vec2 openfl_TextureSize;\n\n\n\t\tvoid main(void) {\n\n\t\t\topenfl_TextureCoordv = openfl_TextureCoord;\n\n\t\tgl_Position = openfl_Matrix * openfl_Position;\n\n\n\t\t}";
	}
	openfl_filters_BitmapFilterShader.call(this);
	this.uMultipliers.value = [1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1];
	this.uOffsets.value = [0,0,0,0];
	this.__isGenerated = true;
	this.__initGL();
};
$hxClasses["openfl.filters._ColorMatrixFilter.ColorMatrixShader"] = openfl_filters__$ColorMatrixFilter_ColorMatrixShader;
openfl_filters__$ColorMatrixFilter_ColorMatrixShader.__name__ = "openfl.filters._ColorMatrixFilter.ColorMatrixShader";
openfl_filters__$ColorMatrixFilter_ColorMatrixShader.__super__ = openfl_filters_BitmapFilterShader;
openfl_filters__$ColorMatrixFilter_ColorMatrixShader.prototype = $extend(openfl_filters_BitmapFilterShader.prototype,{
	init: function(matrix) {
		var multipliers = this.uMultipliers.value;
		var offsets = this.uOffsets.value;
		multipliers[0] = matrix[0];
		multipliers[1] = matrix[1];
		multipliers[2] = matrix[2];
		multipliers[3] = matrix[3];
		multipliers[4] = matrix[5];
		multipliers[5] = matrix[6];
		multipliers[6] = matrix[7];
		multipliers[7] = matrix[8];
		multipliers[8] = matrix[10];
		multipliers[9] = matrix[11];
		multipliers[10] = matrix[12];
		multipliers[11] = matrix[13];
		multipliers[12] = matrix[15];
		multipliers[13] = matrix[16];
		multipliers[14] = matrix[17];
		multipliers[15] = matrix[18];
		offsets[0] = matrix[4] / 255.0;
		offsets[1] = matrix[9] / 255.0;
		offsets[2] = matrix[14] / 255.0;
		offsets[3] = matrix[19] / 255.0;
	}
	,uMultipliers: null
	,uOffsets: null
	,__class__: openfl_filters__$ColorMatrixFilter_ColorMatrixShader
});
var openfl_filters_ColorMatrixFilter = function(matrix) {
	openfl_filters_BitmapFilter.call(this);
	this.set_matrix(matrix);
	this.__numShaderPasses = 1;
	this.__needSecondBitmapData = false;
};
$hxClasses["openfl.filters.ColorMatrixFilter"] = openfl_filters_ColorMatrixFilter;
openfl_filters_ColorMatrixFilter.__name__ = "openfl.filters.ColorMatrixFilter";
openfl_filters_ColorMatrixFilter.__super__ = openfl_filters_BitmapFilter;
openfl_filters_ColorMatrixFilter.prototype = $extend(openfl_filters_BitmapFilter.prototype,{
	__matrix: null
	,clone: function() {
		return new openfl_filters_ColorMatrixFilter(this.__matrix);
	}
	,__applyFilter: function(destBitmapData,sourceBitmapData,sourceRect,destPoint) {
		var sourceImage = sourceBitmapData.image;
		var image = destBitmapData.image;
		lime__$internal_graphics_ImageCanvasUtil.convertToData(sourceImage);
		lime__$internal_graphics_ImageCanvasUtil.convertToData(image);
		var sourceData = sourceImage.get_data();
		var destData = image.get_data();
		var offsetX = destPoint.x - sourceRect.x | 0;
		var offsetY = destPoint.y - sourceRect.y | 0;
		var sourceStride = sourceBitmapData.width * 4;
		var destStride = destBitmapData.width * 4;
		var sourceFormat = sourceImage.buffer.format;
		var destFormat = image.buffer.format;
		var sourcePremultiplied = sourceImage.buffer.premultiplied;
		var destPremultiplied = image.buffer.premultiplied;
		var sourcePixel;
		var destPixel = 0;
		var sourceOffset;
		var destOffset;
		var _g = sourceRect.y | 0;
		var _g1 = sourceRect.height | 0;
		while(_g < _g1) {
			var row = _g++;
			var _g2 = sourceRect.x | 0;
			var _g3 = sourceRect.width | 0;
			while(_g2 < _g3) {
				var column = _g2++;
				sourceOffset = row * sourceStride + column * 4;
				destOffset = (row + offsetX) * destStride + (column + offsetY) * 4;
				var format = sourceFormat;
				var premultiplied = sourcePremultiplied;
				if(premultiplied == null) {
					premultiplied = false;
				}
				if(format == null) {
					format = 0;
				}
				switch(format) {
				case 0:
					sourcePixel = (sourceData[sourceOffset] & 255) << 24 | (sourceData[sourceOffset + 1] & 255) << 16 | (sourceData[sourceOffset + 2] & 255) << 8 | sourceData[sourceOffset + 3] & 255;
					break;
				case 1:
					sourcePixel = (sourceData[sourceOffset + 1] & 255) << 24 | (sourceData[sourceOffset + 2] & 255) << 16 | (sourceData[sourceOffset + 3] & 255) << 8 | sourceData[sourceOffset] & 255;
					break;
				case 2:
					sourcePixel = (sourceData[sourceOffset + 2] & 255) << 24 | (sourceData[sourceOffset + 1] & 255) << 16 | (sourceData[sourceOffset] & 255) << 8 | sourceData[sourceOffset + 3] & 255;
					break;
				}
				if(premultiplied) {
					if((sourcePixel & 255) != 0 && (sourcePixel & 255) != 255) {
						lime_math_RGBA.unmult = 255.0 / (sourcePixel & 255);
						sourcePixel = (lime_math_RGBA.__clamp[Math.round((sourcePixel >>> 24 & 255) * lime_math_RGBA.unmult)] & 255) << 24 | (lime_math_RGBA.__clamp[Math.round((sourcePixel >>> 16 & 255) * lime_math_RGBA.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.round((sourcePixel >>> 8 & 255) * lime_math_RGBA.unmult)] & 255) << 8 | sourcePixel & 255 & 255;
					}
				}
				if((sourcePixel & 255) == 0) {
					destPixel = 0;
				} else {
					var value = Math.max(0,Math.min(this.__matrix[0] * (sourcePixel >>> 24 & 255) + this.__matrix[1] * (sourcePixel >>> 16 & 255) + this.__matrix[2] * (sourcePixel >>> 8 & 255) + this.__matrix[3] * (sourcePixel & 255) + this.__matrix[4],255)) | 0;
					destPixel = (value & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
					var value1 = Math.max(0,Math.min(this.__matrix[5] * (sourcePixel >>> 24 & 255) + this.__matrix[6] * (sourcePixel >>> 16 & 255) + this.__matrix[7] * (sourcePixel >>> 8 & 255) + this.__matrix[8] * (sourcePixel & 255) + this.__matrix[9],255)) | 0;
					destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (value1 & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
					var value2 = Math.max(0,Math.min(this.__matrix[10] * (sourcePixel >>> 24 & 255) + this.__matrix[11] * (sourcePixel >>> 16 & 255) + this.__matrix[12] * (sourcePixel >>> 8 & 255) + this.__matrix[13] * (sourcePixel & 255) + this.__matrix[14],255)) | 0;
					destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (value2 & 255) << 8 | destPixel & 255 & 255;
					var value3 = Math.max(0,Math.min(this.__matrix[15] * (sourcePixel >>> 24 & 255) + this.__matrix[16] * (sourcePixel >>> 16 & 255) + this.__matrix[17] * (sourcePixel >>> 8 & 255) + this.__matrix[18] * (sourcePixel & 255) + this.__matrix[19],255)) | 0;
					destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | value3 & 255;
				}
				var format1 = destFormat;
				var premultiplied1 = destPremultiplied;
				if(premultiplied1 == null) {
					premultiplied1 = false;
				}
				if(format1 == null) {
					format1 = 0;
				}
				if(premultiplied1) {
					if((destPixel & 255) == 0) {
						if(destPixel != 0) {
							destPixel = 0;
						}
					} else if((destPixel & 255) != 255) {
						lime_math_RGBA.a16 = lime_math_RGBA.__alpha16[destPixel & 255];
						destPixel = ((destPixel >>> 24 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 24 | ((destPixel >>> 16 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 16 | ((destPixel >>> 8 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 8 | destPixel & 255 & 255;
					}
				}
				switch(format1) {
				case 0:
					destData[destOffset] = destPixel >>> 24 & 255;
					destData[destOffset + 1] = destPixel >>> 16 & 255;
					destData[destOffset + 2] = destPixel >>> 8 & 255;
					destData[destOffset + 3] = destPixel & 255;
					break;
				case 1:
					destData[destOffset] = destPixel & 255;
					destData[destOffset + 1] = destPixel >>> 24 & 255;
					destData[destOffset + 2] = destPixel >>> 16 & 255;
					destData[destOffset + 3] = destPixel >>> 8 & 255;
					break;
				case 2:
					destData[destOffset] = destPixel >>> 8 & 255;
					destData[destOffset + 1] = destPixel >>> 16 & 255;
					destData[destOffset + 2] = destPixel >>> 24 & 255;
					destData[destOffset + 3] = destPixel & 255;
					break;
				}
			}
		}
		destBitmapData.image.dirty = true;
		return destBitmapData;
	}
	,__initShader: function(renderer,pass) {
		openfl_filters_ColorMatrixFilter.__colorMatrixShader.init(this.get_matrix());
		return openfl_filters_ColorMatrixFilter.__colorMatrixShader;
	}
	,get_matrix: function() {
		return this.__matrix;
	}
	,set_matrix: function(value) {
		if(value == null) {
			value = [1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0];
		}
		return this.__matrix = value;
	}
	,__class__: openfl_filters_ColorMatrixFilter
	,__properties__: {set_matrix:"set_matrix",get_matrix:"get_matrix"}
});
var openfl_filters__$ConvolutionFilter_ConvolutionShader = function() {
	if(this.__glFragmentSource == null) {
		this.__glFragmentSource = "varying vec2 vBlurCoords[9];\n\n\t\tuniform sampler2D openfl_Texture;\n\n\t\tuniform float uBias;\n\t\tuniform mat3 uConvoMatrix;\n\t\tuniform float uDivisor;\n\t\tuniform bool uPreserveAlpha;\n\n\t\tvoid main(void) {\n\n\t\t\tvec4 tc = texture2D (openfl_Texture, vBlurCoords[4]);\n\t\t\tvec4 c = vec4 (0.0);\n\n\t\t\tc += texture2D (openfl_Texture, vBlurCoords[0]) * uConvoMatrix[0][0];\n\t\t\tc += texture2D (openfl_Texture, vBlurCoords[1]) * uConvoMatrix[0][1];\n\t\t\tc += texture2D (openfl_Texture, vBlurCoords[2]) * uConvoMatrix[0][2];\n\n\t\t\tc += texture2D (openfl_Texture, vBlurCoords[3]) * uConvoMatrix[1][0];\n\t\t\tc += tc * uConvoMatrix[1][1];\n\t\t\tc += texture2D (openfl_Texture, vBlurCoords[5]) * uConvoMatrix[1][2];\n\n\t\t\tc += texture2D (openfl_Texture, vBlurCoords[6]) * uConvoMatrix[2][0];\n\t\t\tc += texture2D (openfl_Texture, vBlurCoords[7]) * uConvoMatrix[2][1];\n\t\t\tc += texture2D (openfl_Texture, vBlurCoords[8]) * uConvoMatrix[2][2];\n\n\t\t\tif (uDivisor > 0.0) {\n\n\t\t\t\tc /= vec4 (uDivisor, uDivisor, uDivisor, uDivisor);\n\n\t\t\t}\n\n\t\t\tc += vec4 (uBias, uBias, uBias, uBias);\n\n\t\t\tif (uPreserveAlpha) {\n\n\t\t\t\tc.a = tc.a;\n\n\t\t\t}\n\n\t\t\tgl_FragColor = c;\n\n\t\t}";
	}
	if(this.__glVertexSource == null) {
		this.__glVertexSource = "attribute vec4 openfl_Position;\n\t\tattribute vec2 openfl_TextureCoord;\n\n\t\tvarying vec2 vBlurCoords[9];\n\n\t\tuniform mat4 openfl_Matrix;\n\t\tuniform vec2 openfl_TextureSize;\n\n\t\tvoid main(void) {\n\n\t\t\tvec2 r = vec2 (1.0, 1.0) / openfl_TextureSize;\n\t\t\tvec2 t = openfl_TextureCoord;\n\n\t\t\tvBlurCoords[0] = t + r * vec2 (-1.0, -1.0);\n\t\t\tvBlurCoords[1] = t + r * vec2 (0.0, -1.0);\n\t\t\tvBlurCoords[2] = t + r * vec2 (1.0, -1.0);\n\n\t\t\tvBlurCoords[3] = t + r * vec2 (-1.0, 0.0);\n\t\t\tvBlurCoords[4] = t;\n\t\t\tvBlurCoords[5] = t + r * vec2 (1.0, 0.0);\n\n\t\t\tvBlurCoords[6] = t + r * vec2 (-1.0, 1.0);\n\t\t\tvBlurCoords[7] = t + r * vec2 (0.0, 1.0);\n\t\t\tvBlurCoords[8] = t + r * vec2 (1.0, 1.0);\n\n\t\t\tgl_Position = openfl_Matrix * openfl_Position;\n\n\t\t}";
	}
	openfl_filters_BitmapFilterShader.call(this);
	this.uDivisor.value = [1];
	this.uBias.value = [0];
	this.uPreserveAlpha.value = [true];
	this.__isGenerated = true;
	this.__initGL();
};
$hxClasses["openfl.filters._ConvolutionFilter.ConvolutionShader"] = openfl_filters__$ConvolutionFilter_ConvolutionShader;
openfl_filters__$ConvolutionFilter_ConvolutionShader.__name__ = "openfl.filters._ConvolutionFilter.ConvolutionShader";
openfl_filters__$ConvolutionFilter_ConvolutionShader.__super__ = openfl_filters_BitmapFilterShader;
openfl_filters__$ConvolutionFilter_ConvolutionShader.prototype = $extend(openfl_filters_BitmapFilterShader.prototype,{
	uBias: null
	,uConvoMatrix: null
	,uDivisor: null
	,uPreserveAlpha: null
	,__class__: openfl_filters__$ConvolutionFilter_ConvolutionShader
});
var openfl_filters_ConvolutionFilter = function(matrixX,matrixY,matrix,divisor,bias,preserveAlpha,clamp,color,alpha) {
	if(alpha == null) {
		alpha = 0.0;
	}
	if(color == null) {
		color = 0;
	}
	if(clamp == null) {
		clamp = true;
	}
	if(preserveAlpha == null) {
		preserveAlpha = true;
	}
	if(bias == null) {
		bias = 0.0;
	}
	if(divisor == null) {
		divisor = 1.0;
	}
	if(matrixY == null) {
		matrixY = 0;
	}
	if(matrixX == null) {
		matrixX = 0;
	}
	openfl_filters_BitmapFilter.call(this);
	this.matrixX = matrixX;
	this.matrixY = matrixY;
	this.__matrix = matrix;
	this.divisor = divisor;
	this.bias = bias;
	this.preserveAlpha = preserveAlpha;
	this.clamp = clamp;
	this.color = color;
	this.alpha = alpha;
	this.__numShaderPasses = 1;
};
$hxClasses["openfl.filters.ConvolutionFilter"] = openfl_filters_ConvolutionFilter;
openfl_filters_ConvolutionFilter.__name__ = "openfl.filters.ConvolutionFilter";
openfl_filters_ConvolutionFilter.__super__ = openfl_filters_BitmapFilter;
openfl_filters_ConvolutionFilter.prototype = $extend(openfl_filters_BitmapFilter.prototype,{
	alpha: null
	,bias: null
	,clamp: null
	,color: null
	,divisor: null
	,matrixX: null
	,matrixY: null
	,preserveAlpha: null
	,__matrix: null
	,clone: function() {
		return new openfl_filters_ConvolutionFilter(this.matrixX,this.matrixY,this.__matrix,this.divisor,this.bias,this.preserveAlpha,this.clamp,this.color,this.alpha);
	}
	,__initShader: function(renderer,pass) {
		openfl_filters_ConvolutionFilter.__convolutionShader.uConvoMatrix.value = this.get_matrix();
		openfl_filters_ConvolutionFilter.__convolutionShader.uDivisor.value[0] = this.divisor;
		openfl_filters_ConvolutionFilter.__convolutionShader.uBias.value[0] = this.bias;
		openfl_filters_ConvolutionFilter.__convolutionShader.uPreserveAlpha.value[0] = this.preserveAlpha;
		return openfl_filters_ConvolutionFilter.__convolutionShader;
	}
	,get_matrix: function() {
		return this.__matrix;
	}
	,set_matrix: function(v) {
		if(v == null) {
			v = [0,0,0,0,1,0,0,0,0];
		}
		if(v.length != 9) {
			throw haxe_Exception.thrown("Only a 3x3 matrix is supported");
		}
		return this.__matrix = v;
	}
	,__class__: openfl_filters_ConvolutionFilter
	,__properties__: {set_matrix:"set_matrix",get_matrix:"get_matrix"}
});
var openfl_filters__$DisplacementMapFilter_DisplacementMapShader = function() {
	if(this.__glFragmentSource == null) {
		this.__glFragmentSource = "\n\n\t\tuniform sampler2D openfl_Texture;\n\t\tuniform sampler2D mapTexture;\n\n\t\tuniform mat4 openfl_Matrix;\n\n\t\tuniform vec4 uOffsets;\n\t\tuniform mat4 uDisplacements;\n\n\t\tvarying vec2 openfl_TextureCoordV;\n\t\tvarying vec2 mapTextureCoords;\n\n\t\tvoid main(void) {\n\n\t\t\tvec4 map_color = texture2D(mapTexture, mapTextureCoords);\n\t\t\tvec4 map_color_mod = map_color - uOffsets;\n\n\t\t\tmap_color_mod = map_color_mod * vec4(map_color.w, map_color.w, 1.0, 1.0);\n\n\t\t\tvec4 displacements_multiplied = map_color_mod * uDisplacements;\n\t\t\tvec4 result = vec4(openfl_TextureCoordV.x, openfl_TextureCoordV.y, 0.0, 1.0) + displacements_multiplied;\n\n\t\t\tgl_FragColor = texture2D(openfl_Texture, vec2(result));\n\n\t\t}\n\n\t";
	}
	if(this.__glVertexSource == null) {
		this.__glVertexSource = "\n\n\t\tuniform mat4 openfl_Matrix;\n\n\t\tuniform vec2 mapTextureCoordsOffset;\n\n\t\tattribute vec4 openfl_Position;\n\t\tattribute vec2 openfl_TextureCoord;\n\n\t\tvarying vec2 openfl_TextureCoordV;\n\n\t\tvarying vec2 mapTextureCoords;\n\n\t\tvoid main(void) {\n\n\t\t\tgl_Position = openfl_Matrix * openfl_Position;\n\n\t\t\topenfl_TextureCoordV = openfl_TextureCoord;\n\t\t\tmapTextureCoords = openfl_TextureCoord - mapTextureCoordsOffset;\n\n\t\t}\n\n\t";
	}
	openfl_filters_BitmapFilterShader.call(this);
	this.__isGenerated = true;
	this.__initGL();
};
$hxClasses["openfl.filters._DisplacementMapFilter.DisplacementMapShader"] = openfl_filters__$DisplacementMapFilter_DisplacementMapShader;
openfl_filters__$DisplacementMapFilter_DisplacementMapShader.__name__ = "openfl.filters._DisplacementMapFilter.DisplacementMapShader";
openfl_filters__$DisplacementMapFilter_DisplacementMapShader.__super__ = openfl_filters_BitmapFilterShader;
openfl_filters__$DisplacementMapFilter_DisplacementMapShader.prototype = $extend(openfl_filters_BitmapFilterShader.prototype,{
	mapTextureCoordsOffset: null
	,mapTexture: null
	,uOffsets: null
	,uDisplacements: null
	,__class__: openfl_filters__$DisplacementMapFilter_DisplacementMapShader
});
var openfl_filters_DisplacementMapFilter = function(mapBitmap,mapPoint,componentX,componentY,scaleX,scaleY,mode,color,alpha) {
	if(alpha == null) {
		alpha = 0.0;
	}
	if(color == null) {
		color = 0;
	}
	if(mode == null) {
		mode = "wrap";
	}
	if(scaleY == null) {
		scaleY = 0.0;
	}
	if(scaleX == null) {
		scaleX = 0.0;
	}
	if(componentY == null) {
		componentY = 0;
	}
	if(componentX == null) {
		componentX = 0;
	}
	openfl_filters_BitmapFilter.call(this);
	this.__mapBitmap = mapBitmap;
	this.__mapPoint = mapPoint != null ? mapPoint : new openfl_geom_Point();
	this.__componentX = componentX;
	this.__componentY = componentY;
	this.__scaleX = scaleX;
	this.__scaleY = scaleY;
	this.__mode = mode;
	this.__color = color;
	this.__alpha = alpha;
	this.__needSecondBitmapData = true;
	this.__preserveObject = false;
	this.__renderDirty = true;
	this.__numShaderPasses = 1;
};
$hxClasses["openfl.filters.DisplacementMapFilter"] = openfl_filters_DisplacementMapFilter;
openfl_filters_DisplacementMapFilter.__name__ = "openfl.filters.DisplacementMapFilter";
openfl_filters_DisplacementMapFilter.__super__ = openfl_filters_BitmapFilter;
openfl_filters_DisplacementMapFilter.prototype = $extend(openfl_filters_BitmapFilter.prototype,{
	__alpha: null
	,__color: null
	,__componentX: null
	,__componentY: null
	,__mapBitmap: null
	,__mapPoint: null
	,__mode: null
	,__scaleX: null
	,__scaleY: null
	,clone: function() {
		return new openfl_filters_DisplacementMapFilter(this.__mapBitmap,this.__mapPoint.clone(),this.__componentX,this.__componentY,this.__scaleX,this.__scaleY,this.__mode,this.__color,this.__alpha);
	}
	,__applyFilter: function(bitmapData,sourceBitmapData,sourceRect,destPoint) {
		this.__updateMapMatrix();
		lime__$internal_graphics_ImageCanvasUtil.convertToData(bitmapData.image);
		lime__$internal_graphics_ImageCanvasUtil.convertToData(sourceBitmapData.image);
		lime__$internal_graphics_ImageCanvasUtil.convertToData(this.__mapBitmap.image);
		lime__$internal_graphics_ImageDataUtil.displaceMap(bitmapData.image,sourceBitmapData.image,this.__mapBitmap.image,new lime_math_Vector2(this.__mapPoint.x / this.__mapBitmap.width,this.__mapPoint.y / this.__mapBitmap.height),new lime_math_Vector4(openfl_filters_DisplacementMapFilter.__matrixData[0],openfl_filters_DisplacementMapFilter.__matrixData[4],openfl_filters_DisplacementMapFilter.__matrixData[8],openfl_filters_DisplacementMapFilter.__matrixData[12]),new lime_math_Vector4(openfl_filters_DisplacementMapFilter.__matrixData[1],openfl_filters_DisplacementMapFilter.__matrixData[5],openfl_filters_DisplacementMapFilter.__matrixData[9],openfl_filters_DisplacementMapFilter.__matrixData[13]),this.__smooth);
		return bitmapData;
	}
	,__initShader: function(renderer,pass) {
		this.__updateMapMatrix();
		openfl_filters_DisplacementMapFilter.__displacementMapShader.uOffsets.value = openfl_filters_DisplacementMapFilter.__offset;
		openfl_filters_DisplacementMapFilter.__displacementMapShader.uDisplacements.value = openfl_filters_DisplacementMapFilter.__matrixData;
		var tmp = this.get_mapPoint().x / this.__mapBitmap.width;
		var tmp1 = this.get_mapPoint().y / this.__mapBitmap.height;
		openfl_filters_DisplacementMapFilter.__displacementMapShader.mapTextureCoordsOffset.value = [tmp,tmp1];
		openfl_filters_DisplacementMapFilter.__displacementMapShader.mapTexture.input = this.__mapBitmap;
		return openfl_filters_DisplacementMapFilter.__displacementMapShader;
	}
	,__updateMapMatrix: function() {
		var columnX;
		var columnY;
		var scale = 1.0;
		var textureWidth = this.__mapBitmap.width;
		var textureHeight = this.__mapBitmap.height;
		openfl_filters_DisplacementMapFilter.__matrixData[0] = 0;
		openfl_filters_DisplacementMapFilter.__matrixData[1] = 0;
		openfl_filters_DisplacementMapFilter.__matrixData[2] = 0;
		openfl_filters_DisplacementMapFilter.__matrixData[3] = 0;
		openfl_filters_DisplacementMapFilter.__matrixData[4] = 0;
		openfl_filters_DisplacementMapFilter.__matrixData[5] = 0;
		openfl_filters_DisplacementMapFilter.__matrixData[6] = 0;
		openfl_filters_DisplacementMapFilter.__matrixData[7] = 0;
		openfl_filters_DisplacementMapFilter.__matrixData[8] = 0;
		openfl_filters_DisplacementMapFilter.__matrixData[9] = 0;
		openfl_filters_DisplacementMapFilter.__matrixData[10] = 0;
		openfl_filters_DisplacementMapFilter.__matrixData[11] = 0;
		openfl_filters_DisplacementMapFilter.__matrixData[12] = 0;
		openfl_filters_DisplacementMapFilter.__matrixData[13] = 0;
		openfl_filters_DisplacementMapFilter.__matrixData[14] = 0;
		openfl_filters_DisplacementMapFilter.__matrixData[15] = 0;
		if(this.__componentX == 1) {
			columnX = 0;
		} else if(this.__componentX == 2) {
			columnX = 1;
		} else if(this.__componentX == 4) {
			columnX = 2;
		} else {
			columnX = 3;
		}
		if(this.__componentY == 1) {
			columnY = 0;
		} else if(this.__componentY == 2) {
			columnY = 1;
		} else if(this.__componentY == 4) {
			columnY = 2;
		} else {
			columnY = 3;
		}
		openfl_filters_DisplacementMapFilter.__matrixData[columnX * 4] = this.__scaleX * scale / textureWidth;
		openfl_filters_DisplacementMapFilter.__matrixData[columnY * 4 + 1] = this.__scaleY * scale / textureHeight;
	}
	,get_alpha: function() {
		return this.__alpha;
	}
	,set_alpha: function(value) {
		if(value != this.__alpha) {
			this.__renderDirty = true;
		}
		return this.__alpha = value;
	}
	,get_componentX: function() {
		return this.__componentX;
	}
	,set_componentX: function(value) {
		if(value != this.__componentX) {
			this.__renderDirty = true;
		}
		return this.__componentX = value;
	}
	,get_componentY: function() {
		return this.__componentY;
	}
	,set_componentY: function(value) {
		if(value != this.__componentY) {
			this.__renderDirty = true;
		}
		return this.__componentY = value;
	}
	,get_color: function() {
		return this.__color;
	}
	,set_color: function(value) {
		if(value != this.__color) {
			this.__renderDirty = true;
		}
		return this.__color = value;
	}
	,get_scaleX: function() {
		return this.__scaleX;
	}
	,set_scaleX: function(value) {
		if(value != this.__scaleX) {
			this.__renderDirty = true;
		}
		return this.__scaleX = value;
	}
	,get_scaleY: function() {
		return this.__scaleY;
	}
	,set_scaleY: function(value) {
		if(value != this.__scaleY) {
			this.__renderDirty = true;
		}
		return this.__scaleY = value;
	}
	,get_mapBitmap: function() {
		return this.__mapBitmap;
	}
	,set_mapBitmap: function(value) {
		if(value != this.__mapBitmap) {
			this.__renderDirty = true;
		}
		return this.__mapBitmap = value;
	}
	,get_mapPoint: function() {
		return this.__mapPoint;
	}
	,set_mapPoint: function(value) {
		if(value != this.__mapPoint) {
			this.__renderDirty = true;
		}
		return this.__mapPoint = value;
	}
	,get_mode: function() {
		return this.__mode;
	}
	,set_mode: function(value) {
		if(value != this.__mode) {
			this.__renderDirty = true;
		}
		return this.__mode = value;
	}
	,__class__: openfl_filters_DisplacementMapFilter
	,__properties__: {set_scaleY:"set_scaleY",get_scaleY:"get_scaleY",set_scaleX:"set_scaleX",get_scaleX:"get_scaleX",set_mode:"set_mode",get_mode:"get_mode",set_mapPoint:"set_mapPoint",get_mapPoint:"get_mapPoint",set_mapBitmap:"set_mapBitmap",get_mapBitmap:"get_mapBitmap",set_componentY:"set_componentY",get_componentY:"get_componentY",set_componentX:"set_componentX",get_componentX:"get_componentX",set_color:"set_color",get_color:"get_color",set_alpha:"set_alpha",get_alpha:"get_alpha"}
});
var openfl_filters_DropShadowFilter = function(distance,angle,color,alpha,blurX,blurY,strength,quality,inner,knockout,hideObject) {
	if(hideObject == null) {
		hideObject = false;
	}
	if(knockout == null) {
		knockout = false;
	}
	if(inner == null) {
		inner = false;
	}
	if(quality == null) {
		quality = 1;
	}
	if(strength == null) {
		strength = 1;
	}
	if(blurY == null) {
		blurY = 4;
	}
	if(blurX == null) {
		blurX = 4;
	}
	if(alpha == null) {
		alpha = 1;
	}
	if(color == null) {
		color = 0;
	}
	if(angle == null) {
		angle = 45;
	}
	if(distance == null) {
		distance = 4;
	}
	openfl_filters_BitmapFilter.call(this);
	this.__offsetX = 0;
	this.__offsetY = 0;
	this.__distance = distance;
	this.__angle = angle;
	this.__color = color;
	this.__alpha = alpha;
	this.__blurX = blurX;
	this.__blurY = blurY;
	this.__strength = strength;
	this.__quality = quality;
	this.__inner = inner;
	this.__knockout = knockout;
	this.__hideObject = hideObject;
	this.__updateSize();
	this.__needSecondBitmapData = true;
	this.__preserveObject = !this.__hideObject;
	this.__renderDirty = true;
};
$hxClasses["openfl.filters.DropShadowFilter"] = openfl_filters_DropShadowFilter;
openfl_filters_DropShadowFilter.__name__ = "openfl.filters.DropShadowFilter";
openfl_filters_DropShadowFilter.__super__ = openfl_filters_BitmapFilter;
openfl_filters_DropShadowFilter.prototype = $extend(openfl_filters_BitmapFilter.prototype,{
	__alpha: null
	,__angle: null
	,__blurX: null
	,__blurY: null
	,__color: null
	,__distance: null
	,__hideObject: null
	,__inner: null
	,__knockout: null
	,__offsetX: null
	,__offsetY: null
	,__quality: null
	,__strength: null
	,clone: function() {
		return new openfl_filters_DropShadowFilter(this.__distance,this.__angle,this.__color,this.__alpha,this.__blurX,this.__blurY,this.__strength,this.__quality,this.__inner,this.__knockout,this.__hideObject);
	}
	,__applyFilter: function(bitmapData,sourceBitmapData,sourceRect,destPoint) {
		var r = this.__color >> 16 & 255;
		var g = this.__color >> 8 & 255;
		var b = this.__color & 255;
		var point = new openfl_geom_Point(destPoint.x + this.__offsetX,destPoint.y + this.__offsetY);
		var finalImage = lime__$internal_graphics_ImageDataUtil.gaussianBlur(bitmapData.image,sourceBitmapData.image,sourceRect.__toLimeRectangle(),point.__toLimeVector2(),this.__blurX,this.__blurY,this.__quality,this.__strength);
		finalImage.colorTransform(finalImage.get_rect(),new openfl_geom_ColorTransform(0,0,0,this.__alpha,r,g,b,0).__toLimeColorMatrix());
		if(finalImage == bitmapData.image) {
			return bitmapData;
		}
		return sourceBitmapData;
	}
	,__updateSize: function() {
		this.__offsetX = this.__distance * Math.cos(this.__angle * Math.PI / 180) | 0;
		this.__offsetY = this.__distance * Math.sin(this.__angle * Math.PI / 180) | 0;
		this.__topExtension = Math.ceil((this.__offsetY < 0 ? -this.__offsetY : 0) + this.__blurY);
		this.__bottomExtension = Math.ceil((this.__offsetY > 0 ? this.__offsetY : 0) + this.__blurY);
		this.__leftExtension = Math.ceil((this.__offsetX < 0 ? -this.__offsetX : 0) + this.__blurX);
		this.__rightExtension = Math.ceil((this.__offsetX > 0 ? this.__offsetX : 0) + this.__blurX);
	}
	,get_alpha: function() {
		return this.__alpha;
	}
	,set_alpha: function(value) {
		if(value != this.__alpha) {
			this.__renderDirty = true;
		}
		return this.__alpha = value;
	}
	,get_angle: function() {
		return this.__angle;
	}
	,set_angle: function(value) {
		if(value != this.__angle) {
			this.__angle = value;
			this.__renderDirty = true;
			this.__updateSize();
		}
		return value;
	}
	,get_blurX: function() {
		return this.__blurX;
	}
	,set_blurX: function(value) {
		if(value != this.__blurX) {
			this.__blurX = value;
			this.__renderDirty = true;
			this.__updateSize();
		}
		return value;
	}
	,get_blurY: function() {
		return this.__blurY;
	}
	,set_blurY: function(value) {
		if(value != this.__blurY) {
			this.__blurY = value;
			this.__renderDirty = true;
			this.__updateSize();
		}
		return value;
	}
	,get_color: function() {
		return this.__color;
	}
	,set_color: function(value) {
		if(value != this.__color) {
			this.__renderDirty = true;
		}
		return this.__color = value;
	}
	,get_distance: function() {
		return this.__distance;
	}
	,set_distance: function(value) {
		if(value != this.__distance) {
			this.__distance = value;
			this.__renderDirty = true;
			this.__updateSize();
		}
		return value;
	}
	,get_hideObject: function() {
		return this.__hideObject;
	}
	,set_hideObject: function(value) {
		if(value != this.__hideObject) {
			this.__renderDirty = true;
			this.__preserveObject = !value;
		}
		return this.__hideObject = value;
	}
	,get_inner: function() {
		return this.__inner;
	}
	,set_inner: function(value) {
		if(value != this.__inner) {
			this.__renderDirty = true;
		}
		return this.__inner = value;
	}
	,get_knockout: function() {
		return this.__knockout;
	}
	,set_knockout: function(value) {
		if(value != this.__knockout) {
			this.__renderDirty = true;
		}
		return this.__knockout = value;
	}
	,get_quality: function() {
		return this.__quality;
	}
	,set_quality: function(value) {
		if(value != this.__quality) {
			this.__renderDirty = true;
		}
		return this.__quality = value;
	}
	,get_strength: function() {
		return this.__strength;
	}
	,set_strength: function(value) {
		if(value != this.__strength) {
			this.__renderDirty = true;
		}
		return this.__strength = value;
	}
	,__class__: openfl_filters_DropShadowFilter
	,__properties__: {set_strength:"set_strength",get_strength:"get_strength",set_quality:"set_quality",get_quality:"get_quality",set_knockout:"set_knockout",get_knockout:"get_knockout",set_inner:"set_inner",get_inner:"get_inner",set_hideObject:"set_hideObject",get_hideObject:"get_hideObject",set_distance:"set_distance",get_distance:"get_distance",set_color:"set_color",get_color:"get_color",set_blurY:"set_blurY",get_blurY:"get_blurY",set_blurX:"set_blurX",get_blurX:"get_blurX",set_angle:"set_angle",get_angle:"get_angle",set_alpha:"set_alpha",get_alpha:"get_alpha"}
});
var openfl_filters__$GlowFilter_GlowShader = function() {
	if(this.__glFragmentSource == null) {
		this.__glFragmentSource = "uniform sampler2D openfl_Texture;\n\t\t\n\t\tuniform vec4 uColor;\n\t\t\n\t\tvarying vec2 vBlurCoords[7];\n\t\t\n\t\tvoid main(void) {\n\t\t\t\n\t\t\tfloat a = 0.0;\n\t\t\ta += texture2D(openfl_Texture, vBlurCoords[0]).a * 0.00443;\n\t\t\ta += texture2D(openfl_Texture, vBlurCoords[1]).a * 0.05399;\n\t\t\ta += texture2D(openfl_Texture, vBlurCoords[2]).a * 0.24197;\n\t\t\ta += texture2D(openfl_Texture, vBlurCoords[3]).a * 0.39894;\n\t\t\ta += texture2D(openfl_Texture, vBlurCoords[4]).a * 0.24197;\n\t\t\ta += texture2D(openfl_Texture, vBlurCoords[5]).a * 0.05399;\n\t\t\ta += texture2D(openfl_Texture, vBlurCoords[6]).a * 0.00443;\n\t\t\ta *= uColor.a;\n\t\t\t\n\t\t\tgl_FragColor = vec4(uColor.rgb * a, a);\n\t\t\t\n\t\t}";
	}
	if(this.__glVertexSource == null) {
		this.__glVertexSource = "attribute vec4 openfl_Position;\n\t\tattribute vec2 openfl_TextureCoord;\n\t\t\n\t\tuniform mat4 openfl_Matrix;\n\t\tuniform vec2 openfl_TextureSize;\n\t\t\n\t\tuniform vec2 uRadius;\n\t\tvarying vec2 vBlurCoords[7];\n\t\t\n\t\tvoid main(void) {\n\t\t\t\n\t\t\tgl_Position = openfl_Matrix * openfl_Position;\n\t\t\t\n\t\t\tvec2 r = uRadius / openfl_TextureSize;\n\t\t\tvBlurCoords[0] = openfl_TextureCoord - r * 1.0;\n\t\t\tvBlurCoords[1] = openfl_TextureCoord - r * 0.75;\n\t\t\tvBlurCoords[2] = openfl_TextureCoord - r * 0.5;\n\t\t\tvBlurCoords[3] = openfl_TextureCoord;\n\t\t\tvBlurCoords[4] = openfl_TextureCoord + r * 0.5;\n\t\t\tvBlurCoords[5] = openfl_TextureCoord + r * 0.75;\n\t\t\tvBlurCoords[6] = openfl_TextureCoord + r * 1.0;\n\t\t\t\n\t\t}";
	}
	openfl_filters_BitmapFilterShader.call(this);
	this.uRadius.value = [0,0];
	this.uColor.value = [0,0,0,0];
	this.__isGenerated = true;
	this.__initGL();
};
$hxClasses["openfl.filters._GlowFilter.GlowShader"] = openfl_filters__$GlowFilter_GlowShader;
openfl_filters__$GlowFilter_GlowShader.__name__ = "openfl.filters._GlowFilter.GlowShader";
openfl_filters__$GlowFilter_GlowShader.__super__ = openfl_filters_BitmapFilterShader;
openfl_filters__$GlowFilter_GlowShader.prototype = $extend(openfl_filters_BitmapFilterShader.prototype,{
	uRadius: null
	,uColor: null
	,__class__: openfl_filters__$GlowFilter_GlowShader
});
var openfl_filters_GlowFilter = function(color,alpha,blurX,blurY,strength,quality,inner,knockout) {
	if(knockout == null) {
		knockout = false;
	}
	if(inner == null) {
		inner = false;
	}
	if(quality == null) {
		quality = 1;
	}
	if(strength == null) {
		strength = 2;
	}
	if(blurY == null) {
		blurY = 6;
	}
	if(blurX == null) {
		blurX = 6;
	}
	if(alpha == null) {
		alpha = 1;
	}
	if(color == null) {
		color = 16711680;
	}
	openfl_filters_BitmapFilter.call(this);
	this.__color = color;
	this.__alpha = alpha;
	this.set_blurX(blurX);
	this.set_blurY(blurY);
	this.__strength = strength;
	this.set_quality(quality);
	this.__inner = inner;
	this.__knockout = knockout;
	this.__needSecondBitmapData = true;
	this.__preserveObject = true;
	this.__renderDirty = true;
};
$hxClasses["openfl.filters.GlowFilter"] = openfl_filters_GlowFilter;
openfl_filters_GlowFilter.__name__ = "openfl.filters.GlowFilter";
openfl_filters_GlowFilter.__super__ = openfl_filters_BitmapFilter;
openfl_filters_GlowFilter.prototype = $extend(openfl_filters_BitmapFilter.prototype,{
	__alpha: null
	,__blurX: null
	,__blurY: null
	,__color: null
	,__horizontalPasses: null
	,__inner: null
	,__knockout: null
	,__quality: null
	,__strength: null
	,__verticalPasses: null
	,clone: function() {
		return new openfl_filters_GlowFilter(this.__color,this.__alpha,this.__blurX,this.__blurY,this.__strength,this.__quality,this.__inner,this.__knockout);
	}
	,__applyFilter: function(bitmapData,sourceBitmapData,sourceRect,destPoint) {
		var r = this.__color >> 16 & 255;
		var g = this.__color >> 8 & 255;
		var b = this.__color & 255;
		var finalImage = lime__$internal_graphics_ImageDataUtil.gaussianBlur(bitmapData.image,sourceBitmapData.image,sourceRect.__toLimeRectangle(),destPoint.__toLimeVector2(),this.__blurX,this.__blurY,this.__quality,this.__strength);
		finalImage.colorTransform(finalImage.get_rect(),new openfl_geom_ColorTransform(0,0,0,this.__alpha,r,g,b,0).__toLimeColorMatrix());
		if(finalImage == bitmapData.image) {
			return bitmapData;
		}
		return sourceBitmapData;
	}
	,__initShader: function(renderer,pass) {
		if(pass <= this.__horizontalPasses) {
			var scale = Math.pow(0.5,pass >> 1);
			openfl_filters_GlowFilter.__glowShader.uRadius.value[0] = this.get_blurX() * scale;
			openfl_filters_GlowFilter.__glowShader.uRadius.value[1] = 0;
		} else {
			var scale = Math.pow(0.5,pass - this.__horizontalPasses >> 1);
			openfl_filters_GlowFilter.__glowShader.uRadius.value[0] = 0;
			openfl_filters_GlowFilter.__glowShader.uRadius.value[1] = this.get_blurY() * scale;
		}
		openfl_filters_GlowFilter.__glowShader.uColor.value[0] = (this.get_color() >> 16 & 255) / 255;
		openfl_filters_GlowFilter.__glowShader.uColor.value[1] = (this.get_color() >> 8 & 255) / 255;
		openfl_filters_GlowFilter.__glowShader.uColor.value[2] = (this.get_color() & 255) / 255;
		openfl_filters_GlowFilter.__glowShader.uColor.value[3] = this.get_alpha() * (this.__strength / this.__numShaderPasses);
		return openfl_filters_GlowFilter.__glowShader;
	}
	,get_alpha: function() {
		return this.__alpha;
	}
	,set_alpha: function(value) {
		if(value != this.__alpha) {
			this.__renderDirty = true;
		}
		return this.__alpha = value;
	}
	,get_blurX: function() {
		return this.__blurX;
	}
	,set_blurX: function(value) {
		if(value != this.__blurX) {
			this.__blurX = value;
			this.__renderDirty = true;
			this.__leftExtension = value > 0 ? Math.ceil(value * 1.5) : 0;
			this.__rightExtension = this.__leftExtension;
		}
		return value;
	}
	,get_blurY: function() {
		return this.__blurY;
	}
	,set_blurY: function(value) {
		if(value != this.__blurY) {
			this.__blurY = value;
			this.__renderDirty = true;
			this.__topExtension = value > 0 ? Math.ceil(value * 1.5) : 0;
			this.__bottomExtension = this.__topExtension;
		}
		return value;
	}
	,get_color: function() {
		return this.__color;
	}
	,set_color: function(value) {
		if(value != this.__color) {
			this.__renderDirty = true;
		}
		return this.__color = value;
	}
	,get_inner: function() {
		return this.__inner;
	}
	,set_inner: function(value) {
		if(value != this.__inner) {
			this.__renderDirty = true;
		}
		return this.__inner = value;
	}
	,get_knockout: function() {
		return this.__knockout;
	}
	,set_knockout: function(value) {
		if(value != this.__knockout) {
			this.__renderDirty = true;
		}
		return this.__knockout = value;
	}
	,get_quality: function() {
		return this.__quality;
	}
	,set_quality: function(value) {
		this.__horizontalPasses = this.__blurX <= 0 ? 0 : Math.round(this.__blurX * (value / 4)) + 1;
		this.__verticalPasses = this.__blurY <= 0 ? 0 : Math.round(this.__blurY * (value / 4)) + 1;
		this.__numShaderPasses = this.__horizontalPasses + this.__verticalPasses;
		if(value != this.__quality) {
			this.__renderDirty = true;
		}
		return this.__quality = value;
	}
	,get_strength: function() {
		return this.__strength;
	}
	,set_strength: function(value) {
		if(value != this.__strength) {
			this.__renderDirty = true;
		}
		return this.__strength = value;
	}
	,__class__: openfl_filters_GlowFilter
	,__properties__: {set_strength:"set_strength",get_strength:"get_strength",set_quality:"set_quality",get_quality:"get_quality",set_knockout:"set_knockout",get_knockout:"get_knockout",set_inner:"set_inner",get_inner:"get_inner",set_color:"set_color",get_color:"get_color",set_blurY:"set_blurY",get_blurY:"get_blurY",set_blurX:"set_blurX",get_blurX:"get_blurX",set_alpha:"set_alpha",get_alpha:"get_alpha"}
});
var openfl_filters_ShaderFilter = function(shader) {
	openfl_filters_BitmapFilter.call(this);
	this.shader = shader;
	this.__numShaderPasses = 1;
};
$hxClasses["openfl.filters.ShaderFilter"] = openfl_filters_ShaderFilter;
openfl_filters_ShaderFilter.__name__ = "openfl.filters.ShaderFilter";
openfl_filters_ShaderFilter.__super__ = openfl_filters_BitmapFilter;
openfl_filters_ShaderFilter.prototype = $extend(openfl_filters_BitmapFilter.prototype,{
	blendMode: null
	,bottomExtension: null
	,leftExtension: null
	,rightExtension: null
	,shader: null
	,topExtension: null
	,clone: function() {
		var filter = new openfl_filters_ShaderFilter(this.shader);
		filter.bottomExtension = this.bottomExtension;
		filter.leftExtension = this.leftExtension;
		filter.rightExtension = this.rightExtension;
		filter.topExtension = this.topExtension;
		return filter;
	}
	,__initShader: function(renderer,pass) {
		this.__shaderBlendMode = this.blendMode;
		return this.shader;
	}
	,__class__: openfl_filters_ShaderFilter
});
var openfl_geom_Matrix3D = function(v) {
	if(v != null && v.get_length() == 16) {
		this.rawData = v.concat(null);
	} else {
		this.rawData = openfl_Vector.toFloatVector(null,null,null,[1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0]);
	}
};
$hxClasses["openfl.geom.Matrix3D"] = openfl_geom_Matrix3D;
openfl_geom_Matrix3D.__name__ = "openfl.geom.Matrix3D";
openfl_geom_Matrix3D.create2D = function(x,y,scale,rotation) {
	if(rotation == null) {
		rotation = 0;
	}
	if(scale == null) {
		scale = 1;
	}
	var theta = rotation * Math.PI / 180.0;
	var c = Math.cos(theta);
	var s = Math.sin(theta);
	return new openfl_geom_Matrix3D(openfl_Vector.toFloatVector(null,null,null,[c * scale,-s * scale,0,0,s * scale,c * scale,0,0,0,0,1,0,x,y,0,1]));
};
openfl_geom_Matrix3D.createABCD = function(a,b,c,d,tx,ty) {
	return new openfl_geom_Matrix3D(openfl_Vector.toFloatVector(null,null,null,[a,b,0,0,c,d,0,0,0,0,1,0,tx,ty,0,1]));
};
openfl_geom_Matrix3D.createOrtho = function(x0,x1,y0,y1,zNear,zFar) {
	var sx = 1.0 / (x1 - x0);
	var sy = 1.0 / (y1 - y0);
	var sz = 1.0 / (zFar - zNear);
	return new openfl_geom_Matrix3D(openfl_Vector.toFloatVector(null,null,null,[2.0 * sx,0,0,0,0,2.0 * sy,0,0,0,0,-2.0 * sz,0,-(x0 + x1) * sx,-(y0 + y1) * sy,-(zNear + zFar) * sz,1]));
};
openfl_geom_Matrix3D.interpolate = function(thisMat,toMat,percent) {
	var m = new openfl_geom_Matrix3D();
	var _g = 0;
	while(_g < 16) {
		var i = _g++;
		m.rawData.set(i,thisMat.rawData.get(i) + (toMat.rawData.get(i) - thisMat.rawData.get(i)) * percent);
	}
	return m;
};
openfl_geom_Matrix3D.__getAxisRotation = function(x,y,z,degrees) {
	var m = new openfl_geom_Matrix3D();
	var a1 = new openfl_geom_Vector3D(x,y,z);
	var rad = -degrees * (Math.PI / 180);
	var c = Math.cos(rad);
	var s = Math.sin(rad);
	var t = 1.0 - c;
	m.rawData.set(0,c + a1.x * a1.x * t);
	m.rawData.set(5,c + a1.y * a1.y * t);
	m.rawData.set(10,c + a1.z * a1.z * t);
	var tmp1 = a1.x * a1.y * t;
	var tmp2 = a1.z * s;
	m.rawData.set(4,tmp1 + tmp2);
	m.rawData.set(1,tmp1 - tmp2);
	tmp1 = a1.x * a1.z * t;
	tmp2 = a1.y * s;
	m.rawData.set(8,tmp1 - tmp2);
	m.rawData.set(2,tmp1 + tmp2);
	tmp1 = a1.y * a1.z * t;
	tmp2 = a1.x * s;
	m.rawData.set(9,tmp1 + tmp2);
	m.rawData.set(6,tmp1 - tmp2);
	return m;
};
openfl_geom_Matrix3D.prototype = {
	rawData: null
	,append: function(lhs) {
		var m111 = this.rawData.get(0);
		var m121 = this.rawData.get(4);
		var m131 = this.rawData.get(8);
		var m141 = this.rawData.get(12);
		var m112 = this.rawData.get(1);
		var m122 = this.rawData.get(5);
		var m132 = this.rawData.get(9);
		var m142 = this.rawData.get(13);
		var m113 = this.rawData.get(2);
		var m123 = this.rawData.get(6);
		var m133 = this.rawData.get(10);
		var m143 = this.rawData.get(14);
		var m114 = this.rawData.get(3);
		var m124 = this.rawData.get(7);
		var m134 = this.rawData.get(11);
		var m144 = this.rawData.get(15);
		var m211 = lhs.rawData.get(0);
		var m221 = lhs.rawData.get(4);
		var m231 = lhs.rawData.get(8);
		var m241 = lhs.rawData.get(12);
		var m212 = lhs.rawData.get(1);
		var m222 = lhs.rawData.get(5);
		var m232 = lhs.rawData.get(9);
		var m242 = lhs.rawData.get(13);
		var m213 = lhs.rawData.get(2);
		var m223 = lhs.rawData.get(6);
		var m233 = lhs.rawData.get(10);
		var m243 = lhs.rawData.get(14);
		var m214 = lhs.rawData.get(3);
		var m224 = lhs.rawData.get(7);
		var m234 = lhs.rawData.get(11);
		var m244 = lhs.rawData.get(15);
		this.rawData.set(0,m111 * m211 + m112 * m221 + m113 * m231 + m114 * m241);
		this.rawData.set(1,m111 * m212 + m112 * m222 + m113 * m232 + m114 * m242);
		this.rawData.set(2,m111 * m213 + m112 * m223 + m113 * m233 + m114 * m243);
		this.rawData.set(3,m111 * m214 + m112 * m224 + m113 * m234 + m114 * m244);
		this.rawData.set(4,m121 * m211 + m122 * m221 + m123 * m231 + m124 * m241);
		this.rawData.set(5,m121 * m212 + m122 * m222 + m123 * m232 + m124 * m242);
		this.rawData.set(6,m121 * m213 + m122 * m223 + m123 * m233 + m124 * m243);
		this.rawData.set(7,m121 * m214 + m122 * m224 + m123 * m234 + m124 * m244);
		this.rawData.set(8,m131 * m211 + m132 * m221 + m133 * m231 + m134 * m241);
		this.rawData.set(9,m131 * m212 + m132 * m222 + m133 * m232 + m134 * m242);
		this.rawData.set(10,m131 * m213 + m132 * m223 + m133 * m233 + m134 * m243);
		this.rawData.set(11,m131 * m214 + m132 * m224 + m133 * m234 + m134 * m244);
		this.rawData.set(12,m141 * m211 + m142 * m221 + m143 * m231 + m144 * m241);
		this.rawData.set(13,m141 * m212 + m142 * m222 + m143 * m232 + m144 * m242);
		this.rawData.set(14,m141 * m213 + m142 * m223 + m143 * m233 + m144 * m243);
		this.rawData.set(15,m141 * m214 + m142 * m224 + m143 * m234 + m144 * m244);
	}
	,appendRotation: function(degrees,axis,pivotPoint) {
		var tz = 0;
		var ty = tz;
		var tx = ty;
		if(pivotPoint != null) {
			tx = pivotPoint.x;
			ty = pivotPoint.y;
			tz = pivotPoint.z;
		}
		var radian = degrees * Math.PI / 180;
		var cos = Math.cos(radian);
		var sin = Math.sin(radian);
		var x = axis.x;
		var y = axis.y;
		var z = axis.z;
		var x2 = x * x;
		var y2 = y * y;
		var z2 = z * z;
		var ls = x2 + y2 + z2;
		if(ls != 0) {
			var l = Math.sqrt(ls);
			x /= l;
			y /= l;
			z /= l;
			x2 /= ls;
			y2 /= ls;
			z2 /= ls;
		}
		var ccos = 1 - cos;
		var m = new openfl_geom_Matrix3D();
		var d = m.rawData;
		d.set(0,x2 + (y2 + z2) * cos);
		d.set(1,x * y * ccos + z * sin);
		d.set(2,x * z * ccos - y * sin);
		d.set(4,x * y * ccos - z * sin);
		d.set(5,y2 + (x2 + z2) * cos);
		d.set(6,y * z * ccos + x * sin);
		d.set(8,x * z * ccos + y * sin);
		d.set(9,y * z * ccos - x * sin);
		d.set(10,z2 + (x2 + y2) * cos);
		d.set(12,(tx * (y2 + z2) - x * (ty * y + tz * z)) * ccos + (ty * z - tz * y) * sin);
		d.set(13,(ty * (x2 + z2) - y * (tx * x + tz * z)) * ccos + (tz * x - tx * z) * sin);
		d.set(14,(tz * (x2 + y2) - z * (tx * x + ty * y)) * ccos + (tx * y - ty * x) * sin);
		this.append(m);
	}
	,appendScale: function(xScale,yScale,zScale) {
		this.append(new openfl_geom_Matrix3D(openfl_Vector.toFloatVector(null,null,null,[xScale,0.0,0.0,0.0,0.0,yScale,0.0,0.0,0.0,0.0,zScale,0.0,0.0,0.0,0.0,1.0])));
	}
	,appendTranslation: function(x,y,z) {
		var _g = this.rawData;
		_g.set(12,_g.get(12) + x);
		var _g = this.rawData;
		_g.set(13,_g.get(13) + y);
		var _g = this.rawData;
		_g.set(14,_g.get(14) + z);
	}
	,clone: function() {
		return new openfl_geom_Matrix3D(this.rawData.copy());
	}
	,copyColumnFrom: function(column,vector3D) {
		switch(column) {
		case 0:
			this.rawData.set(0,vector3D.x);
			this.rawData.set(1,vector3D.y);
			this.rawData.set(2,vector3D.z);
			this.rawData.set(3,vector3D.w);
			break;
		case 1:
			this.rawData.set(4,vector3D.x);
			this.rawData.set(5,vector3D.y);
			this.rawData.set(6,vector3D.z);
			this.rawData.set(7,vector3D.w);
			break;
		case 2:
			this.rawData.set(8,vector3D.x);
			this.rawData.set(9,vector3D.y);
			this.rawData.set(10,vector3D.z);
			this.rawData.set(11,vector3D.w);
			break;
		case 3:
			this.rawData.set(12,vector3D.x);
			this.rawData.set(13,vector3D.y);
			this.rawData.set(14,vector3D.z);
			this.rawData.set(15,vector3D.w);
			break;
		default:
		}
	}
	,copyColumnTo: function(column,vector3D) {
		switch(column) {
		case 0:
			vector3D.x = this.rawData.get(0);
			vector3D.y = this.rawData.get(1);
			vector3D.z = this.rawData.get(2);
			vector3D.w = this.rawData.get(3);
			break;
		case 1:
			vector3D.x = this.rawData.get(4);
			vector3D.y = this.rawData.get(5);
			vector3D.z = this.rawData.get(6);
			vector3D.w = this.rawData.get(7);
			break;
		case 2:
			vector3D.x = this.rawData.get(8);
			vector3D.y = this.rawData.get(9);
			vector3D.z = this.rawData.get(10);
			vector3D.w = this.rawData.get(11);
			break;
		case 3:
			vector3D.x = this.rawData.get(12);
			vector3D.y = this.rawData.get(13);
			vector3D.z = this.rawData.get(14);
			vector3D.w = this.rawData.get(15);
			break;
		default:
		}
	}
	,copyFrom: function(other) {
		this.rawData = other.rawData.copy();
	}
	,copyRawDataFrom: function(vector,index,transpose) {
		if(transpose == null) {
			transpose = false;
		}
		if(index == null) {
			index = 0;
		}
		if(transpose) {
			this.transpose();
		}
		var length = vector.get_length() - index;
		var _g = 0;
		var _g1 = length;
		while(_g < _g1) {
			var i = _g++;
			this.rawData.set(i,vector.get(i + index));
		}
		if(transpose) {
			this.transpose();
		}
	}
	,copyRawDataTo: function(vector,index,transpose) {
		if(transpose == null) {
			transpose = false;
		}
		if(index == null) {
			index = 0;
		}
		if(transpose) {
			this.transpose();
		}
		var _g = 0;
		var _g1 = this.rawData.get_length();
		while(_g < _g1) {
			var i = _g++;
			vector.set(i + index,this.rawData.get(i));
		}
		if(transpose) {
			this.transpose();
		}
	}
	,copyRowFrom: function(row,vector3D) {
		switch(row) {
		case 0:
			this.rawData.set(0,vector3D.x);
			this.rawData.set(4,vector3D.y);
			this.rawData.set(8,vector3D.z);
			this.rawData.set(12,vector3D.w);
			break;
		case 1:
			this.rawData.set(1,vector3D.x);
			this.rawData.set(5,vector3D.y);
			this.rawData.set(9,vector3D.z);
			this.rawData.set(13,vector3D.w);
			break;
		case 2:
			this.rawData.set(2,vector3D.x);
			this.rawData.set(6,vector3D.y);
			this.rawData.set(10,vector3D.z);
			this.rawData.set(14,vector3D.w);
			break;
		case 3:
			this.rawData.set(3,vector3D.x);
			this.rawData.set(7,vector3D.y);
			this.rawData.set(11,vector3D.z);
			this.rawData.set(15,vector3D.w);
			break;
		default:
		}
	}
	,copyRowTo: function(row,vector3D) {
		switch(row) {
		case 0:
			vector3D.x = this.rawData.get(0);
			vector3D.y = this.rawData.get(4);
			vector3D.z = this.rawData.get(8);
			vector3D.w = this.rawData.get(12);
			break;
		case 1:
			vector3D.x = this.rawData.get(1);
			vector3D.y = this.rawData.get(5);
			vector3D.z = this.rawData.get(9);
			vector3D.w = this.rawData.get(13);
			break;
		case 2:
			vector3D.x = this.rawData.get(2);
			vector3D.y = this.rawData.get(6);
			vector3D.z = this.rawData.get(10);
			vector3D.w = this.rawData.get(14);
			break;
		case 3:
			vector3D.x = this.rawData.get(3);
			vector3D.y = this.rawData.get(7);
			vector3D.z = this.rawData.get(11);
			vector3D.w = this.rawData.get(15);
			break;
		default:
		}
	}
	,copyToMatrix3D: function(other) {
		other.rawData = this.rawData.copy();
	}
	,decompose: function(orientationStyle) {
		if(orientationStyle == null) {
			orientationStyle = 1;
		}
		var vec = openfl_Vector.toObjectVector(null);
		var m = this.clone();
		var mr = m.rawData.copy();
		var pos = new openfl_geom_Vector3D(mr.get(12),mr.get(13),mr.get(14));
		mr.set(12,0);
		mr.set(13,0);
		mr.set(14,0);
		var scale = new openfl_geom_Vector3D();
		scale.x = Math.sqrt(mr.get(0) * mr.get(0) + mr.get(1) * mr.get(1) + mr.get(2) * mr.get(2));
		scale.y = Math.sqrt(mr.get(4) * mr.get(4) + mr.get(5) * mr.get(5) + mr.get(6) * mr.get(6));
		scale.z = Math.sqrt(mr.get(8) * mr.get(8) + mr.get(9) * mr.get(9) + mr.get(10) * mr.get(10));
		if(mr.get(0) * (mr.get(5) * mr.get(10) - mr.get(6) * mr.get(9)) - mr.get(1) * (mr.get(4) * mr.get(10) - mr.get(6) * mr.get(8)) + mr.get(2) * (mr.get(4) * mr.get(9) - mr.get(5) * mr.get(8)) < 0) {
			scale.z = -scale.z;
		}
		var _g = mr;
		_g.set(0,_g.get(0) / scale.x);
		var _g = mr;
		_g.set(1,_g.get(1) / scale.x);
		var _g = mr;
		_g.set(2,_g.get(2) / scale.x);
		var _g = mr;
		_g.set(4,_g.get(4) / scale.y);
		var _g = mr;
		_g.set(5,_g.get(5) / scale.y);
		var _g = mr;
		_g.set(6,_g.get(6) / scale.y);
		var _g = mr;
		_g.set(8,_g.get(8) / scale.z);
		var _g = mr;
		_g.set(9,_g.get(9) / scale.z);
		var _g = mr;
		_g.set(10,_g.get(10) / scale.z);
		var rot = new openfl_geom_Vector3D();
		switch(orientationStyle) {
		case 0:
			rot.w = Math.acos((mr.get(0) + mr.get(5) + mr.get(10) - 1) / 2);
			var len = Math.sqrt((mr.get(6) - mr.get(9)) * (mr.get(6) - mr.get(9)) + (mr.get(8) - mr.get(2)) * (mr.get(8) - mr.get(2)) + (mr.get(1) - mr.get(4)) * (mr.get(1) - mr.get(4)));
			if(len != 0) {
				rot.x = (mr.get(6) - mr.get(9)) / len;
				rot.y = (mr.get(8) - mr.get(2)) / len;
				rot.z = (mr.get(1) - mr.get(4)) / len;
			} else {
				rot.x = rot.y = rot.z = 0;
			}
			break;
		case 1:
			rot.y = Math.asin(-mr.get(2));
			if(mr.get(2) != 1 && mr.get(2) != -1) {
				rot.x = Math.atan2(mr.get(6),mr.get(10));
				rot.z = Math.atan2(mr.get(1),mr.get(0));
			} else {
				rot.z = 0;
				rot.x = Math.atan2(mr.get(4),mr.get(5));
			}
			break;
		case 2:
			var tr = mr.get(0) + mr.get(5) + mr.get(10);
			if(tr > 0) {
				rot.w = Math.sqrt(1 + tr) / 2;
				rot.x = (mr.get(6) - mr.get(9)) / (4 * rot.w);
				rot.y = (mr.get(8) - mr.get(2)) / (4 * rot.w);
				rot.z = (mr.get(1) - mr.get(4)) / (4 * rot.w);
			} else if(mr.get(0) > mr.get(5) && mr.get(0) > mr.get(10)) {
				rot.x = Math.sqrt(1 + mr.get(0) - mr.get(5) - mr.get(10)) / 2;
				rot.w = (mr.get(6) - mr.get(9)) / (4 * rot.x);
				rot.y = (mr.get(1) + mr.get(4)) / (4 * rot.x);
				rot.z = (mr.get(8) + mr.get(2)) / (4 * rot.x);
			} else if(mr.get(5) > mr.get(10)) {
				rot.y = Math.sqrt(1 + mr.get(5) - mr.get(0) - mr.get(10)) / 2;
				rot.x = (mr.get(1) + mr.get(4)) / (4 * rot.y);
				rot.w = (mr.get(8) - mr.get(2)) / (4 * rot.y);
				rot.z = (mr.get(6) + mr.get(9)) / (4 * rot.y);
			} else {
				rot.z = Math.sqrt(1 + mr.get(10) - mr.get(0) - mr.get(5)) / 2;
				rot.x = (mr.get(8) + mr.get(2)) / (4 * rot.z);
				rot.y = (mr.get(6) + mr.get(9)) / (4 * rot.z);
				rot.w = (mr.get(1) - mr.get(4)) / (4 * rot.z);
			}
			break;
		}
		vec.push(pos);
		vec.push(rot);
		vec.push(scale);
		return vec;
	}
	,deltaTransformVector: function(v) {
		var x = v.x;
		var y = v.y;
		var z = v.z;
		return new openfl_geom_Vector3D(x * this.rawData.get(0) + y * this.rawData.get(4) + z * this.rawData.get(8),x * this.rawData.get(1) + y * this.rawData.get(5) + z * this.rawData.get(9),x * this.rawData.get(2) + y * this.rawData.get(6) + z * this.rawData.get(10),x * this.rawData.get(3) + y * this.rawData.get(7) + z * this.rawData.get(11));
	}
	,identity: function() {
		this.rawData = openfl_Vector.toFloatVector(null,null,null,[1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0]);
	}
	,interpolateTo: function(toMat,percent) {
		var _g = 0;
		while(_g < 16) {
			var i = _g++;
			this.rawData.set(i,this.rawData.get(i) + (toMat.rawData.get(i) - this.rawData.get(i)) * percent);
		}
	}
	,invert: function() {
		var d = this.get_determinant();
		var invertable = Math.abs(d) > 0.00000000001;
		if(invertable) {
			d = 1 / d;
			var m11 = this.rawData.get(0);
			var m21 = this.rawData.get(4);
			var m31 = this.rawData.get(8);
			var m41 = this.rawData.get(12);
			var m12 = this.rawData.get(1);
			var m22 = this.rawData.get(5);
			var m32 = this.rawData.get(9);
			var m42 = this.rawData.get(13);
			var m13 = this.rawData.get(2);
			var m23 = this.rawData.get(6);
			var m33 = this.rawData.get(10);
			var m43 = this.rawData.get(14);
			var m14 = this.rawData.get(3);
			var m24 = this.rawData.get(7);
			var m34 = this.rawData.get(11);
			var m44 = this.rawData.get(15);
			this.rawData.set(0,d * (m22 * (m33 * m44 - m43 * m34) - m32 * (m23 * m44 - m43 * m24) + m42 * (m23 * m34 - m33 * m24)));
			this.rawData.set(1,-d * (m12 * (m33 * m44 - m43 * m34) - m32 * (m13 * m44 - m43 * m14) + m42 * (m13 * m34 - m33 * m14)));
			this.rawData.set(2,d * (m12 * (m23 * m44 - m43 * m24) - m22 * (m13 * m44 - m43 * m14) + m42 * (m13 * m24 - m23 * m14)));
			this.rawData.set(3,-d * (m12 * (m23 * m34 - m33 * m24) - m22 * (m13 * m34 - m33 * m14) + m32 * (m13 * m24 - m23 * m14)));
			this.rawData.set(4,-d * (m21 * (m33 * m44 - m43 * m34) - m31 * (m23 * m44 - m43 * m24) + m41 * (m23 * m34 - m33 * m24)));
			this.rawData.set(5,d * (m11 * (m33 * m44 - m43 * m34) - m31 * (m13 * m44 - m43 * m14) + m41 * (m13 * m34 - m33 * m14)));
			this.rawData.set(6,-d * (m11 * (m23 * m44 - m43 * m24) - m21 * (m13 * m44 - m43 * m14) + m41 * (m13 * m24 - m23 * m14)));
			this.rawData.set(7,d * (m11 * (m23 * m34 - m33 * m24) - m21 * (m13 * m34 - m33 * m14) + m31 * (m13 * m24 - m23 * m14)));
			this.rawData.set(8,d * (m21 * (m32 * m44 - m42 * m34) - m31 * (m22 * m44 - m42 * m24) + m41 * (m22 * m34 - m32 * m24)));
			this.rawData.set(9,-d * (m11 * (m32 * m44 - m42 * m34) - m31 * (m12 * m44 - m42 * m14) + m41 * (m12 * m34 - m32 * m14)));
			this.rawData.set(10,d * (m11 * (m22 * m44 - m42 * m24) - m21 * (m12 * m44 - m42 * m14) + m41 * (m12 * m24 - m22 * m14)));
			this.rawData.set(11,-d * (m11 * (m22 * m34 - m32 * m24) - m21 * (m12 * m34 - m32 * m14) + m31 * (m12 * m24 - m22 * m14)));
			this.rawData.set(12,-d * (m21 * (m32 * m43 - m42 * m33) - m31 * (m22 * m43 - m42 * m23) + m41 * (m22 * m33 - m32 * m23)));
			this.rawData.set(13,d * (m11 * (m32 * m43 - m42 * m33) - m31 * (m12 * m43 - m42 * m13) + m41 * (m12 * m33 - m32 * m13)));
			this.rawData.set(14,-d * (m11 * (m22 * m43 - m42 * m23) - m21 * (m12 * m43 - m42 * m13) + m41 * (m12 * m23 - m22 * m13)));
			this.rawData.set(15,d * (m11 * (m22 * m33 - m32 * m23) - m21 * (m12 * m33 - m32 * m13) + m31 * (m12 * m23 - m22 * m13)));
		}
		return invertable;
	}
	,pointAt: function(pos,at,up) {
		if(at == null) {
			at = new openfl_geom_Vector3D(0,0,-1);
		}
		if(up == null) {
			up = new openfl_geom_Vector3D(0,-1,0);
		}
		var dir = at.subtract(pos);
		var vup = up.clone();
		dir.normalize();
		vup.normalize();
		var dir2 = dir.clone();
		dir2.scaleBy(vup.dotProduct(dir));
		vup = vup.subtract(dir2);
		if(vup.get_length() > 0) {
			vup.normalize();
		} else if(dir.x != 0) {
			vup = new openfl_geom_Vector3D(-dir.y,dir.x,0);
		} else {
			vup = new openfl_geom_Vector3D(1,0,0);
		}
		var right = vup.crossProduct(dir);
		right.normalize();
		this.rawData.set(0,right.x);
		this.rawData.set(4,right.y);
		this.rawData.set(8,right.z);
		this.rawData.set(12,0.0);
		this.rawData.set(1,vup.x);
		this.rawData.set(5,vup.y);
		this.rawData.set(9,vup.z);
		this.rawData.set(13,0.0);
		this.rawData.set(2,dir.x);
		this.rawData.set(6,dir.y);
		this.rawData.set(10,dir.z);
		this.rawData.set(14,0.0);
		this.rawData.set(3,pos.x);
		this.rawData.set(7,pos.y);
		this.rawData.set(11,pos.z);
		this.rawData.set(15,1.0);
	}
	,prepend: function(rhs) {
		var m111 = rhs.rawData.get(0);
		var m121 = rhs.rawData.get(4);
		var m131 = rhs.rawData.get(8);
		var m141 = rhs.rawData.get(12);
		var m112 = rhs.rawData.get(1);
		var m122 = rhs.rawData.get(5);
		var m132 = rhs.rawData.get(9);
		var m142 = rhs.rawData.get(13);
		var m113 = rhs.rawData.get(2);
		var m123 = rhs.rawData.get(6);
		var m133 = rhs.rawData.get(10);
		var m143 = rhs.rawData.get(14);
		var m114 = rhs.rawData.get(3);
		var m124 = rhs.rawData.get(7);
		var m134 = rhs.rawData.get(11);
		var m144 = rhs.rawData.get(15);
		var m211 = this.rawData.get(0);
		var m221 = this.rawData.get(4);
		var m231 = this.rawData.get(8);
		var m241 = this.rawData.get(12);
		var m212 = this.rawData.get(1);
		var m222 = this.rawData.get(5);
		var m232 = this.rawData.get(9);
		var m242 = this.rawData.get(13);
		var m213 = this.rawData.get(2);
		var m223 = this.rawData.get(6);
		var m233 = this.rawData.get(10);
		var m243 = this.rawData.get(14);
		var m214 = this.rawData.get(3);
		var m224 = this.rawData.get(7);
		var m234 = this.rawData.get(11);
		var m244 = this.rawData.get(15);
		this.rawData.set(0,m111 * m211 + m112 * m221 + m113 * m231 + m114 * m241);
		this.rawData.set(1,m111 * m212 + m112 * m222 + m113 * m232 + m114 * m242);
		this.rawData.set(2,m111 * m213 + m112 * m223 + m113 * m233 + m114 * m243);
		this.rawData.set(3,m111 * m214 + m112 * m224 + m113 * m234 + m114 * m244);
		this.rawData.set(4,m121 * m211 + m122 * m221 + m123 * m231 + m124 * m241);
		this.rawData.set(5,m121 * m212 + m122 * m222 + m123 * m232 + m124 * m242);
		this.rawData.set(6,m121 * m213 + m122 * m223 + m123 * m233 + m124 * m243);
		this.rawData.set(7,m121 * m214 + m122 * m224 + m123 * m234 + m124 * m244);
		this.rawData.set(8,m131 * m211 + m132 * m221 + m133 * m231 + m134 * m241);
		this.rawData.set(9,m131 * m212 + m132 * m222 + m133 * m232 + m134 * m242);
		this.rawData.set(10,m131 * m213 + m132 * m223 + m133 * m233 + m134 * m243);
		this.rawData.set(11,m131 * m214 + m132 * m224 + m133 * m234 + m134 * m244);
		this.rawData.set(12,m141 * m211 + m142 * m221 + m143 * m231 + m144 * m241);
		this.rawData.set(13,m141 * m212 + m142 * m222 + m143 * m232 + m144 * m242);
		this.rawData.set(14,m141 * m213 + m142 * m223 + m143 * m233 + m144 * m243);
		this.rawData.set(15,m141 * m214 + m142 * m224 + m143 * m234 + m144 * m244);
	}
	,prependRotation: function(degrees,axis,pivotPoint) {
		var tz = 0;
		var ty = tz;
		var tx = ty;
		if(pivotPoint != null) {
			tx = pivotPoint.x;
			ty = pivotPoint.y;
			tz = pivotPoint.z;
		}
		var radian = degrees * Math.PI / 180;
		var cos = Math.cos(radian);
		var sin = Math.sin(radian);
		var x = axis.x;
		var y = axis.y;
		var z = axis.z;
		var x2 = x * x;
		var y2 = y * y;
		var z2 = z * z;
		var ls = x2 + y2 + z2;
		if(ls != 0) {
			var l = Math.sqrt(ls);
			x /= l;
			y /= l;
			z /= l;
			x2 /= ls;
			y2 /= ls;
			z2 /= ls;
		}
		var ccos = 1 - cos;
		var m = new openfl_geom_Matrix3D();
		var d = m.rawData;
		d.set(0,x2 + (y2 + z2) * cos);
		d.set(1,x * y * ccos + z * sin);
		d.set(2,x * z * ccos - y * sin);
		d.set(4,x * y * ccos - z * sin);
		d.set(5,y2 + (x2 + z2) * cos);
		d.set(6,y * z * ccos + x * sin);
		d.set(8,x * z * ccos + y * sin);
		d.set(9,y * z * ccos - x * sin);
		d.set(10,z2 + (x2 + y2) * cos);
		d.set(12,(tx * (y2 + z2) - x * (ty * y + tz * z)) * ccos + (ty * z - tz * y) * sin);
		d.set(13,(ty * (x2 + z2) - y * (tx * x + tz * z)) * ccos + (tz * x - tx * z) * sin);
		d.set(14,(tz * (x2 + y2) - z * (tx * x + ty * y)) * ccos + (tx * y - ty * x) * sin);
		this.prepend(m);
	}
	,prependScale: function(xScale,yScale,zScale) {
		this.prepend(new openfl_geom_Matrix3D(openfl_Vector.toFloatVector(null,null,null,[xScale,0.0,0.0,0.0,0.0,yScale,0.0,0.0,0.0,0.0,zScale,0.0,0.0,0.0,0.0,1.0])));
	}
	,prependTranslation: function(x,y,z) {
		var m = new openfl_geom_Matrix3D();
		m.set_position(new openfl_geom_Vector3D(x,y,z));
		this.prepend(m);
	}
	,recompose: function(components,orientationStyle) {
		if(orientationStyle == null) {
			orientationStyle = 1;
		}
		if(components.get_length() < 3 || components.get(2).x == 0 || components.get(2).y == 0 || components.get(2).z == 0) {
			return false;
		}
		this.identity();
		var scale = [];
		scale[0] = scale[1] = scale[2] = components.get(2).x;
		scale[4] = scale[5] = scale[6] = components.get(2).y;
		scale[8] = scale[9] = scale[10] = components.get(2).z;
		if(orientationStyle == 1) {
			var cx = Math.cos(components.get(1).x);
			var cy = Math.cos(components.get(1).y);
			var cz = Math.cos(components.get(1).z);
			var sx = Math.sin(components.get(1).x);
			var sy = Math.sin(components.get(1).y);
			var sz = Math.sin(components.get(1).z);
			this.rawData.set(0,cy * cz * scale[0]);
			this.rawData.set(1,cy * sz * scale[1]);
			this.rawData.set(2,-sy * scale[2]);
			this.rawData.set(3,0);
			this.rawData.set(4,(sx * sy * cz - cx * sz) * scale[4]);
			this.rawData.set(5,(sx * sy * sz + cx * cz) * scale[5]);
			this.rawData.set(6,sx * cy * scale[6]);
			this.rawData.set(7,0);
			this.rawData.set(8,(cx * sy * cz + sx * sz) * scale[8]);
			this.rawData.set(9,(cx * sy * sz - sx * cz) * scale[9]);
			this.rawData.set(10,cx * cy * scale[10]);
			this.rawData.set(11,0);
			this.rawData.set(12,components.get(0).x);
			this.rawData.set(13,components.get(0).y);
			this.rawData.set(14,components.get(0).z);
			this.rawData.set(15,1);
		} else {
			var x = components.get(1).x;
			var y = components.get(1).y;
			var z = components.get(1).z;
			var w = components.get(1).w;
			if(orientationStyle == 0) {
				x *= Math.sin(w / 2);
				y *= Math.sin(w / 2);
				z *= Math.sin(w / 2);
				w = Math.cos(w / 2);
			}
			this.rawData.set(0,(1 - 2 * y * y - 2 * z * z) * scale[0]);
			this.rawData.set(1,(2 * x * y + 2 * w * z) * scale[1]);
			this.rawData.set(2,(2 * x * z - 2 * w * y) * scale[2]);
			this.rawData.set(3,0);
			this.rawData.set(4,(2 * x * y - 2 * w * z) * scale[4]);
			this.rawData.set(5,(1 - 2 * x * x - 2 * z * z) * scale[5]);
			this.rawData.set(6,(2 * y * z + 2 * w * x) * scale[6]);
			this.rawData.set(7,0);
			this.rawData.set(8,(2 * x * z + 2 * w * y) * scale[8]);
			this.rawData.set(9,(2 * y * z - 2 * w * x) * scale[9]);
			this.rawData.set(10,(1 - 2 * x * x - 2 * y * y) * scale[10]);
			this.rawData.set(11,0);
			this.rawData.set(12,components.get(0).x);
			this.rawData.set(13,components.get(0).y);
			this.rawData.set(14,components.get(0).z);
			this.rawData.set(15,1);
		}
		if(components.get(2).x == 0) {
			this.rawData.set(0,1e-15);
		}
		if(components.get(2).y == 0) {
			this.rawData.set(5,1e-15);
		}
		if(components.get(2).z == 0) {
			this.rawData.set(10,1e-15);
		}
		return !(components.get(2).x == 0 || components.get(2).y == 0 || components.get(2).y == 0);
	}
	,transformVector: function(v) {
		var x = v.x;
		var y = v.y;
		var z = v.z;
		return new openfl_geom_Vector3D(x * this.rawData.get(0) + y * this.rawData.get(4) + z * this.rawData.get(8) + this.rawData.get(12),x * this.rawData.get(1) + y * this.rawData.get(5) + z * this.rawData.get(9) + this.rawData.get(13),x * this.rawData.get(2) + y * this.rawData.get(6) + z * this.rawData.get(10) + this.rawData.get(14),x * this.rawData.get(3) + y * this.rawData.get(7) + z * this.rawData.get(11) + this.rawData.get(15));
	}
	,transformVectors: function(vin,vout) {
		var i = 0;
		var x;
		var y;
		var z;
		while(i + 3 <= vin.get_length()) {
			x = vin.get(i);
			y = vin.get(i + 1);
			z = vin.get(i + 2);
			vout.set(i,x * this.rawData.get(0) + y * this.rawData.get(4) + z * this.rawData.get(8) + this.rawData.get(12));
			vout.set(i + 1,x * this.rawData.get(1) + y * this.rawData.get(5) + z * this.rawData.get(9) + this.rawData.get(13));
			vout.set(i + 2,x * this.rawData.get(2) + y * this.rawData.get(6) + z * this.rawData.get(10) + this.rawData.get(14));
			i += 3;
		}
	}
	,transpose: function() {
		var oRawData = this.rawData.copy();
		this.rawData.set(1,oRawData.get(4));
		this.rawData.set(2,oRawData.get(8));
		this.rawData.set(3,oRawData.get(12));
		this.rawData.set(4,oRawData.get(1));
		this.rawData.set(6,oRawData.get(9));
		this.rawData.set(7,oRawData.get(13));
		this.rawData.set(8,oRawData.get(2));
		this.rawData.set(9,oRawData.get(6));
		this.rawData.set(11,oRawData.get(14));
		this.rawData.set(12,oRawData.get(3));
		this.rawData.set(13,oRawData.get(7));
		this.rawData.set(14,oRawData.get(11));
	}
	,get_determinant: function() {
		return (this.rawData.get(0) * this.rawData.get(5) - this.rawData.get(4) * this.rawData.get(1)) * (this.rawData.get(10) * this.rawData.get(15) - this.rawData.get(14) * this.rawData.get(11)) - (this.rawData.get(0) * this.rawData.get(9) - this.rawData.get(8) * this.rawData.get(1)) * (this.rawData.get(6) * this.rawData.get(15) - this.rawData.get(14) * this.rawData.get(7)) + (this.rawData.get(0) * this.rawData.get(13) - this.rawData.get(12) * this.rawData.get(1)) * (this.rawData.get(6) * this.rawData.get(11) - this.rawData.get(10) * this.rawData.get(7)) + (this.rawData.get(4) * this.rawData.get(9) - this.rawData.get(8) * this.rawData.get(5)) * (this.rawData.get(2) * this.rawData.get(15) - this.rawData.get(14) * this.rawData.get(3)) - (this.rawData.get(4) * this.rawData.get(13) - this.rawData.get(12) * this.rawData.get(5)) * (this.rawData.get(2) * this.rawData.get(11) - this.rawData.get(10) * this.rawData.get(3)) + (this.rawData.get(8) * this.rawData.get(13) - this.rawData.get(12) * this.rawData.get(9)) * (this.rawData.get(2) * this.rawData.get(7) - this.rawData.get(6) * this.rawData.get(3));
	}
	,get_position: function() {
		return new openfl_geom_Vector3D(this.rawData.get(12),this.rawData.get(13),this.rawData.get(14));
	}
	,set_position: function(val) {
		this.rawData.set(12,val.x);
		this.rawData.set(13,val.y);
		this.rawData.set(14,val.z);
		return val;
	}
	,__class__: openfl_geom_Matrix3D
	,__properties__: {set_position:"set_position",get_position:"get_position",get_determinant:"get_determinant"}
};
var openfl_geom_Orientation3D = {};
openfl_geom_Orientation3D.fromString = function(value) {
	switch(value) {
	case "axisAngle":
		return 0;
	case "eulerAngles":
		return 1;
	case "quaternion":
		return 2;
	default:
		return null;
	}
};
openfl_geom_Orientation3D.toString = function(this1) {
	switch(this1) {
	case 0:
		return "axisAngle";
	case 1:
		return "eulerAngles";
	case 2:
		return "quaternion";
	default:
		return null;
	}
};
var openfl_geom_Transform = function(displayObject) {
	this.__colorTransform = new openfl_geom_ColorTransform();
	this.concatenatedColorTransform = new openfl_geom_ColorTransform();
	this.pixelBounds = new openfl_geom_Rectangle();
	this.__displayObject = displayObject;
	this.__hasMatrix = true;
};
$hxClasses["openfl.geom.Transform"] = openfl_geom_Transform;
openfl_geom_Transform.__name__ = "openfl.geom.Transform";
openfl_geom_Transform.prototype = {
	concatenatedColorTransform: null
	,pixelBounds: null
	,__colorTransform: null
	,__displayObject: null
	,__hasMatrix: null
	,__hasMatrix3D: null
	,get_colorTransform: function() {
		return this.__colorTransform;
	}
	,set_colorTransform: function(value) {
		if(!this.__colorTransform.__equals(value,false)) {
			this.__colorTransform.__copyFrom(value);
			if(value != null) {
				this.__displayObject.set_alpha(value.alphaMultiplier);
			}
			var _this = this.__displayObject;
			if(!_this.__renderDirty) {
				_this.__renderDirty = true;
				_this.__setParentRenderDirty();
			}
		}
		return this.__colorTransform;
	}
	,get_concatenatedMatrix: function() {
		if(this.__hasMatrix) {
			return this.__displayObject.__getWorldTransform().clone();
		}
		return null;
	}
	,get_matrix: function() {
		if(this.__hasMatrix) {
			return this.__displayObject.__transform.clone();
		}
		return null;
	}
	,set_matrix: function(value) {
		if(value == null) {
			this.__hasMatrix = false;
			return null;
		}
		this.__hasMatrix = true;
		this.__hasMatrix3D = false;
		if(this.__displayObject != null) {
			this.__setTransform(value.a,value.b,value.c,value.d,value.tx,value.ty);
		}
		return value;
	}
	,get_matrix3D: function() {
		if(this.__hasMatrix3D) {
			var matrix = this.__displayObject.__transform;
			return new openfl_geom_Matrix3D(openfl_Vector.toFloatVector(null,null,null,[matrix.a,matrix.b,0.0,0.0,matrix.c,matrix.d,0.0,0.0,0.0,0.0,1.0,0.0,matrix.tx,matrix.ty,0.0,1.0]));
		}
		return null;
	}
	,set_matrix3D: function(value) {
		if(value == null) {
			this.__hasMatrix3D = false;
			return null;
		}
		this.__hasMatrix = false;
		this.__hasMatrix3D = true;
		this.__setTransform(value.rawData.get(0),value.rawData.get(1),value.rawData.get(5),value.rawData.get(6),value.rawData.get(12),value.rawData.get(13));
		return value;
	}
	,__setTransform: function(a,b,c,d,tx,ty) {
		if(this.__displayObject != null) {
			var transform = this.__displayObject.__transform;
			if(transform.a == a && transform.b == b && transform.c == c && transform.d == d && transform.tx == tx && transform.ty == ty) {
				return;
			}
			var scaleX = 0.0;
			var scaleY = 0.0;
			if(b == 0) {
				scaleX = a;
			} else {
				scaleX = Math.sqrt(a * a + b * b);
			}
			if(c == 0) {
				scaleY = d;
			} else {
				scaleY = Math.sqrt(c * c + d * d);
			}
			this.__displayObject.__scaleX = scaleX;
			this.__displayObject.__scaleY = scaleY;
			var rotation = 180 / Math.PI * Math.atan2(d,c) - 90;
			if(rotation != this.__displayObject.__rotation) {
				this.__displayObject.__rotation = rotation;
				var radians = rotation * (Math.PI / 180);
				this.__displayObject.__rotationSine = Math.sin(radians);
				this.__displayObject.__rotationCosine = Math.cos(radians);
			}
			transform.a = a;
			transform.b = b;
			transform.c = c;
			transform.d = d;
			transform.tx = tx;
			transform.ty = ty;
			this.__displayObject.__setTransformDirty();
		}
	}
	,__class__: openfl_geom_Transform
	,__properties__: {set_matrix3D:"set_matrix3D",get_matrix3D:"get_matrix3D",set_matrix:"set_matrix",get_matrix:"get_matrix",get_concatenatedMatrix:"get_concatenatedMatrix",set_colorTransform:"set_colorTransform",get_colorTransform:"get_colorTransform"}
};
var openfl_geom_Vector3D = function(x,y,z,w) {
	if(w == null) {
		w = 0;
	}
	if(z == null) {
		z = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.w = w;
	this.x = x;
	this.y = y;
	this.z = z;
};
$hxClasses["openfl.geom.Vector3D"] = openfl_geom_Vector3D;
openfl_geom_Vector3D.__name__ = "openfl.geom.Vector3D";
openfl_geom_Vector3D.__properties__ = {get_Z_AXIS:"get_Z_AXIS",get_Y_AXIS:"get_Y_AXIS",get_X_AXIS:"get_X_AXIS"};
openfl_geom_Vector3D.angleBetween = function(a,b) {
	var la = a.get_length();
	var lb = b.get_length();
	var dot = a.dotProduct(b);
	if(la != 0) {
		dot /= la;
	}
	if(lb != 0) {
		dot /= lb;
	}
	return Math.acos(dot);
};
openfl_geom_Vector3D.distance = function(pt1,pt2) {
	var x = pt2.x - pt1.x;
	var y = pt2.y - pt1.y;
	var z = pt2.z - pt1.z;
	return Math.sqrt(x * x + y * y + z * z);
};
openfl_geom_Vector3D.get_X_AXIS = function() {
	return new openfl_geom_Vector3D(1,0,0);
};
openfl_geom_Vector3D.get_Y_AXIS = function() {
	return new openfl_geom_Vector3D(0,1,0);
};
openfl_geom_Vector3D.get_Z_AXIS = function() {
	return new openfl_geom_Vector3D(0,0,1);
};
openfl_geom_Vector3D.prototype = {
	w: null
	,x: null
	,y: null
	,z: null
	,add: function(a) {
		return new openfl_geom_Vector3D(this.x + a.x,this.y + a.y,this.z + a.z);
	}
	,clone: function() {
		return new openfl_geom_Vector3D(this.x,this.y,this.z,this.w);
	}
	,copyFrom: function(sourceVector3D) {
		this.x = sourceVector3D.x;
		this.y = sourceVector3D.y;
		this.z = sourceVector3D.z;
	}
	,crossProduct: function(a) {
		return new openfl_geom_Vector3D(this.y * a.z - this.z * a.y,this.z * a.x - this.x * a.z,this.x * a.y - this.y * a.x,1);
	}
	,decrementBy: function(a) {
		this.x -= a.x;
		this.y -= a.y;
		this.z -= a.z;
	}
	,dotProduct: function(a) {
		return this.x * a.x + this.y * a.y + this.z * a.z;
	}
	,equals: function(toCompare,allFour) {
		if(allFour == null) {
			allFour = false;
		}
		if(this.x == toCompare.x && this.y == toCompare.y && this.z == toCompare.z) {
			if(allFour) {
				return this.w == toCompare.w;
			} else {
				return true;
			}
		} else {
			return false;
		}
	}
	,incrementBy: function(a) {
		this.x += a.x;
		this.y += a.y;
		this.z += a.z;
	}
	,nearEquals: function(toCompare,tolerance,allFour) {
		if(allFour == null) {
			allFour = false;
		}
		if(Math.abs(this.x - toCompare.x) < tolerance && Math.abs(this.y - toCompare.y) < tolerance && Math.abs(this.z - toCompare.z) < tolerance) {
			if(!(!allFour)) {
				return Math.abs(this.w - toCompare.w) < tolerance;
			} else {
				return true;
			}
		} else {
			return false;
		}
	}
	,negate: function() {
		this.x *= -1;
		this.y *= -1;
		this.z *= -1;
	}
	,normalize: function() {
		var l = this.get_length();
		if(l != 0) {
			this.x /= l;
			this.y /= l;
			this.z /= l;
		}
		return l;
	}
	,project: function() {
		this.x /= this.w;
		this.y /= this.w;
		this.z /= this.w;
	}
	,scaleBy: function(s) {
		this.x *= s;
		this.y *= s;
		this.z *= s;
	}
	,setTo: function(xa,ya,za) {
		this.x = xa;
		this.y = ya;
		this.z = za;
	}
	,subtract: function(a) {
		return new openfl_geom_Vector3D(this.x - a.x,this.y - a.y,this.z - a.z);
	}
	,toString: function() {
		return "Vector3D(" + this.x + ", " + this.y + ", " + this.z + ")";
	}
	,get_length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
	}
	,get_lengthSquared: function() {
		return this.x * this.x + this.y * this.y + this.z * this.z;
	}
	,__class__: openfl_geom_Vector3D
	,__properties__: {get_lengthSquared:"get_lengthSquared",get_length:"get_length"}
};
var openfl_media_ID3Info = function() {
};
$hxClasses["openfl.media.ID3Info"] = openfl_media_ID3Info;
openfl_media_ID3Info.__name__ = "openfl.media.ID3Info";
openfl_media_ID3Info.prototype = {
	album: null
	,artist: null
	,comment: null
	,genre: null
	,songName: null
	,track: null
	,year: null
	,__class__: openfl_media_ID3Info
};
var openfl_media_Sound = function(stream,context) {
	openfl_events_EventDispatcher.call(this,this);
	this.bytesLoaded = 0;
	this.bytesTotal = 0;
	this.isBuffering = false;
	this.url = null;
	if(stream != null) {
		this.load(stream,context);
	}
};
$hxClasses["openfl.media.Sound"] = openfl_media_Sound;
openfl_media_Sound.__name__ = "openfl.media.Sound";
openfl_media_Sound.fromAudioBuffer = function(buffer) {
	var sound = new openfl_media_Sound();
	sound.__buffer = buffer;
	return sound;
};
openfl_media_Sound.fromFile = function(path) {
	return openfl_media_Sound.fromAudioBuffer(lime_media_AudioBuffer.fromFile(path));
};
openfl_media_Sound.loadFromFile = function(path) {
	return lime_media_AudioBuffer.loadFromFile(path).then(function(audioBuffer) {
		return lime_app_Future.withValue(openfl_media_Sound.fromAudioBuffer(audioBuffer));
	});
};
openfl_media_Sound.loadFromFiles = function(paths) {
	return lime_media_AudioBuffer.loadFromFiles(paths).then(function(audioBuffer) {
		return lime_app_Future.withValue(openfl_media_Sound.fromAudioBuffer(audioBuffer));
	});
};
openfl_media_Sound.__super__ = openfl_events_EventDispatcher;
openfl_media_Sound.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	bytesLoaded: null
	,bytesTotal: null
	,isBuffering: null
	,url: null
	,__buffer: null
	,close: function() {
		if(this.__buffer != null) {
			this.__buffer.dispose();
			this.__buffer = null;
		}
	}
	,load: function(stream,context) {
		var _gthis = this;
		this.url = stream.url;
		var defaultLibrary = lime_utils_Assets.getLibrary("default");
		if(defaultLibrary != null && Object.prototype.hasOwnProperty.call(defaultLibrary.cachedAudioBuffers.h,this.url)) {
			this.AudioBuffer_onURLLoad(defaultLibrary.cachedAudioBuffers.h[this.url]);
		} else {
			lime_media_AudioBuffer.loadFromFile(this.url).onComplete($bind(this,this.AudioBuffer_onURLLoad)).onError(function(_) {
				_gthis.AudioBuffer_onURLLoad(null);
			});
		}
	}
	,loadCompressedDataFromByteArray: function(bytes,bytesLength) {
		if(bytes == null || bytesLength <= 0) {
			this.dispatchEvent(new openfl_events_IOErrorEvent("ioError"));
			return;
		}
		if(UInt.gt(bytes.position,0) || UInt.gt(openfl_utils_ByteArray.get_length(bytes),bytesLength)) {
			var length = bytesLength;
			if(length == null) {
				length = 0;
			}
			var this1 = new openfl_utils_ByteArrayData(length);
			var copy = this1;
			var offset = bytes.position;
			var length = bytesLength;
			if(length == null) {
				length = 0;
			}
			if(offset == null) {
				offset = 0;
			}
			copy.writeBytes(bytes,offset,length);
			bytes = copy;
		}
		this.__buffer = lime_media_AudioBuffer.fromBytes(openfl_utils_ByteArray.toBytes(bytes));
		if(this.__buffer == null) {
			this.dispatchEvent(new openfl_events_IOErrorEvent("ioError"));
		} else {
			this.dispatchEvent(new openfl_events_Event("complete"));
		}
	}
	,loadPCMFromByteArray: function(bytes,samples,format,stereo,sampleRate) {
		if(sampleRate == null) {
			sampleRate = 44100;
		}
		if(stereo == null) {
			stereo = true;
		}
		if(format == null) {
			format = "float";
		}
		if(bytes == null) {
			this.dispatchEvent(new openfl_events_IOErrorEvent("ioError"));
			return;
		}
		var bitsPerSample = format == "float" ? 32 : 16;
		var channels = stereo ? 2 : 1;
		var bytesLength = samples * channels * (bitsPerSample / 8) | 0;
		if(UInt.gt(bytes.position,0) || UInt.gt(openfl_utils_ByteArray.get_length(bytes),bytesLength)) {
			var length = bytesLength;
			if(length == null) {
				length = 0;
			}
			var this1 = new openfl_utils_ByteArrayData(length);
			var copy = this1;
			var offset = bytes.position;
			var length = bytesLength;
			if(length == null) {
				length = 0;
			}
			if(offset == null) {
				offset = 0;
			}
			copy.writeBytes(bytes,offset,length);
			bytes = copy;
		}
		var audioBuffer = new lime_media_AudioBuffer();
		audioBuffer.bitsPerSample = bitsPerSample;
		audioBuffer.channels = channels;
		var elements = null;
		var array = null;
		var vector = null;
		var view = null;
		var buffer = openfl_utils_ByteArray.toArrayBuffer(bytes);
		var len = null;
		var this1;
		if(elements != null) {
			this1 = new Uint8Array(elements);
		} else if(array != null) {
			this1 = new Uint8Array(array);
		} else if(vector != null) {
			this1 = new Uint8Array(vector.__array);
		} else if(view != null) {
			this1 = new Uint8Array(view);
		} else if(buffer != null) {
			if(len == null) {
				this1 = new Uint8Array(buffer,0);
			} else {
				this1 = new Uint8Array(buffer,0,len);
			}
		} else {
			this1 = null;
		}
		audioBuffer.data = this1;
		audioBuffer.sampleRate = sampleRate | 0;
		this.__buffer = audioBuffer;
		this.dispatchEvent(new openfl_events_Event("complete"));
	}
	,play: function(startTime,loops,sndTransform) {
		if(loops == null) {
			loops = 0;
		}
		if(startTime == null) {
			startTime = 0.0;
		}
		if(this.__buffer == null || openfl_media_SoundMixer.__soundChannels.length >= 32) {
			return null;
		}
		if(sndTransform == null) {
			sndTransform = new openfl_media_SoundTransform();
		} else {
			sndTransform = sndTransform.clone();
		}
		var pan = openfl_media_SoundMixer.__soundTransform.pan + sndTransform.pan;
		if(pan > 1) {
			pan = 1;
		}
		if(pan < -1) {
			pan = -1;
		}
		var volume = openfl_media_SoundMixer.__soundTransform.volume * sndTransform.volume;
		var source = new lime_media_AudioSource(this.__buffer);
		source.offset = startTime | 0;
		if(loops > 1) {
			source.set_loops(loops - 1);
		}
		source.set_gain(volume);
		var position = source.get_position();
		position.x = pan;
		position.z = -1 * Math.sqrt(1 - Math.pow(pan,2));
		source.set_position(position);
		return new openfl_media_SoundChannel(source,sndTransform);
	}
	,get_id3: function() {
		return new openfl_media_ID3Info();
	}
	,get_length: function() {
		if(this.__buffer != null) {
			return this.__buffer.get_src().duration() * 1000 | 0;
		}
		return 0;
	}
	,AudioBuffer_onURLLoad: function(buffer) {
		if(buffer == null) {
			this.dispatchEvent(new openfl_events_IOErrorEvent("ioError"));
		} else {
			this.__buffer = buffer;
			this.dispatchEvent(new openfl_events_Event("complete"));
		}
	}
	,__class__: openfl_media_Sound
	,__properties__: {get_length:"get_length",get_id3:"get_id3"}
});
var openfl_media_SoundChannel = function(source,soundTransform) {
	openfl_events_EventDispatcher.call(this,this);
	this.leftPeak = 1;
	this.rightPeak = 1;
	if(soundTransform != null) {
		this.__soundTransform = soundTransform;
	} else {
		this.__soundTransform = new openfl_media_SoundTransform();
	}
	if(source != null) {
		this.__source = source;
		this.__source.onComplete.add($bind(this,this.source_onComplete));
		this.__isValid = true;
		this.__source.play();
	}
	openfl_media_SoundMixer.__registerSoundChannel(this);
};
$hxClasses["openfl.media.SoundChannel"] = openfl_media_SoundChannel;
openfl_media_SoundChannel.__name__ = "openfl.media.SoundChannel";
openfl_media_SoundChannel.__super__ = openfl_events_EventDispatcher;
openfl_media_SoundChannel.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	leftPeak: null
	,rightPeak: null
	,__isValid: null
	,__soundTransform: null
	,__source: null
	,stop: function() {
		openfl_media_SoundMixer.__unregisterSoundChannel(this);
		if(!this.__isValid) {
			return;
		}
		this.__source.stop();
		this.__dispose();
	}
	,__dispose: function() {
		if(!this.__isValid) {
			return;
		}
		this.__source.onComplete.remove($bind(this,this.source_onComplete));
		this.__source.dispose();
		this.__source = null;
		this.__isValid = false;
	}
	,__updateTransform: function() {
		this.set_soundTransform(this.get_soundTransform());
	}
	,get_position: function() {
		if(!this.__isValid) {
			return 0;
		}
		return this.__source.get_currentTime() + this.__source.offset;
	}
	,set_position: function(value) {
		if(!this.__isValid) {
			return 0;
		}
		this.__source.set_currentTime((value | 0) - this.__source.offset);
		return value;
	}
	,get_soundTransform: function() {
		return this.__soundTransform.clone();
	}
	,set_soundTransform: function(value) {
		if(value != null) {
			this.__soundTransform.pan = value.pan;
			this.__soundTransform.volume = value.volume;
			var pan = openfl_media_SoundMixer.__soundTransform.pan + this.__soundTransform.pan;
			if(pan < -1) {
				pan = -1;
			}
			if(pan > 1) {
				pan = 1;
			}
			var volume = openfl_media_SoundMixer.__soundTransform.volume * this.__soundTransform.volume;
			if(this.__isValid) {
				this.__source.set_gain(volume);
				var position = this.__source.get_position();
				position.x = pan;
				position.z = -1 * Math.sqrt(1 - Math.pow(pan,2));
				this.__source.set_position(position);
				return value;
			}
		}
		return value;
	}
	,source_onComplete: function() {
		openfl_media_SoundMixer.__unregisterSoundChannel(this);
		this.__dispose();
		this.dispatchEvent(new openfl_events_Event("soundComplete"));
	}
	,__class__: openfl_media_SoundChannel
	,__properties__: {set_soundTransform:"set_soundTransform",get_soundTransform:"get_soundTransform",set_position:"set_position",get_position:"get_position"}
});
var openfl_media_SoundLoaderContext = function(bufferTime,checkPolicyFile) {
	if(checkPolicyFile == null) {
		checkPolicyFile = false;
	}
	if(bufferTime == null) {
		bufferTime = 1000;
	}
	this.bufferTime = bufferTime;
	this.checkPolicyFile = checkPolicyFile;
};
$hxClasses["openfl.media.SoundLoaderContext"] = openfl_media_SoundLoaderContext;
openfl_media_SoundLoaderContext.__name__ = "openfl.media.SoundLoaderContext";
openfl_media_SoundLoaderContext.prototype = {
	bufferTime: null
	,checkPolicyFile: null
	,__class__: openfl_media_SoundLoaderContext
};
var openfl_media_SoundTransform = function(vol,panning) {
	if(panning == null) {
		panning = 0;
	}
	if(vol == null) {
		vol = 1;
	}
	this.volume = vol;
	this.pan = panning;
	this.leftToLeft = 0;
	this.leftToRight = 0;
	this.rightToLeft = 0;
	this.rightToRight = 0;
};
$hxClasses["openfl.media.SoundTransform"] = openfl_media_SoundTransform;
openfl_media_SoundTransform.__name__ = "openfl.media.SoundTransform";
openfl_media_SoundTransform.prototype = {
	leftToLeft: null
	,leftToRight: null
	,pan: null
	,rightToLeft: null
	,rightToRight: null
	,volume: null
	,clone: function() {
		return new openfl_media_SoundTransform(this.volume,this.pan);
	}
	,__class__: openfl_media_SoundTransform
};
var openfl_media_SoundMixer = function() { };
$hxClasses["openfl.media.SoundMixer"] = openfl_media_SoundMixer;
openfl_media_SoundMixer.__name__ = "openfl.media.SoundMixer";
openfl_media_SoundMixer.__properties__ = {set_soundTransform:"set_soundTransform",get_soundTransform:"get_soundTransform"};
openfl_media_SoundMixer.areSoundsInaccessible = function() {
	return false;
};
openfl_media_SoundMixer.stopAll = function() {
	var _g = 0;
	var _g1 = openfl_media_SoundMixer.__soundChannels;
	while(_g < _g1.length) {
		var channel = _g1[_g];
		++_g;
		channel.stop();
	}
};
openfl_media_SoundMixer.__registerSoundChannel = function(soundChannel) {
	openfl_media_SoundMixer.__soundChannels.push(soundChannel);
};
openfl_media_SoundMixer.__unregisterSoundChannel = function(soundChannel) {
	HxOverrides.remove(openfl_media_SoundMixer.__soundChannels,soundChannel);
};
openfl_media_SoundMixer.get_soundTransform = function() {
	return openfl_media_SoundMixer.__soundTransform;
};
openfl_media_SoundMixer.set_soundTransform = function(value) {
	openfl_media_SoundMixer.__soundTransform = value.clone();
	var _g = 0;
	var _g1 = openfl_media_SoundMixer.__soundChannels;
	while(_g < _g1.length) {
		var channel = _g1[_g];
		++_g;
		channel.__updateTransform();
	}
	return value;
};
var openfl_net_NetConnection = function() {
	openfl_events_EventDispatcher.call(this);
};
$hxClasses["openfl.net.NetConnection"] = openfl_net_NetConnection;
openfl_net_NetConnection.__name__ = "openfl.net.NetConnection";
openfl_net_NetConnection.__super__ = openfl_events_EventDispatcher;
openfl_net_NetConnection.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	connect: function(command,p1,p2,p3,p4,p5) {
		if(command != null) {
			throw haxe_Exception.thrown("Error: Can only connect in \"HTTP streaming\" mode");
		}
		this.dispatchEvent(new openfl_events_NetStatusEvent("netStatus",false,true,{ code : "NetConnection.Connect.Success"}));
	}
	,__class__: openfl_net_NetConnection
});
var openfl_net_NetStream = function(connection,peerID) {
	openfl_events_EventDispatcher.call(this);
	this.__connection = connection;
	this.__soundTransform = new openfl_media_SoundTransform();
	this.__video = window.document.createElement("video");
	this.__video.setAttribute("playsinline","");
	this.__video.setAttribute("webkit-playsinline","");
	this.__video.setAttribute("crossorigin","anonymous");
	this.__video.addEventListener("error",$bind(this,this.video_onError),false);
	this.__video.addEventListener("waiting",$bind(this,this.video_onWaiting),false);
	this.__video.addEventListener("ended",$bind(this,this.video_onEnd),false);
	this.__video.addEventListener("pause",$bind(this,this.video_onPause),false);
	this.__video.addEventListener("seeking",$bind(this,this.video_onSeeking),false);
	this.__video.addEventListener("playing",$bind(this,this.video_onPlaying),false);
	this.__video.addEventListener("timeupdate",$bind(this,this.video_onTimeUpdate),false);
	this.__video.addEventListener("loadstart",$bind(this,this.video_onLoadStart),false);
	this.__video.addEventListener("stalled",$bind(this,this.video_onStalled),false);
	this.__video.addEventListener("durationchanged",$bind(this,this.video_onDurationChanged),false);
	this.__video.addEventListener("canplay",$bind(this,this.video_onCanPlay),false);
	this.__video.addEventListener("canplaythrough",$bind(this,this.video_onCanPlayThrough),false);
	this.__video.addEventListener("loadedmetadata",$bind(this,this.video_onLoadMetaData),false);
};
$hxClasses["openfl.net.NetStream"] = openfl_net_NetStream;
openfl_net_NetStream.__name__ = "openfl.net.NetStream";
openfl_net_NetStream.__super__ = openfl_events_EventDispatcher;
openfl_net_NetStream.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	audioCodec: null
	,bufferLength: null
	,bufferTime: null
	,bytesLoaded: null
	,bytesTotal: null
	,checkPolicyFile: null
	,client: null
	,currentFPS: null
	,decodedFrames: null
	,liveDelay: null
	,objectEncoding: null
	,time: null
	,videoCode: null
	,__closed: null
	,__connection: null
	,__soundTransform: null
	,__timer: null
	,__seeking: null
	,__video: null
	,close: function() {
		if(this.__video == null) {
			return;
		}
		this.__closed = true;
		this.__video.pause();
		this.__video.src = "";
		this.time = 0;
	}
	,dispose: function() {
		this.close();
		this.__video = null;
	}
	,pause: function() {
		if(this.__video != null) {
			this.__video.pause();
		}
	}
	,play: function(url,p1,p2,p3,p4,p5) {
		if(this.__video == null) {
			return;
		}
		this.__video.volume = openfl_media_SoundMixer.__soundTransform.volume * this.__soundTransform.volume;
		if(typeof(url) == "string") {
			this.__video.src = url;
		} else {
			this.__video.srcObject = url;
		}
		this.__video.play();
	}
	,requestVideoStatus: function() {
		var _gthis = this;
		if(this.__video == null) {
			return;
		}
		if(this.__timer == null) {
			this.__timer = new haxe_Timer(1);
		}
		this.__timer.run = function() {
			if(_gthis.__video.paused) {
				_gthis.__playStatus("NetStream.Play.pause");
			} else {
				_gthis.__playStatus("NetStream.Play.playing");
			}
			_gthis.__timer.stop();
		};
	}
	,resume: function() {
		if(this.__video != null) {
			this.__video.play();
		}
	}
	,seek: function(time) {
		if(this.__video == null) {
			return;
		}
		if(time < 0) {
			time = 0;
		} else if(time > this.__video.duration) {
			time = this.__video.duration;
		}
		this.set___seeking(true);
		this.__connection.dispatchEvent(new openfl_events_NetStatusEvent("netStatus",false,false,{ code : "NetStream.SeekStart.Notify"}));
		this.__video.currentTime = time;
	}
	,togglePause: function() {
		if(this.__video == null) {
			return;
		}
		if(this.__video.paused) {
			this.__video.play();
		} else {
			this.__video.pause();
		}
	}
	,__playStatus: function(code) {
		if(this.__video == null) {
			return;
		}
		if(this.client != null) {
			try {
				var handler = this.client.onPlayStatus;
				handler({ code : code, duration : this.__video.duration, position : this.__video.currentTime, speed : this.__video.playbackRate, start : this.__video.startTime});
			} catch( _g ) {
				haxe_NativeStackTrace.lastError = _g;
			}
		}
	}
	,video_onCanPlay: function(event) {
		this.__playStatus("NetStream.Play.canplay");
	}
	,video_onCanPlayThrough: function(event) {
		this.__playStatus("NetStream.Play.canplaythrough");
	}
	,video_onDurationChanged: function(event) {
		this.__playStatus("NetStream.Play.durationchanged");
	}
	,video_onEnd: function(event) {
		this.__connection.dispatchEvent(new openfl_events_NetStatusEvent("netStatus",false,false,{ code : "NetStream.Play.Stop"}));
		this.__connection.dispatchEvent(new openfl_events_NetStatusEvent("netStatus",false,false,{ code : "NetStream.Play.Complete"}));
		this.__playStatus("NetStream.Play.Complete");
	}
	,video_onError: function(event) {
		this.__connection.dispatchEvent(new openfl_events_NetStatusEvent("netStatus",false,false,{ code : "NetStream.Play.Stop"}));
		this.__playStatus("NetStream.Play.error");
	}
	,video_onLoadMetaData: function(event) {
		if(this.__video == null) {
			return;
		}
		if(this.client != null) {
			try {
				var handler = this.client.onMetaData;
				handler({ width : this.__video.videoWidth, height : this.__video.videoHeight, duration : this.__video.duration});
			} catch( _g ) {
				haxe_NativeStackTrace.lastError = _g;
			}
		}
	}
	,video_onLoadStart: function(event) {
		this.__playStatus("NetStream.Play.loadstart");
	}
	,video_onPause: function(event) {
		this.__playStatus("NetStream.Play.pause");
	}
	,video_onPlaying: function(event) {
		this.__connection.dispatchEvent(new openfl_events_NetStatusEvent("netStatus",false,false,{ code : "NetStream.Play.Start"}));
		this.__playStatus("NetStream.Play.playing");
	}
	,video_onSeeking: function(event) {
		this.__playStatus("NetStream.Play.seeking");
		this.__connection.dispatchEvent(new openfl_events_NetStatusEvent("netStatus",false,false,{ code : "NetStream.Seek.Complete"}));
	}
	,video_onStalled: function(event) {
		this.__playStatus("NetStream.Play.stalled");
	}
	,video_onTimeUpdate: function(event) {
		if(this.__video == null) {
			return;
		}
		this.time = this.__video.currentTime;
		this.__playStatus("NetStream.Play.timeupdate");
	}
	,video_onWaiting: function(event) {
		this.__playStatus("NetStream.Play.waiting");
	}
	,get_soundTransform: function() {
		return this.__soundTransform.clone();
	}
	,set_soundTransform: function(value) {
		if(value != null) {
			this.__soundTransform.pan = value.pan;
			this.__soundTransform.volume = value.volume;
			if(this.__video != null) {
				this.__video.volume = openfl_media_SoundMixer.__soundTransform.volume * this.__soundTransform.volume;
			}
		}
		return value;
	}
	,get_speed: function() {
		if(this.__video != null) {
			return this.__video.playbackRate;
		} else {
			return 1;
		}
	}
	,set_speed: function(value) {
		if(this.__video != null) {
			return this.__video.playbackRate = value;
		} else {
			return value;
		}
	}
	,get___seeking: function() {
		if(!this.__seeking) {
			return this.__video.seeking;
		} else {
			return true;
		}
	}
	,set___seeking: function(value) {
		return this.__seeking = value;
	}
	,__class__: openfl_net_NetStream
	,__properties__: {set___seeking:"set___seeking",get___seeking:"get___seeking",set_speed:"set_speed",get_speed:"get_speed",set_soundTransform:"set_soundTransform",get_soundTransform:"get_soundTransform"}
});
var openfl_net_SharedObject = function() {
	openfl_events_EventDispatcher.call(this);
	this.client = this;
	this.objectEncoding = openfl_net_SharedObject.defaultObjectEncoding;
};
$hxClasses["openfl.net.SharedObject"] = openfl_net_SharedObject;
openfl_net_SharedObject.__name__ = "openfl.net.SharedObject";
openfl_net_SharedObject.getLocal = function(name,localPath,secure) {
	if(secure == null) {
		secure = false;
	}
	var illegalValues = [" ","~","%","&","\\",";",":","\"","'",",","<",">","?","#"];
	var allowed = true;
	if(name == null || name == "") {
		allowed = false;
	} else {
		var _g = 0;
		while(_g < illegalValues.length) {
			var value = illegalValues[_g];
			++_g;
			if(name.indexOf(value) > -1) {
				allowed = false;
				break;
			}
		}
	}
	if(!allowed) {
		throw haxe_Exception.thrown(new openfl_errors_Error("Error #2134: Cannot create SharedObject."));
	}
	if(openfl_net_SharedObject.__sharedObjects == null) {
		openfl_net_SharedObject.__sharedObjects = new haxe_ds_StringMap();
		if(lime_app_Application.current != null) {
			lime_app_Application.current.onExit.add(openfl_net_SharedObject.application_onExit);
		}
	}
	var id = localPath + "/" + name;
	if(!Object.prototype.hasOwnProperty.call(openfl_net_SharedObject.__sharedObjects.h,id)) {
		var encodedData = null;
		try {
			var storage = js_Browser.getLocalStorage();
			if(localPath == null) {
				if(storage != null) {
					encodedData = storage.getItem(window.location.href + ":" + name);
					storage.removeItem(window.location.href + ":" + name);
				}
				localPath = window.location.pathname;
			}
			if(storage != null && encodedData == null) {
				encodedData = storage.getItem(localPath + ":" + name);
			}
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
		}
		var sharedObject = new openfl_net_SharedObject();
		sharedObject.data = { };
		sharedObject.__localPath = localPath;
		sharedObject.__name = name;
		if(encodedData != null && encodedData != "") {
			try {
				var unserializer = new haxe_Unserializer(encodedData);
				unserializer.setResolver({ resolveEnum : Type.resolveEnum, resolveClass : openfl_net_SharedObject.__resolveClass});
				sharedObject.data = unserializer.unserialize();
			} catch( _g ) {
				haxe_NativeStackTrace.lastError = _g;
			}
		}
		openfl_net_SharedObject.__sharedObjects.h[id] = sharedObject;
	}
	return openfl_net_SharedObject.__sharedObjects.h[id];
};
openfl_net_SharedObject.getRemote = function(name,remotePath,persistence,secure) {
	if(secure == null) {
		secure = false;
	}
	if(persistence == null) {
		persistence = false;
	}
	openfl__$internal_Lib.notImplemented({ fileName : "openfl/net/SharedObject.hx", lineNumber : 808, className : "openfl.net.SharedObject", methodName : "getRemote"});
	return null;
};
openfl_net_SharedObject.__getPath = function(localPath,name) {
	var path = lime_system_System.get_applicationStorageDirectory() + "/" + localPath + "/";
	name = StringTools.replace(name,"//","/");
	name = StringTools.replace(name,"//","/");
	if(StringTools.startsWith(name,"/")) {
		name = HxOverrides.substr(name,1,null);
	}
	if(StringTools.endsWith(name,"/")) {
		name = name.substring(0,name.length - 1);
	}
	if(name.indexOf("/") > -1) {
		var split = name.split("/");
		name = "";
		var _g = 0;
		var _g1 = split.length - 1;
		while(_g < _g1) {
			var i = _g++;
			name += "#" + split[i] + "/";
		}
		name += split[split.length - 1];
	}
	return path + name + ".sol";
};
openfl_net_SharedObject.__mkdir = function(directory) {
};
openfl_net_SharedObject.__resolveClass = function(name) {
	if(name != null) {
		if(StringTools.startsWith(name,"neash.")) {
			name = StringTools.replace(name,"neash.","openfl.");
		}
		if(StringTools.startsWith(name,"native.")) {
			name = StringTools.replace(name,"native.","openfl.");
		}
		if(StringTools.startsWith(name,"flash.")) {
			name = StringTools.replace(name,"flash.","openfl.");
		}
		if(StringTools.startsWith(name,"openfl._v2.")) {
			name = StringTools.replace(name,"openfl._v2.","openfl.");
		}
		if(StringTools.startsWith(name,"openfl._legacy.")) {
			name = StringTools.replace(name,"openfl._legacy.","openfl.");
		}
		return $hxClasses[name];
	}
	return null;
};
openfl_net_SharedObject.application_onExit = function(_) {
	var sharedObject = haxe_ds_StringMap.valueIterator(openfl_net_SharedObject.__sharedObjects.h);
	while(sharedObject.hasNext()) {
		var sharedObject1 = sharedObject.next();
		sharedObject1.flush();
	}
};
openfl_net_SharedObject.__super__ = openfl_events_EventDispatcher;
openfl_net_SharedObject.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	client: null
	,data: null
	,fps: null
	,objectEncoding: null
	,__localPath: null
	,__name: null
	,clear: function() {
		this.data = { };
		try {
			var storage = js_Browser.getLocalStorage();
			if(storage != null) {
				storage.removeItem(this.__localPath + ":" + this.__name);
			}
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
		}
	}
	,close: function() {
	}
	,connect: function(myConnection,params) {
		openfl__$internal_Lib.notImplemented({ fileName : "openfl/net/SharedObject.hx", lineNumber : 392, className : "openfl.net.SharedObject", methodName : "connect"});
	}
	,flush: function(minDiskSpace) {
		if(minDiskSpace == null) {
			minDiskSpace = 0;
		}
		if(Reflect.fields(this.data).length == 0) {
			return 0;
		}
		var encodedData = haxe_Serializer.run(this.data);
		try {
			var storage = js_Browser.getLocalStorage();
			if(storage != null) {
				storage.removeItem(this.__localPath + ":" + this.__name);
				storage.setItem(this.__localPath + ":" + this.__name,encodedData);
			}
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
			return 1;
		}
		return 0;
	}
	,send: function(args) {
		openfl__$internal_Lib.notImplemented({ fileName : "openfl/net/SharedObject.hx", lineNumber : 824, className : "openfl.net.SharedObject", methodName : "send"});
	}
	,setDirty: function(propertyName) {
	}
	,setProperty: function(propertyName,value) {
		if(this.data != null) {
			this.data[propertyName] = value;
		}
	}
	,get_size: function() {
		try {
			var d = haxe_Serializer.run(this.data);
			return haxe_io_Bytes.ofString(d).length;
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
			return 0;
		}
	}
	,__class__: openfl_net_SharedObject
	,__properties__: {get_size:"get_size"}
});
var openfl_net_SharedObjectFlushStatus = {};
openfl_net_SharedObjectFlushStatus.fromString = function(value) {
	switch(value) {
	case "flushed":
		return 0;
	case "pending":
		return 1;
	default:
		return null;
	}
};
openfl_net_SharedObjectFlushStatus.toString = function(this1) {
	switch(this1) {
	case 0:
		return "flushed";
	case 1:
		return "pending";
	default:
		return null;
	}
};
var openfl_net_URLLoader = function(request) {
	openfl_events_EventDispatcher.call(this);
	this.bytesLoaded = 0;
	this.bytesTotal = 0;
	this.dataFormat = 1;
	if(request != null) {
		this.load(request);
	}
};
$hxClasses["openfl.net.URLLoader"] = openfl_net_URLLoader;
openfl_net_URLLoader.__name__ = "openfl.net.URLLoader";
openfl_net_URLLoader.__super__ = openfl_events_EventDispatcher;
openfl_net_URLLoader.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	bytesLoaded: null
	,bytesTotal: null
	,data: null
	,dataFormat: null
	,__httpRequest: null
	,close: function() {
		if(this.__httpRequest != null) {
			this.__httpRequest.cancel();
		}
	}
	,load: function(request) {
		var _gthis = this;
		if(this.dataFormat == 0) {
			var httpRequest = new lime_net__$HTTPRequest_$openfl_$utils_$ByteArray();
			this.__prepareRequest(httpRequest,request);
			httpRequest.load().onProgress($bind(this,this.httpRequest_onProgress)).onError($bind(this,this.httpRequest_onError)).onComplete(function(data) {
				_gthis.__dispatchStatus();
				_gthis.data = data;
				var event = new openfl_events_Event("complete");
				_gthis.dispatchEvent(event);
			});
		} else {
			var httpRequest = new lime_net__$HTTPRequest_$String();
			this.__prepareRequest(httpRequest,request);
			httpRequest.load().onProgress($bind(this,this.httpRequest_onProgress)).onError($bind(this,this.httpRequest_onError)).onComplete(function(data) {
				_gthis.__dispatchStatus();
				_gthis.data = data;
				var event = new openfl_events_Event("complete");
				_gthis.dispatchEvent(event);
			});
		}
	}
	,__dispatchStatus: function() {
		var event = new openfl_events_HTTPStatusEvent("httpStatus",false,false,this.__httpRequest.responseStatus);
		event.responseURL = this.__httpRequest.uri;
		var headers = [];
		if(this.__httpRequest.enableResponseHeaders && this.__httpRequest.responseHeaders != null) {
			var _g = 0;
			var _g1 = this.__httpRequest.responseHeaders;
			while(_g < _g1.length) {
				var header = _g1[_g];
				++_g;
				headers.push(new openfl_net_URLRequestHeader(header.name,header.value));
			}
		}
		event.responseHeaders = headers;
		this.dispatchEvent(event);
	}
	,__prepareRequest: function(httpRequest,request) {
		this.__httpRequest = httpRequest;
		this.__httpRequest.uri = request.url;
		this.__httpRequest.method = request.method;
		if(request.data != null) {
			if(Type.typeof(request.data) == ValueType.TObject) {
				var fields = Reflect.fields(request.data);
				var _g = 0;
				while(_g < fields.length) {
					var field = fields[_g];
					++_g;
					this.__httpRequest.formData.h[field] = Reflect.field(request.data,field);
				}
			} else if(((request.data) instanceof haxe_io_Bytes)) {
				this.__httpRequest.data = request.data;
			} else {
				this.__httpRequest.data = haxe_io_Bytes.ofString(Std.string(request.data));
			}
		}
		this.__httpRequest.contentType = request.contentType;
		if(request.requestHeaders != null) {
			var _g = 0;
			var _g1 = request.requestHeaders;
			while(_g < _g1.length) {
				var header = _g1[_g];
				++_g;
				this.__httpRequest.headers.push(new lime_net_HTTPRequestHeader(header.name,header.value));
			}
		}
		this.__httpRequest.followRedirects = request.followRedirects;
		this.__httpRequest.timeout = request.idleTimeout | 0;
		this.__httpRequest.withCredentials = request.manageCookies;
		var userAgent = request.userAgent;
		if(userAgent == null) {
			userAgent = "Mozilla/5.0 (Windows; U; en) AppleWebKit/420+ (KHTML, like Gecko) OpenFL/1.0";
		}
		this.__httpRequest.userAgent = request.userAgent;
		this.__httpRequest.enableResponseHeaders = true;
	}
	,httpRequest_onError: function(error) {
		this.__dispatchStatus();
		if(error == 403) {
			var event = new openfl_events_SecurityErrorEvent("securityError");
			event.text = Std.string(error);
			this.dispatchEvent(event);
		} else {
			var event = new openfl_events_IOErrorEvent("ioError");
			event.text = Std.string(error);
			this.dispatchEvent(event);
		}
	}
	,httpRequest_onProgress: function(bytesLoaded,bytesTotal) {
		var event = new openfl_events_ProgressEvent("progress");
		event.bytesLoaded = bytesLoaded;
		event.bytesTotal = bytesTotal;
		this.dispatchEvent(event);
	}
	,__class__: openfl_net_URLLoader
});
var openfl_net_URLLoaderDataFormat = {};
openfl_net_URLLoaderDataFormat.fromString = function(value) {
	switch(value) {
	case "binary":
		return 0;
	case "text":
		return 1;
	case "variables":
		return 2;
	default:
		return null;
	}
};
openfl_net_URLLoaderDataFormat.toString = function(this1) {
	switch(this1) {
	case 0:
		return "binary";
	case 1:
		return "text";
	case 2:
		return "variables";
	default:
		return null;
	}
};
var openfl_net_URLRequest = function(url) {
	if(url != null) {
		this.url = url;
	}
	this.contentType = null;
	this.followRedirects = openfl_net_URLRequestDefaults.followRedirects;
	if(openfl_net_URLRequestDefaults.idleTimeout > 0) {
		this.idleTimeout = openfl_net_URLRequestDefaults.idleTimeout;
	} else {
		this.idleTimeout = 30000;
	}
	this.manageCookies = openfl_net_URLRequestDefaults.manageCookies;
	this.method = "GET";
	this.requestHeaders = [];
	this.userAgent = openfl_net_URLRequestDefaults.userAgent;
};
$hxClasses["openfl.net.URLRequest"] = openfl_net_URLRequest;
openfl_net_URLRequest.__name__ = "openfl.net.URLRequest";
openfl_net_URLRequest.prototype = {
	contentType: null
	,data: null
	,followRedirects: null
	,idleTimeout: null
	,manageCookies: null
	,method: null
	,requestHeaders: null
	,url: null
	,userAgent: null
	,__class__: openfl_net_URLRequest
};
var openfl_net_URLRequestDefaults = function() { };
$hxClasses["openfl.net.URLRequestDefaults"] = openfl_net_URLRequestDefaults;
openfl_net_URLRequestDefaults.__name__ = "openfl.net.URLRequestDefaults";
var openfl_net_URLRequestHeader = function(name,value) {
	if(value == null) {
		value = "";
	}
	if(name == null) {
		name = "";
	}
	this.name = name;
	this.value = value;
};
$hxClasses["openfl.net.URLRequestHeader"] = openfl_net_URLRequestHeader;
openfl_net_URLRequestHeader.__name__ = "openfl.net.URLRequestHeader";
openfl_net_URLRequestHeader.prototype = {
	name: null
	,value: null
	,__class__: openfl_net_URLRequestHeader
};
var openfl_net_URLVariables = {};
openfl_net_URLVariables._new = function(source) {
	var this1 = { };
	if(source != null) {
		openfl_net_URLVariables.decode(this1,source);
	}
	return this1;
};
openfl_net_URLVariables.decode = function(this1,source) {
	var fields = Reflect.fields(this1);
	var _g = 0;
	while(_g < fields.length) {
		var f = fields[_g];
		++_g;
		Reflect.deleteField(this1,f);
	}
	var fields = source.split(";").join("&").split("&");
	var _g = 0;
	while(_g < fields.length) {
		var f = fields[_g];
		++_g;
		var eq = f.indexOf("=");
		if(eq > 0) {
			var s = HxOverrides.substr(f,0,eq);
			var field = decodeURIComponent(s.split("+").join(" "));
			var s1 = HxOverrides.substr(f,eq + 1,null);
			this1[field] = decodeURIComponent(s1.split("+").join(" "));
		} else if(eq != 0) {
			this1[decodeURIComponent(f.split("+").join(" "))] = "";
		}
	}
};
openfl_net_URLVariables.toString = function(this1) {
	var result = [];
	var fields = Reflect.fields(this1);
	var _g = 0;
	while(_g < fields.length) {
		var f = fields[_g];
		++_g;
		var value = Reflect.field(this1,f);
		if(f.indexOf("[]") > -1 && ((value) instanceof Array)) {
			var _g1 = [];
			var x = $getIterator(value);
			while(x.hasNext()) {
				var x1 = x.next();
				_g1.push(encodeURIComponent(x1));
			}
			var arrayValue = _g1.join("&amp;" + f + "=");
			result.push(encodeURIComponent(f) + "=" + arrayValue);
		} else {
			result.push(encodeURIComponent(f) + "=" + encodeURIComponent(value));
		}
	}
	return result.join("&");
};
var openfl_sensors_Accelerometer = function() {
	openfl_events_EventDispatcher.call(this);
	openfl_sensors_Accelerometer.initialize();
	this.__interval = 0;
	this.__muted = false;
	this.setRequestedUpdateInterval(openfl_sensors_Accelerometer.defaultInterval);
};
$hxClasses["openfl.sensors.Accelerometer"] = openfl_sensors_Accelerometer;
openfl_sensors_Accelerometer.__name__ = "openfl.sensors.Accelerometer";
openfl_sensors_Accelerometer.__properties__ = {get_isSupported:"get_isSupported"};
openfl_sensors_Accelerometer.initialize = function() {
	if(!openfl_sensors_Accelerometer.initialized) {
		var sensors = lime_system_Sensor.getSensors(lime_system_SensorType.ACCELEROMETER);
		if(sensors.length > 0) {
			sensors[0].onUpdate.add(openfl_sensors_Accelerometer.accelerometer_onUpdate);
			openfl_sensors_Accelerometer.supported = true;
		}
		openfl_sensors_Accelerometer.initialized = true;
	}
};
openfl_sensors_Accelerometer.accelerometer_onUpdate = function(x,y,z) {
	openfl_sensors_Accelerometer.currentX = x;
	openfl_sensors_Accelerometer.currentY = y;
	openfl_sensors_Accelerometer.currentZ = z;
};
openfl_sensors_Accelerometer.get_isSupported = function() {
	openfl_sensors_Accelerometer.initialize();
	return openfl_sensors_Accelerometer.supported;
};
openfl_sensors_Accelerometer.__super__ = openfl_events_EventDispatcher;
openfl_sensors_Accelerometer.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	__interval: null
	,__muted: null
	,__timer: null
	,addEventListener: function(type,listener,useCapture,priority,useWeakReference) {
		if(useWeakReference == null) {
			useWeakReference = false;
		}
		if(priority == null) {
			priority = 0;
		}
		if(useCapture == null) {
			useCapture = false;
		}
		openfl_events_EventDispatcher.prototype.addEventListener.call(this,type,listener,useCapture,priority,useWeakReference);
		this.update();
	}
	,setRequestedUpdateInterval: function(interval) {
		this.__interval = interval;
		if(this.__interval < 0) {
			throw haxe_Exception.thrown(new openfl_errors_ArgumentError());
		} else if(this.__interval == 0) {
			this.__interval = openfl_sensors_Accelerometer.defaultInterval;
		}
		if(this.__timer != null) {
			this.__timer.stop();
			this.__timer = null;
		}
		if(openfl_sensors_Accelerometer.supported && !this.get_muted()) {
			this.__timer = new haxe_Timer(this.__interval);
			this.__timer.run = $bind(this,this.update);
		}
	}
	,update: function() {
		var event = new openfl_events_AccelerometerEvent("update");
		event.timestamp = new Date().getTime() / 1000;
		event.accelerationX = openfl_sensors_Accelerometer.currentX;
		event.accelerationY = openfl_sensors_Accelerometer.currentY;
		event.accelerationZ = openfl_sensors_Accelerometer.currentZ;
		this.dispatchEvent(event);
	}
	,get_muted: function() {
		return this.__muted;
	}
	,set_muted: function(value) {
		this.__muted = value;
		this.setRequestedUpdateInterval(this.__interval);
		return value;
	}
	,__class__: openfl_sensors_Accelerometer
	,__properties__: {set_muted:"set_muted",get_muted:"get_muted"}
});
var openfl_system_ApplicationDomain = function(parentDomain) {
	if(parentDomain != null) {
		this.parentDomain = parentDomain;
	} else {
		this.parentDomain = openfl_system_ApplicationDomain.currentDomain;
	}
};
$hxClasses["openfl.system.ApplicationDomain"] = openfl_system_ApplicationDomain;
openfl_system_ApplicationDomain.__name__ = "openfl.system.ApplicationDomain";
openfl_system_ApplicationDomain.prototype = {
	parentDomain: null
	,getDefinition: function(name) {
		return $hxClasses[name];
	}
	,hasDefinition: function(name) {
		return $hxClasses[name] != null;
	}
	,__class__: openfl_system_ApplicationDomain
};
var openfl_system_LoaderContext = function(checkPolicyFile,applicationDomain,securityDomain) {
	if(checkPolicyFile == null) {
		checkPolicyFile = false;
	}
	this.checkPolicyFile = checkPolicyFile;
	this.securityDomain = securityDomain;
	this.applicationDomain = applicationDomain;
	this.allowCodeImport = true;
	this.allowLoadBytesCodeExecution = true;
};
$hxClasses["openfl.system.LoaderContext"] = openfl_system_LoaderContext;
openfl_system_LoaderContext.__name__ = "openfl.system.LoaderContext";
openfl_system_LoaderContext.prototype = {
	allowCodeImport: null
	,allowLoadBytesCodeExecution: null
	,applicationDomain: null
	,checkPolicyFile: null
	,securityDomain: null
	,__class__: openfl_system_LoaderContext
};
var openfl_system_SecurityDomain = function() {
};
$hxClasses["openfl.system.SecurityDomain"] = openfl_system_SecurityDomain;
openfl_system_SecurityDomain.__name__ = "openfl.system.SecurityDomain";
openfl_system_SecurityDomain.prototype = {
	__class__: openfl_system_SecurityDomain
};
var openfl_system_System = function() { };
$hxClasses["openfl.system.System"] = openfl_system_System;
openfl_system_System.__name__ = "openfl.system.System";
openfl_system_System.__properties__ = {get_vmVersion:"get_vmVersion",get_totalMemory:"get_totalMemory"};
openfl_system_System.disposeXML = function(node) {
};
openfl_system_System.exit = function(code) {
	lime_system_System.exit(code);
};
openfl_system_System.gc = function() {
};
openfl_system_System.pause = function() {
	openfl__$internal_Lib.notImplemented({ fileName : "openfl/system/System.hx", lineNumber : 213, className : "openfl.system.System", methodName : "pause"});
};
openfl_system_System.resume = function() {
	openfl__$internal_Lib.notImplemented({ fileName : "openfl/system/System.hx", lineNumber : 229, className : "openfl.system.System", methodName : "resume"});
};
openfl_system_System.setClipboard = function(string) {
	lime_system_Clipboard.set_text(string);
};
openfl_system_System.get_totalMemory = function() {
	return (window.performance && window.performance.memory) ? window.performance.memory.usedJSHeapSize : 0;
};
openfl_system_System.get_vmVersion = function() {
	return "1.0.0";
};
var openfl_text_AntiAliasType = {};
openfl_text_AntiAliasType.fromString = function(value) {
	switch(value) {
	case "advanced":
		return 0;
	case "normal":
		return 1;
	default:
		return null;
	}
};
openfl_text_AntiAliasType.toString = function(this1) {
	switch(this1) {
	case 0:
		return "advanced";
	case 1:
		return "normal";
	default:
		return null;
	}
};
var openfl_text_Font = function(name) {
	lime_text_Font.call(this,name);
};
$hxClasses["openfl.text.Font"] = openfl_text_Font;
openfl_text_Font.__name__ = "openfl.text.Font";
openfl_text_Font.enumerateFonts = function(enumerateDeviceFonts) {
	if(enumerateDeviceFonts == null) {
		enumerateDeviceFonts = false;
	}
	return openfl_text_Font.__registeredFonts;
};
openfl_text_Font.fromBytes = function(bytes) {
	var font = new openfl_text_Font();
	font.__fromBytes(openfl_utils_ByteArray.toBytes(bytes));
	return font;
};
openfl_text_Font.fromFile = function(path) {
	var font = new openfl_text_Font();
	font.__fromFile(path);
	return font;
};
openfl_text_Font.loadFromBytes = function(bytes) {
	return lime_text_Font.loadFromBytes(openfl_utils_ByteArray.toBytes(bytes)).then(function(limeFont) {
		var font = new openfl_text_Font();
		font.__fromLimeFont(limeFont);
		return lime_app_Future.withValue(font);
	});
};
openfl_text_Font.loadFromFile = function(path) {
	return lime_text_Font.loadFromFile(path).then(function(limeFont) {
		var font = new openfl_text_Font();
		font.__fromLimeFont(limeFont);
		return lime_app_Future.withValue(font);
	});
};
openfl_text_Font.loadFromName = function(path) {
	return lime_text_Font.loadFromName(path).then(function(limeFont) {
		var font = new openfl_text_Font();
		font.__fromLimeFont(limeFont);
		return lime_app_Future.withValue(font);
	});
};
openfl_text_Font.registerFont = function(font) {
	var instance = null;
	if(js_Boot.getClass(font) == null) {
		instance = js_Boot.__cast(Type.createInstance(font,[]) , openfl_text_Font);
	} else {
		instance = js_Boot.__cast(font , openfl_text_Font);
	}
	if(instance != null) {
		openfl_text_Font.__registeredFonts.push(instance);
		openfl_text_Font.__fontByName.h[instance.name] = instance;
	}
};
openfl_text_Font.__super__ = lime_text_Font;
openfl_text_Font.prototype = $extend(lime_text_Font.prototype,{
	fontStyle: null
	,fontType: null
	,__initialized: null
	,__fromLimeFont: function(font) {
		this.__copyFrom(font);
	}
	,__initialize: function() {
		return this.__initialized;
	}
	,get_fontName: function() {
		return this.name;
	}
	,set_fontName: function(value) {
		return this.name = value;
	}
	,__class__: openfl_text_Font
	,__properties__: {set_fontName:"set_fontName",get_fontName:"get_fontName"}
});
var openfl_text_FontStyle = {};
openfl_text_FontStyle.fromString = function(value) {
	switch(value) {
	case "bold":
		return 0;
	case "boldItalic":
		return 1;
	case "italic":
		return 2;
	case "regular":
		return 3;
	default:
		return null;
	}
};
openfl_text_FontStyle.toString = function(this1) {
	switch(this1) {
	case 0:
		return "bold";
	case 1:
		return "boldItalic";
	case 2:
		return "italic";
	case 3:
		return "regular";
	default:
		return null;
	}
};
var openfl_text_FontType = {};
openfl_text_FontType.fromString = function(value) {
	switch(value) {
	case "device":
		return 0;
	case "embedded":
		return 1;
	case "embeddedCFF":
		return 2;
	default:
		return null;
	}
};
openfl_text_FontType.toString = function(this1) {
	switch(this1) {
	case 0:
		return "device";
	case 1:
		return "embedded";
	case 2:
		return "embeddedCFF";
	default:
		return null;
	}
};
var openfl_text_GridFitType = {};
openfl_text_GridFitType.fromString = function(value) {
	switch(value) {
	case "none":
		return 0;
	case "pixel":
		return 1;
	case "subpixel":
		return 2;
	default:
		return null;
	}
};
openfl_text_GridFitType.toString = function(this1) {
	switch(this1) {
	case 0:
		return "none";
	case 1:
		return "pixel";
	case 2:
		return "subpixel";
	default:
		return null;
	}
};
var openfl_text_StaticText = function() {
	openfl_display_DisplayObject.call(this);
	this.__graphics = new openfl_display_Graphics(this);
};
$hxClasses["openfl.text.StaticText"] = openfl_text_StaticText;
openfl_text_StaticText.__name__ = "openfl.text.StaticText";
openfl_text_StaticText.__super__ = openfl_display_DisplayObject;
openfl_text_StaticText.prototype = $extend(openfl_display_DisplayObject.prototype,{
	text: null
	,__class__: openfl_text_StaticText
});
var openfl_text_TextField = function() {
	this.__forceCachedBitmapUpdate = false;
	this.__renderedOnCanvasWhileOnDOM = false;
	openfl_display_InteractiveObject.call(this);
	this.__caretIndex = -1;
	this.__displayAsPassword = false;
	this.__graphics = new openfl_display_Graphics(this);
	this.__textEngine = new openfl__$internal_text_TextEngine(this);
	this.__layoutDirty = true;
	this.__offsetX = 0;
	this.__offsetY = 0;
	this.__mouseWheelEnabled = true;
	this.__text = "";
	if(openfl_text_TextField.__defaultTextFormat == null) {
		openfl_text_TextField.__defaultTextFormat = new openfl_text_TextFormat("Times New Roman",12,0,false,false,false,"","",3,0,0,0,0);
		openfl_text_TextField.__defaultTextFormat.blockIndent = 0;
		openfl_text_TextField.__defaultTextFormat.bullet = false;
		openfl_text_TextField.__defaultTextFormat.letterSpacing = 0;
		openfl_text_TextField.__defaultTextFormat.kerning = false;
	}
	this.__textFormat = openfl_text_TextField.__defaultTextFormat.clone();
	this.__textEngine.textFormatRanges.push(new openfl__$internal_text_TextFormatRange(this.__textFormat,0,0));
	this.addEventListener("mouseDown",$bind(this,this.this_onMouseDown));
	this.addEventListener("focusIn",$bind(this,this.this_onFocusIn));
	this.addEventListener("focusOut",$bind(this,this.this_onFocusOut));
	this.addEventListener("keyDown",$bind(this,this.this_onKeyDown));
	this.addEventListener("mouseWheel",$bind(this,this.this_onMouseWheel));
};
$hxClasses["openfl.text.TextField"] = openfl_text_TextField;
openfl_text_TextField.__name__ = "openfl.text.TextField";
openfl_text_TextField.__super__ = openfl_display_InteractiveObject;
openfl_text_TextField.prototype = $extend(openfl_display_InteractiveObject.prototype,{
	__bounds: null
	,__caretIndex: null
	,__cursorTimer: null
	,__dirty: null
	,__displayAsPassword: null
	,__domRender: null
	,__inputEnabled: null
	,__isHTML: null
	,__layoutDirty: null
	,__mouseWheelEnabled: null
	,__offsetX: null
	,__offsetY: null
	,__selectionIndex: null
	,__showCursor: null
	,__symbol: null
	,__text: null
	,__htmlText: null
	,__textEngine: null
	,__textFormat: null
	,__div: null
	,__renderedOnCanvasWhileOnDOM: null
	,__rawHtmlText: null
	,__forceCachedBitmapUpdate: null
	,appendText: function(text) {
		if(text == null || text == "") {
			return;
		}
		this.__dirty = true;
		this.__layoutDirty = true;
		if(!this.__renderDirty) {
			this.__renderDirty = true;
			this.__setParentRenderDirty();
		}
		this.__updateText(this.__text + text);
		this.__textEngine.textFormatRanges.get(this.__textEngine.textFormatRanges.get_length() - 1).end = this.__text.length;
		this.__updateScrollV();
		this.__updateScrollH();
	}
	,getCharBoundaries: function(charIndex) {
		if(charIndex < 0 || charIndex > this.__text.length - 1) {
			return null;
		}
		var rect = new openfl_geom_Rectangle();
		if(this.__getCharBoundaries(charIndex,rect)) {
			return rect;
		} else {
			return null;
		}
	}
	,getCharIndexAtPoint: function(x,y) {
		if(x <= 2 || x > this.get_width() + 4 || y <= 0 || y > this.get_height() + 4) {
			return -1;
		}
		this.__updateLayout();
		x += this.get_scrollH();
		var _g = 0;
		var _g1 = this.get_scrollV() - 1;
		while(_g < _g1) {
			var i = _g++;
			y += this.__textEngine.lineHeights.get(i);
		}
		var group = this.__textEngine.layoutGroups.iterator();
		while(group.hasNext()) {
			var group1 = group.next();
			if(y >= group1.offsetY && y <= group1.offsetY + group1.height) {
				if(x >= group1.offsetX && x <= group1.offsetX + group1.width) {
					var advance = 0.0;
					var _g = 0;
					var _g1 = group1.positions.length;
					while(_g < _g1) {
						var i = _g++;
						advance += group1.positions[i];
						if(x <= group1.offsetX + advance) {
							return group1.startIndex + i;
						}
					}
					return group1.endIndex;
				}
			}
		}
		return -1;
	}
	,getFirstCharInParagraph: function(charIndex) {
		if(charIndex < 0 || charIndex > this.get_text().length) {
			return -1;
		}
		var index = this.__textEngine.getLineBreakIndex();
		var startIndex = 0;
		while(index > -1) {
			if(index < charIndex) {
				startIndex = index + 1;
			} else if(index >= charIndex) {
				break;
			}
			index = this.__textEngine.getLineBreakIndex(index + 1);
		}
		return startIndex;
	}
	,getLineIndexAtPoint: function(x,y) {
		this.__updateLayout();
		if(x <= 2 || x > this.get_width() + 4 || y <= 0 || y > this.get_height() + 4) {
			return -1;
		}
		var _g = 0;
		var _g1 = this.get_scrollV() - 1;
		while(_g < _g1) {
			var i = _g++;
			y += this.__textEngine.lineHeights.get(i);
		}
		var group = this.__textEngine.layoutGroups.iterator();
		while(group.hasNext()) {
			var group1 = group.next();
			if(y >= group1.offsetY && y <= group1.offsetY + group1.height) {
				return group1.lineIndex;
			}
		}
		return -1;
	}
	,getLineIndexOfChar: function(charIndex) {
		if(charIndex < 0 || charIndex > this.__text.length) {
			return -1;
		}
		this.__updateLayout();
		var group = this.__textEngine.layoutGroups.iterator();
		while(group.hasNext()) {
			var group1 = group.next();
			if(group1.startIndex <= charIndex && group1.endIndex >= charIndex) {
				return group1.lineIndex;
			}
		}
		return -1;
	}
	,getLineLength: function(lineIndex) {
		this.__updateLayout();
		if(lineIndex < 0 || lineIndex > this.__textEngine.numLines - 1) {
			return 0;
		}
		var startIndex = -1;
		var endIndex = -1;
		var group = this.__textEngine.layoutGroups.iterator();
		while(group.hasNext()) {
			var group1 = group.next();
			if(group1.lineIndex == lineIndex) {
				if(startIndex == -1) {
					startIndex = group1.startIndex;
				}
			} else if(group1.lineIndex == lineIndex + 1) {
				endIndex = group1.startIndex;
				break;
			}
		}
		if(endIndex == -1) {
			endIndex = this.__text.length;
		}
		return endIndex - startIndex;
	}
	,getLineMetrics: function(lineIndex) {
		this.__updateLayout();
		var ascender = this.__textEngine.lineAscents.get(lineIndex);
		var descender = this.__textEngine.lineDescents.get(lineIndex);
		var leading = this.__textEngine.lineLeadings.get(lineIndex);
		var lineHeight = this.__textEngine.lineHeights.get(lineIndex);
		var lineWidth = this.__textEngine.lineWidths.get(lineIndex);
		var margin;
		switch(this.__textFormat.align) {
		case 0:
			margin = (this.__textEngine.width - lineWidth) / 2;
			break;
		case 1:case 4:
			margin = this.__textEngine.width - lineWidth - 2;
			break;
		case 2:case 3:case 5:
			margin = 2;
			break;
		}
		return new openfl_text_TextLineMetrics(margin,lineWidth,lineHeight,ascender,descender,leading);
	}
	,getLineOffset: function(lineIndex) {
		this.__updateLayout();
		if(lineIndex < 0 || lineIndex > this.__textEngine.numLines - 1) {
			return -1;
		}
		var group = this.__textEngine.layoutGroups.iterator();
		while(group.hasNext()) {
			var group1 = group.next();
			if(group1.lineIndex == lineIndex) {
				return group1.startIndex;
			}
		}
		return 0;
	}
	,getLineText: function(lineIndex) {
		this.__updateLayout();
		if(lineIndex < 0 || lineIndex > this.__textEngine.numLines - 1) {
			return null;
		}
		var startIndex = -1;
		var endIndex = -1;
		var group = this.__textEngine.layoutGroups.iterator();
		while(group.hasNext()) {
			var group1 = group.next();
			if(group1.lineIndex == lineIndex) {
				if(startIndex == -1) {
					startIndex = group1.startIndex;
				}
			} else if(group1.lineIndex == lineIndex + 1) {
				endIndex = group1.startIndex;
				break;
			}
		}
		if(endIndex == -1) {
			endIndex = this.__text.length;
		}
		return this.__textEngine.text.substring(startIndex,endIndex);
	}
	,getParagraphLength: function(charIndex) {
		if(charIndex < 0 || charIndex > this.get_text().length) {
			return -1;
		}
		var startIndex = this.getFirstCharInParagraph(charIndex);
		if(charIndex >= this.get_text().length) {
			return this.get_text().length - startIndex + 1;
		}
		var endIndex = this.__textEngine.getLineBreakIndex(charIndex) + 1;
		if(endIndex == 0) {
			endIndex = this.__text.length;
		}
		return endIndex - startIndex;
	}
	,getTextFormat: function(beginIndex,endIndex) {
		if(endIndex == null) {
			endIndex = -1;
		}
		if(beginIndex == null) {
			beginIndex = -1;
		}
		var format = null;
		if(beginIndex >= this.get_text().length || beginIndex < -1 || endIndex > this.get_text().length || endIndex < -1) {
			throw haxe_Exception.thrown(new openfl_errors_RangeError("The supplied index is out of bounds"));
		}
		if(beginIndex == -1) {
			beginIndex = 0;
		}
		if(endIndex == -1) {
			endIndex = this.get_text().length;
		}
		if(beginIndex >= endIndex) {
			return new openfl_text_TextFormat();
		}
		var group = this.__textEngine.textFormatRanges.iterator();
		while(group.hasNext()) {
			var group1 = group.next();
			if(group1.start <= beginIndex && group1.end > beginIndex || group1.start < endIndex && group1.end >= endIndex) {
				if(format == null) {
					format = group1.format.clone();
				} else {
					if(group1.format.font != format.font) {
						format.font = null;
					}
					if(group1.format.size != format.size) {
						format.size = null;
					}
					if(group1.format.color != format.color) {
						format.color = null;
					}
					if(group1.format.bold != format.bold) {
						format.bold = null;
					}
					if(group1.format.italic != format.italic) {
						format.italic = null;
					}
					if(group1.format.underline != format.underline) {
						format.underline = null;
					}
					if(group1.format.url != format.url) {
						format.url = null;
					}
					if(group1.format.target != format.target) {
						format.target = null;
					}
					if(group1.format.align != format.align) {
						format.align = null;
					}
					if(group1.format.leftMargin != format.leftMargin) {
						format.leftMargin = null;
					}
					if(group1.format.rightMargin != format.rightMargin) {
						format.rightMargin = null;
					}
					if(group1.format.indent != format.indent) {
						format.indent = null;
					}
					if(group1.format.leading != format.leading) {
						format.leading = null;
					}
					if(group1.format.blockIndent != format.blockIndent) {
						format.blockIndent = null;
					}
					if(group1.format.bullet != format.bullet) {
						format.bullet = null;
					}
					if(group1.format.kerning != format.kerning) {
						format.kerning = null;
					}
					if(group1.format.letterSpacing != format.letterSpacing) {
						format.letterSpacing = null;
					}
					if(group1.format.tabStops != format.tabStops) {
						format.tabStops = null;
					}
				}
			}
		}
		if(format == null) {
			format = new openfl_text_TextFormat();
		}
		return format;
	}
	,replaceSelectedText: function(value) {
		this.__replaceSelectedText(value,false);
	}
	,replaceText: function(beginIndex,endIndex,newText) {
		this.__replaceText(beginIndex,endIndex,newText,false);
	}
	,setSelection: function(beginIndex,endIndex) {
		this.__selectionIndex = beginIndex;
		this.__caretIndex = endIndex;
		this.__updateScrollV();
		this.__stopCursorTimer();
		this.__startCursorTimer();
	}
	,setTextFormat: function(format,beginIndex,endIndex) {
		if(endIndex == null) {
			endIndex = 0;
		}
		if(beginIndex == null) {
			beginIndex = 0;
		}
		var max = this.get_text().length;
		var range;
		if(beginIndex < 0) {
			beginIndex = 0;
		}
		if(endIndex < 0) {
			endIndex = 0;
		}
		if(endIndex == 0) {
			if(beginIndex == 0) {
				endIndex = max;
			} else {
				endIndex = beginIndex + 1;
			}
		}
		if(endIndex < beginIndex) {
			return;
		}
		if(beginIndex == 0 && endIndex >= max) {
			this.__textFormat.__merge(format);
			var _g = 0;
			var _g1 = this.__textEngine.textFormatRanges.get_length();
			while(_g < _g1) {
				var i = _g++;
				range = this.__textEngine.textFormatRanges.get(i);
				range.format.__merge(format);
			}
		} else {
			var index = 0;
			var newRange;
			while(index < this.__textEngine.textFormatRanges.get_length()) {
				range = this.__textEngine.textFormatRanges.get(index);
				if(range.start == beginIndex && range.end == endIndex) {
					range.format.__merge(format);
					break;
				} else if(range.start >= beginIndex && range.end <= endIndex) {
					range.format.__merge(format);
				} else if(range.start >= beginIndex && range.start < endIndex && range.end > beginIndex) {
					newRange = new openfl__$internal_text_TextFormatRange(range.format.clone(),range.start,endIndex);
					newRange.format.__merge(format);
					this.__textEngine.textFormatRanges.insertAt(index,newRange);
					range.start = endIndex;
					++index;
				} else if(range.start < beginIndex && range.end > beginIndex && range.end >= endIndex) {
					newRange = new openfl__$internal_text_TextFormatRange(range.format.clone(),beginIndex,range.end);
					newRange.format.__merge(format);
					this.__textEngine.textFormatRanges.insertAt(index + 1,newRange);
					range.end = beginIndex;
					++index;
				}
				++index;
			}
		}
		this.__dirty = true;
		this.__layoutDirty = true;
		if(!this.__renderDirty) {
			this.__renderDirty = true;
			this.__setParentRenderDirty();
		}
	}
	,__allowMouseFocus: function() {
		if(!(this.__textEngine.type == 1 || this.get_tabEnabled())) {
			return this.get_selectable();
		} else {
			return true;
		}
	}
	,__caretBeginningOfLine: function() {
		if(this.__selectionIndex == this.__caretIndex || this.__caretIndex < this.__selectionIndex) {
			this.__caretIndex = this.getLineOffset(this.getLineIndexOfChar(this.__caretIndex));
		} else {
			this.__selectionIndex = this.getLineOffset(this.getLineIndexOfChar(this.__selectionIndex));
		}
	}
	,__caretEndOfLine: function() {
		var lineIndex;
		if(this.__selectionIndex == this.__caretIndex) {
			lineIndex = this.getLineIndexOfChar(this.__caretIndex);
		} else {
			lineIndex = this.getLineIndexOfChar(Math.max(this.__caretIndex,this.__selectionIndex) | 0);
		}
		if(lineIndex < this.__textEngine.numLines - 1) {
			this.__caretIndex = this.getLineOffset(lineIndex + 1) - 1;
		} else {
			this.__caretIndex = this.__text.length;
		}
	}
	,__caretNextCharacter: function() {
		if(this.__caretIndex < this.__text.length) {
			this.__caretIndex++;
		}
	}
	,__caretNextLine: function(lineIndex,caretIndex) {
		if(lineIndex == null) {
			lineIndex = this.getLineIndexOfChar(this.__caretIndex);
		}
		if(lineIndex < this.__textEngine.numLines - 1) {
			if(caretIndex == null) {
				caretIndex = this.__caretIndex;
			}
			this.__caretIndex = this.__getCharIndexOnDifferentLine(caretIndex,lineIndex + 1);
		} else {
			this.__caretIndex = this.__text.length;
		}
	}
	,__caretPreviousCharacter: function() {
		if(this.__caretIndex > 0) {
			this.__caretIndex--;
		}
	}
	,__caretPreviousLine: function(lineIndex,caretIndex) {
		if(lineIndex == null) {
			lineIndex = this.getLineIndexOfChar(this.__caretIndex);
		}
		if(lineIndex > 0) {
			if(caretIndex == null) {
				caretIndex = this.__caretIndex;
			}
			this.__caretIndex = this.__getCharIndexOnDifferentLine(caretIndex,lineIndex - 1);
		} else {
			this.__caretIndex = 0;
		}
	}
	,__disableInput: function() {
		if(this.__inputEnabled && this.stage != null) {
			this.stage.window.__backend.setTextInputEnabled(false);
			this.stage.window.onTextInput.remove($bind(this,this.window_onTextInput));
			this.stage.window.onKeyDown.remove($bind(this,this.window_onKeyDown));
			this.__inputEnabled = false;
			this.__stopCursorTimer();
		}
	}
	,__dispatch: function(event) {
		if(event.eventPhase == 2 && event.type == "mouseUp") {
			var event1 = event;
			var group = this.__getGroup(this.get_mouseX(),this.get_mouseY(),true);
			if(group != null) {
				var url = group.format.url;
				if(url != null && url != "") {
					if(StringTools.startsWith(url,"event:")) {
						this.dispatchEvent(new openfl_events_TextEvent("link",false,false,HxOverrides.substr(url,6,null)));
					} else {
						openfl_Lib.getURL(new openfl_net_URLRequest(url));
					}
				}
			}
		}
		return openfl_display_InteractiveObject.prototype.__dispatch.call(this,event);
	}
	,__enableInput: function() {
		if(this.stage != null) {
			this.stage.window.__backend.setTextInputEnabled(true);
			if(!this.__inputEnabled) {
				this.stage.window.__backend.setTextInputEnabled(true);
				if(!this.stage.window.onTextInput.has($bind(this,this.window_onTextInput))) {
					this.stage.window.onTextInput.add($bind(this,this.window_onTextInput));
					this.stage.window.onKeyDown.add($bind(this,this.window_onKeyDown));
				}
				this.__inputEnabled = true;
				this.__startCursorTimer();
			}
		}
	}
	,__fromSymbol: function(swf,symbol) {
		this.__symbol = symbol;
		this.set_width(symbol.width);
		this.set_height(symbol.height);
		this.__offsetX = symbol.x;
		this.__offsetY = symbol.y;
		this.set_multiline(symbol.multiline);
		this.set_wordWrap(symbol.wordWrap);
		this.set_displayAsPassword(symbol.password);
		if(symbol.border) {
			this.set_border(true);
			this.set_background(true);
		}
		this.set_selectable(symbol.selectable);
		if(symbol.input) {
			this.set_type(1);
		}
		var format = new openfl_text_TextFormat();
		if(symbol.color != null) {
			format.color = symbol.color & 16777215;
		}
		format.size = Math.round(symbol.fontHeight / 20);
		var font = swf.symbols.h[symbol.fontID];
		if(font != null) {
			format.__ascent = font.ascent / 20 / 1024;
			format.__descent = font.descent / 20 / 1024;
		}
		format.font = symbol.fontName;
		var found = false;
		var _g = format.font;
		if(_g == null) {
			found = true;
		} else {
			switch(_g) {
			case "":case "_sans":case "_serif":case "_typewriter":
				found = true;
				break;
			default:
				var _g = 0;
				var _g1 = openfl_text_Font.enumerateFonts();
				while(_g < _g1.length) {
					var font = _g1[_g];
					++_g;
					if(font.name == format.font) {
						found = true;
						break;
					}
				}
			}
		}
		if(!found) {
			var alpha_r = new RegExp("[^a-zA-Z]+","g".split("u").join(""));
			var _g = 0;
			var _g1 = openfl_text_Font.enumerateFonts();
			while(_g < _g1.length) {
				var font = _g1[_g];
				++_g;
				if(HxOverrides.substr(font.name.replace(alpha_r,""),0,symbol.fontName.length) == symbol.fontName) {
					format.font = font.name;
					found = true;
					break;
				}
			}
		}
		if(found) {
			this.set_embedFonts(true);
		} else if(!Object.prototype.hasOwnProperty.call(openfl_text_TextField.__missingFontWarning.h,format.font)) {
			openfl_text_TextField.__missingFontWarning.h[format.font] = true;
			lime_utils_Log.warn("Could not find required font \"" + format.font + "\", it has not been embedded",{ fileName : "openfl/text/TextField.hx", lineNumber : 1773, className : "openfl.text.TextField", methodName : "__fromSymbol"});
		}
		if(symbol.align != null) {
			if(symbol.align == "center") {
				format.align = 0;
			} else if(symbol.align == "right") {
				format.align = 4;
			} else if(symbol.align == "justify") {
				format.align = 2;
			}
			format.leftMargin = symbol.leftMargin / 20 | 0;
			format.rightMargin = symbol.rightMargin / 20 | 0;
			format.indent = symbol.indent / 20 | 0;
			format.leading = symbol.leading / 20 | 0;
		}
		this.set_defaultTextFormat(format);
		if(symbol.text != null) {
			if(symbol.html) {
				this.set_htmlText(symbol.text);
			} else {
				this.set_text(symbol.text);
			}
		}
	}
	,__getAdvance: function(position) {
		return position;
	}
	,__getBounds: function(rect,matrix) {
		this.__updateLayout();
		var bounds = openfl_geom_Rectangle.__pool.get();
		bounds.copyFrom(this.__textEngine.bounds);
		matrix.tx += this.__offsetX;
		matrix.ty += this.__offsetY;
		bounds.__transform(bounds,matrix);
		rect.__expand(bounds.x,bounds.y,bounds.width,bounds.height);
		openfl_geom_Rectangle.__pool.release(bounds);
	}
	,__getCharBoundaries: function(charIndex,rect) {
		if(charIndex < 0 || charIndex > this.__text.length - 1) {
			return false;
		}
		this.__updateLayout();
		var group = this.__textEngine.layoutGroups.iterator();
		while(group.hasNext()) {
			var group1 = group.next();
			if(charIndex >= group1.startIndex && charIndex < group1.endIndex) {
				try {
					var x = group1.offsetX;
					var _g = 0;
					var _g1 = charIndex - group1.startIndex;
					while(_g < _g1) {
						var i = _g++;
						x += group1.positions[i];
					}
					var lastPosition = group1.positions[charIndex - group1.startIndex];
					rect.setTo(x,group1.offsetY,lastPosition,group1.ascent + group1.descent);
					return true;
				} catch( _g2 ) {
					haxe_NativeStackTrace.lastError = _g2;
				}
			}
		}
		return false;
	}
	,__getCharIndexOnDifferentLine: function(charIndex,lineIndex) {
		if(charIndex < 0 || charIndex > this.__text.length) {
			return -1;
		}
		if(lineIndex < 0 || lineIndex > this.__textEngine.numLines - 1) {
			return -1;
		}
		var x = null;
		var y = null;
		var group = this.__textEngine.layoutGroups.iterator();
		while(group.hasNext()) {
			var group1 = group.next();
			if(charIndex >= group1.startIndex && charIndex <= group1.endIndex) {
				x = group1.offsetX;
				var _g = 0;
				var _g1 = charIndex - group1.startIndex;
				while(_g < _g1) {
					var i = _g++;
					x += group1.positions[i];
				}
				if(y != null) {
					return this.__getPosition(x,y);
				}
			}
			if(group1.lineIndex == lineIndex) {
				y = group1.offsetY + group1.height / 2;
				var _g2 = 0;
				var _g3 = this.get_scrollV() - 1;
				while(_g2 < _g3) {
					var i1 = _g2++;
					y -= this.__textEngine.lineHeights.get(i1);
				}
				if(x != null) {
					return this.__getPosition(x,y);
				}
			}
		}
		return -1;
	}
	,__getCursor: function() {
		var group = this.__getGroup(this.get_mouseX(),this.get_mouseY(),true);
		if(group != null && group.format.url != "") {
			return "button";
		} else if(this.__textEngine.selectable) {
			return "ibeam";
		}
		return null;
	}
	,__getGroup: function(x,y,precise) {
		if(precise == null) {
			precise = false;
		}
		this.__updateLayout();
		x += this.get_scrollH();
		var _g = 0;
		var _g1 = this.get_scrollV() - 1;
		while(_g < _g1) {
			var i = _g++;
			y += this.__textEngine.lineHeights.get(i);
		}
		if(!precise && y > this.__textEngine.textHeight) {
			y = this.__textEngine.textHeight;
		}
		var firstGroup = true;
		var group;
		var nextGroup;
		var _g = 0;
		var _g1 = this.__textEngine.layoutGroups.get_length();
		while(_g < _g1) {
			var i = _g++;
			group = this.__textEngine.layoutGroups.get(i);
			if(i < this.__textEngine.layoutGroups.get_length() - 1) {
				nextGroup = this.__textEngine.layoutGroups.get(i + 1);
			} else {
				nextGroup = null;
			}
			if(firstGroup) {
				if(y < group.offsetY) {
					y = group.offsetY;
				}
				if(x < group.offsetX) {
					x = group.offsetX;
				}
				firstGroup = false;
			}
			if(y >= group.offsetY && y <= group.offsetY + group.height || !precise && nextGroup == null) {
				if(x >= group.offsetX && x <= group.offsetX + group.width || !precise && (nextGroup == null || nextGroup.lineIndex != group.lineIndex)) {
					return group;
				}
			}
		}
		return null;
	}
	,__getPosition: function(x,y) {
		var group = this.__getGroup(x,y);
		if(group == null) {
			return this.__text.length;
		}
		var advance = 0.0;
		var _g = 0;
		var _g1 = group.positions.length;
		while(_g < _g1) {
			var i = _g++;
			advance += group.positions[i];
			if(x <= group.offsetX + advance) {
				if(x <= group.offsetX + (advance - group.positions[i]) + group.positions[i] / 2) {
					return group.startIndex + i;
				} else if(group.startIndex + i < group.endIndex) {
					return group.startIndex + i + 1;
				} else {
					return group.endIndex;
				}
			}
		}
		return group.endIndex;
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly,hitObject) {
		if(!hitObject.get_visible() || this.__isMask || interactiveOnly && !this.mouseEnabled) {
			return false;
		}
		if(this.get_mask() != null && !this.get_mask().__hitTestMask(x,y)) {
			return false;
		}
		this.__getRenderTransform();
		this.__updateLayout();
		var _this = this.__renderTransform;
		var norm = _this.a * _this.d - _this.b * _this.c;
		var px = norm == 0 ? -_this.tx : 1.0 / norm * (_this.c * (_this.ty - y) + _this.d * (x - _this.tx));
		var _this = this.__renderTransform;
		var norm = _this.a * _this.d - _this.b * _this.c;
		var py = norm == 0 ? -_this.ty : 1.0 / norm * (_this.a * (y - _this.ty) + _this.b * (_this.tx - x));
		if(this.__textEngine.bounds.contains(px,py)) {
			if(stack != null) {
				stack.push(hitObject);
			}
			return true;
		}
		return false;
	}
	,__hitTestMask: function(x,y) {
		this.__getRenderTransform();
		this.__updateLayout();
		var _this = this.__renderTransform;
		var norm = _this.a * _this.d - _this.b * _this.c;
		var px = norm == 0 ? -_this.tx : 1.0 / norm * (_this.c * (_this.ty - y) + _this.d * (x - _this.tx));
		var _this = this.__renderTransform;
		var norm = _this.a * _this.d - _this.b * _this.c;
		var py = norm == 0 ? -_this.ty : 1.0 / norm * (_this.a * (y - _this.ty) + _this.b * (_this.tx - x));
		if(this.__textEngine.bounds.contains(px,py)) {
			return true;
		}
		return false;
	}
	,__renderCairo: function(renderer) {
	}
	,__renderCanvas: function(renderer) {
		if(renderer.__isDOM && !this.__renderedOnCanvasWhileOnDOM) {
			this.__renderedOnCanvasWhileOnDOM = true;
			if(this.get_type() == 1) {
				this.replaceText(0,this.__text.length,this.__text);
			}
			if(this.__isHTML) {
				this.__updateText(openfl__$internal_formats_html_HTMLParser.parse(this.__text,this.__textFormat,this.__textEngine.textFormatRanges));
			}
			this.__dirty = true;
			this.__layoutDirty = true;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		if(this.get_mask() == null || this.get_mask().get_width() > 0 && this.get_mask().get_height() > 0) {
			this.__updateCacheBitmap(renderer,false);
			if(this.__cacheBitmap != null && !this.__isCacheBitmapRender) {
				var bitmap = this.__cacheBitmap;
				if(bitmap.__renderable) {
					var alpha = renderer.__getAlpha(bitmap.__worldAlpha);
					if(alpha > 0 && bitmap.__bitmapData != null && bitmap.__bitmapData.__isValid && bitmap.__bitmapData.readable) {
						var context = renderer.context;
						renderer.__setBlendMode(bitmap.__worldBlendMode);
						renderer.__pushMaskObject(bitmap,false);
						lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(bitmap.__bitmapData.image);
						context.globalAlpha = alpha;
						var scrollRect = bitmap.__scrollRect;
						renderer.setTransform(bitmap.__renderTransform,context);
						if(!renderer.__allowSmoothing || !bitmap.smoothing) {
							context.imageSmoothingEnabled = false;
						}
						if(scrollRect == null) {
							context.drawImage(bitmap.__bitmapData.image.get_src(),0,0,bitmap.__bitmapData.image.width,bitmap.__bitmapData.image.height);
						} else {
							context.drawImage(bitmap.__bitmapData.image.get_src(),scrollRect.x,scrollRect.y,scrollRect.width,scrollRect.height);
						}
						if(!renderer.__allowSmoothing || !bitmap.smoothing) {
							context.imageSmoothingEnabled = true;
						}
						renderer.__popMaskObject(bitmap,false);
					}
				}
			} else {
				var transform = this.__worldTransform;
				var textEngine = this.__textEngine;
				var bounds = textEngine.background || textEngine.border ? textEngine.bounds : textEngine.textBounds;
				var graphics = this.__graphics;
				if(this.__dirty) {
					this.__updateLayout();
					if(graphics.__bounds == null) {
						graphics.__bounds = new openfl_geom_Rectangle();
					}
					graphics.__bounds.copyFrom(bounds);
				}
				graphics.__update(renderer.__worldTransform);
				if(this.__dirty || graphics.__softwareDirty) {
					var width = graphics.__width;
					var height = graphics.__height;
					if((textEngine.text == null || textEngine.text == "") && !textEngine.background && !textEngine.border && !textEngine.__hasFocus && (textEngine.type != 1 || !textEngine.selectable) || (textEngine.width <= 0 || textEngine.height <= 0) && textEngine.autoSize != 2) {
						this.__graphics.__canvas = null;
						this.__graphics.__context = null;
						this.__graphics.__bitmap = null;
						this.__graphics.__softwareDirty = false;
						this.__graphics.set___dirty(false);
						this.__dirty = false;
					} else {
						if(this.__graphics.__canvas == null) {
							this.__graphics.__canvas = window.document.createElement("canvas");
							this.__graphics.__context = this.__graphics.__canvas.getContext("2d");
						}
						openfl__$internal_renderer_canvas_CanvasTextField.context = graphics.__context;
						var transform = graphics.__renderTransform;
						if(renderer.__isDOM) {
							var scale = renderer.pixelRatio;
							graphics.__canvas.width = width * scale | 0;
							graphics.__canvas.height = height * scale | 0;
							graphics.__canvas.style.width = width + "px";
							graphics.__canvas.style.height = height + "px";
							var matrix = openfl_geom_Matrix.__pool.get();
							matrix.copyFrom(transform);
							matrix.scale(scale,scale);
							renderer.setTransform(matrix,openfl__$internal_renderer_canvas_CanvasTextField.context);
							openfl_geom_Matrix.__pool.release(matrix);
						} else {
							graphics.__canvas.width = width;
							graphics.__canvas.height = height;
							openfl__$internal_renderer_canvas_CanvasTextField.context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx,transform.ty);
						}
						if(openfl__$internal_renderer_canvas_CanvasTextField.clearRect == null) {
							openfl__$internal_renderer_canvas_CanvasTextField.clearRect = (typeof navigator !== 'undefined' && typeof navigator['isCocoonJS'] !== 'undefined');
						}
						if(openfl__$internal_renderer_canvas_CanvasTextField.clearRect) {
							openfl__$internal_renderer_canvas_CanvasTextField.context.clearRect(0,0,graphics.__canvas.width,graphics.__canvas.height);
						}
						if(textEngine.text != null && textEngine.text != "" || textEngine.__hasFocus) {
							var text = textEngine.text;
							if(!renderer.__allowSmoothing || textEngine.antiAliasType == 0 && textEngine.sharpness == 400) {
								graphics.__context.imageSmoothingEnabled = false;
							} else {
								graphics.__context.imageSmoothingEnabled = true;
							}
							if(textEngine.border || textEngine.background) {
								openfl__$internal_renderer_canvas_CanvasTextField.context.rect(0.5,0.5,bounds.width - 1,bounds.height - 1);
								if(textEngine.background) {
									var tmp = StringTools.hex(textEngine.backgroundColor & 16777215,6);
									openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#" + tmp;
									openfl__$internal_renderer_canvas_CanvasTextField.context.fill();
								}
								if(textEngine.border) {
									openfl__$internal_renderer_canvas_CanvasTextField.context.lineWidth = 1;
									var tmp = StringTools.hex(textEngine.borderColor & 16777215,6);
									openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle = "#" + tmp;
									openfl__$internal_renderer_canvas_CanvasTextField.context.stroke();
								}
							}
							openfl__$internal_renderer_canvas_CanvasTextField.context.textBaseline = "alphabetic";
							openfl__$internal_renderer_canvas_CanvasTextField.context.textAlign = "start";
							var scrollX = -this.get_scrollH();
							var scrollY = 0.0;
							var _g = 0;
							var _g1 = this.get_scrollV() - 1;
							while(_g < _g1) {
								var i = _g++;
								scrollY -= textEngine.lineHeights.get(i);
							}
							var advance;
							var group = textEngine.layoutGroups.iterator();
							while(group.hasNext()) {
								var group1 = group.next();
								if(group1.lineIndex < this.get_scrollV() - 1) {
									continue;
								}
								if(group1.lineIndex > textEngine.get_bottomScrollV() - 1) {
									break;
								}
								var color = "#" + StringTools.hex(group1.format.color & 16777215,6);
								openfl__$internal_renderer_canvas_CanvasTextField.context.font = openfl__$internal_text_TextEngine.getFont(group1.format);
								openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = color;
								openfl__$internal_renderer_canvas_CanvasTextField.context.fillText(text.substring(group1.startIndex,group1.endIndex),group1.offsetX + scrollX - bounds.x,group1.offsetY + group1.ascent + scrollY - bounds.y);
								if(this.__caretIndex > -1 && textEngine.selectable) {
									if(this.__selectionIndex == this.__caretIndex) {
										if(this.__showCursor && group1.startIndex <= this.__caretIndex && group1.endIndex >= this.__caretIndex) {
											advance = 0.0;
											var _g = 0;
											var _g1 = this.__caretIndex - group1.startIndex;
											while(_g < _g1) {
												var i = _g++;
												if(group1.positions.length <= i) {
													break;
												}
												advance += group1.positions[i];
											}
											var scrollY1 = 0.0;
											var _g2 = this.get_scrollV();
											var _g3 = group1.lineIndex + 1;
											while(_g2 < _g3) {
												var i1 = _g2++;
												scrollY1 += textEngine.lineHeights.get(i1 - 1);
											}
											openfl__$internal_renderer_canvas_CanvasTextField.context.beginPath();
											var tmp = StringTools.hex(group1.format.color & 16777215,6);
											openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle = "#" + tmp;
											openfl__$internal_renderer_canvas_CanvasTextField.context.moveTo(group1.offsetX + advance - this.get_scrollH() - bounds.x,scrollY1 + 2 - bounds.y);
											openfl__$internal_renderer_canvas_CanvasTextField.context.lineWidth = 1;
											openfl__$internal_renderer_canvas_CanvasTextField.context.lineTo(group1.offsetX + advance - this.get_scrollH() - bounds.x,scrollY1 + openfl__$internal_text_TextEngine.getFormatHeight(this.get_defaultTextFormat()) - 1 - bounds.y);
											openfl__$internal_renderer_canvas_CanvasTextField.context.stroke();
											openfl__$internal_renderer_canvas_CanvasTextField.context.closePath();
										}
									} else if(group1.startIndex <= this.__caretIndex && group1.endIndex >= this.__caretIndex || group1.startIndex <= this.__selectionIndex && group1.endIndex >= this.__selectionIndex || group1.startIndex > this.__caretIndex && group1.endIndex < this.__selectionIndex || group1.startIndex > this.__selectionIndex && group1.endIndex < this.__caretIndex) {
										var selectionStart = Math.min(this.__selectionIndex,this.__caretIndex) | 0;
										var selectionEnd = Math.max(this.__selectionIndex,this.__caretIndex) | 0;
										if(group1.startIndex > selectionStart) {
											selectionStart = group1.startIndex;
										}
										if(group1.endIndex < selectionEnd) {
											selectionEnd = group1.endIndex;
										}
										var end;
										var start = this.getCharBoundaries(selectionStart);
										if(selectionEnd >= group1.endIndex) {
											end = this.getCharBoundaries(group1.endIndex - 1);
											if(end != null) {
												end.x += end.width + 2;
											}
										} else {
											end = this.getCharBoundaries(selectionEnd);
										}
										if(start != null && end != null) {
											openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#000000";
											openfl__$internal_renderer_canvas_CanvasTextField.context.fillRect(start.x + scrollX,start.y + scrollY,end.x - start.x,group1.height);
											openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#FFFFFF";
											openfl__$internal_renderer_canvas_CanvasTextField.context.fillText(text.substring(selectionStart,selectionEnd),scrollX + start.x,group1.offsetY + group1.ascent + scrollY);
										}
									}
								}
								if(group1.format.underline) {
									openfl__$internal_renderer_canvas_CanvasTextField.context.beginPath();
									openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle = color;
									openfl__$internal_renderer_canvas_CanvasTextField.context.lineWidth = 1;
									var x = group1.offsetX + scrollX - bounds.x;
									var y = Math.floor(group1.offsetY + scrollY + group1.ascent - bounds.y) + 0.5;
									openfl__$internal_renderer_canvas_CanvasTextField.context.moveTo(x,y);
									openfl__$internal_renderer_canvas_CanvasTextField.context.lineTo(x + group1.width,y);
									openfl__$internal_renderer_canvas_CanvasTextField.context.stroke();
									openfl__$internal_renderer_canvas_CanvasTextField.context.closePath();
								}
							}
						} else {
							if(textEngine.border || textEngine.background) {
								if(textEngine.border) {
									openfl__$internal_renderer_canvas_CanvasTextField.context.rect(0.5,0.5,bounds.width - 1,bounds.height - 1);
								} else {
									openfl__$internal_renderer_canvas_CanvasTextField.context.rect(0,0,bounds.width,bounds.height);
								}
								if(textEngine.background) {
									var tmp = StringTools.hex(textEngine.backgroundColor & 16777215,6);
									openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#" + tmp;
									openfl__$internal_renderer_canvas_CanvasTextField.context.fill();
								}
								if(textEngine.border) {
									openfl__$internal_renderer_canvas_CanvasTextField.context.lineWidth = 1;
									openfl__$internal_renderer_canvas_CanvasTextField.context.lineCap = "square";
									var tmp = StringTools.hex(textEngine.borderColor & 16777215,6);
									openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle = "#" + tmp;
									openfl__$internal_renderer_canvas_CanvasTextField.context.stroke();
								}
							}
							if(this.__caretIndex > -1 && textEngine.selectable && this.__showCursor) {
								var scrollX = -this.get_scrollH();
								var scrollY = 0.0;
								var _g = 0;
								var _g1 = this.get_scrollV() - 1;
								while(_g < _g1) {
									var i = _g++;
									scrollY += textEngine.lineHeights.get(i);
								}
								openfl__$internal_renderer_canvas_CanvasTextField.context.beginPath();
								var tmp = StringTools.hex(this.get_defaultTextFormat().color & 16777215,6);
								openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle = "#" + tmp;
								openfl__$internal_renderer_canvas_CanvasTextField.context.moveTo(scrollX + 2.5,scrollY + 2.5);
								openfl__$internal_renderer_canvas_CanvasTextField.context.lineWidth = 1;
								openfl__$internal_renderer_canvas_CanvasTextField.context.lineTo(scrollX + 2.5,scrollY + openfl__$internal_text_TextEngine.getFormatHeight(this.get_defaultTextFormat()) - 1);
								openfl__$internal_renderer_canvas_CanvasTextField.context.stroke();
								openfl__$internal_renderer_canvas_CanvasTextField.context.closePath();
							}
						}
						graphics.__bitmap = openfl_display_BitmapData.fromCanvas(this.__graphics.__canvas);
						graphics.__visible = true;
						this.__dirty = false;
						graphics.__softwareDirty = false;
						graphics.set___dirty(false);
					}
				}
				var smoothingEnabled = false;
				if(this.__textEngine.antiAliasType == 0 && this.__textEngine.gridFitType == 1) {
					smoothingEnabled = renderer.context.imageSmoothingEnabled;
					if(smoothingEnabled) {
						renderer.context.imageSmoothingEnabled = false;
					}
				}
				if(!(this.opaqueBackground == null && this.__graphics == null)) {
					if(this.__renderable) {
						var alpha = renderer.__getAlpha(this.__worldAlpha);
						if(!(alpha <= 0)) {
							if(this.opaqueBackground != null && !this.__isCacheBitmapRender && this.get_width() > 0 && this.get_height() > 0) {
								renderer.__setBlendMode(this.__worldBlendMode);
								renderer.__pushMaskObject(this);
								var context = renderer.context;
								renderer.setTransform(this.__renderTransform,context);
								var color = this.opaqueBackground;
								context.fillStyle = "rgb(" + (color >>> 16 & 255) + "," + (color >>> 8 & 255) + "," + (color & 255) + ")";
								context.fillRect(0,0,this.get_width(),this.get_height());
								renderer.__popMaskObject(this);
							}
							if(this.__graphics != null) {
								if(this.__renderable) {
									var alpha = renderer.__getAlpha(this.__worldAlpha);
									if(!(alpha <= 0)) {
										var graphics = this.__graphics;
										if(graphics != null) {
											openfl__$internal_renderer_canvas_CanvasGraphics.render(graphics,renderer);
											var width = graphics.__width;
											var height = graphics.__height;
											var canvas = graphics.__canvas;
											if(canvas != null && graphics.__visible && width >= 1 && height >= 1) {
												var transform = graphics.__worldTransform;
												var context = renderer.context;
												var scrollRect = this.__scrollRect;
												var scale9Grid = this.__worldScale9Grid;
												if(scrollRect == null || scrollRect.width > 0 && scrollRect.height > 0) {
													renderer.__setBlendMode(this.__worldBlendMode);
													renderer.__pushMaskObject(this);
													context.globalAlpha = alpha;
													if(scale9Grid != null && transform.b == 0 && transform.c == 0) {
														context.setTransform(1,0,0,1,transform.tx,transform.ty);
														var bounds = graphics.__bounds;
														var scaleX = graphics.__renderTransform.a;
														var scaleY = graphics.__renderTransform.d;
														var renderScaleX = transform.a;
														var renderScaleY = transform.d;
														var left = Math.max(1,Math.round(scale9Grid.x * scaleX));
														var top = Math.round(scale9Grid.y * scaleY);
														var right = Math.max(1,Math.round((bounds.get_right() - scale9Grid.get_right()) * scaleX));
														var bottom = Math.round((bounds.get_bottom() - scale9Grid.get_bottom()) * scaleY);
														var centerWidth = Math.round(scale9Grid.width * scaleX);
														var centerHeight = Math.round(scale9Grid.height * scaleY);
														var renderLeft = Math.round(scale9Grid.x * renderScaleX);
														var renderTop = Math.round(scale9Grid.y * renderScaleY);
														var renderRight = Math.round((bounds.get_right() - scale9Grid.get_right()) * renderScaleX);
														var renderBottom = Math.round((bounds.get_bottom() - scale9Grid.get_bottom()) * renderScaleY);
														var renderCenterWidth = Math.round(width * renderScaleX) - renderLeft - renderRight;
														var renderCenterHeight = Math.round(height * renderScaleY) - renderTop - renderBottom;
														renderer.applySmoothing(context,false);
														if(centerWidth != 0 && centerHeight != 0) {
															context.drawImage(canvas,0,0,left,top,0,0,renderLeft,renderTop);
															context.drawImage(canvas,left,0,centerWidth,top,renderLeft,0,renderCenterWidth,renderTop);
															context.drawImage(canvas,left + centerWidth,0,right,top,renderLeft + renderCenterWidth,0,renderRight,renderTop);
															context.drawImage(canvas,0,top,left,centerHeight,0,renderTop,renderLeft,renderCenterHeight);
															context.drawImage(canvas,left,top,centerWidth,centerHeight,renderLeft,renderTop,renderCenterWidth,renderCenterHeight);
															context.drawImage(canvas,left + centerWidth,top,right,centerHeight,renderLeft + renderCenterWidth,renderTop,renderRight,renderCenterHeight);
															context.drawImage(canvas,0,top + centerHeight,left,bottom,0,renderTop + renderCenterHeight,renderLeft,renderBottom);
															context.drawImage(canvas,left,top + centerHeight,centerWidth,bottom,renderLeft,renderTop + renderCenterHeight,renderCenterWidth,renderBottom);
															context.drawImage(canvas,left + centerWidth,top + centerHeight,right,bottom,renderLeft + renderCenterWidth,renderTop + renderCenterHeight,renderRight,renderBottom);
														} else if(centerWidth == 0 && centerHeight != 0) {
															var renderWidth = renderLeft + renderCenterWidth + renderRight;
															context.drawImage(canvas,0,0,width,top,0,0,renderWidth,renderTop);
															context.drawImage(canvas,0,top,width,centerHeight,0,renderTop,renderWidth,renderCenterHeight);
															context.drawImage(canvas,0,top + centerHeight,width,bottom,0,renderTop + renderCenterHeight,renderWidth,renderBottom);
														} else if(centerHeight == 0 && centerWidth != 0) {
															var renderHeight = renderTop + renderCenterHeight + renderBottom;
															context.drawImage(canvas,0,0,left,height,0,0,renderLeft,renderHeight);
															context.drawImage(canvas,left,0,centerWidth,height,renderLeft,0,renderCenterWidth,renderHeight);
															context.drawImage(canvas,left + centerWidth,0,right,height,renderLeft + renderCenterWidth,0,renderRight,renderHeight);
														}
													} else {
														renderer.setTransform(transform,context);
														if(renderer.__isDOM) {
															var reverseScale = 1 / renderer.pixelRatio;
															context.scale(reverseScale,reverseScale);
														}
														context.drawImage(canvas,0,0,width,height);
													}
													renderer.__popMaskObject(this);
												}
											}
										}
									}
								}
							}
						}
					}
				}
				if(smoothingEnabled) {
					renderer.context.imageSmoothingEnabled = true;
				}
			}
		}
	}
	,__renderDOM: function(renderer) {
		this.__domRender = true;
		this.__updateCacheBitmap(renderer,this.__forceCachedBitmapUpdate);
		this.__forceCachedBitmapUpdate = false;
		this.__domRender = false;
		if(this.__cacheBitmap != null && !this.__isCacheBitmapRender) {
			this.__renderDOMClear(renderer);
			this.__cacheBitmap.stage = this.stage;
			var bitmap = this.__cacheBitmap;
			if(bitmap.stage != null && bitmap.__worldVisible && bitmap.__renderable && bitmap.__bitmapData != null && bitmap.__bitmapData.__isValid && bitmap.__bitmapData.readable) {
				renderer.__pushMaskObject(bitmap);
				if(bitmap.__bitmapData.image.buffer.__srcImage != null) {
					openfl__$internal_renderer_dom_DOMBitmap.renderImage(bitmap,renderer);
				} else {
					openfl__$internal_renderer_dom_DOMBitmap.renderCanvas(bitmap,renderer);
				}
				renderer.__popMaskObject(bitmap);
			} else {
				openfl__$internal_renderer_dom_DOMBitmap.clear(bitmap,renderer);
			}
		} else {
			if(this.__renderedOnCanvasWhileOnDOM) {
				this.__renderedOnCanvasWhileOnDOM = false;
				if(this.__isHTML && this.__rawHtmlText != null) {
					this.__updateText(this.__rawHtmlText);
					this.__dirty = true;
					this.__layoutDirty = true;
					if(!this.__renderDirty) {
						this.__renderDirty = true;
						this.__setParentRenderDirty();
					}
				}
			}
			var textField = this;
			var textEngine = textField.__textEngine;
			if(textField.stage != null && textField.__worldVisible && textField.__renderable) {
				if(textField.__dirty || textField.__renderTransformChanged || textField.__div == null) {
					if(textEngine.text != "" || textEngine.background || textEngine.border || textEngine.type == 1) {
						if(textField.__div == null) {
							textField.__div = window.document.createElement("div");
							renderer.__initializeElement(textField,textField.__div);
							textField.__style.setProperty("outline","none",null);
							textField.__div.addEventListener("input",function(event) {
								event.preventDefault();
								if(textField.get_htmlText() != textField.__div.innerHTML) {
									textField.set_htmlText(textField.__div.innerHTML);
									var textField1 = textField.__displayAsPassword;
									textField.__dirty = false;
								}
							},true);
						}
						if(!textEngine.wordWrap) {
							textField.__style.setProperty("white-space","nowrap",null);
						} else {
							textField.__style.setProperty("word-wrap","break-word",null);
						}
						textField.__style.setProperty("overflow","hidden",null);
						if(textEngine.selectable) {
							textField.__style.setProperty("cursor","text",null);
							textField.__style.setProperty("-webkit-user-select","text",null);
							textField.__style.setProperty("-moz-user-select","text",null);
							textField.__style.setProperty("-ms-user-select","text",null);
							textField.__style.setProperty("-o-user-select","text",null);
						} else {
							textField.__style.setProperty("cursor","inherit",null);
						}
						var div = textField.__div;
						div.contentEditable = textEngine.type == 1;
						var style = textField.__style;
						if(textEngine.background) {
							style.setProperty("background-color","#" + StringTools.hex(textEngine.backgroundColor & 16777215,6),null);
						} else {
							style.removeProperty("background-color");
						}
						var w = textEngine.width;
						var h = textEngine.height;
						var scale = 1;
						var unscaledSize = textField.__textFormat.size;
						var scaledSize = unscaledSize;
						var t = textField.__renderTransform;
						if(t.a != 1.0 || t.d != 1.0) {
							if(t.a == t.d) {
								scale = t.a;
								t.a = t.d = 1.0;
							} else if(t.a > t.d) {
								scale = t.a;
								t.d /= t.a;
								t.a = 1.0;
							} else {
								scale = t.d;
								t.a /= t.d;
								t.d = 1.0;
							}
							scaledSize *= scale;
							w = Math.ceil(w * scale);
							h = Math.ceil(h * scale);
						}
						textField.__textFormat.size = scaledSize;
						var text = textEngine.text;
						var adjustment = 0;
						if(!textField.__isHTML) {
							text = StringTools.htmlEscape(text);
						} else {
							var matchText = text;
							while(openfl__$internal_renderer_dom_DOMTextField.__regexFont.match(matchText)) {
								var fontText = openfl__$internal_renderer_dom_DOMTextField.__regexFont.matched(0);
								var style1 = "";
								if(openfl__$internal_renderer_dom_DOMTextField.__regexFace.match(fontText)) {
									style1 += "font-family:'" + openfl__$internal_renderer_dom_DOMTextField.__getAttributeMatch(openfl__$internal_renderer_dom_DOMTextField.__regexFace) + "';";
								}
								if(openfl__$internal_renderer_dom_DOMTextField.__regexColor.match(fontText)) {
									style1 += "color:#" + openfl__$internal_renderer_dom_DOMTextField.__getAttributeMatch(openfl__$internal_renderer_dom_DOMTextField.__regexColor) + ";";
								}
								if(openfl__$internal_renderer_dom_DOMTextField.__regexSize.match(fontText)) {
									var sizeAttr = openfl__$internal_renderer_dom_DOMTextField.__getAttributeMatch(openfl__$internal_renderer_dom_DOMTextField.__regexSize);
									var firstChar = HxOverrides.cca(sizeAttr,0);
									var size;
									adjustment = parseFloat(sizeAttr) * scale;
									if(firstChar == 43 || firstChar == 45) {
										size = scaledSize + adjustment;
									} else {
										size = adjustment;
									}
									style1 += "font-size:" + size + "px;";
								}
								text = StringTools.replace(text,fontText,"<span style='" + style1 + "'>");
								matchText = openfl__$internal_renderer_dom_DOMTextField.__regexFont.matchedRight();
							}
							text = text.replace(openfl__$internal_renderer_dom_DOMTextField.__regexCloseFont.r,"</span>");
						}
						text = StringTools.replace(text,"<p ","<p style='margin-top:0; margin-bottom:0;' ");
						var unscaledLeading = textField.__textFormat.leading;
						textField.__textFormat.leading += adjustment | 0;
						var _this_r = new RegExp("\r\n","g".split("u").join(""));
						var tmp = text.replace(_this_r,"<br>");
						textField.__div.innerHTML = tmp;
						var _this_r = new RegExp("\n","g".split("u").join(""));
						var tmp = textField.__div.innerHTML.replace(_this_r,"<br>");
						textField.__div.innerHTML = tmp;
						var _this_r = new RegExp("\r","g".split("u").join(""));
						var tmp = textField.__div.innerHTML.replace(_this_r,"<br>");
						textField.__div.innerHTML = tmp;
						style.setProperty("font",openfl__$internal_text_TextEngine.getFont(textField.__textFormat),null);
						textField.__textFormat.size = unscaledSize;
						textField.__textFormat.leading = unscaledLeading;
						style.setProperty("top","3px",null);
						if(textEngine.border) {
							style.setProperty("border","solid 1px #" + StringTools.hex(textEngine.borderColor & 16777215,6),null);
							textField.__renderTransform.translate(-1,-1);
							textField.__renderTransformChanged = true;
							textField.__transformDirty = true;
						} else if(style.border != "") {
							style.removeProperty("border");
							textField.__renderTransformChanged = true;
						}
						style.setProperty("color","#" + StringTools.hex(textField.__textFormat.color & 16777215,6),null);
						style.setProperty("width",w + "px",null);
						style.setProperty("height",h + "px",null);
						switch(textField.__textFormat.align) {
						case 0:
							style.setProperty("text-align","center",null);
							break;
						case 4:
							style.setProperty("text-align","right",null);
							break;
						default:
							style.setProperty("text-align","left",null);
						}
						textField.__dirty = false;
					} else if(textField.__div != null) {
						renderer.element.removeChild(textField.__div);
						textField.__div = null;
					}
				}
				if(textField.__div != null) {
					var old = renderer.__roundPixels;
					renderer.__roundPixels = true;
					renderer.__updateClip(textField);
					renderer.__applyStyle(textField,true,true,true);
					renderer.__roundPixels = old;
				}
			} else {
				openfl__$internal_renderer_dom_DOMTextField.clear(textField,renderer);
			}
		}
		this.__renderEvent(renderer);
	}
	,__renderDOMClear: function(renderer) {
		openfl__$internal_renderer_dom_DOMTextField.clear(this,renderer);
	}
	,__renderGL: function(renderer) {
		this.__updateCacheBitmap(renderer,false);
		if(this.__cacheBitmap != null && !this.__isCacheBitmapRender) {
			openfl__$internal_renderer_context3D_Context3DBitmap.render(this.__cacheBitmap,renderer);
		} else {
			openfl__$internal_renderer_context3D_Context3DTextField.render(this,renderer);
			if(!(this.opaqueBackground == null && this.__graphics == null)) {
				if(!(!this.__renderable || this.__worldAlpha <= 0)) {
					if(this.opaqueBackground != null && !this.__isCacheBitmapRender && this.get_width() > 0 && this.get_height() > 0) {
						renderer.__setBlendMode(this.__worldBlendMode);
						renderer.__pushMaskObject(this);
						var context = renderer.__context3D;
						var rect = openfl_geom_Rectangle.__pool.get();
						rect.setTo(0,0,this.get_width(),this.get_height());
						renderer.__pushMaskRect(rect,this.__renderTransform);
						var color = this.opaqueBackground;
						context.clear((color >>> 16 & 255) / 255,(color >>> 8 & 255) / 255,(color & 255) / 255,1,0,0,1);
						renderer.__popMaskRect();
						renderer.__popMaskObject(this);
						openfl_geom_Rectangle.__pool.release(rect);
					}
					if(this.__graphics != null) {
						openfl__$internal_renderer_context3D_Context3DShape.render(this,renderer);
					}
				}
			}
		}
		this.__renderEvent(renderer);
	}
	,__renderGLMask: function(renderer) {
		openfl__$internal_renderer_context3D_Context3DTextField.renderMask(this,renderer);
		openfl_display_InteractiveObject.prototype.__renderGLMask.call(this,renderer);
	}
	,__replaceSelectedText: function(value,restrict) {
		if(restrict == null) {
			restrict = true;
		}
		if(value == null) {
			value = "";
		}
		if(value == "" && this.__selectionIndex == this.__caretIndex) {
			return;
		}
		var startIndex = this.__caretIndex < this.__selectionIndex ? this.__caretIndex : this.__selectionIndex;
		var endIndex = this.__caretIndex > this.__selectionIndex ? this.__caretIndex : this.__selectionIndex;
		if(startIndex == endIndex && this.__textEngine.maxChars > 0 && this.__text.length == this.__textEngine.maxChars) {
			return;
		}
		if(startIndex > this.__text.length) {
			startIndex = this.__text.length;
		}
		if(endIndex > this.__text.length) {
			endIndex = this.__text.length;
		}
		if(endIndex < startIndex) {
			var cache = endIndex;
			endIndex = startIndex;
			startIndex = cache;
		}
		if(startIndex < 0) {
			startIndex = 0;
		}
		this.__replaceText(startIndex,endIndex,value,restrict);
		var i = startIndex + (js_Boot.__cast(value , String)).length;
		if(i > this.__text.length) {
			i = this.__text.length;
		}
		this.setSelection(i,i);
		this.__updateScrollH();
	}
	,__replaceText: function(beginIndex,endIndex,newText,restrict) {
		if(endIndex < beginIndex || beginIndex < 0 || endIndex > this.__text.length || newText == null) {
			return;
		}
		if(restrict) {
			newText = this.__textEngine.restrictText(newText);
			if(this.__textEngine.maxChars > 0) {
				var removeLength = endIndex - beginIndex;
				var maxLength = this.__textEngine.maxChars - this.__text.length + removeLength;
				if(maxLength <= 0) {
					newText = "";
				} else if(maxLength < newText.length) {
					newText = HxOverrides.substr(newText,0,maxLength);
				}
			}
		}
		this.__updateText(this.__text.substring(0,beginIndex) + newText + this.__text.substring(endIndex));
		if(endIndex > this.__text.length) {
			endIndex = this.__text.length;
		}
		var offset = newText.length - (endIndex - beginIndex);
		var i = 0;
		var range;
		while(i < this.__textEngine.textFormatRanges.get_length()) {
			range = this.__textEngine.textFormatRanges.get(i);
			if(range.start <= beginIndex && range.end >= endIndex) {
				range.end += offset;
				++i;
			} else if(range.start >= beginIndex && range.end <= endIndex) {
				if(i > 0) {
					this.__textEngine.textFormatRanges.splice(i,1);
				} else {
					range.start = 0;
					range.end = beginIndex + newText.length;
					++i;
				}
				offset -= range.end - range.start;
			} else if(range.start > beginIndex && range.start <= endIndex) {
				range.start += offset;
				++i;
			} else {
				++i;
			}
		}
		this.__updateScrollV();
		this.__updateScrollH();
		this.__dirty = true;
		this.__layoutDirty = true;
		if(!this.__renderDirty) {
			this.__renderDirty = true;
			this.__setParentRenderDirty();
		}
	}
	,__shouldCacheHardware: function(value) {
		if(value == true) {
			return true;
		} else {
			return false;
		}
	}
	,__startCursorTimer: function() {
		this.__cursorTimer = haxe_Timer.delay($bind(this,this.__startCursorTimer),600);
		this.__showCursor = !this.__showCursor;
		this.__dirty = true;
		if(!this.__renderDirty) {
			this.__renderDirty = true;
			this.__setParentRenderDirty();
		}
	}
	,__startTextInput: function() {
		if(this.__caretIndex < 0) {
			this.__caretIndex = this.__text.length;
			this.__selectionIndex = this.__caretIndex;
		}
		var enableInput = openfl_display_DisplayObject.__supportDOM ? this.__renderedOnCanvasWhileOnDOM : true;
		if(enableInput) {
			this.__enableInput();
		}
	}
	,__stopCursorTimer: function() {
		if(this.__cursorTimer != null) {
			this.__cursorTimer.stop();
			this.__cursorTimer = null;
		}
		if(this.__showCursor) {
			this.__showCursor = false;
			this.__dirty = true;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
	}
	,__stopTextInput: function() {
		var disableInput = openfl_display_DisplayObject.__supportDOM ? this.__renderedOnCanvasWhileOnDOM : true;
		if(disableInput) {
			this.__disableInput();
		}
	}
	,__updateCacheBitmap: function(renderer,force) {
		if(this.__filters == null && renderer.__type == "opengl" && this.__cacheBitmap == null && !this.__domRender) {
			return false;
		}
		if(openfl_display_InteractiveObject.prototype.__updateCacheBitmap.call(this,renderer,force || this.__dirty)) {
			if(this.__cacheBitmap != null) {
				this.__cacheBitmap.__renderTransform.tx -= this.__offsetX;
				this.__cacheBitmap.__renderTransform.ty -= this.__offsetY;
			}
			return true;
		}
		return false;
	}
	,__updateLayout: function() {
		if(this.__layoutDirty) {
			var cacheWidth = this.__textEngine.width;
			this.__textEngine.update();
			if(this.__textEngine.autoSize != 2) {
				if(this.__textEngine.width != cacheWidth) {
					switch(this.__textEngine.autoSize) {
					case 0:
						var _g = this;
						_g.set_x(_g.get_x() + (cacheWidth - this.__textEngine.width) / 2);
						break;
					case 3:
						var _g = this;
						_g.set_x(_g.get_x() + (cacheWidth - this.__textEngine.width));
						break;
					default:
					}
				}
				this.__textEngine.getBounds();
			}
			this.__layoutDirty = false;
		}
	}
	,__updateScrollH: function() {
		if(!this.get_multiline() && this.get_type() == 1) {
			this.__layoutDirty = true;
			this.__updateLayout();
			var offsetX = this.__textEngine.textWidth - this.__textEngine.width + 4;
			if(offsetX > 0) {
				if(this.__caretIndex >= this.get_text().length) {
					this.set_scrollH(Math.ceil(offsetX));
				} else {
					var caret = openfl_geom_Rectangle.__pool.get();
					this.__getCharBoundaries(this.__caretIndex,caret);
					if(caret.x < this.get_scrollH()) {
						this.set_scrollH(Math.floor(caret.x - 2));
					} else if(caret.x > this.get_scrollH() + this.__textEngine.width) {
						this.set_scrollH(Math.ceil(caret.x - this.__textEngine.width - 2));
					}
					openfl_geom_Rectangle.__pool.release(caret);
				}
			} else {
				this.set_scrollH(0);
			}
		}
	}
	,__updateScrollV: function() {
		this.__layoutDirty = true;
		this.__updateLayout();
		var lineIndex = this.getLineIndexOfChar(this.__caretIndex);
		if(lineIndex == -1 && this.__caretIndex > 0) {
			lineIndex = this.getLineIndexOfChar(this.__caretIndex - 1) + 1;
		}
		if(lineIndex + 1 < this.get_scrollV()) {
			this.set_scrollV(lineIndex + 1);
		} else if(lineIndex + 1 > this.get_bottomScrollV()) {
			var i = lineIndex;
			var tempHeight = 0.0;
			while(i >= 0) if(tempHeight + this.__textEngine.lineHeights.get(i) <= this.get_height() - 4) {
				tempHeight += this.__textEngine.lineHeights.get(i);
				--i;
			} else {
				break;
			}
			this.set_scrollV(i + 2);
		} else {
			this.set_scrollV(this.get_scrollV());
		}
	}
	,__updateText: function(value) {
		if(openfl_display_DisplayObject.__supportDOM && this.__renderedOnCanvasWhileOnDOM) {
			this.__forceCachedBitmapUpdate = this.__text != value;
		}
		this.__textEngine.set_text(value);
		this.__text = this.__textEngine.text;
		if(this.__text.length < this.__caretIndex) {
			this.__selectionIndex = this.__caretIndex = this.__text.length;
		}
		if(!this.__displayAsPassword || openfl_display_DisplayObject.__supportDOM && !this.__renderedOnCanvasWhileOnDOM) {
			this.__textEngine.set_text(this.__text);
		} else {
			var length = this.get_text().length;
			var mask = "";
			var _g = 0;
			var _g1 = length;
			while(_g < _g1) {
				var i = _g++;
				mask += "*";
			}
			this.__textEngine.set_text(mask);
		}
	}
	,__updateTransforms: function(overrideTransform) {
		openfl_display_InteractiveObject.prototype.__updateTransforms.call(this,overrideTransform);
		var _this = this.__renderTransform;
		var px = this.__offsetX;
		var py = this.__offsetY;
		_this.tx = px * _this.a + py * _this.c + _this.tx;
		_this.ty = px * _this.b + py * _this.d + _this.ty;
	}
	,get_antiAliasType: function() {
		return this.__textEngine.antiAliasType;
	}
	,set_antiAliasType: function(value) {
		var tmp = value != this.__textEngine.antiAliasType;
		return this.__textEngine.antiAliasType = value;
	}
	,get_autoSize: function() {
		return this.__textEngine.autoSize;
	}
	,set_autoSize: function(value) {
		if(value != this.__textEngine.autoSize) {
			this.__dirty = true;
			this.__layoutDirty = true;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		return this.__textEngine.autoSize = value;
	}
	,get_background: function() {
		return this.__textEngine.background;
	}
	,set_background: function(value) {
		if(value != this.__textEngine.background) {
			this.__dirty = true;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		return this.__textEngine.background = value;
	}
	,get_backgroundColor: function() {
		return this.__textEngine.backgroundColor;
	}
	,set_backgroundColor: function(value) {
		if(value != this.__textEngine.backgroundColor) {
			this.__dirty = true;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		return this.__textEngine.backgroundColor = value;
	}
	,get_border: function() {
		return this.__textEngine.border;
	}
	,set_border: function(value) {
		if(value != this.__textEngine.border) {
			this.__dirty = true;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		return this.__textEngine.border = value;
	}
	,get_borderColor: function() {
		return this.__textEngine.borderColor;
	}
	,set_borderColor: function(value) {
		if(value != this.__textEngine.borderColor) {
			this.__dirty = true;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		return this.__textEngine.borderColor = value;
	}
	,get_bottomScrollV: function() {
		this.__updateLayout();
		return this.__textEngine.get_bottomScrollV();
	}
	,get_caretIndex: function() {
		return this.__caretIndex;
	}
	,get_defaultTextFormat: function() {
		return this.__textFormat.clone();
	}
	,set_defaultTextFormat: function(value) {
		this.__textFormat.__merge(value);
		this.__layoutDirty = true;
		this.__dirty = true;
		if(!this.__renderDirty) {
			this.__renderDirty = true;
			this.__setParentRenderDirty();
		}
		return value;
	}
	,get_displayAsPassword: function() {
		return this.__displayAsPassword;
	}
	,set_displayAsPassword: function(value) {
		if(value != this.__displayAsPassword) {
			this.__dirty = true;
			this.__layoutDirty = true;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
			this.__displayAsPassword = value;
			this.__updateText(this.__text);
		}
		return value;
	}
	,get_embedFonts: function() {
		return this.__textEngine.embedFonts;
	}
	,set_embedFonts: function(value) {
		return this.__textEngine.embedFonts = value;
	}
	,get_gridFitType: function() {
		return this.__textEngine.gridFitType;
	}
	,set_gridFitType: function(value) {
		return this.__textEngine.gridFitType = value;
	}
	,get_height: function() {
		this.__updateLayout();
		return this.__textEngine.height * Math.abs(this.get_scaleY());
	}
	,set_height: function(value) {
		if(value != this.__textEngine.height) {
			this.__setTransformDirty();
			this.__dirty = true;
			this.__layoutDirty = true;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
			this.__textEngine.height = value;
		}
		return this.__textEngine.height * Math.abs(this.get_scaleY());
	}
	,get_htmlText: function() {
		if(this.__isHTML) {
			return this.__rawHtmlText;
		} else {
			return this.__text;
		}
	}
	,set_htmlText: function(value) {
		if(!this.__isHTML || this.__text != value) {
			this.__dirty = true;
			this.__layoutDirty = true;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		this.__isHTML = true;
		this.__rawHtmlText = value;
		value = openfl__$internal_formats_html_HTMLParser.parse(value,this.__textFormat,this.__textEngine.textFormatRanges);
		if(openfl_display_DisplayObject.__supportDOM) {
			if(this.__textEngine.textFormatRanges.get_length() > 1) {
				this.__textEngine.textFormatRanges.splice(1,this.__textEngine.textFormatRanges.get_length() - 1);
			}
			var range = this.__textEngine.textFormatRanges.get(0);
			range.format = this.__textFormat;
			range.start = 0;
			if(this.__renderedOnCanvasWhileOnDOM) {
				range.end = value.length;
				this.__updateText(value);
			} else {
				range.end = this.__rawHtmlText.length;
				this.__updateText(this.__rawHtmlText);
			}
		} else {
			this.__updateText(value);
		}
		this.__updateScrollV();
		return value;
	}
	,get_length: function() {
		if(this.__text != null) {
			return this.__text.length;
		}
		return 0;
	}
	,get_maxChars: function() {
		return this.__textEngine.maxChars;
	}
	,set_maxChars: function(value) {
		if(value != this.__textEngine.maxChars) {
			this.__textEngine.maxChars = value;
			this.__dirty = true;
			this.__layoutDirty = true;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		return value;
	}
	,get_maxScrollH: function() {
		this.__updateLayout();
		return this.__textEngine.maxScrollH;
	}
	,get_maxScrollV: function() {
		this.__updateLayout();
		return this.__textEngine.get_maxScrollV();
	}
	,get_mouseWheelEnabled: function() {
		return this.__mouseWheelEnabled;
	}
	,set_mouseWheelEnabled: function(value) {
		return this.__mouseWheelEnabled = value;
	}
	,get_multiline: function() {
		return this.__textEngine.multiline;
	}
	,set_multiline: function(value) {
		if(value != this.__textEngine.multiline) {
			this.__dirty = true;
			this.__layoutDirty = true;
			this.__updateText(this.__text);
			this.__updateScrollH();
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		return this.__textEngine.multiline = value;
	}
	,get_numLines: function() {
		this.__updateLayout();
		return this.__textEngine.numLines;
	}
	,get_restrict: function() {
		return this.__textEngine.restrict;
	}
	,set_restrict: function(value) {
		if(this.__textEngine.restrict != value) {
			this.__textEngine.set_restrict(value);
			this.__updateText(this.__text);
		}
		return value;
	}
	,get_scrollH: function() {
		return this.__textEngine.scrollH;
	}
	,set_scrollH: function(value) {
		this.__updateLayout();
		if(value > this.__textEngine.maxScrollH) {
			value = this.__textEngine.maxScrollH;
		}
		if(value < 0) {
			value = 0;
		}
		if(value != this.__textEngine.scrollH) {
			this.__dirty = true;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
			this.dispatchEvent(new openfl_events_Event("scroll"));
		}
		return this.__textEngine.scrollH = value;
	}
	,get_scrollV: function() {
		return this.__textEngine.get_scrollV();
	}
	,set_scrollV: function(value) {
		this.__updateLayout();
		if(value != this.__textEngine.get_scrollV()) {
			this.__dirty = true;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
			this.dispatchEvent(new openfl_events_Event("scroll"));
		}
		return this.__textEngine.set_scrollV(value);
	}
	,get_selectable: function() {
		return this.__textEngine.selectable;
	}
	,set_selectable: function(value) {
		if(value != this.__textEngine.selectable && this.get_type() == 1) {
			if(this.stage != null && this.stage.get_focus() == this) {
				this.__startTextInput();
			} else if(!value) {
				this.__stopTextInput();
			}
		}
		return this.__textEngine.selectable = value;
	}
	,get_selectionBeginIndex: function() {
		return Math.min(this.__caretIndex,this.__selectionIndex) | 0;
	}
	,get_selectionEndIndex: function() {
		return Math.max(this.__caretIndex,this.__selectionIndex) | 0;
	}
	,get_sharpness: function() {
		return this.__textEngine.sharpness;
	}
	,set_sharpness: function(value) {
		if(value != this.__textEngine.sharpness) {
			this.__dirty = true;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		return this.__textEngine.sharpness = value;
	}
	,get_tabEnabled: function() {
		if(this.__tabEnabled == null) {
			return this.__textEngine.type == 1;
		} else {
			return this.__tabEnabled;
		}
	}
	,get_text: function() {
		return this.__text;
	}
	,set_text: function(value) {
		if(this.__isHTML || this.__text != value) {
			this.__dirty = true;
			this.__layoutDirty = true;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		} else {
			return value;
		}
		if(this.__textEngine.textFormatRanges.get_length() > 1) {
			this.__textEngine.textFormatRanges.splice(1,this.__textEngine.textFormatRanges.get_length() - 1);
		}
		var utfValue = value;
		var range = this.__textEngine.textFormatRanges.get(0);
		range.format = this.__textFormat;
		range.start = 0;
		range.end = utfValue.length;
		this.__isHTML = false;
		this.__updateText(value);
		this.__updateScrollV();
		return value;
	}
	,get_textColor: function() {
		return this.__textFormat.color;
	}
	,set_textColor: function(value) {
		if(value != this.__textFormat.color) {
			this.__dirty = true;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		var range = this.__textEngine.textFormatRanges.iterator();
		while(range.hasNext()) {
			var range1 = range.next();
			range1.format.color = value;
		}
		return this.__textFormat.color = value;
	}
	,get_textWidth: function() {
		this.__updateLayout();
		return this.__textEngine.textWidth;
	}
	,get_textHeight: function() {
		this.__updateLayout();
		return this.__textEngine.textHeight;
	}
	,get_type: function() {
		return this.__textEngine.type;
	}
	,set_type: function(value) {
		if(value != this.__textEngine.type) {
			if(value == 1) {
				this.addEventListener("addedToStage",$bind(this,this.this_onAddedToStage));
				this.this_onFocusIn(null);
				this.__textEngine.__useIntAdvances = true;
			} else {
				this.removeEventListener("addedToStage",$bind(this,this.this_onAddedToStage));
				this.__stopTextInput();
				this.__textEngine.__useIntAdvances = null;
			}
			this.__dirty = true;
			this.__layoutDirty = true;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		return this.__textEngine.type = value;
	}
	,get_width: function() {
		this.__updateLayout();
		return this.__textEngine.width * Math.abs(this.__scaleX);
	}
	,set_width: function(value) {
		if(value != this.__textEngine.width) {
			this.__setTransformDirty();
			this.__dirty = true;
			this.__layoutDirty = true;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
			this.__textEngine.width = value;
		}
		return this.__textEngine.width * Math.abs(this.__scaleX);
	}
	,get_wordWrap: function() {
		return this.__textEngine.wordWrap;
	}
	,set_wordWrap: function(value) {
		if(value != this.__textEngine.wordWrap) {
			this.__dirty = true;
			this.__layoutDirty = true;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		return this.__textEngine.wordWrap = value;
	}
	,get_x: function() {
		return this.__transform.tx + this.__offsetX;
	}
	,set_x: function(value) {
		if(value != this.__transform.tx + this.__offsetX) {
			this.__setTransformDirty();
		}
		return this.__transform.tx = value - this.__offsetX;
	}
	,get_y: function() {
		return this.__transform.ty + this.__offsetY;
	}
	,set_y: function(value) {
		if(value != this.__transform.ty + this.__offsetY) {
			this.__setTransformDirty();
		}
		return this.__transform.ty = value - this.__offsetY;
	}
	,stage_onMouseMove: function(event) {
		if(this.stage == null) {
			return;
		}
		if(this.__textEngine.selectable && this.__selectionIndex >= 0) {
			this.__updateLayout();
			var position = this.__getPosition(this.get_mouseX() + this.get_scrollH(),this.get_mouseY());
			if(position != this.__caretIndex) {
				this.__caretIndex = position;
				if(openfl_display_DisplayObject.__supportDOM) {
					if(this.__renderedOnCanvasWhileOnDOM) {
						this.__forceCachedBitmapUpdate = true;
					}
				} else {
					this.__dirty = true;
					if(!this.__renderDirty) {
						this.__renderDirty = true;
						this.__setParentRenderDirty();
					}
				}
			}
		}
	}
	,stage_onMouseUp: function(event) {
		if(this.stage == null) {
			return;
		}
		this.stage.removeEventListener("mouseMove",$bind(this,this.stage_onMouseMove));
		this.stage.removeEventListener("mouseUp",$bind(this,this.stage_onMouseUp));
		if(this.stage.get_focus() == this) {
			this.__getWorldTransform();
			this.__updateLayout();
			var upPos = this.__getPosition(this.get_mouseX() + this.get_scrollH(),this.get_mouseY());
			var leftPos = Math.min(this.__selectionIndex,upPos) | 0;
			var rightPos = Math.max(this.__selectionIndex,upPos) | 0;
			this.__selectionIndex = leftPos;
			this.__caretIndex = rightPos;
			if(this.__inputEnabled) {
				this.this_onFocusIn(null);
				this.__stopCursorTimer();
				this.__startCursorTimer();
				if(openfl_display_DisplayObject.__supportDOM && this.__renderedOnCanvasWhileOnDOM) {
					this.__forceCachedBitmapUpdate = true;
				}
			}
		}
	}
	,this_onAddedToStage: function(event) {
		this.this_onFocusIn(null);
	}
	,this_onFocusIn: function(event) {
		if(this.get_type() == 1 && this.stage != null && this.stage.get_focus() == this) {
			this.__startTextInput();
		}
	}
	,this_onFocusOut: function(event) {
		this.__stopCursorTimer();
		if(event.relatedObject == null || !((event.relatedObject) instanceof openfl_text_TextField)) {
			this.__stopTextInput();
		} else {
			if(this.stage != null) {
				this.stage.window.onTextInput.remove($bind(this,this.window_onTextInput));
				this.stage.window.onKeyDown.remove($bind(this,this.window_onKeyDown));
			}
			this.__inputEnabled = false;
		}
		if(this.__selectionIndex != this.__caretIndex) {
			this.__selectionIndex = this.__caretIndex;
			this.__dirty = true;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
	}
	,this_onKeyDown: function(event) {
		if(this.get_selectable() && this.get_type() != 1 && event.keyCode == 67 && (event.commandKey || event.ctrlKey)) {
			if(this.__caretIndex != this.__selectionIndex) {
				lime_system_Clipboard.set_text(this.__text.substring(this.__caretIndex,this.__selectionIndex));
			}
		}
	}
	,this_onMouseDown: function(event) {
		if(!this.get_selectable() && this.get_type() != 1) {
			return;
		}
		this.__updateLayout();
		this.__caretIndex = this.__getPosition(this.get_mouseX() + this.get_scrollH(),this.get_mouseY());
		this.__selectionIndex = this.__caretIndex;
		if(!openfl_display_DisplayObject.__supportDOM) {
			this.__dirty = true;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		this.stage.addEventListener("mouseMove",$bind(this,this.stage_onMouseMove));
		this.stage.addEventListener("mouseUp",$bind(this,this.stage_onMouseUp));
	}
	,this_onMouseWheel: function(event) {
		if(this.get_mouseWheelEnabled()) {
			var _g = this;
			_g.set_scrollV(_g.get_scrollV() - event.delta);
		}
	}
	,window_onKeyDown: function(key,modifier) {
		switch(key) {
		case 8:
			if(this.__selectionIndex == this.__caretIndex && this.__caretIndex > 0) {
				this.__selectionIndex = this.__caretIndex - 1;
			}
			if(this.__selectionIndex != this.__caretIndex) {
				this.replaceSelectedText("");
				this.__selectionIndex = this.__caretIndex;
				this.dispatchEvent(new openfl_events_Event("change",true));
			}
			break;
		case 97:
			if(this.get_selectable()) {
				if(lime_ui_KeyModifier.get_metaKey(modifier) || lime_ui_KeyModifier.get_ctrlKey(modifier)) {
					this.__caretIndex = this.__text.length;
					this.__selectionIndex = 0;
				}
			}
			break;
		case 99:
			if(lime_ui_KeyModifier.get_metaKey(modifier) || lime_ui_KeyModifier.get_ctrlKey(modifier)) {
				if(this.__caretIndex != this.__selectionIndex) {
					lime_system_Clipboard.set_text(this.__text.substring(this.__caretIndex,this.__selectionIndex));
				}
			}
			break;
		case 120:
			if(lime_ui_KeyModifier.get_metaKey(modifier) || lime_ui_KeyModifier.get_ctrlKey(modifier)) {
				if(this.__caretIndex != this.__selectionIndex) {
					lime_system_Clipboard.set_text(this.__text.substring(this.__caretIndex,this.__selectionIndex));
					this.replaceSelectedText("");
					this.dispatchEvent(new openfl_events_Event("change",true));
				}
			}
			break;
		case 127:
			if(this.__selectionIndex == this.__caretIndex && this.__caretIndex < this.__text.length) {
				this.__selectionIndex = this.__caretIndex + 1;
			}
			if(this.__selectionIndex != this.__caretIndex) {
				this.replaceSelectedText("");
				this.__selectionIndex = this.__caretIndex;
				this.dispatchEvent(new openfl_events_Event("change",true));
			}
			break;
		case 1073741898:
			if(this.get_selectable()) {
				this.__caretBeginningOfLine();
				this.__stopCursorTimer();
				this.__startCursorTimer();
			}
			break;
		case 1073741901:
			if(this.get_selectable()) {
				this.__caretEndOfLine();
				this.__stopCursorTimer();
				this.__startCursorTimer();
			}
			break;
		case 1073741903:
			if(this.get_selectable()) {
				if(lime_ui_KeyModifier.get_metaKey(modifier)) {
					this.__caretEndOfLine();
					if(!lime_ui_KeyModifier.get_shiftKey(modifier)) {
						this.__selectionIndex = this.__caretIndex;
					}
				} else if(lime_ui_KeyModifier.get_shiftKey(modifier)) {
					this.__caretNextCharacter();
				} else {
					if(this.__selectionIndex == this.__caretIndex) {
						this.__caretNextCharacter();
					} else {
						this.__caretIndex = Math.max(this.__caretIndex,this.__selectionIndex) | 0;
					}
					this.__selectionIndex = this.__caretIndex;
				}
				this.__updateScrollH();
				this.__updateScrollV();
				this.__stopCursorTimer();
				this.__startCursorTimer();
			}
			break;
		case 1073741904:
			if(this.get_selectable()) {
				if(lime_ui_KeyModifier.get_metaKey(modifier)) {
					this.__caretBeginningOfLine();
					if(!lime_ui_KeyModifier.get_shiftKey(modifier)) {
						this.__selectionIndex = this.__caretIndex;
					}
				} else if(lime_ui_KeyModifier.get_shiftKey(modifier)) {
					this.__caretPreviousCharacter();
				} else {
					if(this.__selectionIndex == this.__caretIndex) {
						this.__caretPreviousCharacter();
					} else {
						this.__caretIndex = Math.min(this.__caretIndex,this.__selectionIndex) | 0;
					}
					this.__selectionIndex = this.__caretIndex;
				}
				this.__updateScrollH();
				this.__updateScrollV();
				this.__stopCursorTimer();
				this.__startCursorTimer();
			}
			break;
		case 1073741905:
			if(this.get_selectable()) {
				if(!this.__textEngine.multiline) {
					return;
				}
				if(lime_ui_KeyModifier.get_shiftKey(modifier)) {
					this.__caretNextLine();
				} else {
					if(this.__selectionIndex == this.__caretIndex) {
						this.__caretNextLine();
					} else {
						var lineIndex = this.getLineIndexOfChar(Math.max(this.__caretIndex,this.__selectionIndex) | 0);
						this.__caretNextLine(lineIndex,Math.min(this.__caretIndex,this.__selectionIndex) | 0);
					}
					this.__selectionIndex = this.__caretIndex;
				}
				this.__updateScrollV();
				this.__stopCursorTimer();
				this.__startCursorTimer();
			}
			break;
		case 1073741906:
			if(this.get_selectable()) {
				if(!this.__textEngine.multiline) {
					return;
				}
				if(lime_ui_KeyModifier.get_shiftKey(modifier)) {
					this.__caretPreviousLine();
				} else {
					if(this.__selectionIndex == this.__caretIndex) {
						this.__caretPreviousLine();
					} else {
						var lineIndex = this.getLineIndexOfChar(Math.min(this.__caretIndex,this.__selectionIndex) | 0);
						this.__caretPreviousLine(lineIndex,Math.min(this.__caretIndex,this.__selectionIndex) | 0);
					}
					this.__selectionIndex = this.__caretIndex;
				}
				this.__updateScrollV();
				this.__stopCursorTimer();
				this.__startCursorTimer();
			}
			break;
		case 13:case 1073741912:
			if(this.__textEngine.multiline) {
				var te = new openfl_events_TextEvent("textInput",true,true,"\n");
				this.dispatchEvent(te);
				if(!te.isDefaultPrevented()) {
					this.__replaceSelectedText("\n",true);
					this.dispatchEvent(new openfl_events_Event("change",true));
				}
			}
			break;
		default:
		}
	}
	,window_onTextInput: function(value) {
		this.__replaceSelectedText(value,true);
		this.dispatchEvent(new openfl_events_Event("change",true));
	}
	,__class__: openfl_text_TextField
	,__properties__: $extend(openfl_display_InteractiveObject.prototype.__properties__,{set_wordWrap:"set_wordWrap",get_wordWrap:"get_wordWrap",set_type:"set_type",get_type:"get_type",get_textWidth:"get_textWidth",get_textHeight:"get_textHeight",set_textColor:"set_textColor",get_textColor:"get_textColor",set_text:"set_text",get_text:"get_text",set_sharpness:"set_sharpness",get_sharpness:"get_sharpness",get_selectionEndIndex:"get_selectionEndIndex",get_selectionBeginIndex:"get_selectionBeginIndex",set_selectable:"set_selectable",get_selectable:"get_selectable",set_scrollV:"set_scrollV",get_scrollV:"get_scrollV",set_scrollH:"set_scrollH",get_scrollH:"get_scrollH",set_restrict:"set_restrict",get_restrict:"get_restrict",get_numLines:"get_numLines",set_multiline:"set_multiline",get_multiline:"get_multiline",set_mouseWheelEnabled:"set_mouseWheelEnabled",get_mouseWheelEnabled:"get_mouseWheelEnabled",get_maxScrollV:"get_maxScrollV",get_maxScrollH:"get_maxScrollH",set_maxChars:"set_maxChars",get_maxChars:"get_maxChars",get_length:"get_length",set_htmlText:"set_htmlText",get_htmlText:"get_htmlText",set_gridFitType:"set_gridFitType",get_gridFitType:"get_gridFitType",set_embedFonts:"set_embedFonts",get_embedFonts:"get_embedFonts",set_displayAsPassword:"set_displayAsPassword",get_displayAsPassword:"get_displayAsPassword",set_defaultTextFormat:"set_defaultTextFormat",get_defaultTextFormat:"get_defaultTextFormat",get_caretIndex:"get_caretIndex",get_bottomScrollV:"get_bottomScrollV",set_borderColor:"set_borderColor",get_borderColor:"get_borderColor",set_border:"set_border",get_border:"get_border",set_backgroundColor:"set_backgroundColor",get_backgroundColor:"get_backgroundColor",set_background:"set_background",get_background:"get_background",set_autoSize:"set_autoSize",get_autoSize:"get_autoSize",set_antiAliasType:"set_antiAliasType",get_antiAliasType:"get_antiAliasType"})
});
var openfl_text_TextFieldAutoSize = {};
openfl_text_TextFieldAutoSize.fromString = function(value) {
	switch(value) {
	case "center":
		return 0;
	case "left":
		return 1;
	case "none":
		return 2;
	case "right":
		return 3;
	default:
		return null;
	}
};
openfl_text_TextFieldAutoSize.toString = function(this1) {
	switch(this1) {
	case 0:
		return "center";
	case 1:
		return "left";
	case 2:
		return "none";
	case 3:
		return "right";
	default:
		return null;
	}
};
var openfl_text_TextFieldType = {};
openfl_text_TextFieldType.fromString = function(value) {
	switch(value) {
	case "dynamic":
		return 0;
	case "input":
		return 1;
	default:
		return null;
	}
};
openfl_text_TextFieldType.toString = function(this1) {
	switch(this1) {
	case 0:
		return "dynamic";
	case 1:
		return "input";
	default:
		return null;
	}
};
var openfl_text_TextFormat = function(font,size,color,bold,italic,underline,url,target,align,leftMargin,rightMargin,indent,leading) {
	this.font = font;
	this.size = size;
	this.color = color;
	this.bold = bold;
	this.italic = italic;
	this.underline = underline;
	this.url = url;
	this.target = target;
	this.align = align;
	this.leftMargin = leftMargin;
	this.rightMargin = rightMargin;
	this.indent = indent;
	this.leading = leading;
};
$hxClasses["openfl.text.TextFormat"] = openfl_text_TextFormat;
openfl_text_TextFormat.__name__ = "openfl.text.TextFormat";
openfl_text_TextFormat.prototype = {
	align: null
	,blockIndent: null
	,bold: null
	,bullet: null
	,color: null
	,font: null
	,indent: null
	,italic: null
	,kerning: null
	,leading: null
	,leftMargin: null
	,letterSpacing: null
	,rightMargin: null
	,size: null
	,tabStops: null
	,target: null
	,underline: null
	,url: null
	,__ascent: null
	,__descent: null
	,clone: function() {
		var newFormat = new openfl_text_TextFormat(this.font,this.size,this.color,this.bold,this.italic,this.underline,this.url,this.target);
		newFormat.align = this.align;
		newFormat.leftMargin = this.leftMargin;
		newFormat.rightMargin = this.rightMargin;
		newFormat.indent = this.indent;
		newFormat.leading = this.leading;
		newFormat.blockIndent = this.blockIndent;
		newFormat.bullet = this.bullet;
		newFormat.kerning = this.kerning;
		newFormat.letterSpacing = this.letterSpacing;
		newFormat.tabStops = this.tabStops;
		newFormat.__ascent = this.__ascent;
		newFormat.__descent = this.__descent;
		return newFormat;
	}
	,__merge: function(format) {
		if(format.font != null) {
			this.font = format.font;
		}
		if(format.size != null) {
			this.size = format.size;
		}
		if(format.color != null) {
			this.color = format.color;
		}
		if(format.bold != null) {
			this.bold = format.bold;
		}
		if(format.italic != null) {
			this.italic = format.italic;
		}
		if(format.underline != null) {
			this.underline = format.underline;
		}
		if(format.url != null) {
			this.url = format.url;
		}
		if(format.target != null) {
			this.target = format.target;
		}
		if(format.align != null) {
			this.align = format.align;
		}
		if(format.leftMargin != null) {
			this.leftMargin = format.leftMargin;
		}
		if(format.rightMargin != null) {
			this.rightMargin = format.rightMargin;
		}
		if(format.indent != null) {
			this.indent = format.indent;
		}
		if(format.leading != null) {
			this.leading = format.leading;
		}
		if(format.blockIndent != null) {
			this.blockIndent = format.blockIndent;
		}
		if(format.bullet != null) {
			this.bullet = format.bullet;
		}
		if(format.kerning != null) {
			this.kerning = format.kerning;
		}
		if(format.letterSpacing != null) {
			this.letterSpacing = format.letterSpacing;
		}
		if(format.tabStops != null) {
			this.tabStops = format.tabStops;
		}
		if(format.__ascent != null) {
			this.__ascent = format.__ascent;
		}
		if(format.__descent != null) {
			this.__descent = format.__descent;
		}
	}
	,__class__: openfl_text_TextFormat
};
var openfl_text_TextFormatAlign = {};
openfl_text_TextFormatAlign.fromString = function(value) {
	switch(value) {
	case "center":
		return 0;
	case "end":
		return 1;
	case "justify":
		return 2;
	case "left":
		return 3;
	case "right":
		return 4;
	case "start":
		return 5;
	default:
		return null;
	}
};
openfl_text_TextFormatAlign.toString = function(this1) {
	switch(this1) {
	case 0:
		return "center";
	case 1:
		return "end";
	case 2:
		return "justify";
	case 3:
		return "left";
	case 4:
		return "right";
	case 5:
		return "start";
	default:
		return null;
	}
};
var openfl_text_TextLineMetrics = function(x,width,height,ascent,descent,leading) {
	this.x = x;
	this.width = width;
	this.height = height;
	this.ascent = ascent;
	this.descent = descent;
	this.leading = leading;
};
$hxClasses["openfl.text.TextLineMetrics"] = openfl_text_TextLineMetrics;
openfl_text_TextLineMetrics.__name__ = "openfl.text.TextLineMetrics";
openfl_text_TextLineMetrics.prototype = {
	ascent: null
	,descent: null
	,height: null
	,leading: null
	,width: null
	,x: null
	,__class__: openfl_text_TextLineMetrics
};
var openfl_ui_GameInput = function() {
	openfl_events_EventDispatcher.call(this);
	openfl_ui_GameInput.__instances.push(this);
};
$hxClasses["openfl.ui.GameInput"] = openfl_ui_GameInput;
openfl_ui_GameInput.__name__ = "openfl.ui.GameInput";
openfl_ui_GameInput.getDeviceAt = function(index) {
	if(index >= 0 && index < openfl_ui_GameInput.__deviceList.length) {
		return openfl_ui_GameInput.__deviceList[index];
	}
	return null;
};
openfl_ui_GameInput.__getDevice = function(gamepad) {
	if(gamepad == null) {
		return null;
	}
	if(openfl_ui_GameInput.__devices.h.__keys__[gamepad.__id__] == null) {
		var devices = lime_ui_Joystick.__getDeviceData();
		var device = devices[gamepad.id].id;
		var devices = lime_ui_Joystick.__getDeviceData();
		var device1 = new openfl_ui_GameInputDevice(device,devices[gamepad.id].id);
		openfl_ui_GameInput.__deviceList.push(device1);
		openfl_ui_GameInput.__devices.set(gamepad,device1);
		openfl_ui_GameInput.numDevices = openfl_ui_GameInput.__deviceList.length;
	}
	return openfl_ui_GameInput.__devices.h[gamepad.__id__];
};
openfl_ui_GameInput.__onGamepadAxisMove = function(gamepad,axis,value) {
	var device = openfl_ui_GameInput.__getDevice(gamepad);
	if(device == null) {
		return;
	}
	if(device.enabled) {
		if(!device.__axis.h.hasOwnProperty(axis)) {
			var control;
			if(axis == null) {
				control = "null";
			} else {
				switch(axis) {
				case 0:
					control = "LEFT_X";
					break;
				case 1:
					control = "LEFT_Y";
					break;
				case 2:
					control = "RIGHT_X";
					break;
				case 3:
					control = "RIGHT_Y";
					break;
				case 4:
					control = "TRIGGER_LEFT";
					break;
				case 5:
					control = "TRIGGER_RIGHT";
					break;
				default:
					control = "UNKNOWN (" + axis + ")";
				}
			}
			var control1 = new openfl_ui_GameInputControl(device,"AXIS_" + control,-1,1);
			device.__axis.h[axis] = control1;
			device.__controls.push(control1);
		}
		var control = device.__axis.h[axis];
		control.value = value;
		control.dispatchEvent(new openfl_events_Event("change"));
	}
};
openfl_ui_GameInput.__onGamepadButtonDown = function(gamepad,button) {
	var device = openfl_ui_GameInput.__getDevice(gamepad);
	if(device == null) {
		return;
	}
	if(device.enabled) {
		if(!device.__button.h.hasOwnProperty(button)) {
			var control;
			if(button == null) {
				control = "null";
			} else {
				switch(button) {
				case 0:
					control = "A";
					break;
				case 1:
					control = "B";
					break;
				case 2:
					control = "X";
					break;
				case 3:
					control = "Y";
					break;
				case 4:
					control = "BACK";
					break;
				case 5:
					control = "GUIDE";
					break;
				case 6:
					control = "START";
					break;
				case 7:
					control = "LEFT_STICK";
					break;
				case 8:
					control = "RIGHT_STICK";
					break;
				case 9:
					control = "LEFT_SHOULDER";
					break;
				case 10:
					control = "RIGHT_SHOULDER";
					break;
				case 11:
					control = "DPAD_UP";
					break;
				case 12:
					control = "DPAD_DOWN";
					break;
				case 13:
					control = "DPAD_LEFT";
					break;
				case 14:
					control = "DPAD_RIGHT";
					break;
				default:
					control = "UNKNOWN (" + button + ")";
				}
			}
			var control1 = new openfl_ui_GameInputControl(device,"BUTTON_" + control,0,1);
			device.__button.h[button] = control1;
			device.__controls.push(control1);
		}
		var control = device.__button.h[button];
		control.value = 1;
		control.dispatchEvent(new openfl_events_Event("change"));
	}
};
openfl_ui_GameInput.__onGamepadButtonUp = function(gamepad,button) {
	var device = openfl_ui_GameInput.__getDevice(gamepad);
	if(device == null) {
		return;
	}
	if(device.enabled) {
		if(!device.__button.h.hasOwnProperty(button)) {
			var control;
			if(button == null) {
				control = "null";
			} else {
				switch(button) {
				case 0:
					control = "A";
					break;
				case 1:
					control = "B";
					break;
				case 2:
					control = "X";
					break;
				case 3:
					control = "Y";
					break;
				case 4:
					control = "BACK";
					break;
				case 5:
					control = "GUIDE";
					break;
				case 6:
					control = "START";
					break;
				case 7:
					control = "LEFT_STICK";
					break;
				case 8:
					control = "RIGHT_STICK";
					break;
				case 9:
					control = "LEFT_SHOULDER";
					break;
				case 10:
					control = "RIGHT_SHOULDER";
					break;
				case 11:
					control = "DPAD_UP";
					break;
				case 12:
					control = "DPAD_DOWN";
					break;
				case 13:
					control = "DPAD_LEFT";
					break;
				case 14:
					control = "DPAD_RIGHT";
					break;
				default:
					control = "UNKNOWN (" + button + ")";
				}
			}
			var control1 = new openfl_ui_GameInputControl(device,"BUTTON_" + control,0,1);
			device.__button.h[button] = control1;
			device.__controls.push(control1);
		}
		var control = device.__button.h[button];
		control.value = 0;
		control.dispatchEvent(new openfl_events_Event("change"));
	}
};
openfl_ui_GameInput.__onGamepadConnect = function(gamepad) {
	var device = openfl_ui_GameInput.__getDevice(gamepad);
	if(device == null) {
		return;
	}
	var _g = 0;
	var _g1 = openfl_ui_GameInput.__instances;
	while(_g < _g1.length) {
		var instance = _g1[_g];
		++_g;
		instance.dispatchEvent(new openfl_events_GameInputEvent("deviceAdded",true,false,device));
	}
};
openfl_ui_GameInput.__onGamepadDisconnect = function(gamepad) {
	var device = openfl_ui_GameInput.__devices.h[gamepad.__id__];
	if(device != null) {
		if(openfl_ui_GameInput.__devices.h.__keys__[gamepad.__id__] != null) {
			HxOverrides.remove(openfl_ui_GameInput.__deviceList,openfl_ui_GameInput.__devices.h[gamepad.__id__]);
			openfl_ui_GameInput.__devices.remove(gamepad);
		}
		openfl_ui_GameInput.numDevices = openfl_ui_GameInput.__deviceList.length;
		var _g = 0;
		var _g1 = openfl_ui_GameInput.__instances;
		while(_g < _g1.length) {
			var instance = _g1[_g];
			++_g;
			instance.dispatchEvent(new openfl_events_GameInputEvent("deviceRemoved",true,false,device));
		}
	}
};
openfl_ui_GameInput.__super__ = openfl_events_EventDispatcher;
openfl_ui_GameInput.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	addEventListener: function(type,listener,useCapture,priority,useWeakReference) {
		if(useWeakReference == null) {
			useWeakReference = false;
		}
		if(priority == null) {
			priority = 0;
		}
		if(useCapture == null) {
			useCapture = false;
		}
		openfl_events_EventDispatcher.prototype.addEventListener.call(this,type,listener,useCapture,priority,useWeakReference);
		if(type == "deviceAdded") {
			var _g = 0;
			var _g1 = openfl_ui_GameInput.__deviceList;
			while(_g < _g1.length) {
				var device = _g1[_g];
				++_g;
				this.dispatchEvent(new openfl_events_GameInputEvent("deviceAdded",true,false,device));
			}
		}
	}
	,__class__: openfl_ui_GameInput
});
var openfl_ui_GameInputControl = function(device,id,minValue,maxValue,value) {
	if(value == null) {
		value = 0;
	}
	openfl_events_EventDispatcher.call(this);
	this.device = device;
	this.id = id;
	this.minValue = minValue;
	this.maxValue = maxValue;
	this.value = value;
};
$hxClasses["openfl.ui.GameInputControl"] = openfl_ui_GameInputControl;
openfl_ui_GameInputControl.__name__ = "openfl.ui.GameInputControl";
openfl_ui_GameInputControl.__super__ = openfl_events_EventDispatcher;
openfl_ui_GameInputControl.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	device: null
	,id: null
	,maxValue: null
	,minValue: null
	,value: null
	,__class__: openfl_ui_GameInputControl
});
var openfl_ui_GameInputDevice = function(id,name) {
	this.__controls = [];
	this.__button = new haxe_ds_IntMap();
	this.__axis = new haxe_ds_IntMap();
	this.id = id;
	this.name = name;
	var control;
	control = new openfl_ui_GameInputControl(this,"AXIS_" + 0,-1,1);
	this.__axis.h[0] = control;
	this.__controls.push(control);
	control = new openfl_ui_GameInputControl(this,"AXIS_" + 1,-1,1);
	this.__axis.h[1] = control;
	this.__controls.push(control);
	control = new openfl_ui_GameInputControl(this,"AXIS_" + 2,-1,1);
	this.__axis.h[2] = control;
	this.__controls.push(control);
	control = new openfl_ui_GameInputControl(this,"AXIS_" + 3,-1,1);
	this.__axis.h[3] = control;
	this.__controls.push(control);
	control = new openfl_ui_GameInputControl(this,"AXIS_" + 4,-1,1);
	this.__axis.h[4] = control;
	this.__controls.push(control);
	control = new openfl_ui_GameInputControl(this,"AXIS_" + 5,-1,1);
	this.__axis.h[5] = control;
	this.__controls.push(control);
	var _g = 0;
	while(_g < 15) {
		var i = _g++;
		control = new openfl_ui_GameInputControl(this,"BUTTON_" + i,0,1);
		this.__button.h[i] = control;
		this.__controls.push(control);
	}
};
$hxClasses["openfl.ui.GameInputDevice"] = openfl_ui_GameInputDevice;
openfl_ui_GameInputDevice.__name__ = "openfl.ui.GameInputDevice";
openfl_ui_GameInputDevice.prototype = {
	enabled: null
	,id: null
	,name: null
	,sampleInterval: null
	,__axis: null
	,__button: null
	,__controls: null
	,__gamepad: null
	,getCachedSamples: function(data,append) {
		if(append == null) {
			append = false;
		}
		return 0;
	}
	,getControlAt: function(i) {
		if(i >= 0 && i < this.__controls.length) {
			return this.__controls[i];
		}
		return null;
	}
	,startCachingSamples: function(numSamples,controls) {
	}
	,stopCachingSamples: function() {
	}
	,get_numControls: function() {
		return this.__controls.length;
	}
	,__class__: openfl_ui_GameInputDevice
	,__properties__: {get_numControls:"get_numControls"}
};
var openfl_ui_Keyboard = function() { };
$hxClasses["openfl.ui.Keyboard"] = openfl_ui_Keyboard;
openfl_ui_Keyboard.__name__ = "openfl.ui.Keyboard";
openfl_ui_Keyboard.isAccessible = function() {
	return false;
};
openfl_ui_Keyboard.__convertKeyCode = function(key) {
	switch(key) {
	case 8:
		return 8;
	case 9:
		return 9;
	case 13:
		return 13;
	case 27:
		return 27;
	case 32:
		return 32;
	case 33:
		return 49;
	case 34:
		return 222;
	case 35:
		return 51;
	case 36:
		return 52;
	case 37:
		return 53;
	case 38:
		return 55;
	case 39:
		return 222;
	case 40:
		return 57;
	case 41:
		return 48;
	case 42:
		return 56;
	case 44:
		return 188;
	case 45:
		return 189;
	case 46:
		return 190;
	case 47:
		return 191;
	case 48:
		return 48;
	case 49:
		return 49;
	case 50:
		return 50;
	case 51:
		return 51;
	case 52:
		return 52;
	case 53:
		return 53;
	case 54:
		return 54;
	case 55:
		return 55;
	case 56:
		return 56;
	case 57:
		return 57;
	case 58:
		return 186;
	case 59:
		return 186;
	case 60:
		return 60;
	case 61:
		return 187;
	case 62:
		return 190;
	case 63:
		return 191;
	case 64:
		return 50;
	case 91:
		return 219;
	case 92:
		return 220;
	case 93:
		return 221;
	case 94:
		return 54;
	case 95:
		return 189;
	case 96:
		return 192;
	case 97:
		return 65;
	case 98:
		return 66;
	case 99:
		return 67;
	case 100:
		return 68;
	case 101:
		return 69;
	case 102:
		return 70;
	case 103:
		return 71;
	case 104:
		return 72;
	case 105:
		return 73;
	case 106:
		return 74;
	case 107:
		return 75;
	case 108:
		return 76;
	case 109:
		return 77;
	case 110:
		return 78;
	case 111:
		return 79;
	case 112:
		return 80;
	case 113:
		return 81;
	case 114:
		return 82;
	case 115:
		return 83;
	case 116:
		return 84;
	case 117:
		return 85;
	case 118:
		return 86;
	case 119:
		return 87;
	case 120:
		return 88;
	case 121:
		return 89;
	case 122:
		return 90;
	case 127:
		return 46;
	case 1073741881:
		return 20;
	case 1073741882:
		return 112;
	case 1073741883:
		return 113;
	case 1073741884:
		return 114;
	case 1073741885:
		return 115;
	case 1073741886:
		return 116;
	case 1073741887:
		return 117;
	case 1073741888:
		return 118;
	case 1073741889:
		return 119;
	case 1073741890:
		return 120;
	case 1073741891:
		return 121;
	case 1073741892:
		return 122;
	case 1073741893:
		return 123;
	case 1073741894:
		return 301;
	case 1073741895:
		return 145;
	case 1073741896:
		return 19;
	case 1073741897:
		return 45;
	case 1073741898:
		return 36;
	case 1073741899:
		return 33;
	case 1073741901:
		return 35;
	case 1073741902:
		return 34;
	case 1073741903:
		return 39;
	case 1073741904:
		return 37;
	case 1073741905:
		return 40;
	case 1073741906:
		return 38;
	case 1073741907:
		return 144;
	case 1073741908:
		return 111;
	case 1073741909:
		return 106;
	case 1073741910:
		return 109;
	case 1073741911:
		return 107;
	case 1073741912:
		return 13;
	case 1073741913:
		return 97;
	case 1073741914:
		return 98;
	case 1073741915:
		return 99;
	case 1073741916:
		return 100;
	case 1073741917:
		return 101;
	case 1073741918:
		return 102;
	case 1073741919:
		return 103;
	case 1073741920:
		return 104;
	case 1073741921:
		return 105;
	case 1073741922:
		return 96;
	case 1073741923:
		return 110;
	case 1073741925:
		return 302;
	case 1073741928:
		return 124;
	case 1073741929:
		return 125;
	case 1073741930:
		return 126;
	case 1073741982:
		return 13;
	case 1073742044:
		return 110;
	case 1073742048:
		return 17;
	case 1073742049:
		return 16;
	case 1073742050:
		return 18;
	case 1073742051:
		return 15;
	case 1073742052:
		return 17;
	case 1073742053:
		return 16;
	case 1073742054:
		return 18;
	case 1073742055:
		return 15;
	default:
		return key;
	}
};
openfl_ui_Keyboard.__getCharCode = function(key,shift) {
	if(shift == null) {
		shift = false;
	}
	if(!shift) {
		switch(key) {
		case 8:
			return 8;
		case 9:
			return 9;
		case 13:
			return 13;
		case 27:
			return 27;
		case 32:
			return 32;
		case 186:
			return 59;
		case 187:
			return 61;
		case 188:
			return 44;
		case 189:
			return 45;
		case 190:
			return 46;
		case 191:
			return 47;
		case 192:
			return 96;
		case 219:
			return 91;
		case 220:
			return 92;
		case 221:
			return 93;
		case 222:
			return 39;
		}
		if(key >= 48 && key <= 57) {
			return key - 48 + 48;
		}
		if(key >= 65 && key <= 90) {
			return key - 65 + 97;
		}
	} else {
		switch(key) {
		case 48:
			return 41;
		case 49:
			return 33;
		case 50:
			return 64;
		case 51:
			return 35;
		case 52:
			return 36;
		case 53:
			return 37;
		case 54:
			return 94;
		case 55:
			return 38;
		case 56:
			return 42;
		case 57:
			return 40;
		case 186:
			return 58;
		case 187:
			return 43;
		case 188:
			return 60;
		case 189:
			return 95;
		case 190:
			return 62;
		case 191:
			return 63;
		case 192:
			return 126;
		case 219:
			return 123;
		case 220:
			return 124;
		case 221:
			return 125;
		case 222:
			return 34;
		}
		if(key >= 65 && key <= 90) {
			return key - 65 + 65;
		}
	}
	if(key >= 96 && key <= 105) {
		return key - 96 + 48;
	}
	switch(key) {
	case 8:
		return 8;
	case 13:
		return 13;
	case 46:
		return 127;
	case 106:
		return 42;
	case 107:
		return 43;
	case 108:
		return 44;
	case 110:
		return 45;
	case 111:
		return 46;
	}
	return 0;
};
openfl_ui_Keyboard.__getKeyLocation = function(key) {
	switch(key) {
	case 1073741908:case 1073741909:case 1073741910:case 1073741911:case 1073741912:case 1073741913:case 1073741914:case 1073741915:case 1073741916:case 1073741917:case 1073741918:case 1073741919:case 1073741920:case 1073741921:case 1073741922:case 1073741923:case 1073742044:
		return 3;
	case 1073742048:case 1073742049:case 1073742050:case 1073742051:
		return 1;
	case 1073742052:case 1073742053:case 1073742054:case 1073742055:
		return 2;
	default:
		return 0;
	}
};
var openfl_ui_Mouse = function() { };
$hxClasses["openfl.ui.Mouse"] = openfl_ui_Mouse;
openfl_ui_Mouse.__name__ = "openfl.ui.Mouse";
openfl_ui_Mouse.__properties__ = {set_cursor:"set_cursor",get_cursor:"get_cursor"};
openfl_ui_Mouse.hide = function() {
	openfl_ui_Mouse.__hidden = true;
	var _g = 0;
	var _g1 = lime_app_Application.current.__windows;
	while(_g < _g1.length) {
		var $window = _g1[_g];
		++_g;
		$window.set_cursor(null);
	}
};
openfl_ui_Mouse.show = function() {
	openfl_ui_Mouse.__hidden = false;
	var cacheCursor = openfl_ui_Mouse.__cursor;
	openfl_ui_Mouse.__cursor = null;
	openfl_ui_Mouse.set_cursor(cacheCursor);
};
openfl_ui_Mouse.get_cursor = function() {
	return openfl_ui_Mouse.__cursor;
};
openfl_ui_Mouse.set_cursor = function(value) {
	if(value == null) {
		value = "auto";
	}
	var setCursor = null;
	switch(value) {
	case "arrow":
		setCursor = lime_ui_MouseCursor.ARROW;
		break;
	case "button":
		setCursor = lime_ui_MouseCursor.POINTER;
		break;
	case "crosshair":
		setCursor = lime_ui_MouseCursor.CROSSHAIR;
		break;
	case "custom":
		setCursor = lime_ui_MouseCursor.CUSTOM;
		break;
	case "hand":
		setCursor = lime_ui_MouseCursor.MOVE;
		break;
	case "ibeam":
		setCursor = lime_ui_MouseCursor.TEXT;
		break;
	case "resize_nesw":
		setCursor = lime_ui_MouseCursor.RESIZE_NESW;
		break;
	case "resize_ns":
		setCursor = lime_ui_MouseCursor.RESIZE_NS;
		break;
	case "resize_nwse":
		setCursor = lime_ui_MouseCursor.RESIZE_NWSE;
		break;
	case "resize_we":
		setCursor = lime_ui_MouseCursor.RESIZE_WE;
		break;
	case "wait":
		setCursor = lime_ui_MouseCursor.WAIT;
		break;
	case "waitarrow":
		setCursor = lime_ui_MouseCursor.WAIT_ARROW;
		break;
	default:
	}
	if(setCursor != null && !openfl_ui_Mouse.__hidden) {
		var _g = 0;
		var _g1 = lime_app_Application.current.__windows;
		while(_g < _g1.length) {
			var $window = _g1[_g];
			++_g;
			$window.set_cursor(setCursor);
		}
	}
	return openfl_ui_Mouse.__cursor = value;
};
var openfl_ui_MouseCursor = {};
openfl_ui_MouseCursor.fromLimeCursor = function(cursor) {
	switch(cursor._hx_index) {
	case 0:
		return "arrow";
	case 1:
		return "crosshair";
	case 2:
		return "auto";
	case 3:
		return "hand";
	case 4:
		return "button";
	case 5:
		return "resize_nesw";
	case 6:
		return "resize_ns";
	case 7:
		return "resize_nwse";
	case 8:
		return "resize_we";
	case 9:
		return "ibeam";
	case 10:
		return "wait";
	case 11:
		return "waitarrow";
	case 12:
		return "custom";
	}
};
openfl_ui_MouseCursor.toLimeCursor = function(this1) {
	switch(this1) {
	case "arrow":
		return lime_ui_MouseCursor.ARROW;
	case "auto":
		return lime_ui_MouseCursor.DEFAULT;
	case "button":
		return lime_ui_MouseCursor.POINTER;
	case "crosshair":
		return lime_ui_MouseCursor.CROSSHAIR;
	case "custom":
		return lime_ui_MouseCursor.CUSTOM;
	case "hand":
		return lime_ui_MouseCursor.MOVE;
	case "ibeam":
		return lime_ui_MouseCursor.TEXT;
	case "resize_nesw":
		return lime_ui_MouseCursor.RESIZE_NESW;
	case "resize_ns":
		return lime_ui_MouseCursor.RESIZE_NS;
	case "resize_nwse":
		return lime_ui_MouseCursor.RESIZE_NWSE;
	case "resize_we":
		return lime_ui_MouseCursor.RESIZE_WE;
	case "wait":
		return lime_ui_MouseCursor.WAIT;
	case "waitarrow":
		return lime_ui_MouseCursor.WAIT_ARROW;
	default:
		return lime_ui_MouseCursor.DEFAULT;
	}
};
var openfl_ui_Multitouch = function() { };
$hxClasses["openfl.ui.Multitouch"] = openfl_ui_Multitouch;
openfl_ui_Multitouch.__name__ = "openfl.ui.Multitouch";
openfl_ui_Multitouch.__properties__ = {get_supportsTouchEvents:"get_supportsTouchEvents"};
openfl_ui_Multitouch.get_supportsTouchEvents = function() {
	if(('ontouchstart' in document.documentElement) || (window.DocumentTouch && document instanceof DocumentTouch)) {
		return true;
	}
	return false;
};
var openfl_ui_MultitouchInputMode = {};
openfl_ui_MultitouchInputMode.fromString = function(value) {
	switch(value) {
	case "gesture":
		return 0;
	case "none":
		return 1;
	case "touchPoint":
		return 2;
	default:
		return null;
	}
};
openfl_ui_MultitouchInputMode.toString = function(this1) {
	switch(this1) {
	case 0:
		return "gesture";
	case 1:
		return "none";
	case 2:
		return "touchPoint";
	default:
		return null;
	}
};
var openfl_utils_AGALMiniAssembler = function(debugging) {
	if(debugging == null) {
		debugging = false;
	}
	this.debugEnabled = false;
	this.debugEnabled = debugging;
	if(!openfl_utils_AGALMiniAssembler.initialized) {
		openfl_utils_AGALMiniAssembler.init();
	}
};
$hxClasses["openfl.utils.AGALMiniAssembler"] = openfl_utils_AGALMiniAssembler;
openfl_utils_AGALMiniAssembler.__name__ = "openfl.utils.AGALMiniAssembler";
openfl_utils_AGALMiniAssembler.init = function() {
	openfl_utils_AGALMiniAssembler.initialized = true;
	var this1 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v = new openfl_utils__$AGALMiniAssembler_OpCode("mov",2,0,0);
	this1.h["mov"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v = new openfl_utils__$AGALMiniAssembler_OpCode("add",3,1,0);
	this1.h["add"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v = new openfl_utils__$AGALMiniAssembler_OpCode("sub",3,2,0);
	this1.h["sub"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v = new openfl_utils__$AGALMiniAssembler_OpCode("mul",3,3,0);
	this1.h["mul"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v = new openfl_utils__$AGALMiniAssembler_OpCode("div",3,4,0);
	this1.h["div"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v = new openfl_utils__$AGALMiniAssembler_OpCode("rcp",2,5,0);
	this1.h["rcp"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v = new openfl_utils__$AGALMiniAssembler_OpCode("min",3,6,0);
	this1.h["min"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v = new openfl_utils__$AGALMiniAssembler_OpCode("max",3,7,0);
	this1.h["max"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v = new openfl_utils__$AGALMiniAssembler_OpCode("frc",2,8,0);
	this1.h["frc"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v = new openfl_utils__$AGALMiniAssembler_OpCode("sqt",2,9,0);
	this1.h["sqt"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v = new openfl_utils__$AGALMiniAssembler_OpCode("rsq",2,10,0);
	this1.h["rsq"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v = new openfl_utils__$AGALMiniAssembler_OpCode("pow",3,11,0);
	this1.h["pow"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v = new openfl_utils__$AGALMiniAssembler_OpCode("log",2,12,0);
	this1.h["log"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v = new openfl_utils__$AGALMiniAssembler_OpCode("exp",2,13,0);
	this1.h["exp"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v = new openfl_utils__$AGALMiniAssembler_OpCode("nrm",2,14,0);
	this1.h["nrm"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v = new openfl_utils__$AGALMiniAssembler_OpCode("sin",2,15,0);
	this1.h["sin"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v = new openfl_utils__$AGALMiniAssembler_OpCode("cos",2,16,0);
	this1.h["cos"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v = new openfl_utils__$AGALMiniAssembler_OpCode("crs",3,17,0);
	this1.h["crs"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v = new openfl_utils__$AGALMiniAssembler_OpCode("dp3",3,18,0);
	this1.h["dp3"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v = new openfl_utils__$AGALMiniAssembler_OpCode("dp4",3,19,0);
	this1.h["dp4"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v = new openfl_utils__$AGALMiniAssembler_OpCode("abs",2,20,0);
	this1.h["abs"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v = new openfl_utils__$AGALMiniAssembler_OpCode("neg",2,21,0);
	this1.h["neg"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v = new openfl_utils__$AGALMiniAssembler_OpCode("sat",2,22,0);
	this1.h["sat"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v = new openfl_utils__$AGALMiniAssembler_OpCode("m33",3,23,16);
	this1.h["m33"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v = new openfl_utils__$AGALMiniAssembler_OpCode("m44",3,24,16);
	this1.h["m44"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v = new openfl_utils__$AGALMiniAssembler_OpCode("m34",3,25,16);
	this1.h["m34"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v = new openfl_utils__$AGALMiniAssembler_OpCode("ddx",2,26,288);
	this1.h["ddx"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v = new openfl_utils__$AGALMiniAssembler_OpCode("ddy",2,27,288);
	this1.h["ddy"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v = new openfl_utils__$AGALMiniAssembler_OpCode("ife",2,28,897);
	this1.h["ife"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v = new openfl_utils__$AGALMiniAssembler_OpCode("ine",2,29,897);
	this1.h["ine"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v = new openfl_utils__$AGALMiniAssembler_OpCode("ifg",2,30,897);
	this1.h["ifg"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v = new openfl_utils__$AGALMiniAssembler_OpCode("ifl",2,31,897);
	this1.h["ifl"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v = new openfl_utils__$AGALMiniAssembler_OpCode("els",0,32,1921);
	this1.h["els"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v = new openfl_utils__$AGALMiniAssembler_OpCode("eif",0,33,1409);
	this1.h["eif"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v = new openfl_utils__$AGALMiniAssembler_OpCode("kil",1,39,160);
	this1.h["kil"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v = new openfl_utils__$AGALMiniAssembler_OpCode("tex",3,40,40);
	this1.h["tex"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v = new openfl_utils__$AGALMiniAssembler_OpCode("sge",3,41,0);
	this1.h["sge"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v = new openfl_utils__$AGALMiniAssembler_OpCode("slt",3,42,0);
	this1.h["slt"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v = new openfl_utils__$AGALMiniAssembler_OpCode("sgn",2,43,0);
	this1.h["sgn"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v = new openfl_utils__$AGALMiniAssembler_OpCode("seq",3,44,0);
	this1.h["seq"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v = new openfl_utils__$AGALMiniAssembler_OpCode("sne",3,45,0);
	this1.h["sne"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v = new openfl_utils__$AGALMiniAssembler_Sampler("rgba",8,0);
	this1.h["rgba"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v = new openfl_utils__$AGALMiniAssembler_Sampler("compressed",8,1);
	this1.h["compressed"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v = new openfl_utils__$AGALMiniAssembler_Sampler("compressedalpha",8,2);
	this1.h["compressedalpha"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v = new openfl_utils__$AGALMiniAssembler_Sampler("dxt1",8,1);
	this1.h["dxt1"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v = new openfl_utils__$AGALMiniAssembler_Sampler("dxt5",8,2);
	this1.h["dxt5"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v = new openfl_utils__$AGALMiniAssembler_Sampler("video",8,3);
	this1.h["video"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v = new openfl_utils__$AGALMiniAssembler_Sampler("2d",12,0);
	this1.h["2d"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v = new openfl_utils__$AGALMiniAssembler_Sampler("3d",12,2);
	this1.h["3d"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v = new openfl_utils__$AGALMiniAssembler_Sampler("cube",12,1);
	this1.h["cube"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v = new openfl_utils__$AGALMiniAssembler_Sampler("mipnearest",24,1);
	this1.h["mipnearest"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v = new openfl_utils__$AGALMiniAssembler_Sampler("miplinear",24,2);
	this1.h["miplinear"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v = new openfl_utils__$AGALMiniAssembler_Sampler("mipnone",24,0);
	this1.h["mipnone"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v = new openfl_utils__$AGALMiniAssembler_Sampler("nomip",24,0);
	this1.h["nomip"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v = new openfl_utils__$AGALMiniAssembler_Sampler("nearest",28,0);
	this1.h["nearest"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v = new openfl_utils__$AGALMiniAssembler_Sampler("linear",28,1);
	this1.h["linear"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v = new openfl_utils__$AGALMiniAssembler_Sampler("anisotropic2x",28,2);
	this1.h["anisotropic2x"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v = new openfl_utils__$AGALMiniAssembler_Sampler("anisotropic4x",28,3);
	this1.h["anisotropic4x"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v = new openfl_utils__$AGALMiniAssembler_Sampler("anisotropic8x",28,4);
	this1.h["anisotropic8x"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v = new openfl_utils__$AGALMiniAssembler_Sampler("anisotropic16x",28,5);
	this1.h["anisotropic16x"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v = new openfl_utils__$AGALMiniAssembler_Sampler("centroid",16,1);
	this1.h["centroid"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v = new openfl_utils__$AGALMiniAssembler_Sampler("single",16,2);
	this1.h["single"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v = new openfl_utils__$AGALMiniAssembler_Sampler("ignoresampler",16,4);
	this1.h["ignoresampler"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v = new openfl_utils__$AGALMiniAssembler_Sampler("repeat",20,1);
	this1.h["repeat"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v = new openfl_utils__$AGALMiniAssembler_Sampler("wrap",20,1);
	this1.h["wrap"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v = new openfl_utils__$AGALMiniAssembler_Sampler("clamp",20,0);
	this1.h["clamp"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v = new openfl_utils__$AGALMiniAssembler_Sampler("clamp_u_repeat_v",20,2);
	this1.h["clamp_u_repeat_v"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v = new openfl_utils__$AGALMiniAssembler_Sampler("repeat_u_clamp_v",20,3);
	this1.h["repeat_u_clamp_v"] = v;
};
openfl_utils_AGALMiniAssembler.prototype = {
	agalcode: null
	,error: null
	,verbose: null
	,debugEnabled: null
	,assemble2: function(context3D,version,vertexSource,fragmentSource) {
		var agalVertex = this.assemble("vertex",vertexSource,version);
		var agalFragment = this.assemble("fragment",fragmentSource,version);
		var program = context3D.createProgram();
		program.upload(agalVertex,agalFragment);
		return program;
	}
	,assemble: function(mode,source,version,ignoreLimits) {
		if(ignoreLimits == null) {
			ignoreLimits = false;
		}
		if(version == null) {
			version = 1;
		}
		var start = openfl_Lib.getTimer();
		var this1 = new openfl_utils_ByteArrayData(0);
		this.agalcode = this1;
		this.error = "";
		var isFrag = false;
		if(mode == "fragment") {
			isFrag = true;
		} else if(mode != "vertex") {
			this.error = "ERROR: mode needs to be \"" + "fragment" + "\" or \"" + "vertex" + "\" but is \"" + mode + "\".";
		}
		this.agalcode.__endian = 1;
		this.agalcode.writeByte(160);
		this.agalcode.writeUnsignedInt(version);
		this.agalcode.writeByte(161);
		this.agalcode.writeByte(isFrag ? 1 : 0);
		this.initregmap(version,ignoreLimits);
		var lines = StringTools.replace(source,"\r","\n").split("\n");
		var nops = 0;
		var lng = lines.length;
		var reg1 = new EReg("<.*>","g");
		var reg2 = new EReg("([\\w\\.\\-\\+]+)","gi");
		var reg3 = new EReg("^\\w{3}","ig");
		var reg4 = new EReg("vc\\[([vofi][acostdip]?[d]?)(\\d*)?(\\.[xyzw](\\+\\d{1,3})?)?\\](\\.[xyzw]{1,4})?|([vofi][acostdip]?[d]?)(\\d*)?(\\.[xyzw]{1,4})?","gi");
		var reg5 = new EReg("\\[.*\\]","ig");
		var reg6 = new EReg("^\\b[A-Za-z]{1,3}","ig");
		var reg7 = new EReg("\\d+","");
		var reg8 = new EReg("(\\.[xyzw]{1,4})","");
		var reg9 = new EReg("[A-Za-z]{1,3}","ig");
		var reg10 = new EReg("(\\.[xyzw]{1,1})","");
		var reg11 = new EReg("\\+\\d{1,3}","ig");
		var i = 0;
		while(i < lng && this.error == "") {
			var line = StringTools.trim(lines[i]);
			var startcomment = line.indexOf("//");
			if(startcomment != -1) {
				line = HxOverrides.substr(line,0,startcomment);
			}
			var optsi = reg1.match(line) ? reg1.matchedPos().pos : -1;
			var opts = null;
			if(optsi != -1) {
				opts = this.match(HxOverrides.substr(line,optsi,null),reg2);
				line = HxOverrides.substr(line,0,optsi);
			}
			var opCode = null;
			var opFound = null;
			if(reg3.match(line)) {
				opCode = reg3.matched(0);
				opFound = openfl_utils_AGALMiniAssembler.OPMAP.h[opCode];
			}
			if(opFound == null) {
				if(line.length >= 3) {
					lime_utils_Log.warn("warning: bad line " + i + ": " + lines[i],{ fileName : "openfl/utils/AGALMiniAssembler.hx", lineNumber : 262, className : "openfl.utils.AGALMiniAssembler", methodName : "assemble"});
				}
				++i;
				continue;
			}
			if(this.debugEnabled) {
				lime_utils_Log.info(opFound,{ fileName : "openfl/utils/AGALMiniAssembler.hx", lineNumber : 272, className : "openfl.utils.AGALMiniAssembler", methodName : "assemble"});
			}
			if(opFound == null) {
				if(line.length >= 3) {
					lime_utils_Log.warn("warning: bad line " + i + ": " + lines[i],{ fileName : "openfl/utils/AGALMiniAssembler.hx", lineNumber : 279, className : "openfl.utils.AGALMiniAssembler", methodName : "assemble"});
				}
				++i;
				continue;
			}
			line = HxOverrides.substr(line,line.indexOf(opFound.name) + opFound.name.length,null);
			if((opFound.flags & 256) != 0 && version < 2) {
				this.error = "error: opcode requires version 2.";
				break;
			}
			if((opFound.flags & 64) != 0 && isFrag) {
				this.error = "error: opcode is only allowed in vertex programs.";
				break;
			}
			if((opFound.flags & 32) != 0 && !isFrag) {
				this.error = "error: opcode is only allowed in fragment programs.";
				break;
			}
			if(this.verbose) {
				lime_utils_Log.info("emit opcode=" + Std.string(opFound),{ fileName : "openfl/utils/AGALMiniAssembler.hx", lineNumber : 308, className : "openfl.utils.AGALMiniAssembler", methodName : "assemble"});
			}
			this.agalcode.writeUnsignedInt(opFound.emitCode);
			++nops;
			if(nops > 4096) {
				this.error = "error: too many opcodes. maximum is " + 4096 + ".";
				break;
			}
			var regs = this.match(line,reg4);
			if(regs.length != opFound.numRegister) {
				this.error = "error: wrong number of operands. found " + regs.length + " but expected " + opFound.numRegister + ".";
				break;
			}
			var badreg = false;
			var pad = 160;
			var regLength = regs.length;
			var _g = 0;
			var _g1 = regLength;
			while(_g < _g1) {
				var j = _g++;
				var isRelative = false;
				var relreg = this.match(regs[j],reg5);
				if(relreg.length > 0) {
					regs[j] = StringTools.replace(regs[j],relreg[0],"0");
					if(this.verbose) {
						lime_utils_Log.info("IS REL",{ fileName : "openfl/utils/AGALMiniAssembler.hx", lineNumber : 344, className : "openfl.utils.AGALMiniAssembler", methodName : "assemble"});
					}
					isRelative = true;
				}
				var res = this.match(regs[j],reg6);
				if(res.length == 0) {
					this.error = "error: could not parse operand " + j + " (" + regs[j] + ").";
					badreg = true;
					break;
				}
				var regFound = openfl_utils_AGALMiniAssembler.REGMAP.h[res[0]];
				if(this.debugEnabled) {
					lime_utils_Log.info(regFound,{ fileName : "openfl/utils/AGALMiniAssembler.hx", lineNumber : 363, className : "openfl.utils.AGALMiniAssembler", methodName : "assemble"});
				}
				if(regFound == null) {
					this.error = "error: could not find register name for operand " + j + " (" + regs[j] + ").";
					badreg = true;
					break;
				}
				if(isFrag) {
					if((regFound.flags & 32) == 0) {
						this.error = "error: register operand " + j + " (" + regs[j] + ") only allowed in vertex programs.";
						badreg = true;
						break;
					}
					if(isRelative) {
						this.error = "error: register operand " + j + " (" + regs[j] + ") relative adressing not allowed in fragment programs.";
						badreg = true;
						break;
					}
				} else if((regFound.flags & 64) == 0) {
					this.error = "error: register operand " + j + " (" + regs[j] + ") only allowed in fragment programs.";
					badreg = true;
					break;
				}
				regs[j] = HxOverrides.substr(regs[j],regs[j].indexOf(regFound.name) + regFound.name.length,null);
				var idxmatch = isRelative ? this.match(relreg[0],reg7) : this.match(regs[j],reg7);
				var regidx = 0;
				if(idxmatch.length > 0) {
					regidx = Std.parseInt(idxmatch[0]);
				}
				if(UInt.gt(regidx,regFound.range)) {
					var tmp = regFound.range + 1;
					this.error = "error: register operand " + j + " (" + regs[j] + ") index exceeds limit of " + (tmp == null ? "null" : Std.string(UInt.toFloat(tmp))) + ".";
					badreg = true;
					break;
				}
				var regmask = 0;
				var maskmatch = this.match(regs[j],reg8);
				var isDest = j == 0 && (opFound.flags & 128) == 0;
				var isSampler = j == 2 && (opFound.flags & 8) != 0;
				var reltype = 0;
				var relsel = 0;
				var reloffset = 0;
				if(isDest && isRelative) {
					this.error = "error: relative can not be destination";
					badreg = true;
					break;
				}
				if(maskmatch.length > 0) {
					regmask = 0;
					var cv = 0;
					var maskLength = maskmatch[0].length;
					var k = 1;
					while(k < maskLength) {
						cv = HxOverrides.cca(maskmatch[0],k) - 120;
						if(UInt.gt(cv,2)) {
							cv = 3;
						}
						if(isDest) {
							regmask |= 1 << cv;
						} else {
							regmask = regmask | cv << (k - 1 << 1);
						}
						++k;
					}
					if(!isDest) {
						while(k <= 4) {
							regmask = regmask | cv << (k - 1 << 1);
							++k;
						}
					}
				} else {
					regmask = isDest ? 15 : 228;
				}
				if(isRelative) {
					var relname = this.match(relreg[0],reg9);
					var regFoundRel = openfl_utils_AGALMiniAssembler.REGMAP.h[relname[0]];
					if(regFoundRel == null) {
						this.error = "error: bad index register";
						badreg = true;
						break;
					}
					reltype = regFoundRel.emitCode;
					var selmatch = this.match(relreg[0],reg10);
					if(selmatch.length == 0) {
						this.error = "error: bad index register select";
						badreg = true;
						break;
					}
					relsel = HxOverrides.cca(selmatch[0],1) - 120;
					if(UInt.gt(relsel,2)) {
						relsel = 3;
					}
					var relofs = this.match(relreg[0],reg11);
					if(relofs.length > 0) {
						reloffset = Std.parseInt(relofs[0]);
					}
					if(reloffset < 0 || reloffset > 255) {
						this.error = "error: index offset " + reloffset + " out of bounds. [0..255]";
						badreg = true;
						break;
					}
					if(this.verbose) {
						lime_utils_Log.info("RELATIVE: type=" + reltype + "==" + relname[0] + " sel=" + (relsel == null ? "null" : Std.string(UInt.toFloat(relsel))) + "==" + selmatch[0] + " idx=" + (regidx == null ? "null" : Std.string(UInt.toFloat(regidx))) + " offset=" + reloffset,{ fileName : "openfl/utils/AGALMiniAssembler.hx", lineNumber : 518, className : "openfl.utils.AGALMiniAssembler", methodName : "assemble"});
					}
				}
				if(this.verbose) {
					lime_utils_Log.info("  emit argcode=" + Std.string(regFound) + "[" + (regidx == null ? "null" : Std.string(UInt.toFloat(regidx))) + "][" + regmask + "]",{ fileName : "openfl/utils/AGALMiniAssembler.hx", lineNumber : 525, className : "openfl.utils.AGALMiniAssembler", methodName : "assemble"});
				}
				if(isDest) {
					this.agalcode.writeShort(regidx);
					this.agalcode.writeByte(regmask);
					this.agalcode.writeByte(regFound.emitCode);
					pad -= 32;
				} else if(isSampler) {
					if(this.verbose) {
						lime_utils_Log.info("  emit sampler",{ fileName : "openfl/utils/AGALMiniAssembler.hx", lineNumber : 541, className : "openfl.utils.AGALMiniAssembler", methodName : "assemble"});
					}
					var samplerbits = 5;
					var optsLength = opts == null ? 0 : opts.length;
					var bias = 0.0;
					var _g2 = 0;
					var _g3 = optsLength;
					while(_g2 < _g3) {
						var k1 = _g2++;
						if(this.verbose) {
							lime_utils_Log.info("    opt: " + opts[k1],{ fileName : "openfl/utils/AGALMiniAssembler.hx", lineNumber : 552, className : "openfl.utils.AGALMiniAssembler", methodName : "assemble"});
						}
						var optfound = openfl_utils_AGALMiniAssembler.SAMPLEMAP.h[opts[k1]];
						if(optfound == null) {
							bias = parseFloat(opts[k1]);
							if(this.verbose) {
								lime_utils_Log.info("    bias: " + bias,{ fileName : "openfl/utils/AGALMiniAssembler.hx", lineNumber : 565, className : "openfl.utils.AGALMiniAssembler", methodName : "assemble"});
							}
						} else {
							if(optfound.flag != 16) {
								samplerbits &= ~(15 << optfound.flag);
							}
							samplerbits = samplerbits | optfound.mask << optfound.flag;
						}
					}
					this.agalcode.writeShort(regidx);
					this.agalcode.writeByte(bias * 8.0 | 0);
					this.agalcode.writeByte(0);
					this.agalcode.writeUnsignedInt(samplerbits);
					if(this.verbose) {
						lime_utils_Log.info("    bits: " + (samplerbits - 5),{ fileName : "openfl/utils/AGALMiniAssembler.hx", lineNumber : 586, className : "openfl.utils.AGALMiniAssembler", methodName : "assemble"});
					}
					pad -= 64;
				} else {
					if(j == 0) {
						this.agalcode.writeUnsignedInt(0);
						pad -= 32;
					}
					this.agalcode.writeShort(regidx);
					this.agalcode.writeByte(reloffset);
					this.agalcode.writeByte(regmask);
					this.agalcode.writeByte(regFound.emitCode);
					this.agalcode.writeByte(reltype);
					this.agalcode.writeShort(isRelative ? relsel | 32768 : 0);
					pad -= 64;
				}
			}
			var j1 = 0;
			while(j1 < pad) {
				this.agalcode.writeByte(0);
				j1 += 8;
			}
			if(badreg) {
				break;
			}
			++i;
		}
		if(this.error != "") {
			this.error += "\n  at line " + i + " " + lines[i];
			openfl_utils_ByteArray.set_length(this.agalcode,0);
			lime_utils_Log.info(this.error,{ fileName : "openfl/utils/AGALMiniAssembler.hx", lineNumber : 631, className : "openfl.utils.AGALMiniAssembler", methodName : "assemble"});
		}
		if(this.debugEnabled) {
			var dbgLine = "generated bytecode:";
			var agalLength = openfl_utils_ByteArray.get_length(this.agalcode);
			var _g = 0;
			var _g1 = agalLength;
			while(_g < _g1) {
				var index = _g++;
				if(index % 16 == 0) {
					dbgLine += "\n";
				}
				if(index % 4 == 0) {
					dbgLine += " ";
				}
				var byteStr = StringTools.hex(this.agalcode.b[index],2);
				if(byteStr.length < 2) {
					byteStr = "0" + byteStr;
				}
				dbgLine += byteStr;
			}
			lime_utils_Log.info(dbgLine,{ fileName : "openfl/utils/AGALMiniAssembler.hx", lineNumber : 662, className : "openfl.utils.AGALMiniAssembler", methodName : "assemble"});
		}
		if(this.verbose) {
			lime_utils_Log.info("AGALMiniAssembler.assemble time: " + (openfl_Lib.getTimer() - start) / 1000 + "s",{ fileName : "openfl/utils/AGALMiniAssembler.hx", lineNumber : 667, className : "openfl.utils.AGALMiniAssembler", methodName : "assemble"});
		}
		return this.agalcode;
	}
	,initregmap: function(version,ignorelimits) {
		var this1 = openfl_utils_AGALMiniAssembler.REGMAP;
		var v = new openfl_utils__$AGALMiniAssembler_Register("va","vertex attribute",0,ignorelimits ? 1024 : version == 1 || version == 2 ? 7 : 15,66);
		this1.h["va"] = v;
		var this1 = openfl_utils_AGALMiniAssembler.REGMAP;
		var v = new openfl_utils__$AGALMiniAssembler_Register("vc","vertex constant",1,ignorelimits ? 1024 : version == 1 ? 127 : 249,66);
		this1.h["vc"] = v;
		var this1 = openfl_utils_AGALMiniAssembler.REGMAP;
		var v = new openfl_utils__$AGALMiniAssembler_Register("vt","vertex temporary",2,ignorelimits ? 1024 : version == 1 ? 7 : 25,67);
		this1.h["vt"] = v;
		var this1 = openfl_utils_AGALMiniAssembler.REGMAP;
		var v = new openfl_utils__$AGALMiniAssembler_Register("vo","vertex output",3,ignorelimits ? 1024 : 0,65);
		this1.h["vo"] = v;
		var this1 = openfl_utils_AGALMiniAssembler.REGMAP;
		var v = new openfl_utils__$AGALMiniAssembler_Register("vi","varying",4,ignorelimits ? 1024 : version == 1 ? 7 : 9,99);
		this1.h["vi"] = v;
		var this1 = openfl_utils_AGALMiniAssembler.REGMAP;
		var v = new openfl_utils__$AGALMiniAssembler_Register("fc","fragment constant",1,ignorelimits ? 1024 : version == 1 ? 27 : version == 2 ? 63 : 199,34);
		this1.h["fc"] = v;
		var this1 = openfl_utils_AGALMiniAssembler.REGMAP;
		var v = new openfl_utils__$AGALMiniAssembler_Register("ft","fragment temporary",2,ignorelimits ? 1024 : version == 1 ? 7 : 25,35);
		this1.h["ft"] = v;
		var this1 = openfl_utils_AGALMiniAssembler.REGMAP;
		var v = new openfl_utils__$AGALMiniAssembler_Register("fs","texture sampler",5,ignorelimits ? 1024 : 7,34);
		this1.h["fs"] = v;
		var this1 = openfl_utils_AGALMiniAssembler.REGMAP;
		var v = new openfl_utils__$AGALMiniAssembler_Register("fo","fragment output",3,ignorelimits ? 1024 : version == 1 ? 0 : 3,33);
		this1.h["fo"] = v;
		var this1 = openfl_utils_AGALMiniAssembler.REGMAP;
		var v = new openfl_utils__$AGALMiniAssembler_Register("fd","fragment depth output",6,ignorelimits ? 1024 : version == 1 ? -1 : 0,33);
		this1.h["fd"] = v;
		var this1 = openfl_utils_AGALMiniAssembler.REGMAP;
		var v = new openfl_utils__$AGALMiniAssembler_Register("iid","instance id",7,ignorelimits ? 1024 : 0,66);
		this1.h["iid"] = v;
		var v = openfl_utils_AGALMiniAssembler.REGMAP.h["vo"];
		openfl_utils_AGALMiniAssembler.REGMAP.h["op"] = v;
		var v = openfl_utils_AGALMiniAssembler.REGMAP.h["vi"];
		openfl_utils_AGALMiniAssembler.REGMAP.h["i"] = v;
		var v = openfl_utils_AGALMiniAssembler.REGMAP.h["vi"];
		openfl_utils_AGALMiniAssembler.REGMAP.h["v"] = v;
		var v = openfl_utils_AGALMiniAssembler.REGMAP.h["fo"];
		openfl_utils_AGALMiniAssembler.REGMAP.h["oc"] = v;
		var v = openfl_utils_AGALMiniAssembler.REGMAP.h["fd"];
		openfl_utils_AGALMiniAssembler.REGMAP.h["od"] = v;
		var v = openfl_utils_AGALMiniAssembler.REGMAP.h["vi"];
		openfl_utils_AGALMiniAssembler.REGMAP.h["fi"] = v;
	}
	,match: function(value,reg) {
		var matches = [];
		var index = 0;
		var match;
		while(reg.matchSub(value,index)) {
			match = reg.matched(0);
			matches.push(match);
			index = reg.matchedPos().pos + match.length;
		}
		return matches;
	}
	,__class__: openfl_utils_AGALMiniAssembler
};
var openfl_utils__$AGALMiniAssembler_OpCode = function(name,numRegister,emitCode,flags) {
	this.name = name;
	this.numRegister = numRegister;
	this.emitCode = emitCode;
	this.flags = flags;
};
$hxClasses["openfl.utils._AGALMiniAssembler.OpCode"] = openfl_utils__$AGALMiniAssembler_OpCode;
openfl_utils__$AGALMiniAssembler_OpCode.__name__ = "openfl.utils._AGALMiniAssembler.OpCode";
openfl_utils__$AGALMiniAssembler_OpCode.prototype = {
	emitCode: null
	,flags: null
	,name: null
	,numRegister: null
	,toString: function() {
		return "[OpCode name=\"" + this.name + "\", numRegister=" + this.numRegister + ", emitCode=" + this.emitCode + ", flags=" + this.flags + "]";
	}
	,__class__: openfl_utils__$AGALMiniAssembler_OpCode
};
var openfl_utils__$AGALMiniAssembler_Register = function(name,longName,emitCode,range,flags) {
	this.name = name;
	this.longName = longName;
	this.emitCode = emitCode;
	this.range = range;
	this.flags = flags;
};
$hxClasses["openfl.utils._AGALMiniAssembler.Register"] = openfl_utils__$AGALMiniAssembler_Register;
openfl_utils__$AGALMiniAssembler_Register.__name__ = "openfl.utils._AGALMiniAssembler.Register";
openfl_utils__$AGALMiniAssembler_Register.prototype = {
	emitCode: null
	,name: null
	,longName: null
	,flags: null
	,range: null
	,toString: function() {
		return "[Register name=\"" + this.name + "\", longName=\"" + this.longName + "\", emitCode=" + (this.emitCode == null ? "null" : Std.string(UInt.toFloat(this.emitCode))) + ", range=" + (this.range == null ? "null" : Std.string(UInt.toFloat(this.range))) + ", flags=" + (this.flags == null ? "null" : Std.string(UInt.toFloat(this.flags))) + "]";
	}
	,__class__: openfl_utils__$AGALMiniAssembler_Register
};
var openfl_utils__$AGALMiniAssembler_Sampler = function(name,flag,mask) {
	this.name = name;
	this.flag = flag;
	this.mask = mask;
};
$hxClasses["openfl.utils._AGALMiniAssembler.Sampler"] = openfl_utils__$AGALMiniAssembler_Sampler;
openfl_utils__$AGALMiniAssembler_Sampler.__name__ = "openfl.utils._AGALMiniAssembler.Sampler";
openfl_utils__$AGALMiniAssembler_Sampler.prototype = {
	flag: null
	,mask: null
	,name: null
	,toString: function() {
		return "[Sampler name=\"" + this.name + "\", flag=\"" + (this.flag == null ? "null" : Std.string(UInt.toFloat(this.flag))) + "\", mask=" + (this.mask == null ? "null" : Std.string(UInt.toFloat(this.mask))) + "]";
	}
	,__class__: openfl_utils__$AGALMiniAssembler_Sampler
};
var openfl_utils_IAssetCache = function() { };
$hxClasses["openfl.utils.IAssetCache"] = openfl_utils_IAssetCache;
openfl_utils_IAssetCache.__name__ = "openfl.utils.IAssetCache";
openfl_utils_IAssetCache.__isInterface__ = true;
openfl_utils_IAssetCache.prototype = {
	get_enabled: null
	,set_enabled: null
	,clear: null
	,getBitmapData: null
	,getFont: null
	,getSound: null
	,hasBitmapData: null
	,hasFont: null
	,hasSound: null
	,removeBitmapData: null
	,removeFont: null
	,removeSound: null
	,setBitmapData: null
	,setFont: null
	,setSound: null
	,__class__: openfl_utils_IAssetCache
	,__properties__: {set_enabled:"set_enabled",get_enabled:"get_enabled"}
};
var openfl_utils_AssetCache = function() {
	this.__enabled = true;
	this.bitmapData = new haxe_ds_StringMap();
	this.font = new haxe_ds_StringMap();
	this.sound = new haxe_ds_StringMap();
};
$hxClasses["openfl.utils.AssetCache"] = openfl_utils_AssetCache;
openfl_utils_AssetCache.__name__ = "openfl.utils.AssetCache";
openfl_utils_AssetCache.__interfaces__ = [openfl_utils_IAssetCache];
openfl_utils_AssetCache.prototype = {
	bitmapData: null
	,font: null
	,sound: null
	,__enabled: null
	,clear: function(prefix) {
		if(prefix == null) {
			this.bitmapData = new haxe_ds_StringMap();
			this.font = new haxe_ds_StringMap();
			this.sound = new haxe_ds_StringMap();
		} else {
			var keys = haxe_ds_StringMap.keysIterator(this.bitmapData.h);
			var key = keys;
			while(key.hasNext()) {
				var key1 = key.next();
				if(StringTools.startsWith(key1,prefix)) {
					this.removeBitmapData(key1);
				}
			}
			var keys = haxe_ds_StringMap.keysIterator(this.font.h);
			var key = keys;
			while(key.hasNext()) {
				var key1 = key.next();
				if(StringTools.startsWith(key1,prefix)) {
					this.removeFont(key1);
				}
			}
			var keys = haxe_ds_StringMap.keysIterator(this.sound.h);
			var key = keys;
			while(key.hasNext()) {
				var key1 = key.next();
				if(StringTools.startsWith(key1,prefix)) {
					this.removeSound(key1);
				}
			}
		}
	}
	,getBitmapData: function(id) {
		return this.bitmapData.h[id];
	}
	,getFont: function(id) {
		return this.font.h[id];
	}
	,getSound: function(id) {
		return this.sound.h[id];
	}
	,hasBitmapData: function(id) {
		return Object.prototype.hasOwnProperty.call(this.bitmapData.h,id);
	}
	,hasFont: function(id) {
		return Object.prototype.hasOwnProperty.call(this.font.h,id);
	}
	,hasSound: function(id) {
		return Object.prototype.hasOwnProperty.call(this.sound.h,id);
	}
	,removeBitmapData: function(id) {
		var _this = lime_utils_Assets.cache.image;
		if(Object.prototype.hasOwnProperty.call(_this.h,id)) {
			delete(_this.h[id]);
		}
		var _this = this.bitmapData;
		if(Object.prototype.hasOwnProperty.call(_this.h,id)) {
			delete(_this.h[id]);
			return true;
		} else {
			return false;
		}
	}
	,removeFont: function(id) {
		var _this = lime_utils_Assets.cache.font;
		if(Object.prototype.hasOwnProperty.call(_this.h,id)) {
			delete(_this.h[id]);
		}
		var _this = this.font;
		if(Object.prototype.hasOwnProperty.call(_this.h,id)) {
			delete(_this.h[id]);
			return true;
		} else {
			return false;
		}
	}
	,removeSound: function(id) {
		var _this = lime_utils_Assets.cache.audio;
		if(Object.prototype.hasOwnProperty.call(_this.h,id)) {
			delete(_this.h[id]);
		}
		var _this = this.sound;
		if(Object.prototype.hasOwnProperty.call(_this.h,id)) {
			delete(_this.h[id]);
			return true;
		} else {
			return false;
		}
	}
	,setBitmapData: function(id,bitmapData) {
		this.bitmapData.h[id] = bitmapData;
	}
	,setFont: function(id,font) {
		this.font.h[id] = font;
	}
	,setSound: function(id,sound) {
		this.sound.h[id] = sound;
	}
	,get_enabled: function() {
		return this.__enabled;
	}
	,set_enabled: function(value) {
		return this.__enabled = value;
	}
	,__class__: openfl_utils_AssetCache
	,__properties__: {set_enabled:"set_enabled",get_enabled:"get_enabled"}
};
var openfl_utils_Assets = function() { };
$hxClasses["openfl.utils.Assets"] = openfl_utils_Assets;
openfl_utils_Assets.__name__ = "openfl.utils.Assets";
openfl_utils_Assets.addEventListener = function(type,listener,useCapture,priority,useWeakReference) {
	if(useWeakReference == null) {
		useWeakReference = false;
	}
	if(priority == null) {
		priority = 0;
	}
	if(useCapture == null) {
		useCapture = false;
	}
	if(!lime_utils_Assets.onChange.has(openfl_utils_Assets.LimeAssets_onChange)) {
		lime_utils_Assets.onChange.add(openfl_utils_Assets.LimeAssets_onChange);
	}
	openfl_utils_Assets.dispatcher.addEventListener(type,listener,useCapture,priority,useWeakReference);
};
openfl_utils_Assets.dispatchEvent = function(event) {
	return openfl_utils_Assets.dispatcher.dispatchEvent(event);
};
openfl_utils_Assets.exists = function(id,type) {
	return lime_utils_Assets.exists(id,type);
};
openfl_utils_Assets.getBitmapData = function(id,useCache) {
	if(useCache == null) {
		useCache = true;
	}
	if(useCache && openfl_utils_Assets.cache.get_enabled() && openfl_utils_Assets.cache.hasBitmapData(id)) {
		var bitmapData = openfl_utils_Assets.cache.getBitmapData(id);
		if(openfl_utils_Assets.isValidBitmapData(bitmapData)) {
			return bitmapData;
		}
	}
	var image = lime_utils_Assets.getImage(id,false);
	if(image != null) {
		var bitmapData = openfl_display_BitmapData.fromImage(image);
		if(useCache && openfl_utils_Assets.cache.get_enabled()) {
			openfl_utils_Assets.cache.setBitmapData(id,bitmapData);
		}
		return bitmapData;
	}
	return null;
};
openfl_utils_Assets.getBytes = function(id) {
	return openfl_utils_ByteArray.fromBytes(lime_utils_Assets.getBytes(id));
};
openfl_utils_Assets.getFont = function(id,useCache) {
	if(useCache == null) {
		useCache = true;
	}
	if(useCache && openfl_utils_Assets.cache.get_enabled() && openfl_utils_Assets.cache.hasFont(id)) {
		return openfl_utils_Assets.cache.getFont(id);
	}
	var limeFont = lime_utils_Assets.getFont(id,false);
	if(limeFont != null) {
		var font = new openfl_text_Font();
		font.__fromLimeFont(limeFont);
		if(useCache && openfl_utils_Assets.cache.get_enabled()) {
			openfl_utils_Assets.cache.setFont(id,font);
		}
		return font;
	}
	return new openfl_text_Font();
};
openfl_utils_Assets.getLibrary = function(name) {
	return lime_utils_Assets.getLibrary(name);
};
openfl_utils_Assets.getMovieClip = function(id) {
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName = HxOverrides.substr(id,id.indexOf(":") + 1,null);
	var limeLibrary = openfl_utils_Assets.getLibrary(libraryName);
	if(limeLibrary != null) {
		if(((limeLibrary) instanceof openfl_utils_AssetLibrary)) {
			var library = limeLibrary;
			if(library.exists(symbolName,"MOVIE_CLIP")) {
				if(library.isLocal(symbolName,"MOVIE_CLIP")) {
					return library.getMovieClip(symbolName);
				} else {
					lime_utils_Log.error("MovieClip asset \"" + id + "\" exists, but only asynchronously",{ fileName : "openfl/utils/Assets.hx", lineNumber : 207, className : "openfl.utils.Assets", methodName : "getMovieClip"});
					return null;
				}
			}
		}
		lime_utils_Log.error("There is no MovieClip asset with an ID of \"" + id + "\"",{ fileName : "openfl/utils/Assets.hx", lineNumber : 213, className : "openfl.utils.Assets", methodName : "getMovieClip"});
	} else {
		lime_utils_Log.error("There is no asset library named \"" + libraryName + "\"",{ fileName : "openfl/utils/Assets.hx", lineNumber : 217, className : "openfl.utils.Assets", methodName : "getMovieClip"});
	}
	return null;
};
openfl_utils_Assets.getMusic = function(id,useCache) {
	if(useCache == null) {
		useCache = true;
	}
	return openfl_utils_Assets.getSound(id,useCache);
};
openfl_utils_Assets.getPath = function(id) {
	return lime_utils_Assets.getPath(id);
};
openfl_utils_Assets.getSound = function(id,useCache) {
	if(useCache == null) {
		useCache = true;
	}
	if(useCache && openfl_utils_Assets.cache.get_enabled() && openfl_utils_Assets.cache.hasSound(id)) {
		var sound = openfl_utils_Assets.cache.getSound(id);
		if(openfl_utils_Assets.isValidSound(sound)) {
			return sound;
		}
	}
	var buffer = lime_utils_Assets.getAudioBuffer(id,false);
	if(buffer != null) {
		var sound = openfl_media_Sound.fromAudioBuffer(buffer);
		if(useCache && openfl_utils_Assets.cache.get_enabled()) {
			openfl_utils_Assets.cache.setSound(id,sound);
		}
		return sound;
	}
	return null;
};
openfl_utils_Assets.getText = function(id) {
	return lime_utils_Assets.getText(id);
};
openfl_utils_Assets.hasEventListener = function(type) {
	return openfl_utils_Assets.dispatcher.hasEventListener(type);
};
openfl_utils_Assets.hasLibrary = function(name) {
	return lime_utils_Assets.hasLibrary(name);
};
openfl_utils_Assets.isLocal = function(id,type,useCache) {
	if(useCache == null) {
		useCache = true;
	}
	if(useCache && openfl_utils_Assets.cache.get_enabled()) {
		if(type == "IMAGE" || type == null) {
			if(openfl_utils_Assets.cache.hasBitmapData(id)) {
				return true;
			}
		}
		if(type == "FONT" || type == null) {
			if(openfl_utils_Assets.cache.hasFont(id)) {
				return true;
			}
		}
		if(type == "SOUND" || type == "MUSIC" || type == null) {
			if(openfl_utils_Assets.cache.hasSound(id)) {
				return true;
			}
		}
	}
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName = HxOverrides.substr(id,id.indexOf(":") + 1,null);
	var library = openfl_utils_Assets.getLibrary(libraryName);
	if(library != null) {
		return library.isLocal(symbolName,type);
	}
	return false;
};
openfl_utils_Assets.isValidBitmapData = function(bitmapData) {
	return bitmapData != null && bitmapData.image != null;
};
openfl_utils_Assets.isValidSound = function(sound) {
	return true;
};
openfl_utils_Assets.list = function(type) {
	return lime_utils_Assets.list(type);
};
openfl_utils_Assets.loadBitmapData = function(id,useCache) {
	if(useCache == null) {
		useCache = true;
	}
	if(useCache == null) {
		useCache = true;
	}
	var promise = new lime_app_Promise();
	if(useCache && openfl_utils_Assets.cache.get_enabled() && openfl_utils_Assets.cache.hasBitmapData(id)) {
		var bitmapData = openfl_utils_Assets.cache.getBitmapData(id);
		if(openfl_utils_Assets.isValidBitmapData(bitmapData)) {
			promise.complete(bitmapData);
			return promise.future;
		}
	}
	lime_utils_Assets.loadImage(id,false).onComplete(function(image) {
		if(image != null) {
			var bitmapData = openfl_display_BitmapData.fromImage(image);
			if(useCache && openfl_utils_Assets.cache.get_enabled()) {
				openfl_utils_Assets.cache.setBitmapData(id,bitmapData);
			}
			promise.complete(bitmapData);
		} else {
			promise.error("[Assets] Could not load Image \"" + id + "\"");
		}
	}).onError($bind(promise,promise.error)).onProgress($bind(promise,promise.progress));
	return promise.future;
};
openfl_utils_Assets.loadBytes = function(id) {
	var promise = new lime_app_Promise();
	var future = lime_utils_Assets.loadBytes(id);
	future.onComplete(function(bytes) {
		promise.complete(openfl_utils_ByteArray.fromBytes(bytes));
	});
	future.onProgress(function(progress,total) {
		promise.progress(progress,total);
	});
	future.onError(function(msg) {
		promise.error(msg);
	});
	return promise.future;
};
openfl_utils_Assets.loadFont = function(id,useCache) {
	if(useCache == null) {
		useCache = true;
	}
	if(useCache == null) {
		useCache = true;
	}
	var promise = new lime_app_Promise();
	if(useCache && openfl_utils_Assets.cache.get_enabled() && openfl_utils_Assets.cache.hasFont(id)) {
		promise.complete(openfl_utils_Assets.cache.getFont(id));
		return promise.future;
	}
	lime_utils_Assets.loadFont(id).onComplete(function(limeFont) {
		var font = new openfl_text_Font();
		font.__fromLimeFont(limeFont);
		if(useCache && openfl_utils_Assets.cache.get_enabled()) {
			openfl_utils_Assets.cache.setFont(id,font);
		}
		promise.complete(font);
	}).onError($bind(promise,promise.error)).onProgress($bind(promise,promise.progress));
	return promise.future;
};
openfl_utils_Assets.loadLibrary = function(name) {
	return lime_utils_Assets.loadLibrary(name).then(function(library) {
		var _library = null;
		if(library != null) {
			if(((library) instanceof openfl_utils_AssetLibrary)) {
				_library = library;
			} else {
				_library = new openfl_utils_AssetLibrary();
				_library.__proxy = library;
				lime_utils_Assets.registerLibrary(name,_library);
			}
		}
		return lime_app_Future.withValue(_library);
	});
};
openfl_utils_Assets.loadMusic = function(id,useCache) {
	if(useCache == null) {
		useCache = true;
	}
	if(useCache == null) {
		useCache = true;
	}
	var future = new lime_app_Future(function() {
		return openfl_utils_Assets.getMusic(id,useCache);
	});
	return future;
};
openfl_utils_Assets.loadMovieClip = function(id) {
	var promise = new lime_app_Promise();
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName = HxOverrides.substr(id,id.indexOf(":") + 1,null);
	var limeLibrary = openfl_utils_Assets.getLibrary(libraryName);
	if(limeLibrary != null) {
		if(((limeLibrary) instanceof openfl_utils_AssetLibrary)) {
			var library = limeLibrary;
			if(library.exists(symbolName,"MOVIE_CLIP")) {
				promise.completeWith(library.loadMovieClip(symbolName));
				return promise.future;
			}
		}
		promise.error("[Assets] There is no MovieClip asset with an ID of \"" + id + "\"");
	} else {
		promise.error("[Assets] There is no asset library named \"" + libraryName + "\"");
	}
	return promise.future;
};
openfl_utils_Assets.loadSound = function(id,useCache) {
	if(useCache == null) {
		useCache = true;
	}
	if(useCache == null) {
		useCache = true;
	}
	var promise = new lime_app_Promise();
	lime_utils_Assets.loadAudioBuffer(id,useCache).onComplete(function(buffer) {
		if(buffer != null) {
			var sound = openfl_media_Sound.fromAudioBuffer(buffer);
			if(useCache && openfl_utils_Assets.cache.get_enabled()) {
				openfl_utils_Assets.cache.setSound(id,sound);
			}
			promise.complete(sound);
		} else {
			promise.error("[Assets] Could not load Sound \"" + id + "\"");
		}
	}).onError($bind(promise,promise.error)).onProgress($bind(promise,promise.progress));
	return promise.future;
};
openfl_utils_Assets.loadText = function(id) {
	var future = lime_utils_Assets.loadText(id);
	return future;
};
openfl_utils_Assets.registerLibrary = function(name,library) {
	lime_utils_Assets.registerLibrary(name,library);
};
openfl_utils_Assets.removeEventListener = function(type,listener,capture) {
	if(capture == null) {
		capture = false;
	}
	openfl_utils_Assets.dispatcher.removeEventListener(type,listener,capture);
};
openfl_utils_Assets.resolveClass = function(name) {
	return $hxClasses[name];
};
openfl_utils_Assets.resolveEnum = function(name) {
	var value = $hxEnums[name];
	return value;
};
openfl_utils_Assets.unloadLibrary = function(name) {
	lime_utils_Assets.unloadLibrary(name);
};
openfl_utils_Assets.LimeAssets_onChange = function() {
	openfl_utils_Assets.dispatchEvent(new openfl_events_Event("change"));
};
var openfl_utils_ByteArray = {};
openfl_utils_ByteArray.__properties__ = {set_position:"set_position",get_position:"get_position",set_length:"set_length",get_length:"get_length",get_bytesAvailable:"get_bytesAvailable",set_defaultObjectEncoding:"set_defaultObjectEncoding",get_defaultObjectEncoding:"get_defaultObjectEncoding",set_defaultEndian:"set_defaultEndian",get_defaultEndian:"get_defaultEndian"};
openfl_utils_ByteArray._new = function(length) {
	if(length == null) {
		length = 0;
	}
	var this1 = new openfl_utils_ByteArrayData(length);
	return this1;
};
openfl_utils_ByteArray.clear = function(this1) {
	this1.clear();
};
openfl_utils_ByteArray.compress = function(this1,algorithm) {
	this1.compress(algorithm);
};
openfl_utils_ByteArray.deflate = function(this1) {
	this1.deflate();
};
openfl_utils_ByteArray.fromArrayBuffer = function(buffer) {
	if(buffer == null) {
		return null;
	}
	return openfl_utils_ByteArrayData.fromBytes(haxe_io_Bytes.ofData(buffer));
};
openfl_utils_ByteArray.fromBytes = function(bytes) {
	if(bytes == null) {
		return null;
	}
	if(((bytes) instanceof openfl_utils_ByteArrayData)) {
		return bytes;
	} else {
		return openfl_utils_ByteArrayData.fromBytes(bytes);
	}
};
openfl_utils_ByteArray.fromBytesData = function(bytesData) {
	if(bytesData == null) {
		return null;
	}
	return openfl_utils_ByteArrayData.fromBytes(haxe_io_Bytes.ofData(bytesData));
};
openfl_utils_ByteArray.fromFile = function(path) {
	return openfl_utils_ByteArray.fromBytes(lime_utils_Bytes.fromFile(path));
};
openfl_utils_ByteArray.fromLimeBytes = function(bytes) {
	return openfl_utils_ByteArray.fromBytes(bytes);
};
openfl_utils_ByteArray.get = function(this1,index) {
	return this1.b[index];
};
openfl_utils_ByteArray.inflate = function(this1) {
	this1.inflate();
};
openfl_utils_ByteArray.loadFromBytes = function(bytes) {
	return lime_utils_Bytes.loadFromBytes(bytes).then(function(limeBytes) {
		var byteArray = openfl_utils_ByteArray.fromBytes(limeBytes);
		return lime_app_Future.withValue(byteArray);
	});
};
openfl_utils_ByteArray.loadFromFile = function(path) {
	return lime_utils_Bytes.loadFromFile(path).then(function(limeBytes) {
		var byteArray = openfl_utils_ByteArray.fromBytes(limeBytes);
		return lime_app_Future.withValue(byteArray);
	});
};
openfl_utils_ByteArray.readBoolean = function(this1) {
	return this1.readBoolean();
};
openfl_utils_ByteArray.readByte = function(this1) {
	return this1.readByte();
};
openfl_utils_ByteArray.readBytes = function(this1,bytes,offset,length) {
	if(length == null) {
		length = 0;
	}
	if(offset == null) {
		offset = 0;
	}
	this1.readBytes(bytes,offset,length);
};
openfl_utils_ByteArray.readDouble = function(this1) {
	return this1.readDouble();
};
openfl_utils_ByteArray.readFloat = function(this1) {
	return this1.readFloat();
};
openfl_utils_ByteArray.readInt = function(this1) {
	return this1.readInt();
};
openfl_utils_ByteArray.readMultiByte = function(this1,length,charSet) {
	return this1.readMultiByte(length,charSet);
};
openfl_utils_ByteArray.readObject = function(this1) {
	return this1.readObject();
};
openfl_utils_ByteArray.readShort = function(this1) {
	return this1.readShort();
};
openfl_utils_ByteArray.readUTF = function(this1) {
	return this1.readUTF();
};
openfl_utils_ByteArray.readUTFBytes = function(this1,length) {
	return this1.readUTFBytes(length);
};
openfl_utils_ByteArray.readUnsignedByte = function(this1) {
	return this1.readUnsignedByte();
};
openfl_utils_ByteArray.readUnsignedInt = function(this1) {
	return this1.readUnsignedInt();
};
openfl_utils_ByteArray.readUnsignedShort = function(this1) {
	return this1.readUnsignedShort();
};
openfl_utils_ByteArray.set = function(this1,index,value) {
	this1.__resize(index + 1);
	this1.b[index] = value & 255;
	return value;
};
openfl_utils_ByteArray.toArrayBuffer = function(byteArray) {
	return byteArray.b.bufferValue;
};
openfl_utils_ByteArray.toBytePointer = function(byteArray) {
	lime_utils_BytePointer.set(openfl_utils_ByteArray.__bytePointer,byteArray,null,null,byteArray.position);
	return openfl_utils_ByteArray.__bytePointer;
};
openfl_utils_ByteArray.toBytes = function(byteArray) {
	return byteArray;
};
openfl_utils_ByteArray.toBytesData = function(byteArray) {
	return byteArray.b.bufferValue;
};
openfl_utils_ByteArray.toLimeBytes = function(byteArray) {
	return openfl_utils_ByteArray.toBytes(openfl_utils_ByteArray.fromBytes(openfl_utils_ByteArray.toBytes(byteArray)));
};
openfl_utils_ByteArray.toString = function(this1) {
	return this1.toString();
};
openfl_utils_ByteArray.uncompress = function(this1,algorithm) {
	this1.uncompress(algorithm);
};
openfl_utils_ByteArray.writeBoolean = function(this1,value) {
	this1.writeBoolean(value);
};
openfl_utils_ByteArray.writeByte = function(this1,value) {
	this1.writeByte(value);
};
openfl_utils_ByteArray.writeBytes = function(this1,bytes,offset,length) {
	if(length == null) {
		length = 0;
	}
	if(offset == null) {
		offset = 0;
	}
	this1.writeBytes(bytes,offset,length);
};
openfl_utils_ByteArray.writeDouble = function(this1,value) {
	this1.writeDouble(value);
};
openfl_utils_ByteArray.writeFloat = function(this1,value) {
	this1.writeFloat(value);
};
openfl_utils_ByteArray.writeInt = function(this1,value) {
	this1.writeInt(value);
};
openfl_utils_ByteArray.writeMultiByte = function(this1,value,charSet) {
	this1.writeMultiByte(value,charSet);
};
openfl_utils_ByteArray.writeObject = function(this1,object) {
	this1.writeObject(object);
};
openfl_utils_ByteArray.writeShort = function(this1,value) {
	this1.writeShort(value);
};
openfl_utils_ByteArray.writeUTF = function(this1,value) {
	this1.writeUTF(value);
};
openfl_utils_ByteArray.writeUTFBytes = function(this1,value) {
	this1.writeUTFBytes(value);
};
openfl_utils_ByteArray.writeUnsignedInt = function(this1,value) {
	this1.writeUnsignedInt(value);
};
openfl_utils_ByteArray.get_bytesAvailable = function(this1) {
	return this1.length - this1.position;
};
openfl_utils_ByteArray.get_defaultEndian = function() {
	if(openfl_utils_ByteArrayData.__defaultEndian == null) {
		if(lime_system_System.get_endianness() == lime_system_Endian.LITTLE_ENDIAN) {
			openfl_utils_ByteArrayData.__defaultEndian = 1;
		} else {
			openfl_utils_ByteArrayData.__defaultEndian = 0;
		}
	}
	return openfl_utils_ByteArrayData.__defaultEndian;
};
openfl_utils_ByteArray.set_defaultEndian = function(value) {
	return openfl_utils_ByteArrayData.__defaultEndian = value;
};
openfl_utils_ByteArray.get_defaultObjectEncoding = function() {
	return openfl_utils_ByteArrayData.defaultObjectEncoding;
};
openfl_utils_ByteArray.set_defaultObjectEncoding = function(value) {
	return openfl_utils_ByteArrayData.defaultObjectEncoding = value;
};
openfl_utils_ByteArray.get_endian = function(this1) {
	return this1.__endian;
};
openfl_utils_ByteArray.set_endian = function(this1,value) {
	return this1.__endian = value;
};
openfl_utils_ByteArray.get_length = function(this1) {
	if(this1 == null) {
		return 0;
	} else {
		return this1.length;
	}
};
openfl_utils_ByteArray.set_length = function(this1,value) {
	if(value > 0) {
		this1.__resize(value);
		if(value < this1.position) {
			this1.position = value;
		}
	}
	this1.length = value;
	return value;
};
openfl_utils_ByteArray.get_objectEncoding = function(this1) {
	return this1.objectEncoding;
};
openfl_utils_ByteArray.set_objectEncoding = function(this1,value) {
	return this1.objectEncoding = value;
};
openfl_utils_ByteArray.get_position = function(this1) {
	return this1.position;
};
openfl_utils_ByteArray.set_position = function(this1,value) {
	return this1.position = value;
};
var openfl_utils_IDataOutput = function() { };
$hxClasses["openfl.utils.IDataOutput"] = openfl_utils_IDataOutput;
openfl_utils_IDataOutput.__name__ = "openfl.utils.IDataOutput";
openfl_utils_IDataOutput.__isInterface__ = true;
openfl_utils_IDataOutput.prototype = {
	get_endian: null
	,set_endian: null
	,objectEncoding: null
	,writeBoolean: null
	,writeByte: null
	,writeBytes: null
	,writeDouble: null
	,writeFloat: null
	,writeInt: null
	,writeMultiByte: null
	,writeObject: null
	,writeShort: null
	,writeUnsignedInt: null
	,writeUTF: null
	,writeUTFBytes: null
	,__class__: openfl_utils_IDataOutput
	,__properties__: {set_endian:"set_endian",get_endian:"get_endian"}
};
var openfl_utils_IDataInput = function() { };
$hxClasses["openfl.utils.IDataInput"] = openfl_utils_IDataInput;
openfl_utils_IDataInput.__name__ = "openfl.utils.IDataInput";
openfl_utils_IDataInput.__isInterface__ = true;
openfl_utils_IDataInput.prototype = {
	get_bytesAvailable: null
	,get_endian: null
	,set_endian: null
	,objectEncoding: null
	,readBoolean: null
	,readByte: null
	,readBytes: null
	,readDouble: null
	,readFloat: null
	,readInt: null
	,readMultiByte: null
	,readObject: null
	,readShort: null
	,readUnsignedByte: null
	,readUnsignedInt: null
	,readUnsignedShort: null
	,readUTF: null
	,readUTFBytes: null
	,__class__: openfl_utils_IDataInput
	,__properties__: {set_endian:"set_endian",get_endian:"get_endian",get_bytesAvailable:"get_bytesAvailable"}
};
var openfl_utils_ByteArrayData = function(length) {
	if(length == null) {
		length = 0;
	}
	var bytes = new haxe_io_Bytes(new ArrayBuffer(length));
	haxe_io_Bytes.call(this,bytes.b.buffer);
	this.__length = length;
	if(openfl_utils_ByteArrayData.__defaultEndian == null) {
		if(lime_system_System.get_endianness() == lime_system_Endian.LITTLE_ENDIAN) {
			openfl_utils_ByteArrayData.__defaultEndian = 1;
		} else {
			openfl_utils_ByteArrayData.__defaultEndian = 0;
		}
	}
	this.__endian = openfl_utils_ByteArrayData.__defaultEndian;
	this.objectEncoding = openfl_utils_ByteArrayData.defaultObjectEncoding;
	this.position = 0;
};
$hxClasses["openfl.utils.ByteArrayData"] = openfl_utils_ByteArrayData;
openfl_utils_ByteArrayData.__name__ = "openfl.utils.ByteArrayData";
openfl_utils_ByteArrayData.__interfaces__ = [openfl_utils_IDataOutput,openfl_utils_IDataInput];
openfl_utils_ByteArrayData.__properties__ = {set_defaultEndian:"set_defaultEndian",get_defaultEndian:"get_defaultEndian"};
openfl_utils_ByteArrayData.fromBytes = function(bytes) {
	var result = new openfl_utils_ByteArrayData();
	result.__fromBytes(bytes);
	return result;
};
openfl_utils_ByteArrayData.get_defaultEndian = function() {
	if(openfl_utils_ByteArrayData.__defaultEndian == null) {
		if(lime_system_System.get_endianness() == lime_system_Endian.LITTLE_ENDIAN) {
			openfl_utils_ByteArrayData.__defaultEndian = 1;
		} else {
			openfl_utils_ByteArrayData.__defaultEndian = 0;
		}
	}
	return openfl_utils_ByteArrayData.__defaultEndian;
};
openfl_utils_ByteArrayData.set_defaultEndian = function(value) {
	return openfl_utils_ByteArrayData.__defaultEndian = value;
};
openfl_utils_ByteArrayData.__super__ = haxe_io_Bytes;
openfl_utils_ByteArrayData.prototype = $extend(haxe_io_Bytes.prototype,{
	objectEncoding: null
	,position: null
	,__endian: null
	,__length: null
	,clear: function() {
		this.length = 0;
		this.position = 0;
	}
	,compress: function(algorithm) {
		if(algorithm == null) {
			algorithm = 2;
		}
		if(this.__length > this.length) {
			var cacheLength = this.length;
			this.length = this.__length;
			var data = new haxe_io_Bytes(new ArrayBuffer(cacheLength));
			data.blit(0,this,0,cacheLength);
			this.b = data.b;
			this.__length = data.length;
			this.data = data.data;
			this.length = cacheLength;
		}
		var limeBytes = this;
		var bytes;
		switch(algorithm) {
		case 0:
			bytes = lime_utils_Bytes.compress(limeBytes,lime_utils_CompressionAlgorithm.DEFLATE);
			break;
		case 1:
			bytes = lime_utils_Bytes.compress(limeBytes,lime_utils_CompressionAlgorithm.LZMA);
			break;
		default:
			bytes = lime_utils_Bytes.compress(limeBytes,lime_utils_CompressionAlgorithm.ZLIB);
		}
		if(bytes != null) {
			this.b = bytes.b;
			this.__length = bytes.length;
			this.data = bytes.data;
			this.length = this.__length;
			this.position = this.length;
		}
	}
	,deflate: function() {
		this.compress(0);
	}
	,inflate: function() {
		this.uncompress(0);
	}
	,readBoolean: function() {
		if(this.position < this.length) {
			return this.b[this.position++] != 0;
		} else {
			throw haxe_Exception.thrown(new openfl_errors_EOFError());
		}
	}
	,readByte: function() {
		var value = this.readUnsignedByte();
		if((value & 128) != 0) {
			return value - 256;
		} else {
			return value;
		}
	}
	,readBytes: function(bytes,offset,length) {
		if(length == null) {
			length = 0;
		}
		if(offset == null) {
			offset = 0;
		}
		if(length == 0) {
			length = this.length - this.position;
		}
		if(this.position + length > this.length) {
			throw haxe_Exception.thrown(new openfl_errors_EOFError());
		}
		if(bytes.length < offset + length) {
			bytes.__resize(offset + length);
		}
		bytes.blit(offset,this,this.position,length);
		this.position += length;
	}
	,readDouble: function() {
		if(this.__endian == 1) {
			if(this.position + 8 > this.length) {
				throw haxe_Exception.thrown(new openfl_errors_EOFError());
			}
			this.position += 8;
			return this.getDouble(this.position - 8);
		} else {
			var ch1 = this.readInt();
			var ch2 = this.readInt();
			return haxe_io_FPHelper.i64ToDouble(ch2,ch1);
		}
	}
	,readFloat: function() {
		if(this.__endian == 1) {
			if(this.position + 4 > this.length) {
				throw haxe_Exception.thrown(new openfl_errors_EOFError());
			}
			this.position += 4;
			return this.getFloat(this.position - 4);
		} else {
			return haxe_io_FPHelper.i32ToFloat(this.readInt());
		}
	}
	,readInt: function() {
		var ch1 = this.readUnsignedByte();
		var ch2 = this.readUnsignedByte();
		var ch3 = this.readUnsignedByte();
		var ch4 = this.readUnsignedByte();
		if(this.__endian == 1) {
			return ch4 << 24 | ch3 << 16 | ch2 << 8 | ch1;
		} else {
			return ch1 << 24 | ch2 << 16 | ch3 << 8 | ch4;
		}
	}
	,readMultiByte: function(length,charSet) {
		return this.readUTFBytes(length);
	}
	,readObject: function() {
		switch(this.objectEncoding) {
		case 10:
			var data = this.readUTF();
			return haxe_Unserializer.run(data);
		case 12:
			var data = this.readUTF();
			return JSON.parse(data);
		default:
			return null;
		}
	}
	,readShort: function() {
		var ch1 = this.readUnsignedByte();
		var ch2 = this.readUnsignedByte();
		var value;
		if(this.__endian == 1) {
			value = ch2 << 8 | ch1;
		} else {
			value = ch1 << 8 | ch2;
		}
		if((value & 32768) != 0) {
			return value - 65536;
		} else {
			return value;
		}
	}
	,readUnsignedByte: function() {
		if(this.position < this.length) {
			return this.b[this.position++];
		} else {
			throw haxe_Exception.thrown(new openfl_errors_EOFError());
		}
	}
	,readUnsignedInt: function() {
		var ch1 = this.readUnsignedByte();
		var ch2 = this.readUnsignedByte();
		var ch3 = this.readUnsignedByte();
		var ch4 = this.readUnsignedByte();
		if(this.__endian == 1) {
			return ch4 << 24 | ch3 << 16 | ch2 << 8 | ch1;
		} else {
			return ch1 << 24 | ch2 << 16 | ch3 << 8 | ch4;
		}
	}
	,readUnsignedShort: function() {
		var ch1 = this.readUnsignedByte();
		var ch2 = this.readUnsignedByte();
		if(this.__endian == 1) {
			return (ch2 << 8) + ch1;
		} else {
			return ch1 << 8 | ch2;
		}
	}
	,readUTF: function() {
		var bytesCount = this.readUnsignedShort();
		return this.readUTFBytes(bytesCount);
	}
	,readUTFBytes: function(length) {
		if(this.position + length > this.length) {
			throw haxe_Exception.thrown(new openfl_errors_EOFError());
		}
		this.position += length;
		return this.getString(this.position - length,length);
	}
	,uncompress: function(algorithm) {
		if(algorithm == null) {
			algorithm = 2;
		}
		if(this.__length > this.length) {
			var cacheLength = this.length;
			this.length = this.__length;
			var data = new haxe_io_Bytes(new ArrayBuffer(cacheLength));
			data.blit(0,this,0,cacheLength);
			this.b = data.b;
			this.__length = data.length;
			this.data = data.data;
			this.length = cacheLength;
		}
		var limeBytes = this;
		var bytes;
		switch(algorithm) {
		case 0:
			bytes = lime_utils_Bytes.decompress(limeBytes,lime_utils_CompressionAlgorithm.DEFLATE);
			break;
		case 1:
			bytes = lime_utils_Bytes.decompress(limeBytes,lime_utils_CompressionAlgorithm.LZMA);
			break;
		default:
			bytes = lime_utils_Bytes.decompress(limeBytes,lime_utils_CompressionAlgorithm.ZLIB);
		}
		if(bytes != null) {
			this.b = bytes.b;
			this.__length = bytes.length;
			this.data = bytes.data;
			this.length = this.__length;
		}
		this.position = 0;
	}
	,writeBoolean: function(value) {
		this.writeByte(value ? 1 : 0);
	}
	,writeByte: function(value) {
		this.__resize(this.position + 1);
		this.b[this.position++] = value & 255 & 255;
	}
	,writeBytes: function(bytes,offset,length) {
		if(length == null) {
			length = 0;
		}
		if(offset == null) {
			offset = 0;
		}
		if(openfl_utils_ByteArray.get_length(bytes) == 0) {
			return;
		}
		if(length == 0) {
			length = openfl_utils_ByteArray.get_length(bytes) - offset;
		}
		this.__resize(this.position + length);
		this.blit(this.position,bytes,offset,length);
		this.position = this.position + length;
	}
	,writeDouble: function(value) {
		var int64 = haxe_io_FPHelper.doubleToI64(value);
		if(this.__endian == 1) {
			this.writeInt(int64.low);
			this.writeInt(int64.high);
		} else {
			this.writeInt(int64.high);
			this.writeInt(int64.low);
		}
	}
	,writeFloat: function(value) {
		if(this.__endian == 1) {
			this.__resize(this.position + 4);
			this.setFloat(this.position,value);
			this.position += 4;
		} else {
			var int = haxe_io_FPHelper.floatToI32(value);
			this.writeInt(int);
		}
	}
	,writeInt: function(value) {
		this.__resize(this.position + 4);
		if(this.__endian == 1) {
			this.b[this.position++] = value & 255 & 255;
			this.b[this.position++] = value >> 8 & 255 & 255;
			this.b[this.position++] = value >> 16 & 255 & 255;
			this.b[this.position++] = value >> 24 & 255 & 255;
		} else {
			this.b[this.position++] = value >> 24 & 255 & 255;
			this.b[this.position++] = value >> 16 & 255 & 255;
			this.b[this.position++] = value >> 8 & 255 & 255;
			this.b[this.position++] = value & 255 & 255;
		}
	}
	,writeMultiByte: function(value,charSet) {
		this.writeUTFBytes(value);
	}
	,writeObject: function(object) {
		switch(this.objectEncoding) {
		case 10:
			var value = haxe_Serializer.run(object);
			this.writeUTF(value);
			break;
		case 12:
			var value = JSON.stringify(object);
			this.writeUTF(value);
			break;
		default:
			return;
		}
	}
	,writeShort: function(value) {
		this.__resize(this.position + 2);
		if(this.__endian == 1) {
			this.b[this.position++] = value & 255;
			this.b[this.position++] = value >> 8 & 255;
		} else {
			this.b[this.position++] = value >> 8 & 255;
			this.b[this.position++] = value & 255;
		}
	}
	,writeUnsignedInt: function(value) {
		this.writeInt(value);
	}
	,writeUTF: function(value) {
		var bytes = haxe_io_Bytes.ofString(value);
		this.writeShort(bytes.length);
		this.writeBytes(openfl_utils_ByteArray.fromBytes(bytes));
	}
	,writeUTFBytes: function(value) {
		var bytes = haxe_io_Bytes.ofString(value);
		this.writeBytes(openfl_utils_ByteArray.fromBytes(bytes));
	}
	,__fromBytes: function(bytes) {
		this.b = bytes.b;
		this.__length = bytes.length;
		this.data = bytes.data;
		this.length = bytes.length;
	}
	,__resize: function(size) {
		if(size > this.__length) {
			var bytes = new haxe_io_Bytes(new ArrayBuffer((size + 1) * 3 >> 1));
			if(this.__length > 0) {
				var cacheLength = this.length;
				this.length = this.__length;
				bytes.blit(0,this,0,this.__length);
				this.length = cacheLength;
			}
			this.b = bytes.b;
			this.__length = bytes.length;
			this.data = bytes.data;
		}
		if(this.length < size) {
			this.length = size;
		}
	}
	,__setData: function(bytes) {
		this.b = bytes.b;
		this.__length = bytes.length;
		this.data = bytes.data;
	}
	,get_bytesAvailable: function() {
		return this.length - this.position;
	}
	,get_endian: function() {
		return this.__endian;
	}
	,set_endian: function(value) {
		return this.__endian = value;
	}
	,__class__: openfl_utils_ByteArrayData
	,__properties__: {set_endian:"set_endian",get_endian:"get_endian",get_bytesAvailable:"get_bytesAvailable"}
});
var openfl_utils_CompressionAlgorithm = {};
openfl_utils_CompressionAlgorithm.fromString = function(value) {
	switch(value) {
	case "deflate":
		return 0;
	case "lzma":
		return 1;
	case "zlib":
		return 2;
	default:
		return null;
	}
};
openfl_utils_CompressionAlgorithm.toString = function(this1) {
	switch(this1) {
	case 0:
		return "deflate";
	case 1:
		return "lzma";
	case 2:
		return "zlib";
	default:
		return null;
	}
};
var openfl_utils_Dictionary = {};
openfl_utils_Dictionary.exists = function(this1,key) {
	return this1.exists(key);
};
openfl_utils_Dictionary.get = function(this1,key) {
	return this1.get(key);
};
openfl_utils_Dictionary.keyValueIterator = function(this1) {
	return this1.keyValueIterator();
};
openfl_utils_Dictionary.remove = function(this1,key) {
	return this1.remove(key);
};
openfl_utils_Dictionary.set = function(this1,key,value) {
	this1.set(key,value);
	return value;
};
openfl_utils_Dictionary.iterator = function(this1) {
	return this1.keys();
};
openfl_utils_Dictionary.each = function(this1) {
	return this1.iterator();
};
openfl_utils_Dictionary.toStringMap = function(t,weakKeys) {
	return new haxe_ds_StringMap();
};
openfl_utils_Dictionary.toIntMap = function(t,weakKeys) {
	return new haxe_ds_IntMap();
};
openfl_utils_Dictionary.toFloatMap = function(t,weakKeys) {
	return new openfl_utils__$Dictionary_FloatMap();
};
openfl_utils_Dictionary.toEnumValueMapMap = function(t,weakKeys) {
	return new haxe_ds_EnumValueMap();
};
openfl_utils_Dictionary.toObjectMap = function(t,weakKeys) {
	return new haxe_ds_ObjectMap();
};
openfl_utils_Dictionary.toUtilsObjectMap = function(t,weakKeys) {
	return new openfl_utils__$Dictionary_UtilsObjectMap();
};
openfl_utils_Dictionary.toClassMap = function(t,weakKeys) {
	return new openfl_utils__$Dictionary_ClassMap();
};
openfl_utils_Dictionary.fromStringMap = function(map) {
	return map;
};
openfl_utils_Dictionary.fromIntMap = function(map) {
	return map;
};
openfl_utils_Dictionary.fromFloatMap = function(map) {
	return map;
};
openfl_utils_Dictionary.fromObjectMap = function(map) {
	return map;
};
openfl_utils_Dictionary.fromUtilsObjectMap = function(map) {
	return map;
};
openfl_utils_Dictionary.fromClassMap = function(map) {
	return map;
};
var openfl_utils__$Dictionary_ClassMap = function() {
	this.types = new haxe_ds_StringMap();
	this.values = new haxe_ds_StringMap();
};
$hxClasses["openfl.utils._Dictionary.ClassMap"] = openfl_utils__$Dictionary_ClassMap;
openfl_utils__$Dictionary_ClassMap.__name__ = "openfl.utils._Dictionary.ClassMap";
openfl_utils__$Dictionary_ClassMap.__interfaces__ = [haxe_IMap];
openfl_utils__$Dictionary_ClassMap.prototype = {
	types: null
	,values: null
	,clear: function() {
		this.types.h = Object.create(null);
		this.values.h = Object.create(null);
	}
	,copy: function() {
		var copied = new openfl_utils__$Dictionary_ClassMap();
		var key = this.keys();
		while(key.hasNext()) {
			var key1 = key.next();
			copied.set(key1,this.get(key1));
		}
		return copied;
	}
	,exists: function(key) {
		var this1 = this.types;
		var key1 = key.__name__;
		return Object.prototype.hasOwnProperty.call(this1.h,key1);
	}
	,get: function(key) {
		var this1 = this.values;
		var key1 = key.__name__;
		return this1.h[key1];
	}
	,keyValueIterator: function() {
		return new haxe_iterators_MapKeyValueIterator(this);
	}
	,keys: function() {
		return haxe_ds_StringMap.valueIterator(this.types.h);
	}
	,iterator: function() {
		return haxe_ds_StringMap.valueIterator(this.values.h);
	}
	,remove: function(key) {
		var name = key.__name__;
		var _this = this.types;
		var tmp;
		if(Object.prototype.hasOwnProperty.call(_this.h,name)) {
			delete(_this.h[name]);
			tmp = true;
		} else {
			tmp = false;
		}
		if(!tmp) {
			var _this = this.values;
			if(Object.prototype.hasOwnProperty.call(_this.h,name)) {
				delete(_this.h[name]);
				return true;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,set: function(key,value) {
		var name = key.__name__;
		this.types.h[name] = key;
		this.values.h[name] = value;
	}
	,toString: function() {
		return haxe_ds_StringMap.stringify(this.values.h);
	}
	,__class__: openfl_utils__$Dictionary_ClassMap
};
var openfl_utils__$Dictionary_FloatMap = function() {
	this.floatKeys = [];
	this.values = [];
};
$hxClasses["openfl.utils._Dictionary.FloatMap"] = openfl_utils__$Dictionary_FloatMap;
openfl_utils__$Dictionary_FloatMap.__name__ = "openfl.utils._Dictionary.FloatMap";
openfl_utils__$Dictionary_FloatMap.__interfaces__ = [haxe_IMap];
openfl_utils__$Dictionary_FloatMap.prototype = {
	floatKeys: null
	,values: null
	,clear: function() {
		this.floatKeys = [];
		this.values = [];
	}
	,copy: function() {
		var copied = new openfl_utils__$Dictionary_FloatMap();
		var key = this.keys();
		while(key.hasNext()) {
			var key1 = key.next();
			copied.set(key1,this.get(key1));
		}
		return copied;
	}
	,exists: function(key) {
		return this.indexOf(key) > -1;
	}
	,get: function(key) {
		var ind = this.indexOf(key);
		if(ind > -1) {
			return this.values[ind];
		} else {
			return null;
		}
	}
	,keyValueIterator: function() {
		return new haxe_iterators_MapKeyValueIterator(this);
	}
	,keys: function() {
		return new haxe_iterators_ArrayIterator(this.floatKeys.slice());
	}
	,iterator: function() {
		return new haxe_iterators_ArrayIterator(this.values.slice());
	}
	,remove: function(key) {
		var ind = this.indexOf(key);
		if(ind > -1) {
			this.floatKeys.splice(ind,1);
			this.values.splice(ind,1);
			return true;
		}
		return false;
	}
	,set: function(key,value) {
		this.insertSorted(key,value);
	}
	,indexOf: function(key) {
		var len = this.floatKeys.length;
		var startIndex = 0;
		var endIndex = len - 1;
		if(len == 0) {
			return -1;
		}
		var midIndex = 0;
		while(startIndex < endIndex) {
			midIndex = Math.floor((startIndex + endIndex) / 2);
			if(this.floatKeys[midIndex] == key) {
				return midIndex;
			} else if(this.floatKeys[midIndex] > key) {
				endIndex = midIndex - 1;
			} else {
				startIndex = midIndex + 1;
			}
		}
		if(this.floatKeys[startIndex] == key) {
			return startIndex;
		} else {
			return -1;
		}
	}
	,insertSorted: function(key,value) {
		var len = this.floatKeys.length;
		var startIndex = 0;
		var endIndex = len - 1;
		if(len == 0) {
			this.floatKeys.push(key);
			this.values.push(value);
			return;
		}
		var midIndex = 0;
		while(startIndex < endIndex) {
			midIndex = Math.floor((startIndex + endIndex) / 2);
			if(this.floatKeys[midIndex] == key) {
				this.values[midIndex] = value;
				return;
			} else if(this.floatKeys[midIndex] > key) {
				endIndex = midIndex - 1;
			} else {
				startIndex = midIndex + 1;
			}
		}
		if(this.floatKeys[startIndex] > key) {
			this.floatKeys.splice(startIndex,0,key);
			this.values.splice(startIndex,0,value);
		} else if(this.floatKeys[startIndex] < key) {
			this.floatKeys.splice(startIndex + 1,0,key);
			this.values.splice(startIndex + 1,0,value);
		} else {
			this.values[startIndex] = value;
		}
	}
	,toString: function() {
		return this.values.toString();
	}
	,__class__: openfl_utils__$Dictionary_FloatMap
};
var openfl_utils__$Dictionary_UtilsObjectMap = function() {
	this.map = new haxe_ds_ObjectMap();
};
$hxClasses["openfl.utils._Dictionary.UtilsObjectMap"] = openfl_utils__$Dictionary_UtilsObjectMap;
openfl_utils__$Dictionary_UtilsObjectMap.__name__ = "openfl.utils._Dictionary.UtilsObjectMap";
openfl_utils__$Dictionary_UtilsObjectMap.__interfaces__ = [haxe_IMap];
openfl_utils__$Dictionary_UtilsObjectMap.prototype = {
	map: null
	,clear: function() {
		this.map.h = { __keys__ : { }};
	}
	,copy: function() {
		var copied = new openfl_utils__$Dictionary_UtilsObjectMap();
		var key = this.keys();
		while(key.hasNext()) {
			var key1 = key.next();
			copied.set(key1,this.get(key1));
		}
		return copied;
	}
	,exists: function(key) {
		return this.map.h.__keys__[key.__id__] != null;
	}
	,get: function(key) {
		return this.map.h[key.__id__];
	}
	,keyValueIterator: function() {
		return new haxe_iterators_MapKeyValueIterator(this);
	}
	,keys: function() {
		return this.map.keys();
	}
	,iterator: function() {
		return this.map.iterator();
	}
	,remove: function(key) {
		return this.map.remove(key);
	}
	,set: function(key,value) {
		this.map.set(key,value);
	}
	,toString: function() {
		return this.map.toString();
	}
	,__class__: openfl_utils__$Dictionary_UtilsObjectMap
};
var openfl_utils_Endian = {};
openfl_utils_Endian.fromLimeEndian = function(value) {
	switch(value._hx_index) {
	case 0:
		return 1;
	case 1:
		return 0;
	}
};
openfl_utils_Endian.fromString = function(value) {
	switch(value) {
	case "bigEndian":
		return 0;
	case "littleEndian":
		return 1;
	default:
		return null;
	}
};
openfl_utils_Endian.toLimeEndian = function(this1) {
	switch(this1) {
	case 0:
		return lime_system_Endian.BIG_ENDIAN;
	case 1:
		return lime_system_Endian.LITTLE_ENDIAN;
	default:
		return null;
	}
};
openfl_utils_Endian.toString = function(this1) {
	switch(this1) {
	case 0:
		return "bigEndian";
	case 1:
		return "littleEndian";
	default:
		return null;
	}
};
var openfl_utils_Object = {};
openfl_utils_Object._new = function() {
	var this1 = { };
	return this1;
};
openfl_utils_Object.hasOwnProperty = function(this1,name) {
	if(this1 != null) {
		return Object.prototype.hasOwnProperty.call(this1,name);
	} else {
		return false;
	}
};
openfl_utils_Object.isPrototypeOf = function(this1,theClass) {
	var c = js_Boot.getClass(this1);
	while(c != null) {
		if(c == theClass) {
			return true;
		}
		c = c.__super__;
	}
	return false;
};
openfl_utils_Object.iterator = function(this1) {
	var fields = Reflect.fields(this1);
	if(fields == null) {
		fields = [];
	}
	return new haxe_iterators_ArrayIterator(fields);
};
openfl_utils_Object.propertyIsEnumerable = function(this1,name) {
	if(this1 != null && Object.prototype.hasOwnProperty.call(this1,name)) {
		return js_Boot.__implements(Reflect.field(this1,name),haxe_lang_Iterable);
	} else {
		return false;
	}
};
openfl_utils_Object.toLocaleString = function(this1) {
	return Std.string(this1);
};
openfl_utils_Object.toString = function(this1) {
	return Std.string(this1);
};
openfl_utils_Object.valueOf = function(this1) {
	return this1;
};
openfl_utils_Object.__get = function(this1,key) {
	return Reflect.field(this1,key);
};
openfl_utils_Object.__set = function(this1,key,value) {
	this1[key] = value;
	return value;
};
var haxe_lang_Iterator = function() { };
$hxClasses["haxe.lang.Iterator"] = haxe_lang_Iterator;
haxe_lang_Iterator.__name__ = "haxe.lang.Iterator";
haxe_lang_Iterator.__isInterface__ = true;
haxe_lang_Iterator.prototype = {
	hasNext: null
	,next: null
	,__class__: haxe_lang_Iterator
};
var haxe_lang_Iterable = function() { };
$hxClasses["haxe.lang.Iterable"] = haxe_lang_Iterable;
haxe_lang_Iterable.__name__ = "haxe.lang.Iterable";
haxe_lang_Iterable.__isInterface__ = true;
haxe_lang_Iterable.prototype = {
	iterator: null
	,__class__: haxe_lang_Iterable
};
var spine_Animation = function(name,timelines,duration) {
	this.duration = 0;
	this.hashCode = Math.random() * 99999999 | 0;
	if(name == null) {
		throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("name cannot be null."));
	}
	if(timelines == null) {
		throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("timelines cannot be null."));
	}
	this.name = name;
	this.timelines = timelines;
	this.duration = duration;
};
$hxClasses["spine.Animation"] = spine_Animation;
spine_Animation.__name__ = "spine.Animation";
spine_Animation.binarySearchWithStep = function(values,target,step) {
	var low = 0;
	var high = values.length / step - 2 | 0;
	if(high == 0) {
		return step;
	}
	var current = high >>> 1;
	while(true) {
		if(values[(current + 1) * step] <= target) {
			low = current + 1;
		} else {
			high = current;
		}
		if(low == high) {
			return (low + 1) * step;
		}
		current = low + high >>> 1;
	}
};
spine_Animation.binarySearch = function(values,target) {
	var low = 0;
	var high = values.length - 2;
	if(high == 0) {
		return 1;
	}
	var current = high >>> 1;
	while(true) {
		if(values[current + 1] <= target) {
			low = current + 1;
		} else {
			high = current;
		}
		if(low == high) {
			return low + 1;
		}
		current = low + high >>> 1;
	}
};
spine_Animation.linearSearch = function(values,target,step) {
	var i = 0;
	var last = values.length - step;
	while(i <= last) {
		if(values[i] > target) {
			return i;
		}
		i += step;
	}
	return -1;
};
spine_Animation.prototype = {
	hashCode: null
	,name: null
	,timelines: null
	,duration: null
	,getTimelines: function() {
		return this.timelines;
	}
	,getDuration: function() {
		return this.duration;
	}
	,setDuration: function(duration) {
		this.duration = duration;
	}
	,apply: function(skeleton,lastTime,time,loop,events,alpha,pose,direction) {
		if(skeleton == null) {
			throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("skeleton cannot be null."));
		}
		if(loop && this.duration != 0) {
			time %= this.duration;
			if(lastTime > 0) {
				lastTime %= this.duration;
			}
		}
		var timelines = this.timelines;
		var i = 0;
		var n = timelines.length;
		while(i < n) {
			timelines[i].apply(skeleton,lastTime,time,events,alpha,pose,direction);
			++i;
		}
	}
	,getName: function() {
		return this.name;
	}
	,toString: function() {
		return this.name;
	}
	,__class__: spine_Animation
};
var spine_Timeline = function() { };
$hxClasses["spine.Timeline"] = spine_Timeline;
spine_Timeline.__name__ = "spine.Timeline";
spine_Timeline.__isInterface__ = true;
spine_Timeline.prototype = {
	apply: null
	,getPropertyId: null
	,__class__: spine_Timeline
};
var spine_CurveTimeline = function(frameCount) {
	if(frameCount <= 0) {
		throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("frameCount must be > 0: " + frameCount));
	}
	var length = (frameCount - 1) * 19;
	if(length == null) {
		length = 0;
	}
	var len = length | 0;
	var capacity = len != 0 ? len : 16;
	var this1 = [];
	var array = this1;
	if(length > 0) {
		var len1 = array.length;
		if(len1 > len) {
			array.splice(len,len - len1);
		} else if(len1 < len) {
			while(len1 < len) {
				array.push(0);
				++len1;
			}
		}
	}
	this.curves = array;
};
$hxClasses["spine.CurveTimeline"] = spine_CurveTimeline;
spine_CurveTimeline.__name__ = "spine.CurveTimeline";
spine_CurveTimeline.__interfaces__ = [spine_Timeline];
spine_CurveTimeline.prototype = {
	getPropertyId: function() {
		return 0;
	}
	,apply: function(skeleton,lastTime,time,events,alpha,pose,direction) {
	}
	,curves: null
	,getFrameCount: function() {
		return this.curves.length / 19 + 1 | 0;
	}
	,setLinear: function(frameIndex) {
		this.curves[frameIndex * 19] = 0;
	}
	,setStepped: function(frameIndex) {
		this.curves[frameIndex * 19] = 1;
	}
	,getCurveType: function(frameIndex) {
		var index = frameIndex * 19;
		if(index == this.curves.length) {
			return 0;
		}
		var type = this.curves[index];
		if(type == 0) {
			return 0;
		}
		if(type == 1) {
			return 1;
		}
		return 2;
	}
	,setCurve: function(frameIndex,cx1,cy1,cx2,cy2) {
		var tmpx = (-cx1 * 2 + cx2) * 0.03;
		var tmpy = (-cy1 * 2 + cy2) * 0.03;
		var dddfx = ((cx1 - cx2) * 3 + 1) * 0.006;
		var dddfy = ((cy1 - cy2) * 3 + 1) * 0.006;
		var ddfx = tmpx * 2 + dddfx;
		var ddfy = tmpy * 2 + dddfy;
		var dfx = cx1 * 0.3 + tmpx + dddfx * 0.16666667;
		var dfy = cy1 * 0.3 + tmpy + dddfy * 0.16666667;
		var i = frameIndex * 19;
		var curves = this.curves;
		curves[i++] = 2;
		var x = dfx;
		var y = dfy;
		var n = i + 19 - 1;
		while(i < n) {
			curves[i] = x;
			curves[i + 1] = y;
			dfx += ddfx;
			dfy += ddfy;
			ddfx += dddfx;
			ddfy += dddfy;
			x += dfx;
			y += dfy;
			i += 2;
		}
	}
	,getCurvePercent: function(frameIndex,percent) {
		if(percent < 0) {
			percent = 0;
		} else if(percent > 1) {
			percent = 1;
		}
		var curves = this.curves;
		var i = frameIndex * 19;
		var type = curves[i];
		if(type == 0) {
			return percent;
		}
		if(type == 1) {
			return 0;
		}
		++i;
		var x = 0;
		var start = i;
		var n = i + 19 - 1;
		while(i < n) {
			x = curves[i];
			if(x >= percent) {
				if(i == start) {
					return curves[i + 1] * percent / x;
				}
				var prevX = curves[i - 2];
				var prevY = curves[i - 1];
				return prevY + (curves[i + 1] - prevY) * (percent - prevX) / (x - prevX);
			}
			i += 2;
		}
		var y = curves[i - 1];
		return y + (1 - y) * (percent - x) / (1 - x);
	}
	,__class__: spine_CurveTimeline
};
var spine_RotateTimeline = function(frameCount) {
	this.boneIndex = 0;
	spine_CurveTimeline.call(this,frameCount);
	var length = frameCount << 1;
	if(length == null) {
		length = 0;
	}
	var len = length | 0;
	var capacity = len != 0 ? len : 16;
	var this1 = [];
	var array = this1;
	if(length > 0) {
		var len1 = array.length;
		if(len1 > len) {
			array.splice(len,len - len1);
		} else if(len1 < len) {
			while(len1 < len) {
				array.push(0);
				++len1;
			}
		}
	}
	this.frames = array;
};
$hxClasses["spine.RotateTimeline"] = spine_RotateTimeline;
spine_RotateTimeline.__name__ = "spine.RotateTimeline";
spine_RotateTimeline.__super__ = spine_CurveTimeline;
spine_RotateTimeline.prototype = $extend(spine_CurveTimeline.prototype,{
	boneIndex: null
	,frames: null
	,getPropertyId: function() {
		return (0 << 24) + this.boneIndex;
	}
	,setBoneIndex: function(index) {
		if(index < 0) {
			throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("index must be >= 0."));
		}
		this.boneIndex = index;
	}
	,getBoneIndex: function() {
		return this.boneIndex;
	}
	,getFrames: function() {
		return this.frames;
	}
	,setFrame: function(frameIndex,time,degrees) {
		frameIndex <<= 1;
		this.frames[frameIndex] = time;
		this.frames[frameIndex + 1] = degrees;
	}
	,apply: function(skeleton,lastTime,time,events,alpha,pose,direction) {
		var bone = skeleton.bones[this.boneIndex];
		var frames = this.frames;
		if(time < frames[0]) {
			var _continueAfterSwitch0 = false;
			while(true) {
				var _switchCond0 = pose;
				if(_switchCond0 == 0) {
					bone.rotation = bone.data.rotation;
					return;
				} else if(_switchCond0 == 1) {
					var r = bone.data.rotation - bone.rotation;
					r -= (16384 - (16384.499999999996 - r / 360 | 0)) * 360;
					bone.rotation += r * alpha;
				}
				break;
			}
			return;
		}
		if(time >= frames[frames.length - 2]) {
			if(pose == 0) {
				bone.rotation = bone.data.rotation + frames[frames.length + (-1)] * alpha;
			} else {
				var r = bone.data.rotation + frames[frames.length + (-1)] - bone.rotation;
				r -= (16384 - (16384.499999999996 - r / 360 | 0)) * 360;
				bone.rotation += r * alpha;
			}
			return;
		}
		var frame = spine_Animation.binarySearchWithStep(frames,time,2);
		var prevRotation = frames[frame + (-1)];
		var frameTime = frames[frame];
		var percent = this.getCurvePercent((frame >> 1) - 1,1 - (time - frameTime) / (frames[frame + (-2)] - frameTime));
		var r = frames[frame + 1] - prevRotation;
		r -= (16384 - (16384.499999999996 - r / 360 | 0)) * 360;
		r = prevRotation + r * percent;
		if(pose == 0) {
			r -= (16384 - (16384.499999999996 - r / 360 | 0)) * 360;
			bone.rotation = bone.data.rotation + r * alpha;
		} else {
			r = bone.data.rotation + r - bone.rotation;
			r -= (16384 - (16384.499999999996 - r / 360 | 0)) * 360;
			bone.rotation += r * alpha;
		}
	}
	,__class__: spine_RotateTimeline
});
var spine_TranslateTimeline = function(frameCount) {
	this.boneIndex = 0;
	spine_CurveTimeline.call(this,frameCount);
	var length = frameCount * 3;
	if(length == null) {
		length = 0;
	}
	var len = length | 0;
	var capacity = len != 0 ? len : 16;
	var this1 = [];
	var array = this1;
	if(length > 0) {
		var len1 = array.length;
		if(len1 > len) {
			array.splice(len,len - len1);
		} else if(len1 < len) {
			while(len1 < len) {
				array.push(0);
				++len1;
			}
		}
	}
	this.frames = array;
};
$hxClasses["spine.TranslateTimeline"] = spine_TranslateTimeline;
spine_TranslateTimeline.__name__ = "spine.TranslateTimeline";
spine_TranslateTimeline.__super__ = spine_CurveTimeline;
spine_TranslateTimeline.prototype = $extend(spine_CurveTimeline.prototype,{
	boneIndex: null
	,frames: null
	,getPropertyId: function() {
		return (1 << 24) + this.boneIndex;
	}
	,setBoneIndex: function(index) {
		if(index < 0) {
			throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("index must be >= 0."));
		}
		this.boneIndex = index;
	}
	,getBoneIndex: function() {
		return this.boneIndex;
	}
	,getFrames: function() {
		return this.frames;
	}
	,setFrame: function(frameIndex,time,x,y) {
		frameIndex *= 3;
		this.frames[frameIndex] = time;
		this.frames[frameIndex + 1] = x;
		this.frames[frameIndex + 2] = y;
	}
	,apply: function(skeleton,lastTime,time,events,alpha,pose,direction) {
		var bone = skeleton.bones[this.boneIndex];
		var frames = this.frames;
		if(time < frames[0]) {
			var _continueAfterSwitch1 = false;
			while(true) {
				var _switchCond1 = pose;
				if(_switchCond1 == 0) {
					bone.x = bone.data.x;
					bone.y = bone.data.y;
					return;
				} else if(_switchCond1 == 1) {
					bone.x += (bone.data.x - bone.x) * alpha;
					bone.y += (bone.data.y - bone.y) * alpha;
				}
				break;
			}
			return;
		}
		var x = 0;
		var y = 0;
		if(time >= frames[frames.length - 3]) {
			x = frames[frames.length + (-2)];
			y = frames[frames.length + (-1)];
		} else {
			var frame = spine_Animation.binarySearchWithStep(frames,time,3);
			x = frames[frame + (-2)];
			y = frames[frame + (-1)];
			var frameTime = frames[frame];
			var percent = this.getCurvePercent(frame / 3 - 1 | 0,1 - (time - frameTime) / (frames[frame + (-3)] - frameTime));
			x += (frames[frame + 1] - x) * percent;
			y += (frames[frame + 2] - y) * percent;
		}
		if(pose == 0) {
			bone.x = bone.data.x + x * alpha;
			bone.y = bone.data.y + y * alpha;
		} else {
			bone.x += (bone.data.x + x - bone.x) * alpha;
			bone.y += (bone.data.y + y - bone.y) * alpha;
		}
	}
	,__class__: spine_TranslateTimeline
});
var spine_ScaleTimeline = function(frameCount) {
	spine_TranslateTimeline.call(this,frameCount);
};
$hxClasses["spine.ScaleTimeline"] = spine_ScaleTimeline;
spine_ScaleTimeline.__name__ = "spine.ScaleTimeline";
spine_ScaleTimeline.__super__ = spine_TranslateTimeline;
spine_ScaleTimeline.prototype = $extend(spine_TranslateTimeline.prototype,{
	getPropertyId: function() {
		return (2 << 24) + this.boneIndex;
	}
	,apply: function(skeleton,lastTime,time,events,alpha,pose,direction) {
		var bone = skeleton.bones[this.boneIndex];
		var frames = this.frames;
		if(time < frames[0]) {
			var _continueAfterSwitch2 = false;
			while(true) {
				var _switchCond2 = pose;
				if(_switchCond2 == 0) {
					bone.scaleX = bone.data.scaleX;
					bone.scaleY = bone.data.scaleY;
					return;
				} else if(_switchCond2 == 1) {
					bone.scaleX += (bone.data.scaleX - bone.scaleX) * alpha;
					bone.scaleY += (bone.data.scaleY - bone.scaleY) * alpha;
				}
				break;
			}
			return;
		}
		var x = 0;
		var y = 0;
		if(time >= frames[frames.length - 3]) {
			x = frames[frames.length + (-2)] * bone.data.scaleX;
			y = frames[frames.length + (-1)] * bone.data.scaleY;
		} else {
			var frame = spine_Animation.binarySearchWithStep(frames,time,3);
			x = frames[frame + (-2)];
			y = frames[frame + (-1)];
			var frameTime = frames[frame];
			var percent = this.getCurvePercent(frame / 3 - 1 | 0,1 - (time - frameTime) / (frames[frame + (-3)] - frameTime));
			x = (x + (frames[frame + 1] - x) * percent) * bone.data.scaleX;
			y = (y + (frames[frame + 2] - y) * percent) * bone.data.scaleY;
		}
		if(alpha == 1) {
			bone.scaleX = x;
			bone.scaleY = y;
		} else {
			var bx = 0;
			var by = 0;
			if(pose == 0) {
				bx = bone.data.scaleX;
				by = bone.data.scaleY;
			} else {
				bx = bone.scaleX;
				by = bone.scaleY;
			}
			if(direction == 1) {
				x = Math.abs(x) * (bx > 0 ? 1 : bx < 0 ? -1 : 0);
				y = Math.abs(y) * (by > 0 ? 1 : by < 0 ? -1 : 0);
			} else {
				bx = Math.abs(bx) * (x > 0 ? 1 : x < 0 ? -1 : 0);
				by = Math.abs(by) * (y > 0 ? 1 : y < 0 ? -1 : 0);
			}
			bone.scaleX = bx + (x - bx) * alpha;
			bone.scaleY = by + (y - by) * alpha;
		}
	}
	,__class__: spine_ScaleTimeline
});
var spine_ShearTimeline = function(frameCount) {
	spine_TranslateTimeline.call(this,frameCount);
};
$hxClasses["spine.ShearTimeline"] = spine_ShearTimeline;
spine_ShearTimeline.__name__ = "spine.ShearTimeline";
spine_ShearTimeline.__super__ = spine_TranslateTimeline;
spine_ShearTimeline.prototype = $extend(spine_TranslateTimeline.prototype,{
	getPropertyId: function() {
		return (3 << 24) + this.boneIndex;
	}
	,apply: function(skeleton,lastTime,time,events,alpha,pose,direction) {
		var bone = skeleton.bones[this.boneIndex];
		var frames = this.frames;
		if(time < frames[0]) {
			var _continueAfterSwitch3 = false;
			while(true) {
				var _switchCond3 = pose;
				if(_switchCond3 == 0) {
					bone.shearX = bone.data.shearX;
					bone.shearY = bone.data.shearY;
					return;
				} else if(_switchCond3 == 1) {
					bone.shearX += (bone.data.shearX - bone.shearX) * alpha;
					bone.shearY += (bone.data.shearY - bone.shearY) * alpha;
				}
				break;
			}
			return;
		}
		var x = 0;
		var y = 0;
		if(time >= frames[frames.length - 3]) {
			x = frames[frames.length + (-2)];
			y = frames[frames.length + (-1)];
		} else {
			var frame = spine_Animation.binarySearchWithStep(frames,time,3);
			x = frames[frame + (-2)];
			y = frames[frame + (-1)];
			var frameTime = frames[frame];
			var percent = this.getCurvePercent(frame / 3 - 1 | 0,1 - (time - frameTime) / (frames[frame + (-3)] - frameTime));
			x += (frames[frame + 1] - x) * percent;
			y += (frames[frame + 2] - y) * percent;
		}
		if(pose == 0) {
			bone.shearX = bone.data.shearX + x * alpha;
			bone.shearY = bone.data.shearY + y * alpha;
		} else {
			bone.shearX += (bone.data.shearX + x - bone.shearX) * alpha;
			bone.shearY += (bone.data.shearY + y - bone.shearY) * alpha;
		}
	}
	,__class__: spine_ShearTimeline
});
var spine_ColorTimeline = function(frameCount) {
	this.slotIndex = 0;
	spine_CurveTimeline.call(this,frameCount);
	var length = frameCount * 5;
	if(length == null) {
		length = 0;
	}
	var len = length | 0;
	var capacity = len != 0 ? len : 16;
	var this1 = [];
	var array = this1;
	if(length > 0) {
		var len1 = array.length;
		if(len1 > len) {
			array.splice(len,len - len1);
		} else if(len1 < len) {
			while(len1 < len) {
				array.push(0);
				++len1;
			}
		}
	}
	this.frames = array;
};
$hxClasses["spine.ColorTimeline"] = spine_ColorTimeline;
spine_ColorTimeline.__name__ = "spine.ColorTimeline";
spine_ColorTimeline.__super__ = spine_CurveTimeline;
spine_ColorTimeline.prototype = $extend(spine_CurveTimeline.prototype,{
	slotIndex: null
	,frames: null
	,getPropertyId: function() {
		return (5 << 24) + this.slotIndex;
	}
	,setSlotIndex: function(index) {
		if(index < 0) {
			throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("index must be >= 0."));
		}
		this.slotIndex = index;
	}
	,getSlotIndex: function() {
		return this.slotIndex;
	}
	,getFrames: function() {
		return this.frames;
	}
	,setFrame: function(frameIndex,time,r,g,b,a) {
		frameIndex *= 5;
		this.frames[frameIndex] = time;
		this.frames[frameIndex + 1] = r;
		this.frames[frameIndex + 2] = g;
		this.frames[frameIndex + 3] = b;
		this.frames[frameIndex + 4] = a;
	}
	,apply: function(skeleton,lastTime,time,events,alpha,pose,direction) {
		var slot = skeleton.slots[this.slotIndex];
		var frames = this.frames;
		if(time < frames[0]) {
			var _continueAfterSwitch4 = false;
			while(true) {
				var _switchCond4 = pose;
				if(_switchCond4 == 0) {
					slot.color.set(slot.data.color);
					return;
				} else if(_switchCond4 == 1) {
					var color = slot.color;
					var setup = slot.data.color;
					color.r += (setup.r - color.r) * alpha;
					color.g += (setup.g - color.g) * alpha;
					color.b += (setup.b - color.b) * alpha;
					color.a += (setup.a - color.a) * alpha;
				}
				break;
			}
			return;
		}
		var r = 0;
		var g = 0;
		var b = 0;
		var a = 0;
		if(time >= frames[frames.length - 5]) {
			var i = frames.length;
			r = frames[i + (-4)];
			g = frames[i + (-3)];
			b = frames[i + (-2)];
			a = frames[i + (-1)];
		} else {
			var frame = spine_Animation.binarySearchWithStep(frames,time,5);
			r = frames[frame + (-4)];
			g = frames[frame + (-3)];
			b = frames[frame + (-2)];
			a = frames[frame + (-1)];
			var frameTime = frames[frame];
			var percent = this.getCurvePercent(frame / 5 - 1 | 0,1 - (time - frameTime) / (frames[frame + (-5)] - frameTime));
			r += (frames[frame + 1] - r) * percent;
			g += (frames[frame + 2] - g) * percent;
			b += (frames[frame + 3] - b) * percent;
			a += (frames[frame + 4] - a) * percent;
		}
		if(alpha == 1) {
			slot.color.set(r,g,b,a);
		} else {
			var color = slot.color;
			if(pose == 0) {
				color.set(slot.data.color);
			}
			color.r += (r - color.r) * alpha;
			color.g += (g - color.g) * alpha;
			color.b += (b - color.b) * alpha;
			color.a += (a - color.a) * alpha;
		}
	}
	,__class__: spine_ColorTimeline
});
var spine_TwoColorTimeline = function(frameCount) {
	this.slotIndex = 0;
	spine_CurveTimeline.call(this,frameCount);
	var length = frameCount * 8;
	if(length == null) {
		length = 0;
	}
	var len = length | 0;
	var capacity = len != 0 ? len : 16;
	var this1 = [];
	var array = this1;
	if(length > 0) {
		var len1 = array.length;
		if(len1 > len) {
			array.splice(len,len - len1);
		} else if(len1 < len) {
			while(len1 < len) {
				array.push(0);
				++len1;
			}
		}
	}
	this.frames = array;
};
$hxClasses["spine.TwoColorTimeline"] = spine_TwoColorTimeline;
spine_TwoColorTimeline.__name__ = "spine.TwoColorTimeline";
spine_TwoColorTimeline.__super__ = spine_CurveTimeline;
spine_TwoColorTimeline.prototype = $extend(spine_CurveTimeline.prototype,{
	slotIndex: null
	,frames: null
	,getPropertyId: function() {
		return (14 << 24) + this.slotIndex;
	}
	,setSlotIndex: function(index) {
		if(index < 0) {
			throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("index must be >= 0."));
		}
		this.slotIndex = index;
	}
	,getSlotIndex: function() {
		return this.slotIndex;
	}
	,getFrames: function() {
		return this.frames;
	}
	,setFrame: function(frameIndex,time,r,g,b,a,r2,g2,b2) {
		frameIndex *= 8;
		this.frames[frameIndex] = time;
		this.frames[frameIndex + 1] = r;
		this.frames[frameIndex + 2] = g;
		this.frames[frameIndex + 3] = b;
		this.frames[frameIndex + 4] = a;
		this.frames[frameIndex + 5] = r2;
		this.frames[frameIndex + 6] = g2;
		this.frames[frameIndex + 7] = b2;
	}
	,apply: function(skeleton,lastTime,time,events,alpha,pose,direction) {
		var slot = skeleton.slots[this.slotIndex];
		var frames = this.frames;
		if(time < frames[0]) {
			var _continueAfterSwitch5 = false;
			while(true) {
				var _switchCond5 = pose;
				if(_switchCond5 == 0) {
					slot.color.set(slot.data.color);
					slot.darkColor.set(slot.data.darkColor);
					return;
				} else if(_switchCond5 == 1) {
					var light = slot.color;
					var dark = slot.darkColor;
					var setupLight = slot.data.color;
					var setupDark = slot.data.darkColor;
					light.r += (setupLight.r - light.r) * alpha;
					light.g += (setupLight.g - light.g) * alpha;
					light.b += (setupLight.b - light.b) * alpha;
					light.a += (setupLight.a - light.a) * alpha;
					dark.r += (setupDark.r - dark.r) * alpha;
					dark.g += (setupDark.g - dark.g) * alpha;
					dark.b += (setupDark.b - dark.b) * alpha;
					dark.a += 0;
				}
				break;
			}
			return;
		}
		var r = 0;
		var g = 0;
		var b = 0;
		var a = 0;
		var r2 = 0;
		var g2 = 0;
		var b2 = 0;
		if(time >= frames[frames.length - 8]) {
			var i = frames.length;
			r = frames[i + (-7)];
			g = frames[i + (-6)];
			b = frames[i + (-5)];
			a = frames[i + (-4)];
			r2 = frames[i + (-3)];
			g2 = frames[i + (-2)];
			b2 = frames[i + (-1)];
		} else {
			var frame = spine_Animation.binarySearchWithStep(frames,time,8);
			r = frames[frame + (-7)];
			g = frames[frame + (-6)];
			b = frames[frame + (-5)];
			a = frames[frame + (-4)];
			r2 = frames[frame + (-3)];
			g2 = frames[frame + (-2)];
			b2 = frames[frame + (-1)];
			var frameTime = frames[frame];
			var percent = this.getCurvePercent(frame / 8 - 1 | 0,1 - (time - frameTime) / (frames[frame + (-8)] - frameTime));
			r += (frames[frame + 1] - r) * percent;
			g += (frames[frame + 2] - g) * percent;
			b += (frames[frame + 3] - b) * percent;
			a += (frames[frame + 4] - a) * percent;
			r2 += (frames[frame + 5] - r2) * percent;
			g2 += (frames[frame + 6] - g2) * percent;
			b2 += (frames[frame + 7] - b2) * percent;
		}
		if(alpha == 1) {
			slot.color.set(r,g,b,a);
			slot.darkColor.set(r2,g2,b2,1);
		} else {
			var light = slot.color;
			var dark = slot.darkColor;
			if(pose == 0) {
				light.set(slot.data.color);
				dark.set(slot.data.darkColor);
			}
			light.r += (r - light.r) * alpha;
			light.g += (g - light.g) * alpha;
			light.b += (b - light.b) * alpha;
			light.a += (a - light.a) * alpha;
			dark.r += (r2 - dark.r) * alpha;
			dark.g += (g2 - dark.g) * alpha;
			dark.b += (b2 - dark.b) * alpha;
			dark.a += 0;
		}
	}
	,__class__: spine_TwoColorTimeline
});
var spine_AttachmentTimeline = function(frameCount) {
	this.slotIndex = 0;
	var length = frameCount;
	if(length == null) {
		length = 0;
	}
	var len = length | 0;
	var capacity = len != 0 ? len : 16;
	var this1 = [];
	var array = this1;
	if(length > 0) {
		var len1 = array.length;
		if(len1 > len) {
			array.splice(len,len - len1);
		} else if(len1 < len) {
			while(len1 < len) {
				array.push(0);
				++len1;
			}
		}
	}
	this.frames = array;
	var length = frameCount;
	if(length == null) {
		length = 0;
	}
	var len = length | 0;
	var capacity = len != 0 ? len : 16;
	var this1 = [];
	var array = this1;
	if(length != 0) {
		var len1 = array.length;
		if(len1 > len) {
			array.splice(len,len - len1);
		} else if(len1 < len) {
			array[len - 1] = null;
		}
	}
	this.attachmentNames = array;
};
$hxClasses["spine.AttachmentTimeline"] = spine_AttachmentTimeline;
spine_AttachmentTimeline.__name__ = "spine.AttachmentTimeline";
spine_AttachmentTimeline.__interfaces__ = [spine_Timeline];
spine_AttachmentTimeline.prototype = {
	slotIndex: null
	,frames: null
	,attachmentNames: null
	,getPropertyId: function() {
		return (4 << 24) + this.slotIndex;
	}
	,getFrameCount: function() {
		return this.frames.length;
	}
	,setSlotIndex: function(index) {
		if(index < 0) {
			throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("index must be >= 0."));
		}
		this.slotIndex = index;
	}
	,getSlotIndex: function() {
		return this.slotIndex;
	}
	,getFrames: function() {
		return this.frames;
	}
	,getAttachmentNames: function() {
		return this.attachmentNames;
	}
	,setFrame: function(frameIndex,time,attachmentName) {
		this.frames[frameIndex] = time;
		this.attachmentNames[frameIndex] = attachmentName;
	}
	,apply: function(skeleton,lastTime,time,events,alpha,pose,direction) {
		var slot = skeleton.slots[this.slotIndex];
		if(direction == 1 && pose == 0) {
			var attachmentName = slot.data.attachmentName;
			var attachment = attachmentName == null ? null : skeleton.getAttachment(this.slotIndex,attachmentName);
			if(slot.attachment != attachment) {
				slot.attachment = attachment;
				slot.attachmentTime = slot.bone.skeleton.time;
				var this1 = slot.attachmentVertices;
				this1.splice(0,this1.length);
			}
			return;
		}
		var frames = this.frames;
		if(time < frames[0]) {
			if(pose == 0) {
				var attachmentName = slot.data.attachmentName;
				var attachment = attachmentName == null ? null : skeleton.getAttachment(this.slotIndex,attachmentName);
				if(slot.attachment != attachment) {
					slot.attachment = attachment;
					slot.attachmentTime = slot.bone.skeleton.time;
					var this1 = slot.attachmentVertices;
					this1.splice(0,this1.length);
				}
			}
			return;
		}
		var frameIndex = 0;
		if(time >= frames[frames.length - 1]) {
			frameIndex = frames.length - 1;
		} else {
			frameIndex = spine_Animation.binarySearch(frames,time) - 1;
		}
		var attachmentName = this.attachmentNames[frameIndex];
		var attachment = attachmentName == null ? null : skeleton.getAttachment(this.slotIndex,attachmentName);
		if(slot.attachment != attachment) {
			slot.attachment = attachment;
			slot.attachmentTime = slot.bone.skeleton.time;
			var this1 = slot.attachmentVertices;
			this1.splice(0,this1.length);
		}
	}
	,__class__: spine_AttachmentTimeline
};
var spine_DeformTimeline = function(frameCount) {
	this.slotIndex = 0;
	spine_CurveTimeline.call(this,frameCount);
	var length = frameCount;
	if(length == null) {
		length = 0;
	}
	var len = length | 0;
	var capacity = len != 0 ? len : 16;
	var this1 = [];
	var array = this1;
	if(length > 0) {
		var len1 = array.length;
		if(len1 > len) {
			array.splice(len,len - len1);
		} else if(len1 < len) {
			while(len1 < len) {
				array.push(0);
				++len1;
			}
		}
	}
	this.frames = array;
	var length = frameCount;
	var length2 = 0;
	if(length2 == null) {
		length2 = 0;
	}
	if(length == null) {
		length = 0;
	}
	var len = length | 0;
	var len2 = length2 | 0;
	var capacity = len != 0 ? len : 16;
	var this1 = [];
	var array = this1;
	if(length > 0) {
		var len1 = array.length;
		if(len1 > len) {
			array.splice(len,len - len1);
		} else if(len1 < len) {
			array[len - 1] = null;
		}
	}
	var _g = 0;
	var _g1 = len2;
	while(_g < _g1) {
		var i = _g++;
		var length = length2;
		if(length == null) {
			length = 0;
		}
		var len = length | 0;
		var capacity = len != 0 ? len : 16;
		var this1 = [];
		var array1 = this1;
		if(length > 0) {
			var len1 = array1.length;
			if(len1 > len) {
				array1.splice(len,len - len1);
			} else if(len1 < len) {
				while(len1 < len) {
					array1.push(0);
					++len1;
				}
			}
		}
		array[i] = array1;
	}
	this.frameVertices = array;
};
$hxClasses["spine.DeformTimeline"] = spine_DeformTimeline;
spine_DeformTimeline.__name__ = "spine.DeformTimeline";
spine_DeformTimeline.__super__ = spine_CurveTimeline;
spine_DeformTimeline.prototype = $extend(spine_CurveTimeline.prototype,{
	slotIndex: null
	,attachment: null
	,frames: null
	,frameVertices: null
	,getPropertyId: function() {
		return (6 << 27) + this.attachment.id + this.slotIndex;
	}
	,setSlotIndex: function(index) {
		if(index < 0) {
			throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("index must be >= 0."));
		}
		this.slotIndex = index;
	}
	,getSlotIndex: function() {
		return this.slotIndex;
	}
	,setAttachment: function(attachment) {
		this.attachment = attachment;
	}
	,getAttachment: function() {
		return this.attachment;
	}
	,getFrames: function() {
		return this.frames;
	}
	,getVertices: function() {
		return this.frameVertices;
	}
	,setFrame: function(frameIndex,time,vertices) {
		this.frames[frameIndex] = time;
		this.frameVertices[frameIndex] = vertices;
	}
	,apply: function(skeleton,lastTime,time,events,alpha,pose,direction) {
		var slot = skeleton.slots[this.slotIndex];
		var slotAttachment = slot.attachment;
		if(!((slotAttachment) instanceof spine_attachments_VertexAttachment) || !(js_Boot.__cast(slotAttachment , spine_attachments_VertexAttachment)).applyDeform(this.attachment)) {
			return;
		}
		var verticesArray = slot.attachmentVertices;
		if(verticesArray.length == 0) {
			alpha = 1;
		}
		var frameVertices = this.frameVertices;
		var vertexCount = frameVertices[0].length;
		var frames = this.frames;
		if(time < frames[0]) {
			var vertexAttachment = js_Boot.__cast(slotAttachment , spine_attachments_VertexAttachment);
			var _continueAfterSwitch6 = false;
			while(true) {
				var _switchCond6 = pose;
				if(_switchCond6 == 0) {
					verticesArray.splice(0,verticesArray.length);
					return;
				} else if(_switchCond6 == 1) {
					if(alpha == 1) {
						verticesArray.splice(0,verticesArray.length);
						return;
					}
					var len = verticesArray.length;
					if(len > vertexCount) {
						verticesArray.splice(vertexCount,vertexCount - len);
					} else if(len < vertexCount) {
						while(len < vertexCount) {
							verticesArray.push(0);
							++len;
						}
					}
					var vertices = verticesArray;
					if(vertexAttachment.bones == null) {
						var setupVertices = vertexAttachment.vertices;
						var i = 0;
						while(i < vertexCount) {
							vertices[i] += (setupVertices[i] - vertices[i]) * alpha;
							++i;
						}
					} else {
						alpha = 1 - alpha;
						var i1 = 0;
						while(i1 < vertexCount) {
							vertices[i1] *= alpha;
							++i1;
						}
					}
				}
				break;
			}
			return;
		}
		var len = verticesArray.length;
		if(len > vertexCount) {
			verticesArray.splice(vertexCount,vertexCount - len);
		} else if(len < vertexCount) {
			while(len < vertexCount) {
				verticesArray.push(0);
				++len;
			}
		}
		var vertices = verticesArray;
		if(time >= frames[frames.length - 1]) {
			var lastVertices = frameVertices[frames.length - 1];
			if(alpha == 1) {
				spine_support_utils_Array.copy(lastVertices,0,vertices,0,vertexCount);
			} else if(pose == 0) {
				var vertexAttachment = js_Boot.__cast(slotAttachment , spine_attachments_VertexAttachment);
				if(vertexAttachment.bones == null) {
					var setupVertices = vertexAttachment.vertices;
					var i = 0;
					while(i < vertexCount) {
						var setup = setupVertices[i];
						vertices[i] = setup + (lastVertices[i] - setup) * alpha;
						++i;
					}
				} else {
					var i = 0;
					while(i < vertexCount) {
						vertices[i] = lastVertices[i] * alpha;
						++i;
					}
				}
			} else {
				var i = 0;
				while(i < vertexCount) {
					vertices[i] += (lastVertices[i] - vertices[i]) * alpha;
					++i;
				}
			}
			return;
		}
		var frame = spine_Animation.binarySearch(frames,time);
		var prevVertices = frameVertices[frame - 1 | 0];
		var nextVertices = frameVertices[frame];
		var frameTime = frames[frame];
		var percent = this.getCurvePercent(frame - 1 | 0,1 - (time - frameTime) / (frames[frame - 1 | 0] - frameTime));
		if(alpha == 1) {
			var i = 0;
			while(i < vertexCount) {
				var prev = prevVertices[i];
				vertices[i] = prev + (nextVertices[i] - prev) * percent;
				++i;
			}
		} else if(pose == 0) {
			var vertexAttachment = js_Boot.__cast(slotAttachment , spine_attachments_VertexAttachment);
			if(vertexAttachment.bones == null) {
				var setupVertices = vertexAttachment.vertices;
				var i = 0;
				while(i < vertexCount) {
					var prev = prevVertices[i];
					var setup = setupVertices[i];
					vertices[i] = setup + (prev + (nextVertices[i] - prev) * percent - setup) * alpha;
					++i;
				}
			} else {
				var i = 0;
				while(i < vertexCount) {
					var prev = prevVertices[i];
					vertices[i] = (prev + (nextVertices[i] - prev) * percent) * alpha;
					++i;
				}
			}
		} else {
			var i = 0;
			while(i < vertexCount) {
				var prev = prevVertices[i];
				vertices[i] += (prev + (nextVertices[i] - prev) * percent - vertices[i]) * alpha;
				++i;
			}
		}
	}
	,__class__: spine_DeformTimeline
});
var spine_EventTimeline = function(frameCount) {
	var length = frameCount;
	if(length == null) {
		length = 0;
	}
	var len = length | 0;
	var capacity = len != 0 ? len : 16;
	var this1 = [];
	var array = this1;
	if(length > 0) {
		var len1 = array.length;
		if(len1 > len) {
			array.splice(len,len - len1);
		} else if(len1 < len) {
			while(len1 < len) {
				array.push(0);
				++len1;
			}
		}
	}
	this.frames = array;
	var length = frameCount;
	if(length == null) {
		length = 0;
	}
	var len = length | 0;
	var capacity = len != 0 ? len : 16;
	var this1 = [];
	var array = this1;
	if(length != 0) {
		var len1 = array.length;
		if(len1 > len) {
			array.splice(len,len - len1);
		} else if(len1 < len) {
			array[len - 1] = null;
		}
	}
	this.events = array;
};
$hxClasses["spine.EventTimeline"] = spine_EventTimeline;
spine_EventTimeline.__name__ = "spine.EventTimeline";
spine_EventTimeline.__interfaces__ = [spine_Timeline];
spine_EventTimeline.prototype = {
	frames: null
	,events: null
	,getPropertyId: function() {
		return 7 << 24;
	}
	,getFrameCount: function() {
		return this.frames.length;
	}
	,getFrames: function() {
		return this.frames;
	}
	,getEvents: function() {
		return this.events;
	}
	,setFrame: function(frameIndex,event) {
		this.frames[frameIndex] = event.time;
		this.events[frameIndex] = event;
	}
	,apply: function(skeleton,lastTime,time,firedEvents,alpha,pose,direction) {
		if(firedEvents == null) {
			return;
		}
		var frames = this.frames;
		var frameCount = frames.length;
		if(lastTime > time) {
			this.apply(skeleton,lastTime,999999999,firedEvents,alpha,pose,direction);
			lastTime = -1;
		} else if(lastTime >= frames[frameCount - 1]) {
			return;
		}
		if(time < frames[0]) {
			return;
		}
		var frame = 0;
		if(lastTime < frames[0]) {
			frame = 0;
		} else {
			frame = spine_Animation.binarySearch(frames,lastTime);
			var frameTime = frames[frame];
			while(frame > 0) {
				if(frames[frame - 1] != frameTime) {
					break;
				}
				--frame;
			}
		}
		while(frame < frameCount && time >= frames[frame]) {
			firedEvents.push(this.events[frame]);
			++frame;
		}
	}
	,__class__: spine_EventTimeline
};
var spine_DrawOrderTimeline = function(frameCount) {
	var length = frameCount;
	if(length == null) {
		length = 0;
	}
	var len = length | 0;
	var capacity = len != 0 ? len : 16;
	var this1 = [];
	var array = this1;
	if(length > 0) {
		var len1 = array.length;
		if(len1 > len) {
			array.splice(len,len - len1);
		} else if(len1 < len) {
			while(len1 < len) {
				array.push(0);
				++len1;
			}
		}
	}
	this.frames = array;
	var length = frameCount;
	var length2 = 0;
	if(length2 == null) {
		length2 = 0;
	}
	if(length == null) {
		length = 0;
	}
	var len = length | 0;
	var len2 = length2 | 0;
	var capacity = len != 0 ? len : 16;
	var this1 = [];
	var array = this1;
	if(length > 0) {
		var len1 = array.length;
		if(len1 > len) {
			array.splice(len,len - len1);
		} else if(len1 < len) {
			array[len - 1] = null;
		}
	}
	var _g = 0;
	var _g1 = len2;
	while(_g < _g1) {
		var i = _g++;
		var length = length2;
		if(length == null) {
			length = 0;
		}
		var len = length | 0;
		var capacity = len != 0 ? len : 16;
		var this1 = [];
		var array1 = this1;
		if(length != 0) {
			var len1 = array1.length;
			if(len1 > len) {
				array1.splice(len,len - len1);
			} else if(len1 < len) {
				while(len1 < len) {
					array1.push(0);
					++len1;
				}
			}
		}
		array[i] = array1;
	}
	this.drawOrders = array;
};
$hxClasses["spine.DrawOrderTimeline"] = spine_DrawOrderTimeline;
spine_DrawOrderTimeline.__name__ = "spine.DrawOrderTimeline";
spine_DrawOrderTimeline.__interfaces__ = [spine_Timeline];
spine_DrawOrderTimeline.prototype = {
	frames: null
	,drawOrders: null
	,getPropertyId: function() {
		return 8 << 24;
	}
	,getFrameCount: function() {
		return this.frames.length;
	}
	,getFrames: function() {
		return this.frames;
	}
	,getDrawOrders: function() {
		return this.drawOrders;
	}
	,setFrame: function(frameIndex,time,drawOrder) {
		this.frames[frameIndex] = time;
		this.drawOrders[frameIndex] = drawOrder;
	}
	,apply: function(skeleton,lastTime,time,events,alpha,pose,direction) {
		var drawOrder = skeleton.drawOrder;
		var slots = skeleton.slots;
		if(direction == 1 && pose == 0) {
			spine_support_utils_Array.copy(slots,0,drawOrder,0,slots.length);
			return;
		}
		var frames = this.frames;
		if(time < frames[0]) {
			if(pose == 0) {
				spine_support_utils_Array.copy(slots,0,drawOrder,0,slots.length);
			}
			return;
		}
		var frame = 0;
		if(time >= frames[frames.length - 1]) {
			frame = frames.length - 1;
		} else {
			frame = spine_Animation.binarySearch(frames,time) - 1;
		}
		var drawOrderToSetupIndex = this.drawOrders[frame];
		if(drawOrderToSetupIndex == null) {
			spine_support_utils_Array.copy(slots,0,drawOrder,0,slots.length);
		} else {
			var i = 0;
			var n = drawOrderToSetupIndex.length;
			while(i < n) {
				drawOrder[i] = slots[drawOrderToSetupIndex[i]];
				++i;
			}
		}
	}
	,__class__: spine_DrawOrderTimeline
};
var spine_IkConstraintTimeline = function(frameCount) {
	this.ikConstraintIndex = 0;
	spine_CurveTimeline.call(this,frameCount);
	var length = frameCount * 3;
	if(length == null) {
		length = 0;
	}
	var len = length | 0;
	var capacity = len != 0 ? len : 16;
	var this1 = [];
	var array = this1;
	if(length > 0) {
		var len1 = array.length;
		if(len1 > len) {
			array.splice(len,len - len1);
		} else if(len1 < len) {
			while(len1 < len) {
				array.push(0);
				++len1;
			}
		}
	}
	this.frames = array;
};
$hxClasses["spine.IkConstraintTimeline"] = spine_IkConstraintTimeline;
spine_IkConstraintTimeline.__name__ = "spine.IkConstraintTimeline";
spine_IkConstraintTimeline.__super__ = spine_CurveTimeline;
spine_IkConstraintTimeline.prototype = $extend(spine_CurveTimeline.prototype,{
	ikConstraintIndex: null
	,frames: null
	,getPropertyId: function() {
		return (9 << 24) + this.ikConstraintIndex;
	}
	,setIkConstraintIndex: function(index) {
		if(index < 0) {
			throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("index must be >= 0."));
		}
		this.ikConstraintIndex = index;
	}
	,getIkConstraintIndex: function() {
		return this.ikConstraintIndex;
	}
	,getFrames: function() {
		return this.frames;
	}
	,setFrame: function(frameIndex,time,mix,bendDirection) {
		frameIndex *= 3;
		this.frames[frameIndex] = time;
		this.frames[frameIndex + 1] = mix;
		this.frames[frameIndex + 2] = bendDirection;
	}
	,apply: function(skeleton,lastTime,time,events,alpha,pose,direction) {
		var constraint = skeleton.ikConstraints[this.ikConstraintIndex];
		var frames = this.frames;
		if(time < frames[0]) {
			var _continueAfterSwitch7 = false;
			while(true) {
				var _switchCond7 = pose;
				if(_switchCond7 == 0) {
					constraint.mix = constraint.data.mix;
					constraint.bendDirection = constraint.data.bendDirection;
					return;
				} else if(_switchCond7 == 1) {
					constraint.mix += (constraint.data.mix - constraint.mix) * alpha;
					constraint.bendDirection = constraint.data.bendDirection;
				}
				break;
			}
			return;
		}
		if(time >= frames[frames.length - 3]) {
			if(pose == 0) {
				constraint.mix = constraint.data.mix + (frames[frames.length + (-2)] - constraint.data.mix) * alpha;
				constraint.bendDirection = direction == 1 ? constraint.data.bendDirection : frames[frames.length + (-1)] | 0;
			} else {
				constraint.mix += (frames[frames.length + (-2)] - constraint.mix) * alpha;
				if(direction == 0) {
					constraint.bendDirection = frames[frames.length + (-1)] | 0;
				}
			}
			return;
		}
		var frame = spine_Animation.binarySearchWithStep(frames,time,3);
		var mix = frames[frame + (-2)];
		var frameTime = frames[frame];
		var percent = this.getCurvePercent(frame / 3 - 1 | 0,1 - (time - frameTime) / (frames[frame + (-3)] - frameTime));
		if(pose == 0) {
			constraint.mix = constraint.data.mix + (mix + (frames[frame + 1] - mix) * percent - constraint.data.mix) * alpha;
			constraint.bendDirection = direction == 1 ? constraint.data.bendDirection : frames[frame + (-1)] | 0;
		} else {
			constraint.mix += (mix + (frames[frame + 1] - mix) * percent - constraint.mix) * alpha;
			if(direction == 0) {
				constraint.bendDirection = frames[frame + (-1)] | 0;
			}
		}
	}
	,__class__: spine_IkConstraintTimeline
});
var spine_TransformConstraintTimeline = function(frameCount) {
	this.transformConstraintIndex = 0;
	spine_CurveTimeline.call(this,frameCount);
	var length = frameCount * 5;
	if(length == null) {
		length = 0;
	}
	var len = length | 0;
	var capacity = len != 0 ? len : 16;
	var this1 = [];
	var array = this1;
	if(length > 0) {
		var len1 = array.length;
		if(len1 > len) {
			array.splice(len,len - len1);
		} else if(len1 < len) {
			while(len1 < len) {
				array.push(0);
				++len1;
			}
		}
	}
	this.frames = array;
};
$hxClasses["spine.TransformConstraintTimeline"] = spine_TransformConstraintTimeline;
spine_TransformConstraintTimeline.__name__ = "spine.TransformConstraintTimeline";
spine_TransformConstraintTimeline.__super__ = spine_CurveTimeline;
spine_TransformConstraintTimeline.prototype = $extend(spine_CurveTimeline.prototype,{
	transformConstraintIndex: null
	,frames: null
	,getPropertyId: function() {
		return (10 << 24) + this.transformConstraintIndex;
	}
	,setTransformConstraintIndex: function(index) {
		if(index < 0) {
			throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("index must be >= 0."));
		}
		this.transformConstraintIndex = index;
	}
	,getTransformConstraintIndex: function() {
		return this.transformConstraintIndex;
	}
	,getFrames: function() {
		return this.frames;
	}
	,setFrame: function(frameIndex,time,rotateMix,translateMix,scaleMix,shearMix) {
		frameIndex *= 5;
		this.frames[frameIndex] = time;
		this.frames[frameIndex + 1] = rotateMix;
		this.frames[frameIndex + 2] = translateMix;
		this.frames[frameIndex + 3] = scaleMix;
		this.frames[frameIndex + 4] = shearMix;
	}
	,apply: function(skeleton,lastTime,time,events,alpha,pose,direction) {
		var constraint = skeleton.transformConstraints[this.transformConstraintIndex];
		var frames = this.frames;
		if(time < frames[0]) {
			var data = constraint.data;
			var _continueAfterSwitch8 = false;
			while(true) {
				var _switchCond8 = pose;
				if(_switchCond8 == 0) {
					constraint.rotateMix = data.rotateMix;
					constraint.translateMix = data.translateMix;
					constraint.scaleMix = data.scaleMix;
					constraint.shearMix = data.shearMix;
					return;
				} else if(_switchCond8 == 1) {
					constraint.rotateMix += (data.rotateMix - constraint.rotateMix) * alpha;
					constraint.translateMix += (data.translateMix - constraint.translateMix) * alpha;
					constraint.scaleMix += (data.scaleMix - constraint.scaleMix) * alpha;
					constraint.shearMix += (data.shearMix - constraint.shearMix) * alpha;
				}
				break;
			}
			return;
		}
		var rotate = 0;
		var translate = 0;
		var scale = 0;
		var shear = 0;
		if(time >= frames[frames.length - 5]) {
			var i = frames.length;
			rotate = frames[i + (-4)];
			translate = frames[i + (-3)];
			scale = frames[i + (-2)];
			shear = frames[i + (-1)];
		} else {
			var frame = spine_Animation.binarySearchWithStep(frames,time,5);
			rotate = frames[frame + (-4)];
			translate = frames[frame + (-3)];
			scale = frames[frame + (-2)];
			shear = frames[frame + (-1)];
			var frameTime = frames[frame];
			var percent = this.getCurvePercent(frame / 5 - 1 | 0,1 - (time - frameTime) / (frames[frame + (-5)] - frameTime));
			rotate += (frames[frame + 1] - rotate) * percent;
			translate += (frames[frame + 2] - translate) * percent;
			scale += (frames[frame + 3] - scale) * percent;
			shear += (frames[frame + 4] - shear) * percent;
		}
		if(pose == 0) {
			var data = constraint.data;
			constraint.rotateMix = data.rotateMix + (rotate - data.rotateMix) * alpha;
			constraint.translateMix = data.translateMix + (translate - data.translateMix) * alpha;
			constraint.scaleMix = data.scaleMix + (scale - data.scaleMix) * alpha;
			constraint.shearMix = data.shearMix + (shear - data.shearMix) * alpha;
		} else {
			constraint.rotateMix += (rotate - constraint.rotateMix) * alpha;
			constraint.translateMix += (translate - constraint.translateMix) * alpha;
			constraint.scaleMix += (scale - constraint.scaleMix) * alpha;
			constraint.shearMix += (shear - constraint.shearMix) * alpha;
		}
	}
	,__class__: spine_TransformConstraintTimeline
});
var spine_PathConstraintPositionTimeline = function(frameCount) {
	this.pathConstraintIndex = 0;
	spine_CurveTimeline.call(this,frameCount);
	var length = frameCount * 2;
	if(length == null) {
		length = 0;
	}
	var len = length | 0;
	var capacity = len != 0 ? len : 16;
	var this1 = [];
	var array = this1;
	if(length > 0) {
		var len1 = array.length;
		if(len1 > len) {
			array.splice(len,len - len1);
		} else if(len1 < len) {
			while(len1 < len) {
				array.push(0);
				++len1;
			}
		}
	}
	this.frames = array;
};
$hxClasses["spine.PathConstraintPositionTimeline"] = spine_PathConstraintPositionTimeline;
spine_PathConstraintPositionTimeline.__name__ = "spine.PathConstraintPositionTimeline";
spine_PathConstraintPositionTimeline.__super__ = spine_CurveTimeline;
spine_PathConstraintPositionTimeline.prototype = $extend(spine_CurveTimeline.prototype,{
	pathConstraintIndex: null
	,frames: null
	,getPropertyId: function() {
		return (11 << 24) + this.pathConstraintIndex;
	}
	,setPathConstraintIndex: function(index) {
		if(index < 0) {
			throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("index must be >= 0."));
		}
		this.pathConstraintIndex = index;
	}
	,getPathConstraintIndex: function() {
		return this.pathConstraintIndex;
	}
	,getFrames: function() {
		return this.frames;
	}
	,setFrame: function(frameIndex,time,position) {
		frameIndex *= 2;
		this.frames[frameIndex] = time;
		this.frames[frameIndex + 1] = position;
	}
	,apply: function(skeleton,lastTime,time,events,alpha,pose,direction) {
		var constraint = skeleton.pathConstraints[this.pathConstraintIndex];
		var frames = this.frames;
		if(time < frames[0]) {
			var _continueAfterSwitch9 = false;
			while(true) {
				var _switchCond9 = pose;
				if(_switchCond9 == 0) {
					constraint.position = constraint.data.position;
					return;
				} else if(_switchCond9 == 1) {
					constraint.position += (constraint.data.position - constraint.position) * alpha;
				}
				break;
			}
			return;
		}
		var position = 0;
		if(time >= frames[frames.length - 2]) {
			position = frames[frames.length + (-1)];
		} else {
			var frame = spine_Animation.binarySearchWithStep(frames,time,2);
			position = frames[frame + (-1)];
			var frameTime = frames[frame];
			var percent = this.getCurvePercent(frame / 2 - 1 | 0,1 - (time - frameTime) / (frames[frame + (-2)] - frameTime));
			position += (frames[frame + 1] - position) * percent;
		}
		if(pose == 0) {
			constraint.position = constraint.data.position + (position - constraint.data.position) * alpha;
		} else {
			constraint.position += (position - constraint.position) * alpha;
		}
	}
	,__class__: spine_PathConstraintPositionTimeline
});
var spine_PathConstraintSpacingTimeline = function(frameCount) {
	spine_PathConstraintPositionTimeline.call(this,frameCount);
};
$hxClasses["spine.PathConstraintSpacingTimeline"] = spine_PathConstraintSpacingTimeline;
spine_PathConstraintSpacingTimeline.__name__ = "spine.PathConstraintSpacingTimeline";
spine_PathConstraintSpacingTimeline.__super__ = spine_PathConstraintPositionTimeline;
spine_PathConstraintSpacingTimeline.prototype = $extend(spine_PathConstraintPositionTimeline.prototype,{
	getPropertyId: function() {
		return (12 << 24) + this.pathConstraintIndex;
	}
	,apply: function(skeleton,lastTime,time,events,alpha,pose,direction) {
		var constraint = skeleton.pathConstraints[this.pathConstraintIndex];
		var frames = this.frames;
		if(time < frames[0]) {
			var _continueAfterSwitch10 = false;
			while(true) {
				var _switchCond10 = pose;
				if(_switchCond10 == 0) {
					constraint.spacing = constraint.data.spacing;
					return;
				} else if(_switchCond10 == 1) {
					constraint.spacing += (constraint.data.spacing - constraint.spacing) * alpha;
				}
				break;
			}
			return;
		}
		var spacing = 0;
		if(time >= frames[frames.length - 2]) {
			spacing = frames[frames.length + (-1)];
		} else {
			var frame = spine_Animation.binarySearchWithStep(frames,time,2);
			spacing = frames[frame + (-1)];
			var frameTime = frames[frame];
			var percent = this.getCurvePercent(frame / 2 - 1 | 0,1 - (time - frameTime) / (frames[frame + (-2)] - frameTime));
			spacing += (frames[frame + 1] - spacing) * percent;
		}
		if(pose == 0) {
			constraint.spacing = constraint.data.spacing + (spacing - constraint.data.spacing) * alpha;
		} else {
			constraint.spacing += (spacing - constraint.spacing) * alpha;
		}
	}
	,__class__: spine_PathConstraintSpacingTimeline
});
var spine_PathConstraintMixTimeline = function(frameCount) {
	this.pathConstraintIndex = 0;
	spine_CurveTimeline.call(this,frameCount);
	var length = frameCount * 3;
	if(length == null) {
		length = 0;
	}
	var len = length | 0;
	var capacity = len != 0 ? len : 16;
	var this1 = [];
	var array = this1;
	if(length > 0) {
		var len1 = array.length;
		if(len1 > len) {
			array.splice(len,len - len1);
		} else if(len1 < len) {
			while(len1 < len) {
				array.push(0);
				++len1;
			}
		}
	}
	this.frames = array;
};
$hxClasses["spine.PathConstraintMixTimeline"] = spine_PathConstraintMixTimeline;
spine_PathConstraintMixTimeline.__name__ = "spine.PathConstraintMixTimeline";
spine_PathConstraintMixTimeline.__super__ = spine_CurveTimeline;
spine_PathConstraintMixTimeline.prototype = $extend(spine_CurveTimeline.prototype,{
	pathConstraintIndex: null
	,frames: null
	,getPropertyId: function() {
		return (13 << 24) + this.pathConstraintIndex;
	}
	,setPathConstraintIndex: function(index) {
		if(index < 0) {
			throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("index must be >= 0."));
		}
		this.pathConstraintIndex = index;
	}
	,getPathConstraintIndex: function() {
		return this.pathConstraintIndex;
	}
	,getFrames: function() {
		return this.frames;
	}
	,setFrame: function(frameIndex,time,rotateMix,translateMix) {
		frameIndex *= 3;
		this.frames[frameIndex] = time;
		this.frames[frameIndex + 1] = rotateMix;
		this.frames[frameIndex + 2] = translateMix;
	}
	,apply: function(skeleton,lastTime,time,events,alpha,pose,direction) {
		var constraint = skeleton.pathConstraints[this.pathConstraintIndex];
		var frames = this.frames;
		if(time < frames[0]) {
			var _continueAfterSwitch11 = false;
			while(true) {
				var _switchCond11 = pose;
				if(_switchCond11 == 0) {
					constraint.rotateMix = constraint.data.rotateMix;
					constraint.translateMix = constraint.data.translateMix;
					return;
				} else if(_switchCond11 == 1) {
					constraint.rotateMix += (constraint.data.rotateMix - constraint.rotateMix) * alpha;
					constraint.translateMix += (constraint.data.translateMix - constraint.translateMix) * alpha;
				}
				break;
			}
			return;
		}
		var rotate = 0;
		var translate = 0;
		if(time >= frames[frames.length - 3]) {
			rotate = frames[frames.length + (-2)];
			translate = frames[frames.length + (-1)];
		} else {
			var frame = spine_Animation.binarySearchWithStep(frames,time,3);
			rotate = frames[frame + (-2)];
			translate = frames[frame + (-1)];
			var frameTime = frames[frame];
			var percent = this.getCurvePercent(frame / 3 - 1 | 0,1 - (time - frameTime) / (frames[frame + (-3)] - frameTime));
			rotate += (frames[frame + 1] - rotate) * percent;
			translate += (frames[frame + 2] - translate) * percent;
		}
		if(pose == 0) {
			constraint.rotateMix = constraint.data.rotateMix + (rotate - constraint.data.rotateMix) * alpha;
			constraint.translateMix = constraint.data.translateMix + (translate - constraint.data.translateMix) * alpha;
		} else {
			constraint.rotateMix += (rotate - constraint.rotateMix) * alpha;
			constraint.translateMix += (translate - constraint.translateMix) * alpha;
		}
	}
	,__class__: spine_PathConstraintMixTimeline
});
var spine_MixPose_$enum = function() { };
$hxClasses["spine.MixPose_enum"] = spine_MixPose_$enum;
spine_MixPose_$enum.__name__ = "spine.MixPose_enum";
spine_MixPose_$enum.valueOf = function(value) {
	switch(value) {
	case "current":
		return 1;
	case "currentLayered":
		return 2;
	case "setup":
		return 0;
	default:
		return 0;
	}
};
var spine_MixDirection_$enum = function() { };
$hxClasses["spine.MixDirection_enum"] = spine_MixDirection_$enum;
spine_MixDirection_$enum.__name__ = "spine.MixDirection_enum";
spine_MixDirection_$enum.valueOf = function(value) {
	switch(value) {
	case "directionIn":
		return 0;
	case "directionOut":
		return 1;
	default:
		return 0;
	}
};
var spine_TimelineType_$enum = function() { };
$hxClasses["spine.TimelineType_enum"] = spine_TimelineType_$enum;
spine_TimelineType_$enum.__name__ = "spine.TimelineType_enum";
spine_TimelineType_$enum.valueOf = function(value) {
	switch(value) {
	case "attachment":
		return 4;
	case "color":
		return 5;
	case "deform":
		return 6;
	case "drawOrder":
		return 8;
	case "event":
		return 7;
	case "ikConstraint":
		return 9;
	case "pathConstraintMix":
		return 13;
	case "pathConstraintPosition":
		return 11;
	case "pathConstraintSpacing":
		return 12;
	case "rotate":
		return 0;
	case "scale":
		return 2;
	case "shear":
		return 3;
	case "transformConstraint":
		return 10;
	case "translate":
		return 1;
	case "twoColor":
		return 14;
	default:
		return 0;
	}
};
var spine_support_error_Error = function(message,id) {
	if(id == null) {
		id = 0;
	}
	if(message == null) {
		message = "";
	}
	this.message = message;
	this.errorID = id;
	this.name = "Error";
};
$hxClasses["spine.support.error.Error"] = spine_support_error_Error;
spine_support_error_Error.__name__ = "spine.support.error.Error";
spine_support_error_Error.prototype = {
	errorID: null
	,message: null
	,name: null
	,getStackTrace: function() {
		return haxe_CallStack.toString(haxe_CallStack.exceptionStack());
	}
	,toString: function() {
		if(this.message != null) {
			return this.message;
		} else {
			return "Error";
		}
	}
	,__class__: spine_support_error_Error
};
var spine_support_error_IllegalArgumentException = function(message) {
	if(message == null) {
		message = "";
	}
	spine_support_error_Error.call(this,message);
	this.name = "IllegalArgumentException";
};
$hxClasses["spine.support.error.IllegalArgumentException"] = spine_support_error_IllegalArgumentException;
spine_support_error_IllegalArgumentException.__name__ = "spine.support.error.IllegalArgumentException";
spine_support_error_IllegalArgumentException.__super__ = spine_support_error_Error;
spine_support_error_IllegalArgumentException.prototype = $extend(spine_support_error_Error.prototype,{
	__class__: spine_support_error_IllegalArgumentException
});
var spine_AnimationState = function(data) {
	this.trackEntryPool = new spine__$AnimationState_TrackEntryPool();
	this.timeScale = 1;
	this.animationsChanged = false;
	this.mixingTo = [];
	this.propertyIDs = new haxe_ds_IntMap();
	this.queue = null;
	this.listeners = [];
	this.events = [];
	this.tracks = [];
	this.queue = new spine_EventQueue();
	this.queue.AnimationState_this = this;
	if(data == null) {
		throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("data cannot be null."));
	}
	this.data = data;
};
$hxClasses["spine.AnimationState"] = spine_AnimationState;
spine_AnimationState.__name__ = "spine.AnimationState";
spine_AnimationState.prototype = {
	data: null
	,tracks: null
	,events: null
	,listeners: null
	,queue: null
	,propertyIDs: null
	,mixingTo: null
	,animationsChanged: null
	,timeScale: null
	,trackEntryPool: null
	,update: function(delta) {
		delta *= this.timeScale;
		var i = 0;
		var n = this.tracks.length;
		while(i < n) {
			var current = this.tracks[i];
			if(current == null) {
				++i;
				continue;
			}
			current.animationLast = current.nextAnimationLast;
			current.trackLast = current.nextTrackLast;
			var currentDelta = delta * current.timeScale;
			if(current.delay > 0) {
				current.delay -= currentDelta;
				if(current.delay > 0) {
					++i;
					continue;
				}
				currentDelta = -current.delay;
				current.delay = 0;
			}
			var next = current.next;
			if(next != null) {
				var nextTime = current.trackLast - next.delay;
				if(nextTime >= 0) {
					next.delay = 0;
					next.trackTime = nextTime + delta * next.timeScale;
					current.trackTime += currentDelta;
					var from;
					if(i < this.tracks.length) {
						from = this.tracks[i];
					} else {
						var this1 = this.tracks;
						var size = i + 1;
						var len = this1.length;
						if(len > size) {
							this1.splice(size,size - len);
						} else if(len < size) {
							this1[size - 1] = null;
						}
						from = null;
					}
					this.tracks[i] = next;
					if(from != null) {
						var _this = this.queue;
						_this.objects.push(1);
						_this.objects.push(from);
						next.mixingFrom = from;
						next.mixTime = 0;
						if(from.mixingFrom != null && from.mixDuration > 0) {
							next.interruptAlpha *= Math.min(1,from.mixTime / from.mixDuration | 0);
						}
						var this2 = from.timelinesRotation;
						this2.splice(0,this2.length);
					}
					var _this1 = this.queue;
					_this1.objects.push(0);
					_this1.objects.push(next);
					_this1.AnimationState_this.animationsChanged = true;
					while(next.mixingFrom != null) {
						next.mixTime += currentDelta;
						next = next.mixingFrom;
					}
					++i;
					continue;
				}
			} else if(current.trackLast >= current.trackEnd && current.mixingFrom == null) {
				this.tracks[i] = null;
				var _this2 = this.queue;
				_this2.objects.push(2);
				_this2.objects.push(current);
				_this2.AnimationState_this.animationsChanged = true;
				var next1 = current.next;
				while(next1 != null) {
					var _this3 = this.queue;
					_this3.objects.push(3);
					_this3.objects.push(next1);
					next1 = next1.next;
				}
				current.next = null;
				++i;
				continue;
			}
			var tmp;
			if(current.mixingFrom != null) {
				var from1 = current.mixingFrom;
				if(from1 == null) {
					tmp = true;
				} else {
					var from2 = from1.mixingFrom;
					var finished;
					if(from2 == null) {
						finished = true;
					} else {
						var finished1 = this.updateMixingFrom(from2,delta);
						from2.animationLast = from2.nextAnimationLast;
						from2.trackLast = from2.nextTrackLast;
						if(from1.mixTime > 0 && (from1.mixTime >= from1.mixDuration || from1.timeScale == 0)) {
							if(from2.totalAlpha == 0 || from1.mixDuration == 0) {
								from1.mixingFrom = from2.mixingFrom;
								from1.interruptAlpha = from2.interruptAlpha;
								var _this4 = this.queue;
								_this4.objects.push(2);
								_this4.objects.push(from2);
								_this4.AnimationState_this.animationsChanged = true;
							}
							finished = finished1;
						} else {
							from2.trackTime += delta * from2.timeScale;
							from1.mixTime += delta * from1.timeScale;
							finished = false;
						}
					}
					from1.animationLast = from1.nextAnimationLast;
					from1.trackLast = from1.nextTrackLast;
					if(current.mixTime > 0 && (current.mixTime >= current.mixDuration || current.timeScale == 0)) {
						if(from1.totalAlpha == 0 || current.mixDuration == 0) {
							current.mixingFrom = from1.mixingFrom;
							current.interruptAlpha = from1.interruptAlpha;
							var _this5 = this.queue;
							_this5.objects.push(2);
							_this5.objects.push(from1);
							_this5.AnimationState_this.animationsChanged = true;
						}
						tmp = finished;
					} else {
						from1.trackTime += delta * from1.timeScale;
						current.mixTime += delta * current.timeScale;
						tmp = false;
					}
				}
			} else {
				tmp = false;
			}
			if(tmp) {
				var from3 = current.mixingFrom;
				current.mixingFrom = null;
				while(from3 != null) {
					var _this6 = this.queue;
					_this6.objects.push(2);
					_this6.objects.push(from3);
					_this6.AnimationState_this.animationsChanged = true;
					from3 = from3.mixingFrom;
				}
			}
			current.trackTime += currentDelta;
			++i;
		}
		var _this = this.queue;
		if(!_this.drainDisabled) {
			_this.drainDisabled = true;
			var objects = _this.objects;
			var listeners = _this.AnimationState_this.listeners;
			var i = 0;
			while(i < objects.length) {
				var type = js_Boot.__cast(objects[i] , Int);
				var entry = js_Boot.__cast(objects[i + 1] , spine_TrackEntry);
				while(true) {
					var _switchCond1 = type;
					if(_switchCond1 == 0) {
						if(entry.listener != null) {
							entry.listener.start(entry);
						}
						var ii = 0;
						while(ii < listeners.length) {
							listeners[ii].start(entry);
							++ii;
						}
						break;
					} else if(_switchCond1 == 1) {
						if(entry.listener != null) {
							entry.listener.interrupt(entry);
						}
						var ii1 = 0;
						while(ii1 < listeners.length) {
							listeners[ii1].interrupt(entry);
							++ii1;
						}
						break;
					} else if(_switchCond1 == 2) {
						if(entry.listener != null) {
							entry.listener.end(entry);
						}
						var ii2 = 0;
						while(ii2 < listeners.length) {
							listeners[ii2].end(entry);
							++ii2;
						}
						if(entry.listener != null) {
							entry.listener.dispose(entry);
						}
						var ii3 = 0;
						while(ii3 < listeners.length) {
							listeners[ii3].dispose(entry);
							++ii3;
						}
						_this.AnimationState_this.trackEntryPool.free(entry);
						break;
					} else if(_switchCond1 == 3) {
						if(entry.listener != null) {
							entry.listener.dispose(entry);
						}
						var ii4 = 0;
						while(ii4 < listeners.length) {
							listeners[ii4].dispose(entry);
							++ii4;
						}
						_this.AnimationState_this.trackEntryPool.free(entry);
						break;
					} else if(_switchCond1 == 4) {
						if(entry.listener != null) {
							entry.listener.complete(entry);
						}
						var ii5 = 0;
						while(ii5 < listeners.length) {
							listeners[ii5].complete(entry);
							++ii5;
						}
						break;
					} else if(_switchCond1 == 5) {
						var event = js_Boot.__cast(objects[i++ + 2] , spine_Event);
						if(entry.listener != null) {
							entry.listener.event(entry,event);
						}
						var ii6 = 0;
						while(ii6 < listeners.length) {
							listeners[ii6].event(entry,event);
							++ii6;
						}
						break;
					}
					break;
				}
				i += 2;
			}
			var this1 = _this.objects;
			this1.splice(0,this1.length);
			_this.drainDisabled = false;
		}
	}
	,updateMixingFrom: function(to,delta) {
		var from = to.mixingFrom;
		if(from == null) {
			return true;
		}
		var finished = this.updateMixingFrom(from,delta);
		from.animationLast = from.nextAnimationLast;
		from.trackLast = from.nextTrackLast;
		if(to.mixTime > 0 && (to.mixTime >= to.mixDuration || to.timeScale == 0)) {
			if(from.totalAlpha == 0 || to.mixDuration == 0) {
				to.mixingFrom = from.mixingFrom;
				to.interruptAlpha = from.interruptAlpha;
				var _this = this.queue;
				_this.objects.push(2);
				_this.objects.push(from);
				_this.AnimationState_this.animationsChanged = true;
			}
			return finished;
		}
		from.trackTime += delta * from.timeScale;
		to.mixTime += delta * to.timeScale;
		return false;
	}
	,apply: function(skeleton) {
		if(skeleton == null) {
			throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("skeleton cannot be null."));
		}
		if(this.animationsChanged) {
			this.animationsChanged = false;
			var propertyIDs = this.propertyIDs;
			var keys = [];
			var key = propertyIDs.keys();
			while(key.hasNext()) {
				var key1 = key.next();
				keys.push(key1);
			}
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				propertyIDs.remove(key);
			}
			var mixingTo = this.mixingTo;
			var i = 0;
			var n = this.tracks.length;
			while(i < n) {
				var entry = this.tracks[i];
				if(entry != null) {
					var to = null;
					if(to != null) {
						mixingTo.push(to);
					}
					var lastEntry;
					if(entry.mixingFrom != null) {
						var _this = entry.mixingFrom;
						if(entry != null) {
							mixingTo.push(entry);
						}
						var lastEntry1 = _this.mixingFrom != null ? _this.mixingFrom.setTimelineData(_this,mixingTo,propertyIDs) : _this;
						if(entry != null) {
							mixingTo.pop();
						}
						var mixingTo1 = mixingTo;
						var mixingToLast = mixingTo.length - 1;
						var timelines = _this.animation.timelines;
						var timelinesCount = _this.animation.timelines.length;
						var this1 = _this.timelineData;
						var len = this1.length;
						if(len > timelinesCount) {
							this1.splice(timelinesCount,timelinesCount - len);
						} else if(len < timelinesCount) {
							while(len < timelinesCount) {
								this1.push(0);
								++len;
							}
						}
						var timelineData = this1;
						var this2 = _this.timelineDipMix;
						this2.splice(0,this2.length);
						var this3 = _this.timelineDipMix;
						var len1 = this3.length;
						if(len1 > timelinesCount) {
							this3.splice(timelinesCount,timelinesCount - len1);
						} else if(len1 < timelinesCount) {
							this3[timelinesCount - 1] = null;
						}
						var timelineDipMix = this3;
						var _gotoLabel_outer;
						while(true) {
							_gotoLabel_outer = 0;
							var i1 = 0;
							while(i1 < timelinesCount) {
								var id = (js_Boot.__cast(timelines[i1] , spine_Timeline)).getPropertyId();
								var lastEntry2;
								if(propertyIDs.h.hasOwnProperty(id)) {
									lastEntry2 = false;
								} else {
									propertyIDs.h[id] = true;
									lastEntry2 = true;
								}
								if(!lastEntry2) {
									timelineData[i1] = 0;
								} else if(entry == null || !entry.hasTimeline(id)) {
									timelineData[i1] = 1;
								} else {
									var ii = mixingToLast;
									while(ii >= 0) {
										var entry1 = js_Boot.__cast(mixingTo1[ii] , spine_TrackEntry);
										if(!entry1.hasTimeline(id)) {
											if(entry1.mixDuration > 0) {
												timelineData[i1] = 3;
												timelineDipMix[i1] = entry1;
												--ii;
												_gotoLabel_outer = 2;
												break;
											}
											break;
										}
										--ii;
									}
									if(_gotoLabel_outer == 2) {
										_gotoLabel_outer = 0;
										++i1;
										continue;
									}
									if(_gotoLabel_outer >= 1) {
										break;
									}
									timelineData[i1] = 2;
								}
								++i1;
							}
							if(_gotoLabel_outer == 0) {
								break;
							}
						}
						lastEntry = lastEntry1;
					} else {
						lastEntry = entry;
					}
					if(to != null) {
						mixingTo.pop();
					}
					var mixingTo2 = mixingTo;
					var mixingToLast1 = mixingTo.length - 1;
					var timelines1 = entry.animation.timelines;
					var timelinesCount1 = entry.animation.timelines.length;
					var this4 = entry.timelineData;
					var len2 = this4.length;
					if(len2 > timelinesCount1) {
						this4.splice(timelinesCount1,timelinesCount1 - len2);
					} else if(len2 < timelinesCount1) {
						while(len2 < timelinesCount1) {
							this4.push(0);
							++len2;
						}
					}
					var timelineData1 = this4;
					var this5 = entry.timelineDipMix;
					this5.splice(0,this5.length);
					var this6 = entry.timelineDipMix;
					var len3 = this6.length;
					if(len3 > timelinesCount1) {
						this6.splice(timelinesCount1,timelinesCount1 - len3);
					} else if(len3 < timelinesCount1) {
						this6[timelinesCount1 - 1] = null;
					}
					var timelineDipMix1 = this6;
					var _gotoLabel_outer1;
					while(true) {
						_gotoLabel_outer1 = 0;
						var i2 = 0;
						while(i2 < timelinesCount1) {
							var id1 = (js_Boot.__cast(timelines1[i2] , spine_Timeline)).getPropertyId();
							var tmp;
							if(propertyIDs.h.hasOwnProperty(id1)) {
								tmp = false;
							} else {
								propertyIDs.h[id1] = true;
								tmp = true;
							}
							if(!tmp) {
								timelineData1[i2] = 0;
							} else if(to == null || !to.hasTimeline(id1)) {
								timelineData1[i2] = 1;
							} else {
								var ii1 = mixingToLast1;
								while(ii1 >= 0) {
									var entry2 = js_Boot.__cast(mixingTo2[ii1] , spine_TrackEntry);
									if(!entry2.hasTimeline(id1)) {
										if(entry2.mixDuration > 0) {
											timelineData1[i2] = 3;
											timelineDipMix1[i2] = entry2;
											--ii1;
											_gotoLabel_outer1 = 2;
											break;
										}
										break;
									}
									--ii1;
								}
								if(_gotoLabel_outer1 == 2) {
									_gotoLabel_outer1 = 0;
									++i2;
									continue;
								}
								if(_gotoLabel_outer1 >= 1) {
									break;
								}
								timelineData1[i2] = 2;
							}
							++i2;
						}
						if(_gotoLabel_outer1 == 0) {
							break;
						}
					}
				}
				++i;
			}
		}
		var events = this.events;
		var applied = false;
		var i = 0;
		var n = this.tracks.length;
		while(i < n) {
			var current = this.tracks[i];
			if(current == null || current.delay > 0) {
				++i;
				continue;
			}
			applied = true;
			var currentPose = i == 0 ? 1 : 2;
			var mix = current.alpha;
			if(current.mixingFrom != null) {
				mix *= this.applyMixingFrom(current,skeleton,currentPose);
			} else if(current.trackTime >= current.trackEnd && current.next == null) {
				mix = 0;
			}
			var animationLast = current.animationLast;
			var animationTime;
			if(current.loop) {
				var duration = current.animationEnd - current.animationStart;
				animationTime = duration == 0 ? current.animationStart : current.trackTime % duration + current.animationStart;
			} else {
				animationTime = Math.min(current.trackTime + current.animationStart,current.animationEnd);
			}
			var timelineCount = current.animation.timelines.length;
			var timelines = current.animation.timelines;
			if(mix == 1) {
				var ii = 0;
				while(ii < timelineCount) {
					(js_Boot.__cast(timelines[ii] , spine_Timeline)).apply(skeleton,animationLast,animationTime,events,1,0,0);
					++ii;
				}
			} else {
				var timelineData = current.timelineData;
				var firstFrame = current.timelinesRotation.length == 0;
				if(firstFrame) {
					var this1 = current.timelinesRotation;
					var size = timelineCount << 1;
					var len = this1.length;
					if(len > size) {
						this1.splice(size,size - len);
					} else if(len < size) {
						while(len < size) {
							this1.push(0);
							++len;
						}
					}
				}
				var timelinesRotation = current.timelinesRotation;
				var ii1 = 0;
				while(ii1 < timelineCount) {
					var timeline = js_Boot.__cast(timelines[ii1] , spine_Timeline);
					var pose = timelineData[ii1] >= 1 ? 0 : currentPose;
					if(((timeline) instanceof spine_RotateTimeline)) {
						var i1 = ii1 << 1;
						if(firstFrame) {
							timelinesRotation[i1] = 0;
						}
						if(mix == 1) {
							timeline.apply(skeleton,0,animationTime,null,1,pose,0);
						} else {
							var rotateTimeline = js_Boot.__cast(timeline , spine_RotateTimeline);
							var bone = skeleton.bones[rotateTimeline.boneIndex];
							var frames = rotateTimeline.frames;
							if(animationTime < frames[0]) {
								if(pose == 0) {
									bone.rotation = bone.data.rotation;
								}
							} else {
								var r2 = 0;
								if(animationTime >= frames[frames.length - 2]) {
									r2 = bone.data.rotation + frames[frames.length + (-1)];
								} else {
									var frame = spine_Animation.binarySearchWithStep(frames,animationTime,2);
									var prevRotation = frames[frame + (-1)];
									var frameTime = frames[frame];
									var percent = rotateTimeline.getCurvePercent((frame >> 1) - 1,1 - (animationTime - frameTime) / (frames[frame + (-2)] - frameTime));
									r2 = frames[frame + 1] - prevRotation;
									r2 -= (16384 - (16384.499999999996 - r2 / 360 | 0)) * 360;
									r2 = prevRotation + r2 * percent + bone.data.rotation;
									r2 -= (16384 - (16384.499999999996 - r2 / 360 | 0)) * 360;
								}
								var r1 = pose == 0 ? bone.data.rotation : bone.rotation;
								var total = 0;
								var diff = r2 - r1;
								if(diff == 0) {
									total = timelinesRotation[i1];
								} else {
									diff -= (16384 - (16384.499999999996 - diff / 360 | 0)) * 360;
									var lastTotal = 0;
									var lastDiff = 0;
									if(firstFrame) {
										lastTotal = 0;
										lastDiff = diff;
									} else {
										lastTotal = timelinesRotation[i1];
										lastDiff = timelinesRotation[i1 + 1];
									}
									var current1 = diff > 0;
									var dir = lastTotal >= 0;
									if((lastDiff > 0 ? 1 : lastDiff < 0 ? -1 : 0) != (diff > 0 ? 1 : diff < 0 ? -1 : 0) && Math.abs(lastDiff) <= 90) {
										if(Math.abs(lastTotal) > 180) {
											lastTotal += 360 * (lastTotal > 0 ? 1 : lastTotal < 0 ? -1 : 0);
										}
										dir = current1;
									}
									total = diff + lastTotal - lastTotal % 360;
									if(dir != current1) {
										total += 360 * (lastTotal > 0 ? 1 : lastTotal < 0 ? -1 : 0);
									}
									timelinesRotation[i1] = total;
								}
								timelinesRotation[i1 + 1] = diff;
								r1 += total * mix;
								bone.rotation = r1 - (16384 - (16384.499999999996 - r1 / 360 | 0)) * 360;
							}
						}
					} else {
						timeline.apply(skeleton,animationLast,animationTime,events,mix,pose,0);
					}
					++ii1;
				}
			}
			var animationStart = current.animationStart;
			var animationEnd = current.animationEnd;
			var duration1 = animationEnd - animationStart;
			var trackLastWrapped = current.trackLast % duration1;
			var events1 = this.events;
			var i2 = 0;
			var n1 = events1.length;
			while(i2 < n1) {
				var event = events1[i2];
				if(event.time < trackLastWrapped) {
					break;
				}
				if(event.time > animationEnd) {
					++i2;
					continue;
				}
				var _this = this.queue;
				_this.objects.push(5);
				_this.objects.push(current);
				_this.objects.push(event);
				++i2;
			}
			var complete = false;
			if(current.loop) {
				complete = duration1 == 0 || trackLastWrapped > current.trackTime % duration1;
			} else {
				complete = animationTime >= animationEnd && current.animationLast < animationEnd;
			}
			if(complete) {
				var _this1 = this.queue;
				_this1.objects.push(4);
				_this1.objects.push(current);
			}
			while(i2 < n1) {
				var event1 = events1[i2];
				if(event1.time < animationStart) {
					++i2;
					continue;
				}
				var _this2 = this.queue;
				_this2.objects.push(5);
				_this2.objects.push(current);
				_this2.objects.push(events1[i2]);
				++i2;
			}
			events.splice(0,events.length);
			current.nextAnimationLast = animationTime;
			current.nextTrackLast = current.trackTime;
			++i;
		}
		var _this = this.queue;
		if(!_this.drainDisabled) {
			_this.drainDisabled = true;
			var objects = _this.objects;
			var listeners = _this.AnimationState_this.listeners;
			var i = 0;
			while(i < objects.length) {
				var type = js_Boot.__cast(objects[i] , Int);
				var entry = js_Boot.__cast(objects[i + 1] , spine_TrackEntry);
				while(true) {
					var _switchCond1 = type;
					if(_switchCond1 == 0) {
						if(entry.listener != null) {
							entry.listener.start(entry);
						}
						var ii = 0;
						while(ii < listeners.length) {
							listeners[ii].start(entry);
							++ii;
						}
						break;
					} else if(_switchCond1 == 1) {
						if(entry.listener != null) {
							entry.listener.interrupt(entry);
						}
						var ii1 = 0;
						while(ii1 < listeners.length) {
							listeners[ii1].interrupt(entry);
							++ii1;
						}
						break;
					} else if(_switchCond1 == 2) {
						if(entry.listener != null) {
							entry.listener.end(entry);
						}
						var ii2 = 0;
						while(ii2 < listeners.length) {
							listeners[ii2].end(entry);
							++ii2;
						}
						if(entry.listener != null) {
							entry.listener.dispose(entry);
						}
						var ii3 = 0;
						while(ii3 < listeners.length) {
							listeners[ii3].dispose(entry);
							++ii3;
						}
						_this.AnimationState_this.trackEntryPool.free(entry);
						break;
					} else if(_switchCond1 == 3) {
						if(entry.listener != null) {
							entry.listener.dispose(entry);
						}
						var ii4 = 0;
						while(ii4 < listeners.length) {
							listeners[ii4].dispose(entry);
							++ii4;
						}
						_this.AnimationState_this.trackEntryPool.free(entry);
						break;
					} else if(_switchCond1 == 4) {
						if(entry.listener != null) {
							entry.listener.complete(entry);
						}
						var ii5 = 0;
						while(ii5 < listeners.length) {
							listeners[ii5].complete(entry);
							++ii5;
						}
						break;
					} else if(_switchCond1 == 5) {
						var event = js_Boot.__cast(objects[i++ + 2] , spine_Event);
						if(entry.listener != null) {
							entry.listener.event(entry,event);
						}
						var ii6 = 0;
						while(ii6 < listeners.length) {
							listeners[ii6].event(entry,event);
							++ii6;
						}
						break;
					}
					break;
				}
				i += 2;
			}
			var this1 = _this.objects;
			this1.splice(0,this1.length);
			_this.drainDisabled = false;
		}
		return applied;
	}
	,applyMixingFrom: function(to,skeleton,currentPose) {
		var from = to.mixingFrom;
		if(from.mixingFrom != null) {
			this.applyMixingFrom(from,skeleton,currentPose);
		}
		var mix = 0;
		if(to.mixDuration == 0) {
			mix = 1;
			currentPose = 0;
		} else {
			mix = to.mixTime / to.mixDuration;
			if(mix > 1) {
				mix = 1;
			}
		}
		var events = mix < from.eventThreshold ? this.events : null;
		var attachments = mix < from.attachmentThreshold;
		var drawOrder = mix < from.drawOrderThreshold;
		var animationLast = from.animationLast;
		var animationTime;
		if(from.loop) {
			var duration = from.animationEnd - from.animationStart;
			animationTime = duration == 0 ? from.animationStart : from.trackTime % duration + from.animationStart;
		} else {
			animationTime = Math.min(from.trackTime + from.animationStart,from.animationEnd);
		}
		var timelineCount = from.animation.timelines.length;
		var timelines = from.animation.timelines;
		var timelineData = from.timelineData;
		var timelineDipMix = from.timelineDipMix;
		var firstFrame = from.timelinesRotation.length == 0;
		if(firstFrame) {
			var this1 = from.timelinesRotation;
			var size = timelineCount << 1;
			var len = this1.length;
			if(len > size) {
				this1.splice(size,size - len);
			} else if(len < size) {
				while(len < size) {
					this1.push(0);
					++len;
				}
			}
		}
		var timelinesRotation = from.timelinesRotation;
		var pose = 0;
		var alphaDip = from.alpha * to.interruptAlpha;
		var alphaMix = alphaDip * (1 - mix);
		var alpha = 0;
		from.totalAlpha = 0;
		var i = 0;
		while(i < timelineCount) {
			var timeline = js_Boot.__cast(timelines[i] , spine_Timeline);
			var _continueAfterSwitch0 = false;
			while(true) {
				var _switchCond0 = timelineData[i];
				if(_switchCond0 == 0) {
					if(!attachments && ((timeline) instanceof spine_AttachmentTimeline)) {
						_continueAfterSwitch0 = true;
						break;
					}
					if(!drawOrder && ((timeline) instanceof spine_DrawOrderTimeline)) {
						_continueAfterSwitch0 = true;
						break;
					}
					pose = currentPose;
					alpha = alphaMix;
					break;
				} else if(_switchCond0 == 1) {
					pose = 0;
					alpha = alphaMix;
					break;
				} else if(_switchCond0 == 2) {
					pose = 0;
					alpha = alphaDip;
					break;
				} else {
					pose = 0;
					var dipMix = js_Boot.__cast(timelineDipMix[i] , spine_TrackEntry);
					alpha = alphaDip * Math.max(0,1 - dipMix.mixTime / dipMix.mixDuration | 0);
				}
				break;
			}
			if(_continueAfterSwitch0) {
				++i;
				continue;
			}
			from.totalAlpha += alpha;
			if(((timeline) instanceof spine_RotateTimeline)) {
				var i1 = i << 1;
				if(firstFrame) {
					timelinesRotation[i1] = 0;
				}
				if(alpha == 1) {
					timeline.apply(skeleton,0,animationTime,null,1,pose,0);
				} else {
					var rotateTimeline = js_Boot.__cast(timeline , spine_RotateTimeline);
					var bone = skeleton.bones[rotateTimeline.boneIndex];
					var frames = rotateTimeline.frames;
					if(animationTime < frames[0]) {
						if(pose == 0) {
							bone.rotation = bone.data.rotation;
						}
					} else {
						var r2 = 0;
						if(animationTime >= frames[frames.length - 2]) {
							r2 = bone.data.rotation + frames[frames.length + (-1)];
						} else {
							var frame = spine_Animation.binarySearchWithStep(frames,animationTime,2);
							var prevRotation = frames[frame + (-1)];
							var frameTime = frames[frame];
							var percent = rotateTimeline.getCurvePercent((frame >> 1) - 1,1 - (animationTime - frameTime) / (frames[frame + (-2)] - frameTime));
							r2 = frames[frame + 1] - prevRotation;
							r2 -= (16384 - (16384.499999999996 - r2 / 360 | 0)) * 360;
							r2 = prevRotation + r2 * percent + bone.data.rotation;
							r2 -= (16384 - (16384.499999999996 - r2 / 360 | 0)) * 360;
						}
						var r1 = pose == 0 ? bone.data.rotation : bone.rotation;
						var total = 0;
						var diff = r2 - r1;
						if(diff == 0) {
							total = timelinesRotation[i1];
						} else {
							diff -= (16384 - (16384.499999999996 - diff / 360 | 0)) * 360;
							var lastTotal = 0;
							var lastDiff = 0;
							if(firstFrame) {
								lastTotal = 0;
								lastDiff = diff;
							} else {
								lastTotal = timelinesRotation[i1];
								lastDiff = timelinesRotation[i1 + 1];
							}
							var current = diff > 0;
							var dir = lastTotal >= 0;
							if((lastDiff > 0 ? 1 : lastDiff < 0 ? -1 : 0) != (diff > 0 ? 1 : diff < 0 ? -1 : 0) && Math.abs(lastDiff) <= 90) {
								if(Math.abs(lastTotal) > 180) {
									lastTotal += 360 * (lastTotal > 0 ? 1 : lastTotal < 0 ? -1 : 0);
								}
								dir = current;
							}
							total = diff + lastTotal - lastTotal % 360;
							if(dir != current) {
								total += 360 * (lastTotal > 0 ? 1 : lastTotal < 0 ? -1 : 0);
							}
							timelinesRotation[i1] = total;
						}
						timelinesRotation[i1 + 1] = diff;
						r1 += total * alpha;
						bone.rotation = r1 - (16384 - (16384.499999999996 - r1 / 360 | 0)) * 360;
					}
				}
			} else {
				timeline.apply(skeleton,animationLast,animationTime,events,alpha,pose,1);
			}
			++i;
		}
		if(to.mixDuration > 0) {
			var animationStart = from.animationStart;
			var animationEnd = from.animationEnd;
			var duration = animationEnd - animationStart;
			var trackLastWrapped = from.trackLast % duration;
			var events = this.events;
			var i = 0;
			var n = events.length;
			while(i < n) {
				var event = events[i];
				if(event.time < trackLastWrapped) {
					break;
				}
				if(event.time > animationEnd) {
					++i;
					continue;
				}
				var _this = this.queue;
				_this.objects.push(5);
				_this.objects.push(from);
				_this.objects.push(event);
				++i;
			}
			var complete = false;
			if(from.loop) {
				complete = duration == 0 || trackLastWrapped > from.trackTime % duration;
			} else {
				complete = animationTime >= animationEnd && from.animationLast < animationEnd;
			}
			if(complete) {
				var _this = this.queue;
				_this.objects.push(4);
				_this.objects.push(from);
			}
			while(i < n) {
				var event = events[i];
				if(event.time < animationStart) {
					++i;
					continue;
				}
				var _this = this.queue;
				_this.objects.push(5);
				_this.objects.push(from);
				_this.objects.push(events[i]);
				++i;
			}
		}
		var this1 = this.events;
		this1.splice(0,this1.length);
		from.nextAnimationLast = animationTime;
		from.nextTrackLast = from.trackTime;
		return mix;
	}
	,applyRotateTimeline: function(timeline,skeleton,time,alpha,pose,timelinesRotation,i,firstFrame) {
		if(firstFrame) {
			timelinesRotation[i] = 0;
		}
		if(alpha == 1) {
			timeline.apply(skeleton,0,time,null,1,pose,0);
			return;
		}
		var rotateTimeline = js_Boot.__cast(timeline , spine_RotateTimeline);
		var bone = skeleton.bones[rotateTimeline.boneIndex];
		var frames = rotateTimeline.frames;
		if(time < frames[0]) {
			if(pose == 0) {
				bone.rotation = bone.data.rotation;
			}
			return;
		}
		var r2 = 0;
		if(time >= frames[frames.length - 2]) {
			r2 = bone.data.rotation + frames[frames.length + (-1)];
		} else {
			var frame = spine_Animation.binarySearchWithStep(frames,time,2);
			var prevRotation = frames[frame + (-1)];
			var frameTime = frames[frame];
			var percent = rotateTimeline.getCurvePercent((frame >> 1) - 1,1 - (time - frameTime) / (frames[frame + (-2)] - frameTime));
			r2 = frames[frame + 1] - prevRotation;
			r2 -= (16384 - (16384.499999999996 - r2 / 360 | 0)) * 360;
			r2 = prevRotation + r2 * percent + bone.data.rotation;
			r2 -= (16384 - (16384.499999999996 - r2 / 360 | 0)) * 360;
		}
		var r1 = pose == 0 ? bone.data.rotation : bone.rotation;
		var total = 0;
		var diff = r2 - r1;
		if(diff == 0) {
			total = timelinesRotation[i];
		} else {
			diff -= (16384 - (16384.499999999996 - diff / 360 | 0)) * 360;
			var lastTotal = 0;
			var lastDiff = 0;
			if(firstFrame) {
				lastTotal = 0;
				lastDiff = diff;
			} else {
				lastTotal = timelinesRotation[i];
				lastDiff = timelinesRotation[i + 1];
			}
			var current = diff > 0;
			var dir = lastTotal >= 0;
			if((lastDiff > 0 ? 1 : lastDiff < 0 ? -1 : 0) != (diff > 0 ? 1 : diff < 0 ? -1 : 0) && Math.abs(lastDiff) <= 90) {
				if(Math.abs(lastTotal) > 180) {
					lastTotal += 360 * (lastTotal > 0 ? 1 : lastTotal < 0 ? -1 : 0);
				}
				dir = current;
			}
			total = diff + lastTotal - lastTotal % 360;
			if(dir != current) {
				total += 360 * (lastTotal > 0 ? 1 : lastTotal < 0 ? -1 : 0);
			}
			timelinesRotation[i] = total;
		}
		timelinesRotation[i + 1] = diff;
		r1 += total * alpha;
		bone.rotation = r1 - (16384 - (16384.499999999996 - r1 / 360 | 0)) * 360;
	}
	,queueEvents: function(entry,animationTime) {
		var animationStart = entry.animationStart;
		var animationEnd = entry.animationEnd;
		var duration = animationEnd - animationStart;
		var trackLastWrapped = entry.trackLast % duration;
		var events = this.events;
		var i = 0;
		var n = events.length;
		while(i < n) {
			var event = events[i];
			if(event.time < trackLastWrapped) {
				break;
			}
			if(event.time > animationEnd) {
				++i;
				continue;
			}
			var _this = this.queue;
			_this.objects.push(5);
			_this.objects.push(entry);
			_this.objects.push(event);
			++i;
		}
		var complete = false;
		if(entry.loop) {
			complete = duration == 0 || trackLastWrapped > entry.trackTime % duration;
		} else {
			complete = animationTime >= animationEnd && entry.animationLast < animationEnd;
		}
		if(complete) {
			var _this = this.queue;
			_this.objects.push(4);
			_this.objects.push(entry);
		}
		while(i < n) {
			var event = events[i];
			if(event.time < animationStart) {
				++i;
				continue;
			}
			var _this = this.queue;
			_this.objects.push(5);
			_this.objects.push(entry);
			_this.objects.push(events[i]);
			++i;
		}
	}
	,clearTracks: function() {
		var oldDrainDisabled = this.queue.drainDisabled;
		this.queue.drainDisabled = true;
		var i = 0;
		var n = this.tracks.length;
		while(i < n) {
			if(i < this.tracks.length) {
				var current = this.tracks[i];
				if(current != null) {
					var _this = this.queue;
					_this.objects.push(2);
					_this.objects.push(current);
					_this.AnimationState_this.animationsChanged = true;
					var next = current.next;
					while(next != null) {
						var _this1 = this.queue;
						_this1.objects.push(3);
						_this1.objects.push(next);
						next = next.next;
					}
					current.next = null;
					var entry = current;
					while(true) {
						var from = entry.mixingFrom;
						if(from == null) {
							break;
						}
						var _this2 = this.queue;
						_this2.objects.push(2);
						_this2.objects.push(from);
						_this2.AnimationState_this.animationsChanged = true;
						entry.mixingFrom = null;
						entry = from;
					}
					this.tracks[current.trackIndex] = null;
					var _this3 = this.queue;
					if(!_this3.drainDisabled) {
						_this3.drainDisabled = true;
						var objects = _this3.objects;
						var listeners = _this3.AnimationState_this.listeners;
						var i1 = 0;
						while(i1 < objects.length) {
							var type = js_Boot.__cast(objects[i1] , Int);
							var entry1 = js_Boot.__cast(objects[i1 + 1] , spine_TrackEntry);
							while(true) {
								var _switchCond1 = type;
								if(_switchCond1 == 0) {
									if(entry1.listener != null) {
										entry1.listener.start(entry1);
									}
									var ii = 0;
									while(ii < listeners.length) {
										listeners[ii].start(entry1);
										++ii;
									}
									break;
								} else if(_switchCond1 == 1) {
									if(entry1.listener != null) {
										entry1.listener.interrupt(entry1);
									}
									var ii1 = 0;
									while(ii1 < listeners.length) {
										listeners[ii1].interrupt(entry1);
										++ii1;
									}
									break;
								} else if(_switchCond1 == 2) {
									if(entry1.listener != null) {
										entry1.listener.end(entry1);
									}
									var ii2 = 0;
									while(ii2 < listeners.length) {
										listeners[ii2].end(entry1);
										++ii2;
									}
									if(entry1.listener != null) {
										entry1.listener.dispose(entry1);
									}
									var ii3 = 0;
									while(ii3 < listeners.length) {
										listeners[ii3].dispose(entry1);
										++ii3;
									}
									_this3.AnimationState_this.trackEntryPool.free(entry1);
									break;
								} else if(_switchCond1 == 3) {
									if(entry1.listener != null) {
										entry1.listener.dispose(entry1);
									}
									var ii4 = 0;
									while(ii4 < listeners.length) {
										listeners[ii4].dispose(entry1);
										++ii4;
									}
									_this3.AnimationState_this.trackEntryPool.free(entry1);
									break;
								} else if(_switchCond1 == 4) {
									if(entry1.listener != null) {
										entry1.listener.complete(entry1);
									}
									var ii5 = 0;
									while(ii5 < listeners.length) {
										listeners[ii5].complete(entry1);
										++ii5;
									}
									break;
								} else if(_switchCond1 == 5) {
									var event = js_Boot.__cast(objects[i1++ + 2] , spine_Event);
									if(entry1.listener != null) {
										entry1.listener.event(entry1,event);
									}
									var ii6 = 0;
									while(ii6 < listeners.length) {
										listeners[ii6].event(entry1,event);
										++ii6;
									}
									break;
								}
								break;
							}
							i1 += 2;
						}
						var this1 = _this3.objects;
						this1.splice(0,this1.length);
						_this3.drainDisabled = false;
					}
				}
			}
			++i;
		}
		var this1 = this.tracks;
		this1.splice(0,this1.length);
		this.queue.drainDisabled = oldDrainDisabled;
		var _this = this.queue;
		if(!_this.drainDisabled) {
			_this.drainDisabled = true;
			var objects = _this.objects;
			var listeners = _this.AnimationState_this.listeners;
			var i = 0;
			while(i < objects.length) {
				var type = js_Boot.__cast(objects[i] , Int);
				var entry = js_Boot.__cast(objects[i + 1] , spine_TrackEntry);
				while(true) {
					var _switchCond1 = type;
					if(_switchCond1 == 0) {
						if(entry.listener != null) {
							entry.listener.start(entry);
						}
						var ii = 0;
						while(ii < listeners.length) {
							listeners[ii].start(entry);
							++ii;
						}
						break;
					} else if(_switchCond1 == 1) {
						if(entry.listener != null) {
							entry.listener.interrupt(entry);
						}
						var ii1 = 0;
						while(ii1 < listeners.length) {
							listeners[ii1].interrupt(entry);
							++ii1;
						}
						break;
					} else if(_switchCond1 == 2) {
						if(entry.listener != null) {
							entry.listener.end(entry);
						}
						var ii2 = 0;
						while(ii2 < listeners.length) {
							listeners[ii2].end(entry);
							++ii2;
						}
						if(entry.listener != null) {
							entry.listener.dispose(entry);
						}
						var ii3 = 0;
						while(ii3 < listeners.length) {
							listeners[ii3].dispose(entry);
							++ii3;
						}
						_this.AnimationState_this.trackEntryPool.free(entry);
						break;
					} else if(_switchCond1 == 3) {
						if(entry.listener != null) {
							entry.listener.dispose(entry);
						}
						var ii4 = 0;
						while(ii4 < listeners.length) {
							listeners[ii4].dispose(entry);
							++ii4;
						}
						_this.AnimationState_this.trackEntryPool.free(entry);
						break;
					} else if(_switchCond1 == 4) {
						if(entry.listener != null) {
							entry.listener.complete(entry);
						}
						var ii5 = 0;
						while(ii5 < listeners.length) {
							listeners[ii5].complete(entry);
							++ii5;
						}
						break;
					} else if(_switchCond1 == 5) {
						var event = js_Boot.__cast(objects[i++ + 2] , spine_Event);
						if(entry.listener != null) {
							entry.listener.event(entry,event);
						}
						var ii6 = 0;
						while(ii6 < listeners.length) {
							listeners[ii6].event(entry,event);
							++ii6;
						}
						break;
					}
					break;
				}
				i += 2;
			}
			var this1 = _this.objects;
			this1.splice(0,this1.length);
			_this.drainDisabled = false;
		}
	}
	,clearTrack: function(trackIndex) {
		if(trackIndex >= this.tracks.length) {
			return;
		}
		var current = this.tracks[trackIndex];
		if(current == null) {
			return;
		}
		var _this = this.queue;
		_this.objects.push(2);
		_this.objects.push(current);
		_this.AnimationState_this.animationsChanged = true;
		var next = current.next;
		while(next != null) {
			var _this = this.queue;
			_this.objects.push(3);
			_this.objects.push(next);
			next = next.next;
		}
		current.next = null;
		var entry = current;
		while(true) {
			var from = entry.mixingFrom;
			if(from == null) {
				break;
			}
			var _this = this.queue;
			_this.objects.push(2);
			_this.objects.push(from);
			_this.AnimationState_this.animationsChanged = true;
			entry.mixingFrom = null;
			entry = from;
		}
		this.tracks[current.trackIndex] = null;
		var _this = this.queue;
		if(!_this.drainDisabled) {
			_this.drainDisabled = true;
			var objects = _this.objects;
			var listeners = _this.AnimationState_this.listeners;
			var i = 0;
			while(i < objects.length) {
				var type = js_Boot.__cast(objects[i] , Int);
				var entry = js_Boot.__cast(objects[i + 1] , spine_TrackEntry);
				while(true) {
					var _switchCond1 = type;
					if(_switchCond1 == 0) {
						if(entry.listener != null) {
							entry.listener.start(entry);
						}
						var ii = 0;
						while(ii < listeners.length) {
							listeners[ii].start(entry);
							++ii;
						}
						break;
					} else if(_switchCond1 == 1) {
						if(entry.listener != null) {
							entry.listener.interrupt(entry);
						}
						var ii1 = 0;
						while(ii1 < listeners.length) {
							listeners[ii1].interrupt(entry);
							++ii1;
						}
						break;
					} else if(_switchCond1 == 2) {
						if(entry.listener != null) {
							entry.listener.end(entry);
						}
						var ii2 = 0;
						while(ii2 < listeners.length) {
							listeners[ii2].end(entry);
							++ii2;
						}
						if(entry.listener != null) {
							entry.listener.dispose(entry);
						}
						var ii3 = 0;
						while(ii3 < listeners.length) {
							listeners[ii3].dispose(entry);
							++ii3;
						}
						_this.AnimationState_this.trackEntryPool.free(entry);
						break;
					} else if(_switchCond1 == 3) {
						if(entry.listener != null) {
							entry.listener.dispose(entry);
						}
						var ii4 = 0;
						while(ii4 < listeners.length) {
							listeners[ii4].dispose(entry);
							++ii4;
						}
						_this.AnimationState_this.trackEntryPool.free(entry);
						break;
					} else if(_switchCond1 == 4) {
						if(entry.listener != null) {
							entry.listener.complete(entry);
						}
						var ii5 = 0;
						while(ii5 < listeners.length) {
							listeners[ii5].complete(entry);
							++ii5;
						}
						break;
					} else if(_switchCond1 == 5) {
						var event = js_Boot.__cast(objects[i++ + 2] , spine_Event);
						if(entry.listener != null) {
							entry.listener.event(entry,event);
						}
						var ii6 = 0;
						while(ii6 < listeners.length) {
							listeners[ii6].event(entry,event);
							++ii6;
						}
						break;
					}
					break;
				}
				i += 2;
			}
			var this1 = _this.objects;
			this1.splice(0,this1.length);
			_this.drainDisabled = false;
		}
	}
	,setCurrent: function(index,current,interrupt) {
		var from;
		if(index < this.tracks.length) {
			from = this.tracks[index];
		} else {
			var this1 = this.tracks;
			var size = index + 1;
			var len = this1.length;
			if(len > size) {
				this1.splice(size,size - len);
			} else if(len < size) {
				this1[size - 1] = null;
			}
			from = null;
		}
		this.tracks[index] = current;
		if(from != null) {
			if(interrupt) {
				var _this = this.queue;
				_this.objects.push(1);
				_this.objects.push(from);
			}
			current.mixingFrom = from;
			current.mixTime = 0;
			if(from.mixingFrom != null && from.mixDuration > 0) {
				current.interruptAlpha *= Math.min(1,from.mixTime / from.mixDuration | 0);
			}
			var this1 = from.timelinesRotation;
			this1.splice(0,this1.length);
		}
		var _this = this.queue;
		_this.objects.push(0);
		_this.objects.push(current);
		_this.AnimationState_this.animationsChanged = true;
	}
	,setAnimationByName: function(trackIndex,animationName,loop) {
		var animation = this.data.skeletonData.findAnimation(animationName);
		if(animation == null) {
			throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("Animation not found: " + animationName));
		}
		if(animation == null) {
			throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("animation cannot be null."));
		}
		var interrupt = true;
		var current;
		if(trackIndex < this.tracks.length) {
			current = this.tracks[trackIndex];
		} else {
			var this1 = this.tracks;
			var size = trackIndex + 1;
			var len = this1.length;
			if(len > size) {
				this1.splice(size,size - len);
			} else if(len < size) {
				this1[size - 1] = null;
			}
			current = null;
		}
		if(current != null) {
			if(current.nextTrackLast == -1) {
				this.tracks[trackIndex] = current.mixingFrom;
				var _this = this.queue;
				_this.objects.push(1);
				_this.objects.push(current);
				var _this = this.queue;
				_this.objects.push(2);
				_this.objects.push(current);
				_this.AnimationState_this.animationsChanged = true;
				var next = current.next;
				while(next != null) {
					var _this = this.queue;
					_this.objects.push(3);
					_this.objects.push(next);
					next = next.next;
				}
				current.next = null;
				current = current.mixingFrom;
				interrupt = false;
			} else {
				var next = current.next;
				while(next != null) {
					var _this = this.queue;
					_this.objects.push(3);
					_this.objects.push(next);
					next = next.next;
				}
				current.next = null;
			}
		}
		var entry = this.trackEntryPool.obtain();
		entry.trackIndex = trackIndex;
		entry.animation = animation;
		entry.loop = loop;
		entry.eventThreshold = 0;
		entry.attachmentThreshold = 0;
		entry.drawOrderThreshold = 0;
		entry.animationStart = 0;
		entry.animationEnd = animation.getDuration();
		entry.animationLast = -1;
		entry.nextAnimationLast = -1;
		entry.delay = 0;
		entry.trackTime = 0;
		entry.trackLast = -1;
		entry.nextTrackLast = -1;
		entry.trackEnd = 999999999.0;
		entry.timeScale = 1;
		entry.alpha = 1;
		entry.interruptAlpha = 1;
		entry.mixTime = 0;
		var tmp;
		if(current == null) {
			tmp = 0;
		} else {
			var _this = this.data;
			var from = current.animation;
			if(from == null) {
				throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("from cannot be null."));
			}
			if(animation == null) {
				throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("to cannot be null."));
			}
			_this.tempKey.a1 = from;
			_this.tempKey.a2 = animation;
			tmp = spine_support_utils_ObjectMap.get(_this.animationToMixTime,_this.tempKey,_this.defaultMix);
		}
		entry.mixDuration = tmp;
		var entry1 = entry;
		var from;
		if(trackIndex < this.tracks.length) {
			from = this.tracks[trackIndex];
		} else {
			var this1 = this.tracks;
			var size = trackIndex + 1;
			var len = this1.length;
			if(len > size) {
				this1.splice(size,size - len);
			} else if(len < size) {
				this1[size - 1] = null;
			}
			from = null;
		}
		this.tracks[trackIndex] = entry1;
		if(from != null) {
			if(interrupt) {
				var _this = this.queue;
				_this.objects.push(1);
				_this.objects.push(from);
			}
			entry1.mixingFrom = from;
			entry1.mixTime = 0;
			if(from.mixingFrom != null && from.mixDuration > 0) {
				entry1.interruptAlpha *= Math.min(1,from.mixTime / from.mixDuration | 0);
			}
			var this1 = from.timelinesRotation;
			this1.splice(0,this1.length);
		}
		var _this = this.queue;
		_this.objects.push(0);
		_this.objects.push(entry1);
		_this.AnimationState_this.animationsChanged = true;
		var _this = this.queue;
		if(!_this.drainDisabled) {
			_this.drainDisabled = true;
			var objects = _this.objects;
			var listeners = _this.AnimationState_this.listeners;
			var i = 0;
			while(i < objects.length) {
				var type = js_Boot.__cast(objects[i] , Int);
				var entry = js_Boot.__cast(objects[i + 1] , spine_TrackEntry);
				while(true) {
					var _switchCond1 = type;
					if(_switchCond1 == 0) {
						if(entry.listener != null) {
							entry.listener.start(entry);
						}
						var ii = 0;
						while(ii < listeners.length) {
							listeners[ii].start(entry);
							++ii;
						}
						break;
					} else if(_switchCond1 == 1) {
						if(entry.listener != null) {
							entry.listener.interrupt(entry);
						}
						var ii1 = 0;
						while(ii1 < listeners.length) {
							listeners[ii1].interrupt(entry);
							++ii1;
						}
						break;
					} else if(_switchCond1 == 2) {
						if(entry.listener != null) {
							entry.listener.end(entry);
						}
						var ii2 = 0;
						while(ii2 < listeners.length) {
							listeners[ii2].end(entry);
							++ii2;
						}
						if(entry.listener != null) {
							entry.listener.dispose(entry);
						}
						var ii3 = 0;
						while(ii3 < listeners.length) {
							listeners[ii3].dispose(entry);
							++ii3;
						}
						_this.AnimationState_this.trackEntryPool.free(entry);
						break;
					} else if(_switchCond1 == 3) {
						if(entry.listener != null) {
							entry.listener.dispose(entry);
						}
						var ii4 = 0;
						while(ii4 < listeners.length) {
							listeners[ii4].dispose(entry);
							++ii4;
						}
						_this.AnimationState_this.trackEntryPool.free(entry);
						break;
					} else if(_switchCond1 == 4) {
						if(entry.listener != null) {
							entry.listener.complete(entry);
						}
						var ii5 = 0;
						while(ii5 < listeners.length) {
							listeners[ii5].complete(entry);
							++ii5;
						}
						break;
					} else if(_switchCond1 == 5) {
						var event = js_Boot.__cast(objects[i++ + 2] , spine_Event);
						if(entry.listener != null) {
							entry.listener.event(entry,event);
						}
						var ii6 = 0;
						while(ii6 < listeners.length) {
							listeners[ii6].event(entry,event);
							++ii6;
						}
						break;
					}
					break;
				}
				i += 2;
			}
			var this1 = _this.objects;
			this1.splice(0,this1.length);
			_this.drainDisabled = false;
		}
		return entry1;
	}
	,setAnimation: function(trackIndex,animation,loop) {
		if(animation == null) {
			throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("animation cannot be null."));
		}
		var interrupt = true;
		var current;
		if(trackIndex < this.tracks.length) {
			current = this.tracks[trackIndex];
		} else {
			var this1 = this.tracks;
			var size = trackIndex + 1;
			var len = this1.length;
			if(len > size) {
				this1.splice(size,size - len);
			} else if(len < size) {
				this1[size - 1] = null;
			}
			current = null;
		}
		if(current != null) {
			if(current.nextTrackLast == -1) {
				this.tracks[trackIndex] = current.mixingFrom;
				var _this = this.queue;
				_this.objects.push(1);
				_this.objects.push(current);
				var _this = this.queue;
				_this.objects.push(2);
				_this.objects.push(current);
				_this.AnimationState_this.animationsChanged = true;
				var next = current.next;
				while(next != null) {
					var _this = this.queue;
					_this.objects.push(3);
					_this.objects.push(next);
					next = next.next;
				}
				current.next = null;
				current = current.mixingFrom;
				interrupt = false;
			} else {
				var next = current.next;
				while(next != null) {
					var _this = this.queue;
					_this.objects.push(3);
					_this.objects.push(next);
					next = next.next;
				}
				current.next = null;
			}
		}
		var entry = this.trackEntryPool.obtain();
		entry.trackIndex = trackIndex;
		entry.animation = animation;
		entry.loop = loop;
		entry.eventThreshold = 0;
		entry.attachmentThreshold = 0;
		entry.drawOrderThreshold = 0;
		entry.animationStart = 0;
		entry.animationEnd = animation.getDuration();
		entry.animationLast = -1;
		entry.nextAnimationLast = -1;
		entry.delay = 0;
		entry.trackTime = 0;
		entry.trackLast = -1;
		entry.nextTrackLast = -1;
		entry.trackEnd = 999999999.0;
		entry.timeScale = 1;
		entry.alpha = 1;
		entry.interruptAlpha = 1;
		entry.mixTime = 0;
		var tmp;
		if(current == null) {
			tmp = 0;
		} else {
			var _this = this.data;
			var from = current.animation;
			if(from == null) {
				throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("from cannot be null."));
			}
			if(animation == null) {
				throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("to cannot be null."));
			}
			_this.tempKey.a1 = from;
			_this.tempKey.a2 = animation;
			tmp = spine_support_utils_ObjectMap.get(_this.animationToMixTime,_this.tempKey,_this.defaultMix);
		}
		entry.mixDuration = tmp;
		var entry1 = entry;
		var from;
		if(trackIndex < this.tracks.length) {
			from = this.tracks[trackIndex];
		} else {
			var this1 = this.tracks;
			var size = trackIndex + 1;
			var len = this1.length;
			if(len > size) {
				this1.splice(size,size - len);
			} else if(len < size) {
				this1[size - 1] = null;
			}
			from = null;
		}
		this.tracks[trackIndex] = entry1;
		if(from != null) {
			if(interrupt) {
				var _this = this.queue;
				_this.objects.push(1);
				_this.objects.push(from);
			}
			entry1.mixingFrom = from;
			entry1.mixTime = 0;
			if(from.mixingFrom != null && from.mixDuration > 0) {
				entry1.interruptAlpha *= Math.min(1,from.mixTime / from.mixDuration | 0);
			}
			var this1 = from.timelinesRotation;
			this1.splice(0,this1.length);
		}
		var _this = this.queue;
		_this.objects.push(0);
		_this.objects.push(entry1);
		_this.AnimationState_this.animationsChanged = true;
		var _this = this.queue;
		if(!_this.drainDisabled) {
			_this.drainDisabled = true;
			var objects = _this.objects;
			var listeners = _this.AnimationState_this.listeners;
			var i = 0;
			while(i < objects.length) {
				var type = js_Boot.__cast(objects[i] , Int);
				var entry = js_Boot.__cast(objects[i + 1] , spine_TrackEntry);
				while(true) {
					var _switchCond1 = type;
					if(_switchCond1 == 0) {
						if(entry.listener != null) {
							entry.listener.start(entry);
						}
						var ii = 0;
						while(ii < listeners.length) {
							listeners[ii].start(entry);
							++ii;
						}
						break;
					} else if(_switchCond1 == 1) {
						if(entry.listener != null) {
							entry.listener.interrupt(entry);
						}
						var ii1 = 0;
						while(ii1 < listeners.length) {
							listeners[ii1].interrupt(entry);
							++ii1;
						}
						break;
					} else if(_switchCond1 == 2) {
						if(entry.listener != null) {
							entry.listener.end(entry);
						}
						var ii2 = 0;
						while(ii2 < listeners.length) {
							listeners[ii2].end(entry);
							++ii2;
						}
						if(entry.listener != null) {
							entry.listener.dispose(entry);
						}
						var ii3 = 0;
						while(ii3 < listeners.length) {
							listeners[ii3].dispose(entry);
							++ii3;
						}
						_this.AnimationState_this.trackEntryPool.free(entry);
						break;
					} else if(_switchCond1 == 3) {
						if(entry.listener != null) {
							entry.listener.dispose(entry);
						}
						var ii4 = 0;
						while(ii4 < listeners.length) {
							listeners[ii4].dispose(entry);
							++ii4;
						}
						_this.AnimationState_this.trackEntryPool.free(entry);
						break;
					} else if(_switchCond1 == 4) {
						if(entry.listener != null) {
							entry.listener.complete(entry);
						}
						var ii5 = 0;
						while(ii5 < listeners.length) {
							listeners[ii5].complete(entry);
							++ii5;
						}
						break;
					} else if(_switchCond1 == 5) {
						var event = js_Boot.__cast(objects[i++ + 2] , spine_Event);
						if(entry.listener != null) {
							entry.listener.event(entry,event);
						}
						var ii6 = 0;
						while(ii6 < listeners.length) {
							listeners[ii6].event(entry,event);
							++ii6;
						}
						break;
					}
					break;
				}
				i += 2;
			}
			var this1 = _this.objects;
			this1.splice(0,this1.length);
			_this.drainDisabled = false;
		}
		return entry1;
	}
	,addAnimationByName: function(trackIndex,animationName,loop,delay) {
		var animation = this.data.skeletonData.findAnimation(animationName);
		if(animation == null) {
			throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("Animation not found: " + animationName));
		}
		var delay1 = delay;
		if(animation == null) {
			throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("animation cannot be null."));
		}
		var last;
		if(trackIndex < this.tracks.length) {
			last = this.tracks[trackIndex];
		} else {
			var this1 = this.tracks;
			var size = trackIndex + 1;
			var len = this1.length;
			if(len > size) {
				this1.splice(size,size - len);
			} else if(len < size) {
				this1[size - 1] = null;
			}
			last = null;
		}
		if(last != null) {
			while(last.next != null) last = last.next;
		}
		var entry = this.trackEntryPool.obtain();
		entry.trackIndex = trackIndex;
		entry.animation = animation;
		entry.loop = loop;
		entry.eventThreshold = 0;
		entry.attachmentThreshold = 0;
		entry.drawOrderThreshold = 0;
		entry.animationStart = 0;
		entry.animationEnd = animation.getDuration();
		entry.animationLast = -1;
		entry.nextAnimationLast = -1;
		entry.delay = 0;
		entry.trackTime = 0;
		entry.trackLast = -1;
		entry.nextTrackLast = -1;
		entry.trackEnd = 999999999.0;
		entry.timeScale = 1;
		entry.alpha = 1;
		entry.interruptAlpha = 1;
		entry.mixTime = 0;
		var tmp;
		if(last == null) {
			tmp = 0;
		} else {
			var _this = this.data;
			var from = last.animation;
			if(from == null) {
				throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("from cannot be null."));
			}
			if(animation == null) {
				throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("to cannot be null."));
			}
			_this.tempKey.a1 = from;
			_this.tempKey.a2 = animation;
			tmp = spine_support_utils_ObjectMap.get(_this.animationToMixTime,_this.tempKey,_this.defaultMix);
		}
		entry.mixDuration = tmp;
		var entry1 = entry;
		if(last == null) {
			var from;
			if(trackIndex < this.tracks.length) {
				from = this.tracks[trackIndex];
			} else {
				var this1 = this.tracks;
				var size = trackIndex + 1;
				var len = this1.length;
				if(len > size) {
					this1.splice(size,size - len);
				} else if(len < size) {
					this1[size - 1] = null;
				}
				from = null;
			}
			this.tracks[trackIndex] = entry1;
			if(from != null) {
				var _this = this.queue;
				_this.objects.push(1);
				_this.objects.push(from);
				entry1.mixingFrom = from;
				entry1.mixTime = 0;
				if(from.mixingFrom != null && from.mixDuration > 0) {
					entry1.interruptAlpha *= Math.min(1,from.mixTime / from.mixDuration | 0);
				}
				var this1 = from.timelinesRotation;
				this1.splice(0,this1.length);
			}
			var _this = this.queue;
			_this.objects.push(0);
			_this.objects.push(entry1);
			_this.AnimationState_this.animationsChanged = true;
			var _this = this.queue;
			if(!_this.drainDisabled) {
				_this.drainDisabled = true;
				var objects = _this.objects;
				var listeners = _this.AnimationState_this.listeners;
				var i = 0;
				while(i < objects.length) {
					var type = js_Boot.__cast(objects[i] , Int);
					var entry = js_Boot.__cast(objects[i + 1] , spine_TrackEntry);
					while(true) {
						var _switchCond1 = type;
						if(_switchCond1 == 0) {
							if(entry.listener != null) {
								entry.listener.start(entry);
							}
							var ii = 0;
							while(ii < listeners.length) {
								listeners[ii].start(entry);
								++ii;
							}
							break;
						} else if(_switchCond1 == 1) {
							if(entry.listener != null) {
								entry.listener.interrupt(entry);
							}
							var ii1 = 0;
							while(ii1 < listeners.length) {
								listeners[ii1].interrupt(entry);
								++ii1;
							}
							break;
						} else if(_switchCond1 == 2) {
							if(entry.listener != null) {
								entry.listener.end(entry);
							}
							var ii2 = 0;
							while(ii2 < listeners.length) {
								listeners[ii2].end(entry);
								++ii2;
							}
							if(entry.listener != null) {
								entry.listener.dispose(entry);
							}
							var ii3 = 0;
							while(ii3 < listeners.length) {
								listeners[ii3].dispose(entry);
								++ii3;
							}
							_this.AnimationState_this.trackEntryPool.free(entry);
							break;
						} else if(_switchCond1 == 3) {
							if(entry.listener != null) {
								entry.listener.dispose(entry);
							}
							var ii4 = 0;
							while(ii4 < listeners.length) {
								listeners[ii4].dispose(entry);
								++ii4;
							}
							_this.AnimationState_this.trackEntryPool.free(entry);
							break;
						} else if(_switchCond1 == 4) {
							if(entry.listener != null) {
								entry.listener.complete(entry);
							}
							var ii5 = 0;
							while(ii5 < listeners.length) {
								listeners[ii5].complete(entry);
								++ii5;
							}
							break;
						} else if(_switchCond1 == 5) {
							var event = js_Boot.__cast(objects[i++ + 2] , spine_Event);
							if(entry.listener != null) {
								entry.listener.event(entry,event);
							}
							var ii6 = 0;
							while(ii6 < listeners.length) {
								listeners[ii6].event(entry,event);
								++ii6;
							}
							break;
						}
						break;
					}
					i += 2;
				}
				var this1 = _this.objects;
				this1.splice(0,this1.length);
				_this.drainDisabled = false;
			}
		} else {
			last.next = entry1;
			if(delay1 <= 0) {
				var duration = last.animationEnd - last.animationStart;
				if(duration != 0) {
					if(last.loop) {
						delay1 += duration * (1 + (last.trackTime / duration | 0));
					} else {
						delay1 += duration;
					}
					var _this = this.data;
					var from = last.animation;
					if(from == null) {
						throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("from cannot be null."));
					}
					if(animation == null) {
						throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("to cannot be null."));
					}
					_this.tempKey.a1 = from;
					_this.tempKey.a2 = animation;
					delay1 -= spine_support_utils_ObjectMap.get(_this.animationToMixTime,_this.tempKey,_this.defaultMix);
				} else {
					delay1 = 0;
				}
			}
		}
		entry1.delay = delay1;
		return entry1;
	}
	,addAnimation: function(trackIndex,animation,loop,delay) {
		if(animation == null) {
			throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("animation cannot be null."));
		}
		var last;
		if(trackIndex < this.tracks.length) {
			last = this.tracks[trackIndex];
		} else {
			var this1 = this.tracks;
			var size = trackIndex + 1;
			var len = this1.length;
			if(len > size) {
				this1.splice(size,size - len);
			} else if(len < size) {
				this1[size - 1] = null;
			}
			last = null;
		}
		if(last != null) {
			while(last.next != null) last = last.next;
		}
		var entry = this.trackEntryPool.obtain();
		entry.trackIndex = trackIndex;
		entry.animation = animation;
		entry.loop = loop;
		entry.eventThreshold = 0;
		entry.attachmentThreshold = 0;
		entry.drawOrderThreshold = 0;
		entry.animationStart = 0;
		entry.animationEnd = animation.getDuration();
		entry.animationLast = -1;
		entry.nextAnimationLast = -1;
		entry.delay = 0;
		entry.trackTime = 0;
		entry.trackLast = -1;
		entry.nextTrackLast = -1;
		entry.trackEnd = 999999999.0;
		entry.timeScale = 1;
		entry.alpha = 1;
		entry.interruptAlpha = 1;
		entry.mixTime = 0;
		var tmp;
		if(last == null) {
			tmp = 0;
		} else {
			var _this = this.data;
			var from = last.animation;
			if(from == null) {
				throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("from cannot be null."));
			}
			if(animation == null) {
				throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("to cannot be null."));
			}
			_this.tempKey.a1 = from;
			_this.tempKey.a2 = animation;
			tmp = spine_support_utils_ObjectMap.get(_this.animationToMixTime,_this.tempKey,_this.defaultMix);
		}
		entry.mixDuration = tmp;
		var entry1 = entry;
		if(last == null) {
			var from;
			if(trackIndex < this.tracks.length) {
				from = this.tracks[trackIndex];
			} else {
				var this1 = this.tracks;
				var size = trackIndex + 1;
				var len = this1.length;
				if(len > size) {
					this1.splice(size,size - len);
				} else if(len < size) {
					this1[size - 1] = null;
				}
				from = null;
			}
			this.tracks[trackIndex] = entry1;
			if(from != null) {
				var _this = this.queue;
				_this.objects.push(1);
				_this.objects.push(from);
				entry1.mixingFrom = from;
				entry1.mixTime = 0;
				if(from.mixingFrom != null && from.mixDuration > 0) {
					entry1.interruptAlpha *= Math.min(1,from.mixTime / from.mixDuration | 0);
				}
				var this1 = from.timelinesRotation;
				this1.splice(0,this1.length);
			}
			var _this = this.queue;
			_this.objects.push(0);
			_this.objects.push(entry1);
			_this.AnimationState_this.animationsChanged = true;
			var _this = this.queue;
			if(!_this.drainDisabled) {
				_this.drainDisabled = true;
				var objects = _this.objects;
				var listeners = _this.AnimationState_this.listeners;
				var i = 0;
				while(i < objects.length) {
					var type = js_Boot.__cast(objects[i] , Int);
					var entry = js_Boot.__cast(objects[i + 1] , spine_TrackEntry);
					while(true) {
						var _switchCond1 = type;
						if(_switchCond1 == 0) {
							if(entry.listener != null) {
								entry.listener.start(entry);
							}
							var ii = 0;
							while(ii < listeners.length) {
								listeners[ii].start(entry);
								++ii;
							}
							break;
						} else if(_switchCond1 == 1) {
							if(entry.listener != null) {
								entry.listener.interrupt(entry);
							}
							var ii1 = 0;
							while(ii1 < listeners.length) {
								listeners[ii1].interrupt(entry);
								++ii1;
							}
							break;
						} else if(_switchCond1 == 2) {
							if(entry.listener != null) {
								entry.listener.end(entry);
							}
							var ii2 = 0;
							while(ii2 < listeners.length) {
								listeners[ii2].end(entry);
								++ii2;
							}
							if(entry.listener != null) {
								entry.listener.dispose(entry);
							}
							var ii3 = 0;
							while(ii3 < listeners.length) {
								listeners[ii3].dispose(entry);
								++ii3;
							}
							_this.AnimationState_this.trackEntryPool.free(entry);
							break;
						} else if(_switchCond1 == 3) {
							if(entry.listener != null) {
								entry.listener.dispose(entry);
							}
							var ii4 = 0;
							while(ii4 < listeners.length) {
								listeners[ii4].dispose(entry);
								++ii4;
							}
							_this.AnimationState_this.trackEntryPool.free(entry);
							break;
						} else if(_switchCond1 == 4) {
							if(entry.listener != null) {
								entry.listener.complete(entry);
							}
							var ii5 = 0;
							while(ii5 < listeners.length) {
								listeners[ii5].complete(entry);
								++ii5;
							}
							break;
						} else if(_switchCond1 == 5) {
							var event = js_Boot.__cast(objects[i++ + 2] , spine_Event);
							if(entry.listener != null) {
								entry.listener.event(entry,event);
							}
							var ii6 = 0;
							while(ii6 < listeners.length) {
								listeners[ii6].event(entry,event);
								++ii6;
							}
							break;
						}
						break;
					}
					i += 2;
				}
				var this1 = _this.objects;
				this1.splice(0,this1.length);
				_this.drainDisabled = false;
			}
		} else {
			last.next = entry1;
			if(delay <= 0) {
				var duration = last.animationEnd - last.animationStart;
				if(duration != 0) {
					if(last.loop) {
						delay += duration * (1 + (last.trackTime / duration | 0));
					} else {
						delay += duration;
					}
					var _this = this.data;
					var from = last.animation;
					if(from == null) {
						throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("from cannot be null."));
					}
					if(animation == null) {
						throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("to cannot be null."));
					}
					_this.tempKey.a1 = from;
					_this.tempKey.a2 = animation;
					delay -= spine_support_utils_ObjectMap.get(_this.animationToMixTime,_this.tempKey,_this.defaultMix);
				} else {
					delay = 0;
				}
			}
		}
		entry1.delay = delay;
		return entry1;
	}
	,setEmptyAnimation: function(trackIndex,mixDuration) {
		var animation = spine_AnimationState.emptyAnimation;
		if(animation == null) {
			throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("animation cannot be null."));
		}
		var interrupt = true;
		var current;
		if(trackIndex < this.tracks.length) {
			current = this.tracks[trackIndex];
		} else {
			var this1 = this.tracks;
			var size = trackIndex + 1;
			var len = this1.length;
			if(len > size) {
				this1.splice(size,size - len);
			} else if(len < size) {
				this1[size - 1] = null;
			}
			current = null;
		}
		if(current != null) {
			if(current.nextTrackLast == -1) {
				this.tracks[trackIndex] = current.mixingFrom;
				var _this = this.queue;
				_this.objects.push(1);
				_this.objects.push(current);
				var _this = this.queue;
				_this.objects.push(2);
				_this.objects.push(current);
				_this.AnimationState_this.animationsChanged = true;
				var next = current.next;
				while(next != null) {
					var _this = this.queue;
					_this.objects.push(3);
					_this.objects.push(next);
					next = next.next;
				}
				current.next = null;
				current = current.mixingFrom;
				interrupt = false;
			} else {
				var next = current.next;
				while(next != null) {
					var _this = this.queue;
					_this.objects.push(3);
					_this.objects.push(next);
					next = next.next;
				}
				current.next = null;
			}
		}
		var entry = this.trackEntryPool.obtain();
		entry.trackIndex = trackIndex;
		entry.animation = animation;
		entry.loop = false;
		entry.eventThreshold = 0;
		entry.attachmentThreshold = 0;
		entry.drawOrderThreshold = 0;
		entry.animationStart = 0;
		entry.animationEnd = animation.getDuration();
		entry.animationLast = -1;
		entry.nextAnimationLast = -1;
		entry.delay = 0;
		entry.trackTime = 0;
		entry.trackLast = -1;
		entry.nextTrackLast = -1;
		entry.trackEnd = 999999999.0;
		entry.timeScale = 1;
		entry.alpha = 1;
		entry.interruptAlpha = 1;
		entry.mixTime = 0;
		var tmp;
		if(current == null) {
			tmp = 0;
		} else {
			var _this = this.data;
			var from = current.animation;
			if(from == null) {
				throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("from cannot be null."));
			}
			if(animation == null) {
				throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("to cannot be null."));
			}
			_this.tempKey.a1 = from;
			_this.tempKey.a2 = animation;
			tmp = spine_support_utils_ObjectMap.get(_this.animationToMixTime,_this.tempKey,_this.defaultMix);
		}
		entry.mixDuration = tmp;
		var entry1 = entry;
		var from;
		if(trackIndex < this.tracks.length) {
			from = this.tracks[trackIndex];
		} else {
			var this1 = this.tracks;
			var size = trackIndex + 1;
			var len = this1.length;
			if(len > size) {
				this1.splice(size,size - len);
			} else if(len < size) {
				this1[size - 1] = null;
			}
			from = null;
		}
		this.tracks[trackIndex] = entry1;
		if(from != null) {
			if(interrupt) {
				var _this = this.queue;
				_this.objects.push(1);
				_this.objects.push(from);
			}
			entry1.mixingFrom = from;
			entry1.mixTime = 0;
			if(from.mixingFrom != null && from.mixDuration > 0) {
				entry1.interruptAlpha *= Math.min(1,from.mixTime / from.mixDuration | 0);
			}
			var this1 = from.timelinesRotation;
			this1.splice(0,this1.length);
		}
		var _this = this.queue;
		_this.objects.push(0);
		_this.objects.push(entry1);
		_this.AnimationState_this.animationsChanged = true;
		var _this = this.queue;
		if(!_this.drainDisabled) {
			_this.drainDisabled = true;
			var objects = _this.objects;
			var listeners = _this.AnimationState_this.listeners;
			var i = 0;
			while(i < objects.length) {
				var type = js_Boot.__cast(objects[i] , Int);
				var entry = js_Boot.__cast(objects[i + 1] , spine_TrackEntry);
				while(true) {
					var _switchCond1 = type;
					if(_switchCond1 == 0) {
						if(entry.listener != null) {
							entry.listener.start(entry);
						}
						var ii = 0;
						while(ii < listeners.length) {
							listeners[ii].start(entry);
							++ii;
						}
						break;
					} else if(_switchCond1 == 1) {
						if(entry.listener != null) {
							entry.listener.interrupt(entry);
						}
						var ii1 = 0;
						while(ii1 < listeners.length) {
							listeners[ii1].interrupt(entry);
							++ii1;
						}
						break;
					} else if(_switchCond1 == 2) {
						if(entry.listener != null) {
							entry.listener.end(entry);
						}
						var ii2 = 0;
						while(ii2 < listeners.length) {
							listeners[ii2].end(entry);
							++ii2;
						}
						if(entry.listener != null) {
							entry.listener.dispose(entry);
						}
						var ii3 = 0;
						while(ii3 < listeners.length) {
							listeners[ii3].dispose(entry);
							++ii3;
						}
						_this.AnimationState_this.trackEntryPool.free(entry);
						break;
					} else if(_switchCond1 == 3) {
						if(entry.listener != null) {
							entry.listener.dispose(entry);
						}
						var ii4 = 0;
						while(ii4 < listeners.length) {
							listeners[ii4].dispose(entry);
							++ii4;
						}
						_this.AnimationState_this.trackEntryPool.free(entry);
						break;
					} else if(_switchCond1 == 4) {
						if(entry.listener != null) {
							entry.listener.complete(entry);
						}
						var ii5 = 0;
						while(ii5 < listeners.length) {
							listeners[ii5].complete(entry);
							++ii5;
						}
						break;
					} else if(_switchCond1 == 5) {
						var event = js_Boot.__cast(objects[i++ + 2] , spine_Event);
						if(entry.listener != null) {
							entry.listener.event(entry,event);
						}
						var ii6 = 0;
						while(ii6 < listeners.length) {
							listeners[ii6].event(entry,event);
							++ii6;
						}
						break;
					}
					break;
				}
				i += 2;
			}
			var this1 = _this.objects;
			this1.splice(0,this1.length);
			_this.drainDisabled = false;
		}
		var entry = entry1;
		entry.mixDuration = mixDuration;
		entry.trackEnd = mixDuration;
		return entry;
	}
	,addEmptyAnimation: function(trackIndex,mixDuration,delay) {
		if(delay <= 0) {
			delay -= mixDuration;
		}
		var animation = spine_AnimationState.emptyAnimation;
		var delay1 = delay;
		if(animation == null) {
			throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("animation cannot be null."));
		}
		var last;
		if(trackIndex < this.tracks.length) {
			last = this.tracks[trackIndex];
		} else {
			var this1 = this.tracks;
			var size = trackIndex + 1;
			var len = this1.length;
			if(len > size) {
				this1.splice(size,size - len);
			} else if(len < size) {
				this1[size - 1] = null;
			}
			last = null;
		}
		if(last != null) {
			while(last.next != null) last = last.next;
		}
		var entry = this.trackEntryPool.obtain();
		entry.trackIndex = trackIndex;
		entry.animation = animation;
		entry.loop = false;
		entry.eventThreshold = 0;
		entry.attachmentThreshold = 0;
		entry.drawOrderThreshold = 0;
		entry.animationStart = 0;
		entry.animationEnd = animation.getDuration();
		entry.animationLast = -1;
		entry.nextAnimationLast = -1;
		entry.delay = 0;
		entry.trackTime = 0;
		entry.trackLast = -1;
		entry.nextTrackLast = -1;
		entry.trackEnd = 999999999.0;
		entry.timeScale = 1;
		entry.alpha = 1;
		entry.interruptAlpha = 1;
		entry.mixTime = 0;
		var tmp;
		if(last == null) {
			tmp = 0;
		} else {
			var _this = this.data;
			var from = last.animation;
			if(from == null) {
				throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("from cannot be null."));
			}
			if(animation == null) {
				throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("to cannot be null."));
			}
			_this.tempKey.a1 = from;
			_this.tempKey.a2 = animation;
			tmp = spine_support_utils_ObjectMap.get(_this.animationToMixTime,_this.tempKey,_this.defaultMix);
		}
		entry.mixDuration = tmp;
		var entry1 = entry;
		if(last == null) {
			var from;
			if(trackIndex < this.tracks.length) {
				from = this.tracks[trackIndex];
			} else {
				var this1 = this.tracks;
				var size = trackIndex + 1;
				var len = this1.length;
				if(len > size) {
					this1.splice(size,size - len);
				} else if(len < size) {
					this1[size - 1] = null;
				}
				from = null;
			}
			this.tracks[trackIndex] = entry1;
			if(from != null) {
				var _this = this.queue;
				_this.objects.push(1);
				_this.objects.push(from);
				entry1.mixingFrom = from;
				entry1.mixTime = 0;
				if(from.mixingFrom != null && from.mixDuration > 0) {
					entry1.interruptAlpha *= Math.min(1,from.mixTime / from.mixDuration | 0);
				}
				var this1 = from.timelinesRotation;
				this1.splice(0,this1.length);
			}
			var _this = this.queue;
			_this.objects.push(0);
			_this.objects.push(entry1);
			_this.AnimationState_this.animationsChanged = true;
			var _this = this.queue;
			if(!_this.drainDisabled) {
				_this.drainDisabled = true;
				var objects = _this.objects;
				var listeners = _this.AnimationState_this.listeners;
				var i = 0;
				while(i < objects.length) {
					var type = js_Boot.__cast(objects[i] , Int);
					var entry = js_Boot.__cast(objects[i + 1] , spine_TrackEntry);
					while(true) {
						var _switchCond1 = type;
						if(_switchCond1 == 0) {
							if(entry.listener != null) {
								entry.listener.start(entry);
							}
							var ii = 0;
							while(ii < listeners.length) {
								listeners[ii].start(entry);
								++ii;
							}
							break;
						} else if(_switchCond1 == 1) {
							if(entry.listener != null) {
								entry.listener.interrupt(entry);
							}
							var ii1 = 0;
							while(ii1 < listeners.length) {
								listeners[ii1].interrupt(entry);
								++ii1;
							}
							break;
						} else if(_switchCond1 == 2) {
							if(entry.listener != null) {
								entry.listener.end(entry);
							}
							var ii2 = 0;
							while(ii2 < listeners.length) {
								listeners[ii2].end(entry);
								++ii2;
							}
							if(entry.listener != null) {
								entry.listener.dispose(entry);
							}
							var ii3 = 0;
							while(ii3 < listeners.length) {
								listeners[ii3].dispose(entry);
								++ii3;
							}
							_this.AnimationState_this.trackEntryPool.free(entry);
							break;
						} else if(_switchCond1 == 3) {
							if(entry.listener != null) {
								entry.listener.dispose(entry);
							}
							var ii4 = 0;
							while(ii4 < listeners.length) {
								listeners[ii4].dispose(entry);
								++ii4;
							}
							_this.AnimationState_this.trackEntryPool.free(entry);
							break;
						} else if(_switchCond1 == 4) {
							if(entry.listener != null) {
								entry.listener.complete(entry);
							}
							var ii5 = 0;
							while(ii5 < listeners.length) {
								listeners[ii5].complete(entry);
								++ii5;
							}
							break;
						} else if(_switchCond1 == 5) {
							var event = js_Boot.__cast(objects[i++ + 2] , spine_Event);
							if(entry.listener != null) {
								entry.listener.event(entry,event);
							}
							var ii6 = 0;
							while(ii6 < listeners.length) {
								listeners[ii6].event(entry,event);
								++ii6;
							}
							break;
						}
						break;
					}
					i += 2;
				}
				var this1 = _this.objects;
				this1.splice(0,this1.length);
				_this.drainDisabled = false;
			}
		} else {
			last.next = entry1;
			if(delay1 <= 0) {
				var duration = last.animationEnd - last.animationStart;
				if(duration != 0) {
					if(last.loop) {
						delay1 += duration * (1 + (last.trackTime / duration | 0));
					} else {
						delay1 += duration;
					}
					var _this = this.data;
					var from = last.animation;
					if(from == null) {
						throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("from cannot be null."));
					}
					if(animation == null) {
						throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("to cannot be null."));
					}
					_this.tempKey.a1 = from;
					_this.tempKey.a2 = animation;
					delay1 -= spine_support_utils_ObjectMap.get(_this.animationToMixTime,_this.tempKey,_this.defaultMix);
				} else {
					delay1 = 0;
				}
			}
		}
		entry1.delay = delay1;
		var entry = entry1;
		entry.mixDuration = mixDuration;
		entry.trackEnd = mixDuration;
		return entry;
	}
	,setEmptyAnimations: function(mixDuration) {
		var oldDrainDisabled = this.queue.drainDisabled;
		this.queue.drainDisabled = true;
		var i = 0;
		var n = this.tracks.length;
		while(i < n) {
			var current = this.tracks[i];
			if(current != null) {
				var trackIndex = current.trackIndex;
				var animation = spine_AnimationState.emptyAnimation;
				if(animation == null) {
					throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("animation cannot be null."));
				}
				var interrupt = true;
				var current1;
				if(trackIndex < this.tracks.length) {
					current1 = this.tracks[trackIndex];
				} else {
					var this1 = this.tracks;
					var size = trackIndex + 1;
					var len = this1.length;
					if(len > size) {
						this1.splice(size,size - len);
					} else if(len < size) {
						this1[size - 1] = null;
					}
					current1 = null;
				}
				if(current1 != null) {
					if(current1.nextTrackLast == -1) {
						this.tracks[trackIndex] = current1.mixingFrom;
						var _this = this.queue;
						_this.objects.push(1);
						_this.objects.push(current1);
						var _this1 = this.queue;
						_this1.objects.push(2);
						_this1.objects.push(current1);
						_this1.AnimationState_this.animationsChanged = true;
						var next = current1.next;
						while(next != null) {
							var _this2 = this.queue;
							_this2.objects.push(3);
							_this2.objects.push(next);
							next = next.next;
						}
						current1.next = null;
						current1 = current1.mixingFrom;
						interrupt = false;
					} else {
						var next1 = current1.next;
						while(next1 != null) {
							var _this3 = this.queue;
							_this3.objects.push(3);
							_this3.objects.push(next1);
							next1 = next1.next;
						}
						current1.next = null;
					}
				}
				var entry = this.trackEntryPool.obtain();
				entry.trackIndex = trackIndex;
				entry.animation = animation;
				entry.loop = false;
				entry.eventThreshold = 0;
				entry.attachmentThreshold = 0;
				entry.drawOrderThreshold = 0;
				entry.animationStart = 0;
				entry.animationEnd = animation.getDuration();
				entry.animationLast = -1;
				entry.nextAnimationLast = -1;
				entry.delay = 0;
				entry.trackTime = 0;
				entry.trackLast = -1;
				entry.nextTrackLast = -1;
				entry.trackEnd = 999999999.0;
				entry.timeScale = 1;
				entry.alpha = 1;
				entry.interruptAlpha = 1;
				entry.mixTime = 0;
				var tmp;
				if(current1 == null) {
					tmp = 0;
				} else {
					var _this4 = this.data;
					var from = current1.animation;
					if(from == null) {
						throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("from cannot be null."));
					}
					if(animation == null) {
						throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("to cannot be null."));
					}
					_this4.tempKey.a1 = from;
					_this4.tempKey.a2 = animation;
					tmp = spine_support_utils_ObjectMap.get(_this4.animationToMixTime,_this4.tempKey,_this4.defaultMix);
				}
				entry.mixDuration = tmp;
				var entry1 = entry;
				var from1;
				if(trackIndex < this.tracks.length) {
					from1 = this.tracks[trackIndex];
				} else {
					var this2 = this.tracks;
					var size1 = trackIndex + 1;
					var len1 = this2.length;
					if(len1 > size1) {
						this2.splice(size1,size1 - len1);
					} else if(len1 < size1) {
						this2[size1 - 1] = null;
					}
					from1 = null;
				}
				this.tracks[trackIndex] = entry1;
				if(from1 != null) {
					if(interrupt) {
						var _this5 = this.queue;
						_this5.objects.push(1);
						_this5.objects.push(from1);
					}
					entry1.mixingFrom = from1;
					entry1.mixTime = 0;
					if(from1.mixingFrom != null && from1.mixDuration > 0) {
						entry1.interruptAlpha *= Math.min(1,from1.mixTime / from1.mixDuration | 0);
					}
					var this3 = from1.timelinesRotation;
					this3.splice(0,this3.length);
				}
				var _this6 = this.queue;
				_this6.objects.push(0);
				_this6.objects.push(entry1);
				_this6.AnimationState_this.animationsChanged = true;
				var _this7 = this.queue;
				if(!_this7.drainDisabled) {
					_this7.drainDisabled = true;
					var objects = _this7.objects;
					var listeners = _this7.AnimationState_this.listeners;
					var i1 = 0;
					while(i1 < objects.length) {
						var type = js_Boot.__cast(objects[i1] , Int);
						var entry2 = js_Boot.__cast(objects[i1 + 1] , spine_TrackEntry);
						while(true) {
							var _switchCond1 = type;
							if(_switchCond1 == 0) {
								if(entry2.listener != null) {
									entry2.listener.start(entry2);
								}
								var ii = 0;
								while(ii < listeners.length) {
									listeners[ii].start(entry2);
									++ii;
								}
								break;
							} else if(_switchCond1 == 1) {
								if(entry2.listener != null) {
									entry2.listener.interrupt(entry2);
								}
								var ii1 = 0;
								while(ii1 < listeners.length) {
									listeners[ii1].interrupt(entry2);
									++ii1;
								}
								break;
							} else if(_switchCond1 == 2) {
								if(entry2.listener != null) {
									entry2.listener.end(entry2);
								}
								var ii2 = 0;
								while(ii2 < listeners.length) {
									listeners[ii2].end(entry2);
									++ii2;
								}
								if(entry2.listener != null) {
									entry2.listener.dispose(entry2);
								}
								var ii3 = 0;
								while(ii3 < listeners.length) {
									listeners[ii3].dispose(entry2);
									++ii3;
								}
								_this7.AnimationState_this.trackEntryPool.free(entry2);
								break;
							} else if(_switchCond1 == 3) {
								if(entry2.listener != null) {
									entry2.listener.dispose(entry2);
								}
								var ii4 = 0;
								while(ii4 < listeners.length) {
									listeners[ii4].dispose(entry2);
									++ii4;
								}
								_this7.AnimationState_this.trackEntryPool.free(entry2);
								break;
							} else if(_switchCond1 == 4) {
								if(entry2.listener != null) {
									entry2.listener.complete(entry2);
								}
								var ii5 = 0;
								while(ii5 < listeners.length) {
									listeners[ii5].complete(entry2);
									++ii5;
								}
								break;
							} else if(_switchCond1 == 5) {
								var event = js_Boot.__cast(objects[i1++ + 2] , spine_Event);
								if(entry2.listener != null) {
									entry2.listener.event(entry2,event);
								}
								var ii6 = 0;
								while(ii6 < listeners.length) {
									listeners[ii6].event(entry2,event);
									++ii6;
								}
								break;
							}
							break;
						}
						i1 += 2;
					}
					var this4 = _this7.objects;
					this4.splice(0,this4.length);
					_this7.drainDisabled = false;
				}
				var entry3 = entry1;
				entry3.mixDuration = mixDuration;
				entry3.trackEnd = mixDuration;
			}
			++i;
		}
		this.queue.drainDisabled = oldDrainDisabled;
		var _this = this.queue;
		if(!_this.drainDisabled) {
			_this.drainDisabled = true;
			var objects = _this.objects;
			var listeners = _this.AnimationState_this.listeners;
			var i = 0;
			while(i < objects.length) {
				var type = js_Boot.__cast(objects[i] , Int);
				var entry = js_Boot.__cast(objects[i + 1] , spine_TrackEntry);
				while(true) {
					var _switchCond1 = type;
					if(_switchCond1 == 0) {
						if(entry.listener != null) {
							entry.listener.start(entry);
						}
						var ii = 0;
						while(ii < listeners.length) {
							listeners[ii].start(entry);
							++ii;
						}
						break;
					} else if(_switchCond1 == 1) {
						if(entry.listener != null) {
							entry.listener.interrupt(entry);
						}
						var ii1 = 0;
						while(ii1 < listeners.length) {
							listeners[ii1].interrupt(entry);
							++ii1;
						}
						break;
					} else if(_switchCond1 == 2) {
						if(entry.listener != null) {
							entry.listener.end(entry);
						}
						var ii2 = 0;
						while(ii2 < listeners.length) {
							listeners[ii2].end(entry);
							++ii2;
						}
						if(entry.listener != null) {
							entry.listener.dispose(entry);
						}
						var ii3 = 0;
						while(ii3 < listeners.length) {
							listeners[ii3].dispose(entry);
							++ii3;
						}
						_this.AnimationState_this.trackEntryPool.free(entry);
						break;
					} else if(_switchCond1 == 3) {
						if(entry.listener != null) {
							entry.listener.dispose(entry);
						}
						var ii4 = 0;
						while(ii4 < listeners.length) {
							listeners[ii4].dispose(entry);
							++ii4;
						}
						_this.AnimationState_this.trackEntryPool.free(entry);
						break;
					} else if(_switchCond1 == 4) {
						if(entry.listener != null) {
							entry.listener.complete(entry);
						}
						var ii5 = 0;
						while(ii5 < listeners.length) {
							listeners[ii5].complete(entry);
							++ii5;
						}
						break;
					} else if(_switchCond1 == 5) {
						var event = js_Boot.__cast(objects[i++ + 2] , spine_Event);
						if(entry.listener != null) {
							entry.listener.event(entry,event);
						}
						var ii6 = 0;
						while(ii6 < listeners.length) {
							listeners[ii6].event(entry,event);
							++ii6;
						}
						break;
					}
					break;
				}
				i += 2;
			}
			var this1 = _this.objects;
			this1.splice(0,this1.length);
			_this.drainDisabled = false;
		}
	}
	,expandToIndex: function(index) {
		if(index < this.tracks.length) {
			return this.tracks[index];
		}
		var this1 = this.tracks;
		var size = index + 1;
		var len = this1.length;
		if(len > size) {
			this1.splice(size,size - len);
		} else if(len < size) {
			this1[size - 1] = null;
		}
		return null;
	}
	,trackEntry: function(trackIndex,animation,loop,last) {
		var entry = this.trackEntryPool.obtain();
		entry.trackIndex = trackIndex;
		entry.animation = animation;
		entry.loop = loop;
		entry.eventThreshold = 0;
		entry.attachmentThreshold = 0;
		entry.drawOrderThreshold = 0;
		entry.animationStart = 0;
		entry.animationEnd = animation.getDuration();
		entry.animationLast = -1;
		entry.nextAnimationLast = -1;
		entry.delay = 0;
		entry.trackTime = 0;
		entry.trackLast = -1;
		entry.nextTrackLast = -1;
		entry.trackEnd = 999999999.0;
		entry.timeScale = 1;
		entry.alpha = 1;
		entry.interruptAlpha = 1;
		entry.mixTime = 0;
		var tmp;
		if(last == null) {
			tmp = 0;
		} else {
			var _this = this.data;
			var from = last.animation;
			if(from == null) {
				throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("from cannot be null."));
			}
			if(animation == null) {
				throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("to cannot be null."));
			}
			_this.tempKey.a1 = from;
			_this.tempKey.a2 = animation;
			tmp = spine_support_utils_ObjectMap.get(_this.animationToMixTime,_this.tempKey,_this.defaultMix);
		}
		entry.mixDuration = tmp;
		return entry;
	}
	,disposeNext: function(entry) {
		var next = entry.next;
		while(next != null) {
			var _this = this.queue;
			_this.objects.push(3);
			_this.objects.push(next);
			next = next.next;
		}
		entry.next = null;
	}
	,handleAnimationsChanged: function() {
		this.animationsChanged = false;
		var propertyIDs = this.propertyIDs;
		var keys = [];
		var key = propertyIDs.keys();
		while(key.hasNext()) {
			var key1 = key.next();
			keys.push(key1);
		}
		var _g = 0;
		while(_g < keys.length) {
			var key = keys[_g];
			++_g;
			propertyIDs.remove(key);
		}
		var mixingTo = this.mixingTo;
		var i = 0;
		var n = this.tracks.length;
		while(i < n) {
			var entry = this.tracks[i];
			if(entry != null) {
				var to = null;
				if(to != null) {
					mixingTo.push(to);
				}
				var lastEntry;
				if(entry.mixingFrom != null) {
					var _this = entry.mixingFrom;
					if(entry != null) {
						mixingTo.push(entry);
					}
					var lastEntry1 = _this.mixingFrom != null ? _this.mixingFrom.setTimelineData(_this,mixingTo,propertyIDs) : _this;
					if(entry != null) {
						mixingTo.pop();
					}
					var mixingTo1 = mixingTo;
					var mixingToLast = mixingTo.length - 1;
					var timelines = _this.animation.timelines;
					var timelinesCount = _this.animation.timelines.length;
					var this1 = _this.timelineData;
					var len = this1.length;
					if(len > timelinesCount) {
						this1.splice(timelinesCount,timelinesCount - len);
					} else if(len < timelinesCount) {
						while(len < timelinesCount) {
							this1.push(0);
							++len;
						}
					}
					var timelineData = this1;
					var this2 = _this.timelineDipMix;
					this2.splice(0,this2.length);
					var this3 = _this.timelineDipMix;
					var len1 = this3.length;
					if(len1 > timelinesCount) {
						this3.splice(timelinesCount,timelinesCount - len1);
					} else if(len1 < timelinesCount) {
						this3[timelinesCount - 1] = null;
					}
					var timelineDipMix = this3;
					var _gotoLabel_outer;
					while(true) {
						_gotoLabel_outer = 0;
						var i1 = 0;
						while(i1 < timelinesCount) {
							var id = (js_Boot.__cast(timelines[i1] , spine_Timeline)).getPropertyId();
							var lastEntry2;
							if(propertyIDs.h.hasOwnProperty(id)) {
								lastEntry2 = false;
							} else {
								propertyIDs.h[id] = true;
								lastEntry2 = true;
							}
							if(!lastEntry2) {
								timelineData[i1] = 0;
							} else if(entry == null || !entry.hasTimeline(id)) {
								timelineData[i1] = 1;
							} else {
								var ii = mixingToLast;
								while(ii >= 0) {
									var entry1 = js_Boot.__cast(mixingTo1[ii] , spine_TrackEntry);
									if(!entry1.hasTimeline(id)) {
										if(entry1.mixDuration > 0) {
											timelineData[i1] = 3;
											timelineDipMix[i1] = entry1;
											--ii;
											_gotoLabel_outer = 2;
											break;
										}
										break;
									}
									--ii;
								}
								if(_gotoLabel_outer == 2) {
									_gotoLabel_outer = 0;
									++i1;
									continue;
								}
								if(_gotoLabel_outer >= 1) {
									break;
								}
								timelineData[i1] = 2;
							}
							++i1;
						}
						if(_gotoLabel_outer == 0) {
							break;
						}
					}
					lastEntry = lastEntry1;
				} else {
					lastEntry = entry;
				}
				if(to != null) {
					mixingTo.pop();
				}
				var mixingTo2 = mixingTo;
				var mixingToLast1 = mixingTo.length - 1;
				var timelines1 = entry.animation.timelines;
				var timelinesCount1 = entry.animation.timelines.length;
				var this4 = entry.timelineData;
				var len2 = this4.length;
				if(len2 > timelinesCount1) {
					this4.splice(timelinesCount1,timelinesCount1 - len2);
				} else if(len2 < timelinesCount1) {
					while(len2 < timelinesCount1) {
						this4.push(0);
						++len2;
					}
				}
				var timelineData1 = this4;
				var this5 = entry.timelineDipMix;
				this5.splice(0,this5.length);
				var this6 = entry.timelineDipMix;
				var len3 = this6.length;
				if(len3 > timelinesCount1) {
					this6.splice(timelinesCount1,timelinesCount1 - len3);
				} else if(len3 < timelinesCount1) {
					this6[timelinesCount1 - 1] = null;
				}
				var timelineDipMix1 = this6;
				var _gotoLabel_outer1;
				while(true) {
					_gotoLabel_outer1 = 0;
					var i2 = 0;
					while(i2 < timelinesCount1) {
						var id1 = (js_Boot.__cast(timelines1[i2] , spine_Timeline)).getPropertyId();
						var tmp;
						if(propertyIDs.h.hasOwnProperty(id1)) {
							tmp = false;
						} else {
							propertyIDs.h[id1] = true;
							tmp = true;
						}
						if(!tmp) {
							timelineData1[i2] = 0;
						} else if(to == null || !to.hasTimeline(id1)) {
							timelineData1[i2] = 1;
						} else {
							var ii1 = mixingToLast1;
							while(ii1 >= 0) {
								var entry2 = js_Boot.__cast(mixingTo2[ii1] , spine_TrackEntry);
								if(!entry2.hasTimeline(id1)) {
									if(entry2.mixDuration > 0) {
										timelineData1[i2] = 3;
										timelineDipMix1[i2] = entry2;
										--ii1;
										_gotoLabel_outer1 = 2;
										break;
									}
									break;
								}
								--ii1;
							}
							if(_gotoLabel_outer1 == 2) {
								_gotoLabel_outer1 = 0;
								++i2;
								continue;
							}
							if(_gotoLabel_outer1 >= 1) {
								break;
							}
							timelineData1[i2] = 2;
						}
						++i2;
					}
					if(_gotoLabel_outer1 == 0) {
						break;
					}
				}
			}
			++i;
		}
	}
	,getCurrent: function(trackIndex) {
		if(trackIndex >= this.tracks.length) {
			return null;
		}
		return this.tracks[trackIndex];
	}
	,addListener: function(listener) {
		if(listener == null) {
			throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("listener cannot be null."));
		}
		this.listeners.push(listener);
	}
	,removeListener: function(listener) {
		var this1 = this.listeners;
		var index = this1.indexOf(listener);
		if(index != -1) {
			this1.splice(index,1);
		}
	}
	,clearListeners: function() {
		var this1 = this.listeners;
		this1.splice(0,this1.length);
	}
	,clearListenerNotifications: function() {
		var this1 = this.queue.objects;
		this1.splice(0,this1.length);
	}
	,getTimeScale: function() {
		return this.timeScale;
	}
	,setTimeScale: function(timeScale) {
		this.timeScale = timeScale;
	}
	,getData: function() {
		return this.data;
	}
	,setData: function(data) {
		if(data == null) {
			throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("data cannot be null."));
		}
		this.data = data;
	}
	,getTracks: function() {
		return this.tracks;
	}
	,toString: function() {
		var buffer_b = "";
		var i = 0;
		var n = this.tracks.length;
		while(i < n) {
			var entry = this.tracks[i];
			if(entry == null) {
				++i;
				continue;
			}
			if(buffer_b.length > 0) {
				buffer_b += ", ";
			}
			buffer_b += Std.string(entry.animation == null ? "<none>" : entry.animation.name);
			++i;
		}
		if(buffer_b.length == 0) {
			return "<none>";
		}
		return buffer_b;
	}
	,__class__: spine_AnimationState
};
var spine_support_utils_Poolable = function() { };
$hxClasses["spine.support.utils.Poolable"] = spine_support_utils_Poolable;
spine_support_utils_Poolable.__name__ = "spine.support.utils.Poolable";
spine_support_utils_Poolable.__isInterface__ = true;
spine_support_utils_Poolable.prototype = {
	reset: null
	,__class__: spine_support_utils_Poolable
};
var spine_TrackEntry = function() {
	this.timelinesRotation = [];
	this.timelineDipMix = [];
	this.timelineData = [];
	this.totalAlpha = 0;
	this.interruptAlpha = 0;
	this.mixDuration = 0;
	this.mixTime = 0;
	this.alpha = 0;
	this.timeScale = 0;
	this.trackEnd = 0;
	this.nextTrackLast = 0;
	this.trackLast = 0;
	this.trackTime = 0;
	this.delay = 0;
	this.nextAnimationLast = 0;
	this.animationLast = 0;
	this.animationEnd = 0;
	this.animationStart = 0;
	this.drawOrderThreshold = 0;
	this.attachmentThreshold = 0;
	this.eventThreshold = 0;
	this.loop = false;
	this.trackIndex = 0;
	this.mixingFrom = null;
};
$hxClasses["spine.TrackEntry"] = spine_TrackEntry;
spine_TrackEntry.__name__ = "spine.TrackEntry";
spine_TrackEntry.__interfaces__ = [spine_support_utils_Poolable];
spine_TrackEntry.prototype = {
	animation: null
	,next: null
	,mixingFrom: null
	,listener: null
	,trackIndex: null
	,loop: null
	,eventThreshold: null
	,attachmentThreshold: null
	,drawOrderThreshold: null
	,animationStart: null
	,animationEnd: null
	,animationLast: null
	,nextAnimationLast: null
	,delay: null
	,trackTime: null
	,trackLast: null
	,nextTrackLast: null
	,trackEnd: null
	,timeScale: null
	,alpha: null
	,mixTime: null
	,mixDuration: null
	,interruptAlpha: null
	,totalAlpha: null
	,timelineData: null
	,timelineDipMix: null
	,timelinesRotation: null
	,reset: function() {
		this.next = null;
		this.mixingFrom = null;
		this.animation = null;
		this.listener = null;
		var this1 = this.timelineData;
		this1.splice(0,this1.length);
		var this1 = this.timelineDipMix;
		this1.splice(0,this1.length);
		var this1 = this.timelinesRotation;
		this1.splice(0,this1.length);
	}
	,setTimelineData: function(to,mixingToArray,propertyIDs) {
		if(to != null) {
			mixingToArray.push(to);
		}
		var lastEntry = this.mixingFrom != null ? this.mixingFrom.setTimelineData(this,mixingToArray,propertyIDs) : this;
		if(to != null) {
			mixingToArray.pop();
		}
		var mixingTo = mixingToArray;
		var mixingToLast = mixingToArray.length - 1;
		var timelines = this.animation.timelines;
		var timelinesCount = this.animation.timelines.length;
		var this1 = this.timelineData;
		var len = this1.length;
		if(len > timelinesCount) {
			this1.splice(timelinesCount,timelinesCount - len);
		} else if(len < timelinesCount) {
			while(len < timelinesCount) {
				this1.push(0);
				++len;
			}
		}
		var timelineData = this1;
		var this1 = this.timelineDipMix;
		this1.splice(0,this1.length);
		var this1 = this.timelineDipMix;
		var len = this1.length;
		if(len > timelinesCount) {
			this1.splice(timelinesCount,timelinesCount - len);
		} else if(len < timelinesCount) {
			this1[timelinesCount - 1] = null;
		}
		var timelineDipMix = this1;
		var _gotoLabel_outer;
		while(true) {
			_gotoLabel_outer = 0;
			var i = 0;
			while(i < timelinesCount) {
				var id = (js_Boot.__cast(timelines[i] , spine_Timeline)).getPropertyId();
				var tmp;
				if(propertyIDs.h.hasOwnProperty(id)) {
					tmp = false;
				} else {
					propertyIDs.h[id] = true;
					tmp = true;
				}
				if(!tmp) {
					timelineData[i] = 0;
				} else if(to == null || !to.hasTimeline(id)) {
					timelineData[i] = 1;
				} else {
					var ii = mixingToLast;
					while(ii >= 0) {
						var entry = js_Boot.__cast(mixingTo[ii] , spine_TrackEntry);
						if(!entry.hasTimeline(id)) {
							if(entry.mixDuration > 0) {
								timelineData[i] = 3;
								timelineDipMix[i] = entry;
								--ii;
								_gotoLabel_outer = 2;
								break;
							}
							break;
						}
						--ii;
					}
					if(_gotoLabel_outer == 2) {
						_gotoLabel_outer = 0;
						++i;
						continue;
					}
					if(_gotoLabel_outer >= 1) {
						break;
					}
					timelineData[i] = 2;
				}
				++i;
			}
			if(_gotoLabel_outer == 0) {
				break;
			}
		}
		return lastEntry;
	}
	,hasTimeline: function(id) {
		var timelines = this.animation.timelines;
		var i = 0;
		var n = this.animation.timelines.length;
		while(i < n) {
			if((js_Boot.__cast(timelines[i] , spine_Timeline)).getPropertyId() == id) {
				return true;
			}
			++i;
		}
		return false;
	}
	,getTrackIndex: function() {
		return this.trackIndex;
	}
	,getAnimation: function() {
		return this.animation;
	}
	,setAnimation: function(animation) {
		this.animation = animation;
	}
	,getLoop: function() {
		return this.loop;
	}
	,setLoop: function(loop) {
		this.loop = loop;
	}
	,getDelay: function() {
		return this.delay;
	}
	,setDelay: function(delay) {
		this.delay = delay;
	}
	,getTrackTime: function() {
		return this.trackTime;
	}
	,setTrackTime: function(trackTime) {
		this.trackTime = trackTime;
	}
	,getTrackEnd: function() {
		return this.trackEnd;
	}
	,setTrackEnd: function(trackEnd) {
		this.trackEnd = trackEnd;
	}
	,getAnimationStart: function() {
		return this.animationStart;
	}
	,setAnimationStart: function(animationStart) {
		this.animationStart = animationStart;
	}
	,getAnimationEnd: function() {
		return this.animationEnd;
	}
	,setAnimationEnd: function(animationEnd) {
		this.animationEnd = animationEnd;
	}
	,getAnimationLast: function() {
		return this.animationLast;
	}
	,setAnimationLast: function(animationLast) {
		this.animationLast = animationLast;
		this.nextAnimationLast = animationLast;
	}
	,getAnimationTime: function() {
		if(this.loop) {
			var duration = this.animationEnd - this.animationStart;
			if(duration == 0) {
				return this.animationStart;
			}
			return this.trackTime % duration + this.animationStart;
		}
		return Math.min(this.trackTime + this.animationStart,this.animationEnd);
	}
	,getTimeScale: function() {
		return this.timeScale;
	}
	,setTimeScale: function(timeScale) {
		this.timeScale = timeScale;
	}
	,getListener: function() {
		return this.listener;
	}
	,setListener: function(listener) {
		this.listener = listener;
	}
	,getAlpha: function() {
		return this.alpha;
	}
	,setAlpha: function(alpha) {
		this.alpha = alpha;
	}
	,getEventThreshold: function() {
		return this.eventThreshold;
	}
	,setEventThreshold: function(eventThreshold) {
		this.eventThreshold = eventThreshold;
	}
	,getAttachmentThreshold: function() {
		return this.attachmentThreshold;
	}
	,setAttachmentThreshold: function(attachmentThreshold) {
		this.attachmentThreshold = attachmentThreshold;
	}
	,getDrawOrderThreshold: function() {
		return this.drawOrderThreshold;
	}
	,setDrawOrderThreshold: function(drawOrderThreshold) {
		this.drawOrderThreshold = drawOrderThreshold;
	}
	,getNext: function() {
		return this.next;
	}
	,isComplete: function() {
		return this.trackTime >= this.animationEnd - this.animationStart;
	}
	,getMixTime: function() {
		return this.mixTime;
	}
	,setMixTime: function(mixTime) {
		this.mixTime = mixTime;
	}
	,getMixDuration: function() {
		return this.mixDuration;
	}
	,setMixDuration: function(mixDuration) {
		this.mixDuration = mixDuration;
	}
	,getMixingFrom: function() {
		return this.mixingFrom;
	}
	,resetRotationDirections: function() {
		var this1 = this.timelinesRotation;
		this1.splice(0,this1.length);
	}
	,toString: function() {
		if(this.animation == null) {
			return "<none>";
		} else {
			return this.animation.name;
		}
	}
	,__class__: spine_TrackEntry
};
var spine_EventQueue = function() {
	this.drainDisabled = false;
	this.objects = [];
};
$hxClasses["spine.EventQueue"] = spine_EventQueue;
spine_EventQueue.__name__ = "spine.EventQueue";
spine_EventQueue.prototype = {
	AnimationState_this: null
	,objects: null
	,drainDisabled: null
	,start: function(entry) {
		this.objects.push(0);
		this.objects.push(entry);
		this.AnimationState_this.animationsChanged = true;
	}
	,interrupt: function(entry) {
		this.objects.push(1);
		this.objects.push(entry);
	}
	,end: function(entry) {
		this.objects.push(2);
		this.objects.push(entry);
		this.AnimationState_this.animationsChanged = true;
	}
	,dispose: function(entry) {
		this.objects.push(3);
		this.objects.push(entry);
	}
	,complete: function(entry) {
		this.objects.push(4);
		this.objects.push(entry);
	}
	,event: function(entry,event) {
		this.objects.push(5);
		this.objects.push(entry);
		this.objects.push(event);
	}
	,drain: function() {
		if(this.drainDisabled) {
			return;
		}
		this.drainDisabled = true;
		var objects = this.objects;
		var listeners = this.AnimationState_this.listeners;
		var i = 0;
		while(i < objects.length) {
			var type = js_Boot.__cast(objects[i] , Int);
			var entry = js_Boot.__cast(objects[i + 1] , spine_TrackEntry);
			var _continueAfterSwitch1 = false;
			while(true) {
				var _switchCond1 = type;
				if(_switchCond1 == 0) {
					if(entry.listener != null) {
						entry.listener.start(entry);
					}
					var ii = 0;
					while(ii < listeners.length) {
						listeners[ii].start(entry);
						++ii;
					}
					break;
				} else if(_switchCond1 == 1) {
					if(entry.listener != null) {
						entry.listener.interrupt(entry);
					}
					var ii1 = 0;
					while(ii1 < listeners.length) {
						listeners[ii1].interrupt(entry);
						++ii1;
					}
					break;
				} else if(_switchCond1 == 2) {
					if(entry.listener != null) {
						entry.listener.end(entry);
					}
					var ii2 = 0;
					while(ii2 < listeners.length) {
						listeners[ii2].end(entry);
						++ii2;
					}
					if(entry.listener != null) {
						entry.listener.dispose(entry);
					}
					var ii3 = 0;
					while(ii3 < listeners.length) {
						listeners[ii3].dispose(entry);
						++ii3;
					}
					this.AnimationState_this.trackEntryPool.free(entry);
					break;
				} else if(_switchCond1 == 3) {
					if(entry.listener != null) {
						entry.listener.dispose(entry);
					}
					var ii4 = 0;
					while(ii4 < listeners.length) {
						listeners[ii4].dispose(entry);
						++ii4;
					}
					this.AnimationState_this.trackEntryPool.free(entry);
					break;
				} else if(_switchCond1 == 4) {
					if(entry.listener != null) {
						entry.listener.complete(entry);
					}
					var ii5 = 0;
					while(ii5 < listeners.length) {
						listeners[ii5].complete(entry);
						++ii5;
					}
					break;
				} else if(_switchCond1 == 5) {
					var event = js_Boot.__cast(objects[i++ + 2] , spine_Event);
					if(entry.listener != null) {
						entry.listener.event(entry,event);
					}
					var ii6 = 0;
					while(ii6 < listeners.length) {
						listeners[ii6].event(entry,event);
						++ii6;
					}
					break;
				}
				break;
			}
			i += 2;
		}
		var this1 = this.objects;
		this1.splice(0,this1.length);
		this.drainDisabled = false;
	}
	,clear: function() {
		var this1 = this.objects;
		this1.splice(0,this1.length);
	}
	,__class__: spine_EventQueue
};
var spine_AnimationStateListener = function() { };
$hxClasses["spine.AnimationStateListener"] = spine_AnimationStateListener;
spine_AnimationStateListener.__name__ = "spine.AnimationStateListener";
spine_AnimationStateListener.__isInterface__ = true;
spine_AnimationStateListener.prototype = {
	start: null
	,interrupt: null
	,end: null
	,dispose: null
	,complete: null
	,event: null
	,__class__: spine_AnimationStateListener
};
var spine_AnimationStateAdapter = function() {
};
$hxClasses["spine.AnimationStateAdapter"] = spine_AnimationStateAdapter;
spine_AnimationStateAdapter.__name__ = "spine.AnimationStateAdapter";
spine_AnimationStateAdapter.__interfaces__ = [spine_AnimationStateListener];
spine_AnimationStateAdapter.prototype = {
	start: function(entry) {
	}
	,interrupt: function(entry) {
	}
	,end: function(entry) {
	}
	,dispose: function(entry) {
	}
	,complete: function(entry) {
	}
	,event: function(entry,event) {
	}
	,__class__: spine_AnimationStateAdapter
};
var spine_support_utils_Pool = function(initialCapacity,max) {
	if(max == null) {
		max = 999999999;
	}
	if(initialCapacity == null) {
		initialCapacity = 64;
	}
	this.peak = 0;
	this.max = 0;
	this.freeObjects = [];
	this.max = max;
};
$hxClasses["spine.support.utils.Pool"] = spine_support_utils_Pool;
spine_support_utils_Pool.__name__ = "spine.support.utils.Pool";
spine_support_utils_Pool.prototype = {
	max: null
	,peak: null
	,freeObjects: null
	,free: function(object) {
		if(object == null) {
			throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("object cannot be null."));
		}
		if(this.freeObjects.length < this.max) {
			this.freeObjects.push(object);
			this.peak = Math.max(this.peak,this.freeObjects.length);
		}
		this.reset(object);
	}
	,reset: function(object) {
		if(js_Boot.__implements(object,spine_support_utils_Poolable)) {
			(js_Boot.__cast(object , spine_support_utils_Poolable)).reset();
		}
	}
	,freeAll: function(objects) {
		if(objects == null) {
			throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("objects cannot be null."));
		}
		var freeObjects = this.freeObjects;
		var max = this.max;
		var i = 0;
		while(i < objects.length) {
			var object = objects[i];
			if(object == null) {
				++i;
				continue;
			}
			if(freeObjects.length < max) {
				freeObjects.push(object);
			}
			this.reset(object);
			++i;
		}
		this.peak = Math.max(this.peak,freeObjects.length);
	}
	,clear: function() {
		var this1 = this.freeObjects;
		this1.splice(0,this1.length);
	}
	,getFree: function() {
		return this.freeObjects.length;
	}
	,newObject: function() {
		return null;
	}
	,obtain: function() {
		if(this.freeObjects.length == 0) {
			return this.newObject();
		} else {
			return this.freeObjects.pop();
		}
	}
	,__class__: spine_support_utils_Pool
};
var spine__$AnimationState_TrackEntryPool = function(initialCapacity,max) {
	spine_support_utils_Pool.call(this,initialCapacity,max);
};
$hxClasses["spine._AnimationState.TrackEntryPool"] = spine__$AnimationState_TrackEntryPool;
spine__$AnimationState_TrackEntryPool.__name__ = "spine._AnimationState.TrackEntryPool";
spine__$AnimationState_TrackEntryPool.__super__ = spine_support_utils_Pool;
spine__$AnimationState_TrackEntryPool.prototype = $extend(spine_support_utils_Pool.prototype,{
	newObject: function() {
		return new spine_TrackEntry();
	}
	,__class__: spine__$AnimationState_TrackEntryPool
});
var spine_EventType_$enum = function() { };
$hxClasses["spine.EventType_enum"] = spine_EventType_$enum;
spine_EventType_$enum.__name__ = "spine.EventType_enum";
spine_EventType_$enum.valueOf = function(value) {
	switch(value) {
	case "complete":
		return 4;
	case "dispose":
		return 3;
	case "end":
		return 2;
	case "event":
		return 5;
	case "interrupt":
		return 1;
	case "start":
		return 0;
	default:
		return 0;
	}
};
var spine_AnimationStateData = function(skeletonData) {
	this.defaultMix = 0;
	this.tempKey = new spine__$AnimationStateData_Key();
	this.animationToMixTime = new haxe_ds_IntMap();
	if(skeletonData == null) {
		throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("skeletonData cannot be null."));
	}
	this.skeletonData = skeletonData;
};
$hxClasses["spine.AnimationStateData"] = spine_AnimationStateData;
spine_AnimationStateData.__name__ = "spine.AnimationStateData";
spine_AnimationStateData.prototype = {
	skeletonData: null
	,animationToMixTime: null
	,tempKey: null
	,defaultMix: null
	,getSkeletonData: function() {
		return this.skeletonData;
	}
	,setMixByName: function(fromName,toName,duration) {
		var from = this.skeletonData.findAnimation(fromName);
		if(from == null) {
			throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("Animation not found: " + fromName));
		}
		var to = this.skeletonData.findAnimation(toName);
		if(to == null) {
			throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("Animation not found: " + toName));
		}
		if(from == null) {
			throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("from cannot be null."));
		}
		if(to == null) {
			throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("to cannot be null."));
		}
		var key = new spine__$AnimationStateData_Key();
		key.a1 = from;
		key.a2 = to;
		spine_support_utils_ObjectMap.put(this.animationToMixTime,key,duration);
	}
	,setMix: function(from,to,duration) {
		if(from == null) {
			throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("from cannot be null."));
		}
		if(to == null) {
			throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("to cannot be null."));
		}
		var key = new spine__$AnimationStateData_Key();
		key.a1 = from;
		key.a2 = to;
		spine_support_utils_ObjectMap.put(this.animationToMixTime,key,duration);
	}
	,getMix: function(from,to) {
		if(from == null) {
			throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("from cannot be null."));
		}
		if(to == null) {
			throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("to cannot be null."));
		}
		this.tempKey.a1 = from;
		this.tempKey.a2 = to;
		return spine_support_utils_ObjectMap.get(this.animationToMixTime,this.tempKey,this.defaultMix);
	}
	,getDefaultMix: function() {
		return this.defaultMix;
	}
	,setDefaultMix: function(defaultMix) {
		this.defaultMix = defaultMix;
	}
	,__class__: spine_AnimationStateData
};
var spine__$AnimationStateData_Key = function() {
	this.a2 = null;
};
$hxClasses["spine._AnimationStateData.Key"] = spine__$AnimationStateData_Key;
spine__$AnimationStateData_Key.__name__ = "spine._AnimationStateData.Key";
spine__$AnimationStateData_Key.prototype = {
	a1: null
	,a2: null
	,getHashCode: function() {
		return 31 * (31 + this.a1.hashCode) + this.a2.hashCode;
	}
	,equals: function(obj) {
		if(this == obj) {
			return true;
		}
		if(obj == null) {
			return false;
		}
		var other = js_Boot.__cast(obj , spine__$AnimationStateData_Key);
		if(this.a1 == null) {
			if(other.a1 != null) {
				return false;
			}
		} else if(this.a1 != other.a1) {
			return false;
		}
		if(this.a2 == null) {
			if(other.a2 != null) {
				return false;
			}
		} else if(this.a2 != other.a2) {
			return false;
		}
		return true;
	}
	,toString: function() {
		return this.a1.name + "->" + this.a2.name;
	}
	,__class__: spine__$AnimationStateData_Key
};
var spine_BlendMode_$enum = function() { };
$hxClasses["spine.BlendMode_enum"] = spine_BlendMode_$enum;
spine_BlendMode_$enum.__name__ = "spine.BlendMode_enum";
spine_BlendMode_$enum.valueOf = function(value) {
	switch(value) {
	case "additive":
		return 1;
	case "multiply":
		return 2;
	case "normal":
		return 0;
	case "screen":
		return 3;
	default:
		return 0;
	}
};
var spine_Updatable = function() { };
$hxClasses["spine.Updatable"] = spine_Updatable;
spine_Updatable.__name__ = "spine.Updatable";
spine_Updatable.__isInterface__ = true;
spine_Updatable.prototype = {
	update: null
	,__class__: spine_Updatable
};
var spine_Bone = function(data,skeleton,parent) {
	this.sorted = false;
	this.worldY = 0;
	this.d = 0;
	this.c = 0;
	this.worldX = 0;
	this.b = 0;
	this.a = 0;
	this.appliedValid = false;
	this.ashearY = 0;
	this.ashearX = 0;
	this.ascaleY = 0;
	this.ascaleX = 0;
	this.arotation = 0;
	this.ay = 0;
	this.ax = 0;
	this.shearY = 0;
	this.shearX = 0;
	this.scaleY = 0;
	this.scaleX = 0;
	this.rotation = 0;
	this.y = 0;
	this.x = 0;
	this.children = [];
	if(data == null) {
		throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("data cannot be null."));
	}
	if(skeleton == null) {
		throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("skeleton cannot be null."));
	}
	this.data = data;
	this.skeleton = skeleton;
	this.parent = parent;
	var data = this.data;
	this.x = data.x;
	this.y = data.y;
	this.rotation = data.rotation;
	this.scaleX = data.scaleX;
	this.scaleY = data.scaleY;
	this.shearX = data.shearX;
	this.shearY = data.shearY;
};
$hxClasses["spine.Bone"] = spine_Bone;
spine_Bone.__name__ = "spine.Bone";
spine_Bone.__interfaces__ = [spine_Updatable];
spine_Bone.prototype = {
	data: null
	,skeleton: null
	,parent: null
	,children: null
	,x: null
	,y: null
	,rotation: null
	,scaleX: null
	,scaleY: null
	,shearX: null
	,shearY: null
	,ax: null
	,ay: null
	,arotation: null
	,ascaleX: null
	,ascaleY: null
	,ashearX: null
	,ashearY: null
	,appliedValid: null
	,a: null
	,b: null
	,worldX: null
	,c: null
	,d: null
	,worldY: null
	,sorted: null
	,update: function() {
		this.updateWorldTransformWithData(this.x,this.y,this.rotation,this.scaleX,this.scaleY,this.shearX,this.shearY);
	}
	,updateWorldTransform: function() {
		this.updateWorldTransformWithData(this.x,this.y,this.rotation,this.scaleX,this.scaleY,this.shearX,this.shearY);
	}
	,updateWorldTransformWithData: function(x,y,rotation,scaleX,scaleY,shearX,shearY) {
		this.ax = x;
		this.ay = y;
		this.arotation = rotation;
		this.ascaleX = scaleX;
		this.ascaleY = scaleY;
		this.ashearX = shearX;
		this.ashearY = shearY;
		this.appliedValid = true;
		var parent = this.parent;
		if(parent == null) {
			var rotationY = rotation + 90 + shearY;
			var la = js_Boot.__cast(Math.cos((rotation + shearX) * spine_utils_SpineUtils.degRad) , Float) * scaleX;
			var lb = js_Boot.__cast(Math.cos(rotationY * spine_utils_SpineUtils.degRad) , Float) * scaleY;
			var lc = js_Boot.__cast(Math.sin((rotation + shearX) * spine_utils_SpineUtils.degRad) , Float) * scaleX;
			var ld = js_Boot.__cast(Math.sin(rotationY * spine_utils_SpineUtils.degRad) , Float) * scaleY;
			var skeleton = this.skeleton;
			if(skeleton.flipX) {
				x = -x;
				la = -la;
				lb = -lb;
			}
			if(skeleton.flipY) {
				y = -y;
				lc = -lc;
				ld = -ld;
			}
			this.a = la;
			this.b = lb;
			this.c = lc;
			this.d = ld;
			this.worldX = x + skeleton.x;
			this.worldY = y + skeleton.y;
			return;
		}
		var pa = parent.a;
		var pb = parent.b;
		var pc = parent.c;
		var pd = parent.d;
		this.worldX = pa * x + pb * y + parent.worldX;
		this.worldY = pc * x + pd * y + parent.worldY;
		var _continueAfterSwitch0 = false;
		while(true) {
			var _switchCond0 = this.data.transformMode;
			if(_switchCond0 == 0) {
				var rotationY = rotation + 90 + shearY;
				var la = js_Boot.__cast(Math.cos((rotation + shearX) * spine_utils_SpineUtils.degRad) , Float) * scaleX;
				var lb = js_Boot.__cast(Math.cos(rotationY * spine_utils_SpineUtils.degRad) , Float) * scaleY;
				var lc = js_Boot.__cast(Math.sin((rotation + shearX) * spine_utils_SpineUtils.degRad) , Float) * scaleX;
				var ld = js_Boot.__cast(Math.sin(rotationY * spine_utils_SpineUtils.degRad) , Float) * scaleY;
				this.a = pa * la + pb * lc;
				this.b = pa * lb + pb * ld;
				this.c = pc * la + pd * lc;
				this.d = pc * lb + pd * ld;
				return;
			} else if(_switchCond0 == 1) {
				var rotationY1 = rotation + 90 + shearY;
				this.a = js_Boot.__cast(Math.cos((rotation + shearX) * spine_utils_SpineUtils.degRad) , Float) * scaleX;
				this.b = js_Boot.__cast(Math.cos(rotationY1 * spine_utils_SpineUtils.degRad) , Float) * scaleY;
				this.c = js_Boot.__cast(Math.sin((rotation + shearX) * spine_utils_SpineUtils.degRad) , Float) * scaleX;
				this.d = js_Boot.__cast(Math.sin(rotationY1 * spine_utils_SpineUtils.degRad) , Float) * scaleY;
				break;
			} else if(_switchCond0 == 2) {
				var s = pa * pa + pc * pc;
				var prx = 0;
				if(s > 0.0001) {
					s = Math.abs(pa * pd - pb * pc) / s;
					pb = pc * s;
					pd = pa * s;
					prx = js_Boot.__cast(Math.atan2(pc,pa) , Float) * spine_utils_SpineUtils.radDeg;
				} else {
					pa = 0;
					pc = 0;
					prx = 90 - js_Boot.__cast(Math.atan2(pd,pb) , Float) * spine_utils_SpineUtils.radDeg;
				}
				var rx = rotation + shearX - prx;
				var ry = rotation + shearY - prx + 90;
				var la1 = js_Boot.__cast(Math.cos(rx * spine_utils_SpineUtils.degRad) , Float) * scaleX;
				var lb1 = js_Boot.__cast(Math.cos(ry * spine_utils_SpineUtils.degRad) , Float) * scaleY;
				var lc1 = js_Boot.__cast(Math.sin(rx * spine_utils_SpineUtils.degRad) , Float) * scaleX;
				var ld1 = js_Boot.__cast(Math.sin(ry * spine_utils_SpineUtils.degRad) , Float) * scaleY;
				this.a = pa * la1 - pb * lc1;
				this.b = pa * lb1 - pb * ld1;
				this.c = pc * la1 + pd * lc1;
				this.d = pc * lb1 + pd * ld1;
				break;
			} else if(_switchCond0 == 3) {
				var cos = js_Boot.__cast(Math.cos(rotation * spine_utils_SpineUtils.degRad) , Float);
				var sin = js_Boot.__cast(Math.sin(rotation * spine_utils_SpineUtils.degRad) , Float);
				var za = pa * cos + pb * sin;
				var zc = pc * cos + pd * sin;
				var s1 = js_Boot.__cast(Math.sqrt(za * za + zc * zc) , Float);
				if(s1 > 0.00001) {
					s1 = 1 / s1;
				}
				za *= s1;
				zc *= s1;
				s1 = js_Boot.__cast(Math.sqrt(za * za + zc * zc) , Float);
				var r = 1.57079635 + js_Boot.__cast(Math.atan2(zc,za) , Float);
				var zb = Math.cos(r) * s1;
				var zd = Math.sin(r) * s1;
				var la2 = js_Boot.__cast(Math.cos(shearX * spine_utils_SpineUtils.degRad) , Float) * scaleX;
				var lb2 = js_Boot.__cast(Math.cos((90 + shearY) * spine_utils_SpineUtils.degRad) , Float) * scaleY;
				var lc2 = js_Boot.__cast(Math.sin(shearX * spine_utils_SpineUtils.degRad) , Float) * scaleX;
				var ld2 = js_Boot.__cast(Math.sin((90 + shearY) * spine_utils_SpineUtils.degRad) , Float) * scaleY;
				if(this.data.transformMode != 4 ? pa * pd - pb * pc < 0 : this.skeleton.flipX != this.skeleton.flipY) {
					zb = -zb;
					zd = -zd;
				}
				this.a = za * la2 + zb * lc2;
				this.b = za * lb2 + zb * ld2;
				this.c = zc * la2 + zd * lc2;
				this.d = zc * lb2 + zd * ld2;
				return;
			} else if(_switchCond0 == 4) {
				var cos1 = js_Boot.__cast(Math.cos(rotation * spine_utils_SpineUtils.degRad) , Float);
				var sin1 = js_Boot.__cast(Math.sin(rotation * spine_utils_SpineUtils.degRad) , Float);
				var za1 = pa * cos1 + pb * sin1;
				var zc1 = pc * cos1 + pd * sin1;
				var s2 = js_Boot.__cast(Math.sqrt(za1 * za1 + zc1 * zc1) , Float);
				if(s2 > 0.00001) {
					s2 = 1 / s2;
				}
				za1 *= s2;
				zc1 *= s2;
				s2 = js_Boot.__cast(Math.sqrt(za1 * za1 + zc1 * zc1) , Float);
				var r1 = 1.57079635 + js_Boot.__cast(Math.atan2(zc1,za1) , Float);
				var zb1 = Math.cos(r1) * s2;
				var zd1 = Math.sin(r1) * s2;
				var la3 = js_Boot.__cast(Math.cos(shearX * spine_utils_SpineUtils.degRad) , Float) * scaleX;
				var lb3 = js_Boot.__cast(Math.cos((90 + shearY) * spine_utils_SpineUtils.degRad) , Float) * scaleY;
				var lc3 = js_Boot.__cast(Math.sin(shearX * spine_utils_SpineUtils.degRad) , Float) * scaleX;
				var ld3 = js_Boot.__cast(Math.sin((90 + shearY) * spine_utils_SpineUtils.degRad) , Float) * scaleY;
				if(this.data.transformMode != 4 ? pa * pd - pb * pc < 0 : this.skeleton.flipX != this.skeleton.flipY) {
					zb1 = -zb1;
					zd1 = -zd1;
				}
				this.a = za1 * la3 + zb1 * lc3;
				this.b = za1 * lb3 + zb1 * ld3;
				this.c = zc1 * la3 + zd1 * lc3;
				this.d = zc1 * lb3 + zd1 * ld3;
				return;
			}
			break;
		}
		if(this.skeleton.flipX) {
			this.a = -this.a;
			this.b = -this.b;
		}
		if(this.skeleton.flipY) {
			this.c = -this.c;
			this.d = -this.d;
		}
	}
	,setToSetupPose: function() {
		var data = this.data;
		this.x = data.x;
		this.y = data.y;
		this.rotation = data.rotation;
		this.scaleX = data.scaleX;
		this.scaleY = data.scaleY;
		this.shearX = data.shearX;
		this.shearY = data.shearY;
	}
	,getData: function() {
		return this.data;
	}
	,getSkeleton: function() {
		return this.skeleton;
	}
	,getParent: function() {
		return this.parent;
	}
	,getChildren: function() {
		return this.children;
	}
	,getX: function() {
		return this.x;
	}
	,setX: function(x) {
		this.x = x;
	}
	,getY: function() {
		return this.y;
	}
	,setY: function(y) {
		this.y = y;
	}
	,setPosition: function(x,y) {
		this.x = x;
		this.y = y;
	}
	,getRotation: function() {
		return this.rotation;
	}
	,setRotation: function(rotation) {
		this.rotation = rotation;
	}
	,getScaleX: function() {
		return this.scaleX;
	}
	,setScaleX: function(scaleX) {
		this.scaleX = scaleX;
	}
	,getScaleY: function() {
		return this.scaleY;
	}
	,setScaleY: function(scaleY) {
		this.scaleY = scaleY;
	}
	,setScale: function(scaleX,scaleY) {
		this.scaleX = scaleX;
		this.scaleY = scaleY;
	}
	,setScale2: function(scale) {
		this.scaleX = scale;
		this.scaleY = scale;
	}
	,getShearX: function() {
		return this.shearX;
	}
	,setShearX: function(shearX) {
		this.shearX = shearX;
	}
	,getShearY: function() {
		return this.shearY;
	}
	,setShearY: function(shearY) {
		this.shearY = shearY;
	}
	,getAX: function() {
		return this.ax;
	}
	,setAX: function(ax) {
		this.ax = ax;
	}
	,getAY: function() {
		return this.ay;
	}
	,setAY: function(ay) {
		this.ay = ay;
	}
	,getARotation: function() {
		return this.arotation;
	}
	,setARotation: function(arotation) {
		this.arotation = arotation;
	}
	,getAScaleX: function() {
		return this.ascaleX;
	}
	,setAScaleX: function(ascaleX) {
		this.ascaleX = ascaleX;
	}
	,getAScaleY: function() {
		return this.ascaleY;
	}
	,setAScaleY: function(ascaleY) {
		this.ascaleY = ascaleY;
	}
	,getAShearX: function() {
		return this.ashearX;
	}
	,setAShearX: function(ashearX) {
		this.ashearX = ashearX;
	}
	,getAShearY: function() {
		return this.ashearY;
	}
	,setAShearY: function(ashearY) {
		this.ashearY = ashearY;
	}
	,isAppliedValid: function() {
		return this.appliedValid;
	}
	,setAppliedValid: function(appliedValid) {
		this.appliedValid = appliedValid;
	}
	,updateAppliedTransform: function() {
		this.appliedValid = true;
		var parent = this.parent;
		if(parent == null) {
			this.ax = this.worldX;
			this.ay = this.worldY;
			this.arotation = js_Boot.__cast(Math.atan2(this.c,this.a) , Float) * spine_utils_SpineUtils.radDeg;
			this.ascaleX = js_Boot.__cast(Math.sqrt(this.a * this.a + this.c * this.c) , Float);
			this.ascaleY = js_Boot.__cast(Math.sqrt(this.b * this.b + this.d * this.d) , Float);
			this.ashearX = 0;
			this.ashearY = js_Boot.__cast(Math.atan2(this.a * this.b + this.c * this.d,this.a * this.d - this.b * this.c) , Float) * spine_utils_SpineUtils.radDeg;
			return;
		}
		var pa = parent.a;
		var pb = parent.b;
		var pc = parent.c;
		var pd = parent.d;
		var pid = 1 / (pa * pd - pb * pc);
		var dx = this.worldX - parent.worldX;
		var dy = this.worldY - parent.worldY;
		this.ax = dx * pd * pid - dy * pb * pid;
		this.ay = dy * pa * pid - dx * pc * pid;
		var ia = pid * pd;
		var id = pid * pa;
		var ib = pid * pb;
		var ic = pid * pc;
		var ra = ia * this.a - ib * this.c;
		var rb = ia * this.b - ib * this.d;
		var rc = id * this.c - ic * this.a;
		var rd = id * this.d - ic * this.b;
		this.ashearX = 0;
		this.ascaleX = js_Boot.__cast(Math.sqrt(ra * ra + rc * rc) , Float);
		if(this.ascaleX > 0.0001) {
			var det = ra * rd - rb * rc;
			this.ascaleY = det / this.ascaleX;
			this.ashearY = js_Boot.__cast(Math.atan2(ra * rb + rc * rd,det) , Float) * spine_utils_SpineUtils.radDeg;
			this.arotation = js_Boot.__cast(Math.atan2(rc,ra) , Float) * spine_utils_SpineUtils.radDeg;
		} else {
			this.ascaleX = 0;
			this.ascaleY = js_Boot.__cast(Math.sqrt(rb * rb + rd * rd) , Float);
			this.ashearY = 0;
			this.arotation = 90 - js_Boot.__cast(Math.atan2(rd,rb) , Float) * spine_utils_SpineUtils.radDeg;
		}
	}
	,getA: function() {
		return this.a;
	}
	,setA: function(a) {
		this.a = a;
	}
	,getB: function() {
		return this.b;
	}
	,setB: function(b) {
		this.b = b;
	}
	,getC: function() {
		return this.c;
	}
	,setC: function(c) {
		this.c = c;
	}
	,getD: function() {
		return this.d;
	}
	,setD: function(d) {
		this.d = d;
	}
	,getWorldX: function() {
		return this.worldX;
	}
	,setWorldX: function(worldX) {
		this.worldX = worldX;
	}
	,getWorldY: function() {
		return this.worldY;
	}
	,setWorldY: function(worldY) {
		this.worldY = worldY;
	}
	,getWorldRotationX: function() {
		return js_Boot.__cast(Math.atan2(this.c,this.a) , Float) * spine_utils_SpineUtils.radDeg;
	}
	,getWorldRotationY: function() {
		return js_Boot.__cast(Math.atan2(this.d,this.b) , Float) * spine_utils_SpineUtils.radDeg;
	}
	,getWorldScaleX: function() {
		return js_Boot.__cast(Math.sqrt(this.a * this.a + this.c * this.c) , Float);
	}
	,getWorldScaleY: function() {
		return js_Boot.__cast(Math.sqrt(this.b * this.b + this.d * this.d) , Float);
	}
	,getWorldTransform: function(worldTransform) {
		if(worldTransform == null) {
			throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("worldTransform cannot be null."));
		}
		var val = worldTransform.val;
		val[0] = this.a;
		val[3] = this.b;
		val[1] = this.c;
		val[4] = this.d;
		val[6] = this.worldX;
		val[7] = this.worldY;
		val[2] = 0;
		val[5] = 0;
		val[8] = 1;
		return worldTransform;
	}
	,worldToLocal: function(world) {
		var invDet = 1 / (this.a * this.d - this.b * this.c);
		var x = world.x - this.worldX;
		var y = world.y - this.worldY;
		world.x = x * this.d * invDet - y * this.b * invDet;
		world.y = y * this.a * invDet - x * this.c * invDet;
		return world;
	}
	,localToWorld: function(local) {
		var x = local.x;
		var y = local.y;
		local.x = x * this.a + y * this.b + this.worldX;
		local.y = x * this.c + y * this.d + this.worldY;
		return local;
	}
	,worldToLocalRotation: function(worldRotation) {
		var sin = js_Boot.__cast(Math.sin(worldRotation * spine_utils_SpineUtils.degRad) , Float);
		var cos = js_Boot.__cast(Math.cos(worldRotation * spine_utils_SpineUtils.degRad) , Float);
		return js_Boot.__cast(Math.atan2(this.a * sin - this.c * cos,this.d * cos - this.b * sin) , Float) * spine_utils_SpineUtils.radDeg;
	}
	,localToWorldRotation: function(localRotation) {
		var sin = js_Boot.__cast(Math.sin(localRotation * spine_utils_SpineUtils.degRad) , Float);
		var cos = js_Boot.__cast(Math.cos(localRotation * spine_utils_SpineUtils.degRad) , Float);
		return js_Boot.__cast(Math.atan2(cos * this.c + sin * this.d,cos * this.a + sin * this.b) , Float) * spine_utils_SpineUtils.radDeg;
	}
	,rotateWorld: function(degrees) {
		var cos = js_Boot.__cast(Math.cos(degrees * spine_utils_SpineUtils.degRad) , Float);
		var sin = js_Boot.__cast(Math.sin(degrees * spine_utils_SpineUtils.degRad) , Float);
		this.a = cos * this.a - sin * this.c;
		this.b = cos * this.b - sin * this.d;
		this.c = sin * this.a + cos * this.c;
		this.d = sin * this.b + cos * this.d;
		this.appliedValid = false;
	}
	,toString: function() {
		return this.data.name;
	}
	,__class__: spine_Bone
};
var spine_BoneData = function(index,name,parent) {
	this.color = new spine_support_graphics_Color(0.61,0.61,0.61,1);
	this.transformMode = 0;
	this.shearY = 0;
	this.shearX = 0;
	this.scaleY = 1;
	this.scaleX = 1;
	this.rotation = 0;
	this.y = 0;
	this.x = 0;
	this.length = 0;
	this.index = 0;
	if(index < 0) {
		throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("index must be >= 0."));
	}
	if(name == null) {
		throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("name cannot be null."));
	}
	this.index = index;
	this.name = name;
	this.parent = parent;
};
$hxClasses["spine.BoneData"] = spine_BoneData;
spine_BoneData.__name__ = "spine.BoneData";
spine_BoneData.prototype = {
	index: null
	,name: null
	,parent: null
	,length: null
	,x: null
	,y: null
	,rotation: null
	,scaleX: null
	,scaleY: null
	,shearX: null
	,shearY: null
	,transformMode: null
	,color: null
	,getIndex: function() {
		return this.index;
	}
	,getName: function() {
		return this.name;
	}
	,getParent: function() {
		return this.parent;
	}
	,getLength: function() {
		return this.length;
	}
	,setLength: function(length) {
		this.length = length;
	}
	,getX: function() {
		return this.x;
	}
	,setX: function(x) {
		this.x = x;
	}
	,getY: function() {
		return this.y;
	}
	,setY: function(y) {
		this.y = y;
	}
	,setPosition: function(x,y) {
		this.x = x;
		this.y = y;
	}
	,getRotation: function() {
		return this.rotation;
	}
	,setRotation: function(rotation) {
		this.rotation = rotation;
	}
	,getScaleX: function() {
		return this.scaleX;
	}
	,setScaleX: function(scaleX) {
		this.scaleX = scaleX;
	}
	,getScaleY: function() {
		return this.scaleY;
	}
	,setScaleY: function(scaleY) {
		this.scaleY = scaleY;
	}
	,setScale: function(scaleX,scaleY) {
		this.scaleX = scaleX;
		this.scaleY = scaleY;
	}
	,getShearX: function() {
		return this.shearX;
	}
	,setShearX: function(shearX) {
		this.shearX = shearX;
	}
	,getShearY: function() {
		return this.shearY;
	}
	,setShearY: function(shearY) {
		this.shearY = shearY;
	}
	,getTransformMode: function() {
		return this.transformMode;
	}
	,setTransformMode: function(transformMode) {
		this.transformMode = transformMode;
	}
	,getColor: function() {
		return this.color;
	}
	,toString: function() {
		return this.name;
	}
	,__class__: spine_BoneData
};
var spine_TransformMode_$enum = function() { };
$hxClasses["spine.TransformMode_enum"] = spine_TransformMode_$enum;
spine_TransformMode_$enum.__name__ = "spine.TransformMode_enum";
spine_TransformMode_$enum.valueOf = function(value) {
	switch(value) {
	case "noRotationOrReflection":
		return 2;
	case "noScale":
		return 3;
	case "noScaleOrReflection":
		return 4;
	case "normal":
		return 0;
	case "onlyTranslation":
		return 1;
	default:
		return 0;
	}
};
var spine_Constraint = function() { };
$hxClasses["spine.Constraint"] = spine_Constraint;
spine_Constraint.__name__ = "spine.Constraint";
spine_Constraint.__isInterface__ = true;
spine_Constraint.__interfaces__ = [spine_Updatable];
spine_Constraint.prototype = {
	getOrder: null
	,__class__: spine_Constraint
};
var spine_Event = function(time,data) {
	this.time = 0;
	this.floatValue = 0;
	this.intValue = 0;
	if(data == null) {
		throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("data cannot be null."));
	}
	this.time = time;
	this.data = data;
};
$hxClasses["spine.Event"] = spine_Event;
spine_Event.__name__ = "spine.Event";
spine_Event.prototype = {
	data: null
	,intValue: null
	,floatValue: null
	,stringValue: null
	,time: null
	,getInt: function() {
		return this.intValue;
	}
	,setInt: function(intValue) {
		this.intValue = intValue;
	}
	,getFloat: function() {
		return this.floatValue;
	}
	,setFloat: function(floatValue) {
		this.floatValue = floatValue;
	}
	,getString: function() {
		return this.stringValue;
	}
	,setString: function(stringValue) {
		this.stringValue = stringValue;
	}
	,getTime: function() {
		return this.time;
	}
	,getData: function() {
		return this.data;
	}
	,toString: function() {
		return this.data.name;
	}
	,__class__: spine_Event
};
var spine_EventData = function(name) {
	this.floatValue = 0;
	this.intValue = 0;
	if(name == null) {
		throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("name cannot be null."));
	}
	this.name = name;
};
$hxClasses["spine.EventData"] = spine_EventData;
spine_EventData.__name__ = "spine.EventData";
spine_EventData.prototype = {
	name: null
	,intValue: null
	,floatValue: null
	,stringValue: null
	,getInt: function() {
		return this.intValue;
	}
	,setInt: function(intValue) {
		this.intValue = intValue;
	}
	,getFloat: function() {
		return this.floatValue;
	}
	,setFloat: function(floatValue) {
		this.floatValue = floatValue;
	}
	,getString: function() {
		return this.stringValue;
	}
	,setString: function(stringValue) {
		this.stringValue = stringValue;
	}
	,getName: function() {
		return this.name;
	}
	,toString: function() {
		return this.name;
	}
	,__class__: spine_EventData
};
var spine_IkConstraint = function(data,skeleton) {
	this.bendDirection = 0;
	this.mix = 1;
	if(data == null) {
		throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("data cannot be null."));
	}
	if(skeleton == null) {
		throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("skeleton cannot be null."));
	}
	this.data = data;
	this.mix = data.mix;
	this.bendDirection = data.bendDirection;
	var capacity = data.bones.length;
	var this1 = [];
	this.bones = this1;
	var _g = 0;
	var _g1 = data.bones;
	while(_g < _g1.length) {
		var boneData = _g1[_g];
		++_g;
		this.bones.push(skeleton.findBone(boneData.name));
	}
	this.target = skeleton.findBone(data.target.name);
};
$hxClasses["spine.IkConstraint"] = spine_IkConstraint;
spine_IkConstraint.__name__ = "spine.IkConstraint";
spine_IkConstraint.__interfaces__ = [spine_Constraint];
spine_IkConstraint.applyOne = function(bone,targetX,targetY,alpha) {
	if(!bone.appliedValid) {
		bone.appliedValid = true;
		var parent = bone.parent;
		if(parent == null) {
			bone.ax = bone.worldX;
			bone.ay = bone.worldY;
			bone.arotation = js_Boot.__cast(Math.atan2(bone.c,bone.a) , Float) * spine_utils_SpineUtils.radDeg;
			bone.ascaleX = js_Boot.__cast(Math.sqrt(bone.a * bone.a + bone.c * bone.c) , Float);
			bone.ascaleY = js_Boot.__cast(Math.sqrt(bone.b * bone.b + bone.d * bone.d) , Float);
			bone.ashearX = 0;
			bone.ashearY = js_Boot.__cast(Math.atan2(bone.a * bone.b + bone.c * bone.d,bone.a * bone.d - bone.b * bone.c) , Float) * spine_utils_SpineUtils.radDeg;
		} else {
			var pa = parent.a;
			var pb = parent.b;
			var pc = parent.c;
			var pd = parent.d;
			var pid = 1 / (pa * pd - pb * pc);
			var dx = bone.worldX - parent.worldX;
			var dy = bone.worldY - parent.worldY;
			bone.ax = dx * pd * pid - dy * pb * pid;
			bone.ay = dy * pa * pid - dx * pc * pid;
			var ia = pid * pd;
			var id = pid * pa;
			var ib = pid * pb;
			var ic = pid * pc;
			var ra = ia * bone.a - ib * bone.c;
			var rb = ia * bone.b - ib * bone.d;
			var rc = id * bone.c - ic * bone.a;
			var rd = id * bone.d - ic * bone.b;
			bone.ashearX = 0;
			bone.ascaleX = js_Boot.__cast(Math.sqrt(ra * ra + rc * rc) , Float);
			if(bone.ascaleX > 0.0001) {
				var det = ra * rd - rb * rc;
				bone.ascaleY = det / bone.ascaleX;
				bone.ashearY = js_Boot.__cast(Math.atan2(ra * rb + rc * rd,det) , Float) * spine_utils_SpineUtils.radDeg;
				bone.arotation = js_Boot.__cast(Math.atan2(rc,ra) , Float) * spine_utils_SpineUtils.radDeg;
			} else {
				bone.ascaleX = 0;
				bone.ascaleY = js_Boot.__cast(Math.sqrt(rb * rb + rd * rd) , Float);
				bone.ashearY = 0;
				bone.arotation = 90 - js_Boot.__cast(Math.atan2(rd,rb) , Float) * spine_utils_SpineUtils.radDeg;
			}
		}
	}
	var p = bone.parent;
	var id = 1 / (p.a * p.d - p.b * p.c);
	var x = targetX - p.worldX;
	var y = targetY - p.worldY;
	var tx = (x * p.d - y * p.b) * id - bone.ax;
	var ty = (y * p.a - x * p.c) * id - bone.ay;
	var rotationIK = js_Boot.__cast(Math.atan2(ty,tx) , Float) * spine_utils_SpineUtils.radDeg - bone.ashearX - bone.arotation;
	if(bone.ascaleX < 0) {
		rotationIK += 180;
	}
	if(rotationIK > 180) {
		rotationIK -= 360;
	} else if(rotationIK < -180) {
		rotationIK += 360;
	}
	bone.updateWorldTransformWithData(bone.ax,bone.ay,bone.arotation + rotationIK * alpha,bone.ascaleX,bone.ascaleY,bone.ashearX,bone.ashearY);
};
spine_IkConstraint.applyTwo = function(parent,child,targetX,targetY,bendDir,alpha) {
	if(alpha == 0) {
		child.updateWorldTransform();
		return;
	}
	if(!parent.appliedValid) {
		parent.appliedValid = true;
		var parent1 = parent.parent;
		if(parent1 == null) {
			parent.ax = parent.worldX;
			parent.ay = parent.worldY;
			parent.arotation = js_Boot.__cast(Math.atan2(parent.c,parent.a) , Float) * spine_utils_SpineUtils.radDeg;
			parent.ascaleX = js_Boot.__cast(Math.sqrt(parent.a * parent.a + parent.c * parent.c) , Float);
			parent.ascaleY = js_Boot.__cast(Math.sqrt(parent.b * parent.b + parent.d * parent.d) , Float);
			parent.ashearX = 0;
			parent.ashearY = js_Boot.__cast(Math.atan2(parent.a * parent.b + parent.c * parent.d,parent.a * parent.d - parent.b * parent.c) , Float) * spine_utils_SpineUtils.radDeg;
		} else {
			var pa = parent1.a;
			var pb = parent1.b;
			var pc = parent1.c;
			var pd = parent1.d;
			var pid = 1 / (pa * pd - pb * pc);
			var dx = parent.worldX - parent1.worldX;
			var dy = parent.worldY - parent1.worldY;
			parent.ax = dx * pd * pid - dy * pb * pid;
			parent.ay = dy * pa * pid - dx * pc * pid;
			var ia = pid * pd;
			var id = pid * pa;
			var ib = pid * pb;
			var ic = pid * pc;
			var ra = ia * parent.a - ib * parent.c;
			var rb = ia * parent.b - ib * parent.d;
			var rc = id * parent.c - ic * parent.a;
			var rd = id * parent.d - ic * parent.b;
			parent.ashearX = 0;
			parent.ascaleX = js_Boot.__cast(Math.sqrt(ra * ra + rc * rc) , Float);
			if(parent.ascaleX > 0.0001) {
				var det = ra * rd - rb * rc;
				parent.ascaleY = det / parent.ascaleX;
				parent.ashearY = js_Boot.__cast(Math.atan2(ra * rb + rc * rd,det) , Float) * spine_utils_SpineUtils.radDeg;
				parent.arotation = js_Boot.__cast(Math.atan2(rc,ra) , Float) * spine_utils_SpineUtils.radDeg;
			} else {
				parent.ascaleX = 0;
				parent.ascaleY = js_Boot.__cast(Math.sqrt(rb * rb + rd * rd) , Float);
				parent.ashearY = 0;
				parent.arotation = 90 - js_Boot.__cast(Math.atan2(rd,rb) , Float) * spine_utils_SpineUtils.radDeg;
			}
		}
	}
	if(!child.appliedValid) {
		child.appliedValid = true;
		var parent1 = child.parent;
		if(parent1 == null) {
			child.ax = child.worldX;
			child.ay = child.worldY;
			child.arotation = js_Boot.__cast(Math.atan2(child.c,child.a) , Float) * spine_utils_SpineUtils.radDeg;
			child.ascaleX = js_Boot.__cast(Math.sqrt(child.a * child.a + child.c * child.c) , Float);
			child.ascaleY = js_Boot.__cast(Math.sqrt(child.b * child.b + child.d * child.d) , Float);
			child.ashearX = 0;
			child.ashearY = js_Boot.__cast(Math.atan2(child.a * child.b + child.c * child.d,child.a * child.d - child.b * child.c) , Float) * spine_utils_SpineUtils.radDeg;
		} else {
			var pa = parent1.a;
			var pb = parent1.b;
			var pc = parent1.c;
			var pd = parent1.d;
			var pid = 1 / (pa * pd - pb * pc);
			var dx = child.worldX - parent1.worldX;
			var dy = child.worldY - parent1.worldY;
			child.ax = dx * pd * pid - dy * pb * pid;
			child.ay = dy * pa * pid - dx * pc * pid;
			var ia = pid * pd;
			var id = pid * pa;
			var ib = pid * pb;
			var ic = pid * pc;
			var ra = ia * child.a - ib * child.c;
			var rb = ia * child.b - ib * child.d;
			var rc = id * child.c - ic * child.a;
			var rd = id * child.d - ic * child.b;
			child.ashearX = 0;
			child.ascaleX = js_Boot.__cast(Math.sqrt(ra * ra + rc * rc) , Float);
			if(child.ascaleX > 0.0001) {
				var det = ra * rd - rb * rc;
				child.ascaleY = det / child.ascaleX;
				child.ashearY = js_Boot.__cast(Math.atan2(ra * rb + rc * rd,det) , Float) * spine_utils_SpineUtils.radDeg;
				child.arotation = js_Boot.__cast(Math.atan2(rc,ra) , Float) * spine_utils_SpineUtils.radDeg;
			} else {
				child.ascaleX = 0;
				child.ascaleY = js_Boot.__cast(Math.sqrt(rb * rb + rd * rd) , Float);
				child.ashearY = 0;
				child.arotation = 90 - js_Boot.__cast(Math.atan2(rd,rb) , Float) * spine_utils_SpineUtils.radDeg;
			}
		}
	}
	var px = parent.ax;
	var py = parent.ay;
	var psx = parent.ascaleX;
	var psy = parent.ascaleY;
	var csx = child.ascaleX;
	var os1 = 0;
	var os2 = 0;
	var s2 = 0;
	if(psx < 0) {
		psx = -psx;
		os1 = 180;
		s2 = -1;
	} else {
		os1 = 0;
		s2 = 1;
	}
	if(psy < 0) {
		psy = -psy;
		s2 = -s2;
	}
	if(csx < 0) {
		csx = -csx;
		os2 = 180;
	} else {
		os2 = 0;
	}
	var cx = child.ax;
	var cy = 0;
	var cwx = 0;
	var cwy = 0;
	var a = parent.a;
	var b = parent.b;
	var c = parent.c;
	var d = parent.d;
	var u = Math.abs(psx - psy) <= 0.0001;
	if(!u) {
		cy = 0;
		cwx = a * cx + parent.worldX;
		cwy = c * cx + parent.worldY;
	} else {
		cy = child.ay;
		cwx = a * cx + b * cy + parent.worldX;
		cwy = c * cx + d * cy + parent.worldY;
	}
	var pp = parent.parent;
	a = pp.a;
	b = pp.b;
	c = pp.c;
	d = pp.d;
	var id = 1 / (a * d - b * c);
	var x = targetX - pp.worldX;
	var y = targetY - pp.worldY;
	var tx = (x * d - y * b) * id - px;
	var ty = (y * a - x * c) * id - py;
	x = cwx - pp.worldX;
	y = cwy - pp.worldY;
	var dx = (x * d - y * b) * id - px;
	var dy = (y * a - x * c) * id - py;
	var l1 = js_Boot.__cast(Math.sqrt(dx * dx + dy * dy) , Float);
	var l2 = child.data.length * csx;
	var a1 = 0;
	var a2 = 0;
	var _gotoLabel_outer;
	while(true) {
		_gotoLabel_outer = 0;
		if(u) {
			l2 *= psx;
			var cos = (tx * tx + ty * ty - l1 * l1 - l2 * l2) / (2 * l1 * l2);
			if(cos < -1) {
				cos = -1;
			} else if(cos > 1) {
				cos = 1;
			}
			a2 = js_Boot.__cast(Math.acos(cos) * bendDir , Float);
			a = l1 + l2 * cos;
			b = l2 * js_Boot.__cast(Math.sin(a2) , Float);
			a1 = js_Boot.__cast(Math.atan2(ty * a - tx * b,tx * a + ty * b) , Float);
		} else {
			a = psx * l2;
			b = psy * l2;
			var aa = a * a;
			var bb = b * b;
			var dd = tx * tx + ty * ty;
			var ta = js_Boot.__cast(Math.atan2(ty,tx) , Float);
			c = bb * l1 * l1 + aa * dd - aa * bb;
			var c1 = -2 * bb * l1;
			var c2 = bb - aa;
			d = c1 * c1 - 4 * c2 * c;
			if(d >= 0) {
				var q = js_Boot.__cast(Math.sqrt(d) , Float);
				if(c1 < 0) {
					q = -q;
				}
				q = -(c1 + q) / 2;
				var r0 = q / c2;
				var r1 = c / q;
				var r = Math.abs(r0) < Math.abs(r1) ? r0 : r1;
				if(r * r <= dd) {
					y = js_Boot.__cast(Math.sqrt(dd - r * r) * bendDir , Float);
					a1 = ta - js_Boot.__cast(Math.atan2(y,r) , Float);
					a2 = js_Boot.__cast(Math.atan2(y / psy,(r - l1) / psx) , Float);
					_gotoLabel_outer = 1;
					break;
				}
			}
			var minAngle = 3.1415927;
			var minX = l1 - a;
			var minDist = minX * minX;
			var minY = 0;
			var maxAngle = 0;
			var maxX = l1 + a;
			var maxDist = maxX * maxX;
			var maxY = 0;
			c = -a * l1 / (aa - bb);
			if(c >= -1 && c <= 1) {
				c = js_Boot.__cast(Math.acos(c) , Float);
				x = a * js_Boot.__cast(Math.cos(c) , Float) + l1;
				y = b * js_Boot.__cast(Math.sin(c) , Float);
				d = x * x + y * y;
				if(d < minDist) {
					minAngle = c;
					minDist = d;
					minX = x;
					minY = y;
				}
				if(d > maxDist) {
					maxAngle = c;
					maxDist = d;
					maxX = x;
					maxY = y;
				}
			}
			if(dd <= (minDist + maxDist) / 2) {
				a1 = ta - js_Boot.__cast(Math.atan2(minY * bendDir,minX) , Float);
				a2 = minAngle * bendDir;
			} else {
				a1 = ta - js_Boot.__cast(Math.atan2(maxY * bendDir,maxX) , Float);
				a2 = maxAngle * bendDir;
			}
		}
		if(_gotoLabel_outer == 0) {
			break;
		}
	}
	var os = js_Boot.__cast(Math.atan2(cy,cx) , Float) * s2;
	var rotation = parent.arotation;
	a1 = (a1 - os) * spine_utils_SpineUtils.radDeg + os1 - rotation;
	if(a1 > 180) {
		a1 -= 360;
	} else if(a1 < -180) {
		a1 += 360;
	}
	parent.updateWorldTransformWithData(px,py,rotation + a1 * alpha,parent.ascaleX,parent.ascaleY,0,0);
	rotation = child.arotation;
	a2 = ((a2 + os) * spine_utils_SpineUtils.radDeg - child.ashearX) * s2 + os2 - rotation;
	if(a2 > 180) {
		a2 -= 360;
	} else if(a2 < -180) {
		a2 += 360;
	}
	child.updateWorldTransformWithData(cx,cy,rotation + a2 * alpha,child.ascaleX,child.ascaleY,child.ashearX,child.ashearY);
};
spine_IkConstraint.prototype = {
	data: null
	,bones: null
	,target: null
	,mix: null
	,bendDirection: null
	,apply: function() {
		var target = this.target;
		var bones = this.bones;
		while(true) {
			var _switchCond0 = bones.length;
			if(_switchCond0 == 1) {
				spine_IkConstraint.applyOne(bones.length > 0 ? bones[0] : null,target.worldX,target.worldY,this.mix);
				break;
			} else if(_switchCond0 == 2) {
				spine_IkConstraint.applyTwo(bones.length > 0 ? bones[0] : null,bones[1],target.worldX,target.worldY,this.bendDirection,this.mix);
				break;
			}
			break;
		}
	}
	,update: function() {
		var target = this.target;
		var bones = this.bones;
		var _continueAfterSwitch0 = false;
		while(true) {
			var _switchCond0 = bones.length;
			if(_switchCond0 == 1) {
				spine_IkConstraint.applyOne(bones.length > 0 ? bones[0] : null,target.worldX,target.worldY,this.mix);
				break;
			} else if(_switchCond0 == 2) {
				spine_IkConstraint.applyTwo(bones.length > 0 ? bones[0] : null,bones[1],target.worldX,target.worldY,this.bendDirection,this.mix);
				break;
			}
			break;
		}
	}
	,getOrder: function() {
		return this.data.order;
	}
	,getBones: function() {
		return this.bones;
	}
	,getTarget: function() {
		return this.target;
	}
	,setTarget: function(target) {
		this.target = target;
	}
	,getMix: function() {
		return this.mix;
	}
	,setMix: function(mix) {
		this.mix = mix;
	}
	,getBendDirection: function() {
		return this.bendDirection;
	}
	,setBendDirection: function(bendDirection) {
		this.bendDirection = bendDirection;
	}
	,getData: function() {
		return this.data;
	}
	,toString: function() {
		return this.data.name;
	}
	,__class__: spine_IkConstraint
};
var spine_IkConstraintData = function(name) {
	this.mix = 1;
	this.bendDirection = 1;
	this.bones = [];
	this.order = 0;
	if(name == null) {
		throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("name cannot be null."));
	}
	this.name = name;
};
$hxClasses["spine.IkConstraintData"] = spine_IkConstraintData;
spine_IkConstraintData.__name__ = "spine.IkConstraintData";
spine_IkConstraintData.prototype = {
	name: null
	,order: null
	,bones: null
	,target: null
	,bendDirection: null
	,mix: null
	,getName: function() {
		return this.name;
	}
	,getOrder: function() {
		return this.order;
	}
	,setOrder: function(order) {
		this.order = order;
	}
	,getBones: function() {
		return this.bones;
	}
	,getTarget: function() {
		return this.target;
	}
	,setTarget: function(target) {
		if(target == null) {
			throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("target cannot be null."));
		}
		this.target = target;
	}
	,getBendDirection: function() {
		return this.bendDirection;
	}
	,setBendDirection: function(bendDirection) {
		this.bendDirection = bendDirection;
	}
	,getMix: function() {
		return this.mix;
	}
	,setMix: function(mix) {
		this.mix = mix;
	}
	,toString: function() {
		return this.name;
	}
	,__class__: spine_IkConstraintData
};
var spine_PathConstraint = function(data,skeleton) {
	var array = [];
	var len = array.length;
	if(len > 10) {
		array.splice(10,10 - len);
	} else if(len < 10) {
		while(len < 10) {
			array.push(0);
			++len;
		}
	}
	this.segments = array;
	this.lengths = [];
	this.curves = [];
	this.world = [];
	this.positions = [];
	this.spaces = [];
	this.translateMix = 0;
	this.rotateMix = 0;
	this.spacing = 0;
	this.position = 0;
	if(data == null) {
		throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("data cannot be null."));
	}
	if(skeleton == null) {
		throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("skeleton cannot be null."));
	}
	this.data = data;
	var capacity = data.bones.length;
	var this1 = [];
	this.bones = this1;
	var _g = 0;
	var _g1 = data.bones;
	while(_g < _g1.length) {
		var boneData = _g1[_g];
		++_g;
		this.bones.push(skeleton.findBone(boneData.name));
	}
	this.target = skeleton.findSlot(data.target.name);
	this.position = data.position;
	this.spacing = data.spacing;
	this.rotateMix = data.rotateMix;
	this.translateMix = data.translateMix;
};
$hxClasses["spine.PathConstraint"] = spine_PathConstraint;
spine_PathConstraint.__name__ = "spine.PathConstraint";
spine_PathConstraint.__interfaces__ = [spine_Constraint];
spine_PathConstraint.prototype = {
	data: null
	,bones: null
	,target: null
	,position: null
	,spacing: null
	,rotateMix: null
	,translateMix: null
	,spaces: null
	,positions: null
	,world: null
	,curves: null
	,lengths: null
	,segments: null
	,apply: function() {
		var attachment = this.target.attachment;
		if(((attachment) instanceof spine_attachments_PathAttachment)) {
			var rotateMix = this.rotateMix;
			var translateMix = this.translateMix;
			var translate = translateMix > 0;
			var rotate = rotateMix > 0;
			if(!(!translate && !rotate)) {
				var data = this.data;
				var spacingMode = data.spacingMode;
				var lengthSpacing = spacingMode == 0;
				var rotateMode = data.rotateMode;
				var tangents = rotateMode == 0;
				var scale = rotateMode == 2;
				var boneCount = this.bones.length;
				var spacesCount = tangents ? boneCount : boneCount + 1;
				var bones = this.bones;
				var this1 = this.spaces;
				var len = this1.length;
				if(len > spacesCount) {
					this1.splice(spacesCount,spacesCount - len);
				} else if(len < spacesCount) {
					while(len < spacesCount) {
						this1.push(0);
						++len;
					}
				}
				var spaces = this1;
				var lengths = null;
				var spacing = this.spacing;
				if(scale || lengthSpacing) {
					if(scale) {
						var this1 = this.lengths;
						var len = this1.length;
						if(len > boneCount) {
							this1.splice(boneCount,boneCount - len);
						} else if(len < boneCount) {
							while(len < boneCount) {
								this1.push(0);
								++len;
							}
						}
						lengths = this1;
					}
					var i = 0;
					var n = spacesCount - 1;
					while(i < n) {
						var bone = js_Boot.__cast(bones[i] , spine_Bone);
						var setupLength = bone.data.length;
						if(setupLength < spine_PathConstraint.epsilon) {
							if(scale) {
								lengths[i] = 0;
							}
							spaces[++i] = 0;
						} else {
							var x = setupLength * bone.a;
							var y = setupLength * bone.c;
							var length = js_Boot.__cast(Math.sqrt(x * x + y * y) , Float);
							if(scale) {
								lengths[i] = length;
							}
							spaces[++i] = (lengthSpacing ? setupLength + spacing : spacing) * length / setupLength;
						}
					}
				} else {
					var i = 1;
					while(i < spacesCount) {
						spaces[i] = spacing;
						++i;
					}
				}
				var path = js_Boot.__cast(attachment , spine_attachments_PathAttachment);
				var percentPosition = data.positionMode == 1;
				var percentSpacing = spacingMode == 2;
				var target = this.target;
				var position = this.position;
				var spaces1 = this.spaces;
				var this1 = this.positions;
				var size = spacesCount * 3 + 2;
				var len = this1.length;
				if(len > size) {
					this1.splice(size,size - len);
				} else if(len < size) {
					while(len < size) {
						this1.push(0);
						++len;
					}
				}
				var out = this1;
				var world = null;
				var closed = path.closed;
				var verticesLength = path.worldVerticesLength;
				var curveCount = verticesLength / 6 | 0;
				var prevCurve = -1;
				var positions;
				if(!path.constantSpeed) {
					var lengths1 = path.lengths;
					curveCount -= closed ? 1 : 2;
					var pathLength = lengths1[curveCount];
					if(percentPosition) {
						position *= pathLength;
					}
					if(percentSpacing) {
						var i = 0;
						while(i < spacesCount) {
							spaces1[i] *= pathLength;
							++i;
						}
					}
					var this1 = this.world;
					var len = this1.length;
					if(len > 8) {
						this1.splice(8,8 - len);
					} else if(len < 8) {
						while(len < 8) {
							this1.push(0);
							++len;
						}
					}
					world = this1;
					var i = 0;
					var o = 0;
					var curve = 0;
					while(i < spacesCount) {
						var space = spaces1[i];
						var p = position += space;
						if(closed) {
							p %= pathLength;
							if(p < 0) {
								p += pathLength;
							}
							curve = 0;
						} else if(p < 0) {
							if(prevCurve != -2) {
								prevCurve = -2;
								var count = 4;
								count = (count >> 1) * 2;
								var skeleton = target.bone.skeleton;
								var deformArray = target.attachmentVertices;
								var vertices = path.vertices;
								var bones1 = path.bones;
								if(bones1 == null) {
									if(deformArray.length > 0) {
										vertices = deformArray;
									}
									var bone = target.bone;
									var x = bone.worldX;
									var y = bone.worldY;
									var a = bone.a;
									var b = bone.b;
									var c = bone.c;
									var d = bone.d;
									var v = 2;
									var w = 0;
									while(w < count) {
										var vx = vertices[v];
										var vy = vertices[v + 1];
										world[w] = vx * a + vy * b + x;
										world[w + 1] = vx * c + vy * d + y;
										v += 2;
										w += 2;
									}
								} else {
									var v1 = 0;
									var skip = 0;
									var i1 = 0;
									while(i1 < 2) {
										var n = bones1[v1];
										v1 += n + 1;
										skip += n;
										i1 += 2;
									}
									var skeletonBones = skeleton.getBones();
									if(deformArray.length == 0) {
										var w1 = 0;
										var b1 = skip * 3;
										while(w1 < count) {
											var wx = 0;
											var wy = 0;
											var n1 = bones1[v1++];
											n1 += v1;
											while(v1 < n1) {
												var bone1 = js_Boot.__cast(skeletonBones[bones1[v1]] , spine_Bone);
												var vx1 = vertices[b1];
												var vy1 = vertices[b1 + 1];
												var weight = vertices[b1 + 2];
												wx += (vx1 * bone1.a + vy1 * bone1.b + bone1.worldX) * weight;
												wy += (vx1 * bone1.c + vy1 * bone1.d + bone1.worldY) * weight;
												++v1;
												b1 += 3;
											}
											world[w1] = wx;
											world[w1 + 1] = wy;
											w1 += 2;
										}
									} else {
										var deform = deformArray;
										var w2 = 0;
										var b2 = skip * 3;
										var f = skip << 1;
										while(w2 < count) {
											var wx1 = 0;
											var wy1 = 0;
											var n2 = bones1[v1++];
											n2 += v1;
											while(v1 < n2) {
												var bone2 = js_Boot.__cast(skeletonBones[bones1[v1]] , spine_Bone);
												var vx2 = vertices[b2] + deform[f];
												var vy2 = vertices[b2 + 1] + deform[f + 1];
												var weight1 = vertices[b2 + 2];
												wx1 += (vx2 * bone2.a + vy2 * bone2.b + bone2.worldX) * weight1;
												wy1 += (vx2 * bone2.c + vy2 * bone2.d + bone2.worldY) * weight1;
												++v1;
												b2 += 3;
												f += 2;
											}
											world[w2] = wx1;
											world[w2 + 1] = wy1;
											w2 += 2;
										}
									}
								}
							}
							var x1 = world[0];
							var y1 = world[1];
							var dx = world[2] - x1;
							var dy = world[3] - y1;
							var r = js_Boot.__cast(Math.atan2(dy,dx) , Float);
							out[o] = x1 + p * js_Boot.__cast(Math.cos(r) , Float);
							out[o + 1] = y1 + p * js_Boot.__cast(Math.sin(r) , Float);
							out[o + 2] = r;
							++i;
							o += 3;
							continue;
						} else if(p > pathLength) {
							if(prevCurve != -3) {
								prevCurve = -3;
								var start = verticesLength - 6;
								var count1 = 4;
								count1 = (count1 >> 1) * 2;
								var skeleton1 = target.bone.skeleton;
								var deformArray1 = target.attachmentVertices;
								var vertices1 = path.vertices;
								var bones2 = path.bones;
								if(bones2 == null) {
									if(deformArray1.length > 0) {
										vertices1 = deformArray1;
									}
									var bone3 = target.bone;
									var x2 = bone3.worldX;
									var y2 = bone3.worldY;
									var a1 = bone3.a;
									var b3 = bone3.b;
									var c1 = bone3.c;
									var d1 = bone3.d;
									var v2 = start;
									var w3 = 0;
									while(w3 < count1) {
										var vx3 = vertices1[v2];
										var vy3 = vertices1[v2 + 1];
										world[w3] = vx3 * a1 + vy3 * b3 + x2;
										world[w3 + 1] = vx3 * c1 + vy3 * d1 + y2;
										v2 += 2;
										w3 += 2;
									}
								} else {
									var v3 = 0;
									var skip1 = 0;
									var i2 = 0;
									while(i2 < start) {
										var n3 = bones2[v3];
										v3 += n3 + 1;
										skip1 += n3;
										i2 += 2;
									}
									var skeletonBones1 = skeleton1.getBones();
									if(deformArray1.length == 0) {
										var w4 = 0;
										var b4 = skip1 * 3;
										while(w4 < count1) {
											var wx2 = 0;
											var wy2 = 0;
											var n4 = bones2[v3++];
											n4 += v3;
											while(v3 < n4) {
												var bone4 = js_Boot.__cast(skeletonBones1[bones2[v3]] , spine_Bone);
												var vx4 = vertices1[b4];
												var vy4 = vertices1[b4 + 1];
												var weight2 = vertices1[b4 + 2];
												wx2 += (vx4 * bone4.a + vy4 * bone4.b + bone4.worldX) * weight2;
												wy2 += (vx4 * bone4.c + vy4 * bone4.d + bone4.worldY) * weight2;
												++v3;
												b4 += 3;
											}
											world[w4] = wx2;
											world[w4 + 1] = wy2;
											w4 += 2;
										}
									} else {
										var deform1 = deformArray1;
										var w5 = 0;
										var b5 = skip1 * 3;
										var f1 = skip1 << 1;
										while(w5 < count1) {
											var wx3 = 0;
											var wy3 = 0;
											var n5 = bones2[v3++];
											n5 += v3;
											while(v3 < n5) {
												var bone5 = js_Boot.__cast(skeletonBones1[bones2[v3]] , spine_Bone);
												var vx5 = vertices1[b5] + deform1[f1];
												var vy5 = vertices1[b5 + 1] + deform1[f1 + 1];
												var weight3 = vertices1[b5 + 2];
												wx3 += (vx5 * bone5.a + vy5 * bone5.b + bone5.worldX) * weight3;
												wy3 += (vx5 * bone5.c + vy5 * bone5.d + bone5.worldY) * weight3;
												++v3;
												b5 += 3;
												f1 += 2;
											}
											world[w5] = wx3;
											world[w5 + 1] = wy3;
											w5 += 2;
										}
									}
								}
							}
							var p1 = p - pathLength;
							var x11 = world[2];
							var y11 = world[3];
							var dx1 = x11 - world[0];
							var dy1 = y11 - world[1];
							var r1 = js_Boot.__cast(Math.atan2(dy1,dx1) , Float);
							out[o] = x11 + p1 * js_Boot.__cast(Math.cos(r1) , Float);
							out[o + 1] = y11 + p1 * js_Boot.__cast(Math.sin(r1) , Float);
							out[o + 2] = r1;
							++i;
							o += 3;
							continue;
						}
						while(true) {
							var length = lengths1[curve];
							if(p > length) {
								++curve;
								continue;
							}
							if(curve == 0) {
								p /= length;
							} else {
								var prev = lengths1[curve - 1];
								p = (p - prev) / (length - prev);
							}
							break;
						}
						if(curve != prevCurve) {
							prevCurve = curve;
							if(closed && curve == curveCount) {
								var start1 = verticesLength - 4;
								var count2 = 4;
								count2 = (count2 >> 1) * 2;
								var skeleton2 = target.bone.skeleton;
								var deformArray2 = target.attachmentVertices;
								var vertices2 = path.vertices;
								var bones3 = path.bones;
								if(bones3 == null) {
									if(deformArray2.length > 0) {
										vertices2 = deformArray2;
									}
									var bone6 = target.bone;
									var x3 = bone6.worldX;
									var y3 = bone6.worldY;
									var a2 = bone6.a;
									var b6 = bone6.b;
									var c2 = bone6.c;
									var d2 = bone6.d;
									var v4 = start1;
									var w6 = 0;
									while(w6 < count2) {
										var vx6 = vertices2[v4];
										var vy6 = vertices2[v4 + 1];
										world[w6] = vx6 * a2 + vy6 * b6 + x3;
										world[w6 + 1] = vx6 * c2 + vy6 * d2 + y3;
										v4 += 2;
										w6 += 2;
									}
								} else {
									var v5 = 0;
									var skip2 = 0;
									var i3 = 0;
									while(i3 < start1) {
										var n6 = bones3[v5];
										v5 += n6 + 1;
										skip2 += n6;
										i3 += 2;
									}
									var skeletonBones2 = skeleton2.getBones();
									if(deformArray2.length == 0) {
										var w7 = 0;
										var b7 = skip2 * 3;
										while(w7 < count2) {
											var wx4 = 0;
											var wy4 = 0;
											var n7 = bones3[v5++];
											n7 += v5;
											while(v5 < n7) {
												var bone7 = js_Boot.__cast(skeletonBones2[bones3[v5]] , spine_Bone);
												var vx7 = vertices2[b7];
												var vy7 = vertices2[b7 + 1];
												var weight4 = vertices2[b7 + 2];
												wx4 += (vx7 * bone7.a + vy7 * bone7.b + bone7.worldX) * weight4;
												wy4 += (vx7 * bone7.c + vy7 * bone7.d + bone7.worldY) * weight4;
												++v5;
												b7 += 3;
											}
											world[w7] = wx4;
											world[w7 + 1] = wy4;
											w7 += 2;
										}
									} else {
										var deform2 = deformArray2;
										var w8 = 0;
										var b8 = skip2 * 3;
										var f2 = skip2 << 1;
										while(w8 < count2) {
											var wx5 = 0;
											var wy5 = 0;
											var n8 = bones3[v5++];
											n8 += v5;
											while(v5 < n8) {
												var bone8 = js_Boot.__cast(skeletonBones2[bones3[v5]] , spine_Bone);
												var vx8 = vertices2[b8] + deform2[f2];
												var vy8 = vertices2[b8 + 1] + deform2[f2 + 1];
												var weight5 = vertices2[b8 + 2];
												wx5 += (vx8 * bone8.a + vy8 * bone8.b + bone8.worldX) * weight5;
												wy5 += (vx8 * bone8.c + vy8 * bone8.d + bone8.worldY) * weight5;
												++v5;
												b8 += 3;
												f2 += 2;
											}
											world[w8] = wx5;
											world[w8 + 1] = wy5;
											w8 += 2;
										}
									}
								}
								var count3 = 4;
								count3 = 4 + (count3 >> 1) * 2;
								var skeleton3 = target.bone.skeleton;
								var deformArray3 = target.attachmentVertices;
								var vertices3 = path.vertices;
								var bones4 = path.bones;
								if(bones4 == null) {
									if(deformArray3.length > 0) {
										vertices3 = deformArray3;
									}
									var bone9 = target.bone;
									var x4 = bone9.worldX;
									var y4 = bone9.worldY;
									var a3 = bone9.a;
									var b9 = bone9.b;
									var c3 = bone9.c;
									var d3 = bone9.d;
									var v6 = 0;
									var w9 = 4;
									while(w9 < count3) {
										var vx9 = vertices3[v6];
										var vy9 = vertices3[v6 + 1];
										world[w9] = vx9 * a3 + vy9 * b9 + x4;
										world[w9 + 1] = vx9 * c3 + vy9 * d3 + y4;
										v6 += 2;
										w9 += 2;
									}
								} else {
									var v7 = 0;
									var skip3 = 0;
									var i4 = 0;
									while(i4 < 0) {
										var n9 = bones4[v7];
										v7 += n9 + 1;
										skip3 += n9;
										i4 += 2;
									}
									var skeletonBones3 = skeleton3.getBones();
									if(deformArray3.length == 0) {
										var w10 = 4;
										var b10 = skip3 * 3;
										while(w10 < count3) {
											var wx6 = 0;
											var wy6 = 0;
											var n10 = bones4[v7++];
											n10 += v7;
											while(v7 < n10) {
												var bone10 = js_Boot.__cast(skeletonBones3[bones4[v7]] , spine_Bone);
												var vx10 = vertices3[b10];
												var vy10 = vertices3[b10 + 1];
												var weight6 = vertices3[b10 + 2];
												wx6 += (vx10 * bone10.a + vy10 * bone10.b + bone10.worldX) * weight6;
												wy6 += (vx10 * bone10.c + vy10 * bone10.d + bone10.worldY) * weight6;
												++v7;
												b10 += 3;
											}
											world[w10] = wx6;
											world[w10 + 1] = wy6;
											w10 += 2;
										}
									} else {
										var deform3 = deformArray3;
										var w11 = 4;
										var b11 = skip3 * 3;
										var f3 = skip3 << 1;
										while(w11 < count3) {
											var wx7 = 0;
											var wy7 = 0;
											var n11 = bones4[v7++];
											n11 += v7;
											while(v7 < n11) {
												var bone11 = js_Boot.__cast(skeletonBones3[bones4[v7]] , spine_Bone);
												var vx11 = vertices3[b11] + deform3[f3];
												var vy11 = vertices3[b11 + 1] + deform3[f3 + 1];
												var weight7 = vertices3[b11 + 2];
												wx7 += (vx11 * bone11.a + vy11 * bone11.b + bone11.worldX) * weight7;
												wy7 += (vx11 * bone11.c + vy11 * bone11.d + bone11.worldY) * weight7;
												++v7;
												b11 += 3;
												f3 += 2;
											}
											world[w11] = wx7;
											world[w11 + 1] = wy7;
											w11 += 2;
										}
									}
								}
							} else {
								var start2 = curve * 6 + 2;
								var count4 = 8;
								count4 = (count4 >> 1) * 2;
								var skeleton4 = target.bone.skeleton;
								var deformArray4 = target.attachmentVertices;
								var vertices4 = path.vertices;
								var bones5 = path.bones;
								if(bones5 == null) {
									if(deformArray4.length > 0) {
										vertices4 = deformArray4;
									}
									var bone12 = target.bone;
									var x5 = bone12.worldX;
									var y5 = bone12.worldY;
									var a4 = bone12.a;
									var b12 = bone12.b;
									var c4 = bone12.c;
									var d4 = bone12.d;
									var v8 = start2;
									var w12 = 0;
									while(w12 < count4) {
										var vx12 = vertices4[v8];
										var vy12 = vertices4[v8 + 1];
										world[w12] = vx12 * a4 + vy12 * b12 + x5;
										world[w12 + 1] = vx12 * c4 + vy12 * d4 + y5;
										v8 += 2;
										w12 += 2;
									}
								} else {
									var v9 = 0;
									var skip4 = 0;
									var i5 = 0;
									while(i5 < start2) {
										var n12 = bones5[v9];
										v9 += n12 + 1;
										skip4 += n12;
										i5 += 2;
									}
									var skeletonBones4 = skeleton4.getBones();
									if(deformArray4.length == 0) {
										var w13 = 0;
										var b13 = skip4 * 3;
										while(w13 < count4) {
											var wx8 = 0;
											var wy8 = 0;
											var n13 = bones5[v9++];
											n13 += v9;
											while(v9 < n13) {
												var bone13 = js_Boot.__cast(skeletonBones4[bones5[v9]] , spine_Bone);
												var vx13 = vertices4[b13];
												var vy13 = vertices4[b13 + 1];
												var weight8 = vertices4[b13 + 2];
												wx8 += (vx13 * bone13.a + vy13 * bone13.b + bone13.worldX) * weight8;
												wy8 += (vx13 * bone13.c + vy13 * bone13.d + bone13.worldY) * weight8;
												++v9;
												b13 += 3;
											}
											world[w13] = wx8;
											world[w13 + 1] = wy8;
											w13 += 2;
										}
									} else {
										var deform4 = deformArray4;
										var w14 = 0;
										var b14 = skip4 * 3;
										var f4 = skip4 << 1;
										while(w14 < count4) {
											var wx9 = 0;
											var wy9 = 0;
											var n14 = bones5[v9++];
											n14 += v9;
											while(v9 < n14) {
												var bone14 = js_Boot.__cast(skeletonBones4[bones5[v9]] , spine_Bone);
												var vx14 = vertices4[b14] + deform4[f4];
												var vy14 = vertices4[b14 + 1] + deform4[f4 + 1];
												var weight9 = vertices4[b14 + 2];
												wx9 += (vx14 * bone14.a + vy14 * bone14.b + bone14.worldX) * weight9;
												wy9 += (vx14 * bone14.c + vy14 * bone14.d + bone14.worldY) * weight9;
												++v9;
												b14 += 3;
												f4 += 2;
											}
											world[w14] = wx9;
											world[w14 + 1] = wy9;
											w14 += 2;
										}
									}
								}
							}
						}
						var p2 = p;
						var x12 = world[0];
						var y12 = world[1];
						var cx1 = world[2];
						var cy1 = world[3];
						var cx2 = world[4];
						var cy2 = world[5];
						var tangents1 = tangents || i > 0 && space < spine_PathConstraint.epsilon;
						if(p2 < spine_PathConstraint.epsilon || isNaN(p2)) {
							p2 = spine_PathConstraint.epsilon;
						}
						var tt = p2 * p2;
						var ttt = tt * p2;
						var u = 1 - p2;
						var uu = u * u;
						var uuu = uu * u;
						var ut = u * p2;
						var ut3 = ut * 3;
						var uut3 = u * ut3;
						var utt3 = ut3 * p2;
						var x6 = x12 * uuu + cx1 * uut3 + cx2 * utt3 + world[6] * ttt;
						var y6 = y12 * uuu + cy1 * uut3 + cy2 * utt3 + world[7] * ttt;
						out[o] = x6;
						out[o + 1] = y6;
						if(tangents1) {
							out[o + 2] = js_Boot.__cast(Math.atan2(y6 - (y12 * uu + cy1 * ut * 2 + cy2 * tt),x6 - (x12 * uu + cx1 * ut * 2 + cx2 * tt)) , Float);
						}
						++i;
						o += 3;
					}
					positions = out;
				} else {
					if(closed) {
						verticesLength += 2;
						var this1 = this.world;
						var len = this1.length;
						if(len > verticesLength) {
							this1.splice(verticesLength,verticesLength - len);
						} else if(len < verticesLength) {
							while(len < verticesLength) {
								this1.push(0);
								++len;
							}
						}
						world = this1;
						var count = verticesLength - 4;
						count = (count >> 1) * 2;
						var skeleton = target.bone.skeleton;
						var deformArray = target.attachmentVertices;
						var vertices = path.vertices;
						var bones1 = path.bones;
						if(bones1 == null) {
							if(deformArray.length > 0) {
								vertices = deformArray;
							}
							var bone = target.bone;
							var x = bone.worldX;
							var y = bone.worldY;
							var a = bone.a;
							var b = bone.b;
							var c = bone.c;
							var d = bone.d;
							var v = 2;
							var w = 0;
							while(w < count) {
								var vx = vertices[v];
								var vy = vertices[v + 1];
								world[w] = vx * a + vy * b + x;
								world[w + 1] = vx * c + vy * d + y;
								v += 2;
								w += 2;
							}
						} else {
							var v = 0;
							var skip = 0;
							var i = 0;
							while(i < 2) {
								var n = bones1[v];
								v += n + 1;
								skip += n;
								i += 2;
							}
							var skeletonBones = skeleton.getBones();
							if(deformArray.length == 0) {
								var w = 0;
								var b = skip * 3;
								while(w < count) {
									var wx = 0;
									var wy = 0;
									var n = bones1[v++];
									n += v;
									while(v < n) {
										var bone = js_Boot.__cast(skeletonBones[bones1[v]] , spine_Bone);
										var vx = vertices[b];
										var vy = vertices[b + 1];
										var weight = vertices[b + 2];
										wx += (vx * bone.a + vy * bone.b + bone.worldX) * weight;
										wy += (vx * bone.c + vy * bone.d + bone.worldY) * weight;
										++v;
										b += 3;
									}
									world[w] = wx;
									world[w + 1] = wy;
									w += 2;
								}
							} else {
								var deform = deformArray;
								var w = 0;
								var b = skip * 3;
								var f = skip << 1;
								while(w < count) {
									var wx = 0;
									var wy = 0;
									var n = bones1[v++];
									n += v;
									while(v < n) {
										var bone = js_Boot.__cast(skeletonBones[bones1[v]] , spine_Bone);
										var vx = vertices[b] + deform[f];
										var vy = vertices[b + 1] + deform[f + 1];
										var weight = vertices[b + 2];
										wx += (vx * bone.a + vy * bone.b + bone.worldX) * weight;
										wy += (vx * bone.c + vy * bone.d + bone.worldY) * weight;
										++v;
										b += 3;
										f += 2;
									}
									world[w] = wx;
									world[w + 1] = wy;
									w += 2;
								}
							}
						}
						var count = 2;
						var offset = verticesLength - 4;
						count = offset + (count >> 1) * 2;
						var skeleton = target.bone.skeleton;
						var deformArray = target.attachmentVertices;
						var vertices = path.vertices;
						var bones1 = path.bones;
						if(bones1 == null) {
							if(deformArray.length > 0) {
								vertices = deformArray;
							}
							var bone = target.bone;
							var x = bone.worldX;
							var y = bone.worldY;
							var a = bone.a;
							var b = bone.b;
							var c = bone.c;
							var d = bone.d;
							var v = 0;
							var w = offset;
							while(w < count) {
								var vx = vertices[v];
								var vy = vertices[v + 1];
								world[w] = vx * a + vy * b + x;
								world[w + 1] = vx * c + vy * d + y;
								v += 2;
								w += 2;
							}
						} else {
							var v = 0;
							var skip = 0;
							var i = 0;
							while(i < 0) {
								var n = bones1[v];
								v += n + 1;
								skip += n;
								i += 2;
							}
							var skeletonBones = skeleton.getBones();
							if(deformArray.length == 0) {
								var w = offset;
								var b = skip * 3;
								while(w < count) {
									var wx = 0;
									var wy = 0;
									var n = bones1[v++];
									n += v;
									while(v < n) {
										var bone = js_Boot.__cast(skeletonBones[bones1[v]] , spine_Bone);
										var vx = vertices[b];
										var vy = vertices[b + 1];
										var weight = vertices[b + 2];
										wx += (vx * bone.a + vy * bone.b + bone.worldX) * weight;
										wy += (vx * bone.c + vy * bone.d + bone.worldY) * weight;
										++v;
										b += 3;
									}
									world[w] = wx;
									world[w + 1] = wy;
									w += 2;
								}
							} else {
								var deform = deformArray;
								var w = offset;
								var b = skip * 3;
								var f = skip << 1;
								while(w < count) {
									var wx = 0;
									var wy = 0;
									var n = bones1[v++];
									n += v;
									while(v < n) {
										var bone = js_Boot.__cast(skeletonBones[bones1[v]] , spine_Bone);
										var vx = vertices[b] + deform[f];
										var vy = vertices[b + 1] + deform[f + 1];
										var weight = vertices[b + 2];
										wx += (vx * bone.a + vy * bone.b + bone.worldX) * weight;
										wy += (vx * bone.c + vy * bone.d + bone.worldY) * weight;
										++v;
										b += 3;
										f += 2;
									}
									world[w] = wx;
									world[w + 1] = wy;
									w += 2;
								}
							}
						}
						world[verticesLength - 2] = world[0];
						world[verticesLength - 1] = world[1];
					} else {
						--curveCount;
						verticesLength -= 4;
						var this1 = this.world;
						var len = this1.length;
						if(len > verticesLength) {
							this1.splice(verticesLength,verticesLength - len);
						} else if(len < verticesLength) {
							while(len < verticesLength) {
								this1.push(0);
								++len;
							}
						}
						world = this1;
						var count = verticesLength;
						count = (count >> 1) * 2;
						var skeleton = target.bone.skeleton;
						var deformArray = target.attachmentVertices;
						var vertices = path.vertices;
						var bones1 = path.bones;
						if(bones1 == null) {
							if(deformArray.length > 0) {
								vertices = deformArray;
							}
							var bone = target.bone;
							var x = bone.worldX;
							var y = bone.worldY;
							var a = bone.a;
							var b = bone.b;
							var c = bone.c;
							var d = bone.d;
							var v = 2;
							var w = 0;
							while(w < count) {
								var vx = vertices[v];
								var vy = vertices[v + 1];
								world[w] = vx * a + vy * b + x;
								world[w + 1] = vx * c + vy * d + y;
								v += 2;
								w += 2;
							}
						} else {
							var v = 0;
							var skip = 0;
							var i = 0;
							while(i < 2) {
								var n = bones1[v];
								v += n + 1;
								skip += n;
								i += 2;
							}
							var skeletonBones = skeleton.getBones();
							if(deformArray.length == 0) {
								var w = 0;
								var b = skip * 3;
								while(w < count) {
									var wx = 0;
									var wy = 0;
									var n = bones1[v++];
									n += v;
									while(v < n) {
										var bone = js_Boot.__cast(skeletonBones[bones1[v]] , spine_Bone);
										var vx = vertices[b];
										var vy = vertices[b + 1];
										var weight = vertices[b + 2];
										wx += (vx * bone.a + vy * bone.b + bone.worldX) * weight;
										wy += (vx * bone.c + vy * bone.d + bone.worldY) * weight;
										++v;
										b += 3;
									}
									world[w] = wx;
									world[w + 1] = wy;
									w += 2;
								}
							} else {
								var deform = deformArray;
								var w = 0;
								var b = skip * 3;
								var f = skip << 1;
								while(w < count) {
									var wx = 0;
									var wy = 0;
									var n = bones1[v++];
									n += v;
									while(v < n) {
										var bone = js_Boot.__cast(skeletonBones[bones1[v]] , spine_Bone);
										var vx = vertices[b] + deform[f];
										var vy = vertices[b + 1] + deform[f + 1];
										var weight = vertices[b + 2];
										wx += (vx * bone.a + vy * bone.b + bone.worldX) * weight;
										wy += (vx * bone.c + vy * bone.d + bone.worldY) * weight;
										++v;
										b += 3;
										f += 2;
									}
									world[w] = wx;
									world[w + 1] = wy;
									w += 2;
								}
							}
						}
					}
					var this1 = this.curves;
					var len = this1.length;
					if(len > curveCount) {
						this1.splice(curveCount,curveCount - len);
					} else if(len < curveCount) {
						while(len < curveCount) {
							this1.push(0);
							++len;
						}
					}
					var curves = this1;
					var pathLength = 0;
					var x1 = world[0];
					var y1 = world[1];
					var cx1 = 0;
					var cy1 = 0;
					var cx2 = 0;
					var cy2 = 0;
					var x2 = 0;
					var y2 = 0;
					var tmpx = 0;
					var tmpy = 0;
					var dddfx = 0;
					var dddfy = 0;
					var ddfx = 0;
					var ddfy = 0;
					var dfx = 0;
					var dfy = 0;
					var i = 0;
					var w = 2;
					while(i < curveCount) {
						cx1 = world[w];
						cy1 = world[w + 1];
						cx2 = world[w + 2];
						cy2 = world[w + 3];
						x2 = world[w + 4];
						y2 = world[w + 5];
						tmpx = (x1 - cx1 * 2 + cx2) * 0.1875;
						tmpy = (y1 - cy1 * 2 + cy2) * 0.1875;
						dddfx = ((cx1 - cx2) * 3 - x1 + x2) * 0.09375;
						dddfy = ((cy1 - cy2) * 3 - y1 + y2) * 0.09375;
						ddfx = tmpx * 2 + dddfx;
						ddfy = tmpy * 2 + dddfy;
						dfx = (cx1 - x1) * 0.75 + tmpx + dddfx * 0.16666667;
						dfy = (cy1 - y1) * 0.75 + tmpy + dddfy * 0.16666667;
						pathLength += js_Boot.__cast(Math.sqrt(dfx * dfx + dfy * dfy) , Float);
						dfx += ddfx;
						dfy += ddfy;
						ddfx += dddfx;
						ddfy += dddfy;
						pathLength += js_Boot.__cast(Math.sqrt(dfx * dfx + dfy * dfy) , Float);
						dfx += ddfx;
						dfy += ddfy;
						pathLength += js_Boot.__cast(Math.sqrt(dfx * dfx + dfy * dfy) , Float);
						dfx += ddfx + dddfx;
						dfy += ddfy + dddfy;
						pathLength += js_Boot.__cast(Math.sqrt(dfx * dfx + dfy * dfy) , Float);
						curves[i] = pathLength;
						x1 = x2;
						y1 = y2;
						++i;
						w += 6;
					}
					if(percentPosition) {
						position *= pathLength;
					}
					if(percentSpacing) {
						var i = 0;
						while(i < spacesCount) {
							spaces1[i] *= pathLength;
							++i;
						}
					}
					var segments = this.segments;
					var curveLength = 0;
					var i = 0;
					var o = 0;
					var curve = 0;
					var segment = 0;
					while(i < spacesCount) {
						var space = spaces1[i];
						var p = position += space;
						if(closed) {
							p %= pathLength;
							if(p < 0) {
								p += pathLength;
							}
							curve = 0;
						} else if(p < 0) {
							var x11 = world[0];
							var y11 = world[1];
							var dx = world[2] - x11;
							var dy = world[3] - y11;
							var r = js_Boot.__cast(Math.atan2(dy,dx) , Float);
							out[o] = x11 + p * js_Boot.__cast(Math.cos(r) , Float);
							out[o + 1] = y11 + p * js_Boot.__cast(Math.sin(r) , Float);
							out[o + 2] = r;
							++i;
							o += 3;
							continue;
						} else if(p > pathLength) {
							var p1 = p - pathLength;
							var i1 = verticesLength - 4;
							var x12 = world[i1 + 2];
							var y12 = world[i1 + 3];
							var dx1 = x12 - world[i1];
							var dy1 = y12 - world[i1 + 1];
							var r1 = js_Boot.__cast(Math.atan2(dy1,dx1) , Float);
							out[o] = x12 + p1 * js_Boot.__cast(Math.cos(r1) , Float);
							out[o + 1] = y12 + p1 * js_Boot.__cast(Math.sin(r1) , Float);
							out[o + 2] = r1;
							++i;
							o += 3;
							continue;
						}
						while(true) {
							var length = curves[curve];
							if(p > length) {
								++curve;
								continue;
							}
							if(curve == 0) {
								p /= length;
							} else {
								var prev = curves[curve - 1];
								p = (p - prev) / (length - prev);
							}
							break;
						}
						if(curve != prevCurve) {
							prevCurve = curve;
							var ii = curve * 6;
							x1 = world[ii];
							y1 = world[ii + 1];
							cx1 = world[ii + 2];
							cy1 = world[ii + 3];
							cx2 = world[ii + 4];
							cy2 = world[ii + 5];
							x2 = world[ii + 6];
							y2 = world[ii + 7];
							tmpx = (x1 - cx1 * 2 + cx2) * 0.03;
							tmpy = (y1 - cy1 * 2 + cy2) * 0.03;
							dddfx = ((cx1 - cx2) * 3 - x1 + x2) * 0.006;
							dddfy = ((cy1 - cy2) * 3 - y1 + y2) * 0.006;
							ddfx = tmpx * 2 + dddfx;
							ddfy = tmpy * 2 + dddfy;
							dfx = (cx1 - x1) * 0.3 + tmpx + dddfx * 0.16666667;
							dfy = (cy1 - y1) * 0.3 + tmpy + dddfy * 0.16666667;
							curveLength = js_Boot.__cast(Math.sqrt(dfx * dfx + dfy * dfy) , Float);
							segments[0] = curveLength;
							ii = 1;
							while(ii < 8) {
								dfx += ddfx;
								dfy += ddfy;
								ddfx += dddfx;
								ddfy += dddfy;
								curveLength += js_Boot.__cast(Math.sqrt(dfx * dfx + dfy * dfy) , Float);
								segments[ii] = curveLength;
								++ii;
							}
							dfx += ddfx;
							dfy += ddfy;
							curveLength += js_Boot.__cast(Math.sqrt(dfx * dfx + dfy * dfy) , Float);
							segments[8] = curveLength;
							dfx += ddfx + dddfx;
							dfy += ddfy + dddfy;
							curveLength += js_Boot.__cast(Math.sqrt(dfx * dfx + dfy * dfy) , Float);
							segments[9] = curveLength;
							segment = 0;
						}
						p *= curveLength;
						while(true) {
							var length1 = segments[segment];
							if(p > length1) {
								++segment;
								continue;
							}
							if(segment == 0) {
								p /= length1;
							} else {
								var prev1 = segments[segment - 1];
								p = segment + (p - prev1) / (length1 - prev1);
							}
							break;
						}
						var p2 = p * 0.1;
						var tangents1 = tangents || i > 0 && space < spine_PathConstraint.epsilon;
						if(p2 < spine_PathConstraint.epsilon || isNaN(p2)) {
							p2 = spine_PathConstraint.epsilon;
						}
						var tt = p2 * p2;
						var ttt = tt * p2;
						var u = 1 - p2;
						var uu = u * u;
						var uuu = uu * u;
						var ut = u * p2;
						var ut3 = ut * 3;
						var uut3 = u * ut3;
						var utt3 = ut3 * p2;
						var x = x1 * uuu + cx1 * uut3 + cx2 * utt3 + x2 * ttt;
						var y = y1 * uuu + cy1 * uut3 + cy2 * utt3 + y2 * ttt;
						out[o] = x;
						out[o + 1] = y;
						if(tangents1) {
							out[o + 2] = js_Boot.__cast(Math.atan2(y - (y1 * uu + cy1 * ut * 2 + cy2 * tt),x - (x1 * uu + cx1 * ut * 2 + cx2 * tt)) , Float);
						}
						++i;
						o += 3;
					}
					positions = out;
				}
				var boneX = positions[0];
				var boneY = positions[1];
				var offsetRotation = data.offsetRotation;
				var tip = false;
				if(offsetRotation == 0) {
					tip = rotateMode == 1;
				} else {
					tip = false;
					var p = this.target.bone;
					offsetRotation *= p.a * p.d - p.b * p.c > 0 ? spine_utils_SpineUtils.degRad : -spine_utils_SpineUtils.degRad;
				}
				var i = 0;
				var p = 3;
				while(i < boneCount) {
					var bone = js_Boot.__cast(bones[i] , spine_Bone);
					bone.worldX += (boneX - bone.worldX) * translateMix;
					bone.worldY += (boneY - bone.worldY) * translateMix;
					var x = positions[p];
					var y = positions[p + 1];
					var dx = x - boneX;
					var dy = y - boneY;
					if(scale) {
						var length = lengths[i];
						if(length >= spine_PathConstraint.epsilon) {
							var s = js_Boot.__cast(Math.sqrt(dx * dx + dy * dy) / length - 1 , Float) * rotateMix + 1;
							bone.a *= s;
							bone.c *= s;
						}
					}
					boneX = x;
					boneY = y;
					if(rotate) {
						var a = bone.a;
						var b = bone.b;
						var c = bone.c;
						var d = bone.d;
						var r = 0;
						var cos = 0;
						var sin = 0;
						if(tangents) {
							r = positions[p - 1];
						} else if(spaces[i + 1] < spine_PathConstraint.epsilon) {
							r = positions[p + 2];
						} else {
							r = js_Boot.__cast(Math.atan2(dy,dx) , Float);
						}
						r -= js_Boot.__cast(Math.atan2(c,a) , Float);
						if(tip) {
							cos = js_Boot.__cast(Math.cos(r) , Float);
							sin = js_Boot.__cast(Math.sin(r) , Float);
							var length1 = bone.data.length;
							boneX += (length1 * (cos * a - sin * c) - dx) * rotateMix;
							boneY += (length1 * (sin * a + cos * c) - dy) * rotateMix;
						} else {
							r += offsetRotation;
						}
						if(r > 3.1415927) {
							r -= 6.2831854;
						} else if(r < -3.1415927) {
							r += 6.2831854;
						}
						r *= rotateMix;
						cos = js_Boot.__cast(Math.cos(r) , Float);
						sin = js_Boot.__cast(Math.sin(r) , Float);
						bone.a = cos * a - sin * c;
						bone.b = cos * b - sin * d;
						bone.c = sin * a + cos * c;
						bone.d = sin * b + cos * d;
					}
					bone.appliedValid = false;
					++i;
					p += 3;
				}
			}
		}
	}
	,update: function() {
		var attachment = this.target.attachment;
		if(!((attachment) instanceof spine_attachments_PathAttachment)) {
			return;
		}
		var rotateMix = this.rotateMix;
		var translateMix = this.translateMix;
		var translate = translateMix > 0;
		var rotate = rotateMix > 0;
		if(!translate && !rotate) {
			return;
		}
		var data = this.data;
		var spacingMode = data.spacingMode;
		var lengthSpacing = spacingMode == 0;
		var rotateMode = data.rotateMode;
		var tangents = rotateMode == 0;
		var scale = rotateMode == 2;
		var boneCount = this.bones.length;
		var spacesCount = tangents ? boneCount : boneCount + 1;
		var bones = this.bones;
		var this1 = this.spaces;
		var len = this1.length;
		if(len > spacesCount) {
			this1.splice(spacesCount,spacesCount - len);
		} else if(len < spacesCount) {
			while(len < spacesCount) {
				this1.push(0);
				++len;
			}
		}
		var spaces = this1;
		var lengths = null;
		var spacing = this.spacing;
		if(scale || lengthSpacing) {
			if(scale) {
				var this1 = this.lengths;
				var len = this1.length;
				if(len > boneCount) {
					this1.splice(boneCount,boneCount - len);
				} else if(len < boneCount) {
					while(len < boneCount) {
						this1.push(0);
						++len;
					}
				}
				lengths = this1;
			}
			var i = 0;
			var n = spacesCount - 1;
			while(i < n) {
				var bone = js_Boot.__cast(bones[i] , spine_Bone);
				var setupLength = bone.data.length;
				if(setupLength < spine_PathConstraint.epsilon) {
					if(scale) {
						lengths[i] = 0;
					}
					spaces[++i] = 0;
				} else {
					var x = setupLength * bone.a;
					var y = setupLength * bone.c;
					var length = js_Boot.__cast(Math.sqrt(x * x + y * y) , Float);
					if(scale) {
						lengths[i] = length;
					}
					spaces[++i] = (lengthSpacing ? setupLength + spacing : spacing) * length / setupLength;
				}
			}
		} else {
			var i = 1;
			while(i < spacesCount) {
				spaces[i] = spacing;
				++i;
			}
		}
		var path = js_Boot.__cast(attachment , spine_attachments_PathAttachment);
		var percentPosition = data.positionMode == 1;
		var percentSpacing = spacingMode == 2;
		var target = this.target;
		var position = this.position;
		var spaces1 = this.spaces;
		var this1 = this.positions;
		var size = spacesCount * 3 + 2;
		var len = this1.length;
		if(len > size) {
			this1.splice(size,size - len);
		} else if(len < size) {
			while(len < size) {
				this1.push(0);
				++len;
			}
		}
		var out = this1;
		var world = null;
		var closed = path.closed;
		var verticesLength = path.worldVerticesLength;
		var curveCount = verticesLength / 6 | 0;
		var prevCurve = -1;
		var positions;
		if(!path.constantSpeed) {
			var lengths1 = path.lengths;
			curveCount -= closed ? 1 : 2;
			var pathLength = lengths1[curveCount];
			if(percentPosition) {
				position *= pathLength;
			}
			if(percentSpacing) {
				var i = 0;
				while(i < spacesCount) {
					spaces1[i] *= pathLength;
					++i;
				}
			}
			var this1 = this.world;
			var len = this1.length;
			if(len > 8) {
				this1.splice(8,8 - len);
			} else if(len < 8) {
				while(len < 8) {
					this1.push(0);
					++len;
				}
			}
			world = this1;
			var i = 0;
			var o = 0;
			var curve = 0;
			while(i < spacesCount) {
				var space = spaces1[i];
				var p = position += space;
				if(closed) {
					p %= pathLength;
					if(p < 0) {
						p += pathLength;
					}
					curve = 0;
				} else if(p < 0) {
					if(prevCurve != -2) {
						prevCurve = -2;
						var count = 4;
						count = (count >> 1) * 2;
						var skeleton = target.bone.skeleton;
						var deformArray = target.attachmentVertices;
						var vertices = path.vertices;
						var bones1 = path.bones;
						if(bones1 == null) {
							if(deformArray.length > 0) {
								vertices = deformArray;
							}
							var bone = target.bone;
							var x = bone.worldX;
							var y = bone.worldY;
							var a = bone.a;
							var b = bone.b;
							var c = bone.c;
							var d = bone.d;
							var v = 2;
							var w = 0;
							while(w < count) {
								var vx = vertices[v];
								var vy = vertices[v + 1];
								world[w] = vx * a + vy * b + x;
								world[w + 1] = vx * c + vy * d + y;
								v += 2;
								w += 2;
							}
						} else {
							var v1 = 0;
							var skip = 0;
							var i1 = 0;
							while(i1 < 2) {
								var n = bones1[v1];
								v1 += n + 1;
								skip += n;
								i1 += 2;
							}
							var skeletonBones = skeleton.getBones();
							if(deformArray.length == 0) {
								var w1 = 0;
								var b1 = skip * 3;
								while(w1 < count) {
									var wx = 0;
									var wy = 0;
									var n1 = bones1[v1++];
									n1 += v1;
									while(v1 < n1) {
										var bone1 = js_Boot.__cast(skeletonBones[bones1[v1]] , spine_Bone);
										var vx1 = vertices[b1];
										var vy1 = vertices[b1 + 1];
										var weight = vertices[b1 + 2];
										wx += (vx1 * bone1.a + vy1 * bone1.b + bone1.worldX) * weight;
										wy += (vx1 * bone1.c + vy1 * bone1.d + bone1.worldY) * weight;
										++v1;
										b1 += 3;
									}
									world[w1] = wx;
									world[w1 + 1] = wy;
									w1 += 2;
								}
							} else {
								var deform = deformArray;
								var w2 = 0;
								var b2 = skip * 3;
								var f = skip << 1;
								while(w2 < count) {
									var wx1 = 0;
									var wy1 = 0;
									var n2 = bones1[v1++];
									n2 += v1;
									while(v1 < n2) {
										var bone2 = js_Boot.__cast(skeletonBones[bones1[v1]] , spine_Bone);
										var vx2 = vertices[b2] + deform[f];
										var vy2 = vertices[b2 + 1] + deform[f + 1];
										var weight1 = vertices[b2 + 2];
										wx1 += (vx2 * bone2.a + vy2 * bone2.b + bone2.worldX) * weight1;
										wy1 += (vx2 * bone2.c + vy2 * bone2.d + bone2.worldY) * weight1;
										++v1;
										b2 += 3;
										f += 2;
									}
									world[w2] = wx1;
									world[w2 + 1] = wy1;
									w2 += 2;
								}
							}
						}
					}
					var x1 = world[0];
					var y1 = world[1];
					var dx = world[2] - x1;
					var dy = world[3] - y1;
					var r = js_Boot.__cast(Math.atan2(dy,dx) , Float);
					out[o] = x1 + p * js_Boot.__cast(Math.cos(r) , Float);
					out[o + 1] = y1 + p * js_Boot.__cast(Math.sin(r) , Float);
					out[o + 2] = r;
					++i;
					o += 3;
					continue;
				} else if(p > pathLength) {
					if(prevCurve != -3) {
						prevCurve = -3;
						var start = verticesLength - 6;
						var count1 = 4;
						count1 = (count1 >> 1) * 2;
						var skeleton1 = target.bone.skeleton;
						var deformArray1 = target.attachmentVertices;
						var vertices1 = path.vertices;
						var bones2 = path.bones;
						if(bones2 == null) {
							if(deformArray1.length > 0) {
								vertices1 = deformArray1;
							}
							var bone3 = target.bone;
							var x2 = bone3.worldX;
							var y2 = bone3.worldY;
							var a1 = bone3.a;
							var b3 = bone3.b;
							var c1 = bone3.c;
							var d1 = bone3.d;
							var v2 = start;
							var w3 = 0;
							while(w3 < count1) {
								var vx3 = vertices1[v2];
								var vy3 = vertices1[v2 + 1];
								world[w3] = vx3 * a1 + vy3 * b3 + x2;
								world[w3 + 1] = vx3 * c1 + vy3 * d1 + y2;
								v2 += 2;
								w3 += 2;
							}
						} else {
							var v3 = 0;
							var skip1 = 0;
							var i2 = 0;
							while(i2 < start) {
								var n3 = bones2[v3];
								v3 += n3 + 1;
								skip1 += n3;
								i2 += 2;
							}
							var skeletonBones1 = skeleton1.getBones();
							if(deformArray1.length == 0) {
								var w4 = 0;
								var b4 = skip1 * 3;
								while(w4 < count1) {
									var wx2 = 0;
									var wy2 = 0;
									var n4 = bones2[v3++];
									n4 += v3;
									while(v3 < n4) {
										var bone4 = js_Boot.__cast(skeletonBones1[bones2[v3]] , spine_Bone);
										var vx4 = vertices1[b4];
										var vy4 = vertices1[b4 + 1];
										var weight2 = vertices1[b4 + 2];
										wx2 += (vx4 * bone4.a + vy4 * bone4.b + bone4.worldX) * weight2;
										wy2 += (vx4 * bone4.c + vy4 * bone4.d + bone4.worldY) * weight2;
										++v3;
										b4 += 3;
									}
									world[w4] = wx2;
									world[w4 + 1] = wy2;
									w4 += 2;
								}
							} else {
								var deform1 = deformArray1;
								var w5 = 0;
								var b5 = skip1 * 3;
								var f1 = skip1 << 1;
								while(w5 < count1) {
									var wx3 = 0;
									var wy3 = 0;
									var n5 = bones2[v3++];
									n5 += v3;
									while(v3 < n5) {
										var bone5 = js_Boot.__cast(skeletonBones1[bones2[v3]] , spine_Bone);
										var vx5 = vertices1[b5] + deform1[f1];
										var vy5 = vertices1[b5 + 1] + deform1[f1 + 1];
										var weight3 = vertices1[b5 + 2];
										wx3 += (vx5 * bone5.a + vy5 * bone5.b + bone5.worldX) * weight3;
										wy3 += (vx5 * bone5.c + vy5 * bone5.d + bone5.worldY) * weight3;
										++v3;
										b5 += 3;
										f1 += 2;
									}
									world[w5] = wx3;
									world[w5 + 1] = wy3;
									w5 += 2;
								}
							}
						}
					}
					var p1 = p - pathLength;
					var x11 = world[2];
					var y11 = world[3];
					var dx1 = x11 - world[0];
					var dy1 = y11 - world[1];
					var r1 = js_Boot.__cast(Math.atan2(dy1,dx1) , Float);
					out[o] = x11 + p1 * js_Boot.__cast(Math.cos(r1) , Float);
					out[o + 1] = y11 + p1 * js_Boot.__cast(Math.sin(r1) , Float);
					out[o + 2] = r1;
					++i;
					o += 3;
					continue;
				}
				while(true) {
					var length = lengths1[curve];
					if(p > length) {
						++curve;
						continue;
					}
					if(curve == 0) {
						p /= length;
					} else {
						var prev = lengths1[curve - 1];
						p = (p - prev) / (length - prev);
					}
					break;
				}
				if(curve != prevCurve) {
					prevCurve = curve;
					if(closed && curve == curveCount) {
						var start1 = verticesLength - 4;
						var count2 = 4;
						count2 = (count2 >> 1) * 2;
						var skeleton2 = target.bone.skeleton;
						var deformArray2 = target.attachmentVertices;
						var vertices2 = path.vertices;
						var bones3 = path.bones;
						if(bones3 == null) {
							if(deformArray2.length > 0) {
								vertices2 = deformArray2;
							}
							var bone6 = target.bone;
							var x3 = bone6.worldX;
							var y3 = bone6.worldY;
							var a2 = bone6.a;
							var b6 = bone6.b;
							var c2 = bone6.c;
							var d2 = bone6.d;
							var v4 = start1;
							var w6 = 0;
							while(w6 < count2) {
								var vx6 = vertices2[v4];
								var vy6 = vertices2[v4 + 1];
								world[w6] = vx6 * a2 + vy6 * b6 + x3;
								world[w6 + 1] = vx6 * c2 + vy6 * d2 + y3;
								v4 += 2;
								w6 += 2;
							}
						} else {
							var v5 = 0;
							var skip2 = 0;
							var i3 = 0;
							while(i3 < start1) {
								var n6 = bones3[v5];
								v5 += n6 + 1;
								skip2 += n6;
								i3 += 2;
							}
							var skeletonBones2 = skeleton2.getBones();
							if(deformArray2.length == 0) {
								var w7 = 0;
								var b7 = skip2 * 3;
								while(w7 < count2) {
									var wx4 = 0;
									var wy4 = 0;
									var n7 = bones3[v5++];
									n7 += v5;
									while(v5 < n7) {
										var bone7 = js_Boot.__cast(skeletonBones2[bones3[v5]] , spine_Bone);
										var vx7 = vertices2[b7];
										var vy7 = vertices2[b7 + 1];
										var weight4 = vertices2[b7 + 2];
										wx4 += (vx7 * bone7.a + vy7 * bone7.b + bone7.worldX) * weight4;
										wy4 += (vx7 * bone7.c + vy7 * bone7.d + bone7.worldY) * weight4;
										++v5;
										b7 += 3;
									}
									world[w7] = wx4;
									world[w7 + 1] = wy4;
									w7 += 2;
								}
							} else {
								var deform2 = deformArray2;
								var w8 = 0;
								var b8 = skip2 * 3;
								var f2 = skip2 << 1;
								while(w8 < count2) {
									var wx5 = 0;
									var wy5 = 0;
									var n8 = bones3[v5++];
									n8 += v5;
									while(v5 < n8) {
										var bone8 = js_Boot.__cast(skeletonBones2[bones3[v5]] , spine_Bone);
										var vx8 = vertices2[b8] + deform2[f2];
										var vy8 = vertices2[b8 + 1] + deform2[f2 + 1];
										var weight5 = vertices2[b8 + 2];
										wx5 += (vx8 * bone8.a + vy8 * bone8.b + bone8.worldX) * weight5;
										wy5 += (vx8 * bone8.c + vy8 * bone8.d + bone8.worldY) * weight5;
										++v5;
										b8 += 3;
										f2 += 2;
									}
									world[w8] = wx5;
									world[w8 + 1] = wy5;
									w8 += 2;
								}
							}
						}
						var count3 = 4;
						count3 = 4 + (count3 >> 1) * 2;
						var skeleton3 = target.bone.skeleton;
						var deformArray3 = target.attachmentVertices;
						var vertices3 = path.vertices;
						var bones4 = path.bones;
						if(bones4 == null) {
							if(deformArray3.length > 0) {
								vertices3 = deformArray3;
							}
							var bone9 = target.bone;
							var x4 = bone9.worldX;
							var y4 = bone9.worldY;
							var a3 = bone9.a;
							var b9 = bone9.b;
							var c3 = bone9.c;
							var d3 = bone9.d;
							var v6 = 0;
							var w9 = 4;
							while(w9 < count3) {
								var vx9 = vertices3[v6];
								var vy9 = vertices3[v6 + 1];
								world[w9] = vx9 * a3 + vy9 * b9 + x4;
								world[w9 + 1] = vx9 * c3 + vy9 * d3 + y4;
								v6 += 2;
								w9 += 2;
							}
						} else {
							var v7 = 0;
							var skip3 = 0;
							var i4 = 0;
							while(i4 < 0) {
								var n9 = bones4[v7];
								v7 += n9 + 1;
								skip3 += n9;
								i4 += 2;
							}
							var skeletonBones3 = skeleton3.getBones();
							if(deformArray3.length == 0) {
								var w10 = 4;
								var b10 = skip3 * 3;
								while(w10 < count3) {
									var wx6 = 0;
									var wy6 = 0;
									var n10 = bones4[v7++];
									n10 += v7;
									while(v7 < n10) {
										var bone10 = js_Boot.__cast(skeletonBones3[bones4[v7]] , spine_Bone);
										var vx10 = vertices3[b10];
										var vy10 = vertices3[b10 + 1];
										var weight6 = vertices3[b10 + 2];
										wx6 += (vx10 * bone10.a + vy10 * bone10.b + bone10.worldX) * weight6;
										wy6 += (vx10 * bone10.c + vy10 * bone10.d + bone10.worldY) * weight6;
										++v7;
										b10 += 3;
									}
									world[w10] = wx6;
									world[w10 + 1] = wy6;
									w10 += 2;
								}
							} else {
								var deform3 = deformArray3;
								var w11 = 4;
								var b11 = skip3 * 3;
								var f3 = skip3 << 1;
								while(w11 < count3) {
									var wx7 = 0;
									var wy7 = 0;
									var n11 = bones4[v7++];
									n11 += v7;
									while(v7 < n11) {
										var bone11 = js_Boot.__cast(skeletonBones3[bones4[v7]] , spine_Bone);
										var vx11 = vertices3[b11] + deform3[f3];
										var vy11 = vertices3[b11 + 1] + deform3[f3 + 1];
										var weight7 = vertices3[b11 + 2];
										wx7 += (vx11 * bone11.a + vy11 * bone11.b + bone11.worldX) * weight7;
										wy7 += (vx11 * bone11.c + vy11 * bone11.d + bone11.worldY) * weight7;
										++v7;
										b11 += 3;
										f3 += 2;
									}
									world[w11] = wx7;
									world[w11 + 1] = wy7;
									w11 += 2;
								}
							}
						}
					} else {
						var start2 = curve * 6 + 2;
						var count4 = 8;
						count4 = (count4 >> 1) * 2;
						var skeleton4 = target.bone.skeleton;
						var deformArray4 = target.attachmentVertices;
						var vertices4 = path.vertices;
						var bones5 = path.bones;
						if(bones5 == null) {
							if(deformArray4.length > 0) {
								vertices4 = deformArray4;
							}
							var bone12 = target.bone;
							var x5 = bone12.worldX;
							var y5 = bone12.worldY;
							var a4 = bone12.a;
							var b12 = bone12.b;
							var c4 = bone12.c;
							var d4 = bone12.d;
							var v8 = start2;
							var w12 = 0;
							while(w12 < count4) {
								var vx12 = vertices4[v8];
								var vy12 = vertices4[v8 + 1];
								world[w12] = vx12 * a4 + vy12 * b12 + x5;
								world[w12 + 1] = vx12 * c4 + vy12 * d4 + y5;
								v8 += 2;
								w12 += 2;
							}
						} else {
							var v9 = 0;
							var skip4 = 0;
							var i5 = 0;
							while(i5 < start2) {
								var n12 = bones5[v9];
								v9 += n12 + 1;
								skip4 += n12;
								i5 += 2;
							}
							var skeletonBones4 = skeleton4.getBones();
							if(deformArray4.length == 0) {
								var w13 = 0;
								var b13 = skip4 * 3;
								while(w13 < count4) {
									var wx8 = 0;
									var wy8 = 0;
									var n13 = bones5[v9++];
									n13 += v9;
									while(v9 < n13) {
										var bone13 = js_Boot.__cast(skeletonBones4[bones5[v9]] , spine_Bone);
										var vx13 = vertices4[b13];
										var vy13 = vertices4[b13 + 1];
										var weight8 = vertices4[b13 + 2];
										wx8 += (vx13 * bone13.a + vy13 * bone13.b + bone13.worldX) * weight8;
										wy8 += (vx13 * bone13.c + vy13 * bone13.d + bone13.worldY) * weight8;
										++v9;
										b13 += 3;
									}
									world[w13] = wx8;
									world[w13 + 1] = wy8;
									w13 += 2;
								}
							} else {
								var deform4 = deformArray4;
								var w14 = 0;
								var b14 = skip4 * 3;
								var f4 = skip4 << 1;
								while(w14 < count4) {
									var wx9 = 0;
									var wy9 = 0;
									var n14 = bones5[v9++];
									n14 += v9;
									while(v9 < n14) {
										var bone14 = js_Boot.__cast(skeletonBones4[bones5[v9]] , spine_Bone);
										var vx14 = vertices4[b14] + deform4[f4];
										var vy14 = vertices4[b14 + 1] + deform4[f4 + 1];
										var weight9 = vertices4[b14 + 2];
										wx9 += (vx14 * bone14.a + vy14 * bone14.b + bone14.worldX) * weight9;
										wy9 += (vx14 * bone14.c + vy14 * bone14.d + bone14.worldY) * weight9;
										++v9;
										b14 += 3;
										f4 += 2;
									}
									world[w14] = wx9;
									world[w14 + 1] = wy9;
									w14 += 2;
								}
							}
						}
					}
				}
				var p2 = p;
				var x12 = world[0];
				var y12 = world[1];
				var cx1 = world[2];
				var cy1 = world[3];
				var cx2 = world[4];
				var cy2 = world[5];
				var tangents1 = tangents || i > 0 && space < spine_PathConstraint.epsilon;
				if(p2 < spine_PathConstraint.epsilon || isNaN(p2)) {
					p2 = spine_PathConstraint.epsilon;
				}
				var tt = p2 * p2;
				var ttt = tt * p2;
				var u = 1 - p2;
				var uu = u * u;
				var uuu = uu * u;
				var ut = u * p2;
				var ut3 = ut * 3;
				var uut3 = u * ut3;
				var utt3 = ut3 * p2;
				var x6 = x12 * uuu + cx1 * uut3 + cx2 * utt3 + world[6] * ttt;
				var y6 = y12 * uuu + cy1 * uut3 + cy2 * utt3 + world[7] * ttt;
				out[o] = x6;
				out[o + 1] = y6;
				if(tangents1) {
					out[o + 2] = js_Boot.__cast(Math.atan2(y6 - (y12 * uu + cy1 * ut * 2 + cy2 * tt),x6 - (x12 * uu + cx1 * ut * 2 + cx2 * tt)) , Float);
				}
				++i;
				o += 3;
			}
			positions = out;
		} else {
			if(closed) {
				verticesLength += 2;
				var this1 = this.world;
				var len = this1.length;
				if(len > verticesLength) {
					this1.splice(verticesLength,verticesLength - len);
				} else if(len < verticesLength) {
					while(len < verticesLength) {
						this1.push(0);
						++len;
					}
				}
				world = this1;
				var count = verticesLength - 4;
				count = (count >> 1) * 2;
				var skeleton = target.bone.skeleton;
				var deformArray = target.attachmentVertices;
				var vertices = path.vertices;
				var bones1 = path.bones;
				if(bones1 == null) {
					if(deformArray.length > 0) {
						vertices = deformArray;
					}
					var bone = target.bone;
					var x = bone.worldX;
					var y = bone.worldY;
					var a = bone.a;
					var b = bone.b;
					var c = bone.c;
					var d = bone.d;
					var v = 2;
					var w = 0;
					while(w < count) {
						var vx = vertices[v];
						var vy = vertices[v + 1];
						world[w] = vx * a + vy * b + x;
						world[w + 1] = vx * c + vy * d + y;
						v += 2;
						w += 2;
					}
				} else {
					var v = 0;
					var skip = 0;
					var i = 0;
					while(i < 2) {
						var n = bones1[v];
						v += n + 1;
						skip += n;
						i += 2;
					}
					var skeletonBones = skeleton.getBones();
					if(deformArray.length == 0) {
						var w = 0;
						var b = skip * 3;
						while(w < count) {
							var wx = 0;
							var wy = 0;
							var n = bones1[v++];
							n += v;
							while(v < n) {
								var bone = js_Boot.__cast(skeletonBones[bones1[v]] , spine_Bone);
								var vx = vertices[b];
								var vy = vertices[b + 1];
								var weight = vertices[b + 2];
								wx += (vx * bone.a + vy * bone.b + bone.worldX) * weight;
								wy += (vx * bone.c + vy * bone.d + bone.worldY) * weight;
								++v;
								b += 3;
							}
							world[w] = wx;
							world[w + 1] = wy;
							w += 2;
						}
					} else {
						var deform = deformArray;
						var w = 0;
						var b = skip * 3;
						var f = skip << 1;
						while(w < count) {
							var wx = 0;
							var wy = 0;
							var n = bones1[v++];
							n += v;
							while(v < n) {
								var bone = js_Boot.__cast(skeletonBones[bones1[v]] , spine_Bone);
								var vx = vertices[b] + deform[f];
								var vy = vertices[b + 1] + deform[f + 1];
								var weight = vertices[b + 2];
								wx += (vx * bone.a + vy * bone.b + bone.worldX) * weight;
								wy += (vx * bone.c + vy * bone.d + bone.worldY) * weight;
								++v;
								b += 3;
								f += 2;
							}
							world[w] = wx;
							world[w + 1] = wy;
							w += 2;
						}
					}
				}
				var count = 2;
				var offset = verticesLength - 4;
				count = offset + (count >> 1) * 2;
				var skeleton = target.bone.skeleton;
				var deformArray = target.attachmentVertices;
				var vertices = path.vertices;
				var bones1 = path.bones;
				if(bones1 == null) {
					if(deformArray.length > 0) {
						vertices = deformArray;
					}
					var bone = target.bone;
					var x = bone.worldX;
					var y = bone.worldY;
					var a = bone.a;
					var b = bone.b;
					var c = bone.c;
					var d = bone.d;
					var v = 0;
					var w = offset;
					while(w < count) {
						var vx = vertices[v];
						var vy = vertices[v + 1];
						world[w] = vx * a + vy * b + x;
						world[w + 1] = vx * c + vy * d + y;
						v += 2;
						w += 2;
					}
				} else {
					var v = 0;
					var skip = 0;
					var i = 0;
					while(i < 0) {
						var n = bones1[v];
						v += n + 1;
						skip += n;
						i += 2;
					}
					var skeletonBones = skeleton.getBones();
					if(deformArray.length == 0) {
						var w = offset;
						var b = skip * 3;
						while(w < count) {
							var wx = 0;
							var wy = 0;
							var n = bones1[v++];
							n += v;
							while(v < n) {
								var bone = js_Boot.__cast(skeletonBones[bones1[v]] , spine_Bone);
								var vx = vertices[b];
								var vy = vertices[b + 1];
								var weight = vertices[b + 2];
								wx += (vx * bone.a + vy * bone.b + bone.worldX) * weight;
								wy += (vx * bone.c + vy * bone.d + bone.worldY) * weight;
								++v;
								b += 3;
							}
							world[w] = wx;
							world[w + 1] = wy;
							w += 2;
						}
					} else {
						var deform = deformArray;
						var w = offset;
						var b = skip * 3;
						var f = skip << 1;
						while(w < count) {
							var wx = 0;
							var wy = 0;
							var n = bones1[v++];
							n += v;
							while(v < n) {
								var bone = js_Boot.__cast(skeletonBones[bones1[v]] , spine_Bone);
								var vx = vertices[b] + deform[f];
								var vy = vertices[b + 1] + deform[f + 1];
								var weight = vertices[b + 2];
								wx += (vx * bone.a + vy * bone.b + bone.worldX) * weight;
								wy += (vx * bone.c + vy * bone.d + bone.worldY) * weight;
								++v;
								b += 3;
								f += 2;
							}
							world[w] = wx;
							world[w + 1] = wy;
							w += 2;
						}
					}
				}
				world[verticesLength - 2] = world[0];
				world[verticesLength - 1] = world[1];
			} else {
				--curveCount;
				verticesLength -= 4;
				var this1 = this.world;
				var len = this1.length;
				if(len > verticesLength) {
					this1.splice(verticesLength,verticesLength - len);
				} else if(len < verticesLength) {
					while(len < verticesLength) {
						this1.push(0);
						++len;
					}
				}
				world = this1;
				var count = verticesLength;
				count = (count >> 1) * 2;
				var skeleton = target.bone.skeleton;
				var deformArray = target.attachmentVertices;
				var vertices = path.vertices;
				var bones1 = path.bones;
				if(bones1 == null) {
					if(deformArray.length > 0) {
						vertices = deformArray;
					}
					var bone = target.bone;
					var x = bone.worldX;
					var y = bone.worldY;
					var a = bone.a;
					var b = bone.b;
					var c = bone.c;
					var d = bone.d;
					var v = 2;
					var w = 0;
					while(w < count) {
						var vx = vertices[v];
						var vy = vertices[v + 1];
						world[w] = vx * a + vy * b + x;
						world[w + 1] = vx * c + vy * d + y;
						v += 2;
						w += 2;
					}
				} else {
					var v = 0;
					var skip = 0;
					var i = 0;
					while(i < 2) {
						var n = bones1[v];
						v += n + 1;
						skip += n;
						i += 2;
					}
					var skeletonBones = skeleton.getBones();
					if(deformArray.length == 0) {
						var w = 0;
						var b = skip * 3;
						while(w < count) {
							var wx = 0;
							var wy = 0;
							var n = bones1[v++];
							n += v;
							while(v < n) {
								var bone = js_Boot.__cast(skeletonBones[bones1[v]] , spine_Bone);
								var vx = vertices[b];
								var vy = vertices[b + 1];
								var weight = vertices[b + 2];
								wx += (vx * bone.a + vy * bone.b + bone.worldX) * weight;
								wy += (vx * bone.c + vy * bone.d + bone.worldY) * weight;
								++v;
								b += 3;
							}
							world[w] = wx;
							world[w + 1] = wy;
							w += 2;
						}
					} else {
						var deform = deformArray;
						var w = 0;
						var b = skip * 3;
						var f = skip << 1;
						while(w < count) {
							var wx = 0;
							var wy = 0;
							var n = bones1[v++];
							n += v;
							while(v < n) {
								var bone = js_Boot.__cast(skeletonBones[bones1[v]] , spine_Bone);
								var vx = vertices[b] + deform[f];
								var vy = vertices[b + 1] + deform[f + 1];
								var weight = vertices[b + 2];
								wx += (vx * bone.a + vy * bone.b + bone.worldX) * weight;
								wy += (vx * bone.c + vy * bone.d + bone.worldY) * weight;
								++v;
								b += 3;
								f += 2;
							}
							world[w] = wx;
							world[w + 1] = wy;
							w += 2;
						}
					}
				}
			}
			var this1 = this.curves;
			var len = this1.length;
			if(len > curveCount) {
				this1.splice(curveCount,curveCount - len);
			} else if(len < curveCount) {
				while(len < curveCount) {
					this1.push(0);
					++len;
				}
			}
			var curves = this1;
			var pathLength = 0;
			var x1 = world[0];
			var y1 = world[1];
			var cx1 = 0;
			var cy1 = 0;
			var cx2 = 0;
			var cy2 = 0;
			var x2 = 0;
			var y2 = 0;
			var tmpx = 0;
			var tmpy = 0;
			var dddfx = 0;
			var dddfy = 0;
			var ddfx = 0;
			var ddfy = 0;
			var dfx = 0;
			var dfy = 0;
			var i = 0;
			var w = 2;
			while(i < curveCount) {
				cx1 = world[w];
				cy1 = world[w + 1];
				cx2 = world[w + 2];
				cy2 = world[w + 3];
				x2 = world[w + 4];
				y2 = world[w + 5];
				tmpx = (x1 - cx1 * 2 + cx2) * 0.1875;
				tmpy = (y1 - cy1 * 2 + cy2) * 0.1875;
				dddfx = ((cx1 - cx2) * 3 - x1 + x2) * 0.09375;
				dddfy = ((cy1 - cy2) * 3 - y1 + y2) * 0.09375;
				ddfx = tmpx * 2 + dddfx;
				ddfy = tmpy * 2 + dddfy;
				dfx = (cx1 - x1) * 0.75 + tmpx + dddfx * 0.16666667;
				dfy = (cy1 - y1) * 0.75 + tmpy + dddfy * 0.16666667;
				pathLength += js_Boot.__cast(Math.sqrt(dfx * dfx + dfy * dfy) , Float);
				dfx += ddfx;
				dfy += ddfy;
				ddfx += dddfx;
				ddfy += dddfy;
				pathLength += js_Boot.__cast(Math.sqrt(dfx * dfx + dfy * dfy) , Float);
				dfx += ddfx;
				dfy += ddfy;
				pathLength += js_Boot.__cast(Math.sqrt(dfx * dfx + dfy * dfy) , Float);
				dfx += ddfx + dddfx;
				dfy += ddfy + dddfy;
				pathLength += js_Boot.__cast(Math.sqrt(dfx * dfx + dfy * dfy) , Float);
				curves[i] = pathLength;
				x1 = x2;
				y1 = y2;
				++i;
				w += 6;
			}
			if(percentPosition) {
				position *= pathLength;
			}
			if(percentSpacing) {
				var i = 0;
				while(i < spacesCount) {
					spaces1[i] *= pathLength;
					++i;
				}
			}
			var segments = this.segments;
			var curveLength = 0;
			var i = 0;
			var o = 0;
			var curve = 0;
			var segment = 0;
			while(i < spacesCount) {
				var space = spaces1[i];
				var p = position += space;
				if(closed) {
					p %= pathLength;
					if(p < 0) {
						p += pathLength;
					}
					curve = 0;
				} else if(p < 0) {
					var x11 = world[0];
					var y11 = world[1];
					var dx = world[2] - x11;
					var dy = world[3] - y11;
					var r = js_Boot.__cast(Math.atan2(dy,dx) , Float);
					out[o] = x11 + p * js_Boot.__cast(Math.cos(r) , Float);
					out[o + 1] = y11 + p * js_Boot.__cast(Math.sin(r) , Float);
					out[o + 2] = r;
					++i;
					o += 3;
					continue;
				} else if(p > pathLength) {
					var p1 = p - pathLength;
					var i1 = verticesLength - 4;
					var x12 = world[i1 + 2];
					var y12 = world[i1 + 3];
					var dx1 = x12 - world[i1];
					var dy1 = y12 - world[i1 + 1];
					var r1 = js_Boot.__cast(Math.atan2(dy1,dx1) , Float);
					out[o] = x12 + p1 * js_Boot.__cast(Math.cos(r1) , Float);
					out[o + 1] = y12 + p1 * js_Boot.__cast(Math.sin(r1) , Float);
					out[o + 2] = r1;
					++i;
					o += 3;
					continue;
				}
				while(true) {
					var length = curves[curve];
					if(p > length) {
						++curve;
						continue;
					}
					if(curve == 0) {
						p /= length;
					} else {
						var prev = curves[curve - 1];
						p = (p - prev) / (length - prev);
					}
					break;
				}
				if(curve != prevCurve) {
					prevCurve = curve;
					var ii = curve * 6;
					x1 = world[ii];
					y1 = world[ii + 1];
					cx1 = world[ii + 2];
					cy1 = world[ii + 3];
					cx2 = world[ii + 4];
					cy2 = world[ii + 5];
					x2 = world[ii + 6];
					y2 = world[ii + 7];
					tmpx = (x1 - cx1 * 2 + cx2) * 0.03;
					tmpy = (y1 - cy1 * 2 + cy2) * 0.03;
					dddfx = ((cx1 - cx2) * 3 - x1 + x2) * 0.006;
					dddfy = ((cy1 - cy2) * 3 - y1 + y2) * 0.006;
					ddfx = tmpx * 2 + dddfx;
					ddfy = tmpy * 2 + dddfy;
					dfx = (cx1 - x1) * 0.3 + tmpx + dddfx * 0.16666667;
					dfy = (cy1 - y1) * 0.3 + tmpy + dddfy * 0.16666667;
					curveLength = js_Boot.__cast(Math.sqrt(dfx * dfx + dfy * dfy) , Float);
					segments[0] = curveLength;
					ii = 1;
					while(ii < 8) {
						dfx += ddfx;
						dfy += ddfy;
						ddfx += dddfx;
						ddfy += dddfy;
						curveLength += js_Boot.__cast(Math.sqrt(dfx * dfx + dfy * dfy) , Float);
						segments[ii] = curveLength;
						++ii;
					}
					dfx += ddfx;
					dfy += ddfy;
					curveLength += js_Boot.__cast(Math.sqrt(dfx * dfx + dfy * dfy) , Float);
					segments[8] = curveLength;
					dfx += ddfx + dddfx;
					dfy += ddfy + dddfy;
					curveLength += js_Boot.__cast(Math.sqrt(dfx * dfx + dfy * dfy) , Float);
					segments[9] = curveLength;
					segment = 0;
				}
				p *= curveLength;
				while(true) {
					var length1 = segments[segment];
					if(p > length1) {
						++segment;
						continue;
					}
					if(segment == 0) {
						p /= length1;
					} else {
						var prev1 = segments[segment - 1];
						p = segment + (p - prev1) / (length1 - prev1);
					}
					break;
				}
				var p2 = p * 0.1;
				var tangents1 = tangents || i > 0 && space < spine_PathConstraint.epsilon;
				if(p2 < spine_PathConstraint.epsilon || isNaN(p2)) {
					p2 = spine_PathConstraint.epsilon;
				}
				var tt = p2 * p2;
				var ttt = tt * p2;
				var u = 1 - p2;
				var uu = u * u;
				var uuu = uu * u;
				var ut = u * p2;
				var ut3 = ut * 3;
				var uut3 = u * ut3;
				var utt3 = ut3 * p2;
				var x = x1 * uuu + cx1 * uut3 + cx2 * utt3 + x2 * ttt;
				var y = y1 * uuu + cy1 * uut3 + cy2 * utt3 + y2 * ttt;
				out[o] = x;
				out[o + 1] = y;
				if(tangents1) {
					out[o + 2] = js_Boot.__cast(Math.atan2(y - (y1 * uu + cy1 * ut * 2 + cy2 * tt),x - (x1 * uu + cx1 * ut * 2 + cx2 * tt)) , Float);
				}
				++i;
				o += 3;
			}
			positions = out;
		}
		var boneX = positions[0];
		var boneY = positions[1];
		var offsetRotation = data.offsetRotation;
		var tip = false;
		if(offsetRotation == 0) {
			tip = rotateMode == 1;
		} else {
			tip = false;
			var p = this.target.bone;
			offsetRotation *= p.a * p.d - p.b * p.c > 0 ? spine_utils_SpineUtils.degRad : -spine_utils_SpineUtils.degRad;
		}
		var i = 0;
		var p = 3;
		while(i < boneCount) {
			var bone = js_Boot.__cast(bones[i] , spine_Bone);
			bone.worldX += (boneX - bone.worldX) * translateMix;
			bone.worldY += (boneY - bone.worldY) * translateMix;
			var x = positions[p];
			var y = positions[p + 1];
			var dx = x - boneX;
			var dy = y - boneY;
			if(scale) {
				var length = lengths[i];
				if(length >= spine_PathConstraint.epsilon) {
					var s = js_Boot.__cast(Math.sqrt(dx * dx + dy * dy) / length - 1 , Float) * rotateMix + 1;
					bone.a *= s;
					bone.c *= s;
				}
			}
			boneX = x;
			boneY = y;
			if(rotate) {
				var a = bone.a;
				var b = bone.b;
				var c = bone.c;
				var d = bone.d;
				var r = 0;
				var cos = 0;
				var sin = 0;
				if(tangents) {
					r = positions[p - 1];
				} else if(spaces[i + 1] < spine_PathConstraint.epsilon) {
					r = positions[p + 2];
				} else {
					r = js_Boot.__cast(Math.atan2(dy,dx) , Float);
				}
				r -= js_Boot.__cast(Math.atan2(c,a) , Float);
				if(tip) {
					cos = js_Boot.__cast(Math.cos(r) , Float);
					sin = js_Boot.__cast(Math.sin(r) , Float);
					var length1 = bone.data.length;
					boneX += (length1 * (cos * a - sin * c) - dx) * rotateMix;
					boneY += (length1 * (sin * a + cos * c) - dy) * rotateMix;
				} else {
					r += offsetRotation;
				}
				if(r > 3.1415927) {
					r -= 6.2831854;
				} else if(r < -3.1415927) {
					r += 6.2831854;
				}
				r *= rotateMix;
				cos = js_Boot.__cast(Math.cos(r) , Float);
				sin = js_Boot.__cast(Math.sin(r) , Float);
				bone.a = cos * a - sin * c;
				bone.b = cos * b - sin * d;
				bone.c = sin * a + cos * c;
				bone.d = sin * b + cos * d;
			}
			bone.appliedValid = false;
			++i;
			p += 3;
		}
	}
	,computeWorldPositions: function(path,spacesCount,tangents,percentPosition,percentSpacing) {
		var target = this.target;
		var position = this.position;
		var spaces = this.spaces;
		var this1 = this.positions;
		var size = spacesCount * 3 + 2;
		var len = this1.length;
		if(len > size) {
			this1.splice(size,size - len);
		} else if(len < size) {
			while(len < size) {
				this1.push(0);
				++len;
			}
		}
		var out = this1;
		var world = null;
		var closed = path.closed;
		var verticesLength = path.worldVerticesLength;
		var curveCount = verticesLength / 6 | 0;
		var prevCurve = -1;
		if(!path.constantSpeed) {
			var lengths = path.lengths;
			curveCount -= closed ? 1 : 2;
			var pathLength = lengths[curveCount];
			if(percentPosition) {
				position *= pathLength;
			}
			if(percentSpacing) {
				var i = 0;
				while(i < spacesCount) {
					spaces[i] *= pathLength;
					++i;
				}
			}
			var this1 = this.world;
			var len = this1.length;
			if(len > 8) {
				this1.splice(8,8 - len);
			} else if(len < 8) {
				while(len < 8) {
					this1.push(0);
					++len;
				}
			}
			world = this1;
			var i = 0;
			var o = 0;
			var curve = 0;
			while(i < spacesCount) {
				var space = spaces[i];
				var p = position += space;
				if(closed) {
					p %= pathLength;
					if(p < 0) {
						p += pathLength;
					}
					curve = 0;
				} else if(p < 0) {
					if(prevCurve != -2) {
						prevCurve = -2;
						var count = 4;
						count = (count >> 1) * 2;
						var skeleton = target.bone.skeleton;
						var deformArray = target.attachmentVertices;
						var vertices = path.vertices;
						var bones = path.bones;
						if(bones == null) {
							if(deformArray.length > 0) {
								vertices = deformArray;
							}
							var bone = target.bone;
							var x = bone.worldX;
							var y = bone.worldY;
							var a = bone.a;
							var b = bone.b;
							var c = bone.c;
							var d = bone.d;
							var v = 2;
							var w = 0;
							while(w < count) {
								var vx = vertices[v];
								var vy = vertices[v + 1];
								world[w] = vx * a + vy * b + x;
								world[w + 1] = vx * c + vy * d + y;
								v += 2;
								w += 2;
							}
						} else {
							var v1 = 0;
							var skip = 0;
							var i1 = 0;
							while(i1 < 2) {
								var n = bones[v1];
								v1 += n + 1;
								skip += n;
								i1 += 2;
							}
							var skeletonBones = skeleton.getBones();
							if(deformArray.length == 0) {
								var w1 = 0;
								var b1 = skip * 3;
								while(w1 < count) {
									var wx = 0;
									var wy = 0;
									var n1 = bones[v1++];
									n1 += v1;
									while(v1 < n1) {
										var bone1 = js_Boot.__cast(skeletonBones[bones[v1]] , spine_Bone);
										var vx1 = vertices[b1];
										var vy1 = vertices[b1 + 1];
										var weight = vertices[b1 + 2];
										wx += (vx1 * bone1.a + vy1 * bone1.b + bone1.worldX) * weight;
										wy += (vx1 * bone1.c + vy1 * bone1.d + bone1.worldY) * weight;
										++v1;
										b1 += 3;
									}
									world[w1] = wx;
									world[w1 + 1] = wy;
									w1 += 2;
								}
							} else {
								var deform = deformArray;
								var w2 = 0;
								var b2 = skip * 3;
								var f = skip << 1;
								while(w2 < count) {
									var wx1 = 0;
									var wy1 = 0;
									var n2 = bones[v1++];
									n2 += v1;
									while(v1 < n2) {
										var bone2 = js_Boot.__cast(skeletonBones[bones[v1]] , spine_Bone);
										var vx2 = vertices[b2] + deform[f];
										var vy2 = vertices[b2 + 1] + deform[f + 1];
										var weight1 = vertices[b2 + 2];
										wx1 += (vx2 * bone2.a + vy2 * bone2.b + bone2.worldX) * weight1;
										wy1 += (vx2 * bone2.c + vy2 * bone2.d + bone2.worldY) * weight1;
										++v1;
										b2 += 3;
										f += 2;
									}
									world[w2] = wx1;
									world[w2 + 1] = wy1;
									w2 += 2;
								}
							}
						}
					}
					var x1 = world[0];
					var y1 = world[1];
					var dx = world[2] - x1;
					var dy = world[3] - y1;
					var r = js_Boot.__cast(Math.atan2(dy,dx) , Float);
					out[o] = x1 + p * js_Boot.__cast(Math.cos(r) , Float);
					out[o + 1] = y1 + p * js_Boot.__cast(Math.sin(r) , Float);
					out[o + 2] = r;
					++i;
					o += 3;
					continue;
				} else if(p > pathLength) {
					if(prevCurve != -3) {
						prevCurve = -3;
						var start = verticesLength - 6;
						var count1 = 4;
						count1 = (count1 >> 1) * 2;
						var skeleton1 = target.bone.skeleton;
						var deformArray1 = target.attachmentVertices;
						var vertices1 = path.vertices;
						var bones1 = path.bones;
						if(bones1 == null) {
							if(deformArray1.length > 0) {
								vertices1 = deformArray1;
							}
							var bone3 = target.bone;
							var x2 = bone3.worldX;
							var y2 = bone3.worldY;
							var a1 = bone3.a;
							var b3 = bone3.b;
							var c1 = bone3.c;
							var d1 = bone3.d;
							var v2 = start;
							var w3 = 0;
							while(w3 < count1) {
								var vx3 = vertices1[v2];
								var vy3 = vertices1[v2 + 1];
								world[w3] = vx3 * a1 + vy3 * b3 + x2;
								world[w3 + 1] = vx3 * c1 + vy3 * d1 + y2;
								v2 += 2;
								w3 += 2;
							}
						} else {
							var v3 = 0;
							var skip1 = 0;
							var i2 = 0;
							while(i2 < start) {
								var n3 = bones1[v3];
								v3 += n3 + 1;
								skip1 += n3;
								i2 += 2;
							}
							var skeletonBones1 = skeleton1.getBones();
							if(deformArray1.length == 0) {
								var w4 = 0;
								var b4 = skip1 * 3;
								while(w4 < count1) {
									var wx2 = 0;
									var wy2 = 0;
									var n4 = bones1[v3++];
									n4 += v3;
									while(v3 < n4) {
										var bone4 = js_Boot.__cast(skeletonBones1[bones1[v3]] , spine_Bone);
										var vx4 = vertices1[b4];
										var vy4 = vertices1[b4 + 1];
										var weight2 = vertices1[b4 + 2];
										wx2 += (vx4 * bone4.a + vy4 * bone4.b + bone4.worldX) * weight2;
										wy2 += (vx4 * bone4.c + vy4 * bone4.d + bone4.worldY) * weight2;
										++v3;
										b4 += 3;
									}
									world[w4] = wx2;
									world[w4 + 1] = wy2;
									w4 += 2;
								}
							} else {
								var deform1 = deformArray1;
								var w5 = 0;
								var b5 = skip1 * 3;
								var f1 = skip1 << 1;
								while(w5 < count1) {
									var wx3 = 0;
									var wy3 = 0;
									var n5 = bones1[v3++];
									n5 += v3;
									while(v3 < n5) {
										var bone5 = js_Boot.__cast(skeletonBones1[bones1[v3]] , spine_Bone);
										var vx5 = vertices1[b5] + deform1[f1];
										var vy5 = vertices1[b5 + 1] + deform1[f1 + 1];
										var weight3 = vertices1[b5 + 2];
										wx3 += (vx5 * bone5.a + vy5 * bone5.b + bone5.worldX) * weight3;
										wy3 += (vx5 * bone5.c + vy5 * bone5.d + bone5.worldY) * weight3;
										++v3;
										b5 += 3;
										f1 += 2;
									}
									world[w5] = wx3;
									world[w5 + 1] = wy3;
									w5 += 2;
								}
							}
						}
					}
					var p1 = p - pathLength;
					var x11 = world[2];
					var y11 = world[3];
					var dx1 = x11 - world[0];
					var dy1 = y11 - world[1];
					var r1 = js_Boot.__cast(Math.atan2(dy1,dx1) , Float);
					out[o] = x11 + p1 * js_Boot.__cast(Math.cos(r1) , Float);
					out[o + 1] = y11 + p1 * js_Boot.__cast(Math.sin(r1) , Float);
					out[o + 2] = r1;
					++i;
					o += 3;
					continue;
				}
				while(true) {
					var length = lengths[curve];
					if(p > length) {
						++curve;
						continue;
					}
					if(curve == 0) {
						p /= length;
					} else {
						var prev = lengths[curve - 1];
						p = (p - prev) / (length - prev);
					}
					break;
				}
				if(curve != prevCurve) {
					prevCurve = curve;
					if(closed && curve == curveCount) {
						var start1 = verticesLength - 4;
						var count2 = 4;
						count2 = (count2 >> 1) * 2;
						var skeleton2 = target.bone.skeleton;
						var deformArray2 = target.attachmentVertices;
						var vertices2 = path.vertices;
						var bones2 = path.bones;
						if(bones2 == null) {
							if(deformArray2.length > 0) {
								vertices2 = deformArray2;
							}
							var bone6 = target.bone;
							var x3 = bone6.worldX;
							var y3 = bone6.worldY;
							var a2 = bone6.a;
							var b6 = bone6.b;
							var c2 = bone6.c;
							var d2 = bone6.d;
							var v4 = start1;
							var w6 = 0;
							while(w6 < count2) {
								var vx6 = vertices2[v4];
								var vy6 = vertices2[v4 + 1];
								world[w6] = vx6 * a2 + vy6 * b6 + x3;
								world[w6 + 1] = vx6 * c2 + vy6 * d2 + y3;
								v4 += 2;
								w6 += 2;
							}
						} else {
							var v5 = 0;
							var skip2 = 0;
							var i3 = 0;
							while(i3 < start1) {
								var n6 = bones2[v5];
								v5 += n6 + 1;
								skip2 += n6;
								i3 += 2;
							}
							var skeletonBones2 = skeleton2.getBones();
							if(deformArray2.length == 0) {
								var w7 = 0;
								var b7 = skip2 * 3;
								while(w7 < count2) {
									var wx4 = 0;
									var wy4 = 0;
									var n7 = bones2[v5++];
									n7 += v5;
									while(v5 < n7) {
										var bone7 = js_Boot.__cast(skeletonBones2[bones2[v5]] , spine_Bone);
										var vx7 = vertices2[b7];
										var vy7 = vertices2[b7 + 1];
										var weight4 = vertices2[b7 + 2];
										wx4 += (vx7 * bone7.a + vy7 * bone7.b + bone7.worldX) * weight4;
										wy4 += (vx7 * bone7.c + vy7 * bone7.d + bone7.worldY) * weight4;
										++v5;
										b7 += 3;
									}
									world[w7] = wx4;
									world[w7 + 1] = wy4;
									w7 += 2;
								}
							} else {
								var deform2 = deformArray2;
								var w8 = 0;
								var b8 = skip2 * 3;
								var f2 = skip2 << 1;
								while(w8 < count2) {
									var wx5 = 0;
									var wy5 = 0;
									var n8 = bones2[v5++];
									n8 += v5;
									while(v5 < n8) {
										var bone8 = js_Boot.__cast(skeletonBones2[bones2[v5]] , spine_Bone);
										var vx8 = vertices2[b8] + deform2[f2];
										var vy8 = vertices2[b8 + 1] + deform2[f2 + 1];
										var weight5 = vertices2[b8 + 2];
										wx5 += (vx8 * bone8.a + vy8 * bone8.b + bone8.worldX) * weight5;
										wy5 += (vx8 * bone8.c + vy8 * bone8.d + bone8.worldY) * weight5;
										++v5;
										b8 += 3;
										f2 += 2;
									}
									world[w8] = wx5;
									world[w8 + 1] = wy5;
									w8 += 2;
								}
							}
						}
						var count3 = 4;
						count3 = 4 + (count3 >> 1) * 2;
						var skeleton3 = target.bone.skeleton;
						var deformArray3 = target.attachmentVertices;
						var vertices3 = path.vertices;
						var bones3 = path.bones;
						if(bones3 == null) {
							if(deformArray3.length > 0) {
								vertices3 = deformArray3;
							}
							var bone9 = target.bone;
							var x4 = bone9.worldX;
							var y4 = bone9.worldY;
							var a3 = bone9.a;
							var b9 = bone9.b;
							var c3 = bone9.c;
							var d3 = bone9.d;
							var v6 = 0;
							var w9 = 4;
							while(w9 < count3) {
								var vx9 = vertices3[v6];
								var vy9 = vertices3[v6 + 1];
								world[w9] = vx9 * a3 + vy9 * b9 + x4;
								world[w9 + 1] = vx9 * c3 + vy9 * d3 + y4;
								v6 += 2;
								w9 += 2;
							}
						} else {
							var v7 = 0;
							var skip3 = 0;
							var i4 = 0;
							while(i4 < 0) {
								var n9 = bones3[v7];
								v7 += n9 + 1;
								skip3 += n9;
								i4 += 2;
							}
							var skeletonBones3 = skeleton3.getBones();
							if(deformArray3.length == 0) {
								var w10 = 4;
								var b10 = skip3 * 3;
								while(w10 < count3) {
									var wx6 = 0;
									var wy6 = 0;
									var n10 = bones3[v7++];
									n10 += v7;
									while(v7 < n10) {
										var bone10 = js_Boot.__cast(skeletonBones3[bones3[v7]] , spine_Bone);
										var vx10 = vertices3[b10];
										var vy10 = vertices3[b10 + 1];
										var weight6 = vertices3[b10 + 2];
										wx6 += (vx10 * bone10.a + vy10 * bone10.b + bone10.worldX) * weight6;
										wy6 += (vx10 * bone10.c + vy10 * bone10.d + bone10.worldY) * weight6;
										++v7;
										b10 += 3;
									}
									world[w10] = wx6;
									world[w10 + 1] = wy6;
									w10 += 2;
								}
							} else {
								var deform3 = deformArray3;
								var w11 = 4;
								var b11 = skip3 * 3;
								var f3 = skip3 << 1;
								while(w11 < count3) {
									var wx7 = 0;
									var wy7 = 0;
									var n11 = bones3[v7++];
									n11 += v7;
									while(v7 < n11) {
										var bone11 = js_Boot.__cast(skeletonBones3[bones3[v7]] , spine_Bone);
										var vx11 = vertices3[b11] + deform3[f3];
										var vy11 = vertices3[b11 + 1] + deform3[f3 + 1];
										var weight7 = vertices3[b11 + 2];
										wx7 += (vx11 * bone11.a + vy11 * bone11.b + bone11.worldX) * weight7;
										wy7 += (vx11 * bone11.c + vy11 * bone11.d + bone11.worldY) * weight7;
										++v7;
										b11 += 3;
										f3 += 2;
									}
									world[w11] = wx7;
									world[w11 + 1] = wy7;
									w11 += 2;
								}
							}
						}
					} else {
						var start2 = curve * 6 + 2;
						var count4 = 8;
						count4 = (count4 >> 1) * 2;
						var skeleton4 = target.bone.skeleton;
						var deformArray4 = target.attachmentVertices;
						var vertices4 = path.vertices;
						var bones4 = path.bones;
						if(bones4 == null) {
							if(deformArray4.length > 0) {
								vertices4 = deformArray4;
							}
							var bone12 = target.bone;
							var x5 = bone12.worldX;
							var y5 = bone12.worldY;
							var a4 = bone12.a;
							var b12 = bone12.b;
							var c4 = bone12.c;
							var d4 = bone12.d;
							var v8 = start2;
							var w12 = 0;
							while(w12 < count4) {
								var vx12 = vertices4[v8];
								var vy12 = vertices4[v8 + 1];
								world[w12] = vx12 * a4 + vy12 * b12 + x5;
								world[w12 + 1] = vx12 * c4 + vy12 * d4 + y5;
								v8 += 2;
								w12 += 2;
							}
						} else {
							var v9 = 0;
							var skip4 = 0;
							var i5 = 0;
							while(i5 < start2) {
								var n12 = bones4[v9];
								v9 += n12 + 1;
								skip4 += n12;
								i5 += 2;
							}
							var skeletonBones4 = skeleton4.getBones();
							if(deformArray4.length == 0) {
								var w13 = 0;
								var b13 = skip4 * 3;
								while(w13 < count4) {
									var wx8 = 0;
									var wy8 = 0;
									var n13 = bones4[v9++];
									n13 += v9;
									while(v9 < n13) {
										var bone13 = js_Boot.__cast(skeletonBones4[bones4[v9]] , spine_Bone);
										var vx13 = vertices4[b13];
										var vy13 = vertices4[b13 + 1];
										var weight8 = vertices4[b13 + 2];
										wx8 += (vx13 * bone13.a + vy13 * bone13.b + bone13.worldX) * weight8;
										wy8 += (vx13 * bone13.c + vy13 * bone13.d + bone13.worldY) * weight8;
										++v9;
										b13 += 3;
									}
									world[w13] = wx8;
									world[w13 + 1] = wy8;
									w13 += 2;
								}
							} else {
								var deform4 = deformArray4;
								var w14 = 0;
								var b14 = skip4 * 3;
								var f4 = skip4 << 1;
								while(w14 < count4) {
									var wx9 = 0;
									var wy9 = 0;
									var n14 = bones4[v9++];
									n14 += v9;
									while(v9 < n14) {
										var bone14 = js_Boot.__cast(skeletonBones4[bones4[v9]] , spine_Bone);
										var vx14 = vertices4[b14] + deform4[f4];
										var vy14 = vertices4[b14 + 1] + deform4[f4 + 1];
										var weight9 = vertices4[b14 + 2];
										wx9 += (vx14 * bone14.a + vy14 * bone14.b + bone14.worldX) * weight9;
										wy9 += (vx14 * bone14.c + vy14 * bone14.d + bone14.worldY) * weight9;
										++v9;
										b14 += 3;
										f4 += 2;
									}
									world[w14] = wx9;
									world[w14 + 1] = wy9;
									w14 += 2;
								}
							}
						}
					}
				}
				var p2 = p;
				var x12 = world[0];
				var y12 = world[1];
				var cx1 = world[2];
				var cy1 = world[3];
				var cx2 = world[4];
				var cy2 = world[5];
				var tangents1 = tangents || i > 0 && space < spine_PathConstraint.epsilon;
				if(p2 < spine_PathConstraint.epsilon || isNaN(p2)) {
					p2 = spine_PathConstraint.epsilon;
				}
				var tt = p2 * p2;
				var ttt = tt * p2;
				var u = 1 - p2;
				var uu = u * u;
				var uuu = uu * u;
				var ut = u * p2;
				var ut3 = ut * 3;
				var uut3 = u * ut3;
				var utt3 = ut3 * p2;
				var x6 = x12 * uuu + cx1 * uut3 + cx2 * utt3 + world[6] * ttt;
				var y6 = y12 * uuu + cy1 * uut3 + cy2 * utt3 + world[7] * ttt;
				out[o] = x6;
				out[o + 1] = y6;
				if(tangents1) {
					out[o + 2] = js_Boot.__cast(Math.atan2(y6 - (y12 * uu + cy1 * ut * 2 + cy2 * tt),x6 - (x12 * uu + cx1 * ut * 2 + cx2 * tt)) , Float);
				}
				++i;
				o += 3;
			}
			return out;
		}
		if(closed) {
			verticesLength += 2;
			var this1 = this.world;
			var len = this1.length;
			if(len > verticesLength) {
				this1.splice(verticesLength,verticesLength - len);
			} else if(len < verticesLength) {
				while(len < verticesLength) {
					this1.push(0);
					++len;
				}
			}
			world = this1;
			var count = verticesLength - 4;
			count = (count >> 1) * 2;
			var skeleton = target.bone.skeleton;
			var deformArray = target.attachmentVertices;
			var vertices = path.vertices;
			var bones = path.bones;
			if(bones == null) {
				if(deformArray.length > 0) {
					vertices = deformArray;
				}
				var bone = target.bone;
				var x = bone.worldX;
				var y = bone.worldY;
				var a = bone.a;
				var b = bone.b;
				var c = bone.c;
				var d = bone.d;
				var v = 2;
				var w = 0;
				while(w < count) {
					var vx = vertices[v];
					var vy = vertices[v + 1];
					world[w] = vx * a + vy * b + x;
					world[w + 1] = vx * c + vy * d + y;
					v += 2;
					w += 2;
				}
			} else {
				var v = 0;
				var skip = 0;
				var i = 0;
				while(i < 2) {
					var n = bones[v];
					v += n + 1;
					skip += n;
					i += 2;
				}
				var skeletonBones = skeleton.getBones();
				if(deformArray.length == 0) {
					var w = 0;
					var b = skip * 3;
					while(w < count) {
						var wx = 0;
						var wy = 0;
						var n = bones[v++];
						n += v;
						while(v < n) {
							var bone = js_Boot.__cast(skeletonBones[bones[v]] , spine_Bone);
							var vx = vertices[b];
							var vy = vertices[b + 1];
							var weight = vertices[b + 2];
							wx += (vx * bone.a + vy * bone.b + bone.worldX) * weight;
							wy += (vx * bone.c + vy * bone.d + bone.worldY) * weight;
							++v;
							b += 3;
						}
						world[w] = wx;
						world[w + 1] = wy;
						w += 2;
					}
				} else {
					var deform = deformArray;
					var w = 0;
					var b = skip * 3;
					var f = skip << 1;
					while(w < count) {
						var wx = 0;
						var wy = 0;
						var n = bones[v++];
						n += v;
						while(v < n) {
							var bone = js_Boot.__cast(skeletonBones[bones[v]] , spine_Bone);
							var vx = vertices[b] + deform[f];
							var vy = vertices[b + 1] + deform[f + 1];
							var weight = vertices[b + 2];
							wx += (vx * bone.a + vy * bone.b + bone.worldX) * weight;
							wy += (vx * bone.c + vy * bone.d + bone.worldY) * weight;
							++v;
							b += 3;
							f += 2;
						}
						world[w] = wx;
						world[w + 1] = wy;
						w += 2;
					}
				}
			}
			var count = 2;
			var offset = verticesLength - 4;
			count = offset + (count >> 1) * 2;
			var skeleton = target.bone.skeleton;
			var deformArray = target.attachmentVertices;
			var vertices = path.vertices;
			var bones = path.bones;
			if(bones == null) {
				if(deformArray.length > 0) {
					vertices = deformArray;
				}
				var bone = target.bone;
				var x = bone.worldX;
				var y = bone.worldY;
				var a = bone.a;
				var b = bone.b;
				var c = bone.c;
				var d = bone.d;
				var v = 0;
				var w = offset;
				while(w < count) {
					var vx = vertices[v];
					var vy = vertices[v + 1];
					world[w] = vx * a + vy * b + x;
					world[w + 1] = vx * c + vy * d + y;
					v += 2;
					w += 2;
				}
			} else {
				var v = 0;
				var skip = 0;
				var i = 0;
				while(i < 0) {
					var n = bones[v];
					v += n + 1;
					skip += n;
					i += 2;
				}
				var skeletonBones = skeleton.getBones();
				if(deformArray.length == 0) {
					var w = offset;
					var b = skip * 3;
					while(w < count) {
						var wx = 0;
						var wy = 0;
						var n = bones[v++];
						n += v;
						while(v < n) {
							var bone = js_Boot.__cast(skeletonBones[bones[v]] , spine_Bone);
							var vx = vertices[b];
							var vy = vertices[b + 1];
							var weight = vertices[b + 2];
							wx += (vx * bone.a + vy * bone.b + bone.worldX) * weight;
							wy += (vx * bone.c + vy * bone.d + bone.worldY) * weight;
							++v;
							b += 3;
						}
						world[w] = wx;
						world[w + 1] = wy;
						w += 2;
					}
				} else {
					var deform = deformArray;
					var w = offset;
					var b = skip * 3;
					var f = skip << 1;
					while(w < count) {
						var wx = 0;
						var wy = 0;
						var n = bones[v++];
						n += v;
						while(v < n) {
							var bone = js_Boot.__cast(skeletonBones[bones[v]] , spine_Bone);
							var vx = vertices[b] + deform[f];
							var vy = vertices[b + 1] + deform[f + 1];
							var weight = vertices[b + 2];
							wx += (vx * bone.a + vy * bone.b + bone.worldX) * weight;
							wy += (vx * bone.c + vy * bone.d + bone.worldY) * weight;
							++v;
							b += 3;
							f += 2;
						}
						world[w] = wx;
						world[w + 1] = wy;
						w += 2;
					}
				}
			}
			world[verticesLength - 2] = world[0];
			world[verticesLength - 1] = world[1];
		} else {
			--curveCount;
			verticesLength -= 4;
			var this1 = this.world;
			var len = this1.length;
			if(len > verticesLength) {
				this1.splice(verticesLength,verticesLength - len);
			} else if(len < verticesLength) {
				while(len < verticesLength) {
					this1.push(0);
					++len;
				}
			}
			world = this1;
			var count = verticesLength;
			count = (count >> 1) * 2;
			var skeleton = target.bone.skeleton;
			var deformArray = target.attachmentVertices;
			var vertices = path.vertices;
			var bones = path.bones;
			if(bones == null) {
				if(deformArray.length > 0) {
					vertices = deformArray;
				}
				var bone = target.bone;
				var x = bone.worldX;
				var y = bone.worldY;
				var a = bone.a;
				var b = bone.b;
				var c = bone.c;
				var d = bone.d;
				var v = 2;
				var w = 0;
				while(w < count) {
					var vx = vertices[v];
					var vy = vertices[v + 1];
					world[w] = vx * a + vy * b + x;
					world[w + 1] = vx * c + vy * d + y;
					v += 2;
					w += 2;
				}
			} else {
				var v = 0;
				var skip = 0;
				var i = 0;
				while(i < 2) {
					var n = bones[v];
					v += n + 1;
					skip += n;
					i += 2;
				}
				var skeletonBones = skeleton.getBones();
				if(deformArray.length == 0) {
					var w = 0;
					var b = skip * 3;
					while(w < count) {
						var wx = 0;
						var wy = 0;
						var n = bones[v++];
						n += v;
						while(v < n) {
							var bone = js_Boot.__cast(skeletonBones[bones[v]] , spine_Bone);
							var vx = vertices[b];
							var vy = vertices[b + 1];
							var weight = vertices[b + 2];
							wx += (vx * bone.a + vy * bone.b + bone.worldX) * weight;
							wy += (vx * bone.c + vy * bone.d + bone.worldY) * weight;
							++v;
							b += 3;
						}
						world[w] = wx;
						world[w + 1] = wy;
						w += 2;
					}
				} else {
					var deform = deformArray;
					var w = 0;
					var b = skip * 3;
					var f = skip << 1;
					while(w < count) {
						var wx = 0;
						var wy = 0;
						var n = bones[v++];
						n += v;
						while(v < n) {
							var bone = js_Boot.__cast(skeletonBones[bones[v]] , spine_Bone);
							var vx = vertices[b] + deform[f];
							var vy = vertices[b + 1] + deform[f + 1];
							var weight = vertices[b + 2];
							wx += (vx * bone.a + vy * bone.b + bone.worldX) * weight;
							wy += (vx * bone.c + vy * bone.d + bone.worldY) * weight;
							++v;
							b += 3;
							f += 2;
						}
						world[w] = wx;
						world[w + 1] = wy;
						w += 2;
					}
				}
			}
		}
		var this1 = this.curves;
		var len = this1.length;
		if(len > curveCount) {
			this1.splice(curveCount,curveCount - len);
		} else if(len < curveCount) {
			while(len < curveCount) {
				this1.push(0);
				++len;
			}
		}
		var curves = this1;
		var pathLength = 0;
		var x1 = world[0];
		var y1 = world[1];
		var cx1 = 0;
		var cy1 = 0;
		var cx2 = 0;
		var cy2 = 0;
		var x2 = 0;
		var y2 = 0;
		var tmpx = 0;
		var tmpy = 0;
		var dddfx = 0;
		var dddfy = 0;
		var ddfx = 0;
		var ddfy = 0;
		var dfx = 0;
		var dfy = 0;
		var i = 0;
		var w = 2;
		while(i < curveCount) {
			cx1 = world[w];
			cy1 = world[w + 1];
			cx2 = world[w + 2];
			cy2 = world[w + 3];
			x2 = world[w + 4];
			y2 = world[w + 5];
			tmpx = (x1 - cx1 * 2 + cx2) * 0.1875;
			tmpy = (y1 - cy1 * 2 + cy2) * 0.1875;
			dddfx = ((cx1 - cx2) * 3 - x1 + x2) * 0.09375;
			dddfy = ((cy1 - cy2) * 3 - y1 + y2) * 0.09375;
			ddfx = tmpx * 2 + dddfx;
			ddfy = tmpy * 2 + dddfy;
			dfx = (cx1 - x1) * 0.75 + tmpx + dddfx * 0.16666667;
			dfy = (cy1 - y1) * 0.75 + tmpy + dddfy * 0.16666667;
			pathLength += js_Boot.__cast(Math.sqrt(dfx * dfx + dfy * dfy) , Float);
			dfx += ddfx;
			dfy += ddfy;
			ddfx += dddfx;
			ddfy += dddfy;
			pathLength += js_Boot.__cast(Math.sqrt(dfx * dfx + dfy * dfy) , Float);
			dfx += ddfx;
			dfy += ddfy;
			pathLength += js_Boot.__cast(Math.sqrt(dfx * dfx + dfy * dfy) , Float);
			dfx += ddfx + dddfx;
			dfy += ddfy + dddfy;
			pathLength += js_Boot.__cast(Math.sqrt(dfx * dfx + dfy * dfy) , Float);
			curves[i] = pathLength;
			x1 = x2;
			y1 = y2;
			++i;
			w += 6;
		}
		if(percentPosition) {
			position *= pathLength;
		}
		if(percentSpacing) {
			var i = 0;
			while(i < spacesCount) {
				spaces[i] *= pathLength;
				++i;
			}
		}
		var segments = this.segments;
		var curveLength = 0;
		var i = 0;
		var o = 0;
		var curve = 0;
		var segment = 0;
		while(i < spacesCount) {
			var space = spaces[i];
			var p = position += space;
			if(closed) {
				p %= pathLength;
				if(p < 0) {
					p += pathLength;
				}
				curve = 0;
			} else if(p < 0) {
				var x11 = world[0];
				var y11 = world[1];
				var dx = world[2] - x11;
				var dy = world[3] - y11;
				var r = js_Boot.__cast(Math.atan2(dy,dx) , Float);
				out[o] = x11 + p * js_Boot.__cast(Math.cos(r) , Float);
				out[o + 1] = y11 + p * js_Boot.__cast(Math.sin(r) , Float);
				out[o + 2] = r;
				++i;
				o += 3;
				continue;
			} else if(p > pathLength) {
				var p1 = p - pathLength;
				var i1 = verticesLength - 4;
				var x12 = world[i1 + 2];
				var y12 = world[i1 + 3];
				var dx1 = x12 - world[i1];
				var dy1 = y12 - world[i1 + 1];
				var r1 = js_Boot.__cast(Math.atan2(dy1,dx1) , Float);
				out[o] = x12 + p1 * js_Boot.__cast(Math.cos(r1) , Float);
				out[o + 1] = y12 + p1 * js_Boot.__cast(Math.sin(r1) , Float);
				out[o + 2] = r1;
				++i;
				o += 3;
				continue;
			}
			while(true) {
				var length = curves[curve];
				if(p > length) {
					++curve;
					continue;
				}
				if(curve == 0) {
					p /= length;
				} else {
					var prev = curves[curve - 1];
					p = (p - prev) / (length - prev);
				}
				break;
			}
			if(curve != prevCurve) {
				prevCurve = curve;
				var ii = curve * 6;
				x1 = world[ii];
				y1 = world[ii + 1];
				cx1 = world[ii + 2];
				cy1 = world[ii + 3];
				cx2 = world[ii + 4];
				cy2 = world[ii + 5];
				x2 = world[ii + 6];
				y2 = world[ii + 7];
				tmpx = (x1 - cx1 * 2 + cx2) * 0.03;
				tmpy = (y1 - cy1 * 2 + cy2) * 0.03;
				dddfx = ((cx1 - cx2) * 3 - x1 + x2) * 0.006;
				dddfy = ((cy1 - cy2) * 3 - y1 + y2) * 0.006;
				ddfx = tmpx * 2 + dddfx;
				ddfy = tmpy * 2 + dddfy;
				dfx = (cx1 - x1) * 0.3 + tmpx + dddfx * 0.16666667;
				dfy = (cy1 - y1) * 0.3 + tmpy + dddfy * 0.16666667;
				curveLength = js_Boot.__cast(Math.sqrt(dfx * dfx + dfy * dfy) , Float);
				segments[0] = curveLength;
				ii = 1;
				while(ii < 8) {
					dfx += ddfx;
					dfy += ddfy;
					ddfx += dddfx;
					ddfy += dddfy;
					curveLength += js_Boot.__cast(Math.sqrt(dfx * dfx + dfy * dfy) , Float);
					segments[ii] = curveLength;
					++ii;
				}
				dfx += ddfx;
				dfy += ddfy;
				curveLength += js_Boot.__cast(Math.sqrt(dfx * dfx + dfy * dfy) , Float);
				segments[8] = curveLength;
				dfx += ddfx + dddfx;
				dfy += ddfy + dddfy;
				curveLength += js_Boot.__cast(Math.sqrt(dfx * dfx + dfy * dfy) , Float);
				segments[9] = curveLength;
				segment = 0;
			}
			p *= curveLength;
			while(true) {
				var length1 = segments[segment];
				if(p > length1) {
					++segment;
					continue;
				}
				if(segment == 0) {
					p /= length1;
				} else {
					var prev1 = segments[segment - 1];
					p = segment + (p - prev1) / (length1 - prev1);
				}
				break;
			}
			var p2 = p * 0.1;
			var tangents1 = tangents || i > 0 && space < spine_PathConstraint.epsilon;
			if(p2 < spine_PathConstraint.epsilon || isNaN(p2)) {
				p2 = spine_PathConstraint.epsilon;
			}
			var tt = p2 * p2;
			var ttt = tt * p2;
			var u = 1 - p2;
			var uu = u * u;
			var uuu = uu * u;
			var ut = u * p2;
			var ut3 = ut * 3;
			var uut3 = u * ut3;
			var utt3 = ut3 * p2;
			var x = x1 * uuu + cx1 * uut3 + cx2 * utt3 + x2 * ttt;
			var y = y1 * uuu + cy1 * uut3 + cy2 * utt3 + y2 * ttt;
			out[o] = x;
			out[o + 1] = y;
			if(tangents1) {
				out[o + 2] = js_Boot.__cast(Math.atan2(y - (y1 * uu + cy1 * ut * 2 + cy2 * tt),x - (x1 * uu + cx1 * ut * 2 + cx2 * tt)) , Float);
			}
			++i;
			o += 3;
		}
		return out;
	}
	,addBeforePosition: function(p,temp,i,out,o) {
		var x1 = temp[i];
		var y1 = temp[i + 1];
		var dx = temp[i + 2] - x1;
		var dy = temp[i + 3] - y1;
		var r = js_Boot.__cast(Math.atan2(dy,dx) , Float);
		out[o] = x1 + p * js_Boot.__cast(Math.cos(r) , Float);
		out[o + 1] = y1 + p * js_Boot.__cast(Math.sin(r) , Float);
		out[o + 2] = r;
	}
	,addAfterPosition: function(p,temp,i,out,o) {
		var x1 = temp[i + 2];
		var y1 = temp[i + 3];
		var dx = x1 - temp[i];
		var dy = y1 - temp[i + 1];
		var r = js_Boot.__cast(Math.atan2(dy,dx) , Float);
		out[o] = x1 + p * js_Boot.__cast(Math.cos(r) , Float);
		out[o + 1] = y1 + p * js_Boot.__cast(Math.sin(r) , Float);
		out[o + 2] = r;
	}
	,addCurvePosition: function(p,x1,y1,cx1,cy1,cx2,cy2,x2,y2,out,o,tangents) {
		if(p < spine_PathConstraint.epsilon || isNaN(p)) {
			p = spine_PathConstraint.epsilon;
		}
		var tt = p * p;
		var ttt = tt * p;
		var u = 1 - p;
		var uu = u * u;
		var uuu = uu * u;
		var ut = u * p;
		var ut3 = ut * 3;
		var uut3 = u * ut3;
		var utt3 = ut3 * p;
		var x = x1 * uuu + cx1 * uut3 + cx2 * utt3 + x2 * ttt;
		var y = y1 * uuu + cy1 * uut3 + cy2 * utt3 + y2 * ttt;
		out[o] = x;
		out[o + 1] = y;
		if(tangents) {
			out[o + 2] = js_Boot.__cast(Math.atan2(y - (y1 * uu + cy1 * ut * 2 + cy2 * tt),x - (x1 * uu + cx1 * ut * 2 + cx2 * tt)) , Float);
		}
	}
	,getOrder: function() {
		return this.data.order;
	}
	,getPosition: function() {
		return this.position;
	}
	,setPosition: function(position) {
		this.position = position;
	}
	,getSpacing: function() {
		return this.spacing;
	}
	,setSpacing: function(spacing) {
		this.spacing = spacing;
	}
	,getRotateMix: function() {
		return this.rotateMix;
	}
	,setRotateMix: function(rotateMix) {
		this.rotateMix = rotateMix;
	}
	,getTranslateMix: function() {
		return this.translateMix;
	}
	,setTranslateMix: function(translateMix) {
		this.translateMix = translateMix;
	}
	,getBones: function() {
		return this.bones;
	}
	,getTarget: function() {
		return this.target;
	}
	,setTarget: function(target) {
		this.target = target;
	}
	,getData: function() {
		return this.data;
	}
	,toString: function() {
		return this.data.name;
	}
	,__class__: spine_PathConstraint
};
var spine_PathConstraintData = function(name) {
	this.translateMix = 0;
	this.rotateMix = 0;
	this.spacing = 0;
	this.position = 0;
	this.offsetRotation = 0;
	this.bones = [];
	this.order = 0;
	if(name == null) {
		throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("name cannot be null."));
	}
	this.name = name;
};
$hxClasses["spine.PathConstraintData"] = spine_PathConstraintData;
spine_PathConstraintData.__name__ = "spine.PathConstraintData";
spine_PathConstraintData.prototype = {
	name: null
	,order: null
	,bones: null
	,target: null
	,positionMode: null
	,spacingMode: null
	,rotateMode: null
	,offsetRotation: null
	,position: null
	,spacing: null
	,rotateMix: null
	,translateMix: null
	,getName: function() {
		return this.name;
	}
	,getOrder: function() {
		return this.order;
	}
	,setOrder: function(order) {
		this.order = order;
	}
	,getBones: function() {
		return this.bones;
	}
	,getTarget: function() {
		return this.target;
	}
	,setTarget: function(target) {
		this.target = target;
	}
	,getPositionMode: function() {
		return this.positionMode;
	}
	,setPositionMode: function(positionMode) {
		this.positionMode = positionMode;
	}
	,getSpacingMode: function() {
		return this.spacingMode;
	}
	,setSpacingMode: function(spacingMode) {
		this.spacingMode = spacingMode;
	}
	,getRotateMode: function() {
		return this.rotateMode;
	}
	,setRotateMode: function(rotateMode) {
		this.rotateMode = rotateMode;
	}
	,getOffsetRotation: function() {
		return this.offsetRotation;
	}
	,setOffsetRotation: function(offsetRotation) {
		this.offsetRotation = offsetRotation;
	}
	,getPosition: function() {
		return this.position;
	}
	,setPosition: function(position) {
		this.position = position;
	}
	,getSpacing: function() {
		return this.spacing;
	}
	,setSpacing: function(spacing) {
		this.spacing = spacing;
	}
	,getRotateMix: function() {
		return this.rotateMix;
	}
	,setRotateMix: function(rotateMix) {
		this.rotateMix = rotateMix;
	}
	,getTranslateMix: function() {
		return this.translateMix;
	}
	,setTranslateMix: function(translateMix) {
		this.translateMix = translateMix;
	}
	,toString: function() {
		return this.name;
	}
	,__class__: spine_PathConstraintData
};
var spine_PositionMode_$enum = function() { };
$hxClasses["spine.PositionMode_enum"] = spine_PositionMode_$enum;
spine_PositionMode_$enum.__name__ = "spine.PositionMode_enum";
spine_PositionMode_$enum.valueOf = function(value) {
	switch(value) {
	case "fixed":
		return 0;
	case "percent":
		return 1;
	default:
		return 0;
	}
};
var spine_SpacingMode_$enum = function() { };
$hxClasses["spine.SpacingMode_enum"] = spine_SpacingMode_$enum;
spine_SpacingMode_$enum.__name__ = "spine.SpacingMode_enum";
spine_SpacingMode_$enum.valueOf = function(value) {
	switch(value) {
	case "fixed":
		return 1;
	case "length":
		return 0;
	case "percent":
		return 2;
	default:
		return 0;
	}
};
var spine_RotateMode_$enum = function() { };
$hxClasses["spine.RotateMode_enum"] = spine_RotateMode_$enum;
spine_RotateMode_$enum.__name__ = "spine.RotateMode_enum";
spine_RotateMode_$enum.valueOf = function(value) {
	switch(value) {
	case "chain":
		return 1;
	case "chainScale":
		return 2;
	case "tangent":
		return 0;
	default:
		return 0;
	}
};
var spine_Skeleton = function(data) {
	this.y = 0;
	this.x = 0;
	this.flipY = false;
	this.flipX = false;
	this.time = 0;
	this.cacheReset = [];
	this.cache = [];
	if(data == null) {
		throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("data cannot be null."));
	}
	this.data = data;
	var capacity = data.bones.length;
	var this1 = [];
	this.bones = this1;
	var _g = 0;
	var _g1 = data.bones;
	while(_g < _g1.length) {
		var boneData = _g1[_g];
		++_g;
		var bone = null;
		if(boneData.parent == null) {
			bone = new spine_Bone(boneData,this,null);
		} else {
			var parent = this.bones[boneData.parent.index];
			bone = new spine_Bone(boneData,this,parent);
			parent.children.push(bone);
		}
		this.bones.push(bone);
	}
	var capacity = data.slots.length;
	var this1 = [];
	this.slots = this1;
	var capacity = data.slots.length;
	var this1 = [];
	this.drawOrder = this1;
	var _g = 0;
	var _g1 = data.slots;
	while(_g < _g1.length) {
		var slotData = _g1[_g];
		++_g;
		var bone = this.bones[slotData.boneData.index];
		var slot = new spine_Slot(slotData,bone);
		this.slots.push(slot);
		this.drawOrder.push(slot);
	}
	var capacity = data.ikConstraints.length;
	var this1 = [];
	this.ikConstraints = this1;
	var _g = 0;
	var _g1 = data.ikConstraints;
	while(_g < _g1.length) {
		var ikConstraintData = _g1[_g];
		++_g;
		this.ikConstraints.push(new spine_IkConstraint(ikConstraintData,this));
	}
	var capacity = data.transformConstraints.length;
	var this1 = [];
	this.transformConstraints = this1;
	var _g = 0;
	var _g1 = data.transformConstraints;
	while(_g < _g1.length) {
		var transformConstraintData = _g1[_g];
		++_g;
		this.transformConstraints.push(new spine_TransformConstraint(transformConstraintData,this));
	}
	var capacity = data.pathConstraints.length;
	var this1 = [];
	this.pathConstraints = this1;
	var _g = 0;
	var _g1 = data.pathConstraints;
	while(_g < _g1.length) {
		var pathConstraintData = _g1[_g];
		++_g;
		this.pathConstraints.push(new spine_PathConstraint(pathConstraintData,this));
	}
	this.color = new spine_support_graphics_Color(1,1,1,1);
	var cache = this.cache;
	cache.splice(0,cache.length);
	var this1 = this.cacheReset;
	this1.splice(0,this1.length);
	var bones = this.bones;
	var i = 0;
	var n = bones.length;
	while(i < n) {
		bones[i].sorted = false;
		++i;
	}
	var ikConstraints = this.ikConstraints;
	var transformConstraints = this.transformConstraints;
	var pathConstraints = this.pathConstraints;
	var ikCount = ikConstraints.length;
	var transformCount = transformConstraints.length;
	var pathCount = pathConstraints.length;
	var constraintCount = ikCount + transformCount + pathCount;
	var _gotoLabel_outer;
	while(true) {
		_gotoLabel_outer = 0;
		var i = 0;
		while(i < constraintCount) {
			var ii = 0;
			while(ii < ikCount) {
				var constraint = ikConstraints[ii];
				if(constraint.data.order == i) {
					var target = constraint.target;
					if(!target.sorted) {
						var parent = target.parent;
						if(parent != null) {
							if(!parent.sorted) {
								var parent1 = parent.parent;
								if(parent1 != null) {
									this.sortBone(parent1);
								}
								parent.sorted = true;
								this.cache.push(parent);
							}
						}
						target.sorted = true;
						this.cache.push(target);
					}
					var constrained = constraint.bones;
					var parent2 = constrained.length > 0 ? constrained[0] : null;
					if(!parent2.sorted) {
						var parent3 = parent2.parent;
						if(parent3 != null) {
							if(!parent3.sorted) {
								var parent4 = parent3.parent;
								if(parent4 != null) {
									this.sortBone(parent4);
								}
								parent3.sorted = true;
								this.cache.push(parent3);
							}
						}
						parent2.sorted = true;
						this.cache.push(parent2);
					}
					if(constrained.length > 1) {
						var child = constrained.length == 0 ? null : constrained[constrained.length - 1];
						if(this.cache.indexOf(child) == -1) {
							this.cacheReset.push(child);
						}
					}
					this.cache.push(constraint);
					var bones1 = parent2.children;
					var i1 = 0;
					var n = bones1.length;
					while(i1 < n) {
						var bone = bones1[i1];
						if(bone.sorted) {
							var bones2 = bone.children;
							var i2 = 0;
							var n1 = bones2.length;
							while(i2 < n1) {
								var bone1 = bones2[i2];
								if(bone1.sorted) {
									this.sortReset(bone1.children);
								}
								bone1.sorted = false;
								++i2;
							}
						}
						bone.sorted = false;
						++i1;
					}
					(constrained.length == 0 ? null : constrained[constrained.length - 1]).sorted = true;
					++ii;
					_gotoLabel_outer = 2;
					break;
				}
				++ii;
			}
			if(_gotoLabel_outer == 2) {
				_gotoLabel_outer = 0;
				++i;
				continue;
			}
			if(_gotoLabel_outer >= 1) {
				break;
			}
			var ii1 = 0;
			while(ii1 < transformCount) {
				var constraint1 = transformConstraints[ii1];
				if(constraint1.data.order == i) {
					var bone2 = constraint1.target;
					if(!bone2.sorted) {
						var parent5 = bone2.parent;
						if(parent5 != null) {
							if(!parent5.sorted) {
								var parent6 = parent5.parent;
								if(parent6 != null) {
									this.sortBone(parent6);
								}
								parent5.sorted = true;
								this.cache.push(parent5);
							}
						}
						bone2.sorted = true;
						this.cache.push(bone2);
					}
					var constrained1 = constraint1.bones;
					var boneCount = constrained1.length;
					if(constraint1.data.local) {
						var i3 = 0;
						while(i3 < boneCount) {
							var child1 = constrained1[i3];
							var bone3 = child1.parent;
							if(!bone3.sorted) {
								var parent7 = bone3.parent;
								if(parent7 != null) {
									if(!parent7.sorted) {
										var parent8 = parent7.parent;
										if(parent8 != null) {
											this.sortBone(parent8);
										}
										parent7.sorted = true;
										this.cache.push(parent7);
									}
								}
								bone3.sorted = true;
								this.cache.push(bone3);
							}
							if(this.cache.indexOf(child1) == -1) {
								this.cacheReset.push(child1);
							}
							++i3;
						}
					} else {
						var i4 = 0;
						while(i4 < boneCount) {
							var bone4 = constrained1[i4];
							if(!bone4.sorted) {
								var parent9 = bone4.parent;
								if(parent9 != null) {
									if(!parent9.sorted) {
										var parent10 = parent9.parent;
										if(parent10 != null) {
											this.sortBone(parent10);
										}
										parent9.sorted = true;
										this.cache.push(parent9);
									}
								}
								bone4.sorted = true;
								this.cache.push(bone4);
							}
							++i4;
						}
					}
					this.cache.push(constraint1);
					var i5 = 0;
					while(i5 < boneCount) {
						var bones3 = constrained1[i5].children;
						var i6 = 0;
						var n2 = bones3.length;
						while(i6 < n2) {
							var bone5 = bones3[i6];
							if(bone5.sorted) {
								var bones4 = bone5.children;
								var i7 = 0;
								var n3 = bones4.length;
								while(i7 < n3) {
									var bone6 = bones4[i7];
									if(bone6.sorted) {
										this.sortReset(bone6.children);
									}
									bone6.sorted = false;
									++i7;
								}
							}
							bone5.sorted = false;
							++i6;
						}
						++i5;
					}
					var i8 = 0;
					while(i8 < boneCount) {
						constrained1[i8].sorted = true;
						++i8;
					}
					++ii1;
					_gotoLabel_outer = 2;
					break;
				}
				++ii1;
			}
			if(_gotoLabel_outer == 2) {
				_gotoLabel_outer = 0;
				++i;
				continue;
			}
			if(_gotoLabel_outer >= 1) {
				break;
			}
			var ii2 = 0;
			while(ii2 < pathCount) {
				var constraint2 = pathConstraints[ii2];
				if(constraint2.data.order == i) {
					var slot = constraint2.target;
					var slotIndex = slot.data.index;
					var slotBone = slot.bone;
					if(this.skin != null) {
						var _g = 0;
						var _g1 = spine_support_utils_ObjectMap.entries(this.skin.attachments);
						while(_g < _g1.length) {
							var entry = _g1[_g];
							++_g;
							if(entry.key.slotIndex == slotIndex) {
								var attachment = entry.value;
								if(((attachment) instanceof spine_attachments_PathAttachment)) {
									var pathBones = (js_Boot.__cast(attachment , spine_attachments_PathAttachment)).bones;
									if(pathBones == null) {
										if(!slotBone.sorted) {
											var parent11 = slotBone.parent;
											if(parent11 != null) {
												if(!parent11.sorted) {
													var parent12 = parent11.parent;
													if(parent12 != null) {
														this.sortBone(parent12);
													}
													parent11.sorted = true;
													this.cache.push(parent11);
												}
											}
											slotBone.sorted = true;
											this.cache.push(slotBone);
										}
									} else {
										var bones5 = this.bones;
										var i9 = 0;
										var n4 = pathBones.length;
										while(i9 < n4) {
											var nn = pathBones[i9++];
											nn += i9;
											while(i9 < nn) {
												var bone7 = bones5[pathBones[i9++]];
												if(!bone7.sorted) {
													var parent13 = bone7.parent;
													if(parent13 != null) {
														if(!parent13.sorted) {
															var parent14 = parent13.parent;
															if(parent14 != null) {
																this.sortBone(parent14);
															}
															parent13.sorted = true;
															this.cache.push(parent13);
														}
													}
													bone7.sorted = true;
													this.cache.push(bone7);
												}
											}
										}
									}
								}
							}
						}
					}
					if(this.data.defaultSkin != null && this.data.defaultSkin != this.skin) {
						var _g2 = 0;
						var _g3 = spine_support_utils_ObjectMap.entries(this.data.defaultSkin.attachments);
						while(_g2 < _g3.length) {
							var entry1 = _g3[_g2];
							++_g2;
							if(entry1.key.slotIndex == slotIndex) {
								var attachment1 = entry1.value;
								if(((attachment1) instanceof spine_attachments_PathAttachment)) {
									var pathBones1 = (js_Boot.__cast(attachment1 , spine_attachments_PathAttachment)).bones;
									if(pathBones1 == null) {
										if(!slotBone.sorted) {
											var parent15 = slotBone.parent;
											if(parent15 != null) {
												if(!parent15.sorted) {
													var parent16 = parent15.parent;
													if(parent16 != null) {
														this.sortBone(parent16);
													}
													parent15.sorted = true;
													this.cache.push(parent15);
												}
											}
											slotBone.sorted = true;
											this.cache.push(slotBone);
										}
									} else {
										var bones6 = this.bones;
										var i10 = 0;
										var n5 = pathBones1.length;
										while(i10 < n5) {
											var nn1 = pathBones1[i10++];
											nn1 += i10;
											while(i10 < nn1) {
												var bone8 = bones6[pathBones1[i10++]];
												if(!bone8.sorted) {
													var parent17 = bone8.parent;
													if(parent17 != null) {
														if(!parent17.sorted) {
															var parent18 = parent17.parent;
															if(parent18 != null) {
																this.sortBone(parent18);
															}
															parent17.sorted = true;
															this.cache.push(parent17);
														}
													}
													bone8.sorted = true;
													this.cache.push(bone8);
												}
											}
										}
									}
								}
							}
						}
					}
					var ii3 = 0;
					var nn2 = this.data.skins.length;
					while(ii3 < nn2) {
						var _g4 = 0;
						var _g5 = spine_support_utils_ObjectMap.entries(this.data.skins[ii3].attachments);
						while(_g4 < _g5.length) {
							var entry2 = _g5[_g4];
							++_g4;
							if(entry2.key.slotIndex == slotIndex) {
								var attachment2 = entry2.value;
								if(((attachment2) instanceof spine_attachments_PathAttachment)) {
									var pathBones2 = (js_Boot.__cast(attachment2 , spine_attachments_PathAttachment)).bones;
									if(pathBones2 == null) {
										if(!slotBone.sorted) {
											var parent19 = slotBone.parent;
											if(parent19 != null) {
												if(!parent19.sorted) {
													var parent20 = parent19.parent;
													if(parent20 != null) {
														this.sortBone(parent20);
													}
													parent19.sorted = true;
													this.cache.push(parent19);
												}
											}
											slotBone.sorted = true;
											this.cache.push(slotBone);
										}
									} else {
										var bones7 = this.bones;
										var i11 = 0;
										var n6 = pathBones2.length;
										while(i11 < n6) {
											var nn3 = pathBones2[i11++];
											nn3 += i11;
											while(i11 < nn3) {
												var bone9 = bones7[pathBones2[i11++]];
												if(!bone9.sorted) {
													var parent21 = bone9.parent;
													if(parent21 != null) {
														if(!parent21.sorted) {
															var parent22 = parent21.parent;
															if(parent22 != null) {
																this.sortBone(parent22);
															}
															parent21.sorted = true;
															this.cache.push(parent21);
														}
													}
													bone9.sorted = true;
													this.cache.push(bone9);
												}
											}
										}
									}
								}
							}
						}
						++ii3;
					}
					var attachment3 = slot.attachment;
					if(((attachment3) instanceof spine_attachments_PathAttachment)) {
						if(((attachment3) instanceof spine_attachments_PathAttachment)) {
							var pathBones3 = (js_Boot.__cast(attachment3 , spine_attachments_PathAttachment)).bones;
							if(pathBones3 == null) {
								if(!slotBone.sorted) {
									var parent23 = slotBone.parent;
									if(parent23 != null) {
										if(!parent23.sorted) {
											var parent24 = parent23.parent;
											if(parent24 != null) {
												this.sortBone(parent24);
											}
											parent23.sorted = true;
											this.cache.push(parent23);
										}
									}
									slotBone.sorted = true;
									this.cache.push(slotBone);
								}
							} else {
								var bones8 = this.bones;
								var i12 = 0;
								var n7 = pathBones3.length;
								while(i12 < n7) {
									var nn4 = pathBones3[i12++];
									nn4 += i12;
									while(i12 < nn4) {
										var bone10 = bones8[pathBones3[i12++]];
										if(!bone10.sorted) {
											var parent25 = bone10.parent;
											if(parent25 != null) {
												if(!parent25.sorted) {
													var parent26 = parent25.parent;
													if(parent26 != null) {
														this.sortBone(parent26);
													}
													parent25.sorted = true;
													this.cache.push(parent25);
												}
											}
											bone10.sorted = true;
											this.cache.push(bone10);
										}
									}
								}
							}
						}
					}
					var constrained2 = constraint2.bones;
					var boneCount1 = constrained2.length;
					var i13 = 0;
					while(i13 < boneCount1) {
						var bone11 = constrained2[i13];
						if(!bone11.sorted) {
							var parent27 = bone11.parent;
							if(parent27 != null) {
								if(!parent27.sorted) {
									var parent28 = parent27.parent;
									if(parent28 != null) {
										this.sortBone(parent28);
									}
									parent27.sorted = true;
									this.cache.push(parent27);
								}
							}
							bone11.sorted = true;
							this.cache.push(bone11);
						}
						++i13;
					}
					this.cache.push(constraint2);
					var i14 = 0;
					while(i14 < boneCount1) {
						var bones9 = constrained2[i14].children;
						var i15 = 0;
						var n8 = bones9.length;
						while(i15 < n8) {
							var bone12 = bones9[i15];
							if(bone12.sorted) {
								var bones10 = bone12.children;
								var i16 = 0;
								var n9 = bones10.length;
								while(i16 < n9) {
									var bone13 = bones10[i16];
									if(bone13.sorted) {
										this.sortReset(bone13.children);
									}
									bone13.sorted = false;
									++i16;
								}
							}
							bone12.sorted = false;
							++i15;
						}
						++i14;
					}
					var i17 = 0;
					while(i17 < boneCount1) {
						constrained2[i17].sorted = true;
						++i17;
					}
					++ii2;
					_gotoLabel_outer = 2;
					break;
				}
				++ii2;
			}
			if(_gotoLabel_outer == 2) {
				_gotoLabel_outer = 0;
				++i;
				continue;
			}
			if(_gotoLabel_outer >= 1) {
				break;
			}
			++i;
		}
		if(_gotoLabel_outer == 0) {
			break;
		}
	}
	var i = 0;
	var n = bones.length;
	while(i < n) {
		var bone = bones[i];
		if(!bone.sorted) {
			var parent = bone.parent;
			if(parent != null) {
				if(!parent.sorted) {
					var parent1 = parent.parent;
					if(parent1 != null) {
						this.sortBone(parent1);
					}
					parent.sorted = true;
					this.cache.push(parent);
				}
			}
			bone.sorted = true;
			this.cache.push(bone);
		}
		++i;
	}
};
$hxClasses["spine.Skeleton"] = spine_Skeleton;
spine_Skeleton.__name__ = "spine.Skeleton";
spine_Skeleton.prototype = {
	data: null
	,bones: null
	,slots: null
	,drawOrder: null
	,ikConstraints: null
	,transformConstraints: null
	,pathConstraints: null
	,cache: null
	,cacheReset: null
	,skin: null
	,color: null
	,time: null
	,flipX: null
	,flipY: null
	,x: null
	,y: null
	,updateCache: function() {
		var cache = this.cache;
		cache.splice(0,cache.length);
		var this1 = this.cacheReset;
		this1.splice(0,this1.length);
		var bones = this.bones;
		var i = 0;
		var n = bones.length;
		while(i < n) {
			bones[i].sorted = false;
			++i;
		}
		var ikConstraints = this.ikConstraints;
		var transformConstraints = this.transformConstraints;
		var pathConstraints = this.pathConstraints;
		var ikCount = ikConstraints.length;
		var transformCount = transformConstraints.length;
		var pathCount = pathConstraints.length;
		var constraintCount = ikCount + transformCount + pathCount;
		var _gotoLabel_outer;
		while(true) {
			_gotoLabel_outer = 0;
			var i = 0;
			while(i < constraintCount) {
				var ii = 0;
				while(ii < ikCount) {
					var constraint = ikConstraints[ii];
					if(constraint.data.order == i) {
						var target = constraint.target;
						if(!target.sorted) {
							var parent = target.parent;
							if(parent != null) {
								if(!parent.sorted) {
									var parent1 = parent.parent;
									if(parent1 != null) {
										this.sortBone(parent1);
									}
									parent.sorted = true;
									this.cache.push(parent);
								}
							}
							target.sorted = true;
							this.cache.push(target);
						}
						var constrained = constraint.bones;
						var parent2 = constrained.length > 0 ? constrained[0] : null;
						if(!parent2.sorted) {
							var parent3 = parent2.parent;
							if(parent3 != null) {
								if(!parent3.sorted) {
									var parent4 = parent3.parent;
									if(parent4 != null) {
										this.sortBone(parent4);
									}
									parent3.sorted = true;
									this.cache.push(parent3);
								}
							}
							parent2.sorted = true;
							this.cache.push(parent2);
						}
						if(constrained.length > 1) {
							var child = constrained.length == 0 ? null : constrained[constrained.length - 1];
							if(this.cache.indexOf(child) == -1) {
								this.cacheReset.push(child);
							}
						}
						this.cache.push(constraint);
						var bones1 = parent2.children;
						var i1 = 0;
						var n = bones1.length;
						while(i1 < n) {
							var bone = bones1[i1];
							if(bone.sorted) {
								var bones2 = bone.children;
								var i2 = 0;
								var n1 = bones2.length;
								while(i2 < n1) {
									var bone1 = bones2[i2];
									if(bone1.sorted) {
										this.sortReset(bone1.children);
									}
									bone1.sorted = false;
									++i2;
								}
							}
							bone.sorted = false;
							++i1;
						}
						(constrained.length == 0 ? null : constrained[constrained.length - 1]).sorted = true;
						++ii;
						_gotoLabel_outer = 2;
						break;
					}
					++ii;
				}
				if(_gotoLabel_outer == 2) {
					_gotoLabel_outer = 0;
					++i;
					continue;
				}
				if(_gotoLabel_outer >= 1) {
					break;
				}
				var ii1 = 0;
				while(ii1 < transformCount) {
					var constraint1 = transformConstraints[ii1];
					if(constraint1.data.order == i) {
						var bone2 = constraint1.target;
						if(!bone2.sorted) {
							var parent5 = bone2.parent;
							if(parent5 != null) {
								if(!parent5.sorted) {
									var parent6 = parent5.parent;
									if(parent6 != null) {
										this.sortBone(parent6);
									}
									parent5.sorted = true;
									this.cache.push(parent5);
								}
							}
							bone2.sorted = true;
							this.cache.push(bone2);
						}
						var constrained1 = constraint1.bones;
						var boneCount = constrained1.length;
						if(constraint1.data.local) {
							var i3 = 0;
							while(i3 < boneCount) {
								var child1 = constrained1[i3];
								var bone3 = child1.parent;
								if(!bone3.sorted) {
									var parent7 = bone3.parent;
									if(parent7 != null) {
										if(!parent7.sorted) {
											var parent8 = parent7.parent;
											if(parent8 != null) {
												this.sortBone(parent8);
											}
											parent7.sorted = true;
											this.cache.push(parent7);
										}
									}
									bone3.sorted = true;
									this.cache.push(bone3);
								}
								if(this.cache.indexOf(child1) == -1) {
									this.cacheReset.push(child1);
								}
								++i3;
							}
						} else {
							var i4 = 0;
							while(i4 < boneCount) {
								var bone4 = constrained1[i4];
								if(!bone4.sorted) {
									var parent9 = bone4.parent;
									if(parent9 != null) {
										if(!parent9.sorted) {
											var parent10 = parent9.parent;
											if(parent10 != null) {
												this.sortBone(parent10);
											}
											parent9.sorted = true;
											this.cache.push(parent9);
										}
									}
									bone4.sorted = true;
									this.cache.push(bone4);
								}
								++i4;
							}
						}
						this.cache.push(constraint1);
						var i5 = 0;
						while(i5 < boneCount) {
							var bones3 = constrained1[i5].children;
							var i6 = 0;
							var n2 = bones3.length;
							while(i6 < n2) {
								var bone5 = bones3[i6];
								if(bone5.sorted) {
									var bones4 = bone5.children;
									var i7 = 0;
									var n3 = bones4.length;
									while(i7 < n3) {
										var bone6 = bones4[i7];
										if(bone6.sorted) {
											this.sortReset(bone6.children);
										}
										bone6.sorted = false;
										++i7;
									}
								}
								bone5.sorted = false;
								++i6;
							}
							++i5;
						}
						var i8 = 0;
						while(i8 < boneCount) {
							constrained1[i8].sorted = true;
							++i8;
						}
						++ii1;
						_gotoLabel_outer = 2;
						break;
					}
					++ii1;
				}
				if(_gotoLabel_outer == 2) {
					_gotoLabel_outer = 0;
					++i;
					continue;
				}
				if(_gotoLabel_outer >= 1) {
					break;
				}
				var ii2 = 0;
				while(ii2 < pathCount) {
					var constraint2 = pathConstraints[ii2];
					if(constraint2.data.order == i) {
						var slot = constraint2.target;
						var slotIndex = slot.data.index;
						var slotBone = slot.bone;
						if(this.skin != null) {
							var _g = 0;
							var _g1 = spine_support_utils_ObjectMap.entries(this.skin.attachments);
							while(_g < _g1.length) {
								var entry = _g1[_g];
								++_g;
								if(entry.key.slotIndex == slotIndex) {
									var attachment = entry.value;
									if(((attachment) instanceof spine_attachments_PathAttachment)) {
										var pathBones = (js_Boot.__cast(attachment , spine_attachments_PathAttachment)).bones;
										if(pathBones == null) {
											if(!slotBone.sorted) {
												var parent11 = slotBone.parent;
												if(parent11 != null) {
													if(!parent11.sorted) {
														var parent12 = parent11.parent;
														if(parent12 != null) {
															this.sortBone(parent12);
														}
														parent11.sorted = true;
														this.cache.push(parent11);
													}
												}
												slotBone.sorted = true;
												this.cache.push(slotBone);
											}
										} else {
											var bones5 = this.bones;
											var i9 = 0;
											var n4 = pathBones.length;
											while(i9 < n4) {
												var nn = pathBones[i9++];
												nn += i9;
												while(i9 < nn) {
													var bone7 = bones5[pathBones[i9++]];
													if(!bone7.sorted) {
														var parent13 = bone7.parent;
														if(parent13 != null) {
															if(!parent13.sorted) {
																var parent14 = parent13.parent;
																if(parent14 != null) {
																	this.sortBone(parent14);
																}
																parent13.sorted = true;
																this.cache.push(parent13);
															}
														}
														bone7.sorted = true;
														this.cache.push(bone7);
													}
												}
											}
										}
									}
								}
							}
						}
						if(this.data.defaultSkin != null && this.data.defaultSkin != this.skin) {
							var _g2 = 0;
							var _g3 = spine_support_utils_ObjectMap.entries(this.data.defaultSkin.attachments);
							while(_g2 < _g3.length) {
								var entry1 = _g3[_g2];
								++_g2;
								if(entry1.key.slotIndex == slotIndex) {
									var attachment1 = entry1.value;
									if(((attachment1) instanceof spine_attachments_PathAttachment)) {
										var pathBones1 = (js_Boot.__cast(attachment1 , spine_attachments_PathAttachment)).bones;
										if(pathBones1 == null) {
											if(!slotBone.sorted) {
												var parent15 = slotBone.parent;
												if(parent15 != null) {
													if(!parent15.sorted) {
														var parent16 = parent15.parent;
														if(parent16 != null) {
															this.sortBone(parent16);
														}
														parent15.sorted = true;
														this.cache.push(parent15);
													}
												}
												slotBone.sorted = true;
												this.cache.push(slotBone);
											}
										} else {
											var bones6 = this.bones;
											var i10 = 0;
											var n5 = pathBones1.length;
											while(i10 < n5) {
												var nn1 = pathBones1[i10++];
												nn1 += i10;
												while(i10 < nn1) {
													var bone8 = bones6[pathBones1[i10++]];
													if(!bone8.sorted) {
														var parent17 = bone8.parent;
														if(parent17 != null) {
															if(!parent17.sorted) {
																var parent18 = parent17.parent;
																if(parent18 != null) {
																	this.sortBone(parent18);
																}
																parent17.sorted = true;
																this.cache.push(parent17);
															}
														}
														bone8.sorted = true;
														this.cache.push(bone8);
													}
												}
											}
										}
									}
								}
							}
						}
						var ii3 = 0;
						var nn2 = this.data.skins.length;
						while(ii3 < nn2) {
							var _g4 = 0;
							var _g5 = spine_support_utils_ObjectMap.entries(this.data.skins[ii3].attachments);
							while(_g4 < _g5.length) {
								var entry2 = _g5[_g4];
								++_g4;
								if(entry2.key.slotIndex == slotIndex) {
									var attachment2 = entry2.value;
									if(((attachment2) instanceof spine_attachments_PathAttachment)) {
										var pathBones2 = (js_Boot.__cast(attachment2 , spine_attachments_PathAttachment)).bones;
										if(pathBones2 == null) {
											if(!slotBone.sorted) {
												var parent19 = slotBone.parent;
												if(parent19 != null) {
													if(!parent19.sorted) {
														var parent20 = parent19.parent;
														if(parent20 != null) {
															this.sortBone(parent20);
														}
														parent19.sorted = true;
														this.cache.push(parent19);
													}
												}
												slotBone.sorted = true;
												this.cache.push(slotBone);
											}
										} else {
											var bones7 = this.bones;
											var i11 = 0;
											var n6 = pathBones2.length;
											while(i11 < n6) {
												var nn3 = pathBones2[i11++];
												nn3 += i11;
												while(i11 < nn3) {
													var bone9 = bones7[pathBones2[i11++]];
													if(!bone9.sorted) {
														var parent21 = bone9.parent;
														if(parent21 != null) {
															if(!parent21.sorted) {
																var parent22 = parent21.parent;
																if(parent22 != null) {
																	this.sortBone(parent22);
																}
																parent21.sorted = true;
																this.cache.push(parent21);
															}
														}
														bone9.sorted = true;
														this.cache.push(bone9);
													}
												}
											}
										}
									}
								}
							}
							++ii3;
						}
						var attachment3 = slot.attachment;
						if(((attachment3) instanceof spine_attachments_PathAttachment)) {
							if(((attachment3) instanceof spine_attachments_PathAttachment)) {
								var pathBones3 = (js_Boot.__cast(attachment3 , spine_attachments_PathAttachment)).bones;
								if(pathBones3 == null) {
									if(!slotBone.sorted) {
										var parent23 = slotBone.parent;
										if(parent23 != null) {
											if(!parent23.sorted) {
												var parent24 = parent23.parent;
												if(parent24 != null) {
													this.sortBone(parent24);
												}
												parent23.sorted = true;
												this.cache.push(parent23);
											}
										}
										slotBone.sorted = true;
										this.cache.push(slotBone);
									}
								} else {
									var bones8 = this.bones;
									var i12 = 0;
									var n7 = pathBones3.length;
									while(i12 < n7) {
										var nn4 = pathBones3[i12++];
										nn4 += i12;
										while(i12 < nn4) {
											var bone10 = bones8[pathBones3[i12++]];
											if(!bone10.sorted) {
												var parent25 = bone10.parent;
												if(parent25 != null) {
													if(!parent25.sorted) {
														var parent26 = parent25.parent;
														if(parent26 != null) {
															this.sortBone(parent26);
														}
														parent25.sorted = true;
														this.cache.push(parent25);
													}
												}
												bone10.sorted = true;
												this.cache.push(bone10);
											}
										}
									}
								}
							}
						}
						var constrained2 = constraint2.bones;
						var boneCount1 = constrained2.length;
						var i13 = 0;
						while(i13 < boneCount1) {
							var bone11 = constrained2[i13];
							if(!bone11.sorted) {
								var parent27 = bone11.parent;
								if(parent27 != null) {
									if(!parent27.sorted) {
										var parent28 = parent27.parent;
										if(parent28 != null) {
											this.sortBone(parent28);
										}
										parent27.sorted = true;
										this.cache.push(parent27);
									}
								}
								bone11.sorted = true;
								this.cache.push(bone11);
							}
							++i13;
						}
						this.cache.push(constraint2);
						var i14 = 0;
						while(i14 < boneCount1) {
							var bones9 = constrained2[i14].children;
							var i15 = 0;
							var n8 = bones9.length;
							while(i15 < n8) {
								var bone12 = bones9[i15];
								if(bone12.sorted) {
									var bones10 = bone12.children;
									var i16 = 0;
									var n9 = bones10.length;
									while(i16 < n9) {
										var bone13 = bones10[i16];
										if(bone13.sorted) {
											this.sortReset(bone13.children);
										}
										bone13.sorted = false;
										++i16;
									}
								}
								bone12.sorted = false;
								++i15;
							}
							++i14;
						}
						var i17 = 0;
						while(i17 < boneCount1) {
							constrained2[i17].sorted = true;
							++i17;
						}
						++ii2;
						_gotoLabel_outer = 2;
						break;
					}
					++ii2;
				}
				if(_gotoLabel_outer == 2) {
					_gotoLabel_outer = 0;
					++i;
					continue;
				}
				if(_gotoLabel_outer >= 1) {
					break;
				}
				++i;
			}
			if(_gotoLabel_outer == 0) {
				break;
			}
		}
		var i = 0;
		var n = bones.length;
		while(i < n) {
			var bone = bones[i];
			if(!bone.sorted) {
				var parent = bone.parent;
				if(parent != null) {
					if(!parent.sorted) {
						var parent1 = parent.parent;
						if(parent1 != null) {
							this.sortBone(parent1);
						}
						parent.sorted = true;
						this.cache.push(parent);
					}
				}
				bone.sorted = true;
				this.cache.push(bone);
			}
			++i;
		}
	}
	,sortIkConstraint: function(constraint) {
		var target = constraint.target;
		if(!target.sorted) {
			var parent = target.parent;
			if(parent != null) {
				if(!parent.sorted) {
					var parent1 = parent.parent;
					if(parent1 != null) {
						this.sortBone(parent1);
					}
					parent.sorted = true;
					this.cache.push(parent);
				}
			}
			target.sorted = true;
			this.cache.push(target);
		}
		var constrained = constraint.bones;
		var parent = constrained.length > 0 ? constrained[0] : null;
		if(!parent.sorted) {
			var parent1 = parent.parent;
			if(parent1 != null) {
				if(!parent1.sorted) {
					var parent2 = parent1.parent;
					if(parent2 != null) {
						this.sortBone(parent2);
					}
					parent1.sorted = true;
					this.cache.push(parent1);
				}
			}
			parent.sorted = true;
			this.cache.push(parent);
		}
		if(constrained.length > 1) {
			var child = constrained.length == 0 ? null : constrained[constrained.length - 1];
			if(this.cache.indexOf(child) == -1) {
				this.cacheReset.push(child);
			}
		}
		this.cache.push(constraint);
		var bones = parent.children;
		var i = 0;
		var n = bones.length;
		while(i < n) {
			var bone = bones[i];
			if(bone.sorted) {
				var bones1 = bone.children;
				var i1 = 0;
				var n1 = bones1.length;
				while(i1 < n1) {
					var bone1 = bones1[i1];
					if(bone1.sorted) {
						this.sortReset(bone1.children);
					}
					bone1.sorted = false;
					++i1;
				}
			}
			bone.sorted = false;
			++i;
		}
		(constrained.length == 0 ? null : constrained[constrained.length - 1]).sorted = true;
	}
	,sortPathConstraint: function(constraint) {
		var slot = constraint.target;
		var slotIndex = slot.data.index;
		var slotBone = slot.bone;
		if(this.skin != null) {
			var _g = 0;
			var _g1 = spine_support_utils_ObjectMap.entries(this.skin.attachments);
			while(_g < _g1.length) {
				var entry = _g1[_g];
				++_g;
				if(entry.key.slotIndex == slotIndex) {
					var attachment = entry.value;
					if(((attachment) instanceof spine_attachments_PathAttachment)) {
						var pathBones = (js_Boot.__cast(attachment , spine_attachments_PathAttachment)).bones;
						if(pathBones == null) {
							if(!slotBone.sorted) {
								var parent = slotBone.parent;
								if(parent != null) {
									if(!parent.sorted) {
										var parent1 = parent.parent;
										if(parent1 != null) {
											this.sortBone(parent1);
										}
										parent.sorted = true;
										this.cache.push(parent);
									}
								}
								slotBone.sorted = true;
								this.cache.push(slotBone);
							}
						} else {
							var bones = this.bones;
							var i = 0;
							var n = pathBones.length;
							while(i < n) {
								var nn = pathBones[i++];
								nn += i;
								while(i < nn) {
									var bone = bones[pathBones[i++]];
									if(!bone.sorted) {
										var parent2 = bone.parent;
										if(parent2 != null) {
											if(!parent2.sorted) {
												var parent3 = parent2.parent;
												if(parent3 != null) {
													this.sortBone(parent3);
												}
												parent2.sorted = true;
												this.cache.push(parent2);
											}
										}
										bone.sorted = true;
										this.cache.push(bone);
									}
								}
							}
						}
					}
				}
			}
		}
		if(this.data.defaultSkin != null && this.data.defaultSkin != this.skin) {
			var _g = 0;
			var _g1 = spine_support_utils_ObjectMap.entries(this.data.defaultSkin.attachments);
			while(_g < _g1.length) {
				var entry = _g1[_g];
				++_g;
				if(entry.key.slotIndex == slotIndex) {
					var attachment = entry.value;
					if(((attachment) instanceof spine_attachments_PathAttachment)) {
						var pathBones = (js_Boot.__cast(attachment , spine_attachments_PathAttachment)).bones;
						if(pathBones == null) {
							if(!slotBone.sorted) {
								var parent = slotBone.parent;
								if(parent != null) {
									if(!parent.sorted) {
										var parent1 = parent.parent;
										if(parent1 != null) {
											this.sortBone(parent1);
										}
										parent.sorted = true;
										this.cache.push(parent);
									}
								}
								slotBone.sorted = true;
								this.cache.push(slotBone);
							}
						} else {
							var bones = this.bones;
							var i = 0;
							var n = pathBones.length;
							while(i < n) {
								var nn = pathBones[i++];
								nn += i;
								while(i < nn) {
									var bone = bones[pathBones[i++]];
									if(!bone.sorted) {
										var parent2 = bone.parent;
										if(parent2 != null) {
											if(!parent2.sorted) {
												var parent3 = parent2.parent;
												if(parent3 != null) {
													this.sortBone(parent3);
												}
												parent2.sorted = true;
												this.cache.push(parent2);
											}
										}
										bone.sorted = true;
										this.cache.push(bone);
									}
								}
							}
						}
					}
				}
			}
		}
		var ii = 0;
		var nn = this.data.skins.length;
		while(ii < nn) {
			var _g = 0;
			var _g1 = spine_support_utils_ObjectMap.entries(this.data.skins[ii].attachments);
			while(_g < _g1.length) {
				var entry = _g1[_g];
				++_g;
				if(entry.key.slotIndex == slotIndex) {
					var attachment = entry.value;
					if(((attachment) instanceof spine_attachments_PathAttachment)) {
						var pathBones = (js_Boot.__cast(attachment , spine_attachments_PathAttachment)).bones;
						if(pathBones == null) {
							if(!slotBone.sorted) {
								var parent = slotBone.parent;
								if(parent != null) {
									if(!parent.sorted) {
										var parent1 = parent.parent;
										if(parent1 != null) {
											this.sortBone(parent1);
										}
										parent.sorted = true;
										this.cache.push(parent);
									}
								}
								slotBone.sorted = true;
								this.cache.push(slotBone);
							}
						} else {
							var bones = this.bones;
							var i = 0;
							var n = pathBones.length;
							while(i < n) {
								var nn1 = pathBones[i++];
								nn1 += i;
								while(i < nn1) {
									var bone = bones[pathBones[i++]];
									if(!bone.sorted) {
										var parent2 = bone.parent;
										if(parent2 != null) {
											if(!parent2.sorted) {
												var parent3 = parent2.parent;
												if(parent3 != null) {
													this.sortBone(parent3);
												}
												parent2.sorted = true;
												this.cache.push(parent2);
											}
										}
										bone.sorted = true;
										this.cache.push(bone);
									}
								}
							}
						}
					}
				}
			}
			++ii;
		}
		var attachment = slot.attachment;
		if(((attachment) instanceof spine_attachments_PathAttachment)) {
			if(((attachment) instanceof spine_attachments_PathAttachment)) {
				var pathBones = (js_Boot.__cast(attachment , spine_attachments_PathAttachment)).bones;
				if(pathBones == null) {
					if(!slotBone.sorted) {
						var parent = slotBone.parent;
						if(parent != null) {
							if(!parent.sorted) {
								var parent1 = parent.parent;
								if(parent1 != null) {
									this.sortBone(parent1);
								}
								parent.sorted = true;
								this.cache.push(parent);
							}
						}
						slotBone.sorted = true;
						this.cache.push(slotBone);
					}
				} else {
					var bones = this.bones;
					var i = 0;
					var n = pathBones.length;
					while(i < n) {
						var nn = pathBones[i++];
						nn += i;
						while(i < nn) {
							var bone = bones[pathBones[i++]];
							if(!bone.sorted) {
								var parent = bone.parent;
								if(parent != null) {
									if(!parent.sorted) {
										var parent1 = parent.parent;
										if(parent1 != null) {
											this.sortBone(parent1);
										}
										parent.sorted = true;
										this.cache.push(parent);
									}
								}
								bone.sorted = true;
								this.cache.push(bone);
							}
						}
					}
				}
			}
		}
		var constrained = constraint.bones;
		var boneCount = constrained.length;
		var i = 0;
		while(i < boneCount) {
			var bone = constrained[i];
			if(!bone.sorted) {
				var parent = bone.parent;
				if(parent != null) {
					if(!parent.sorted) {
						var parent1 = parent.parent;
						if(parent1 != null) {
							this.sortBone(parent1);
						}
						parent.sorted = true;
						this.cache.push(parent);
					}
				}
				bone.sorted = true;
				this.cache.push(bone);
			}
			++i;
		}
		this.cache.push(constraint);
		var i = 0;
		while(i < boneCount) {
			var bones = constrained[i].children;
			var i1 = 0;
			var n = bones.length;
			while(i1 < n) {
				var bone = bones[i1];
				if(bone.sorted) {
					var bones1 = bone.children;
					var i2 = 0;
					var n1 = bones1.length;
					while(i2 < n1) {
						var bone1 = bones1[i2];
						if(bone1.sorted) {
							this.sortReset(bone1.children);
						}
						bone1.sorted = false;
						++i2;
					}
				}
				bone.sorted = false;
				++i1;
			}
			++i;
		}
		var i = 0;
		while(i < boneCount) {
			constrained[i].sorted = true;
			++i;
		}
	}
	,sortTransformConstraint: function(constraint) {
		var bone = constraint.target;
		if(!bone.sorted) {
			var parent = bone.parent;
			if(parent != null) {
				if(!parent.sorted) {
					var parent1 = parent.parent;
					if(parent1 != null) {
						this.sortBone(parent1);
					}
					parent.sorted = true;
					this.cache.push(parent);
				}
			}
			bone.sorted = true;
			this.cache.push(bone);
		}
		var constrained = constraint.bones;
		var boneCount = constrained.length;
		if(constraint.data.local) {
			var i = 0;
			while(i < boneCount) {
				var child = constrained[i];
				var bone = child.parent;
				if(!bone.sorted) {
					var parent = bone.parent;
					if(parent != null) {
						if(!parent.sorted) {
							var parent1 = parent.parent;
							if(parent1 != null) {
								this.sortBone(parent1);
							}
							parent.sorted = true;
							this.cache.push(parent);
						}
					}
					bone.sorted = true;
					this.cache.push(bone);
				}
				if(this.cache.indexOf(child) == -1) {
					this.cacheReset.push(child);
				}
				++i;
			}
		} else {
			var i = 0;
			while(i < boneCount) {
				var bone = constrained[i];
				if(!bone.sorted) {
					var parent = bone.parent;
					if(parent != null) {
						if(!parent.sorted) {
							var parent1 = parent.parent;
							if(parent1 != null) {
								this.sortBone(parent1);
							}
							parent.sorted = true;
							this.cache.push(parent);
						}
					}
					bone.sorted = true;
					this.cache.push(bone);
				}
				++i;
			}
		}
		this.cache.push(constraint);
		var i = 0;
		while(i < boneCount) {
			var bones = constrained[i].children;
			var i1 = 0;
			var n = bones.length;
			while(i1 < n) {
				var bone = bones[i1];
				if(bone.sorted) {
					var bones1 = bone.children;
					var i2 = 0;
					var n1 = bones1.length;
					while(i2 < n1) {
						var bone1 = bones1[i2];
						if(bone1.sorted) {
							this.sortReset(bone1.children);
						}
						bone1.sorted = false;
						++i2;
					}
				}
				bone.sorted = false;
				++i1;
			}
			++i;
		}
		var i = 0;
		while(i < boneCount) {
			constrained[i].sorted = true;
			++i;
		}
	}
	,sortPathConstraintAttachmentWithSkin: function(skin,slotIndex,slotBone) {
		var _g = 0;
		var _g1 = spine_support_utils_ObjectMap.entries(skin.attachments);
		while(_g < _g1.length) {
			var entry = _g1[_g];
			++_g;
			if(entry.key.slotIndex == slotIndex) {
				var attachment = entry.value;
				if(((attachment) instanceof spine_attachments_PathAttachment)) {
					var pathBones = (js_Boot.__cast(attachment , spine_attachments_PathAttachment)).bones;
					if(pathBones == null) {
						if(!slotBone.sorted) {
							var parent = slotBone.parent;
							if(parent != null) {
								if(!parent.sorted) {
									var parent1 = parent.parent;
									if(parent1 != null) {
										this.sortBone(parent1);
									}
									parent.sorted = true;
									this.cache.push(parent);
								}
							}
							slotBone.sorted = true;
							this.cache.push(slotBone);
						}
					} else {
						var bones = this.bones;
						var i = 0;
						var n = pathBones.length;
						while(i < n) {
							var nn = pathBones[i++];
							nn += i;
							while(i < nn) {
								var bone = bones[pathBones[i++]];
								if(!bone.sorted) {
									var parent2 = bone.parent;
									if(parent2 != null) {
										if(!parent2.sorted) {
											var parent3 = parent2.parent;
											if(parent3 != null) {
												this.sortBone(parent3);
											}
											parent2.sorted = true;
											this.cache.push(parent2);
										}
									}
									bone.sorted = true;
									this.cache.push(bone);
								}
							}
						}
					}
				}
			}
		}
	}
	,sortPathConstraintAttachment: function(attachment,slotBone) {
		if(!((attachment) instanceof spine_attachments_PathAttachment)) {
			return;
		}
		var pathBones = (js_Boot.__cast(attachment , spine_attachments_PathAttachment)).bones;
		if(pathBones == null) {
			if(!slotBone.sorted) {
				var parent = slotBone.parent;
				if(parent != null) {
					if(!parent.sorted) {
						var parent1 = parent.parent;
						if(parent1 != null) {
							this.sortBone(parent1);
						}
						parent.sorted = true;
						this.cache.push(parent);
					}
				}
				slotBone.sorted = true;
				this.cache.push(slotBone);
			}
		} else {
			var bones = this.bones;
			var i = 0;
			var n = pathBones.length;
			while(i < n) {
				var nn = pathBones[i++];
				nn += i;
				while(i < nn) {
					var bone = bones[pathBones[i++]];
					if(!bone.sorted) {
						var parent = bone.parent;
						if(parent != null) {
							if(!parent.sorted) {
								var parent1 = parent.parent;
								if(parent1 != null) {
									this.sortBone(parent1);
								}
								parent.sorted = true;
								this.cache.push(parent);
							}
						}
						bone.sorted = true;
						this.cache.push(bone);
					}
				}
			}
		}
	}
	,sortBone: function(bone) {
		if(bone.sorted) {
			return;
		}
		var parent = bone.parent;
		if(parent != null) {
			this.sortBone(parent);
		}
		bone.sorted = true;
		this.cache.push(bone);
	}
	,sortReset: function(bones) {
		var i = 0;
		var n = bones.length;
		while(i < n) {
			var bone = bones[i];
			if(bone.sorted) {
				this.sortReset(bone.children);
			}
			bone.sorted = false;
			++i;
		}
	}
	,updateWorldTransform: function() {
		var cacheReset = this.cacheReset;
		var i = 0;
		var n = cacheReset.length;
		while(i < n) {
			var bone = cacheReset[i];
			bone.ax = bone.x;
			bone.ay = bone.y;
			bone.arotation = bone.rotation;
			bone.ascaleX = bone.scaleX;
			bone.ascaleY = bone.scaleY;
			bone.ashearX = bone.shearX;
			bone.ashearY = bone.shearY;
			bone.appliedValid = true;
			++i;
		}
		var cache = this.cache;
		var i = 0;
		var n = cache.length;
		while(i < n) {
			cache[i].update();
			++i;
		}
	}
	,updateWorldTransformWithParent: function(parent) {
		var cacheReset = this.cacheReset;
		var i = 0;
		var n = cacheReset.length;
		while(i < n) {
			var bone = cacheReset[i];
			bone.ax = bone.x;
			bone.ay = bone.y;
			bone.arotation = bone.rotation;
			bone.ascaleX = bone.scaleX;
			bone.ascaleY = bone.scaleY;
			bone.ashearX = bone.shearX;
			bone.ashearY = bone.shearY;
			bone.appliedValid = true;
			++i;
		}
		var rootBone = this.getRootBone();
		var pa = parent.a;
		var pb = parent.b;
		var pc = parent.c;
		var pd = parent.d;
		rootBone.worldX = pa * this.x + pb * this.y + parent.worldX;
		rootBone.worldY = pc * this.x + pd * this.y + parent.worldY;
		var rotationY = rootBone.rotation + 90 + rootBone.shearY;
		var la = js_Boot.__cast(Math.cos((rootBone.rotation + rootBone.shearX) * spine_utils_SpineUtils.degRad) , Float) * rootBone.scaleX;
		var lb = js_Boot.__cast(Math.cos(rotationY * spine_utils_SpineUtils.degRad) , Float) * rootBone.scaleY;
		var lc = js_Boot.__cast(Math.sin((rootBone.rotation + rootBone.shearX) * spine_utils_SpineUtils.degRad) , Float) * rootBone.scaleX;
		var ld = js_Boot.__cast(Math.sin(rotationY * spine_utils_SpineUtils.degRad) , Float) * rootBone.scaleY;
		rootBone.a = pa * la + pb * lc;
		rootBone.b = pa * lb + pb * ld;
		rootBone.c = pc * la + pd * lc;
		rootBone.d = pc * lb + pd * ld;
		if(this.flipY) {
			rootBone.a = -rootBone.a;
			rootBone.b = -rootBone.b;
		}
		if(this.flipX) {
			rootBone.c = -rootBone.c;
			rootBone.d = -rootBone.d;
		}
		var cache = this.cache;
		var i = 0;
		var n = cache.length;
		while(i < n) {
			var updatable = cache[i];
			if(updatable != rootBone) {
				updatable.update();
			}
			++i;
		}
	}
	,setToSetupPose: function() {
		var bones = this.bones;
		var i = 0;
		var n = bones.length;
		while(i < n) {
			var _this = bones[i];
			var data = _this.data;
			_this.x = data.x;
			_this.y = data.y;
			_this.rotation = data.rotation;
			_this.scaleX = data.scaleX;
			_this.scaleY = data.scaleY;
			_this.shearX = data.shearX;
			_this.shearY = data.shearY;
			++i;
		}
		var ikConstraints = this.ikConstraints;
		var i = 0;
		var n = ikConstraints.length;
		while(i < n) {
			var constraint = ikConstraints[i];
			constraint.bendDirection = constraint.data.bendDirection;
			constraint.mix = constraint.data.mix;
			++i;
		}
		var transformConstraints = this.transformConstraints;
		var i = 0;
		var n = transformConstraints.length;
		while(i < n) {
			var constraint = transformConstraints[i];
			var data = constraint.data;
			constraint.rotateMix = data.rotateMix;
			constraint.translateMix = data.translateMix;
			constraint.scaleMix = data.scaleMix;
			constraint.shearMix = data.shearMix;
			++i;
		}
		var pathConstraints = this.pathConstraints;
		var i = 0;
		var n = pathConstraints.length;
		while(i < n) {
			var constraint = pathConstraints[i];
			var data = constraint.data;
			constraint.position = data.position;
			constraint.spacing = data.spacing;
			constraint.rotateMix = data.rotateMix;
			constraint.translateMix = data.translateMix;
			++i;
		}
		var slots = this.slots;
		spine_support_utils_Array.copy(slots,0,this.drawOrder,0,slots.length);
		var i = 0;
		var n = slots.length;
		while(i < n) {
			var _this = slots[i];
			_this.color.set(_this.data.color);
			if(_this.darkColor != null) {
				_this.darkColor.set(_this.data.darkColor);
			}
			if(_this.data.attachmentName == null) {
				var attachment = null;
				if(_this.attachment != attachment) {
					_this.attachment = attachment;
					_this.attachmentTime = _this.bone.skeleton.time;
					var this1 = _this.attachmentVertices;
					this1.splice(0,this1.length);
				}
			} else {
				_this.attachment = null;
				var attachment1 = _this.bone.skeleton.getAttachment(_this.data.index,_this.data.attachmentName);
				if(_this.attachment != attachment1) {
					_this.attachment = attachment1;
					_this.attachmentTime = _this.bone.skeleton.time;
					var this2 = _this.attachmentVertices;
					this2.splice(0,this2.length);
				}
			}
			++i;
		}
	}
	,setBonesToSetupPose: function() {
		var bones = this.bones;
		var i = 0;
		var n = bones.length;
		while(i < n) {
			var _this = bones[i];
			var data = _this.data;
			_this.x = data.x;
			_this.y = data.y;
			_this.rotation = data.rotation;
			_this.scaleX = data.scaleX;
			_this.scaleY = data.scaleY;
			_this.shearX = data.shearX;
			_this.shearY = data.shearY;
			++i;
		}
		var ikConstraints = this.ikConstraints;
		var i = 0;
		var n = ikConstraints.length;
		while(i < n) {
			var constraint = ikConstraints[i];
			constraint.bendDirection = constraint.data.bendDirection;
			constraint.mix = constraint.data.mix;
			++i;
		}
		var transformConstraints = this.transformConstraints;
		var i = 0;
		var n = transformConstraints.length;
		while(i < n) {
			var constraint = transformConstraints[i];
			var data = constraint.data;
			constraint.rotateMix = data.rotateMix;
			constraint.translateMix = data.translateMix;
			constraint.scaleMix = data.scaleMix;
			constraint.shearMix = data.shearMix;
			++i;
		}
		var pathConstraints = this.pathConstraints;
		var i = 0;
		var n = pathConstraints.length;
		while(i < n) {
			var constraint = pathConstraints[i];
			var data = constraint.data;
			constraint.position = data.position;
			constraint.spacing = data.spacing;
			constraint.rotateMix = data.rotateMix;
			constraint.translateMix = data.translateMix;
			++i;
		}
	}
	,setSlotsToSetupPose: function() {
		var slots = this.slots;
		spine_support_utils_Array.copy(slots,0,this.drawOrder,0,slots.length);
		var i = 0;
		var n = slots.length;
		while(i < n) {
			var _this = slots[i];
			_this.color.set(_this.data.color);
			if(_this.darkColor != null) {
				_this.darkColor.set(_this.data.darkColor);
			}
			if(_this.data.attachmentName == null) {
				var attachment = null;
				if(_this.attachment != attachment) {
					_this.attachment = attachment;
					_this.attachmentTime = _this.bone.skeleton.time;
					var this1 = _this.attachmentVertices;
					this1.splice(0,this1.length);
				}
			} else {
				_this.attachment = null;
				var attachment1 = _this.bone.skeleton.getAttachment(_this.data.index,_this.data.attachmentName);
				if(_this.attachment != attachment1) {
					_this.attachment = attachment1;
					_this.attachmentTime = _this.bone.skeleton.time;
					var this2 = _this.attachmentVertices;
					this2.splice(0,this2.length);
				}
			}
			++i;
		}
	}
	,getData: function() {
		return this.data;
	}
	,getBones: function() {
		return this.bones;
	}
	,getUpdateCache: function() {
		return this.cache;
	}
	,getRootBone: function() {
		if(this.bones.length == 0) {
			return null;
		}
		var this1 = this.bones;
		if(this1.length > 0) {
			return this1[0];
		} else {
			return null;
		}
	}
	,findBone: function(boneName) {
		if(boneName == null) {
			throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("boneName cannot be null."));
		}
		var bones = this.bones;
		var i = 0;
		var n = bones.length;
		while(i < n) {
			var bone = bones[i];
			if(bone.data.name == boneName) {
				return bone;
			}
			++i;
		}
		return null;
	}
	,getSlots: function() {
		return this.slots;
	}
	,findSlot: function(slotName) {
		if(slotName == null) {
			throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("slotName cannot be null."));
		}
		var slots = this.slots;
		var i = 0;
		var n = slots.length;
		while(i < n) {
			var slot = slots[i];
			if(slot.data.name == slotName) {
				return slot;
			}
			++i;
		}
		return null;
	}
	,getDrawOrder: function() {
		return this.drawOrder;
	}
	,setDrawOrder: function(drawOrder) {
		if(drawOrder == null) {
			throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("drawOrder cannot be null."));
		}
		this.drawOrder = drawOrder;
	}
	,getSkin: function() {
		return this.skin;
	}
	,setSkinByName: function(skinName) {
		var skin = this.data.findSkin(skinName);
		if(skin == null) {
			throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("Skin not found: " + skinName));
		}
		this.setSkin(skin);
	}
	,setSkin: function(newSkin) {
		if(newSkin != null) {
			if(this.skin != null) {
				var _g = 0;
				var _g1 = spine_support_utils_ObjectMap.entries(this.skin.attachments);
				while(_g < _g1.length) {
					var entry = _g1[_g];
					++_g;
					var slotIndex = entry.key.slotIndex;
					var slot = this.slots[slotIndex];
					if(slot.attachment == entry.value) {
						var name = entry.key.name;
						if(slotIndex < 0) {
							throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("slotIndex must be >= 0."));
						}
						var _this = newSkin.lookup;
						if(name == null) {
							throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("name cannot be null."));
						}
						_this.slotIndex = slotIndex;
						_this.name = name;
						var hash = 0;
						var chr;
						var tmp;
						if(name.length == 0) {
							tmp = hash;
						} else {
							var _g2 = 0;
							var _g3 = name.length;
							while(_g2 < _g3) {
								var i = _g2++;
								chr = HxOverrides.cca(name,i);
								hash = (hash << 5) - hash + chr;
							}
							tmp = hash;
						}
						_this.hashCode = 31 * (31 + tmp) + slotIndex;
						var attachment = spine_support_utils_ObjectMap.get(newSkin.attachments,newSkin.lookup);
						if(attachment != null) {
							if(slot.attachment != attachment) {
								slot.attachment = attachment;
								slot.attachmentTime = slot.bone.skeleton.time;
								var this1 = slot.attachmentVertices;
								this1.splice(0,this1.length);
							}
						}
					}
				}
			} else {
				var slots = this.slots;
				var i = 0;
				var n = slots.length;
				while(i < n) {
					var slot = slots[i];
					var name = slot.data.attachmentName;
					if(name != null) {
						if(i < 0) {
							throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("slotIndex must be >= 0."));
						}
						var _this = newSkin.lookup;
						if(name == null) {
							throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("name cannot be null."));
						}
						_this.slotIndex = i;
						_this.name = name;
						var hash = 0;
						var chr;
						var tmp;
						if(name.length == 0) {
							tmp = hash;
						} else {
							var _g = 0;
							var _g1 = name.length;
							while(_g < _g1) {
								var i1 = _g++;
								chr = HxOverrides.cca(name,i1);
								hash = (hash << 5) - hash + chr;
							}
							tmp = hash;
						}
						_this.hashCode = 31 * (31 + tmp) + i;
						var attachment = spine_support_utils_ObjectMap.get(newSkin.attachments,newSkin.lookup);
						if(attachment != null) {
							if(slot.attachment != attachment) {
								slot.attachment = attachment;
								slot.attachmentTime = slot.bone.skeleton.time;
								var this1 = slot.attachmentVertices;
								this1.splice(0,this1.length);
							}
						}
					}
					++i;
				}
			}
		}
		this.skin = newSkin;
	}
	,getAttachmentWithSlotName: function(slotName,attachmentName) {
		var slot = this.data.findSlot(slotName);
		if(slot == null) {
			throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("Slot not found: " + slotName));
		}
		return this.getAttachment(slot.index,attachmentName);
	}
	,getAttachment: function(slotIndex,attachmentName) {
		if(attachmentName == null) {
			throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("attachmentName cannot be null."));
		}
		if(this.skin != null) {
			var _this = this.skin;
			if(slotIndex < 0) {
				throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("slotIndex must be >= 0."));
			}
			var _this1 = _this.lookup;
			if(attachmentName == null) {
				throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("name cannot be null."));
			}
			_this1.slotIndex = slotIndex;
			_this1.name = attachmentName;
			var hash = 0;
			var chr;
			var tmp;
			if(attachmentName.length == 0) {
				tmp = hash;
			} else {
				var _g = 0;
				var _g1 = attachmentName.length;
				while(_g < _g1) {
					var i = _g++;
					chr = HxOverrides.cca(attachmentName,i);
					hash = (hash << 5) - hash + chr;
				}
				tmp = hash;
			}
			_this1.hashCode = 31 * (31 + tmp) + slotIndex;
			var attachment = spine_support_utils_ObjectMap.get(_this.attachments,_this.lookup);
			if(attachment != null) {
				return attachment;
			}
		}
		if(this.data.defaultSkin != null) {
			var _this = this.data.defaultSkin;
			if(slotIndex < 0) {
				throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("slotIndex must be >= 0."));
			}
			var _this1 = _this.lookup;
			if(attachmentName == null) {
				throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("name cannot be null."));
			}
			_this1.slotIndex = slotIndex;
			_this1.name = attachmentName;
			var hash = 0;
			var chr;
			var tmp;
			if(attachmentName.length == 0) {
				tmp = hash;
			} else {
				var _g = 0;
				var _g1 = attachmentName.length;
				while(_g < _g1) {
					var i = _g++;
					chr = HxOverrides.cca(attachmentName,i);
					hash = (hash << 5) - hash + chr;
				}
				tmp = hash;
			}
			_this1.hashCode = 31 * (31 + tmp) + slotIndex;
			return spine_support_utils_ObjectMap.get(_this.attachments,_this.lookup);
		}
		return null;
	}
	,setAttachment: function(slotName,attachmentName) {
		if(slotName == null) {
			throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("slotName cannot be null."));
		}
		var slot = this.findSlot(slotName);
		if(slot == null) {
			throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("Slot not found: " + slotName));
		}
		var attachment = null;
		if(attachmentName != null) {
			attachment = this.getAttachment(slot.data.index,attachmentName);
			if(attachment == null) {
				throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("Attachment not found: " + attachmentName + ", for slot: " + slotName));
			}
		}
		if(slot.attachment != attachment) {
			slot.attachment = attachment;
			slot.attachmentTime = slot.bone.skeleton.time;
			var this1 = slot.attachmentVertices;
			this1.splice(0,this1.length);
		}
	}
	,getIkConstraints: function() {
		return this.ikConstraints;
	}
	,findIkConstraint: function(constraintName) {
		if(constraintName == null) {
			throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("constraintName cannot be null."));
		}
		var ikConstraints = this.ikConstraints;
		var i = 0;
		var n = ikConstraints.length;
		while(i < n) {
			var ikConstraint = ikConstraints[i];
			if(ikConstraint.data.name == constraintName) {
				return ikConstraint;
			}
			++i;
		}
		return null;
	}
	,getTransformConstraints: function() {
		return this.transformConstraints;
	}
	,findTransformConstraint: function(constraintName) {
		if(constraintName == null) {
			throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("constraintName cannot be null."));
		}
		var transformConstraints = this.transformConstraints;
		var i = 0;
		var n = transformConstraints.length;
		while(i < n) {
			var constraint = transformConstraints[i];
			if(constraint.data.name == constraintName) {
				return constraint;
			}
			++i;
		}
		return null;
	}
	,getPathConstraints: function() {
		return this.pathConstraints;
	}
	,findPathConstraint: function(constraintName) {
		if(constraintName == null) {
			throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("constraintName cannot be null."));
		}
		var pathConstraints = this.pathConstraints;
		var i = 0;
		var n = pathConstraints.length;
		while(i < n) {
			var constraint = pathConstraints[i];
			if(constraint.data.name == constraintName) {
				return constraint;
			}
			++i;
		}
		return null;
	}
	,getBounds: function(offset,size,temp) {
		if(offset == null) {
			throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("offset cannot be null."));
		}
		if(size == null) {
			throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("size cannot be null."));
		}
		var drawOrder = this.drawOrder;
		var minX = 999999999;
		var minY = 999999999;
		var maxX = -999999999;
		var maxY = -999999999;
		var i = 0;
		var n = drawOrder.length;
		while(i < n) {
			var slot = drawOrder[i];
			var verticesLength = 0;
			var vertices = null;
			var attachment = slot.attachment;
			if(((attachment) instanceof spine_attachments_RegionAttachment)) {
				verticesLength = 8;
				var len = temp.length;
				if(len > 8) {
					temp.splice(8,8 - len);
				} else if(len < 8) {
					while(len < 8) {
						temp.push(0);
						++len;
					}
				}
				vertices = temp;
				var bone = slot.bone;
				var offset1 = 0;
				var vertexOffset = (js_Boot.__cast(attachment , spine_attachments_RegionAttachment)).offset;
				var x = bone.worldX;
				var y = bone.worldY;
				var a = bone.a;
				var b = bone.b;
				var c = bone.c;
				var d = bone.d;
				var offsetX = 0;
				var offsetY = 0;
				offsetX = vertexOffset[6];
				offsetY = vertexOffset[7];
				vertices[offset1] = offsetX * a + offsetY * b + x;
				vertices[offset1 + 1] = offsetX * c + offsetY * d + y;
				offset1 += 2;
				offsetX = vertexOffset[0];
				offsetY = vertexOffset[1];
				vertices[offset1] = offsetX * a + offsetY * b + x;
				vertices[offset1 + 1] = offsetX * c + offsetY * d + y;
				offset1 += 2;
				offsetX = vertexOffset[2];
				offsetY = vertexOffset[3];
				vertices[offset1] = offsetX * a + offsetY * b + x;
				vertices[offset1 + 1] = offsetX * c + offsetY * d + y;
				offset1 += 2;
				offsetX = vertexOffset[4];
				offsetY = vertexOffset[5];
				vertices[offset1] = offsetX * a + offsetY * b + x;
				vertices[offset1 + 1] = offsetX * c + offsetY * d + y;
			} else if(((attachment) instanceof spine_attachments_MeshAttachment)) {
				var mesh = js_Boot.__cast(attachment , spine_attachments_MeshAttachment);
				verticesLength = mesh.worldVerticesLength;
				var len1 = temp.length;
				if(len1 > verticesLength) {
					temp.splice(verticesLength,verticesLength - len1);
				} else if(len1 < verticesLength) {
					while(len1 < verticesLength) {
						temp.push(0);
						++len1;
					}
				}
				vertices = temp;
				var count = verticesLength;
				count = (count >> 1) * 2;
				var skeleton = slot.bone.skeleton;
				var deformArray = slot.attachmentVertices;
				var vertices1 = mesh.vertices;
				var bones = mesh.bones;
				if(bones == null) {
					if(deformArray.length > 0) {
						vertices1 = deformArray;
					}
					var bone1 = slot.bone;
					var x1 = bone1.worldX;
					var y1 = bone1.worldY;
					var a1 = bone1.a;
					var b1 = bone1.b;
					var c1 = bone1.c;
					var d1 = bone1.d;
					var v = 0;
					var w = 0;
					while(w < count) {
						var vx = vertices1[v];
						var vy = vertices1[v + 1];
						vertices[w] = vx * a1 + vy * b1 + x1;
						vertices[w + 1] = vx * c1 + vy * d1 + y1;
						v += 2;
						w += 2;
					}
				} else {
					var v1 = 0;
					var skip = 0;
					var i1 = 0;
					while(i1 < 0) {
						var n1 = bones[v1];
						v1 += n1 + 1;
						skip += n1;
						i1 += 2;
					}
					var skeletonBones = skeleton.getBones();
					if(deformArray.length == 0) {
						var w1 = 0;
						var b2 = skip * 3;
						while(w1 < count) {
							var wx = 0;
							var wy = 0;
							var n2 = bones[v1++];
							n2 += v1;
							while(v1 < n2) {
								var bone2 = js_Boot.__cast(skeletonBones[bones[v1]] , spine_Bone);
								var vx1 = vertices1[b2];
								var vy1 = vertices1[b2 + 1];
								var weight = vertices1[b2 + 2];
								wx += (vx1 * bone2.a + vy1 * bone2.b + bone2.worldX) * weight;
								wy += (vx1 * bone2.c + vy1 * bone2.d + bone2.worldY) * weight;
								++v1;
								b2 += 3;
							}
							vertices[w1] = wx;
							vertices[w1 + 1] = wy;
							w1 += 2;
						}
					} else {
						var deform = deformArray;
						var w2 = 0;
						var b3 = skip * 3;
						var f = skip << 1;
						while(w2 < count) {
							var wx1 = 0;
							var wy1 = 0;
							var n3 = bones[v1++];
							n3 += v1;
							while(v1 < n3) {
								var bone3 = js_Boot.__cast(skeletonBones[bones[v1]] , spine_Bone);
								var vx2 = vertices1[b3] + deform[f];
								var vy2 = vertices1[b3 + 1] + deform[f + 1];
								var weight1 = vertices1[b3 + 2];
								wx1 += (vx2 * bone3.a + vy2 * bone3.b + bone3.worldX) * weight1;
								wy1 += (vx2 * bone3.c + vy2 * bone3.d + bone3.worldY) * weight1;
								++v1;
								b3 += 3;
								f += 2;
							}
							vertices[w2] = wx1;
							vertices[w2 + 1] = wy1;
							w2 += 2;
						}
					}
				}
			}
			if(vertices != null) {
				var ii = 0;
				while(ii < verticesLength) {
					var x2 = vertices[ii];
					var y2 = vertices[ii + 1];
					minX = Math.min(minX,x2);
					minY = Math.min(minY,y2);
					maxX = Math.max(maxX,x2);
					maxY = Math.max(maxY,y2);
					ii += 2;
				}
			}
			++i;
		}
		offset.x = minX;
		offset.y = minY;
		size.x = maxX - minX;
		size.y = maxY - minY;
	}
	,getColor: function() {
		return this.color;
	}
	,setColor: function(color) {
		if(color == null) {
			throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("color cannot be null."));
		}
		this.color.set(color);
	}
	,getFlipX: function() {
		return this.flipX;
	}
	,setFlipX: function(flipX) {
		this.flipX = flipX;
	}
	,getFlipY: function() {
		return this.flipY;
	}
	,setFlipY: function(flipY) {
		this.flipY = flipY;
	}
	,setFlip: function(flipX,flipY) {
		this.flipX = flipX;
		this.flipY = flipY;
	}
	,getX: function() {
		return this.x;
	}
	,setX: function(x) {
		this.x = x;
	}
	,getY: function() {
		return this.y;
	}
	,setY: function(y) {
		this.y = y;
	}
	,setPosition: function(x,y) {
		this.x = x;
		this.y = y;
	}
	,getTime: function() {
		return this.time;
	}
	,setTime: function(time) {
		this.time = time;
	}
	,update: function(delta) {
		this.time += delta;
	}
	,toString: function() {
		if(this.data.name != null) {
			return this.data.name;
		} else {
			var c = js_Boot.getClass(this);
			return c.__name__;
		}
	}
	,__class__: spine_Skeleton
};
var spine_SkeletonBounds = function() {
	this.polygonPool = new spine__$SkeletonBounds_PolygonPool();
	this.polygons = [];
	this.boundingBoxes = [];
	this.maxY = 0;
	this.maxX = 0;
	this.minY = 0;
	this.minX = 0;
};
$hxClasses["spine.SkeletonBounds"] = spine_SkeletonBounds;
spine_SkeletonBounds.__name__ = "spine.SkeletonBounds";
spine_SkeletonBounds.prototype = {
	minX: null
	,minY: null
	,maxX: null
	,maxY: null
	,boundingBoxes: null
	,polygons: null
	,polygonPool: null
	,update: function(skeleton,updateAabb) {
		if(skeleton == null) {
			throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("skeleton cannot be null."));
		}
		var boundingBoxes = this.boundingBoxes;
		var polygons = this.polygons;
		var slots = skeleton.slots;
		var slotCount = slots.length;
		boundingBoxes.splice(0,boundingBoxes.length);
		this.polygonPool.freeAll(polygons);
		polygons.splice(0,polygons.length);
		var i = 0;
		while(i < slotCount) {
			var slot = slots[i];
			var attachment = slot.attachment;
			if(((attachment) instanceof spine_attachments_BoundingBoxAttachment)) {
				var boundingBox = js_Boot.__cast(attachment , spine_attachments_BoundingBoxAttachment);
				boundingBoxes.push(boundingBox);
				var polygon = this.polygonPool.obtain();
				polygons.push(polygon);
				var count = boundingBox.worldVerticesLength;
				var size = boundingBox.worldVerticesLength;
				var len = polygon.length;
				if(len > size) {
					polygon.splice(size,size - len);
				} else if(len < size) {
					while(len < size) {
						polygon.push(0);
						++len;
					}
				}
				var worldVertices = polygon;
				count = (count >> 1) * 2;
				var skeleton = slot.bone.skeleton;
				var deformArray = slot.attachmentVertices;
				var vertices = boundingBox.vertices;
				var bones = boundingBox.bones;
				if(bones == null) {
					if(deformArray.length > 0) {
						vertices = deformArray;
					}
					var bone = slot.bone;
					var x = bone.worldX;
					var y = bone.worldY;
					var a = bone.a;
					var b = bone.b;
					var c = bone.c;
					var d = bone.d;
					var v = 0;
					var w = 0;
					while(w < count) {
						var vx = vertices[v];
						var vy = vertices[v + 1];
						worldVertices[w] = vx * a + vy * b + x;
						worldVertices[w + 1] = vx * c + vy * d + y;
						v += 2;
						w += 2;
					}
				} else {
					var v1 = 0;
					var skip = 0;
					var i1 = 0;
					while(i1 < 0) {
						var n = bones[v1];
						v1 += n + 1;
						skip += n;
						i1 += 2;
					}
					var skeletonBones = skeleton.getBones();
					if(deformArray.length == 0) {
						var w1 = 0;
						var b1 = skip * 3;
						while(w1 < count) {
							var wx = 0;
							var wy = 0;
							var n1 = bones[v1++];
							n1 += v1;
							while(v1 < n1) {
								var bone1 = js_Boot.__cast(skeletonBones[bones[v1]] , spine_Bone);
								var vx1 = vertices[b1];
								var vy1 = vertices[b1 + 1];
								var weight = vertices[b1 + 2];
								wx += (vx1 * bone1.a + vy1 * bone1.b + bone1.worldX) * weight;
								wy += (vx1 * bone1.c + vy1 * bone1.d + bone1.worldY) * weight;
								++v1;
								b1 += 3;
							}
							worldVertices[w1] = wx;
							worldVertices[w1 + 1] = wy;
							w1 += 2;
						}
					} else {
						var deform = deformArray;
						var w2 = 0;
						var b2 = skip * 3;
						var f = skip << 1;
						while(w2 < count) {
							var wx1 = 0;
							var wy1 = 0;
							var n2 = bones[v1++];
							n2 += v1;
							while(v1 < n2) {
								var bone2 = js_Boot.__cast(skeletonBones[bones[v1]] , spine_Bone);
								var vx2 = vertices[b2] + deform[f];
								var vy2 = vertices[b2 + 1] + deform[f + 1];
								var weight1 = vertices[b2 + 2];
								wx1 += (vx2 * bone2.a + vy2 * bone2.b + bone2.worldX) * weight1;
								wy1 += (vx2 * bone2.c + vy2 * bone2.d + bone2.worldY) * weight1;
								++v1;
								b2 += 3;
								f += 2;
							}
							worldVertices[w2] = wx1;
							worldVertices[w2 + 1] = wy1;
							w2 += 2;
						}
					}
				}
			}
			++i;
		}
		if(updateAabb) {
			var minX = 999999999;
			var minY = 999999999;
			var maxX = -999999999;
			var maxY = -999999999;
			var polygons = this.polygons;
			var i = 0;
			var n = polygons.length;
			while(i < n) {
				var polygon = polygons[i];
				var vertices = polygon;
				var ii = 0;
				var nn = polygon.length;
				while(ii < nn) {
					var x = vertices[ii];
					var y = vertices[ii + 1];
					minX = Math.min(minX,x);
					minY = Math.min(minY,y);
					maxX = Math.max(maxX,x);
					maxY = Math.max(maxY,y);
					ii += 2;
				}
				++i;
			}
			this.minX = minX;
			this.minY = minY;
			this.maxX = maxX;
			this.maxY = maxY;
		} else {
			this.minX = -999999999;
			this.minY = -999999999;
			this.maxX = 999999999;
			this.maxY = 999999999;
		}
	}
	,aabbCompute: function() {
		var minX = 999999999;
		var minY = 999999999;
		var maxX = -999999999;
		var maxY = -999999999;
		var polygons = this.polygons;
		var i = 0;
		var n = polygons.length;
		while(i < n) {
			var polygon = polygons[i];
			var vertices = polygon;
			var ii = 0;
			var nn = polygon.length;
			while(ii < nn) {
				var x = vertices[ii];
				var y = vertices[ii + 1];
				minX = Math.min(minX,x);
				minY = Math.min(minY,y);
				maxX = Math.max(maxX,x);
				maxY = Math.max(maxY,y);
				ii += 2;
			}
			++i;
		}
		this.minX = minX;
		this.minY = minY;
		this.maxX = maxX;
		this.maxY = maxY;
	}
	,aabbContainsPoint: function(x,y) {
		if(x >= this.minX && x <= this.maxX && y >= this.minY) {
			return y <= this.maxY;
		} else {
			return false;
		}
	}
	,aabbIntersectsSegment: function(x1,y1,x2,y2) {
		var minX = this.minX;
		var minY = this.minY;
		var maxX = this.maxX;
		var maxY = this.maxY;
		if(x1 <= minX && x2 <= minX || y1 <= minY && y2 <= minY || x1 >= maxX && x2 >= maxX || y1 >= maxY && y2 >= maxY) {
			return false;
		}
		var m = (y2 - y1) / (x2 - x1);
		var y = m * (minX - x1) + y1;
		if(y > minY && y < maxY) {
			return true;
		}
		y = m * (maxX - x1) + y1;
		if(y > minY && y < maxY) {
			return true;
		}
		var x = (minY - y1) / m + x1;
		if(x > minX && x < maxX) {
			return true;
		}
		x = (maxY - y1) / m + x1;
		if(x > minX && x < maxX) {
			return true;
		}
		return false;
	}
	,aabbIntersectsSkeleton: function(bounds) {
		if(this.minX < bounds.maxX && this.maxX > bounds.minX && this.minY < bounds.maxY) {
			return this.maxY > bounds.minY;
		} else {
			return false;
		}
	}
	,containsPoint: function(x,y) {
		var polygons = this.polygons;
		var i = 0;
		var n = polygons.length;
		while(i < n) {
			var polygon = polygons[i];
			var vertices = polygon;
			var nn = polygon.length;
			var prevIndex = nn - 2;
			var inside = false;
			var ii = 0;
			while(ii < nn) {
				var vertexY = vertices[ii + 1];
				var prevY = vertices[prevIndex + 1];
				if(vertexY < y && prevY >= y || prevY < y && vertexY >= y) {
					var vertexX = vertices[ii];
					if(vertexX + (y - vertexY) / (prevY - vertexY) * (vertices[prevIndex] - vertexX) < x) {
						inside = !inside;
					}
				}
				prevIndex = ii;
				ii += 2;
			}
			if(inside) {
				return this.boundingBoxes[i];
			}
			++i;
		}
		return null;
	}
	,polygonContainsPoint: function(polygon,x,y) {
		var vertices = polygon;
		var nn = polygon.length;
		var prevIndex = nn - 2;
		var inside = false;
		var ii = 0;
		while(ii < nn) {
			var vertexY = vertices[ii + 1];
			var prevY = vertices[prevIndex + 1];
			if(vertexY < y && prevY >= y || prevY < y && vertexY >= y) {
				var vertexX = vertices[ii];
				if(vertexX + (y - vertexY) / (prevY - vertexY) * (vertices[prevIndex] - vertexX) < x) {
					inside = !inside;
				}
			}
			prevIndex = ii;
			ii += 2;
		}
		return inside;
	}
	,intersectsSegment: function(x1,y1,x2,y2) {
		var polygons = this.polygons;
		var i = 0;
		var n = polygons.length;
		while(i < n) {
			if(this.polygonIntersectsSegment(polygons[i],x1,y1,x2,y2)) {
				return this.boundingBoxes[i];
			}
			++i;
		}
		return null;
	}
	,polygonIntersectsSegment: function(polygon,x1,y1,x2,y2) {
		var vertices = polygon;
		var nn = polygon.length;
		var width12 = x1 - x2;
		var height12 = y1 - y2;
		var det1 = x1 * y2 - y1 * x2;
		var x3 = vertices[nn - 2];
		var y3 = vertices[nn - 1];
		var ii = 0;
		while(ii < nn) {
			var x4 = vertices[ii];
			var y4 = vertices[ii + 1];
			var det2 = x3 * y4 - y3 * x4;
			var width34 = x3 - x4;
			var height34 = y3 - y4;
			var det3 = width12 * height34 - height12 * width34;
			var x = (det1 * width34 - width12 * det2) / det3;
			if((x >= x3 && x <= x4 || x >= x4 && x <= x3) && (x >= x1 && x <= x2 || x >= x2 && x <= x1)) {
				var y = (det1 * height34 - height12 * det2) / det3;
				if((y >= y3 && y <= y4 || y >= y4 && y <= y3) && (y >= y1 && y <= y2 || y >= y2 && y <= y1)) {
					return true;
				}
			}
			x3 = x4;
			y3 = y4;
			ii += 2;
		}
		return false;
	}
	,getMinX: function() {
		return this.minX;
	}
	,getMinY: function() {
		return this.minY;
	}
	,getMaxX: function() {
		return this.maxX;
	}
	,getMaxY: function() {
		return this.maxY;
	}
	,getWidth: function() {
		return this.maxX - this.minX;
	}
	,getHeight: function() {
		return this.maxY - this.minY;
	}
	,getBoundingBoxes: function() {
		return this.boundingBoxes;
	}
	,getPolygons: function() {
		return this.polygons;
	}
	,getPolygon: function(boundingBox) {
		if(boundingBox == null) {
			throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("boundingBox cannot be null."));
		}
		var index = this.boundingBoxes.indexOf(boundingBox);
		if(index == -1) {
			return null;
		} else {
			return this.polygons[index];
		}
	}
	,__class__: spine_SkeletonBounds
};
var spine__$SkeletonBounds_PolygonPool = function(initialCapacity,max) {
	spine_support_utils_Pool.call(this,initialCapacity,max);
};
$hxClasses["spine._SkeletonBounds.PolygonPool"] = spine__$SkeletonBounds_PolygonPool;
spine__$SkeletonBounds_PolygonPool.__name__ = "spine._SkeletonBounds.PolygonPool";
spine__$SkeletonBounds_PolygonPool.__super__ = spine_support_utils_Pool;
spine__$SkeletonBounds_PolygonPool.prototype = $extend(spine_support_utils_Pool.prototype,{
	newObject: function() {
		var this1 = [];
		return this1;
	}
	,__class__: spine__$SkeletonBounds_PolygonPool
});
var spine_SkeletonData = function() {
	this.fps = 30;
	this.hash = null;
	this.height = 0;
	this.width = 0;
	this.pathConstraints = [];
	this.transformConstraints = [];
	this.ikConstraints = [];
	this.animations = [];
	this.events = [];
	this.skins = [];
	this.slots = [];
	this.bones = [];
};
$hxClasses["spine.SkeletonData"] = spine_SkeletonData;
spine_SkeletonData.__name__ = "spine.SkeletonData";
spine_SkeletonData.prototype = {
	name: null
	,bones: null
	,slots: null
	,skins: null
	,defaultSkin: null
	,events: null
	,animations: null
	,ikConstraints: null
	,transformConstraints: null
	,pathConstraints: null
	,width: null
	,height: null
	,version: null
	,hash: null
	,fps: null
	,imagesPath: null
	,getBones: function() {
		return this.bones;
	}
	,findBone: function(boneName) {
		if(boneName == null) {
			throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("boneName cannot be null."));
		}
		var bones = this.bones;
		var i = 0;
		var n = bones.length;
		while(i < n) {
			var bone = bones[i];
			if(bone.name == boneName) {
				return bone;
			}
			++i;
		}
		return null;
	}
	,getSlots: function() {
		return this.slots;
	}
	,findSlot: function(slotName) {
		if(slotName == null) {
			throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("slotName cannot be null."));
		}
		var slots = this.slots;
		var i = 0;
		var n = slots.length;
		while(i < n) {
			var slot = slots[i];
			if(slot.name == slotName) {
				return slot;
			}
			++i;
		}
		return null;
	}
	,getDefaultSkin: function() {
		return this.defaultSkin;
	}
	,setDefaultSkin: function(defaultSkin) {
		this.defaultSkin = defaultSkin;
	}
	,findSkin: function(skinName) {
		if(skinName == null) {
			throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("skinName cannot be null."));
		}
		var _g = 0;
		var _g1 = this.skins;
		while(_g < _g1.length) {
			var skin = _g1[_g];
			++_g;
			if(skin.name == skinName) {
				return skin;
			}
		}
		return null;
	}
	,getSkins: function() {
		return this.skins;
	}
	,findEvent: function(eventDataName) {
		if(eventDataName == null) {
			throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("eventDataName cannot be null."));
		}
		var _g = 0;
		var _g1 = this.events;
		while(_g < _g1.length) {
			var eventData = _g1[_g];
			++_g;
			if(eventData.name == eventDataName) {
				return eventData;
			}
		}
		return null;
	}
	,getEvents: function() {
		return this.events;
	}
	,getAnimations: function() {
		return this.animations;
	}
	,findAnimation: function(animationName) {
		if(animationName == null) {
			throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("animationName cannot be null."));
		}
		var animations = this.animations;
		var i = 0;
		var n = animations.length;
		while(i < n) {
			var animation = animations[i];
			if(animation.name == animationName) {
				return animation;
			}
			++i;
		}
		return null;
	}
	,getIkConstraints: function() {
		return this.ikConstraints;
	}
	,findIkConstraint: function(constraintName) {
		if(constraintName == null) {
			throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("constraintName cannot be null."));
		}
		var ikConstraints = this.ikConstraints;
		var i = 0;
		var n = ikConstraints.length;
		while(i < n) {
			var constraint = ikConstraints[i];
			if(constraint.name == constraintName) {
				return constraint;
			}
			++i;
		}
		return null;
	}
	,getTransformConstraints: function() {
		return this.transformConstraints;
	}
	,findTransformConstraint: function(constraintName) {
		if(constraintName == null) {
			throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("constraintName cannot be null."));
		}
		var transformConstraints = this.transformConstraints;
		var i = 0;
		var n = transformConstraints.length;
		while(i < n) {
			var constraint = transformConstraints[i];
			if(constraint.name == constraintName) {
				return constraint;
			}
			++i;
		}
		return null;
	}
	,getPathConstraints: function() {
		return this.pathConstraints;
	}
	,findPathConstraint: function(constraintName) {
		if(constraintName == null) {
			throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("constraintName cannot be null."));
		}
		var pathConstraints = this.pathConstraints;
		var i = 0;
		var n = pathConstraints.length;
		while(i < n) {
			var constraint = pathConstraints[i];
			if(constraint.name == constraintName) {
				return constraint;
			}
			++i;
		}
		return null;
	}
	,getName: function() {
		return this.name;
	}
	,setName: function(name) {
		this.name = name;
	}
	,getWidth: function() {
		return this.width;
	}
	,setWidth: function(width) {
		this.width = width;
	}
	,getHeight: function() {
		return this.height;
	}
	,setHeight: function(height) {
		this.height = height;
	}
	,getVersion: function() {
		return this.version;
	}
	,setVersion: function(version) {
		this.version = version;
	}
	,getHash: function() {
		return this.hash;
	}
	,setHash: function(hash) {
		this.hash = hash;
	}
	,getImagesPath: function() {
		return this.imagesPath;
	}
	,setImagesPath: function(imagesPath) {
		this.imagesPath = imagesPath;
	}
	,getFps: function() {
		return this.fps;
	}
	,setFps: function(fps) {
		this.fps = fps;
	}
	,toString: function() {
		if(this.name != null) {
			return this.name;
		} else {
			var c = js_Boot.getClass(this);
			return c.__name__;
		}
	}
	,__class__: spine_SkeletonData
};
var spine_support_files_FileHandle = function() { };
$hxClasses["spine.support.files.FileHandle"] = spine_support_files_FileHandle;
spine_support_files_FileHandle.__name__ = "spine.support.files.FileHandle";
spine_support_files_FileHandle.__isInterface__ = true;
spine_support_files_FileHandle.prototype = {
	path: null
	,getContent: null
	,__class__: spine_support_files_FileHandle
};
var spine_SkeletonDataFileHandle = function(path,data) {
	this.path = "";
	this.path = path;
	if(this.path == null) {
		this.path = "";
	}
	this._data = data;
	if(this._data == null) {
		this._data = openfl_utils_Assets.getText(path);
	}
};
$hxClasses["spine.SkeletonDataFileHandle"] = spine_SkeletonDataFileHandle;
spine_SkeletonDataFileHandle.__name__ = "spine.SkeletonDataFileHandle";
spine_SkeletonDataFileHandle.__interfaces__ = [spine_support_files_FileHandle];
spine_SkeletonDataFileHandle.prototype = {
	path: null
	,_data: null
	,getContent: function() {
		return this._data;
	}
	,__class__: spine_SkeletonDataFileHandle
};
var spine_SkeletonJson = function(attachmentLoader) {
	this.linkedMeshes = [];
	this.scale = 1;
	if(attachmentLoader == null) {
		throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("attachmentLoader cannot be null."));
	}
	this.attachmentLoader = attachmentLoader;
};
$hxClasses["spine.SkeletonJson"] = spine_SkeletonJson;
spine_SkeletonJson.__name__ = "spine.SkeletonJson";
spine_SkeletonJson.prototype = {
	attachmentLoader: null
	,scale: null
	,linkedMeshes: null
	,getScale: function() {
		return this.scale;
	}
	,setScale: function(scale) {
		this.scale = scale;
	}
	,readSkeletonData: function(file) {
		if(file == null) {
			throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("file cannot be null."));
		}
		var scale = this.scale;
		var skeletonData = new spine_SkeletonData();
		skeletonData.name = spine_support_extensions_FileExtensions.nameWithoutExtension(file);
		var root = new spine_support_utils_JsonReader().parse(file);
		var skeletonMap = root.get("skeleton");
		if(skeletonMap != null) {
			skeletonData.hash = skeletonMap.getString("hash",null);
			skeletonData.version = skeletonMap.getString("spine",null);
			skeletonData.width = skeletonMap.getFloat("width",0);
			skeletonData.height = skeletonMap.getFloat("height",0);
			skeletonData.fps = skeletonMap.getFloat("fps",30);
			skeletonData.imagesPath = skeletonMap.getString("images",null);
		}
		var boneMap = root.getChild("bones");
		while(boneMap != null) {
			var parent = null;
			var parentName = boneMap.getString("parent",null);
			if(parentName != null) {
				parent = skeletonData.findBone(parentName);
				if(parent == null) {
					throw haxe_Exception.thrown(new spine_support_utils_SerializationException("Parent bone not found: " + parentName));
				}
			}
			var data = new spine_BoneData(skeletonData.bones.length,boneMap.getString("name"),parent);
			data.length = boneMap.getFloat("length",0) * scale;
			data.x = boneMap.getFloat("x",0) * scale;
			data.y = boneMap.getFloat("y",0) * scale;
			data.rotation = boneMap.getFloat("rotation",0);
			data.scaleX = boneMap.getFloat("scaleX",1);
			data.scaleY = boneMap.getFloat("scaleY",1);
			data.shearX = boneMap.getFloat("shearX",0);
			data.shearY = boneMap.getFloat("shearY",0);
			var tmp;
			switch(boneMap.getString("transform","normal")) {
			case "noRotationOrReflection":
				tmp = 2;
				break;
			case "noScale":
				tmp = 3;
				break;
			case "noScaleOrReflection":
				tmp = 4;
				break;
			case "normal":
				tmp = 0;
				break;
			case "onlyTranslation":
				tmp = 1;
				break;
			default:
				tmp = 0;
			}
			data.transformMode = tmp;
			var color = boneMap.getString("color",null);
			if(color != null) {
				data.color.set(spine_support_graphics_Color.valueOf(color));
			}
			skeletonData.bones.push(data);
			boneMap = boneMap.get_next();
		}
		var slotMap = root.getChild("slots");
		while(slotMap != null) {
			var slotName = slotMap.getString("name");
			var boneName = slotMap.getString("bone");
			var boneData = skeletonData.findBone(boneName);
			if(boneData == null) {
				throw haxe_Exception.thrown(new spine_support_utils_SerializationException("Slot bone not found: " + boneName));
			}
			var data = new spine_SlotData(skeletonData.slots.length,slotName,boneData);
			var color = slotMap.getString("color",null);
			if(color != null) {
				data.color.set(spine_support_graphics_Color.valueOf(color));
			}
			var dark = slotMap.getString("dark",null);
			if(dark != null) {
				data.darkColor = spine_support_graphics_Color.valueOf(dark);
			}
			data.attachmentName = slotMap.getString("attachment",null);
			var tmp;
			switch(slotMap.getString("blend","normal")) {
			case "additive":
				tmp = 1;
				break;
			case "multiply":
				tmp = 2;
				break;
			case "normal":
				tmp = 0;
				break;
			case "screen":
				tmp = 3;
				break;
			default:
				tmp = 0;
			}
			data.blendMode = tmp;
			skeletonData.slots.push(data);
			slotMap = slotMap.get_next();
		}
		var constraintMap = root.getChild("ik");
		while(constraintMap != null) {
			var data = new spine_IkConstraintData(constraintMap.getString("name"));
			data.order = constraintMap.getInt("order",0);
			var boneMap = constraintMap.getChild("bones");
			while(boneMap != null) {
				var boneName = boneMap.asString();
				var bone = skeletonData.findBone(boneName);
				if(bone == null) {
					throw haxe_Exception.thrown(new spine_support_utils_SerializationException("IK bone not found: " + boneName));
				}
				data.bones.push(bone);
				boneMap = boneMap.get_next();
			}
			var targetName = constraintMap.getString("target");
			data.target = skeletonData.findBone(targetName);
			if(data.target == null) {
				throw haxe_Exception.thrown(new spine_support_utils_SerializationException("IK target bone not found: " + targetName));
			}
			data.bendDirection = constraintMap.getBoolean("bendPositive",true) ? 1 : -1;
			data.mix = constraintMap.getFloat("mix",1);
			skeletonData.ikConstraints.push(data);
			constraintMap = constraintMap.get_next();
		}
		var constraintMap = root.getChild("transform");
		while(constraintMap != null) {
			var data = new spine_TransformConstraintData(constraintMap.getString("name"));
			data.order = constraintMap.getInt("order",0);
			var boneMap = constraintMap.getChild("bones");
			while(boneMap != null) {
				var boneName = boneMap.asString();
				var bone = skeletonData.findBone(boneName);
				if(bone == null) {
					throw haxe_Exception.thrown(new spine_support_utils_SerializationException("Transform constraint bone not found: " + boneName));
				}
				data.bones.push(bone);
				boneMap = boneMap.get_next();
			}
			var targetName = constraintMap.getString("target");
			data.target = skeletonData.findBone(targetName);
			if(data.target == null) {
				throw haxe_Exception.thrown(new spine_support_utils_SerializationException("Transform constraint target bone not found: " + targetName));
			}
			data.local = constraintMap.getBoolean("local",false);
			data.relative = constraintMap.getBoolean("relative",false);
			data.offsetRotation = constraintMap.getFloat("rotation",0);
			data.offsetX = constraintMap.getFloat("x",0) * scale;
			data.offsetY = constraintMap.getFloat("y",0) * scale;
			data.offsetScaleX = constraintMap.getFloat("scaleX",0);
			data.offsetScaleY = constraintMap.getFloat("scaleY",0);
			data.offsetShearY = constraintMap.getFloat("shearY",0);
			data.rotateMix = constraintMap.getFloat("rotateMix",1);
			data.translateMix = constraintMap.getFloat("translateMix",1);
			data.scaleMix = constraintMap.getFloat("scaleMix",1);
			data.shearMix = constraintMap.getFloat("shearMix",1);
			skeletonData.transformConstraints.push(data);
			constraintMap = constraintMap.get_next();
		}
		var constraintMap = root.getChild("path");
		while(constraintMap != null) {
			var data = new spine_PathConstraintData(constraintMap.getString("name"));
			data.order = constraintMap.getInt("order",0);
			var boneMap = constraintMap.getChild("bones");
			while(boneMap != null) {
				var boneName = boneMap.asString();
				var bone = skeletonData.findBone(boneName);
				if(bone == null) {
					throw haxe_Exception.thrown(new spine_support_utils_SerializationException("Path bone not found: " + boneName));
				}
				data.bones.push(bone);
				boneMap = boneMap.get_next();
			}
			var targetName = constraintMap.getString("target");
			data.target = skeletonData.findSlot(targetName);
			if(data.target == null) {
				throw haxe_Exception.thrown(new spine_support_utils_SerializationException("Path target slot not found: " + targetName));
			}
			var tmp;
			switch(constraintMap.getString("positionMode","percent")) {
			case "fixed":
				tmp = 0;
				break;
			case "percent":
				tmp = 1;
				break;
			default:
				tmp = 0;
			}
			data.positionMode = tmp;
			var tmp1;
			switch(constraintMap.getString("spacingMode","length")) {
			case "fixed":
				tmp1 = 1;
				break;
			case "length":
				tmp1 = 0;
				break;
			case "percent":
				tmp1 = 2;
				break;
			default:
				tmp1 = 0;
			}
			data.spacingMode = tmp1;
			var tmp2;
			switch(constraintMap.getString("rotateMode","tangent")) {
			case "chain":
				tmp2 = 1;
				break;
			case "chainScale":
				tmp2 = 2;
				break;
			case "tangent":
				tmp2 = 0;
				break;
			default:
				tmp2 = 0;
			}
			data.rotateMode = tmp2;
			data.offsetRotation = constraintMap.getFloat("rotation",0);
			data.position = constraintMap.getFloat("position",0);
			if(data.positionMode == 0) {
				data.position *= scale;
			}
			data.spacing = constraintMap.getFloat("spacing",0);
			if(data.spacingMode == 0 || data.spacingMode == 1) {
				data.spacing *= scale;
			}
			data.rotateMix = constraintMap.getFloat("rotateMix",1);
			data.translateMix = constraintMap.getFloat("translateMix",1);
			skeletonData.pathConstraints.push(data);
			constraintMap = constraintMap.get_next();
		}
		var skinMap = root.getChild("skins");
		while(skinMap != null) {
			var skin = new spine_Skin(skinMap.get_name());
			var slotEntry = skinMap.get_child();
			while(slotEntry != null) {
				var slot = skeletonData.findSlot(slotEntry.get_name());
				if(slot == null) {
					throw haxe_Exception.thrown(new spine_support_utils_SerializationException("Slot not found: " + slotEntry.get_name()));
				}
				var entry = slotEntry.get_child();
				while(entry != null) {
					try {
						var attachment = this.readAttachment(entry,skin,slot.index,entry.get_name(),skeletonData);
						if(attachment != null) {
							var slotIndex = slot.index;
							var name = entry.get_name();
							if(attachment == null) {
								throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("attachment cannot be null."));
							}
							if(slotIndex < 0) {
								throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("slotIndex must be >= 0."));
							}
							var key = skin.keyPool.obtain();
							if(name == null) {
								throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("name cannot be null."));
							}
							key.slotIndex = slotIndex;
							key.name = name;
							var hash = 0;
							var chr;
							var tmp;
							if(name.length == 0) {
								tmp = hash;
							} else {
								var _g = 0;
								var _g1 = name.length;
								while(_g < _g1) {
									var i = _g++;
									chr = HxOverrides.cca(name,i);
									hash = (hash << 5) - hash + chr;
								}
								tmp = hash;
							}
							key.hashCode = 31 * (31 + tmp) + slotIndex;
							spine_support_utils_ObjectMap.put(skin.attachments,key,attachment);
						}
					} catch( _g2 ) {
						haxe_NativeStackTrace.lastError = _g2;
						var ex = haxe_Exception.caught(_g2).unwrap();
						throw haxe_Exception.thrown(new spine_support_utils_SerializationException("Error reading attachment: " + entry.get_name() + ", skin: " + Std.string(skin),ex));
					}
					entry = entry.get_next();
				}
				slotEntry = slotEntry.get_next();
			}
			skeletonData.skins.push(skin);
			if(skin.name == "default") {
				skeletonData.defaultSkin = skin;
			}
			skinMap = skinMap.get_next();
		}
		var i = 0;
		var n = this.linkedMeshes.length;
		while(i < n) {
			var linkedMesh = this.linkedMeshes[i];
			var skin = linkedMesh.skin == null ? skeletonData.getDefaultSkin() : skeletonData.findSkin(linkedMesh.skin);
			if(skin == null) {
				throw haxe_Exception.thrown(new spine_support_utils_SerializationException("Skin not found: " + linkedMesh.skin));
			}
			var slotIndex = linkedMesh.slotIndex;
			var name = linkedMesh.parent;
			if(slotIndex < 0) {
				throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("slotIndex must be >= 0."));
			}
			var _this = skin.lookup;
			if(name == null) {
				throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("name cannot be null."));
			}
			_this.slotIndex = slotIndex;
			_this.name = name;
			var hash = 0;
			var chr;
			var tmp;
			if(name.length == 0) {
				tmp = hash;
			} else {
				var _g = 0;
				var _g1 = name.length;
				while(_g < _g1) {
					var i1 = _g++;
					chr = HxOverrides.cca(name,i1);
					hash = (hash << 5) - hash + chr;
				}
				tmp = hash;
			}
			_this.hashCode = 31 * (31 + tmp) + slotIndex;
			var parent = spine_support_utils_ObjectMap.get(skin.attachments,skin.lookup);
			if(parent == null) {
				throw haxe_Exception.thrown(new spine_support_utils_SerializationException("Parent mesh not found: " + linkedMesh.parent));
			}
			var _this1 = linkedMesh.mesh;
			var parentMesh = js_Boot.__cast(parent , spine_attachments_MeshAttachment);
			_this1.parentMesh = parentMesh;
			if(parentMesh != null) {
				_this1.bones = parentMesh.bones;
				_this1.vertices = parentMesh.vertices;
				_this1.regionUVs = parentMesh.regionUVs;
				_this1.triangles = parentMesh.triangles;
				_this1.hullLength = parentMesh.hullLength;
				_this1.worldVerticesLength = parentMesh.worldVerticesLength;
				_this1.edges = parentMesh.edges;
				_this1.width = parentMesh.width;
				_this1.height = parentMesh.height;
			}
			var _this2 = linkedMesh.mesh;
			var u = 0;
			var v = 0;
			var width = 0;
			var height = 0;
			if(_this2.region == null) {
				v = 0;
				u = v;
				height = 1;
				width = height;
			} else {
				u = _this2.region.u;
				v = _this2.region.v;
				width = _this2.region.u2 - u;
				height = _this2.region.v2 - v;
			}
			var regionUVs = _this2.regionUVs;
			if(_this2.uvs == null || _this2.uvs.length != regionUVs.length) {
				var length = regionUVs.length;
				if(length == null) {
					length = 0;
				}
				var len = length | 0;
				var capacity = len != 0 ? len : 16;
				var this1 = [];
				var array = this1;
				if(length > 0) {
					var len1 = array.length;
					if(len1 > len) {
						array.splice(len,len - len1);
					} else if(len1 < len) {
						while(len1 < len) {
							array.push(0);
							++len1;
						}
					}
				}
				_this2.uvs = array;
			}
			var uvs = _this2.uvs;
			if(((_this2.region) instanceof spine_support_graphics_AtlasRegion) && (js_Boot.__cast(_this2.region , spine_support_graphics_AtlasRegion)).rotate) {
				var i2 = 0;
				var n1 = uvs.length;
				while(i2 < n1) {
					uvs[i2] = u + regionUVs[i2 + 1] * width;
					uvs[i2 + 1] = v + height - regionUVs[i2] * height;
					i2 += 2;
				}
			} else {
				var i3 = 0;
				var n2 = uvs.length;
				while(i3 < n2) {
					uvs[i3] = u + regionUVs[i3] * width;
					uvs[i3 + 1] = v + regionUVs[i3 + 1] * height;
					i3 += 2;
				}
			}
			++i;
		}
		var this1 = this.linkedMeshes;
		this1.splice(0,this1.length);
		var eventMap = root.getChild("events");
		while(eventMap != null) {
			var data = new spine_EventData(eventMap.get_name());
			data.intValue = eventMap.getInt("int",0);
			data.floatValue = eventMap.getFloat("float",0);
			data.stringValue = eventMap.getString("string","");
			skeletonData.events.push(data);
			eventMap = eventMap.get_next();
		}
		var animationMap = root.getChild("animations");
		while(animationMap != null) {
			try {
				var name = animationMap.get_name();
				var scale = this.scale;
				var this1 = [];
				var timelines = this1;
				var duration = 0;
				var slotMap = animationMap.getChild("slots");
				while(slotMap != null) {
					var slot = skeletonData.findSlot(slotMap.get_name());
					if(slot == null) {
						throw haxe_Exception.thrown(new spine_support_utils_SerializationException("Slot not found: " + slotMap.get_name()));
					}
					var timelineMap = slotMap.get_child();
					while(timelineMap != null) {
						var timelineName = timelineMap.get_name();
						if(timelineName == "attachment") {
							var timeline = new spine_AttachmentTimeline(timelineMap.get_size());
							timeline.slotIndex = slot.index;
							var frameIndex = 0;
							var valueMap = timelineMap.get_child();
							while(valueMap != null) {
								var frameIndex1 = frameIndex++;
								var time = valueMap.getFloat("time");
								var attachmentName = valueMap.getString("name");
								timeline.frames[frameIndex1] = time;
								timeline.attachmentNames[frameIndex1] = attachmentName;
								valueMap = valueMap.get_next();
							}
							timelines.push(timeline);
							duration = Math.max(duration,timeline.frames[timeline.frames.length - 1]);
						} else if(timelineName == "color") {
							var timeline1 = new spine_ColorTimeline(timelineMap.get_size());
							timeline1.slotIndex = slot.index;
							var frameIndex2 = 0;
							var valueMap1 = timelineMap.get_child();
							while(valueMap1 != null) {
								var color = spine_support_graphics_Color.valueOf(valueMap1.getString("color"));
								var frameIndex3 = frameIndex2;
								var time1 = valueMap1.getFloat("time");
								frameIndex3 *= 5;
								timeline1.frames[frameIndex3] = time1;
								timeline1.frames[frameIndex3 + 1] = color.r;
								timeline1.frames[frameIndex3 + 2] = color.g;
								timeline1.frames[frameIndex3 + 3] = color.b;
								timeline1.frames[frameIndex3 + 4] = color.a;
								var curve = valueMap1.get("curve");
								if(curve != null) {
									if(curve.isString() && curve.asString() == "stepped") {
										timeline1.curves[frameIndex2 * 19] = 1;
									} else if(curve.isArray()) {
										timeline1.setCurve(frameIndex2,curve.getFloat(0),curve.getFloat(1),curve.getFloat(2),curve.getFloat(3));
									}
								}
								++frameIndex2;
								valueMap1 = valueMap1.get_next();
							}
							timelines.push(timeline1);
							duration = Math.max(duration,timeline1.frames[((timeline1.curves.length / 19 + 1 | 0) - 1) * 5]);
						} else if(timelineName == "twoColor") {
							var timeline2 = new spine_TwoColorTimeline(timelineMap.get_size());
							timeline2.slotIndex = slot.index;
							var frameIndex4 = 0;
							var valueMap2 = timelineMap.get_child();
							while(valueMap2 != null) {
								var light = spine_support_graphics_Color.valueOf(valueMap2.getString("light"));
								var dark = spine_support_graphics_Color.valueOf(valueMap2.getString("dark"));
								var frameIndex5 = frameIndex4;
								var time2 = valueMap2.getFloat("time");
								frameIndex5 *= 8;
								timeline2.frames[frameIndex5] = time2;
								timeline2.frames[frameIndex5 + 1] = light.r;
								timeline2.frames[frameIndex5 + 2] = light.g;
								timeline2.frames[frameIndex5 + 3] = light.b;
								timeline2.frames[frameIndex5 + 4] = light.a;
								timeline2.frames[frameIndex5 + 5] = dark.r;
								timeline2.frames[frameIndex5 + 6] = dark.g;
								timeline2.frames[frameIndex5 + 7] = dark.b;
								var curve1 = valueMap2.get("curve");
								if(curve1 != null) {
									if(curve1.isString() && curve1.asString() == "stepped") {
										timeline2.curves[frameIndex4 * 19] = 1;
									} else if(curve1.isArray()) {
										timeline2.setCurve(frameIndex4,curve1.getFloat(0),curve1.getFloat(1),curve1.getFloat(2),curve1.getFloat(3));
									}
								}
								++frameIndex4;
								valueMap2 = valueMap2.get_next();
							}
							timelines.push(timeline2);
							duration = Math.max(duration,timeline2.frames[((timeline2.curves.length / 19 + 1 | 0) - 1) * 8]);
						} else {
							throw haxe_Exception.thrown(new spine_support_error_RuntimeException("Invalid timeline type for a slot: " + timelineName + " (" + slotMap.get_name() + ")"));
						}
						timelineMap = timelineMap.get_next();
					}
					slotMap = slotMap.get_next();
				}
				var boneMap = animationMap.getChild("bones");
				while(boneMap != null) {
					var bone = skeletonData.findBone(boneMap.get_name());
					if(bone == null) {
						throw haxe_Exception.thrown(new spine_support_utils_SerializationException("Bone not found: " + boneMap.get_name()));
					}
					var timelineMap1 = boneMap.get_child();
					while(timelineMap1 != null) {
						var timelineName1 = timelineMap1.get_name();
						if(timelineName1 == "rotate") {
							var timeline3 = new spine_RotateTimeline(timelineMap1.get_size());
							timeline3.boneIndex = bone.index;
							var frameIndex6 = 0;
							var valueMap3 = timelineMap1.get_child();
							while(valueMap3 != null) {
								var frameIndex7 = frameIndex6;
								var time3 = valueMap3.getFloat("time");
								var degrees = valueMap3.getFloat("angle");
								frameIndex7 <<= 1;
								timeline3.frames[frameIndex7] = time3;
								timeline3.frames[frameIndex7 + 1] = degrees;
								var curve2 = valueMap3.get("curve");
								if(curve2 != null) {
									if(curve2.isString() && curve2.asString() == "stepped") {
										timeline3.curves[frameIndex6 * 19] = 1;
									} else if(curve2.isArray()) {
										timeline3.setCurve(frameIndex6,curve2.getFloat(0),curve2.getFloat(1),curve2.getFloat(2),curve2.getFloat(3));
									}
								}
								++frameIndex6;
								valueMap3 = valueMap3.get_next();
							}
							timelines.push(timeline3);
							duration = Math.max(duration,timeline3.frames[((timeline3.curves.length / 19 + 1 | 0) - 1) * 2]);
						} else if(timelineName1 == "translate" || timelineName1 == "scale" || timelineName1 == "shear") {
							var timeline4 = null;
							var timelineScale = 1;
							if(timelineName1 == "scale") {
								timeline4 = new spine_ScaleTimeline(timelineMap1.get_size());
							} else if(timelineName1 == "shear") {
								timeline4 = new spine_ShearTimeline(timelineMap1.get_size());
							} else {
								timeline4 = new spine_TranslateTimeline(timelineMap1.get_size());
								timelineScale = scale;
							}
							timeline4.boneIndex = bone.index;
							var frameIndex8 = 0;
							var valueMap4 = timelineMap1.get_child();
							while(valueMap4 != null) {
								var x = valueMap4.getFloat("x",0);
								var y = valueMap4.getFloat("y",0);
								var frameIndex9 = frameIndex8;
								var time4 = valueMap4.getFloat("time");
								frameIndex9 *= 3;
								timeline4.frames[frameIndex9] = time4;
								timeline4.frames[frameIndex9 + 1] = x * timelineScale;
								timeline4.frames[frameIndex9 + 2] = y * timelineScale;
								var curve3 = valueMap4.get("curve");
								if(curve3 != null) {
									if(curve3.isString() && curve3.asString() == "stepped") {
										timeline4.curves[frameIndex8 * 19] = 1;
									} else if(curve3.isArray()) {
										timeline4.setCurve(frameIndex8,curve3.getFloat(0),curve3.getFloat(1),curve3.getFloat(2),curve3.getFloat(3));
									}
								}
								++frameIndex8;
								valueMap4 = valueMap4.get_next();
							}
							timelines.push(timeline4);
							duration = Math.max(duration,timeline4.frames[((timeline4.curves.length / 19 + 1 | 0) - 1) * 3]);
						} else {
							throw haxe_Exception.thrown(new spine_support_error_RuntimeException("Invalid timeline type for a bone: " + timelineName1 + " (" + boneMap.get_name() + ")"));
						}
						timelineMap1 = timelineMap1.get_next();
					}
					boneMap = boneMap.get_next();
				}
				var constraintMap = animationMap.getChild("ik");
				while(constraintMap != null) {
					var constraint = skeletonData.findIkConstraint(constraintMap.get_name());
					var timeline5 = new spine_IkConstraintTimeline(constraintMap.get_size());
					timeline5.ikConstraintIndex = skeletonData.ikConstraints.indexOf(constraint);
					var frameIndex10 = 0;
					var valueMap5 = constraintMap.get_child();
					while(valueMap5 != null) {
						var frameIndex11 = frameIndex10;
						var time5 = valueMap5.getFloat("time");
						var mix = valueMap5.getFloat("mix",1);
						var bendDirection = valueMap5.getBoolean("bendPositive",true) ? 1 : -1;
						frameIndex11 *= 3;
						timeline5.frames[frameIndex11] = time5;
						timeline5.frames[frameIndex11 + 1] = mix;
						timeline5.frames[frameIndex11 + 2] = bendDirection;
						var curve4 = valueMap5.get("curve");
						if(curve4 != null) {
							if(curve4.isString() && curve4.asString() == "stepped") {
								timeline5.curves[frameIndex10 * 19] = 1;
							} else if(curve4.isArray()) {
								timeline5.setCurve(frameIndex10,curve4.getFloat(0),curve4.getFloat(1),curve4.getFloat(2),curve4.getFloat(3));
							}
						}
						++frameIndex10;
						valueMap5 = valueMap5.get_next();
					}
					timelines.push(timeline5);
					duration = Math.max(duration,timeline5.frames[((timeline5.curves.length / 19 + 1 | 0) - 1) * 3]);
					constraintMap = constraintMap.get_next();
				}
				var constraintMap1 = animationMap.getChild("transform");
				while(constraintMap1 != null) {
					var constraint1 = skeletonData.findTransformConstraint(constraintMap1.get_name());
					var timeline6 = new spine_TransformConstraintTimeline(constraintMap1.get_size());
					timeline6.transformConstraintIndex = skeletonData.transformConstraints.indexOf(constraint1);
					var frameIndex12 = 0;
					var valueMap6 = constraintMap1.get_child();
					while(valueMap6 != null) {
						var frameIndex13 = frameIndex12;
						var time6 = valueMap6.getFloat("time");
						var rotateMix = valueMap6.getFloat("rotateMix",1);
						var translateMix = valueMap6.getFloat("translateMix",1);
						var scaleMix = valueMap6.getFloat("scaleMix",1);
						var shearMix = valueMap6.getFloat("shearMix",1);
						frameIndex13 *= 5;
						timeline6.frames[frameIndex13] = time6;
						timeline6.frames[frameIndex13 + 1] = rotateMix;
						timeline6.frames[frameIndex13 + 2] = translateMix;
						timeline6.frames[frameIndex13 + 3] = scaleMix;
						timeline6.frames[frameIndex13 + 4] = shearMix;
						var curve5 = valueMap6.get("curve");
						if(curve5 != null) {
							if(curve5.isString() && curve5.asString() == "stepped") {
								timeline6.curves[frameIndex12 * 19] = 1;
							} else if(curve5.isArray()) {
								timeline6.setCurve(frameIndex12,curve5.getFloat(0),curve5.getFloat(1),curve5.getFloat(2),curve5.getFloat(3));
							}
						}
						++frameIndex12;
						valueMap6 = valueMap6.get_next();
					}
					timelines.push(timeline6);
					duration = Math.max(duration,timeline6.frames[((timeline6.curves.length / 19 + 1 | 0) - 1) * 5]);
					constraintMap1 = constraintMap1.get_next();
				}
				var constraintMap2 = animationMap.getChild("paths");
				while(constraintMap2 != null) {
					var data = skeletonData.findPathConstraint(constraintMap2.get_name());
					if(data == null) {
						throw haxe_Exception.thrown(new spine_support_utils_SerializationException("Path constraint not found: " + constraintMap2.get_name()));
					}
					var index = skeletonData.pathConstraints.indexOf(data);
					var timelineMap2 = constraintMap2.get_child();
					while(timelineMap2 != null) {
						var timelineName2 = timelineMap2.get_name();
						if(timelineName2 == "position" || timelineName2 == "spacing") {
							var timeline7 = null;
							var timelineScale1 = 1;
							if(timelineName2 == "spacing") {
								timeline7 = new spine_PathConstraintSpacingTimeline(timelineMap2.get_size());
								if(data.spacingMode == 0 || data.spacingMode == 1) {
									timelineScale1 = scale;
								}
							} else {
								timeline7 = new spine_PathConstraintPositionTimeline(timelineMap2.get_size());
								if(data.positionMode == 0) {
									timelineScale1 = scale;
								}
							}
							timeline7.pathConstraintIndex = index;
							var frameIndex14 = 0;
							var valueMap7 = timelineMap2.get_child();
							while(valueMap7 != null) {
								var frameIndex15 = frameIndex14;
								var time7 = valueMap7.getFloat("time");
								var position = valueMap7.getFloat(timelineName2,0) * timelineScale1;
								frameIndex15 *= 2;
								timeline7.frames[frameIndex15] = time7;
								timeline7.frames[frameIndex15 + 1] = position;
								var curve6 = valueMap7.get("curve");
								if(curve6 != null) {
									if(curve6.isString() && curve6.asString() == "stepped") {
										timeline7.curves[frameIndex14 * 19] = 1;
									} else if(curve6.isArray()) {
										timeline7.setCurve(frameIndex14,curve6.getFloat(0),curve6.getFloat(1),curve6.getFloat(2),curve6.getFloat(3));
									}
								}
								++frameIndex14;
								valueMap7 = valueMap7.get_next();
							}
							timelines.push(timeline7);
							duration = Math.max(duration,timeline7.frames[((timeline7.curves.length / 19 + 1 | 0) - 1) * 2]);
						} else if(timelineName2 == "mix") {
							var timeline8 = new spine_PathConstraintMixTimeline(timelineMap2.get_size());
							timeline8.pathConstraintIndex = index;
							var frameIndex16 = 0;
							var valueMap8 = timelineMap2.get_child();
							while(valueMap8 != null) {
								var frameIndex17 = frameIndex16;
								var time8 = valueMap8.getFloat("time");
								var rotateMix1 = valueMap8.getFloat("rotateMix",1);
								var translateMix1 = valueMap8.getFloat("translateMix",1);
								frameIndex17 *= 3;
								timeline8.frames[frameIndex17] = time8;
								timeline8.frames[frameIndex17 + 1] = rotateMix1;
								timeline8.frames[frameIndex17 + 2] = translateMix1;
								var curve7 = valueMap8.get("curve");
								if(curve7 != null) {
									if(curve7.isString() && curve7.asString() == "stepped") {
										timeline8.curves[frameIndex16 * 19] = 1;
									} else if(curve7.isArray()) {
										timeline8.setCurve(frameIndex16,curve7.getFloat(0),curve7.getFloat(1),curve7.getFloat(2),curve7.getFloat(3));
									}
								}
								++frameIndex16;
								valueMap8 = valueMap8.get_next();
							}
							timelines.push(timeline8);
							duration = Math.max(duration,timeline8.frames[((timeline8.curves.length / 19 + 1 | 0) - 1) * 3]);
						}
						timelineMap2 = timelineMap2.get_next();
					}
					constraintMap2 = constraintMap2.get_next();
				}
				var deformMap = animationMap.getChild("deform");
				while(deformMap != null) {
					var skin = skeletonData.findSkin(deformMap.get_name());
					if(skin == null) {
						throw haxe_Exception.thrown(new spine_support_utils_SerializationException("Skin not found: " + deformMap.get_name()));
					}
					var slotMap1 = deformMap.get_child();
					while(slotMap1 != null) {
						var slot1 = skeletonData.findSlot(slotMap1.get_name());
						if(slot1 == null) {
							throw haxe_Exception.thrown(new spine_support_utils_SerializationException("Slot not found: " + slotMap1.get_name()));
						}
						var timelineMap3 = slotMap1.get_child();
						while(timelineMap3 != null) {
							var slotIndex = slot1.index;
							var name1 = timelineMap3.get_name();
							if(slotIndex < 0) {
								throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("slotIndex must be >= 0."));
							}
							var _this = skin.lookup;
							if(name1 == null) {
								throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("name cannot be null."));
							}
							_this.slotIndex = slotIndex;
							_this.name = name1;
							var hash = 0;
							var chr;
							var attachment;
							if(name1.length == 0) {
								attachment = hash;
							} else {
								var _g = 0;
								var _g1 = name1.length;
								while(_g < _g1) {
									var i = _g++;
									chr = HxOverrides.cca(name1,i);
									hash = (hash << 5) - hash + chr;
								}
								attachment = hash;
							}
							_this.hashCode = 31 * (31 + attachment) + slotIndex;
							var attachment1 = js_Boot.__cast(spine_support_utils_ObjectMap.get(skin.attachments,skin.lookup) , spine_attachments_VertexAttachment);
							if(attachment1 == null) {
								throw haxe_Exception.thrown(new spine_support_utils_SerializationException("Deform attachment not found: " + timelineMap3.get_name()));
							}
							var weighted = attachment1.bones != null;
							var vertices = attachment1.vertices;
							var deformLength = weighted ? vertices.length / 3 * 2 | 0 : vertices.length;
							var timeline9 = new spine_DeformTimeline(timelineMap3.get_size());
							timeline9.slotIndex = slot1.index;
							timeline9.attachment = attachment1;
							var frameIndex18 = 0;
							var valueMap9 = timelineMap3.get_child();
							while(valueMap9 != null) {
								var deform = null;
								var verticesValue = valueMap9.get("vertices");
								if(verticesValue == null) {
									if(weighted) {
										var length = deformLength;
										if(length == null) {
											length = 0;
										}
										var len = length | 0;
										var capacity = len != 0 ? len : 16;
										var this2 = [];
										var array = this2;
										if(length > 0) {
											var len1 = array.length;
											if(len1 > len) {
												array.splice(len,len - len1);
											} else if(len1 < len) {
												while(len1 < len) {
													array.push(0);
													++len1;
												}
											}
										}
										deform = array;
									} else {
										deform = vertices;
									}
								} else {
									var length1 = deformLength;
									if(length1 == null) {
										length1 = 0;
									}
									var len2 = length1 | 0;
									var capacity1 = len2 != 0 ? len2 : 16;
									var this3 = [];
									var array1 = this3;
									if(length1 > 0) {
										var len3 = array1.length;
										if(len3 > len2) {
											array1.splice(len2,len2 - len3);
										} else if(len3 < len2) {
											while(len3 < len2) {
												array1.push(0);
												++len3;
											}
										}
									}
									deform = array1;
									var start = valueMap9.getInt("offset",0);
									spine_support_utils_Array.copy(verticesValue.asFloatArray(),0,deform,start,verticesValue.get_size());
									if(scale != 1) {
										var i1 = start;
										var n = i1 + verticesValue.get_size();
										while(i1 < n) {
											deform[i1] *= scale;
											++i1;
										}
									}
									if(!weighted) {
										var i2 = 0;
										while(i2 < deformLength) {
											deform[i2] += vertices[i2];
											++i2;
										}
									}
								}
								var time9 = valueMap9.getFloat("time");
								timeline9.frames[frameIndex18] = time9;
								timeline9.frameVertices[frameIndex18] = deform;
								var curve8 = valueMap9.get("curve");
								if(curve8 != null) {
									if(curve8.isString() && curve8.asString() == "stepped") {
										timeline9.curves[frameIndex18 * 19] = 1;
									} else if(curve8.isArray()) {
										timeline9.setCurve(frameIndex18,curve8.getFloat(0),curve8.getFloat(1),curve8.getFloat(2),curve8.getFloat(3));
									}
								}
								++frameIndex18;
								valueMap9 = valueMap9.get_next();
							}
							timelines.push(timeline9);
							duration = Math.max(duration,timeline9.frames[(timeline9.curves.length / 19 + 1 | 0) - 1]);
							timelineMap3 = timelineMap3.get_next();
						}
						slotMap1 = slotMap1.get_next();
					}
					deformMap = deformMap.get_next();
				}
				var drawOrdersMap = animationMap.get("drawOrder");
				if(drawOrdersMap == null) {
					drawOrdersMap = animationMap.get("draworder");
				}
				if(drawOrdersMap != null) {
					var timeline10 = new spine_DrawOrderTimeline(drawOrdersMap.get_size());
					var slotCount = skeletonData.slots.length;
					var frameIndex19 = 0;
					var drawOrderMap = drawOrdersMap.get_child();
					while(drawOrderMap != null) {
						var drawOrder = null;
						var offsets = drawOrderMap.get("offsets");
						if(offsets != null) {
							var length2 = slotCount;
							if(length2 == null) {
								length2 = 0;
							}
							var len4 = length2 | 0;
							var capacity2 = len4 != 0 ? len4 : 16;
							var this4 = [];
							var array2 = this4;
							if(length2 != 0) {
								var len5 = array2.length;
								if(len5 > len4) {
									array2.splice(len4,len4 - len5);
								} else if(len5 < len4) {
									while(len5 < len4) {
										array2.push(0);
										++len5;
									}
								}
							}
							drawOrder = array2;
							var i3 = slotCount - 1;
							while(i3 >= 0) {
								drawOrder[i3] = -1;
								--i3;
							}
							var length3 = slotCount - offsets.get_size();
							if(length3 == null) {
								length3 = 0;
							}
							var len6 = length3 | 0;
							var capacity3 = len6 != 0 ? len6 : 16;
							var this5 = [];
							var array3 = this5;
							if(length3 != 0) {
								var len7 = array3.length;
								if(len7 > len6) {
									array3.splice(len6,len6 - len7);
								} else if(len7 < len6) {
									while(len7 < len6) {
										array3.push(0);
										++len7;
									}
								}
							}
							var unchanged = array3;
							var originalIndex = 0;
							var unchangedIndex = 0;
							var offsetMap = offsets.get_child();
							while(offsetMap != null) {
								var slot2 = skeletonData.findSlot(offsetMap.getString("slot"));
								if(slot2 == null) {
									throw haxe_Exception.thrown(new spine_support_utils_SerializationException("Slot not found: " + offsetMap.getString("slot")));
								}
								while(originalIndex != slot2.index) unchanged[unchangedIndex++] = originalIndex++;
								drawOrder[originalIndex++ + offsetMap.getInt("offset")] = originalIndex - 1;
								offsetMap = offsetMap.get_next();
							}
							while(originalIndex < slotCount) unchanged[unchangedIndex++] = originalIndex++;
							var i4 = slotCount - 1;
							while(i4 >= 0) {
								if(drawOrder[i4] == -1) {
									drawOrder[i4] = unchanged[--unchangedIndex];
								}
								--i4;
							}
						}
						var frameIndex20 = frameIndex19++;
						var time10 = drawOrderMap.getFloat("time");
						timeline10.frames[frameIndex20] = time10;
						timeline10.drawOrders[frameIndex20] = drawOrder;
						drawOrderMap = drawOrderMap.get_next();
					}
					timelines.push(timeline10);
					duration = Math.max(duration,timeline10.frames[timeline10.frames.length - 1]);
				}
				var eventsMap = animationMap.get("events");
				if(eventsMap != null) {
					var timeline11 = new spine_EventTimeline(eventsMap.get_size());
					var frameIndex21 = 0;
					var eventMap = eventsMap.get_child();
					while(eventMap != null) {
						var eventData = skeletonData.findEvent(eventMap.getString("name"));
						if(eventData == null) {
							throw haxe_Exception.thrown(new spine_support_utils_SerializationException("Event not found: " + eventMap.getString("name")));
						}
						var event = new spine_Event(eventMap.getFloat("time"),eventData);
						event.intValue = eventMap.getInt("int",eventData.intValue);
						event.floatValue = eventMap.getFloat("float",eventData.floatValue);
						event.stringValue = eventMap.getString("string",eventData.stringValue);
						var frameIndex22 = frameIndex21++;
						timeline11.frames[frameIndex22] = event.time;
						timeline11.events[frameIndex22] = event;
						eventMap = eventMap.get_next();
					}
					timelines.push(timeline11);
					duration = Math.max(duration,timeline11.frames[timeline11.frames.length - 1]);
				}
				skeletonData.animations.push(new spine_Animation(name,timelines,duration));
			} catch( _g2 ) {
				haxe_NativeStackTrace.lastError = _g2;
				var ex = haxe_Exception.caught(_g2).unwrap();
				throw haxe_Exception.thrown(new spine_support_utils_SerializationException("Error reading animation: " + animationMap.get_name(),ex));
			}
			animationMap = animationMap.get_next();
		}
		return skeletonData;
	}
	,readAttachment: function(map,skin,slotIndex,name,skeletonData) {
		var scale = this.scale;
		name = map.getString("name",name);
		var type = map.getString("type","region");
		var _continueAfterSwitch0 = false;
		while(true) {
			var _switchCond0;
			switch(type) {
			case "boundingbox":
				_switchCond0 = 1;
				break;
			case "clipping":
				_switchCond0 = 6;
				break;
			case "linkedmesh":
				_switchCond0 = 3;
				break;
			case "mesh":
				_switchCond0 = 2;
				break;
			case "path":
				_switchCond0 = 4;
				break;
			case "point":
				_switchCond0 = 5;
				break;
			case "region":
				_switchCond0 = 0;
				break;
			default:
				_switchCond0 = 0;
			}
			if(_switchCond0 == 0) {
				var path = map.getString("path",name);
				var region = this.attachmentLoader.newRegionAttachment(skin,name,path);
				if(region == null) {
					return null;
				}
				region.path = path;
				region.x = map.getFloat("x",0) * scale;
				region.y = map.getFloat("y",0) * scale;
				region.scaleX = map.getFloat("scaleX",1);
				region.scaleY = map.getFloat("scaleY",1);
				region.rotation = map.getFloat("rotation",0);
				region.width = map.getFloat("width") * scale;
				region.height = map.getFloat("height") * scale;
				var color = map.getString("color",null);
				if(color != null) {
					region.color.set(spine_support_graphics_Color.valueOf(color));
				}
				var width = region.width;
				var height = region.height;
				var localX2 = width / 2;
				var localY2 = height / 2;
				var localX = -localX2;
				var localY = -localY2;
				if(((region.region) instanceof spine_support_graphics_AtlasRegion)) {
					var region1 = js_Boot.__cast(region.region , spine_support_graphics_AtlasRegion);
					if(region1.rotate) {
						localX += region1.offsetX / region1.originalWidth * width;
						localY += region1.offsetY / region1.originalHeight * height;
						localX2 -= (region1.originalWidth - region1.offsetX - region1.packedHeight) / region1.originalWidth * width;
						localY2 -= (region1.originalHeight - region1.offsetY - region1.packedWidth) / region1.originalHeight * height;
					} else {
						localX += region1.offsetX / region1.originalWidth * width;
						localY += region1.offsetY / region1.originalHeight * height;
						localX2 -= (region1.originalWidth - region1.offsetX - region1.packedWidth) / region1.originalWidth * width;
						localY2 -= (region1.originalHeight - region1.offsetY - region1.packedHeight) / region1.originalHeight * height;
					}
				}
				var scaleX = region.scaleX;
				var scaleY = region.scaleY;
				localX *= scaleX;
				localY *= scaleY;
				localX2 *= scaleX;
				localY2 *= scaleY;
				var rotation = region.rotation;
				var cos = js_Boot.__cast(Math.cos(spine_support_math_MathUtils.degRad * rotation) , Float);
				var sin = js_Boot.__cast(Math.sin(spine_support_math_MathUtils.degRad * rotation) , Float);
				var x = region.x;
				var y = region.y;
				var localXCos = localX * cos + x;
				var localXSin = localX * sin;
				var localYCos = localY * cos + y;
				var localYSin = localY * sin;
				var localX2Cos = localX2 * cos + x;
				var localX2Sin = localX2 * sin;
				var localY2Cos = localY2 * cos + y;
				var localY2Sin = localY2 * sin;
				var offset = region.offset;
				offset[0] = localXCos - localYSin;
				offset[1] = localYCos + localXSin;
				offset[2] = localXCos - localY2Sin;
				offset[3] = localY2Cos + localXSin;
				offset[4] = localX2Cos - localY2Sin;
				offset[5] = localY2Cos + localX2Sin;
				offset[6] = localX2Cos - localYSin;
				offset[7] = localYCos + localX2Sin;
				return region;
			} else if(_switchCond0 == 1) {
				var box = this.attachmentLoader.newBoundingBoxAttachment(skin,name);
				if(box == null) {
					return null;
				}
				var verticesLength = map.getInt("vertexCount") << 1;
				box.worldVerticesLength = verticesLength;
				var vertices = map.require("vertices").asFloatArray();
				if(verticesLength == vertices.length) {
					if(this.scale != 1) {
						var i = 0;
						var n = vertices.length;
						while(i < n) {
							vertices[i] *= this.scale;
							++i;
						}
					}
					box.vertices = vertices;
				} else {
					var capacity = verticesLength * 3 * 3;
					var this1 = [];
					var weights = this1;
					var capacity1 = verticesLength * 3;
					var this2 = [];
					var bones = this2;
					var i1 = 0;
					var n1 = vertices.length;
					while(i1 < n1) {
						var boneCount = vertices[i1++] | 0;
						bones.push(boneCount);
						var nn = i1 + boneCount * 4;
						while(i1 < nn) {
							bones.push(vertices[i1] | 0);
							weights.push(vertices[i1 + 1] * this.scale);
							weights.push(vertices[i1 + 2] * this.scale);
							weights.push(vertices[i1 + 3]);
							i1 += 4;
						}
					}
					box.bones = bones;
					box.vertices = weights;
				}
				var color1 = map.getString("color",null);
				if(color1 != null) {
					box.color.set(spine_support_graphics_Color.valueOf(color1));
				}
				return box;
			} else if(_switchCond0 == 2) {
				var path1 = map.getString("path",name);
				var mesh = this.attachmentLoader.newMeshAttachment(skin,name,path1);
				if(mesh == null) {
					return null;
				}
				mesh.path = path1;
				var color2 = map.getString("color",null);
				if(color2 != null) {
					mesh.color.set(spine_support_graphics_Color.valueOf(color2));
				}
				mesh.width = map.getFloat("width",0) * scale;
				mesh.height = map.getFloat("height",0) * scale;
				var parent = map.getString("parent",null);
				if(parent != null) {
					mesh.inheritDeform = map.getBoolean("deform",true);
					this.linkedMeshes.push(new spine_LinkedMesh(mesh,map.getString("skin",null),slotIndex,parent));
					return mesh;
				}
				var uvs = map.require("uvs").asFloatArray();
				var verticesLength1 = uvs.length;
				mesh.worldVerticesLength = verticesLength1;
				var vertices1 = map.require("vertices").asFloatArray();
				if(verticesLength1 == vertices1.length) {
					if(this.scale != 1) {
						var i2 = 0;
						var n2 = vertices1.length;
						while(i2 < n2) {
							vertices1[i2] *= this.scale;
							++i2;
						}
					}
					mesh.vertices = vertices1;
				} else {
					var capacity2 = verticesLength1 * 3 * 3;
					var this3 = [];
					var weights1 = this3;
					var capacity3 = verticesLength1 * 3;
					var this4 = [];
					var bones1 = this4;
					var i3 = 0;
					var n3 = vertices1.length;
					while(i3 < n3) {
						var boneCount1 = vertices1[i3++] | 0;
						bones1.push(boneCount1);
						var nn1 = i3 + boneCount1 * 4;
						while(i3 < nn1) {
							bones1.push(vertices1[i3] | 0);
							weights1.push(vertices1[i3 + 1] * this.scale);
							weights1.push(vertices1[i3 + 2] * this.scale);
							weights1.push(vertices1[i3 + 3]);
							i3 += 4;
						}
					}
					mesh.bones = bones1;
					mesh.vertices = weights1;
				}
				mesh.triangles = map.require("triangles").asShortArray();
				mesh.regionUVs = uvs;
				var u = 0;
				var v = 0;
				var width1 = 0;
				var height1 = 0;
				if(mesh.region == null) {
					v = 0;
					u = v;
					height1 = 1;
					width1 = height1;
				} else {
					u = mesh.region.u;
					v = mesh.region.v;
					width1 = mesh.region.u2 - u;
					height1 = mesh.region.v2 - v;
				}
				var regionUVs = mesh.regionUVs;
				if(mesh.uvs == null || mesh.uvs.length != regionUVs.length) {
					var length = regionUVs.length;
					if(length == null) {
						length = 0;
					}
					var len = length | 0;
					var capacity4 = len != 0 ? len : 16;
					var this5 = [];
					var array = this5;
					if(length > 0) {
						var len1 = array.length;
						if(len1 > len) {
							array.splice(len,len - len1);
						} else if(len1 < len) {
							while(len1 < len) {
								array.push(0);
								++len1;
							}
						}
					}
					mesh.uvs = array;
				}
				var uvs1 = mesh.uvs;
				if(((mesh.region) instanceof spine_support_graphics_AtlasRegion) && (js_Boot.__cast(mesh.region , spine_support_graphics_AtlasRegion)).rotate) {
					var i4 = 0;
					var n4 = uvs1.length;
					while(i4 < n4) {
						uvs1[i4] = u + regionUVs[i4 + 1] * width1;
						uvs1[i4 + 1] = v + height1 - regionUVs[i4] * height1;
						i4 += 2;
					}
				} else {
					var i5 = 0;
					var n5 = uvs1.length;
					while(i5 < n5) {
						uvs1[i5] = u + regionUVs[i5] * width1;
						uvs1[i5 + 1] = v + regionUVs[i5 + 1] * height1;
						i5 += 2;
					}
				}
				if(map.has("hull")) {
					mesh.hullLength = map.require("hull").asInt() * 2;
				}
				if(map.has("edges")) {
					mesh.edges = map.require("edges").asShortArray();
				}
				return mesh;
			} else if(_switchCond0 == 3) {
				var path2 = map.getString("path",name);
				var mesh1 = this.attachmentLoader.newMeshAttachment(skin,name,path2);
				if(mesh1 == null) {
					return null;
				}
				mesh1.path = path2;
				var color3 = map.getString("color",null);
				if(color3 != null) {
					mesh1.color.set(spine_support_graphics_Color.valueOf(color3));
				}
				mesh1.width = map.getFloat("width",0) * scale;
				mesh1.height = map.getFloat("height",0) * scale;
				var parent1 = map.getString("parent",null);
				if(parent1 != null) {
					mesh1.inheritDeform = map.getBoolean("deform",true);
					this.linkedMeshes.push(new spine_LinkedMesh(mesh1,map.getString("skin",null),slotIndex,parent1));
					return mesh1;
				}
				var uvs2 = map.require("uvs").asFloatArray();
				var verticesLength2 = uvs2.length;
				mesh1.worldVerticesLength = verticesLength2;
				var vertices2 = map.require("vertices").asFloatArray();
				if(verticesLength2 == vertices2.length) {
					if(this.scale != 1) {
						var i6 = 0;
						var n6 = vertices2.length;
						while(i6 < n6) {
							vertices2[i6] *= this.scale;
							++i6;
						}
					}
					mesh1.vertices = vertices2;
				} else {
					var capacity5 = verticesLength2 * 3 * 3;
					var this6 = [];
					var weights2 = this6;
					var capacity6 = verticesLength2 * 3;
					var this7 = [];
					var bones2 = this7;
					var i7 = 0;
					var n7 = vertices2.length;
					while(i7 < n7) {
						var boneCount2 = vertices2[i7++] | 0;
						bones2.push(boneCount2);
						var nn2 = i7 + boneCount2 * 4;
						while(i7 < nn2) {
							bones2.push(vertices2[i7] | 0);
							weights2.push(vertices2[i7 + 1] * this.scale);
							weights2.push(vertices2[i7 + 2] * this.scale);
							weights2.push(vertices2[i7 + 3]);
							i7 += 4;
						}
					}
					mesh1.bones = bones2;
					mesh1.vertices = weights2;
				}
				mesh1.triangles = map.require("triangles").asShortArray();
				mesh1.regionUVs = uvs2;
				var u1 = 0;
				var v1 = 0;
				var width2 = 0;
				var height2 = 0;
				if(mesh1.region == null) {
					v1 = 0;
					u1 = v1;
					height2 = 1;
					width2 = height2;
				} else {
					u1 = mesh1.region.u;
					v1 = mesh1.region.v;
					width2 = mesh1.region.u2 - u1;
					height2 = mesh1.region.v2 - v1;
				}
				var regionUVs1 = mesh1.regionUVs;
				if(mesh1.uvs == null || mesh1.uvs.length != regionUVs1.length) {
					var length1 = regionUVs1.length;
					if(length1 == null) {
						length1 = 0;
					}
					var len2 = length1 | 0;
					var capacity7 = len2 != 0 ? len2 : 16;
					var this8 = [];
					var array1 = this8;
					if(length1 > 0) {
						var len3 = array1.length;
						if(len3 > len2) {
							array1.splice(len2,len2 - len3);
						} else if(len3 < len2) {
							while(len3 < len2) {
								array1.push(0);
								++len3;
							}
						}
					}
					mesh1.uvs = array1;
				}
				var uvs3 = mesh1.uvs;
				if(((mesh1.region) instanceof spine_support_graphics_AtlasRegion) && (js_Boot.__cast(mesh1.region , spine_support_graphics_AtlasRegion)).rotate) {
					var i8 = 0;
					var n8 = uvs3.length;
					while(i8 < n8) {
						uvs3[i8] = u1 + regionUVs1[i8 + 1] * width2;
						uvs3[i8 + 1] = v1 + height2 - regionUVs1[i8] * height2;
						i8 += 2;
					}
				} else {
					var i9 = 0;
					var n9 = uvs3.length;
					while(i9 < n9) {
						uvs3[i9] = u1 + regionUVs1[i9] * width2;
						uvs3[i9 + 1] = v1 + regionUVs1[i9 + 1] * height2;
						i9 += 2;
					}
				}
				if(map.has("hull")) {
					mesh1.hullLength = map.require("hull").asInt() * 2;
				}
				if(map.has("edges")) {
					mesh1.edges = map.require("edges").asShortArray();
				}
				return mesh1;
			} else if(_switchCond0 == 4) {
				var path3 = this.attachmentLoader.newPathAttachment(skin,name);
				if(path3 == null) {
					return null;
				}
				path3.closed = map.getBoolean("closed",false);
				path3.constantSpeed = map.getBoolean("constantSpeed",true);
				var vertexCount = map.getInt("vertexCount");
				var verticesLength3 = vertexCount << 1;
				path3.worldVerticesLength = verticesLength3;
				var vertices3 = map.require("vertices").asFloatArray();
				if(verticesLength3 == vertices3.length) {
					if(this.scale != 1) {
						var i10 = 0;
						var n10 = vertices3.length;
						while(i10 < n10) {
							vertices3[i10] *= this.scale;
							++i10;
						}
					}
					path3.vertices = vertices3;
				} else {
					var capacity8 = verticesLength3 * 3 * 3;
					var this9 = [];
					var weights3 = this9;
					var capacity9 = verticesLength3 * 3;
					var this10 = [];
					var bones3 = this10;
					var i11 = 0;
					var n11 = vertices3.length;
					while(i11 < n11) {
						var boneCount3 = vertices3[i11++] | 0;
						bones3.push(boneCount3);
						var nn3 = i11 + boneCount3 * 4;
						while(i11 < nn3) {
							bones3.push(vertices3[i11] | 0);
							weights3.push(vertices3[i11 + 1] * this.scale);
							weights3.push(vertices3[i11 + 2] * this.scale);
							weights3.push(vertices3[i11 + 3]);
							i11 += 4;
						}
					}
					path3.bones = bones3;
					path3.vertices = weights3;
				}
				var length2 = vertexCount / 3;
				if(length2 == null) {
					length2 = 0;
				}
				var len4 = length2 | 0;
				var capacity10 = len4 != 0 ? len4 : 16;
				var this11 = [];
				var array2 = this11;
				if(length2 > 0) {
					var len5 = array2.length;
					if(len5 > len4) {
						array2.splice(len4,len4 - len5);
					} else if(len5 < len4) {
						while(len5 < len4) {
							array2.push(0);
							++len5;
						}
					}
				}
				var lengths = array2;
				var i12 = 0;
				var curves = map.require("lengths").get_child();
				while(curves != null) {
					lengths[i12++] = curves.asFloat() * scale;
					curves = curves.get_next();
				}
				path3.lengths = lengths;
				var color4 = map.getString("color",null);
				if(color4 != null) {
					path3.color.set(spine_support_graphics_Color.valueOf(color4));
				}
				return path3;
			} else if(_switchCond0 == 5) {
				var point = this.attachmentLoader.newPointAttachment(skin,name);
				if(point == null) {
					return null;
				}
				point.x = map.getFloat("x",0) * scale;
				point.y = map.getFloat("y",0) * scale;
				point.rotation = map.getFloat("rotation",0);
				var color5 = map.getString("color",null);
				if(color5 != null) {
					point.color.set(spine_support_graphics_Color.valueOf(color5));
				}
				return point;
			} else if(_switchCond0 == 6) {
				var clip = this.attachmentLoader.newClippingAttachment(skin,name);
				if(clip == null) {
					return null;
				}
				var end = map.getString("end",null);
				if(end != null) {
					var slot = skeletonData.findSlot(end);
					if(slot == null) {
						throw haxe_Exception.thrown(new spine_support_utils_SerializationException("Clipping end slot not found: " + end));
					}
					clip.endSlot = slot;
				}
				var verticesLength4 = map.getInt("vertexCount") << 1;
				clip.worldVerticesLength = verticesLength4;
				var vertices4 = map.require("vertices").asFloatArray();
				if(verticesLength4 == vertices4.length) {
					if(this.scale != 1) {
						var i13 = 0;
						var n12 = vertices4.length;
						while(i13 < n12) {
							vertices4[i13] *= this.scale;
							++i13;
						}
					}
					clip.vertices = vertices4;
				} else {
					var capacity11 = verticesLength4 * 3 * 3;
					var this12 = [];
					var weights4 = this12;
					var capacity12 = verticesLength4 * 3;
					var this13 = [];
					var bones4 = this13;
					var i14 = 0;
					var n13 = vertices4.length;
					while(i14 < n13) {
						var boneCount4 = vertices4[i14++] | 0;
						bones4.push(boneCount4);
						var nn4 = i14 + boneCount4 * 4;
						while(i14 < nn4) {
							bones4.push(vertices4[i14] | 0);
							weights4.push(vertices4[i14 + 1] * this.scale);
							weights4.push(vertices4[i14 + 2] * this.scale);
							weights4.push(vertices4[i14 + 3]);
							i14 += 4;
						}
					}
					clip.bones = bones4;
					clip.vertices = weights4;
				}
				var color6 = map.getString("color",null);
				if(color6 != null) {
					clip.color.set(spine_support_graphics_Color.valueOf(color6));
				}
				return clip;
			}
			break;
		}
		return null;
	}
	,readVertices: function(map,attachment,verticesLength) {
		attachment.worldVerticesLength = verticesLength;
		var vertices = map.require("vertices").asFloatArray();
		if(verticesLength == vertices.length) {
			if(this.scale != 1) {
				var i = 0;
				var n = vertices.length;
				while(i < n) {
					vertices[i] *= this.scale;
					++i;
				}
			}
			attachment.vertices = vertices;
			return;
		}
		var capacity = verticesLength * 3 * 3;
		var this1 = [];
		var weights = this1;
		var capacity = verticesLength * 3;
		var this1 = [];
		var bones = this1;
		var i = 0;
		var n = vertices.length;
		while(i < n) {
			var boneCount = vertices[i++] | 0;
			bones.push(boneCount);
			var nn = i + boneCount * 4;
			while(i < nn) {
				bones.push(vertices[i] | 0);
				weights.push(vertices[i + 1] * this.scale);
				weights.push(vertices[i + 2] * this.scale);
				weights.push(vertices[i + 3]);
				i += 4;
			}
		}
		attachment.bones = bones;
		attachment.vertices = weights;
	}
	,readAnimation: function(map,name,skeletonData) {
		var scale = this.scale;
		var this1 = [];
		var timelines = this1;
		var duration = 0;
		var slotMap = map.getChild("slots");
		while(slotMap != null) {
			var slot = skeletonData.findSlot(slotMap.get_name());
			if(slot == null) {
				throw haxe_Exception.thrown(new spine_support_utils_SerializationException("Slot not found: " + slotMap.get_name()));
			}
			var timelineMap = slotMap.get_child();
			while(timelineMap != null) {
				var timelineName = timelineMap.get_name();
				if(timelineName == "attachment") {
					var timeline = new spine_AttachmentTimeline(timelineMap.get_size());
					timeline.slotIndex = slot.index;
					var frameIndex = 0;
					var valueMap = timelineMap.get_child();
					while(valueMap != null) {
						var frameIndex1 = frameIndex++;
						var time = valueMap.getFloat("time");
						var attachmentName = valueMap.getString("name");
						timeline.frames[frameIndex1] = time;
						timeline.attachmentNames[frameIndex1] = attachmentName;
						valueMap = valueMap.get_next();
					}
					timelines.push(timeline);
					duration = Math.max(duration,timeline.frames[timeline.frames.length - 1]);
				} else if(timelineName == "color") {
					var timeline1 = new spine_ColorTimeline(timelineMap.get_size());
					timeline1.slotIndex = slot.index;
					var frameIndex2 = 0;
					var valueMap1 = timelineMap.get_child();
					while(valueMap1 != null) {
						var color = spine_support_graphics_Color.valueOf(valueMap1.getString("color"));
						var frameIndex3 = frameIndex2;
						var time1 = valueMap1.getFloat("time");
						frameIndex3 *= 5;
						timeline1.frames[frameIndex3] = time1;
						timeline1.frames[frameIndex3 + 1] = color.r;
						timeline1.frames[frameIndex3 + 2] = color.g;
						timeline1.frames[frameIndex3 + 3] = color.b;
						timeline1.frames[frameIndex3 + 4] = color.a;
						var curve = valueMap1.get("curve");
						if(curve != null) {
							if(curve.isString() && curve.asString() == "stepped") {
								timeline1.curves[frameIndex2 * 19] = 1;
							} else if(curve.isArray()) {
								timeline1.setCurve(frameIndex2,curve.getFloat(0),curve.getFloat(1),curve.getFloat(2),curve.getFloat(3));
							}
						}
						++frameIndex2;
						valueMap1 = valueMap1.get_next();
					}
					timelines.push(timeline1);
					duration = Math.max(duration,timeline1.frames[((timeline1.curves.length / 19 + 1 | 0) - 1) * 5]);
				} else if(timelineName == "twoColor") {
					var timeline2 = new spine_TwoColorTimeline(timelineMap.get_size());
					timeline2.slotIndex = slot.index;
					var frameIndex4 = 0;
					var valueMap2 = timelineMap.get_child();
					while(valueMap2 != null) {
						var light = spine_support_graphics_Color.valueOf(valueMap2.getString("light"));
						var dark = spine_support_graphics_Color.valueOf(valueMap2.getString("dark"));
						var frameIndex5 = frameIndex4;
						var time2 = valueMap2.getFloat("time");
						frameIndex5 *= 8;
						timeline2.frames[frameIndex5] = time2;
						timeline2.frames[frameIndex5 + 1] = light.r;
						timeline2.frames[frameIndex5 + 2] = light.g;
						timeline2.frames[frameIndex5 + 3] = light.b;
						timeline2.frames[frameIndex5 + 4] = light.a;
						timeline2.frames[frameIndex5 + 5] = dark.r;
						timeline2.frames[frameIndex5 + 6] = dark.g;
						timeline2.frames[frameIndex5 + 7] = dark.b;
						var curve1 = valueMap2.get("curve");
						if(curve1 != null) {
							if(curve1.isString() && curve1.asString() == "stepped") {
								timeline2.curves[frameIndex4 * 19] = 1;
							} else if(curve1.isArray()) {
								timeline2.setCurve(frameIndex4,curve1.getFloat(0),curve1.getFloat(1),curve1.getFloat(2),curve1.getFloat(3));
							}
						}
						++frameIndex4;
						valueMap2 = valueMap2.get_next();
					}
					timelines.push(timeline2);
					duration = Math.max(duration,timeline2.frames[((timeline2.curves.length / 19 + 1 | 0) - 1) * 8]);
				} else {
					throw haxe_Exception.thrown(new spine_support_error_RuntimeException("Invalid timeline type for a slot: " + timelineName + " (" + slotMap.get_name() + ")"));
				}
				timelineMap = timelineMap.get_next();
			}
			slotMap = slotMap.get_next();
		}
		var boneMap = map.getChild("bones");
		while(boneMap != null) {
			var bone = skeletonData.findBone(boneMap.get_name());
			if(bone == null) {
				throw haxe_Exception.thrown(new spine_support_utils_SerializationException("Bone not found: " + boneMap.get_name()));
			}
			var timelineMap = boneMap.get_child();
			while(timelineMap != null) {
				var timelineName = timelineMap.get_name();
				if(timelineName == "rotate") {
					var timeline = new spine_RotateTimeline(timelineMap.get_size());
					timeline.boneIndex = bone.index;
					var frameIndex = 0;
					var valueMap = timelineMap.get_child();
					while(valueMap != null) {
						var frameIndex1 = frameIndex;
						var time = valueMap.getFloat("time");
						var degrees = valueMap.getFloat("angle");
						frameIndex1 <<= 1;
						timeline.frames[frameIndex1] = time;
						timeline.frames[frameIndex1 + 1] = degrees;
						var curve = valueMap.get("curve");
						if(curve != null) {
							if(curve.isString() && curve.asString() == "stepped") {
								timeline.curves[frameIndex * 19] = 1;
							} else if(curve.isArray()) {
								timeline.setCurve(frameIndex,curve.getFloat(0),curve.getFloat(1),curve.getFloat(2),curve.getFloat(3));
							}
						}
						++frameIndex;
						valueMap = valueMap.get_next();
					}
					timelines.push(timeline);
					duration = Math.max(duration,timeline.frames[((timeline.curves.length / 19 + 1 | 0) - 1) * 2]);
				} else if(timelineName == "translate" || timelineName == "scale" || timelineName == "shear") {
					var timeline1 = null;
					var timelineScale = 1;
					if(timelineName == "scale") {
						timeline1 = new spine_ScaleTimeline(timelineMap.get_size());
					} else if(timelineName == "shear") {
						timeline1 = new spine_ShearTimeline(timelineMap.get_size());
					} else {
						timeline1 = new spine_TranslateTimeline(timelineMap.get_size());
						timelineScale = scale;
					}
					timeline1.boneIndex = bone.index;
					var frameIndex2 = 0;
					var valueMap1 = timelineMap.get_child();
					while(valueMap1 != null) {
						var x = valueMap1.getFloat("x",0);
						var y = valueMap1.getFloat("y",0);
						var frameIndex3 = frameIndex2;
						var time1 = valueMap1.getFloat("time");
						frameIndex3 *= 3;
						timeline1.frames[frameIndex3] = time1;
						timeline1.frames[frameIndex3 + 1] = x * timelineScale;
						timeline1.frames[frameIndex3 + 2] = y * timelineScale;
						var curve1 = valueMap1.get("curve");
						if(curve1 != null) {
							if(curve1.isString() && curve1.asString() == "stepped") {
								timeline1.curves[frameIndex2 * 19] = 1;
							} else if(curve1.isArray()) {
								timeline1.setCurve(frameIndex2,curve1.getFloat(0),curve1.getFloat(1),curve1.getFloat(2),curve1.getFloat(3));
							}
						}
						++frameIndex2;
						valueMap1 = valueMap1.get_next();
					}
					timelines.push(timeline1);
					duration = Math.max(duration,timeline1.frames[((timeline1.curves.length / 19 + 1 | 0) - 1) * 3]);
				} else {
					throw haxe_Exception.thrown(new spine_support_error_RuntimeException("Invalid timeline type for a bone: " + timelineName + " (" + boneMap.get_name() + ")"));
				}
				timelineMap = timelineMap.get_next();
			}
			boneMap = boneMap.get_next();
		}
		var constraintMap = map.getChild("ik");
		while(constraintMap != null) {
			var constraint = skeletonData.findIkConstraint(constraintMap.get_name());
			var timeline = new spine_IkConstraintTimeline(constraintMap.get_size());
			timeline.ikConstraintIndex = skeletonData.ikConstraints.indexOf(constraint);
			var frameIndex = 0;
			var valueMap = constraintMap.get_child();
			while(valueMap != null) {
				var frameIndex1 = frameIndex;
				var time = valueMap.getFloat("time");
				var mix = valueMap.getFloat("mix",1);
				var bendDirection = valueMap.getBoolean("bendPositive",true) ? 1 : -1;
				frameIndex1 *= 3;
				timeline.frames[frameIndex1] = time;
				timeline.frames[frameIndex1 + 1] = mix;
				timeline.frames[frameIndex1 + 2] = bendDirection;
				var curve = valueMap.get("curve");
				if(curve != null) {
					if(curve.isString() && curve.asString() == "stepped") {
						timeline.curves[frameIndex * 19] = 1;
					} else if(curve.isArray()) {
						timeline.setCurve(frameIndex,curve.getFloat(0),curve.getFloat(1),curve.getFloat(2),curve.getFloat(3));
					}
				}
				++frameIndex;
				valueMap = valueMap.get_next();
			}
			timelines.push(timeline);
			duration = Math.max(duration,timeline.frames[((timeline.curves.length / 19 + 1 | 0) - 1) * 3]);
			constraintMap = constraintMap.get_next();
		}
		var constraintMap = map.getChild("transform");
		while(constraintMap != null) {
			var constraint = skeletonData.findTransformConstraint(constraintMap.get_name());
			var timeline = new spine_TransformConstraintTimeline(constraintMap.get_size());
			timeline.transformConstraintIndex = skeletonData.transformConstraints.indexOf(constraint);
			var frameIndex = 0;
			var valueMap = constraintMap.get_child();
			while(valueMap != null) {
				var frameIndex1 = frameIndex;
				var time = valueMap.getFloat("time");
				var rotateMix = valueMap.getFloat("rotateMix",1);
				var translateMix = valueMap.getFloat("translateMix",1);
				var scaleMix = valueMap.getFloat("scaleMix",1);
				var shearMix = valueMap.getFloat("shearMix",1);
				frameIndex1 *= 5;
				timeline.frames[frameIndex1] = time;
				timeline.frames[frameIndex1 + 1] = rotateMix;
				timeline.frames[frameIndex1 + 2] = translateMix;
				timeline.frames[frameIndex1 + 3] = scaleMix;
				timeline.frames[frameIndex1 + 4] = shearMix;
				var curve = valueMap.get("curve");
				if(curve != null) {
					if(curve.isString() && curve.asString() == "stepped") {
						timeline.curves[frameIndex * 19] = 1;
					} else if(curve.isArray()) {
						timeline.setCurve(frameIndex,curve.getFloat(0),curve.getFloat(1),curve.getFloat(2),curve.getFloat(3));
					}
				}
				++frameIndex;
				valueMap = valueMap.get_next();
			}
			timelines.push(timeline);
			duration = Math.max(duration,timeline.frames[((timeline.curves.length / 19 + 1 | 0) - 1) * 5]);
			constraintMap = constraintMap.get_next();
		}
		var constraintMap = map.getChild("paths");
		while(constraintMap != null) {
			var data = skeletonData.findPathConstraint(constraintMap.get_name());
			if(data == null) {
				throw haxe_Exception.thrown(new spine_support_utils_SerializationException("Path constraint not found: " + constraintMap.get_name()));
			}
			var index = skeletonData.pathConstraints.indexOf(data);
			var timelineMap = constraintMap.get_child();
			while(timelineMap != null) {
				var timelineName = timelineMap.get_name();
				if(timelineName == "position" || timelineName == "spacing") {
					var timeline = null;
					var timelineScale = 1;
					if(timelineName == "spacing") {
						timeline = new spine_PathConstraintSpacingTimeline(timelineMap.get_size());
						if(data.spacingMode == 0 || data.spacingMode == 1) {
							timelineScale = scale;
						}
					} else {
						timeline = new spine_PathConstraintPositionTimeline(timelineMap.get_size());
						if(data.positionMode == 0) {
							timelineScale = scale;
						}
					}
					timeline.pathConstraintIndex = index;
					var frameIndex = 0;
					var valueMap = timelineMap.get_child();
					while(valueMap != null) {
						var frameIndex1 = frameIndex;
						var time = valueMap.getFloat("time");
						var position = valueMap.getFloat(timelineName,0) * timelineScale;
						frameIndex1 *= 2;
						timeline.frames[frameIndex1] = time;
						timeline.frames[frameIndex1 + 1] = position;
						var curve = valueMap.get("curve");
						if(curve != null) {
							if(curve.isString() && curve.asString() == "stepped") {
								timeline.curves[frameIndex * 19] = 1;
							} else if(curve.isArray()) {
								timeline.setCurve(frameIndex,curve.getFloat(0),curve.getFloat(1),curve.getFloat(2),curve.getFloat(3));
							}
						}
						++frameIndex;
						valueMap = valueMap.get_next();
					}
					timelines.push(timeline);
					duration = Math.max(duration,timeline.frames[((timeline.curves.length / 19 + 1 | 0) - 1) * 2]);
				} else if(timelineName == "mix") {
					var timeline1 = new spine_PathConstraintMixTimeline(timelineMap.get_size());
					timeline1.pathConstraintIndex = index;
					var frameIndex2 = 0;
					var valueMap1 = timelineMap.get_child();
					while(valueMap1 != null) {
						var frameIndex3 = frameIndex2;
						var time1 = valueMap1.getFloat("time");
						var rotateMix = valueMap1.getFloat("rotateMix",1);
						var translateMix = valueMap1.getFloat("translateMix",1);
						frameIndex3 *= 3;
						timeline1.frames[frameIndex3] = time1;
						timeline1.frames[frameIndex3 + 1] = rotateMix;
						timeline1.frames[frameIndex3 + 2] = translateMix;
						var curve1 = valueMap1.get("curve");
						if(curve1 != null) {
							if(curve1.isString() && curve1.asString() == "stepped") {
								timeline1.curves[frameIndex2 * 19] = 1;
							} else if(curve1.isArray()) {
								timeline1.setCurve(frameIndex2,curve1.getFloat(0),curve1.getFloat(1),curve1.getFloat(2),curve1.getFloat(3));
							}
						}
						++frameIndex2;
						valueMap1 = valueMap1.get_next();
					}
					timelines.push(timeline1);
					duration = Math.max(duration,timeline1.frames[((timeline1.curves.length / 19 + 1 | 0) - 1) * 3]);
				}
				timelineMap = timelineMap.get_next();
			}
			constraintMap = constraintMap.get_next();
		}
		var deformMap = map.getChild("deform");
		while(deformMap != null) {
			var skin = skeletonData.findSkin(deformMap.get_name());
			if(skin == null) {
				throw haxe_Exception.thrown(new spine_support_utils_SerializationException("Skin not found: " + deformMap.get_name()));
			}
			var slotMap = deformMap.get_child();
			while(slotMap != null) {
				var slot = skeletonData.findSlot(slotMap.get_name());
				if(slot == null) {
					throw haxe_Exception.thrown(new spine_support_utils_SerializationException("Slot not found: " + slotMap.get_name()));
				}
				var timelineMap = slotMap.get_child();
				while(timelineMap != null) {
					var slotIndex = slot.index;
					var name1 = timelineMap.get_name();
					if(slotIndex < 0) {
						throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("slotIndex must be >= 0."));
					}
					var _this = skin.lookup;
					if(name1 == null) {
						throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("name cannot be null."));
					}
					_this.slotIndex = slotIndex;
					_this.name = name1;
					var hash = 0;
					var chr;
					var attachment;
					if(name1.length == 0) {
						attachment = hash;
					} else {
						var _g = 0;
						var _g1 = name1.length;
						while(_g < _g1) {
							var i = _g++;
							chr = HxOverrides.cca(name1,i);
							hash = (hash << 5) - hash + chr;
						}
						attachment = hash;
					}
					_this.hashCode = 31 * (31 + attachment) + slotIndex;
					var attachment1 = js_Boot.__cast(spine_support_utils_ObjectMap.get(skin.attachments,skin.lookup) , spine_attachments_VertexAttachment);
					if(attachment1 == null) {
						throw haxe_Exception.thrown(new spine_support_utils_SerializationException("Deform attachment not found: " + timelineMap.get_name()));
					}
					var weighted = attachment1.bones != null;
					var vertices = attachment1.vertices;
					var deformLength = weighted ? vertices.length / 3 * 2 | 0 : vertices.length;
					var timeline = new spine_DeformTimeline(timelineMap.get_size());
					timeline.slotIndex = slot.index;
					timeline.attachment = attachment1;
					var frameIndex = 0;
					var valueMap = timelineMap.get_child();
					while(valueMap != null) {
						var deform = null;
						var verticesValue = valueMap.get("vertices");
						if(verticesValue == null) {
							if(weighted) {
								var length = deformLength;
								if(length == null) {
									length = 0;
								}
								var len = length | 0;
								var capacity = len != 0 ? len : 16;
								var this1 = [];
								var array = this1;
								if(length > 0) {
									var len1 = array.length;
									if(len1 > len) {
										array.splice(len,len - len1);
									} else if(len1 < len) {
										while(len1 < len) {
											array.push(0);
											++len1;
										}
									}
								}
								deform = array;
							} else {
								deform = vertices;
							}
						} else {
							var length1 = deformLength;
							if(length1 == null) {
								length1 = 0;
							}
							var len2 = length1 | 0;
							var capacity1 = len2 != 0 ? len2 : 16;
							var this2 = [];
							var array1 = this2;
							if(length1 > 0) {
								var len3 = array1.length;
								if(len3 > len2) {
									array1.splice(len2,len2 - len3);
								} else if(len3 < len2) {
									while(len3 < len2) {
										array1.push(0);
										++len3;
									}
								}
							}
							deform = array1;
							var start = valueMap.getInt("offset",0);
							spine_support_utils_Array.copy(verticesValue.asFloatArray(),0,deform,start,verticesValue.get_size());
							if(scale != 1) {
								var i1 = start;
								var n = i1 + verticesValue.get_size();
								while(i1 < n) {
									deform[i1] *= scale;
									++i1;
								}
							}
							if(!weighted) {
								var i2 = 0;
								while(i2 < deformLength) {
									deform[i2] += vertices[i2];
									++i2;
								}
							}
						}
						var time = valueMap.getFloat("time");
						timeline.frames[frameIndex] = time;
						timeline.frameVertices[frameIndex] = deform;
						var curve = valueMap.get("curve");
						if(curve != null) {
							if(curve.isString() && curve.asString() == "stepped") {
								timeline.curves[frameIndex * 19] = 1;
							} else if(curve.isArray()) {
								timeline.setCurve(frameIndex,curve.getFloat(0),curve.getFloat(1),curve.getFloat(2),curve.getFloat(3));
							}
						}
						++frameIndex;
						valueMap = valueMap.get_next();
					}
					timelines.push(timeline);
					duration = Math.max(duration,timeline.frames[(timeline.curves.length / 19 + 1 | 0) - 1]);
					timelineMap = timelineMap.get_next();
				}
				slotMap = slotMap.get_next();
			}
			deformMap = deformMap.get_next();
		}
		var drawOrdersMap = map.get("drawOrder");
		if(drawOrdersMap == null) {
			drawOrdersMap = map.get("draworder");
		}
		if(drawOrdersMap != null) {
			var timeline = new spine_DrawOrderTimeline(drawOrdersMap.get_size());
			var slotCount = skeletonData.slots.length;
			var frameIndex = 0;
			var drawOrderMap = drawOrdersMap.get_child();
			while(drawOrderMap != null) {
				var drawOrder = null;
				var offsets = drawOrderMap.get("offsets");
				if(offsets != null) {
					var length = slotCount;
					if(length == null) {
						length = 0;
					}
					var len = length | 0;
					var capacity = len != 0 ? len : 16;
					var this1 = [];
					var array = this1;
					if(length != 0) {
						var len1 = array.length;
						if(len1 > len) {
							array.splice(len,len - len1);
						} else if(len1 < len) {
							while(len1 < len) {
								array.push(0);
								++len1;
							}
						}
					}
					drawOrder = array;
					var i = slotCount - 1;
					while(i >= 0) {
						drawOrder[i] = -1;
						--i;
					}
					var length1 = slotCount - offsets.get_size();
					if(length1 == null) {
						length1 = 0;
					}
					var len2 = length1 | 0;
					var capacity1 = len2 != 0 ? len2 : 16;
					var this2 = [];
					var array1 = this2;
					if(length1 != 0) {
						var len3 = array1.length;
						if(len3 > len2) {
							array1.splice(len2,len2 - len3);
						} else if(len3 < len2) {
							while(len3 < len2) {
								array1.push(0);
								++len3;
							}
						}
					}
					var unchanged = array1;
					var originalIndex = 0;
					var unchangedIndex = 0;
					var offsetMap = offsets.get_child();
					while(offsetMap != null) {
						var slot = skeletonData.findSlot(offsetMap.getString("slot"));
						if(slot == null) {
							throw haxe_Exception.thrown(new spine_support_utils_SerializationException("Slot not found: " + offsetMap.getString("slot")));
						}
						while(originalIndex != slot.index) unchanged[unchangedIndex++] = originalIndex++;
						drawOrder[originalIndex++ + offsetMap.getInt("offset")] = originalIndex - 1;
						offsetMap = offsetMap.get_next();
					}
					while(originalIndex < slotCount) unchanged[unchangedIndex++] = originalIndex++;
					var i1 = slotCount - 1;
					while(i1 >= 0) {
						if(drawOrder[i1] == -1) {
							drawOrder[i1] = unchanged[--unchangedIndex];
						}
						--i1;
					}
				}
				var frameIndex1 = frameIndex++;
				var time = drawOrderMap.getFloat("time");
				timeline.frames[frameIndex1] = time;
				timeline.drawOrders[frameIndex1] = drawOrder;
				drawOrderMap = drawOrderMap.get_next();
			}
			timelines.push(timeline);
			duration = Math.max(duration,timeline.frames[timeline.frames.length - 1]);
		}
		var eventsMap = map.get("events");
		if(eventsMap != null) {
			var timeline = new spine_EventTimeline(eventsMap.get_size());
			var frameIndex = 0;
			var eventMap = eventsMap.get_child();
			while(eventMap != null) {
				var eventData = skeletonData.findEvent(eventMap.getString("name"));
				if(eventData == null) {
					throw haxe_Exception.thrown(new spine_support_utils_SerializationException("Event not found: " + eventMap.getString("name")));
				}
				var event = new spine_Event(eventMap.getFloat("time"),eventData);
				event.intValue = eventMap.getInt("int",eventData.intValue);
				event.floatValue = eventMap.getFloat("float",eventData.floatValue);
				event.stringValue = eventMap.getString("string",eventData.stringValue);
				var frameIndex1 = frameIndex++;
				timeline.frames[frameIndex1] = event.time;
				timeline.events[frameIndex1] = event;
				eventMap = eventMap.get_next();
			}
			timelines.push(timeline);
			duration = Math.max(duration,timeline.frames[timeline.frames.length - 1]);
		}
		skeletonData.animations.push(new spine_Animation(name,timelines,duration));
	}
	,readCurve: function(map,timeline,frameIndex) {
		var curve = map.get("curve");
		if(curve == null) {
			return;
		}
		if(curve.isString() && curve.asString() == "stepped") {
			timeline.curves[frameIndex * 19] = 1;
		} else if(curve.isArray()) {
			timeline.setCurve(frameIndex,curve.getFloat(0),curve.getFloat(1),curve.getFloat(2),curve.getFloat(3));
		}
	}
	,__class__: spine_SkeletonJson
};
var spine_LinkedMesh = function(mesh,skin,slotIndex,parent) {
	this.slotIndex = 0;
	this.skin = null;
	this.mesh = mesh;
	this.skin = skin;
	this.slotIndex = slotIndex;
	this.parent = parent;
};
$hxClasses["spine.LinkedMesh"] = spine_LinkedMesh;
spine_LinkedMesh.__name__ = "spine.LinkedMesh";
spine_LinkedMesh.prototype = {
	parent: null
	,skin: null
	,slotIndex: null
	,mesh: null
	,__class__: spine_LinkedMesh
};
var spine_Skin = function(name) {
	this.keyPool = new spine__$Skin_KeyPool(64);
	this.lookup = new spine_Key();
	this.attachments = new haxe_ds_IntMap();
	if(name == null) {
		throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("name cannot be null."));
	}
	this.name = name;
};
$hxClasses["spine.Skin"] = spine_Skin;
spine_Skin.__name__ = "spine.Skin";
spine_Skin.prototype = {
	name: null
	,attachments: null
	,lookup: null
	,keyPool: null
	,addAttachment: function(slotIndex,name,attachment) {
		if(attachment == null) {
			throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("attachment cannot be null."));
		}
		if(slotIndex < 0) {
			throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("slotIndex must be >= 0."));
		}
		var key = this.keyPool.obtain();
		if(name == null) {
			throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("name cannot be null."));
		}
		key.slotIndex = slotIndex;
		key.name = name;
		var hash = 0;
		var chr;
		var tmp;
		if(name.length == 0) {
			tmp = hash;
		} else {
			var _g = 0;
			var _g1 = name.length;
			while(_g < _g1) {
				var i = _g++;
				chr = HxOverrides.cca(name,i);
				hash = (hash << 5) - hash + chr;
			}
			tmp = hash;
		}
		key.hashCode = 31 * (31 + tmp) + slotIndex;
		spine_support_utils_ObjectMap.put(this.attachments,key,attachment);
	}
	,addAttachments: function(skin) {
		var _g = 0;
		var _g1 = spine_support_utils_ObjectMap.entries(skin.attachments);
		while(_g < _g1.length) {
			var entry = _g1[_g];
			++_g;
			var slotIndex = entry.key.slotIndex;
			var name = entry.key.name;
			var attachment = entry.value;
			if(attachment == null) {
				throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("attachment cannot be null."));
			}
			if(slotIndex < 0) {
				throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("slotIndex must be >= 0."));
			}
			var key = this.keyPool.obtain();
			if(name == null) {
				throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("name cannot be null."));
			}
			key.slotIndex = slotIndex;
			key.name = name;
			var hash = 0;
			var chr;
			var tmp;
			if(name.length == 0) {
				tmp = hash;
			} else {
				var _g2 = 0;
				var _g3 = name.length;
				while(_g2 < _g3) {
					var i = _g2++;
					chr = HxOverrides.cca(name,i);
					hash = (hash << 5) - hash + chr;
				}
				tmp = hash;
			}
			key.hashCode = 31 * (31 + tmp) + slotIndex;
			spine_support_utils_ObjectMap.put(this.attachments,key,attachment);
		}
	}
	,getAttachment: function(slotIndex,name) {
		if(slotIndex < 0) {
			throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("slotIndex must be >= 0."));
		}
		var _this = this.lookup;
		if(name == null) {
			throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("name cannot be null."));
		}
		_this.slotIndex = slotIndex;
		_this.name = name;
		var hash = 0;
		var chr;
		var tmp;
		if(name.length == 0) {
			tmp = hash;
		} else {
			var _g = 0;
			var _g1 = name.length;
			while(_g < _g1) {
				var i = _g++;
				chr = HxOverrides.cca(name,i);
				hash = (hash << 5) - hash + chr;
			}
			tmp = hash;
		}
		_this.hashCode = 31 * (31 + tmp) + slotIndex;
		return spine_support_utils_ObjectMap.get(this.attachments,this.lookup);
	}
	,findNamesForSlot: function(slotIndex,names) {
		if(names == null) {
			throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("names cannot be null."));
		}
		if(slotIndex < 0) {
			throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("slotIndex must be >= 0."));
		}
		var _g = 0;
		var _g1 = spine_support_utils_ObjectMap.keys(this.attachments);
		while(_g < _g1.length) {
			var key = _g1[_g];
			++_g;
			if(key.slotIndex == slotIndex) {
				names.push(key.name);
			}
		}
	}
	,findAttachmentsForSlot: function(slotIndex,attachments) {
		if(attachments == null) {
			throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("attachments cannot be null."));
		}
		if(slotIndex < 0) {
			throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("slotIndex must be >= 0."));
		}
		var _g = 0;
		var _g1 = spine_support_utils_ObjectMap.entries(this.attachments);
		while(_g < _g1.length) {
			var entry = _g1[_g];
			++_g;
			if(entry.key.slotIndex == slotIndex) {
				attachments.push(entry.value);
			}
		}
	}
	,clear: function() {
		var _g = 0;
		var _g1 = spine_support_utils_ObjectMap.keys(this.attachments);
		while(_g < _g1.length) {
			var key = _g1[_g];
			++_g;
			this.keyPool.free(key);
		}
		var this1 = this.attachments;
		var keys = [];
		var key = this1.keys();
		while(key.hasNext()) {
			var key1 = key.next();
			keys.push(key1);
		}
		var _g = 0;
		while(_g < keys.length) {
			var key = keys[_g];
			++_g;
			this1.remove(key);
		}
	}
	,getName: function() {
		return this.name;
	}
	,toString: function() {
		return this.name;
	}
	,attachAll: function(skeleton,oldSkin) {
		var _g = 0;
		var _g1 = spine_support_utils_ObjectMap.entries(oldSkin.attachments);
		while(_g < _g1.length) {
			var entry = _g1[_g];
			++_g;
			var slotIndex = entry.key.slotIndex;
			var slot = skeleton.slots[slotIndex];
			if(slot.attachment == entry.value) {
				var name = entry.key.name;
				if(slotIndex < 0) {
					throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("slotIndex must be >= 0."));
				}
				var _this = this.lookup;
				if(name == null) {
					throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("name cannot be null."));
				}
				_this.slotIndex = slotIndex;
				_this.name = name;
				var hash = 0;
				var chr;
				var tmp;
				if(name.length == 0) {
					tmp = hash;
				} else {
					var _g2 = 0;
					var _g3 = name.length;
					while(_g2 < _g3) {
						var i = _g2++;
						chr = HxOverrides.cca(name,i);
						hash = (hash << 5) - hash + chr;
					}
					tmp = hash;
				}
				_this.hashCode = 31 * (31 + tmp) + slotIndex;
				var attachment = spine_support_utils_ObjectMap.get(this.attachments,this.lookup);
				if(attachment != null) {
					if(slot.attachment != attachment) {
						slot.attachment = attachment;
						slot.attachmentTime = slot.bone.skeleton.time;
						var this1 = slot.attachmentVertices;
						this1.splice(0,this1.length);
					}
				}
			}
		}
	}
	,__class__: spine_Skin
};
var spine_Key = function() {
	this.hashCode = 0;
	this.slotIndex = 0;
};
$hxClasses["spine.Key"] = spine_Key;
spine_Key.__name__ = "spine.Key";
spine_Key.prototype = {
	slotIndex: null
	,name: null
	,hashCode: null
	,set: function(slotIndex,name) {
		if(name == null) {
			throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("name cannot be null."));
		}
		this.slotIndex = slotIndex;
		this.name = name;
		var hash = 0;
		var chr;
		var tmp;
		if(name.length == 0) {
			tmp = hash;
		} else {
			var _g = 0;
			var _g1 = name.length;
			while(_g < _g1) {
				var i = _g++;
				chr = HxOverrides.cca(name,i);
				hash = (hash << 5) - hash + chr;
			}
			tmp = hash;
		}
		this.hashCode = 31 * (31 + tmp) + slotIndex;
	}
	,getHashCode: function() {
		return this.hashCode;
	}
	,equals: function(object) {
		if(object == null) {
			return false;
		}
		var other = js_Boot.__cast(object , spine_Key);
		if(this.slotIndex != other.slotIndex) {
			return false;
		}
		if(this.name != other.name) {
			return false;
		}
		return true;
	}
	,toString: function() {
		return this.slotIndex + ":" + this.name;
	}
	,__class__: spine_Key
};
var spine__$Skin_KeyPool = function(initialCapacity) {
	spine_support_utils_Pool.call(this,initialCapacity,999999999);
};
$hxClasses["spine._Skin.KeyPool"] = spine__$Skin_KeyPool;
spine__$Skin_KeyPool.__name__ = "spine._Skin.KeyPool";
spine__$Skin_KeyPool.__super__ = spine_support_utils_Pool;
spine__$Skin_KeyPool.prototype = $extend(spine_support_utils_Pool.prototype,{
	newObject: function() {
		return new spine_Key();
	}
	,__class__: spine__$Skin_KeyPool
});
var spine_Slot = function(data,bone) {
	this.attachmentVertices = [];
	this.attachmentTime = 0;
	this.darkColor = null;
	this.color = new spine_support_graphics_Color();
	if(data == null) {
		throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("data cannot be null."));
	}
	if(bone == null) {
		throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("bone cannot be null."));
	}
	this.data = data;
	this.bone = bone;
	this.darkColor = data.darkColor == null ? null : new spine_support_graphics_Color();
	this.color.set(this.data.color);
	if(this.darkColor != null) {
		this.darkColor.set(this.data.darkColor);
	}
	if(this.data.attachmentName == null) {
		var attachment = null;
		if(this.attachment != attachment) {
			this.attachment = attachment;
			this.attachmentTime = this.bone.skeleton.time;
			var this1 = this.attachmentVertices;
			this1.splice(0,this1.length);
		}
	} else {
		this.attachment = null;
		var attachment = this.bone.skeleton.getAttachment(this.data.index,this.data.attachmentName);
		if(this.attachment != attachment) {
			this.attachment = attachment;
			this.attachmentTime = this.bone.skeleton.time;
			var this1 = this.attachmentVertices;
			this1.splice(0,this1.length);
		}
	}
};
$hxClasses["spine.Slot"] = spine_Slot;
spine_Slot.__name__ = "spine.Slot";
spine_Slot.prototype = {
	data: null
	,bone: null
	,color: null
	,darkColor: null
	,attachment: null
	,attachmentTime: null
	,attachmentVertices: null
	,getData: function() {
		return this.data;
	}
	,getBone: function() {
		return this.bone;
	}
	,getSkeleton: function() {
		return this.bone.skeleton;
	}
	,getColor: function() {
		return this.color;
	}
	,getDarkColor: function() {
		return this.darkColor;
	}
	,getAttachment: function() {
		return this.attachment;
	}
	,setAttachment: function(attachment) {
		if(this.attachment == attachment) {
			return;
		}
		this.attachment = attachment;
		this.attachmentTime = this.bone.skeleton.time;
		var this1 = this.attachmentVertices;
		this1.splice(0,this1.length);
	}
	,getAttachmentTime: function() {
		return this.bone.skeleton.time - this.attachmentTime;
	}
	,setAttachmentTime: function(time) {
		this.attachmentTime = this.bone.skeleton.time - time;
	}
	,getAttachmentVertices: function() {
		return this.attachmentVertices;
	}
	,setAttachmentVertices: function(attachmentVertices) {
		if(attachmentVertices == null) {
			throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("attachmentVertices cannot be null."));
		}
		this.attachmentVertices = attachmentVertices;
	}
	,setToSetupPose: function() {
		this.color.set(this.data.color);
		if(this.darkColor != null) {
			this.darkColor.set(this.data.darkColor);
		}
		if(this.data.attachmentName == null) {
			var attachment = null;
			if(this.attachment != attachment) {
				this.attachment = attachment;
				this.attachmentTime = this.bone.skeleton.time;
				var this1 = this.attachmentVertices;
				this1.splice(0,this1.length);
			}
		} else {
			this.attachment = null;
			var attachment = this.bone.skeleton.getAttachment(this.data.index,this.data.attachmentName);
			if(this.attachment != attachment) {
				this.attachment = attachment;
				this.attachmentTime = this.bone.skeleton.time;
				var this1 = this.attachmentVertices;
				this1.splice(0,this1.length);
			}
		}
	}
	,toString: function() {
		return this.data.name;
	}
	,__class__: spine_Slot
};
var spine_SlotData = function(index,name,boneData) {
	this.color = new spine_support_graphics_Color(1,1,1,1);
	this.index = 0;
	if(index < 0) {
		throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("index must be >= 0."));
	}
	if(name == null) {
		throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("name cannot be null."));
	}
	if(boneData == null) {
		throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("boneData cannot be null."));
	}
	this.index = index;
	this.name = name;
	this.boneData = boneData;
};
$hxClasses["spine.SlotData"] = spine_SlotData;
spine_SlotData.__name__ = "spine.SlotData";
spine_SlotData.prototype = {
	index: null
	,name: null
	,boneData: null
	,color: null
	,darkColor: null
	,attachmentName: null
	,blendMode: null
	,getIndex: function() {
		return this.index;
	}
	,getName: function() {
		return this.name;
	}
	,getBoneData: function() {
		return this.boneData;
	}
	,getColor: function() {
		return this.color;
	}
	,getDarkColor: function() {
		return this.darkColor;
	}
	,setDarkColor: function(darkColor) {
		this.darkColor = darkColor;
	}
	,setAttachmentName: function(attachmentName) {
		this.attachmentName = attachmentName;
	}
	,getAttachmentName: function() {
		return this.attachmentName;
	}
	,getBlendMode: function() {
		return this.blendMode;
	}
	,setBlendMode: function(blendMode) {
		this.blendMode = blendMode;
	}
	,toString: function() {
		return this.name;
	}
	,__class__: spine_SlotData
};
var spine_TransformConstraint = function(data,skeleton) {
	this.temp = new spine_support_math_Vector2();
	this.shearMix = 0;
	this.scaleMix = 0;
	this.translateMix = 0;
	this.rotateMix = 0;
	if(data == null) {
		throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("data cannot be null."));
	}
	if(skeleton == null) {
		throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("skeleton cannot be null."));
	}
	this.data = data;
	this.rotateMix = data.rotateMix;
	this.translateMix = data.translateMix;
	this.scaleMix = data.scaleMix;
	this.shearMix = data.shearMix;
	var capacity = data.bones.length;
	var this1 = [];
	this.bones = this1;
	var _g = 0;
	var _g1 = data.bones;
	while(_g < _g1.length) {
		var boneData = _g1[_g];
		++_g;
		this.bones.push(skeleton.findBone(boneData.name));
	}
	this.target = skeleton.findBone(data.target.name);
};
$hxClasses["spine.TransformConstraint"] = spine_TransformConstraint;
spine_TransformConstraint.__name__ = "spine.TransformConstraint";
spine_TransformConstraint.__interfaces__ = [spine_Constraint];
spine_TransformConstraint.prototype = {
	data: null
	,bones: null
	,target: null
	,rotateMix: null
	,translateMix: null
	,scaleMix: null
	,shearMix: null
	,temp: null
	,apply: function() {
		if(this.data.local) {
			if(this.data.relative) {
				var rotateMix = this.rotateMix;
				var translateMix = this.translateMix;
				var scaleMix = this.scaleMix;
				var shearMix = this.shearMix;
				var target = this.target;
				if(!target.appliedValid) {
					target.appliedValid = true;
					var parent = target.parent;
					if(parent == null) {
						target.ax = target.worldX;
						target.ay = target.worldY;
						target.arotation = js_Boot.__cast(Math.atan2(target.c,target.a) , Float) * spine_utils_SpineUtils.radDeg;
						target.ascaleX = js_Boot.__cast(Math.sqrt(target.a * target.a + target.c * target.c) , Float);
						target.ascaleY = js_Boot.__cast(Math.sqrt(target.b * target.b + target.d * target.d) , Float);
						target.ashearX = 0;
						target.ashearY = js_Boot.__cast(Math.atan2(target.a * target.b + target.c * target.d,target.a * target.d - target.b * target.c) , Float) * spine_utils_SpineUtils.radDeg;
					} else {
						var pa = parent.a;
						var pb = parent.b;
						var pc = parent.c;
						var pd = parent.d;
						var pid = 1 / (pa * pd - pb * pc);
						var dx = target.worldX - parent.worldX;
						var dy = target.worldY - parent.worldY;
						target.ax = dx * pd * pid - dy * pb * pid;
						target.ay = dy * pa * pid - dx * pc * pid;
						var ia = pid * pd;
						var id = pid * pa;
						var ib = pid * pb;
						var ic = pid * pc;
						var ra = ia * target.a - ib * target.c;
						var rb = ia * target.b - ib * target.d;
						var rc = id * target.c - ic * target.a;
						var rd = id * target.d - ic * target.b;
						target.ashearX = 0;
						target.ascaleX = js_Boot.__cast(Math.sqrt(ra * ra + rc * rc) , Float);
						if(target.ascaleX > 0.0001) {
							var det = ra * rd - rb * rc;
							target.ascaleY = det / target.ascaleX;
							target.ashearY = js_Boot.__cast(Math.atan2(ra * rb + rc * rd,det) , Float) * spine_utils_SpineUtils.radDeg;
							target.arotation = js_Boot.__cast(Math.atan2(rc,ra) , Float) * spine_utils_SpineUtils.radDeg;
						} else {
							target.ascaleX = 0;
							target.ascaleY = js_Boot.__cast(Math.sqrt(rb * rb + rd * rd) , Float);
							target.ashearY = 0;
							target.arotation = 90 - js_Boot.__cast(Math.atan2(rd,rb) , Float) * spine_utils_SpineUtils.radDeg;
						}
					}
				}
				var bones = this.bones;
				var i = 0;
				var n = bones.length;
				while(i < n) {
					var bone = bones[i];
					if(!bone.appliedValid) {
						bone.appliedValid = true;
						var parent = bone.parent;
						if(parent == null) {
							bone.ax = bone.worldX;
							bone.ay = bone.worldY;
							bone.arotation = js_Boot.__cast(Math.atan2(bone.c,bone.a) , Float) * spine_utils_SpineUtils.radDeg;
							bone.ascaleX = js_Boot.__cast(Math.sqrt(bone.a * bone.a + bone.c * bone.c) , Float);
							bone.ascaleY = js_Boot.__cast(Math.sqrt(bone.b * bone.b + bone.d * bone.d) , Float);
							bone.ashearX = 0;
							bone.ashearY = js_Boot.__cast(Math.atan2(bone.a * bone.b + bone.c * bone.d,bone.a * bone.d - bone.b * bone.c) , Float) * spine_utils_SpineUtils.radDeg;
						} else {
							var pa = parent.a;
							var pb = parent.b;
							var pc = parent.c;
							var pd = parent.d;
							var pid = 1 / (pa * pd - pb * pc);
							var dx = bone.worldX - parent.worldX;
							var dy = bone.worldY - parent.worldY;
							bone.ax = dx * pd * pid - dy * pb * pid;
							bone.ay = dy * pa * pid - dx * pc * pid;
							var ia = pid * pd;
							var id = pid * pa;
							var ib = pid * pb;
							var ic = pid * pc;
							var ra = ia * bone.a - ib * bone.c;
							var rb = ia * bone.b - ib * bone.d;
							var rc = id * bone.c - ic * bone.a;
							var rd = id * bone.d - ic * bone.b;
							bone.ashearX = 0;
							bone.ascaleX = js_Boot.__cast(Math.sqrt(ra * ra + rc * rc) , Float);
							if(bone.ascaleX > 0.0001) {
								var det = ra * rd - rb * rc;
								bone.ascaleY = det / bone.ascaleX;
								bone.ashearY = js_Boot.__cast(Math.atan2(ra * rb + rc * rd,det) , Float) * spine_utils_SpineUtils.radDeg;
								bone.arotation = js_Boot.__cast(Math.atan2(rc,ra) , Float) * spine_utils_SpineUtils.radDeg;
							} else {
								bone.ascaleX = 0;
								bone.ascaleY = js_Boot.__cast(Math.sqrt(rb * rb + rd * rd) , Float);
								bone.ashearY = 0;
								bone.arotation = 90 - js_Boot.__cast(Math.atan2(rd,rb) , Float) * spine_utils_SpineUtils.radDeg;
							}
						}
					}
					var rotation = bone.arotation;
					if(rotateMix != 0) {
						rotation += (target.arotation + this.data.offsetRotation) * rotateMix;
					}
					var x = bone.ax;
					var y = bone.ay;
					if(translateMix != 0) {
						x += (target.ax + this.data.offsetX) * translateMix;
						y += (target.ay + this.data.offsetY) * translateMix;
					}
					var scaleX = bone.ascaleX;
					var scaleY = bone.ascaleY;
					if(scaleMix > 0) {
						scaleX *= (target.ascaleX - 1 + this.data.offsetScaleX) * scaleMix + 1;
						scaleY *= (target.ascaleY - 1 + this.data.offsetScaleY) * scaleMix + 1;
					}
					var shearY = bone.ashearY;
					if(shearMix > 0) {
						shearY += (target.ashearY + this.data.offsetShearY) * shearMix;
					}
					bone.updateWorldTransformWithData(x,y,rotation,scaleX,scaleY,bone.ashearX,shearY);
					++i;
				}
			} else {
				var rotateMix = this.rotateMix;
				var translateMix = this.translateMix;
				var scaleMix = this.scaleMix;
				var shearMix = this.shearMix;
				var target = this.target;
				if(!target.appliedValid) {
					target.appliedValid = true;
					var parent = target.parent;
					if(parent == null) {
						target.ax = target.worldX;
						target.ay = target.worldY;
						target.arotation = js_Boot.__cast(Math.atan2(target.c,target.a) , Float) * spine_utils_SpineUtils.radDeg;
						target.ascaleX = js_Boot.__cast(Math.sqrt(target.a * target.a + target.c * target.c) , Float);
						target.ascaleY = js_Boot.__cast(Math.sqrt(target.b * target.b + target.d * target.d) , Float);
						target.ashearX = 0;
						target.ashearY = js_Boot.__cast(Math.atan2(target.a * target.b + target.c * target.d,target.a * target.d - target.b * target.c) , Float) * spine_utils_SpineUtils.radDeg;
					} else {
						var pa = parent.a;
						var pb = parent.b;
						var pc = parent.c;
						var pd = parent.d;
						var pid = 1 / (pa * pd - pb * pc);
						var dx = target.worldX - parent.worldX;
						var dy = target.worldY - parent.worldY;
						target.ax = dx * pd * pid - dy * pb * pid;
						target.ay = dy * pa * pid - dx * pc * pid;
						var ia = pid * pd;
						var id = pid * pa;
						var ib = pid * pb;
						var ic = pid * pc;
						var ra = ia * target.a - ib * target.c;
						var rb = ia * target.b - ib * target.d;
						var rc = id * target.c - ic * target.a;
						var rd = id * target.d - ic * target.b;
						target.ashearX = 0;
						target.ascaleX = js_Boot.__cast(Math.sqrt(ra * ra + rc * rc) , Float);
						if(target.ascaleX > 0.0001) {
							var det = ra * rd - rb * rc;
							target.ascaleY = det / target.ascaleX;
							target.ashearY = js_Boot.__cast(Math.atan2(ra * rb + rc * rd,det) , Float) * spine_utils_SpineUtils.radDeg;
							target.arotation = js_Boot.__cast(Math.atan2(rc,ra) , Float) * spine_utils_SpineUtils.radDeg;
						} else {
							target.ascaleX = 0;
							target.ascaleY = js_Boot.__cast(Math.sqrt(rb * rb + rd * rd) , Float);
							target.ashearY = 0;
							target.arotation = 90 - js_Boot.__cast(Math.atan2(rd,rb) , Float) * spine_utils_SpineUtils.radDeg;
						}
					}
				}
				var bones = this.bones;
				var i = 0;
				var n = bones.length;
				while(i < n) {
					var bone = bones[i];
					if(!bone.appliedValid) {
						bone.appliedValid = true;
						var parent = bone.parent;
						if(parent == null) {
							bone.ax = bone.worldX;
							bone.ay = bone.worldY;
							bone.arotation = js_Boot.__cast(Math.atan2(bone.c,bone.a) , Float) * spine_utils_SpineUtils.radDeg;
							bone.ascaleX = js_Boot.__cast(Math.sqrt(bone.a * bone.a + bone.c * bone.c) , Float);
							bone.ascaleY = js_Boot.__cast(Math.sqrt(bone.b * bone.b + bone.d * bone.d) , Float);
							bone.ashearX = 0;
							bone.ashearY = js_Boot.__cast(Math.atan2(bone.a * bone.b + bone.c * bone.d,bone.a * bone.d - bone.b * bone.c) , Float) * spine_utils_SpineUtils.radDeg;
						} else {
							var pa = parent.a;
							var pb = parent.b;
							var pc = parent.c;
							var pd = parent.d;
							var pid = 1 / (pa * pd - pb * pc);
							var dx = bone.worldX - parent.worldX;
							var dy = bone.worldY - parent.worldY;
							bone.ax = dx * pd * pid - dy * pb * pid;
							bone.ay = dy * pa * pid - dx * pc * pid;
							var ia = pid * pd;
							var id = pid * pa;
							var ib = pid * pb;
							var ic = pid * pc;
							var ra = ia * bone.a - ib * bone.c;
							var rb = ia * bone.b - ib * bone.d;
							var rc = id * bone.c - ic * bone.a;
							var rd = id * bone.d - ic * bone.b;
							bone.ashearX = 0;
							bone.ascaleX = js_Boot.__cast(Math.sqrt(ra * ra + rc * rc) , Float);
							if(bone.ascaleX > 0.0001) {
								var det = ra * rd - rb * rc;
								bone.ascaleY = det / bone.ascaleX;
								bone.ashearY = js_Boot.__cast(Math.atan2(ra * rb + rc * rd,det) , Float) * spine_utils_SpineUtils.radDeg;
								bone.arotation = js_Boot.__cast(Math.atan2(rc,ra) , Float) * spine_utils_SpineUtils.radDeg;
							} else {
								bone.ascaleX = 0;
								bone.ascaleY = js_Boot.__cast(Math.sqrt(rb * rb + rd * rd) , Float);
								bone.ashearY = 0;
								bone.arotation = 90 - js_Boot.__cast(Math.atan2(rd,rb) , Float) * spine_utils_SpineUtils.radDeg;
							}
						}
					}
					var rotation = bone.arotation;
					if(rotateMix != 0) {
						var r = target.arotation - rotation + this.data.offsetRotation;
						r -= (16384 - (16384.499999999996 - r / 360 | 0)) * 360;
						rotation += r * rotateMix;
					}
					var x = bone.ax;
					var y = bone.ay;
					if(translateMix != 0) {
						x += (target.ax - x + this.data.offsetX) * translateMix;
						y += (target.ay - y + this.data.offsetY) * translateMix;
					}
					var scaleX = bone.ascaleX;
					var scaleY = bone.ascaleY;
					if(scaleMix > 0) {
						if(scaleX != 0) {
							scaleX = (scaleX + (target.ascaleX - scaleX + this.data.offsetScaleX) * scaleMix) / scaleX;
						}
						if(scaleY != 0) {
							scaleY = (scaleY + (target.ascaleY - scaleY + this.data.offsetScaleY) * scaleMix) / scaleY;
						}
					}
					var shearY = bone.ashearY;
					if(shearMix > 0) {
						var r1 = target.ashearY - shearY + this.data.offsetShearY;
						r1 -= (16384 - (16384.499999999996 - r1 / 360 | 0)) * 360;
						bone.shearY += r1 * shearMix;
					}
					bone.updateWorldTransformWithData(x,y,rotation,scaleX,scaleY,bone.ashearX,shearY);
					++i;
				}
			}
		} else if(this.data.relative) {
			var rotateMix = this.rotateMix;
			var translateMix = this.translateMix;
			var scaleMix = this.scaleMix;
			var shearMix = this.shearMix;
			var target = this.target;
			var ta = target.a;
			var tb = target.b;
			var tc = target.c;
			var td = target.d;
			var degRadReflect = ta * td - tb * tc > 0 ? spine_utils_SpineUtils.degRad : -spine_utils_SpineUtils.degRad;
			var offsetRotation = this.data.offsetRotation * degRadReflect;
			var offsetShearY = this.data.offsetShearY * degRadReflect;
			var bones = this.bones;
			var i = 0;
			var n = bones.length;
			while(i < n) {
				var bone = bones[i];
				var modified = false;
				if(rotateMix != 0) {
					var a = bone.a;
					var b = bone.b;
					var c = bone.c;
					var d = bone.d;
					var r = js_Boot.__cast(Math.atan2(tc,ta) , Float) + offsetRotation;
					if(r > 3.1415927) {
						r -= 6.2831854;
					} else if(r < -3.1415927) {
						r += 6.2831854;
					}
					r *= rotateMix;
					var cos = js_Boot.__cast(Math.cos(r) , Float);
					var sin = js_Boot.__cast(Math.sin(r) , Float);
					bone.a = cos * a - sin * c;
					bone.b = cos * b - sin * d;
					bone.c = sin * a + cos * c;
					bone.d = sin * b + cos * d;
					modified = true;
				}
				if(translateMix != 0) {
					var temp = this.temp;
					temp.x = this.data.offsetX;
					temp.y = this.data.offsetY;
					var local = temp;
					var x = local.x;
					var y = local.y;
					local.x = x * target.a + y * target.b + target.worldX;
					local.y = x * target.c + y * target.d + target.worldY;
					bone.worldX += temp.x * translateMix;
					bone.worldY += temp.y * translateMix;
					modified = true;
				}
				if(scaleMix > 0) {
					var s = js_Boot.__cast(Math.sqrt(ta * ta + tc * tc) - 1 + this.data.offsetScaleX , Float) * scaleMix + 1;
					bone.a *= s;
					bone.c *= s;
					s = js_Boot.__cast(Math.sqrt(tb * tb + td * td) - 1 + this.data.offsetScaleY , Float) * scaleMix + 1;
					bone.b *= s;
					bone.d *= s;
					modified = true;
				}
				if(shearMix > 0) {
					var r1 = js_Boot.__cast(Math.atan2(td,tb) , Float) - js_Boot.__cast(Math.atan2(tc,ta) , Float);
					if(r1 > 3.1415927) {
						r1 -= 6.2831854;
					} else if(r1 < -3.1415927) {
						r1 += 6.2831854;
					}
					var b1 = bone.b;
					var d1 = bone.d;
					r1 = js_Boot.__cast(Math.atan2(d1,b1) , Float) + (r1 - 1.57079635 + offsetShearY) * shearMix;
					var s1 = js_Boot.__cast(Math.sqrt(b1 * b1 + d1 * d1) , Float);
					bone.b = js_Boot.__cast(Math.cos(r1) , Float) * s1;
					bone.d = js_Boot.__cast(Math.sin(r1) , Float) * s1;
					modified = true;
				}
				if(modified) {
					bone.appliedValid = false;
				}
				++i;
			}
		} else {
			var rotateMix = this.rotateMix;
			var translateMix = this.translateMix;
			var scaleMix = this.scaleMix;
			var shearMix = this.shearMix;
			var target = this.target;
			var ta = target.a;
			var tb = target.b;
			var tc = target.c;
			var td = target.d;
			var degRadReflect = ta * td - tb * tc > 0 ? spine_utils_SpineUtils.degRad : -spine_utils_SpineUtils.degRad;
			var offsetRotation = this.data.offsetRotation * degRadReflect;
			var offsetShearY = this.data.offsetShearY * degRadReflect;
			var bones = this.bones;
			var i = 0;
			var n = bones.length;
			while(i < n) {
				var bone = bones[i];
				var modified = false;
				if(rotateMix != 0) {
					var a = bone.a;
					var b = bone.b;
					var c = bone.c;
					var d = bone.d;
					var r = js_Boot.__cast(Math.atan2(tc,ta) , Float) - js_Boot.__cast(Math.atan2(c,a) , Float) + offsetRotation;
					if(r > 3.1415927) {
						r -= 6.2831854;
					} else if(r < -3.1415927) {
						r += 6.2831854;
					}
					r *= rotateMix;
					var cos = js_Boot.__cast(Math.cos(r) , Float);
					var sin = js_Boot.__cast(Math.sin(r) , Float);
					bone.a = cos * a - sin * c;
					bone.b = cos * b - sin * d;
					bone.c = sin * a + cos * c;
					bone.d = sin * b + cos * d;
					modified = true;
				}
				if(translateMix != 0) {
					var temp = this.temp;
					temp.x = this.data.offsetX;
					temp.y = this.data.offsetY;
					var local = temp;
					var x = local.x;
					var y = local.y;
					local.x = x * target.a + y * target.b + target.worldX;
					local.y = x * target.c + y * target.d + target.worldY;
					bone.worldX += (temp.x - bone.worldX) * translateMix;
					bone.worldY += (temp.y - bone.worldY) * translateMix;
					modified = true;
				}
				if(scaleMix > 0) {
					var s = js_Boot.__cast(Math.sqrt(bone.a * bone.a + bone.c * bone.c) , Float);
					if(s != 0) {
						s = (s + js_Boot.__cast(Math.sqrt(ta * ta + tc * tc) - s + this.data.offsetScaleX , Float) * scaleMix) / s;
					}
					bone.a *= s;
					bone.c *= s;
					s = js_Boot.__cast(Math.sqrt(bone.b * bone.b + bone.d * bone.d) , Float);
					if(s != 0) {
						s = (s + js_Boot.__cast(Math.sqrt(tb * tb + td * td) - s + this.data.offsetScaleY , Float) * scaleMix) / s;
					}
					bone.b *= s;
					bone.d *= s;
					modified = true;
				}
				if(shearMix > 0) {
					var b1 = bone.b;
					var d1 = bone.d;
					var by = js_Boot.__cast(Math.atan2(d1,b1) , Float);
					var r1 = js_Boot.__cast(Math.atan2(td,tb) , Float) - js_Boot.__cast(Math.atan2(tc,ta) , Float) - (by - js_Boot.__cast(Math.atan2(bone.c,bone.a) , Float));
					if(r1 > 3.1415927) {
						r1 -= 6.2831854;
					} else if(r1 < -3.1415927) {
						r1 += 6.2831854;
					}
					r1 = by + (r1 + offsetShearY) * shearMix;
					var s1 = js_Boot.__cast(Math.sqrt(b1 * b1 + d1 * d1) , Float);
					bone.b = js_Boot.__cast(Math.cos(r1) , Float) * s1;
					bone.d = js_Boot.__cast(Math.sin(r1) , Float) * s1;
					modified = true;
				}
				if(modified) {
					bone.appliedValid = false;
				}
				++i;
			}
		}
	}
	,update: function() {
		if(this.data.local) {
			if(this.data.relative) {
				var rotateMix = this.rotateMix;
				var translateMix = this.translateMix;
				var scaleMix = this.scaleMix;
				var shearMix = this.shearMix;
				var target = this.target;
				if(!target.appliedValid) {
					target.appliedValid = true;
					var parent = target.parent;
					if(parent == null) {
						target.ax = target.worldX;
						target.ay = target.worldY;
						target.arotation = js_Boot.__cast(Math.atan2(target.c,target.a) , Float) * spine_utils_SpineUtils.radDeg;
						target.ascaleX = js_Boot.__cast(Math.sqrt(target.a * target.a + target.c * target.c) , Float);
						target.ascaleY = js_Boot.__cast(Math.sqrt(target.b * target.b + target.d * target.d) , Float);
						target.ashearX = 0;
						target.ashearY = js_Boot.__cast(Math.atan2(target.a * target.b + target.c * target.d,target.a * target.d - target.b * target.c) , Float) * spine_utils_SpineUtils.radDeg;
					} else {
						var pa = parent.a;
						var pb = parent.b;
						var pc = parent.c;
						var pd = parent.d;
						var pid = 1 / (pa * pd - pb * pc);
						var dx = target.worldX - parent.worldX;
						var dy = target.worldY - parent.worldY;
						target.ax = dx * pd * pid - dy * pb * pid;
						target.ay = dy * pa * pid - dx * pc * pid;
						var ia = pid * pd;
						var id = pid * pa;
						var ib = pid * pb;
						var ic = pid * pc;
						var ra = ia * target.a - ib * target.c;
						var rb = ia * target.b - ib * target.d;
						var rc = id * target.c - ic * target.a;
						var rd = id * target.d - ic * target.b;
						target.ashearX = 0;
						target.ascaleX = js_Boot.__cast(Math.sqrt(ra * ra + rc * rc) , Float);
						if(target.ascaleX > 0.0001) {
							var det = ra * rd - rb * rc;
							target.ascaleY = det / target.ascaleX;
							target.ashearY = js_Boot.__cast(Math.atan2(ra * rb + rc * rd,det) , Float) * spine_utils_SpineUtils.radDeg;
							target.arotation = js_Boot.__cast(Math.atan2(rc,ra) , Float) * spine_utils_SpineUtils.radDeg;
						} else {
							target.ascaleX = 0;
							target.ascaleY = js_Boot.__cast(Math.sqrt(rb * rb + rd * rd) , Float);
							target.ashearY = 0;
							target.arotation = 90 - js_Boot.__cast(Math.atan2(rd,rb) , Float) * spine_utils_SpineUtils.radDeg;
						}
					}
				}
				var bones = this.bones;
				var i = 0;
				var n = bones.length;
				while(i < n) {
					var bone = bones[i];
					if(!bone.appliedValid) {
						bone.appliedValid = true;
						var parent = bone.parent;
						if(parent == null) {
							bone.ax = bone.worldX;
							bone.ay = bone.worldY;
							bone.arotation = js_Boot.__cast(Math.atan2(bone.c,bone.a) , Float) * spine_utils_SpineUtils.radDeg;
							bone.ascaleX = js_Boot.__cast(Math.sqrt(bone.a * bone.a + bone.c * bone.c) , Float);
							bone.ascaleY = js_Boot.__cast(Math.sqrt(bone.b * bone.b + bone.d * bone.d) , Float);
							bone.ashearX = 0;
							bone.ashearY = js_Boot.__cast(Math.atan2(bone.a * bone.b + bone.c * bone.d,bone.a * bone.d - bone.b * bone.c) , Float) * spine_utils_SpineUtils.radDeg;
						} else {
							var pa = parent.a;
							var pb = parent.b;
							var pc = parent.c;
							var pd = parent.d;
							var pid = 1 / (pa * pd - pb * pc);
							var dx = bone.worldX - parent.worldX;
							var dy = bone.worldY - parent.worldY;
							bone.ax = dx * pd * pid - dy * pb * pid;
							bone.ay = dy * pa * pid - dx * pc * pid;
							var ia = pid * pd;
							var id = pid * pa;
							var ib = pid * pb;
							var ic = pid * pc;
							var ra = ia * bone.a - ib * bone.c;
							var rb = ia * bone.b - ib * bone.d;
							var rc = id * bone.c - ic * bone.a;
							var rd = id * bone.d - ic * bone.b;
							bone.ashearX = 0;
							bone.ascaleX = js_Boot.__cast(Math.sqrt(ra * ra + rc * rc) , Float);
							if(bone.ascaleX > 0.0001) {
								var det = ra * rd - rb * rc;
								bone.ascaleY = det / bone.ascaleX;
								bone.ashearY = js_Boot.__cast(Math.atan2(ra * rb + rc * rd,det) , Float) * spine_utils_SpineUtils.radDeg;
								bone.arotation = js_Boot.__cast(Math.atan2(rc,ra) , Float) * spine_utils_SpineUtils.radDeg;
							} else {
								bone.ascaleX = 0;
								bone.ascaleY = js_Boot.__cast(Math.sqrt(rb * rb + rd * rd) , Float);
								bone.ashearY = 0;
								bone.arotation = 90 - js_Boot.__cast(Math.atan2(rd,rb) , Float) * spine_utils_SpineUtils.radDeg;
							}
						}
					}
					var rotation = bone.arotation;
					if(rotateMix != 0) {
						rotation += (target.arotation + this.data.offsetRotation) * rotateMix;
					}
					var x = bone.ax;
					var y = bone.ay;
					if(translateMix != 0) {
						x += (target.ax + this.data.offsetX) * translateMix;
						y += (target.ay + this.data.offsetY) * translateMix;
					}
					var scaleX = bone.ascaleX;
					var scaleY = bone.ascaleY;
					if(scaleMix > 0) {
						scaleX *= (target.ascaleX - 1 + this.data.offsetScaleX) * scaleMix + 1;
						scaleY *= (target.ascaleY - 1 + this.data.offsetScaleY) * scaleMix + 1;
					}
					var shearY = bone.ashearY;
					if(shearMix > 0) {
						shearY += (target.ashearY + this.data.offsetShearY) * shearMix;
					}
					bone.updateWorldTransformWithData(x,y,rotation,scaleX,scaleY,bone.ashearX,shearY);
					++i;
				}
			} else {
				var rotateMix = this.rotateMix;
				var translateMix = this.translateMix;
				var scaleMix = this.scaleMix;
				var shearMix = this.shearMix;
				var target = this.target;
				if(!target.appliedValid) {
					target.appliedValid = true;
					var parent = target.parent;
					if(parent == null) {
						target.ax = target.worldX;
						target.ay = target.worldY;
						target.arotation = js_Boot.__cast(Math.atan2(target.c,target.a) , Float) * spine_utils_SpineUtils.radDeg;
						target.ascaleX = js_Boot.__cast(Math.sqrt(target.a * target.a + target.c * target.c) , Float);
						target.ascaleY = js_Boot.__cast(Math.sqrt(target.b * target.b + target.d * target.d) , Float);
						target.ashearX = 0;
						target.ashearY = js_Boot.__cast(Math.atan2(target.a * target.b + target.c * target.d,target.a * target.d - target.b * target.c) , Float) * spine_utils_SpineUtils.radDeg;
					} else {
						var pa = parent.a;
						var pb = parent.b;
						var pc = parent.c;
						var pd = parent.d;
						var pid = 1 / (pa * pd - pb * pc);
						var dx = target.worldX - parent.worldX;
						var dy = target.worldY - parent.worldY;
						target.ax = dx * pd * pid - dy * pb * pid;
						target.ay = dy * pa * pid - dx * pc * pid;
						var ia = pid * pd;
						var id = pid * pa;
						var ib = pid * pb;
						var ic = pid * pc;
						var ra = ia * target.a - ib * target.c;
						var rb = ia * target.b - ib * target.d;
						var rc = id * target.c - ic * target.a;
						var rd = id * target.d - ic * target.b;
						target.ashearX = 0;
						target.ascaleX = js_Boot.__cast(Math.sqrt(ra * ra + rc * rc) , Float);
						if(target.ascaleX > 0.0001) {
							var det = ra * rd - rb * rc;
							target.ascaleY = det / target.ascaleX;
							target.ashearY = js_Boot.__cast(Math.atan2(ra * rb + rc * rd,det) , Float) * spine_utils_SpineUtils.radDeg;
							target.arotation = js_Boot.__cast(Math.atan2(rc,ra) , Float) * spine_utils_SpineUtils.radDeg;
						} else {
							target.ascaleX = 0;
							target.ascaleY = js_Boot.__cast(Math.sqrt(rb * rb + rd * rd) , Float);
							target.ashearY = 0;
							target.arotation = 90 - js_Boot.__cast(Math.atan2(rd,rb) , Float) * spine_utils_SpineUtils.radDeg;
						}
					}
				}
				var bones = this.bones;
				var i = 0;
				var n = bones.length;
				while(i < n) {
					var bone = bones[i];
					if(!bone.appliedValid) {
						bone.appliedValid = true;
						var parent = bone.parent;
						if(parent == null) {
							bone.ax = bone.worldX;
							bone.ay = bone.worldY;
							bone.arotation = js_Boot.__cast(Math.atan2(bone.c,bone.a) , Float) * spine_utils_SpineUtils.radDeg;
							bone.ascaleX = js_Boot.__cast(Math.sqrt(bone.a * bone.a + bone.c * bone.c) , Float);
							bone.ascaleY = js_Boot.__cast(Math.sqrt(bone.b * bone.b + bone.d * bone.d) , Float);
							bone.ashearX = 0;
							bone.ashearY = js_Boot.__cast(Math.atan2(bone.a * bone.b + bone.c * bone.d,bone.a * bone.d - bone.b * bone.c) , Float) * spine_utils_SpineUtils.radDeg;
						} else {
							var pa = parent.a;
							var pb = parent.b;
							var pc = parent.c;
							var pd = parent.d;
							var pid = 1 / (pa * pd - pb * pc);
							var dx = bone.worldX - parent.worldX;
							var dy = bone.worldY - parent.worldY;
							bone.ax = dx * pd * pid - dy * pb * pid;
							bone.ay = dy * pa * pid - dx * pc * pid;
							var ia = pid * pd;
							var id = pid * pa;
							var ib = pid * pb;
							var ic = pid * pc;
							var ra = ia * bone.a - ib * bone.c;
							var rb = ia * bone.b - ib * bone.d;
							var rc = id * bone.c - ic * bone.a;
							var rd = id * bone.d - ic * bone.b;
							bone.ashearX = 0;
							bone.ascaleX = js_Boot.__cast(Math.sqrt(ra * ra + rc * rc) , Float);
							if(bone.ascaleX > 0.0001) {
								var det = ra * rd - rb * rc;
								bone.ascaleY = det / bone.ascaleX;
								bone.ashearY = js_Boot.__cast(Math.atan2(ra * rb + rc * rd,det) , Float) * spine_utils_SpineUtils.radDeg;
								bone.arotation = js_Boot.__cast(Math.atan2(rc,ra) , Float) * spine_utils_SpineUtils.radDeg;
							} else {
								bone.ascaleX = 0;
								bone.ascaleY = js_Boot.__cast(Math.sqrt(rb * rb + rd * rd) , Float);
								bone.ashearY = 0;
								bone.arotation = 90 - js_Boot.__cast(Math.atan2(rd,rb) , Float) * spine_utils_SpineUtils.radDeg;
							}
						}
					}
					var rotation = bone.arotation;
					if(rotateMix != 0) {
						var r = target.arotation - rotation + this.data.offsetRotation;
						r -= (16384 - (16384.499999999996 - r / 360 | 0)) * 360;
						rotation += r * rotateMix;
					}
					var x = bone.ax;
					var y = bone.ay;
					if(translateMix != 0) {
						x += (target.ax - x + this.data.offsetX) * translateMix;
						y += (target.ay - y + this.data.offsetY) * translateMix;
					}
					var scaleX = bone.ascaleX;
					var scaleY = bone.ascaleY;
					if(scaleMix > 0) {
						if(scaleX != 0) {
							scaleX = (scaleX + (target.ascaleX - scaleX + this.data.offsetScaleX) * scaleMix) / scaleX;
						}
						if(scaleY != 0) {
							scaleY = (scaleY + (target.ascaleY - scaleY + this.data.offsetScaleY) * scaleMix) / scaleY;
						}
					}
					var shearY = bone.ashearY;
					if(shearMix > 0) {
						var r1 = target.ashearY - shearY + this.data.offsetShearY;
						r1 -= (16384 - (16384.499999999996 - r1 / 360 | 0)) * 360;
						bone.shearY += r1 * shearMix;
					}
					bone.updateWorldTransformWithData(x,y,rotation,scaleX,scaleY,bone.ashearX,shearY);
					++i;
				}
			}
		} else if(this.data.relative) {
			var rotateMix = this.rotateMix;
			var translateMix = this.translateMix;
			var scaleMix = this.scaleMix;
			var shearMix = this.shearMix;
			var target = this.target;
			var ta = target.a;
			var tb = target.b;
			var tc = target.c;
			var td = target.d;
			var degRadReflect = ta * td - tb * tc > 0 ? spine_utils_SpineUtils.degRad : -spine_utils_SpineUtils.degRad;
			var offsetRotation = this.data.offsetRotation * degRadReflect;
			var offsetShearY = this.data.offsetShearY * degRadReflect;
			var bones = this.bones;
			var i = 0;
			var n = bones.length;
			while(i < n) {
				var bone = bones[i];
				var modified = false;
				if(rotateMix != 0) {
					var a = bone.a;
					var b = bone.b;
					var c = bone.c;
					var d = bone.d;
					var r = js_Boot.__cast(Math.atan2(tc,ta) , Float) + offsetRotation;
					if(r > 3.1415927) {
						r -= 6.2831854;
					} else if(r < -3.1415927) {
						r += 6.2831854;
					}
					r *= rotateMix;
					var cos = js_Boot.__cast(Math.cos(r) , Float);
					var sin = js_Boot.__cast(Math.sin(r) , Float);
					bone.a = cos * a - sin * c;
					bone.b = cos * b - sin * d;
					bone.c = sin * a + cos * c;
					bone.d = sin * b + cos * d;
					modified = true;
				}
				if(translateMix != 0) {
					var temp = this.temp;
					temp.x = this.data.offsetX;
					temp.y = this.data.offsetY;
					var local = temp;
					var x = local.x;
					var y = local.y;
					local.x = x * target.a + y * target.b + target.worldX;
					local.y = x * target.c + y * target.d + target.worldY;
					bone.worldX += temp.x * translateMix;
					bone.worldY += temp.y * translateMix;
					modified = true;
				}
				if(scaleMix > 0) {
					var s = js_Boot.__cast(Math.sqrt(ta * ta + tc * tc) - 1 + this.data.offsetScaleX , Float) * scaleMix + 1;
					bone.a *= s;
					bone.c *= s;
					s = js_Boot.__cast(Math.sqrt(tb * tb + td * td) - 1 + this.data.offsetScaleY , Float) * scaleMix + 1;
					bone.b *= s;
					bone.d *= s;
					modified = true;
				}
				if(shearMix > 0) {
					var r1 = js_Boot.__cast(Math.atan2(td,tb) , Float) - js_Boot.__cast(Math.atan2(tc,ta) , Float);
					if(r1 > 3.1415927) {
						r1 -= 6.2831854;
					} else if(r1 < -3.1415927) {
						r1 += 6.2831854;
					}
					var b1 = bone.b;
					var d1 = bone.d;
					r1 = js_Boot.__cast(Math.atan2(d1,b1) , Float) + (r1 - 1.57079635 + offsetShearY) * shearMix;
					var s1 = js_Boot.__cast(Math.sqrt(b1 * b1 + d1 * d1) , Float);
					bone.b = js_Boot.__cast(Math.cos(r1) , Float) * s1;
					bone.d = js_Boot.__cast(Math.sin(r1) , Float) * s1;
					modified = true;
				}
				if(modified) {
					bone.appliedValid = false;
				}
				++i;
			}
		} else {
			var rotateMix = this.rotateMix;
			var translateMix = this.translateMix;
			var scaleMix = this.scaleMix;
			var shearMix = this.shearMix;
			var target = this.target;
			var ta = target.a;
			var tb = target.b;
			var tc = target.c;
			var td = target.d;
			var degRadReflect = ta * td - tb * tc > 0 ? spine_utils_SpineUtils.degRad : -spine_utils_SpineUtils.degRad;
			var offsetRotation = this.data.offsetRotation * degRadReflect;
			var offsetShearY = this.data.offsetShearY * degRadReflect;
			var bones = this.bones;
			var i = 0;
			var n = bones.length;
			while(i < n) {
				var bone = bones[i];
				var modified = false;
				if(rotateMix != 0) {
					var a = bone.a;
					var b = bone.b;
					var c = bone.c;
					var d = bone.d;
					var r = js_Boot.__cast(Math.atan2(tc,ta) , Float) - js_Boot.__cast(Math.atan2(c,a) , Float) + offsetRotation;
					if(r > 3.1415927) {
						r -= 6.2831854;
					} else if(r < -3.1415927) {
						r += 6.2831854;
					}
					r *= rotateMix;
					var cos = js_Boot.__cast(Math.cos(r) , Float);
					var sin = js_Boot.__cast(Math.sin(r) , Float);
					bone.a = cos * a - sin * c;
					bone.b = cos * b - sin * d;
					bone.c = sin * a + cos * c;
					bone.d = sin * b + cos * d;
					modified = true;
				}
				if(translateMix != 0) {
					var temp = this.temp;
					temp.x = this.data.offsetX;
					temp.y = this.data.offsetY;
					var local = temp;
					var x = local.x;
					var y = local.y;
					local.x = x * target.a + y * target.b + target.worldX;
					local.y = x * target.c + y * target.d + target.worldY;
					bone.worldX += (temp.x - bone.worldX) * translateMix;
					bone.worldY += (temp.y - bone.worldY) * translateMix;
					modified = true;
				}
				if(scaleMix > 0) {
					var s = js_Boot.__cast(Math.sqrt(bone.a * bone.a + bone.c * bone.c) , Float);
					if(s != 0) {
						s = (s + js_Boot.__cast(Math.sqrt(ta * ta + tc * tc) - s + this.data.offsetScaleX , Float) * scaleMix) / s;
					}
					bone.a *= s;
					bone.c *= s;
					s = js_Boot.__cast(Math.sqrt(bone.b * bone.b + bone.d * bone.d) , Float);
					if(s != 0) {
						s = (s + js_Boot.__cast(Math.sqrt(tb * tb + td * td) - s + this.data.offsetScaleY , Float) * scaleMix) / s;
					}
					bone.b *= s;
					bone.d *= s;
					modified = true;
				}
				if(shearMix > 0) {
					var b1 = bone.b;
					var d1 = bone.d;
					var by = js_Boot.__cast(Math.atan2(d1,b1) , Float);
					var r1 = js_Boot.__cast(Math.atan2(td,tb) , Float) - js_Boot.__cast(Math.atan2(tc,ta) , Float) - (by - js_Boot.__cast(Math.atan2(bone.c,bone.a) , Float));
					if(r1 > 3.1415927) {
						r1 -= 6.2831854;
					} else if(r1 < -3.1415927) {
						r1 += 6.2831854;
					}
					r1 = by + (r1 + offsetShearY) * shearMix;
					var s1 = js_Boot.__cast(Math.sqrt(b1 * b1 + d1 * d1) , Float);
					bone.b = js_Boot.__cast(Math.cos(r1) , Float) * s1;
					bone.d = js_Boot.__cast(Math.sin(r1) , Float) * s1;
					modified = true;
				}
				if(modified) {
					bone.appliedValid = false;
				}
				++i;
			}
		}
	}
	,applyAbsoluteWorld: function() {
		var rotateMix = this.rotateMix;
		var translateMix = this.translateMix;
		var scaleMix = this.scaleMix;
		var shearMix = this.shearMix;
		var target = this.target;
		var ta = target.a;
		var tb = target.b;
		var tc = target.c;
		var td = target.d;
		var degRadReflect = ta * td - tb * tc > 0 ? spine_utils_SpineUtils.degRad : -spine_utils_SpineUtils.degRad;
		var offsetRotation = this.data.offsetRotation * degRadReflect;
		var offsetShearY = this.data.offsetShearY * degRadReflect;
		var bones = this.bones;
		var i = 0;
		var n = bones.length;
		while(i < n) {
			var bone = bones[i];
			var modified = false;
			if(rotateMix != 0) {
				var a = bone.a;
				var b = bone.b;
				var c = bone.c;
				var d = bone.d;
				var r = js_Boot.__cast(Math.atan2(tc,ta) , Float) - js_Boot.__cast(Math.atan2(c,a) , Float) + offsetRotation;
				if(r > 3.1415927) {
					r -= 6.2831854;
				} else if(r < -3.1415927) {
					r += 6.2831854;
				}
				r *= rotateMix;
				var cos = js_Boot.__cast(Math.cos(r) , Float);
				var sin = js_Boot.__cast(Math.sin(r) , Float);
				bone.a = cos * a - sin * c;
				bone.b = cos * b - sin * d;
				bone.c = sin * a + cos * c;
				bone.d = sin * b + cos * d;
				modified = true;
			}
			if(translateMix != 0) {
				var temp = this.temp;
				temp.x = this.data.offsetX;
				temp.y = this.data.offsetY;
				var local = temp;
				var x = local.x;
				var y = local.y;
				local.x = x * target.a + y * target.b + target.worldX;
				local.y = x * target.c + y * target.d + target.worldY;
				bone.worldX += (temp.x - bone.worldX) * translateMix;
				bone.worldY += (temp.y - bone.worldY) * translateMix;
				modified = true;
			}
			if(scaleMix > 0) {
				var s = js_Boot.__cast(Math.sqrt(bone.a * bone.a + bone.c * bone.c) , Float);
				if(s != 0) {
					s = (s + js_Boot.__cast(Math.sqrt(ta * ta + tc * tc) - s + this.data.offsetScaleX , Float) * scaleMix) / s;
				}
				bone.a *= s;
				bone.c *= s;
				s = js_Boot.__cast(Math.sqrt(bone.b * bone.b + bone.d * bone.d) , Float);
				if(s != 0) {
					s = (s + js_Boot.__cast(Math.sqrt(tb * tb + td * td) - s + this.data.offsetScaleY , Float) * scaleMix) / s;
				}
				bone.b *= s;
				bone.d *= s;
				modified = true;
			}
			if(shearMix > 0) {
				var b1 = bone.b;
				var d1 = bone.d;
				var by = js_Boot.__cast(Math.atan2(d1,b1) , Float);
				var r1 = js_Boot.__cast(Math.atan2(td,tb) , Float) - js_Boot.__cast(Math.atan2(tc,ta) , Float) - (by - js_Boot.__cast(Math.atan2(bone.c,bone.a) , Float));
				if(r1 > 3.1415927) {
					r1 -= 6.2831854;
				} else if(r1 < -3.1415927) {
					r1 += 6.2831854;
				}
				r1 = by + (r1 + offsetShearY) * shearMix;
				var s1 = js_Boot.__cast(Math.sqrt(b1 * b1 + d1 * d1) , Float);
				bone.b = js_Boot.__cast(Math.cos(r1) , Float) * s1;
				bone.d = js_Boot.__cast(Math.sin(r1) , Float) * s1;
				modified = true;
			}
			if(modified) {
				bone.appliedValid = false;
			}
			++i;
		}
	}
	,applyRelativeWorld: function() {
		var rotateMix = this.rotateMix;
		var translateMix = this.translateMix;
		var scaleMix = this.scaleMix;
		var shearMix = this.shearMix;
		var target = this.target;
		var ta = target.a;
		var tb = target.b;
		var tc = target.c;
		var td = target.d;
		var degRadReflect = ta * td - tb * tc > 0 ? spine_utils_SpineUtils.degRad : -spine_utils_SpineUtils.degRad;
		var offsetRotation = this.data.offsetRotation * degRadReflect;
		var offsetShearY = this.data.offsetShearY * degRadReflect;
		var bones = this.bones;
		var i = 0;
		var n = bones.length;
		while(i < n) {
			var bone = bones[i];
			var modified = false;
			if(rotateMix != 0) {
				var a = bone.a;
				var b = bone.b;
				var c = bone.c;
				var d = bone.d;
				var r = js_Boot.__cast(Math.atan2(tc,ta) , Float) + offsetRotation;
				if(r > 3.1415927) {
					r -= 6.2831854;
				} else if(r < -3.1415927) {
					r += 6.2831854;
				}
				r *= rotateMix;
				var cos = js_Boot.__cast(Math.cos(r) , Float);
				var sin = js_Boot.__cast(Math.sin(r) , Float);
				bone.a = cos * a - sin * c;
				bone.b = cos * b - sin * d;
				bone.c = sin * a + cos * c;
				bone.d = sin * b + cos * d;
				modified = true;
			}
			if(translateMix != 0) {
				var temp = this.temp;
				temp.x = this.data.offsetX;
				temp.y = this.data.offsetY;
				var local = temp;
				var x = local.x;
				var y = local.y;
				local.x = x * target.a + y * target.b + target.worldX;
				local.y = x * target.c + y * target.d + target.worldY;
				bone.worldX += temp.x * translateMix;
				bone.worldY += temp.y * translateMix;
				modified = true;
			}
			if(scaleMix > 0) {
				var s = js_Boot.__cast(Math.sqrt(ta * ta + tc * tc) - 1 + this.data.offsetScaleX , Float) * scaleMix + 1;
				bone.a *= s;
				bone.c *= s;
				s = js_Boot.__cast(Math.sqrt(tb * tb + td * td) - 1 + this.data.offsetScaleY , Float) * scaleMix + 1;
				bone.b *= s;
				bone.d *= s;
				modified = true;
			}
			if(shearMix > 0) {
				var r1 = js_Boot.__cast(Math.atan2(td,tb) , Float) - js_Boot.__cast(Math.atan2(tc,ta) , Float);
				if(r1 > 3.1415927) {
					r1 -= 6.2831854;
				} else if(r1 < -3.1415927) {
					r1 += 6.2831854;
				}
				var b1 = bone.b;
				var d1 = bone.d;
				r1 = js_Boot.__cast(Math.atan2(d1,b1) , Float) + (r1 - 1.57079635 + offsetShearY) * shearMix;
				var s1 = js_Boot.__cast(Math.sqrt(b1 * b1 + d1 * d1) , Float);
				bone.b = js_Boot.__cast(Math.cos(r1) , Float) * s1;
				bone.d = js_Boot.__cast(Math.sin(r1) , Float) * s1;
				modified = true;
			}
			if(modified) {
				bone.appliedValid = false;
			}
			++i;
		}
	}
	,applyAbsoluteLocal: function() {
		var rotateMix = this.rotateMix;
		var translateMix = this.translateMix;
		var scaleMix = this.scaleMix;
		var shearMix = this.shearMix;
		var target = this.target;
		if(!target.appliedValid) {
			target.appliedValid = true;
			var parent = target.parent;
			if(parent == null) {
				target.ax = target.worldX;
				target.ay = target.worldY;
				target.arotation = js_Boot.__cast(Math.atan2(target.c,target.a) , Float) * spine_utils_SpineUtils.radDeg;
				target.ascaleX = js_Boot.__cast(Math.sqrt(target.a * target.a + target.c * target.c) , Float);
				target.ascaleY = js_Boot.__cast(Math.sqrt(target.b * target.b + target.d * target.d) , Float);
				target.ashearX = 0;
				target.ashearY = js_Boot.__cast(Math.atan2(target.a * target.b + target.c * target.d,target.a * target.d - target.b * target.c) , Float) * spine_utils_SpineUtils.radDeg;
			} else {
				var pa = parent.a;
				var pb = parent.b;
				var pc = parent.c;
				var pd = parent.d;
				var pid = 1 / (pa * pd - pb * pc);
				var dx = target.worldX - parent.worldX;
				var dy = target.worldY - parent.worldY;
				target.ax = dx * pd * pid - dy * pb * pid;
				target.ay = dy * pa * pid - dx * pc * pid;
				var ia = pid * pd;
				var id = pid * pa;
				var ib = pid * pb;
				var ic = pid * pc;
				var ra = ia * target.a - ib * target.c;
				var rb = ia * target.b - ib * target.d;
				var rc = id * target.c - ic * target.a;
				var rd = id * target.d - ic * target.b;
				target.ashearX = 0;
				target.ascaleX = js_Boot.__cast(Math.sqrt(ra * ra + rc * rc) , Float);
				if(target.ascaleX > 0.0001) {
					var det = ra * rd - rb * rc;
					target.ascaleY = det / target.ascaleX;
					target.ashearY = js_Boot.__cast(Math.atan2(ra * rb + rc * rd,det) , Float) * spine_utils_SpineUtils.radDeg;
					target.arotation = js_Boot.__cast(Math.atan2(rc,ra) , Float) * spine_utils_SpineUtils.radDeg;
				} else {
					target.ascaleX = 0;
					target.ascaleY = js_Boot.__cast(Math.sqrt(rb * rb + rd * rd) , Float);
					target.ashearY = 0;
					target.arotation = 90 - js_Boot.__cast(Math.atan2(rd,rb) , Float) * spine_utils_SpineUtils.radDeg;
				}
			}
		}
		var bones = this.bones;
		var i = 0;
		var n = bones.length;
		while(i < n) {
			var bone = bones[i];
			if(!bone.appliedValid) {
				bone.appliedValid = true;
				var parent = bone.parent;
				if(parent == null) {
					bone.ax = bone.worldX;
					bone.ay = bone.worldY;
					bone.arotation = js_Boot.__cast(Math.atan2(bone.c,bone.a) , Float) * spine_utils_SpineUtils.radDeg;
					bone.ascaleX = js_Boot.__cast(Math.sqrt(bone.a * bone.a + bone.c * bone.c) , Float);
					bone.ascaleY = js_Boot.__cast(Math.sqrt(bone.b * bone.b + bone.d * bone.d) , Float);
					bone.ashearX = 0;
					bone.ashearY = js_Boot.__cast(Math.atan2(bone.a * bone.b + bone.c * bone.d,bone.a * bone.d - bone.b * bone.c) , Float) * spine_utils_SpineUtils.radDeg;
				} else {
					var pa = parent.a;
					var pb = parent.b;
					var pc = parent.c;
					var pd = parent.d;
					var pid = 1 / (pa * pd - pb * pc);
					var dx = bone.worldX - parent.worldX;
					var dy = bone.worldY - parent.worldY;
					bone.ax = dx * pd * pid - dy * pb * pid;
					bone.ay = dy * pa * pid - dx * pc * pid;
					var ia = pid * pd;
					var id = pid * pa;
					var ib = pid * pb;
					var ic = pid * pc;
					var ra = ia * bone.a - ib * bone.c;
					var rb = ia * bone.b - ib * bone.d;
					var rc = id * bone.c - ic * bone.a;
					var rd = id * bone.d - ic * bone.b;
					bone.ashearX = 0;
					bone.ascaleX = js_Boot.__cast(Math.sqrt(ra * ra + rc * rc) , Float);
					if(bone.ascaleX > 0.0001) {
						var det = ra * rd - rb * rc;
						bone.ascaleY = det / bone.ascaleX;
						bone.ashearY = js_Boot.__cast(Math.atan2(ra * rb + rc * rd,det) , Float) * spine_utils_SpineUtils.radDeg;
						bone.arotation = js_Boot.__cast(Math.atan2(rc,ra) , Float) * spine_utils_SpineUtils.radDeg;
					} else {
						bone.ascaleX = 0;
						bone.ascaleY = js_Boot.__cast(Math.sqrt(rb * rb + rd * rd) , Float);
						bone.ashearY = 0;
						bone.arotation = 90 - js_Boot.__cast(Math.atan2(rd,rb) , Float) * spine_utils_SpineUtils.radDeg;
					}
				}
			}
			var rotation = bone.arotation;
			if(rotateMix != 0) {
				var r = target.arotation - rotation + this.data.offsetRotation;
				r -= (16384 - (16384.499999999996 - r / 360 | 0)) * 360;
				rotation += r * rotateMix;
			}
			var x = bone.ax;
			var y = bone.ay;
			if(translateMix != 0) {
				x += (target.ax - x + this.data.offsetX) * translateMix;
				y += (target.ay - y + this.data.offsetY) * translateMix;
			}
			var scaleX = bone.ascaleX;
			var scaleY = bone.ascaleY;
			if(scaleMix > 0) {
				if(scaleX != 0) {
					scaleX = (scaleX + (target.ascaleX - scaleX + this.data.offsetScaleX) * scaleMix) / scaleX;
				}
				if(scaleY != 0) {
					scaleY = (scaleY + (target.ascaleY - scaleY + this.data.offsetScaleY) * scaleMix) / scaleY;
				}
			}
			var shearY = bone.ashearY;
			if(shearMix > 0) {
				var r1 = target.ashearY - shearY + this.data.offsetShearY;
				r1 -= (16384 - (16384.499999999996 - r1 / 360 | 0)) * 360;
				bone.shearY += r1 * shearMix;
			}
			bone.updateWorldTransformWithData(x,y,rotation,scaleX,scaleY,bone.ashearX,shearY);
			++i;
		}
	}
	,applyRelativeLocal: function() {
		var rotateMix = this.rotateMix;
		var translateMix = this.translateMix;
		var scaleMix = this.scaleMix;
		var shearMix = this.shearMix;
		var target = this.target;
		if(!target.appliedValid) {
			target.appliedValid = true;
			var parent = target.parent;
			if(parent == null) {
				target.ax = target.worldX;
				target.ay = target.worldY;
				target.arotation = js_Boot.__cast(Math.atan2(target.c,target.a) , Float) * spine_utils_SpineUtils.radDeg;
				target.ascaleX = js_Boot.__cast(Math.sqrt(target.a * target.a + target.c * target.c) , Float);
				target.ascaleY = js_Boot.__cast(Math.sqrt(target.b * target.b + target.d * target.d) , Float);
				target.ashearX = 0;
				target.ashearY = js_Boot.__cast(Math.atan2(target.a * target.b + target.c * target.d,target.a * target.d - target.b * target.c) , Float) * spine_utils_SpineUtils.radDeg;
			} else {
				var pa = parent.a;
				var pb = parent.b;
				var pc = parent.c;
				var pd = parent.d;
				var pid = 1 / (pa * pd - pb * pc);
				var dx = target.worldX - parent.worldX;
				var dy = target.worldY - parent.worldY;
				target.ax = dx * pd * pid - dy * pb * pid;
				target.ay = dy * pa * pid - dx * pc * pid;
				var ia = pid * pd;
				var id = pid * pa;
				var ib = pid * pb;
				var ic = pid * pc;
				var ra = ia * target.a - ib * target.c;
				var rb = ia * target.b - ib * target.d;
				var rc = id * target.c - ic * target.a;
				var rd = id * target.d - ic * target.b;
				target.ashearX = 0;
				target.ascaleX = js_Boot.__cast(Math.sqrt(ra * ra + rc * rc) , Float);
				if(target.ascaleX > 0.0001) {
					var det = ra * rd - rb * rc;
					target.ascaleY = det / target.ascaleX;
					target.ashearY = js_Boot.__cast(Math.atan2(ra * rb + rc * rd,det) , Float) * spine_utils_SpineUtils.radDeg;
					target.arotation = js_Boot.__cast(Math.atan2(rc,ra) , Float) * spine_utils_SpineUtils.radDeg;
				} else {
					target.ascaleX = 0;
					target.ascaleY = js_Boot.__cast(Math.sqrt(rb * rb + rd * rd) , Float);
					target.ashearY = 0;
					target.arotation = 90 - js_Boot.__cast(Math.atan2(rd,rb) , Float) * spine_utils_SpineUtils.radDeg;
				}
			}
		}
		var bones = this.bones;
		var i = 0;
		var n = bones.length;
		while(i < n) {
			var bone = bones[i];
			if(!bone.appliedValid) {
				bone.appliedValid = true;
				var parent = bone.parent;
				if(parent == null) {
					bone.ax = bone.worldX;
					bone.ay = bone.worldY;
					bone.arotation = js_Boot.__cast(Math.atan2(bone.c,bone.a) , Float) * spine_utils_SpineUtils.radDeg;
					bone.ascaleX = js_Boot.__cast(Math.sqrt(bone.a * bone.a + bone.c * bone.c) , Float);
					bone.ascaleY = js_Boot.__cast(Math.sqrt(bone.b * bone.b + bone.d * bone.d) , Float);
					bone.ashearX = 0;
					bone.ashearY = js_Boot.__cast(Math.atan2(bone.a * bone.b + bone.c * bone.d,bone.a * bone.d - bone.b * bone.c) , Float) * spine_utils_SpineUtils.radDeg;
				} else {
					var pa = parent.a;
					var pb = parent.b;
					var pc = parent.c;
					var pd = parent.d;
					var pid = 1 / (pa * pd - pb * pc);
					var dx = bone.worldX - parent.worldX;
					var dy = bone.worldY - parent.worldY;
					bone.ax = dx * pd * pid - dy * pb * pid;
					bone.ay = dy * pa * pid - dx * pc * pid;
					var ia = pid * pd;
					var id = pid * pa;
					var ib = pid * pb;
					var ic = pid * pc;
					var ra = ia * bone.a - ib * bone.c;
					var rb = ia * bone.b - ib * bone.d;
					var rc = id * bone.c - ic * bone.a;
					var rd = id * bone.d - ic * bone.b;
					bone.ashearX = 0;
					bone.ascaleX = js_Boot.__cast(Math.sqrt(ra * ra + rc * rc) , Float);
					if(bone.ascaleX > 0.0001) {
						var det = ra * rd - rb * rc;
						bone.ascaleY = det / bone.ascaleX;
						bone.ashearY = js_Boot.__cast(Math.atan2(ra * rb + rc * rd,det) , Float) * spine_utils_SpineUtils.radDeg;
						bone.arotation = js_Boot.__cast(Math.atan2(rc,ra) , Float) * spine_utils_SpineUtils.radDeg;
					} else {
						bone.ascaleX = 0;
						bone.ascaleY = js_Boot.__cast(Math.sqrt(rb * rb + rd * rd) , Float);
						bone.ashearY = 0;
						bone.arotation = 90 - js_Boot.__cast(Math.atan2(rd,rb) , Float) * spine_utils_SpineUtils.radDeg;
					}
				}
			}
			var rotation = bone.arotation;
			if(rotateMix != 0) {
				rotation += (target.arotation + this.data.offsetRotation) * rotateMix;
			}
			var x = bone.ax;
			var y = bone.ay;
			if(translateMix != 0) {
				x += (target.ax + this.data.offsetX) * translateMix;
				y += (target.ay + this.data.offsetY) * translateMix;
			}
			var scaleX = bone.ascaleX;
			var scaleY = bone.ascaleY;
			if(scaleMix > 0) {
				scaleX *= (target.ascaleX - 1 + this.data.offsetScaleX) * scaleMix + 1;
				scaleY *= (target.ascaleY - 1 + this.data.offsetScaleY) * scaleMix + 1;
			}
			var shearY = bone.ashearY;
			if(shearMix > 0) {
				shearY += (target.ashearY + this.data.offsetShearY) * shearMix;
			}
			bone.updateWorldTransformWithData(x,y,rotation,scaleX,scaleY,bone.ashearX,shearY);
			++i;
		}
	}
	,getOrder: function() {
		return this.data.order;
	}
	,getBones: function() {
		return this.bones;
	}
	,getTarget: function() {
		return this.target;
	}
	,setTarget: function(target) {
		this.target = target;
	}
	,getRotateMix: function() {
		return this.rotateMix;
	}
	,setRotateMix: function(rotateMix) {
		this.rotateMix = rotateMix;
	}
	,getTranslateMix: function() {
		return this.translateMix;
	}
	,setTranslateMix: function(translateMix) {
		this.translateMix = translateMix;
	}
	,getScaleMix: function() {
		return this.scaleMix;
	}
	,setScaleMix: function(scaleMix) {
		this.scaleMix = scaleMix;
	}
	,getShearMix: function() {
		return this.shearMix;
	}
	,setShearMix: function(shearMix) {
		this.shearMix = shearMix;
	}
	,getData: function() {
		return this.data;
	}
	,toString: function() {
		return this.data.name;
	}
	,__class__: spine_TransformConstraint
};
var spine_TransformConstraintData = function(name) {
	this.local = false;
	this.relative = false;
	this.offsetShearY = 0;
	this.offsetScaleY = 0;
	this.offsetScaleX = 0;
	this.offsetY = 0;
	this.offsetX = 0;
	this.offsetRotation = 0;
	this.shearMix = 0;
	this.scaleMix = 0;
	this.translateMix = 0;
	this.rotateMix = 0;
	this.bones = [];
	this.order = 0;
	if(name == null) {
		throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("name cannot be null."));
	}
	this.name = name;
};
$hxClasses["spine.TransformConstraintData"] = spine_TransformConstraintData;
spine_TransformConstraintData.__name__ = "spine.TransformConstraintData";
spine_TransformConstraintData.prototype = {
	name: null
	,order: null
	,bones: null
	,target: null
	,rotateMix: null
	,translateMix: null
	,scaleMix: null
	,shearMix: null
	,offsetRotation: null
	,offsetX: null
	,offsetY: null
	,offsetScaleX: null
	,offsetScaleY: null
	,offsetShearY: null
	,relative: null
	,local: null
	,getName: function() {
		return this.name;
	}
	,getOrder: function() {
		return this.order;
	}
	,setOrder: function(order) {
		this.order = order;
	}
	,getBones: function() {
		return this.bones;
	}
	,getTarget: function() {
		return this.target;
	}
	,setTarget: function(target) {
		if(target == null) {
			throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("target cannot be null."));
		}
		this.target = target;
	}
	,getRotateMix: function() {
		return this.rotateMix;
	}
	,setRotateMix: function(rotateMix) {
		this.rotateMix = rotateMix;
	}
	,getTranslateMix: function() {
		return this.translateMix;
	}
	,setTranslateMix: function(translateMix) {
		this.translateMix = translateMix;
	}
	,getScaleMix: function() {
		return this.scaleMix;
	}
	,setScaleMix: function(scaleMix) {
		this.scaleMix = scaleMix;
	}
	,getShearMix: function() {
		return this.shearMix;
	}
	,setShearMix: function(shearMix) {
		this.shearMix = shearMix;
	}
	,getOffsetRotation: function() {
		return this.offsetRotation;
	}
	,setOffsetRotation: function(offsetRotation) {
		this.offsetRotation = offsetRotation;
	}
	,getOffsetX: function() {
		return this.offsetX;
	}
	,setOffsetX: function(offsetX) {
		this.offsetX = offsetX;
	}
	,getOffsetY: function() {
		return this.offsetY;
	}
	,setOffsetY: function(offsetY) {
		this.offsetY = offsetY;
	}
	,getOffsetScaleX: function() {
		return this.offsetScaleX;
	}
	,setOffsetScaleX: function(offsetScaleX) {
		this.offsetScaleX = offsetScaleX;
	}
	,getOffsetScaleY: function() {
		return this.offsetScaleY;
	}
	,setOffsetScaleY: function(offsetScaleY) {
		this.offsetScaleY = offsetScaleY;
	}
	,getOffsetShearY: function() {
		return this.offsetShearY;
	}
	,setOffsetShearY: function(offsetShearY) {
		this.offsetShearY = offsetShearY;
	}
	,getRelative: function() {
		return this.relative;
	}
	,setRelative: function(relative) {
		this.relative = relative;
	}
	,getLocal: function() {
		return this.local;
	}
	,setLocal: function(local) {
		this.local = local;
	}
	,toString: function() {
		return this.name;
	}
	,__class__: spine_TransformConstraintData
};
var spine_attachments_AttachmentLoader = function() { };
$hxClasses["spine.attachments.AttachmentLoader"] = spine_attachments_AttachmentLoader;
spine_attachments_AttachmentLoader.__name__ = "spine.attachments.AttachmentLoader";
spine_attachments_AttachmentLoader.__isInterface__ = true;
spine_attachments_AttachmentLoader.prototype = {
	newRegionAttachment: null
	,newMeshAttachment: null
	,newBoundingBoxAttachment: null
	,newClippingAttachment: null
	,newPathAttachment: null
	,newPointAttachment: null
	,__class__: spine_attachments_AttachmentLoader
};
var spine_attachments_AtlasAttachmentLoader = function(atlas) {
	if(atlas == null) {
		throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("atlas cannot be null."));
	}
	this.atlas = atlas;
};
$hxClasses["spine.attachments.AtlasAttachmentLoader"] = spine_attachments_AtlasAttachmentLoader;
spine_attachments_AtlasAttachmentLoader.__name__ = "spine.attachments.AtlasAttachmentLoader";
spine_attachments_AtlasAttachmentLoader.__interfaces__ = [spine_attachments_AttachmentLoader];
spine_attachments_AtlasAttachmentLoader.prototype = {
	atlas: null
	,newRegionAttachment: function(skin,name,path) {
		var region = this.atlas.findRegion(path);
		if(region == null) {
			throw haxe_Exception.thrown(new spine_support_error_RuntimeException("Region not found in atlas: " + path + " (region attachment: " + name + ")"));
		}
		var attachment = new spine_attachments_RegionAttachment(name);
		if(region == null) {
			throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("region cannot be null."));
		}
		attachment.region = region;
		var uvs = attachment.uvs;
		if(((region) instanceof spine_support_graphics_AtlasRegion) && (js_Boot.__cast(region , spine_support_graphics_AtlasRegion)).rotate) {
			uvs[4] = region.u;
			uvs[5] = region.v2;
			uvs[6] = region.u;
			uvs[7] = region.v;
			uvs[0] = region.u2;
			uvs[1] = region.v;
			uvs[2] = region.u2;
			uvs[3] = region.v2;
		} else {
			uvs[2] = region.u;
			uvs[3] = region.v2;
			uvs[4] = region.u;
			uvs[5] = region.v;
			uvs[6] = region.u2;
			uvs[7] = region.v;
			uvs[0] = region.u2;
			uvs[1] = region.v2;
		}
		return attachment;
	}
	,newMeshAttachment: function(skin,name,path) {
		var region = this.atlas.findRegion(path);
		if(region == null) {
			throw haxe_Exception.thrown(new spine_support_error_RuntimeException("Region not found in atlas: " + path + " (mesh attachment: " + name + ")"));
		}
		var attachment = new spine_attachments_MeshAttachment(name);
		if(region == null) {
			throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("region cannot be null."));
		}
		attachment.region = region;
		return attachment;
	}
	,newBoundingBoxAttachment: function(skin,name) {
		return new spine_attachments_BoundingBoxAttachment(name);
	}
	,newClippingAttachment: function(skin,name) {
		return new spine_attachments_ClippingAttachment(name);
	}
	,newPathAttachment: function(skin,name) {
		return new spine_attachments_PathAttachment(name);
	}
	,newPointAttachment: function(skin,name) {
		return new spine_attachments_PointAttachment(name);
	}
	,__class__: spine_attachments_AtlasAttachmentLoader
};
var spine_attachments_Attachment = function(name) {
	if(name == null) {
		throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("name cannot be null."));
	}
	this.name = name;
};
$hxClasses["spine.attachments.Attachment"] = spine_attachments_Attachment;
spine_attachments_Attachment.__name__ = "spine.attachments.Attachment";
spine_attachments_Attachment.prototype = {
	name: null
	,getName: function() {
		return this.name;
	}
	,toString: function() {
		return this.name;
	}
	,__class__: spine_attachments_Attachment
};
var spine_attachments_AttachmentType_$enum = function() { };
$hxClasses["spine.attachments.AttachmentType_enum"] = spine_attachments_AttachmentType_$enum;
spine_attachments_AttachmentType_$enum.__name__ = "spine.attachments.AttachmentType_enum";
spine_attachments_AttachmentType_$enum.valueOf = function(value) {
	switch(value) {
	case "boundingbox":
		return 1;
	case "clipping":
		return 6;
	case "linkedmesh":
		return 3;
	case "mesh":
		return 2;
	case "path":
		return 4;
	case "point":
		return 5;
	case "region":
		return 0;
	default:
		return 0;
	}
};
var spine_attachments_VertexAttachment = function(name) {
	this.worldVerticesLength = 0;
	this.id = (spine_attachments_VertexAttachment.nextID++ & 65535) << 11;
	spine_attachments_Attachment.call(this,name);
};
$hxClasses["spine.attachments.VertexAttachment"] = spine_attachments_VertexAttachment;
spine_attachments_VertexAttachment.__name__ = "spine.attachments.VertexAttachment";
spine_attachments_VertexAttachment.__super__ = spine_attachments_Attachment;
spine_attachments_VertexAttachment.prototype = $extend(spine_attachments_Attachment.prototype,{
	id: null
	,bones: null
	,vertices: null
	,worldVerticesLength: null
	,computeWorldVertices: function(slot,start,count,worldVertices,offset,stride) {
		count = offset + (count >> 1) * stride;
		var skeleton = slot.bone.skeleton;
		var deformArray = slot.attachmentVertices;
		var vertices = this.vertices;
		var bones = this.bones;
		if(bones == null) {
			if(deformArray.length > 0) {
				vertices = deformArray;
			}
			var bone = slot.bone;
			var x = bone.worldX;
			var y = bone.worldY;
			var a = bone.a;
			var b = bone.b;
			var c = bone.c;
			var d = bone.d;
			var v = start;
			var w = offset;
			while(w < count) {
				var vx = vertices[v];
				var vy = vertices[v + 1];
				worldVertices[w] = vx * a + vy * b + x;
				worldVertices[w + 1] = vx * c + vy * d + y;
				v += 2;
				w += stride;
			}
			return;
		}
		var v = 0;
		var skip = 0;
		var i = 0;
		while(i < start) {
			var n = bones[v];
			v += n + 1;
			skip += n;
			i += 2;
		}
		var skeletonBones = skeleton.getBones();
		if(deformArray.length == 0) {
			var w = offset;
			var b = skip * 3;
			while(w < count) {
				var wx = 0;
				var wy = 0;
				var n = bones[v++];
				n += v;
				while(v < n) {
					var bone = js_Boot.__cast(skeletonBones[bones[v]] , spine_Bone);
					var vx = vertices[b];
					var vy = vertices[b + 1];
					var weight = vertices[b + 2];
					wx += (vx * bone.a + vy * bone.b + bone.worldX) * weight;
					wy += (vx * bone.c + vy * bone.d + bone.worldY) * weight;
					++v;
					b += 3;
				}
				worldVertices[w] = wx;
				worldVertices[w + 1] = wy;
				w += stride;
			}
		} else {
			var deform = deformArray;
			var w = offset;
			var b = skip * 3;
			var f = skip << 1;
			while(w < count) {
				var wx = 0;
				var wy = 0;
				var n = bones[v++];
				n += v;
				while(v < n) {
					var bone = js_Boot.__cast(skeletonBones[bones[v]] , spine_Bone);
					var vx = vertices[b] + deform[f];
					var vy = vertices[b + 1] + deform[f + 1];
					var weight = vertices[b + 2];
					wx += (vx * bone.a + vy * bone.b + bone.worldX) * weight;
					wy += (vx * bone.c + vy * bone.d + bone.worldY) * weight;
					++v;
					b += 3;
					f += 2;
				}
				worldVertices[w] = wx;
				worldVertices[w + 1] = wy;
				w += stride;
			}
		}
	}
	,applyDeform: function(sourceAttachment) {
		return this == sourceAttachment;
	}
	,getBones: function() {
		return this.bones;
	}
	,setBones: function(bones) {
		this.bones = bones;
	}
	,getVertices: function() {
		return this.vertices;
	}
	,setVertices: function(vertices) {
		this.vertices = vertices;
	}
	,getWorldVerticesLength: function() {
		return this.worldVerticesLength;
	}
	,setWorldVerticesLength: function(worldVerticesLength) {
		this.worldVerticesLength = worldVerticesLength;
	}
	,getId: function() {
		return this.id;
	}
	,__class__: spine_attachments_VertexAttachment
});
var spine_attachments_BoundingBoxAttachment = function(name) {
	this.color = new spine_support_graphics_Color(0.38,0.94,0,1);
	spine_attachments_VertexAttachment.call(this,name);
};
$hxClasses["spine.attachments.BoundingBoxAttachment"] = spine_attachments_BoundingBoxAttachment;
spine_attachments_BoundingBoxAttachment.__name__ = "spine.attachments.BoundingBoxAttachment";
spine_attachments_BoundingBoxAttachment.__super__ = spine_attachments_VertexAttachment;
spine_attachments_BoundingBoxAttachment.prototype = $extend(spine_attachments_VertexAttachment.prototype,{
	color: null
	,getColor: function() {
		return this.color;
	}
	,__class__: spine_attachments_BoundingBoxAttachment
});
var spine_attachments_ClippingAttachment = function(name) {
	this.color = new spine_support_graphics_Color(0.2275,0.2275,0.8078,1);
	spine_attachments_VertexAttachment.call(this,name);
};
$hxClasses["spine.attachments.ClippingAttachment"] = spine_attachments_ClippingAttachment;
spine_attachments_ClippingAttachment.__name__ = "spine.attachments.ClippingAttachment";
spine_attachments_ClippingAttachment.__super__ = spine_attachments_VertexAttachment;
spine_attachments_ClippingAttachment.prototype = $extend(spine_attachments_VertexAttachment.prototype,{
	endSlot: null
	,color: null
	,getEndSlot: function() {
		return this.endSlot;
	}
	,setEndSlot: function(endSlot) {
		this.endSlot = endSlot;
	}
	,getColor: function() {
		return this.color;
	}
	,__class__: spine_attachments_ClippingAttachment
});
var spine_attachments_MeshAttachment = function(name) {
	this.height = 0;
	this.width = 0;
	this.inheritDeform = false;
	this.hullLength = 0;
	this.color = new spine_support_graphics_Color(1,1,1,1);
	this.uvs = null;
	spine_attachments_VertexAttachment.call(this,name);
};
$hxClasses["spine.attachments.MeshAttachment"] = spine_attachments_MeshAttachment;
spine_attachments_MeshAttachment.__name__ = "spine.attachments.MeshAttachment";
spine_attachments_MeshAttachment.__super__ = spine_attachments_VertexAttachment;
spine_attachments_MeshAttachment.prototype = $extend(spine_attachments_VertexAttachment.prototype,{
	region: null
	,path: null
	,regionUVs: null
	,uvs: null
	,triangles: null
	,color: null
	,hullLength: null
	,parentMesh: null
	,inheritDeform: null
	,edges: null
	,width: null
	,height: null
	,setRegion: function(region) {
		if(region == null) {
			throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("region cannot be null."));
		}
		this.region = region;
	}
	,getRegion: function() {
		if(this.region == null) {
			throw haxe_Exception.thrown(new spine_support_error_IllegalStateException("Region has not been set: " + Std.string(this)));
		}
		return this.region;
	}
	,updateUVs: function() {
		var u = 0;
		var v = 0;
		var width = 0;
		var height = 0;
		if(this.region == null) {
			v = 0;
			u = v;
			height = 1;
			width = height;
		} else {
			u = this.region.u;
			v = this.region.v;
			width = this.region.u2 - u;
			height = this.region.v2 - v;
		}
		var regionUVs = this.regionUVs;
		if(this.uvs == null || this.uvs.length != regionUVs.length) {
			var length = regionUVs.length;
			if(length == null) {
				length = 0;
			}
			var len = length | 0;
			var capacity = len != 0 ? len : 16;
			var this1 = [];
			var array = this1;
			if(length > 0) {
				var len1 = array.length;
				if(len1 > len) {
					array.splice(len,len - len1);
				} else if(len1 < len) {
					while(len1 < len) {
						array.push(0);
						++len1;
					}
				}
			}
			this.uvs = array;
		}
		var uvs = this.uvs;
		if(((this.region) instanceof spine_support_graphics_AtlasRegion) && (js_Boot.__cast(this.region , spine_support_graphics_AtlasRegion)).rotate) {
			var i = 0;
			var n = uvs.length;
			while(i < n) {
				uvs[i] = u + regionUVs[i + 1] * width;
				uvs[i + 1] = v + height - regionUVs[i] * height;
				i += 2;
			}
		} else {
			var i = 0;
			var n = uvs.length;
			while(i < n) {
				uvs[i] = u + regionUVs[i] * width;
				uvs[i + 1] = v + regionUVs[i + 1] * height;
				i += 2;
			}
		}
	}
	,applyDeform: function(sourceAttachment) {
		if(this != sourceAttachment) {
			if(this.inheritDeform) {
				return this.parentMesh == sourceAttachment;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,getTriangles: function() {
		return this.triangles;
	}
	,setTriangles: function(triangles) {
		this.triangles = triangles;
	}
	,getRegionUVs: function() {
		return this.regionUVs;
	}
	,setRegionUVs: function(regionUVs) {
		this.regionUVs = regionUVs;
	}
	,getUVs: function() {
		return this.uvs;
	}
	,setUVs: function(uvs) {
		this.uvs = uvs;
	}
	,getColor: function() {
		return this.color;
	}
	,getPath: function() {
		return this.path;
	}
	,setPath: function(path) {
		this.path = path;
	}
	,getHullLength: function() {
		return this.hullLength;
	}
	,setHullLength: function(hullLength) {
		this.hullLength = hullLength;
	}
	,setEdges: function(edges) {
		this.edges = edges;
	}
	,getEdges: function() {
		return this.edges;
	}
	,getWidth: function() {
		return this.width;
	}
	,setWidth: function(width) {
		this.width = width;
	}
	,getHeight: function() {
		return this.height;
	}
	,setHeight: function(height) {
		this.height = height;
	}
	,getParentMesh: function() {
		return this.parentMesh;
	}
	,setParentMesh: function(parentMesh) {
		this.parentMesh = parentMesh;
		if(parentMesh != null) {
			this.bones = parentMesh.bones;
			this.vertices = parentMesh.vertices;
			this.regionUVs = parentMesh.regionUVs;
			this.triangles = parentMesh.triangles;
			this.hullLength = parentMesh.hullLength;
			this.worldVerticesLength = parentMesh.worldVerticesLength;
			this.edges = parentMesh.edges;
			this.width = parentMesh.width;
			this.height = parentMesh.height;
		}
	}
	,getInheritDeform: function() {
		return this.inheritDeform;
	}
	,setInheritDeform: function(inheritDeform) {
		this.inheritDeform = inheritDeform;
	}
	,__class__: spine_attachments_MeshAttachment
});
var spine_attachments_PathAttachment = function(name) {
	this.color = new spine_support_graphics_Color(1,0.5,0,1);
	this.constantSpeed = false;
	this.closed = false;
	spine_attachments_VertexAttachment.call(this,name);
};
$hxClasses["spine.attachments.PathAttachment"] = spine_attachments_PathAttachment;
spine_attachments_PathAttachment.__name__ = "spine.attachments.PathAttachment";
spine_attachments_PathAttachment.__super__ = spine_attachments_VertexAttachment;
spine_attachments_PathAttachment.prototype = $extend(spine_attachments_VertexAttachment.prototype,{
	lengths: null
	,closed: null
	,constantSpeed: null
	,color: null
	,getClosed: function() {
		return this.closed;
	}
	,setClosed: function(closed) {
		this.closed = closed;
	}
	,getConstantSpeed: function() {
		return this.constantSpeed;
	}
	,setConstantSpeed: function(constantSpeed) {
		this.constantSpeed = constantSpeed;
	}
	,getLengths: function() {
		return this.lengths;
	}
	,setLengths: function(lengths) {
		this.lengths = lengths;
	}
	,getColor: function() {
		return this.color;
	}
	,__class__: spine_attachments_PathAttachment
});
var spine_attachments_PointAttachment = function(name) {
	this.color = new spine_support_graphics_Color(0.9451,0.9451,0,1);
	this.rotation = 0;
	this.y = 0;
	this.x = 0;
	spine_attachments_Attachment.call(this,name);
};
$hxClasses["spine.attachments.PointAttachment"] = spine_attachments_PointAttachment;
spine_attachments_PointAttachment.__name__ = "spine.attachments.PointAttachment";
spine_attachments_PointAttachment.__super__ = spine_attachments_Attachment;
spine_attachments_PointAttachment.prototype = $extend(spine_attachments_Attachment.prototype,{
	x: null
	,y: null
	,rotation: null
	,color: null
	,getX: function() {
		return this.x;
	}
	,setX: function(x) {
		this.x = x;
	}
	,getY: function() {
		return this.y;
	}
	,setY: function(y) {
		this.y = y;
	}
	,getRotation: function() {
		return this.rotation;
	}
	,setRotation: function(rotation) {
		this.rotation = rotation;
	}
	,getColor: function() {
		return this.color;
	}
	,computeWorldPosition: function(bone,point) {
		point.x = this.x * bone.a + this.y * bone.b + bone.worldX;
		point.y = this.x * bone.c + this.y * bone.d + bone.worldY;
		return point;
	}
	,computeWorldRotation: function(bone) {
		var cos = Math.cos(this.rotation * spine_support_math_MathUtils.degRad);
		var sin = Math.sin(this.rotation * spine_support_math_MathUtils.degRad);
		var x = cos * bone.a + sin * bone.b;
		var y = cos * bone.c + sin * bone.d;
		return js_Boot.__cast(Math.atan2(y,x) * spine_support_math_MathUtils.radDeg , Float);
	}
	,__class__: spine_attachments_PointAttachment
});
var spine_attachments_RegionAttachment = function(name) {
	this.color = new spine_support_graphics_Color(1,1,1,1);
	var array = [];
	var len = array.length;
	if(len > 8) {
		array.splice(8,8 - len);
	} else if(len < 8) {
		while(len < 8) {
			array.push(0);
			++len;
		}
	}
	this.offset = array;
	var array = [];
	var len = array.length;
	if(len > 8) {
		array.splice(8,8 - len);
	} else if(len < 8) {
		while(len < 8) {
			array.push(0);
			++len;
		}
	}
	this.uvs = array;
	this.height = 0;
	this.width = 0;
	this.rotation = 0;
	this.scaleY = 1;
	this.scaleX = 1;
	this.y = 0;
	this.x = 0;
	spine_attachments_Attachment.call(this,name);
};
$hxClasses["spine.attachments.RegionAttachment"] = spine_attachments_RegionAttachment;
spine_attachments_RegionAttachment.__name__ = "spine.attachments.RegionAttachment";
spine_attachments_RegionAttachment.__super__ = spine_attachments_Attachment;
spine_attachments_RegionAttachment.prototype = $extend(spine_attachments_Attachment.prototype,{
	region: null
	,path: null
	,x: null
	,y: null
	,scaleX: null
	,scaleY: null
	,rotation: null
	,width: null
	,height: null
	,uvs: null
	,offset: null
	,color: null
	,updateOffset: function() {
		var width = this.width;
		var height = this.height;
		var localX2 = width / 2;
		var localY2 = height / 2;
		var localX = -localX2;
		var localY = -localY2;
		if(((this.region) instanceof spine_support_graphics_AtlasRegion)) {
			var region = js_Boot.__cast(this.region , spine_support_graphics_AtlasRegion);
			if(region.rotate) {
				localX += region.offsetX / region.originalWidth * width;
				localY += region.offsetY / region.originalHeight * height;
				localX2 -= (region.originalWidth - region.offsetX - region.packedHeight) / region.originalWidth * width;
				localY2 -= (region.originalHeight - region.offsetY - region.packedWidth) / region.originalHeight * height;
			} else {
				localX += region.offsetX / region.originalWidth * width;
				localY += region.offsetY / region.originalHeight * height;
				localX2 -= (region.originalWidth - region.offsetX - region.packedWidth) / region.originalWidth * width;
				localY2 -= (region.originalHeight - region.offsetY - region.packedHeight) / region.originalHeight * height;
			}
		}
		var scaleX = this.scaleX;
		var scaleY = this.scaleY;
		localX *= scaleX;
		localY *= scaleY;
		localX2 *= scaleX;
		localY2 *= scaleY;
		var rotation = this.rotation;
		var cos = js_Boot.__cast(Math.cos(spine_support_math_MathUtils.degRad * rotation) , Float);
		var sin = js_Boot.__cast(Math.sin(spine_support_math_MathUtils.degRad * rotation) , Float);
		var x = this.x;
		var y = this.y;
		var localXCos = localX * cos + x;
		var localXSin = localX * sin;
		var localYCos = localY * cos + y;
		var localYSin = localY * sin;
		var localX2Cos = localX2 * cos + x;
		var localX2Sin = localX2 * sin;
		var localY2Cos = localY2 * cos + y;
		var localY2Sin = localY2 * sin;
		var offset = this.offset;
		offset[0] = localXCos - localYSin;
		offset[1] = localYCos + localXSin;
		offset[2] = localXCos - localY2Sin;
		offset[3] = localY2Cos + localXSin;
		offset[4] = localX2Cos - localY2Sin;
		offset[5] = localY2Cos + localX2Sin;
		offset[6] = localX2Cos - localYSin;
		offset[7] = localYCos + localX2Sin;
	}
	,setRegion: function(region) {
		if(region == null) {
			throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("region cannot be null."));
		}
		this.region = region;
		var uvs = this.uvs;
		if(((region) instanceof spine_support_graphics_AtlasRegion) && (js_Boot.__cast(region , spine_support_graphics_AtlasRegion)).rotate) {
			uvs[4] = region.u;
			uvs[5] = region.v2;
			uvs[6] = region.u;
			uvs[7] = region.v;
			uvs[0] = region.u2;
			uvs[1] = region.v;
			uvs[2] = region.u2;
			uvs[3] = region.v2;
		} else {
			uvs[2] = region.u;
			uvs[3] = region.v2;
			uvs[4] = region.u;
			uvs[5] = region.v;
			uvs[6] = region.u2;
			uvs[7] = region.v;
			uvs[0] = region.u2;
			uvs[1] = region.v2;
		}
	}
	,getRegion: function() {
		if(this.region == null) {
			throw haxe_Exception.thrown(new spine_support_error_IllegalStateException("Region has not been set: " + Std.string(this)));
		}
		return this.region;
	}
	,computeWorldVertices: function(bone,worldVertices,offset,stride) {
		var vertexOffset = this.offset;
		var x = bone.worldX;
		var y = bone.worldY;
		var a = bone.a;
		var b = bone.b;
		var c = bone.c;
		var d = bone.d;
		var offsetX = 0;
		var offsetY = 0;
		offsetX = vertexOffset[6];
		offsetY = vertexOffset[7];
		worldVertices[offset] = offsetX * a + offsetY * b + x;
		worldVertices[offset + 1] = offsetX * c + offsetY * d + y;
		offset += stride;
		offsetX = vertexOffset[0];
		offsetY = vertexOffset[1];
		worldVertices[offset] = offsetX * a + offsetY * b + x;
		worldVertices[offset + 1] = offsetX * c + offsetY * d + y;
		offset += stride;
		offsetX = vertexOffset[2];
		offsetY = vertexOffset[3];
		worldVertices[offset] = offsetX * a + offsetY * b + x;
		worldVertices[offset + 1] = offsetX * c + offsetY * d + y;
		offset += stride;
		offsetX = vertexOffset[4];
		offsetY = vertexOffset[5];
		worldVertices[offset] = offsetX * a + offsetY * b + x;
		worldVertices[offset + 1] = offsetX * c + offsetY * d + y;
	}
	,getOffset: function() {
		return this.offset;
	}
	,getUVs: function() {
		return this.uvs;
	}
	,getX: function() {
		return this.x;
	}
	,setX: function(x) {
		this.x = x;
	}
	,getY: function() {
		return this.y;
	}
	,setY: function(y) {
		this.y = y;
	}
	,getScaleX: function() {
		return this.scaleX;
	}
	,setScaleX: function(scaleX) {
		this.scaleX = scaleX;
	}
	,getScaleY: function() {
		return this.scaleY;
	}
	,setScaleY: function(scaleY) {
		this.scaleY = scaleY;
	}
	,getRotation: function() {
		return this.rotation;
	}
	,setRotation: function(rotation) {
		this.rotation = rotation;
	}
	,getWidth: function() {
		return this.width;
	}
	,setWidth: function(width) {
		this.width = width;
	}
	,getHeight: function() {
		return this.height;
	}
	,setHeight: function(height) {
		this.height = height;
	}
	,getColor: function() {
		return this.color;
	}
	,getPath: function() {
		return this.path;
	}
	,setPath: function(path) {
		this.path = path;
	}
	,__class__: spine_attachments_RegionAttachment
});
var spine_base_SpineBaseDisplay = function() { };
$hxClasses["spine.base.SpineBaseDisplay"] = spine_base_SpineBaseDisplay;
spine_base_SpineBaseDisplay.__name__ = "spine.base.SpineBaseDisplay";
spine_base_SpineBaseDisplay.__isInterface__ = true;
spine_base_SpineBaseDisplay.prototype = {
	onSpineUpdate: null
	,__class__: spine_base_SpineBaseDisplay
};
var spine_events_AnimationEvent = function(target) {
	openfl_events_EventDispatcher.call(this,target);
};
$hxClasses["spine.events.AnimationEvent"] = spine_events_AnimationEvent;
spine_events_AnimationEvent.__name__ = "spine.events.AnimationEvent";
spine_events_AnimationEvent.__interfaces__ = [spine_AnimationStateListener];
spine_events_AnimationEvent.__super__ = openfl_events_EventDispatcher;
spine_events_AnimationEvent.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	start: function(entry) {
		var event2 = new spine_events_SpineEvent("start");
		event2.entry = entry;
		this.dispatchEvent(event2);
	}
	,interrupt: function(entry) {
		var event2 = new spine_events_SpineEvent("interrupt");
		event2.entry = entry;
		this.dispatchEvent(event2);
	}
	,end: function(entry) {
		var event2 = new spine_events_SpineEvent("end");
		event2.entry = entry;
		this.dispatchEvent(event2);
	}
	,dispose: function(entry) {
		var event2 = new spine_events_SpineEvent("dispose");
		event2.entry = entry;
		this.dispatchEvent(event2);
	}
	,complete: function(entry) {
		var event2 = new spine_events_SpineEvent("complete");
		event2.entry = entry;
		this.dispatchEvent(event2);
	}
	,event: function(entry,event) {
		var event2 = new spine_events_SpineEvent("event");
		event2.event = event;
		event2.entry = entry;
		this.dispatchEvent(event2);
	}
	,__class__: spine_events_AnimationEvent
});
var spine_events_SpineEvent = function(type,bubbles,cancelable) {
	openfl_events_Event.call(this,type,bubbles,cancelable);
};
$hxClasses["spine.events.SpineEvent"] = spine_events_SpineEvent;
spine_events_SpineEvent.__name__ = "spine.events.SpineEvent";
spine_events_SpineEvent.__super__ = openfl_events_Event;
spine_events_SpineEvent.prototype = $extend(openfl_events_Event.prototype,{
	entry: null
	,event: null
	,__class__: spine_events_SpineEvent
});
var spine_support_graphics_TextureLoader = function() { };
$hxClasses["spine.support.graphics.TextureLoader"] = spine_support_graphics_TextureLoader;
spine_support_graphics_TextureLoader.__name__ = "spine.support.graphics.TextureLoader";
spine_support_graphics_TextureLoader.__isInterface__ = true;
spine_support_graphics_TextureLoader.prototype = {
	loadPage: null
	,loadRegion: null
	,unloadPage: null
	,__class__: spine_support_graphics_TextureLoader
};
var spine_openfl_BitmapDataTextureLoader = function(bitmapData) {
	this._bitmapData = bitmapData;
};
$hxClasses["spine.openfl.BitmapDataTextureLoader"] = spine_openfl_BitmapDataTextureLoader;
spine_openfl_BitmapDataTextureLoader.__name__ = "spine.openfl.BitmapDataTextureLoader";
spine_openfl_BitmapDataTextureLoader.__interfaces__ = [spine_support_graphics_TextureLoader];
spine_openfl_BitmapDataTextureLoader.prototype = {
	_bitmapData: null
	,loadPage: function(page,path) {
		var this1 = this._bitmapData;
		var key = zygame_utils_StringUtils.getName(path);
		var bitmapData = this1.h[key];
		if(bitmapData == null) {
			throw haxe_Exception.thrown("BitmapData not found with name: " + path);
		}
		page.rendererObject = bitmapData;
		page.width = bitmapData.width;
		page.height = bitmapData.height;
	}
	,loadRegion: function(region) {
		if(region.offsetX == 0 && region.offsetY == 0) {
			return;
		}
		if(region.rotate) {
			var v1 = region.width;
			region.width = region.height;
			region.height = v1;
			v1 = region.originalHeight;
			region.originalHeight = region.originalWidth;
			region.originalWidth = v1;
			v1 = region.packedHeight;
			region.packedHeight = region.packedWidth;
			region.packedWidth = v1;
		}
		if(region.originalWidth == region.packedWidth && region.originalHeight == region.packedHeight || region.width < region.packedWidth && region.height < region.packedHeight) {
			if(region.width < region.originalWidth) {
				region.packedWidth = region.width;
			}
			if(region.height < region.originalHeight) {
				region.packedHeight = region.height;
			}
		} else {
			if(region.height < region.originalWidth) {
				region.packedWidth = region.height;
			}
			if(region.width < region.originalHeight) {
				region.packedHeight = region.width;
			}
		}
	}
	,unloadPage: function(page) {
		page.rendererObject.dispose();
	}
	,__class__: spine_openfl_BitmapDataTextureLoader
};
var spine_utils_SkeletonClipping = function() {
	this.scratch = [];
	this.clippedTriangles = [];
	this.clippedVertices = [];
	this.clipOutput = [];
	this.clippingPolygon = [];
	this.triangulator = new spine_utils_Triangulator();
};
$hxClasses["spine.utils.SkeletonClipping"] = spine_utils_SkeletonClipping;
spine_utils_SkeletonClipping.__name__ = "spine.utils.SkeletonClipping";
spine_utils_SkeletonClipping.makeClockwise = function(polygon) {
	var vertices = polygon;
	var verticeslength = polygon.length;
	var area = vertices[verticeslength - 2] * vertices[1] - vertices[0] * vertices[verticeslength - 1];
	var p1x = 0;
	var p1y = 0;
	var p2x = 0;
	var p2y = 0;
	var i = 0;
	var n = verticeslength - 3;
	while(i < n) {
		p1x = vertices[i];
		p1y = vertices[i + 1];
		p2x = vertices[i + 2];
		p2y = vertices[i + 3];
		area += p1x * p2y - p2x * p1y;
		i += 2;
	}
	if(area < 0) {
		return;
	}
	var i = 0;
	var lastX = verticeslength - 2;
	var n = verticeslength >> 1;
	while(i < n) {
		var x = vertices[i];
		var y = vertices[i + 1];
		var other = lastX - i;
		vertices[i] = vertices[other];
		vertices[i + 1] = vertices[other + 1];
		vertices[other] = x;
		vertices[other + 1] = y;
		i += 2;
	}
};
spine_utils_SkeletonClipping.prototype = {
	triangulator: null
	,clippingPolygon: null
	,clipOutput: null
	,clippedVertices: null
	,clippedTriangles: null
	,scratch: null
	,clipAttachment: null
	,clippingPolygons: null
	,clipStart: function(slot,clip) {
		if(this.clipAttachment != null) {
			return 0;
		}
		var n = clip.worldVerticesLength;
		if(n < 6) {
			return 0;
		}
		this.clipAttachment = clip;
		var this1 = this.clippingPolygon;
		var len = this1.length;
		if(len > n) {
			this1.splice(n,n - len);
		} else if(len < n) {
			while(len < n) {
				this1.push(0);
				++len;
			}
		}
		var vertices = this1;
		var count = n;
		count = (count >> 1) * 2;
		var skeleton = slot.bone.skeleton;
		var deformArray = slot.attachmentVertices;
		var vertices1 = clip.vertices;
		var bones = clip.bones;
		if(bones == null) {
			if(deformArray.length > 0) {
				vertices1 = deformArray;
			}
			var bone = slot.bone;
			var x = bone.worldX;
			var y = bone.worldY;
			var a = bone.a;
			var b = bone.b;
			var c = bone.c;
			var d = bone.d;
			var v = 0;
			var w = 0;
			while(w < count) {
				var vx = vertices1[v];
				var vy = vertices1[v + 1];
				vertices[w] = vx * a + vy * b + x;
				vertices[w + 1] = vx * c + vy * d + y;
				v += 2;
				w += 2;
			}
		} else {
			var v = 0;
			var skip = 0;
			var i = 0;
			while(i < 0) {
				var n = bones[v];
				v += n + 1;
				skip += n;
				i += 2;
			}
			var skeletonBones = skeleton.getBones();
			if(deformArray.length == 0) {
				var w = 0;
				var b = skip * 3;
				while(w < count) {
					var wx = 0;
					var wy = 0;
					var n = bones[v++];
					n += v;
					while(v < n) {
						var bone = js_Boot.__cast(skeletonBones[bones[v]] , spine_Bone);
						var vx = vertices1[b];
						var vy = vertices1[b + 1];
						var weight = vertices1[b + 2];
						wx += (vx * bone.a + vy * bone.b + bone.worldX) * weight;
						wy += (vx * bone.c + vy * bone.d + bone.worldY) * weight;
						++v;
						b += 3;
					}
					vertices[w] = wx;
					vertices[w + 1] = wy;
					w += 2;
				}
			} else {
				var deform = deformArray;
				var w = 0;
				var b = skip * 3;
				var f = skip << 1;
				while(w < count) {
					var wx = 0;
					var wy = 0;
					var n = bones[v++];
					n += v;
					while(v < n) {
						var bone = js_Boot.__cast(skeletonBones[bones[v]] , spine_Bone);
						var vx = vertices1[b] + deform[f];
						var vy = vertices1[b + 1] + deform[f + 1];
						var weight = vertices1[b + 2];
						wx += (vx * bone.a + vy * bone.b + bone.worldX) * weight;
						wy += (vx * bone.c + vy * bone.d + bone.worldY) * weight;
						++v;
						b += 3;
						f += 2;
					}
					vertices[w] = wx;
					vertices[w + 1] = wy;
					w += 2;
				}
			}
		}
		var polygon = this.clippingPolygon;
		var vertices = polygon;
		var verticeslength = polygon.length;
		var area = vertices[verticeslength - 2] * vertices[1] - vertices[0] * vertices[verticeslength - 1];
		var p1x = 0;
		var p1y = 0;
		var p2x = 0;
		var p2y = 0;
		var i = 0;
		var n = verticeslength - 3;
		while(i < n) {
			p1x = vertices[i];
			p1y = vertices[i + 1];
			p2x = vertices[i + 2];
			p2y = vertices[i + 3];
			area += p1x * p2y - p2x * p1y;
			i += 2;
		}
		if(!(area < 0)) {
			var i = 0;
			var lastX = verticeslength - 2;
			var n = verticeslength >> 1;
			while(i < n) {
				var x = vertices[i];
				var y = vertices[i + 1];
				var other = lastX - i;
				vertices[i] = vertices[other];
				vertices[i + 1] = vertices[other + 1];
				vertices[other] = x;
				vertices[other + 1] = y;
				i += 2;
			}
		}
		var _this = this.triangulator;
		var verticesArray = this.clippingPolygon;
		var vertices = verticesArray;
		var vertexCount = verticesArray.length >> 1;
		var indicesArray = _this.indicesArray;
		indicesArray.splice(0,indicesArray.length);
		var len = indicesArray.length;
		if(len > vertexCount) {
			indicesArray.splice(vertexCount,vertexCount - len);
		} else if(len < vertexCount) {
			while(len < vertexCount) {
				indicesArray.push(0);
				++len;
			}
		}
		var indices = indicesArray;
		var i = 0;
		while(i < vertexCount) {
			indices[i] = i;
			++i;
		}
		var isConcaveArray = _this.isConcaveArray;
		var len = isConcaveArray.length;
		if(len > vertexCount) {
			isConcaveArray.splice(vertexCount,vertexCount - len);
		} else if(len < vertexCount) {
			while(len < vertexCount) {
				isConcaveArray.push(false);
				++len;
			}
		}
		var isConcave = isConcaveArray;
		var i = 0;
		var n = vertexCount;
		while(i < n) {
			var previous = indices[(vertexCount + i - 1) % vertexCount] << 1;
			var current = indices[i] << 1;
			var next = indices[(i + 1) % vertexCount] << 1;
			var p1y = vertices[previous + 1];
			var p2y = vertices[current + 1];
			var p3y = vertices[next + 1];
			isConcave[i] = !(vertices[previous] * (p3y - p2y) + vertices[current] * (p1y - p3y) + vertices[next] * (p2y - p1y) >= 0);
			++i;
		}
		var triangles = _this.triangles;
		triangles.splice(0,triangles.length);
		while(vertexCount > 3) {
			var previous = vertexCount - 1;
			var i = 0;
			var next = 1;
			while(true) {
				var _gotoLabel_outer;
				while(true) {
					_gotoLabel_outer = 0;
					if(!isConcave[i]) {
						var p1 = indices[previous] << 1;
						var p2 = indices[i] << 1;
						var p3 = indices[next] << 1;
						var p1x = vertices[p1];
						var p1y = vertices[p1 + 1];
						var p2x = vertices[p2];
						var p2y = vertices[p2 + 1];
						var p3x = vertices[p3];
						var p3y = vertices[p3 + 1];
						var ii = (next + 1) % vertexCount;
						while(ii != previous) {
							if(!isConcave[ii]) {
								ii = (ii + 1) % vertexCount;
								continue;
							}
							var v = indices[ii] << 1;
							var vx = vertices[v];
							var vy = vertices[v + 1];
							if(p3x * (vy - p1y) + p1x * (p3y - vy) + vx * (p1y - p3y) >= 0) {
								if(p1x * (vy - p2y) + p2x * (p1y - vy) + vx * (p2y - p1y) >= 0) {
									if(p2x * (vy - p3y) + p3x * (p2y - vy) + vx * (p3y - p2y) >= 0) {
										_gotoLabel_outer = 1;
										break;
									}
								}
							}
							ii = (ii + 1) % vertexCount;
						}
						if(_gotoLabel_outer == 2) {
							continue;
						}
						if(_gotoLabel_outer >= 1) {
							break;
						}
						break;
					}
					if(_gotoLabel_outer == 0) {
						break;
					}
				}
				if(next == 0) {
					while(isConcave[i]) {
						--i;
						if(!(i > 0)) {
							break;
						}
					}
					break;
				}
				previous = i;
				i = next;
				next = (next + 1) % vertexCount;
			}
			triangles.push(indices[(vertexCount + i - 1) % vertexCount]);
			triangles.push(indices[i]);
			triangles.push(indices[(i + 1) % vertexCount]);
			var item = indicesArray[i];
			indicesArray.splice(i,1);
			var item1 = isConcaveArray[i];
			isConcaveArray.splice(i,1);
			--vertexCount;
			var previousIndex = (vertexCount + i - 1) % vertexCount;
			var nextIndex = i == vertexCount ? 0 : i;
			var previous1 = indices[(vertexCount + previousIndex - 1) % vertexCount] << 1;
			var current = indices[previousIndex] << 1;
			var next1 = indices[(previousIndex + 1) % vertexCount] << 1;
			var p1y1 = vertices[previous1 + 1];
			var p2y1 = vertices[current + 1];
			var p3y1 = vertices[next1 + 1];
			isConcave[previousIndex] = !(vertices[previous1] * (p3y1 - p2y1) + vertices[current] * (p1y1 - p3y1) + vertices[next1] * (p2y1 - p1y1) >= 0);
			var previous2 = indices[(vertexCount + nextIndex - 1) % vertexCount] << 1;
			var current1 = indices[nextIndex] << 1;
			var next2 = indices[(nextIndex + 1) % vertexCount] << 1;
			var p1y2 = vertices[previous2 + 1];
			var p2y2 = vertices[current1 + 1];
			var p3y2 = vertices[next2 + 1];
			isConcave[nextIndex] = !(vertices[previous2] * (p3y2 - p2y2) + vertices[current1] * (p1y2 - p3y2) + vertices[next2] * (p2y2 - p1y2) >= 0);
		}
		if(vertexCount == 3) {
			triangles.push(indices[2]);
			triangles.push(indices[0]);
			triangles.push(indices[1]);
		}
		var triangles1 = triangles;
		var _this = this.triangulator;
		var vertices = this.clippingPolygon;
		var convexPolygons = _this.convexPolygons;
		_this.polygonPool.freeAll(convexPolygons);
		convexPolygons.splice(0,convexPolygons.length);
		var convexPolygonsIndices = _this.convexPolygonsIndices;
		_this.polygonIndicesPool.freeAll(convexPolygonsIndices);
		convexPolygonsIndices.splice(0,convexPolygonsIndices.length);
		var polygonIndices = _this.polygonIndicesPool.obtain();
		polygonIndices.splice(0,polygonIndices.length);
		var polygon = _this.polygonPool.obtain();
		polygon.splice(0,polygon.length);
		var fanBaseIndex = -1;
		var lastWinding = 0;
		var trianglesItems = triangles1;
		var i = 0;
		var n = triangles1.length;
		while(i < n) {
			var t1 = trianglesItems[i] << 1;
			var t2 = trianglesItems[i + 1] << 1;
			var t3 = trianglesItems[i + 2] << 1;
			var x1 = vertices[t1];
			var y1 = vertices[t1 + 1];
			var x2 = vertices[t2];
			var y2 = vertices[t2 + 1];
			var x3 = vertices[t3];
			var y3 = vertices[t3 + 1];
			var merged = false;
			if(fanBaseIndex == t1) {
				var o = polygon.length - 4;
				var p = polygon;
				var p1x = p[o];
				var p1y = p[o + 1];
				var px = p[o + 2] - p1x;
				var py = p[o + 3] - p1y;
				var winding1 = x3 * py - y3 * px + px * p1y - p1x * py >= 0 ? 1 : -1;
				var px1 = p[0] - x3;
				var py1 = p[1] - y3;
				var winding2 = p[2] * py1 - p[3] * px1 + px1 * y3 - x3 * py1 >= 0 ? 1 : -1;
				if(winding1 == lastWinding && winding2 == lastWinding) {
					polygon.push(x3);
					polygon.push(y3);
					polygonIndices.push(t3);
					merged = true;
				}
			}
			if(!merged) {
				if(polygon.length > 0) {
					convexPolygons.push(polygon);
					convexPolygonsIndices.push(polygonIndices);
				} else {
					_this.polygonPool.free(polygon);
					_this.polygonIndicesPool.free(polygonIndices);
				}
				polygon = _this.polygonPool.obtain();
				polygon.splice(0,polygon.length);
				polygon.push(x1);
				polygon.push(y1);
				polygon.push(x2);
				polygon.push(y2);
				polygon.push(x3);
				polygon.push(y3);
				polygonIndices = _this.polygonIndicesPool.obtain();
				polygonIndices.splice(0,polygonIndices.length);
				polygonIndices.push(t1);
				polygonIndices.push(t2);
				polygonIndices.push(t3);
				var px2 = x2 - x1;
				var py2 = y2 - y1;
				lastWinding = x3 * py2 - y3 * px2 + px2 * y1 - x1 * py2 >= 0 ? 1 : -1;
				fanBaseIndex = t1;
			}
			i += 3;
		}
		if(polygon.length > 0) {
			convexPolygons.push(polygon);
			convexPolygonsIndices.push(polygonIndices);
		}
		var i = 0;
		var n = convexPolygons.length;
		while(i < n) {
			polygonIndices = convexPolygonsIndices[i];
			if(polygonIndices.length == 0) {
				++i;
				continue;
			}
			var firstIndex = polygonIndices[0];
			var lastIndex = polygonIndices[polygonIndices.length - 1];
			polygon = convexPolygons[i];
			var o = polygon.length - 4;
			var p = polygon;
			var prevPrevX = p[o];
			var prevPrevY = p[o + 1];
			var prevX = p[o + 2];
			var prevY = p[o + 3];
			var firstX = p[0];
			var firstY = p[1];
			var secondX = p[2];
			var secondY = p[3];
			var px = prevX - prevPrevX;
			var py = prevY - prevPrevY;
			var winding = firstX * py - firstY * px + px * prevPrevY - prevPrevX * py >= 0 ? 1 : -1;
			var ii = 0;
			while(ii < n) {
				if(ii == i) {
					++ii;
					continue;
				}
				var otherIndices = convexPolygonsIndices[ii];
				if(otherIndices.length != 3) {
					++ii;
					continue;
				}
				var otherFirstIndex = otherIndices[0];
				var otherSecondIndex = otherIndices[1];
				var otherLastIndex = otherIndices[2];
				var otherPoly = convexPolygons[ii];
				var x3 = otherPoly[otherPoly.length - 2];
				var y3 = otherPoly[otherPoly.length - 1];
				if(otherFirstIndex != firstIndex || otherSecondIndex != lastIndex) {
					++ii;
					continue;
				}
				var px1 = prevX - prevPrevX;
				var py1 = prevY - prevPrevY;
				var winding1 = x3 * py1 - y3 * px1 + px1 * prevPrevY - prevPrevX * py1 >= 0 ? 1 : -1;
				var px2 = firstX - x3;
				var py2 = firstY - y3;
				var winding2 = secondX * py2 - secondY * px2 + px2 * y3 - x3 * py2 >= 0 ? 1 : -1;
				if(winding1 == winding && winding2 == winding) {
					otherPoly.splice(0,otherPoly.length);
					otherIndices.splice(0,otherIndices.length);
					polygon.push(x3);
					polygon.push(y3);
					polygonIndices.push(otherLastIndex);
					prevPrevX = prevX;
					prevPrevY = prevY;
					prevX = x3;
					prevY = y3;
					ii = 0;
				}
				++ii;
			}
			++i;
		}
		var i = convexPolygons.length - 1;
		while(i >= 0) {
			polygon = convexPolygons[i];
			if(polygon.length == 0) {
				var item = convexPolygons[i];
				convexPolygons.splice(i,1);
				_this.polygonPool.free(polygon);
				var item1 = convexPolygonsIndices[i];
				convexPolygonsIndices.splice(i,1);
				polygonIndices = item1;
				_this.polygonIndicesPool.free(polygonIndices);
			}
			--i;
		}
		this.clippingPolygons = convexPolygons;
		var _g = 0;
		var _g1 = this.clippingPolygons;
		while(_g < _g1.length) {
			var polygon = _g1[_g];
			++_g;
			var vertices = polygon;
			var verticeslength = polygon.length;
			var area = vertices[verticeslength - 2] * vertices[1] - vertices[0] * vertices[verticeslength - 1];
			var p1x = 0;
			var p1y = 0;
			var p2x = 0;
			var p2y = 0;
			var i = 0;
			var n = verticeslength - 3;
			while(i < n) {
				p1x = vertices[i];
				p1y = vertices[i + 1];
				p2x = vertices[i + 2];
				p2y = vertices[i + 3];
				area += p1x * p2y - p2x * p1y;
				i += 2;
			}
			if(!(area < 0)) {
				var i1 = 0;
				var lastX = verticeslength - 2;
				var n1 = verticeslength >> 1;
				while(i1 < n1) {
					var x = vertices[i1];
					var y = vertices[i1 + 1];
					var other = lastX - i1;
					vertices[i1] = vertices[other];
					vertices[i1 + 1] = vertices[other + 1];
					vertices[other] = x;
					vertices[other + 1] = y;
					i1 += 2;
				}
			}
			polygon.push(polygon[0]);
			polygon.push(polygon[1]);
		}
		return this.clippingPolygons.length;
	}
	,clipEndWithSlot: function(slot) {
		if(this.clipAttachment != null && this.clipAttachment.endSlot == slot.data) {
			if(this.clipAttachment != null) {
				this.clipAttachment = null;
				this.clippingPolygons = null;
				var this1 = this.clippedVertices;
				this1.splice(0,this1.length);
				var this1 = this.clippedTriangles;
				this1.splice(0,this1.length);
				var this1 = this.clippingPolygon;
				this1.splice(0,this1.length);
			}
		}
	}
	,clipEnd: function() {
		if(this.clipAttachment == null) {
			return;
		}
		this.clipAttachment = null;
		this.clippingPolygons = null;
		var this1 = this.clippedVertices;
		this1.splice(0,this1.length);
		var this1 = this.clippedTriangles;
		this1.splice(0,this1.length);
		var this1 = this.clippingPolygon;
		this1.splice(0,this1.length);
	}
	,isClipping: function() {
		return this.clipAttachment != null;
	}
	,clipTriangles: function(vertices,verticesLength,triangles,trianglesLength,uvs,light,dark,twoColor) {
		var clipOutput = this.clipOutput;
		var clippedVertices = this.clippedVertices;
		var clippedTriangles = this.clippedTriangles;
		var polygons = this.clippingPolygons;
		var polygonsCount = this.clippingPolygons.length;
		var vertexSize = twoColor ? 6 : 5;
		var index = 0;
		clippedVertices.splice(0,clippedVertices.length);
		clippedTriangles.splice(0,clippedTriangles.length);
		var _gotoLabel_outer;
		while(true) {
			_gotoLabel_outer = 0;
			var i = 0;
			while(i < trianglesLength) {
				var vertexOffset = triangles[i] << 1;
				var x1 = vertices[vertexOffset];
				var y1 = vertices[vertexOffset + 1];
				var u1 = uvs[vertexOffset];
				var v1 = uvs[vertexOffset + 1];
				vertexOffset = triangles[i + 1] << 1;
				var x2 = vertices[vertexOffset];
				var y2 = vertices[vertexOffset + 1];
				var u2 = uvs[vertexOffset];
				var v2 = uvs[vertexOffset + 1];
				vertexOffset = triangles[i + 2] << 1;
				var x3 = vertices[vertexOffset];
				var y3 = vertices[vertexOffset + 1];
				var u3 = uvs[vertexOffset];
				var v3 = uvs[vertexOffset + 1];
				var p = 0;
				while(p < polygonsCount) {
					var s = clippedVertices.length;
					var bool = this.clip(x1,y1,x2,y2,x3,y3,polygons[p],clipOutput);
					if(bool) {
						var clipOutputLength = clipOutput.length;
						if(clipOutputLength == 0) {
							++p;
							continue;
						}
						var d0 = y2 - y3;
						var d1 = x3 - x2;
						var d2 = x1 - x3;
						var d4 = y3 - y1;
						var d = 1 / (d0 * d2 + d1 * (y1 - y3));
						var clipOutputCount = clipOutputLength >> 1;
						var clipOutputItems = clipOutput;
						var size = s + clipOutputCount * vertexSize;
						var len = clippedVertices.length;
						if(len > size) {
							clippedVertices.splice(size,size - len);
						} else if(len < size) {
							while(len < size) {
								clippedVertices.push(0);
								++len;
							}
						}
						var clippedVerticesItems = clippedVertices;
						var ii = 0;
						while(ii < clipOutputLength) {
							var x = clipOutputItems[ii];
							var y = clipOutputItems[ii + 1];
							clippedVerticesItems[s] = x;
							clippedVerticesItems[s + 1] = y;
							clippedVerticesItems[s + 2] = light;
							if(twoColor) {
								clippedVerticesItems[s + 3] = dark;
								s += 4;
							} else {
								s += 3;
							}
							var c0 = x - x3;
							var c1 = y - y3;
							var a = (d0 * c0 + d1 * c1) * d;
							var b = (d4 * c0 + d2 * c1) * d;
							var c = 1 - a - b;
							clippedVerticesItems[s] = u1 * a + u2 * b + u3 * c;
							clippedVerticesItems[s + 1] = v1 * a + v2 * b + v3 * c;
							s += 2;
							ii += 2;
						}
						if(_gotoLabel_outer == 2) {
							break;
						}
						if(_gotoLabel_outer >= 1) {
							break;
						}
						s = clippedTriangles.length;
						var size1 = s + 3 * (clipOutputCount - 2);
						var len1 = clippedTriangles.length;
						if(len1 > size1) {
							clippedTriangles.splice(size1,size1 - len1);
						} else if(len1 < size1) {
							while(len1 < size1) {
								clippedTriangles.push(0);
								++len1;
							}
						}
						var clippedTrianglesItems = clippedTriangles;
						--clipOutputCount;
						var ii1 = 1;
						while(ii1 < clipOutputCount) {
							clippedTrianglesItems[s] = index;
							clippedTrianglesItems[s + 1] = js_Boot.__cast(index + ii1 , Int);
							clippedTrianglesItems[s + 2] = js_Boot.__cast(index + ii1 + 1 , Int);
							s += 3;
							++ii1;
						}
						if(_gotoLabel_outer == 2) {
							break;
						}
						if(_gotoLabel_outer >= 1) {
							break;
						}
						index += clipOutputCount + 1;
					} else {
						var size2 = s + 3 * vertexSize;
						var len2 = clippedVertices.length;
						if(len2 > size2) {
							clippedVertices.splice(size2,size2 - len2);
						} else if(len2 < size2) {
							while(len2 < size2) {
								clippedVertices.push(0);
								++len2;
							}
						}
						var clippedVerticesItems1 = clippedVertices;
						clippedVerticesItems1[s] = x1;
						clippedVerticesItems1[s + 1] = y1;
						clippedVerticesItems1[s + 2] = light;
						if(!twoColor) {
							clippedVerticesItems1[s + 3] = u1;
							clippedVerticesItems1[s + 4] = v1;
							clippedVerticesItems1[s + 5] = x2;
							clippedVerticesItems1[s + 6] = y2;
							clippedVerticesItems1[s + 7] = light;
							clippedVerticesItems1[s + 8] = u2;
							clippedVerticesItems1[s + 9] = v2;
							clippedVerticesItems1[s + 10] = x3;
							clippedVerticesItems1[s + 11] = y3;
							clippedVerticesItems1[s + 12] = light;
							clippedVerticesItems1[s + 13] = u3;
							clippedVerticesItems1[s + 14] = v3;
						} else {
							clippedVerticesItems1[s + 3] = dark;
							clippedVerticesItems1[s + 4] = u1;
							clippedVerticesItems1[s + 5] = v1;
							clippedVerticesItems1[s + 6] = x2;
							clippedVerticesItems1[s + 7] = y2;
							clippedVerticesItems1[s + 8] = light;
							clippedVerticesItems1[s + 9] = dark;
							clippedVerticesItems1[s + 10] = u2;
							clippedVerticesItems1[s + 11] = v2;
							clippedVerticesItems1[s + 12] = x3;
							clippedVerticesItems1[s + 13] = y3;
							clippedVerticesItems1[s + 14] = light;
							clippedVerticesItems1[s + 15] = dark;
							clippedVerticesItems1[s + 16] = u3;
							clippedVerticesItems1[s + 17] = v3;
						}
						s = clippedTriangles.length;
						var size3 = s + 3;
						var len3 = clippedTriangles.length;
						if(len3 > size3) {
							clippedTriangles.splice(size3,size3 - len3);
						} else if(len3 < size3) {
							while(len3 < size3) {
								clippedTriangles.push(0);
								++len3;
							}
						}
						var clippedTrianglesItems1 = clippedTriangles;
						clippedTrianglesItems1[s] = index;
						clippedTrianglesItems1[s + 1] = js_Boot.__cast(index + 1 , Int);
						clippedTrianglesItems1[s + 2] = js_Boot.__cast(index + 2 , Int);
						index += 3;
						++p;
						_gotoLabel_outer = 2;
						break;
					}
					++p;
				}
				if(_gotoLabel_outer == 2) {
					_gotoLabel_outer = 0;
					i += 3;
					continue;
				}
				if(_gotoLabel_outer >= 1) {
					break;
				}
				i += 3;
			}
			if(_gotoLabel_outer == 0) {
				break;
			}
		}
	}
	,clip: function(x1,y1,x2,y2,x3,y3,clippingArea,output) {
		var originalOutput = output;
		var clipped = false;
		var input = null;
		if(clippingArea.length % 4 >= 2) {
			input = output;
			output = this.scratch;
		} else {
			input = this.scratch;
		}
		input.splice(0,input.length);
		input.push(x1);
		input.push(y1);
		input.push(x2);
		input.push(y2);
		input.push(x3);
		input.push(y3);
		input.push(x1);
		input.push(y1);
		output.splice(0,output.length);
		var clippingVertices = clippingArea;
		var clippingVerticesLast = clippingArea.length - 4;
		var i = 0;
		while(true) {
			var edgeX = clippingVertices[i];
			var edgeY = clippingVertices[i + 1];
			var edgeX2 = clippingVertices[i + 2];
			var edgeY2 = clippingVertices[i + 3];
			var deltaX = edgeX - edgeX2;
			var deltaY = edgeY - edgeY2;
			var inputVertices = input;
			var inputVerticesLength = input.length - 2;
			var outputStart = output.length;
			var ii = 0;
			while(ii < inputVerticesLength) {
				var inputX = inputVertices[ii];
				var inputY = inputVertices[ii + 1];
				var inputX2 = inputVertices[ii + 2];
				var inputY2 = inputVertices[ii + 3];
				var side2 = deltaX * (inputY2 - edgeY2) - deltaY * (inputX2 - edgeX2) > 0;
				if(deltaX * (inputY - edgeY2) - deltaY * (inputX - edgeX2) > 0) {
					if(side2) {
						output.push(inputX2);
						output.push(inputY2);
						ii += 2;
						continue;
					}
					var c0 = inputY2 - inputY;
					var c2 = inputX2 - inputX;
					var ua = (c2 * (edgeY - inputY) - c0 * (edgeX - inputX)) / (c0 * (edgeX2 - edgeX) - c2 * (edgeY2 - edgeY));
					output.push(edgeX + (edgeX2 - edgeX) * ua);
					output.push(edgeY + (edgeY2 - edgeY) * ua);
				} else if(side2) {
					var c01 = inputY2 - inputY;
					var c21 = inputX2 - inputX;
					var ua1 = (c21 * (edgeY - inputY) - c01 * (edgeX - inputX)) / (c01 * (edgeX2 - edgeX) - c21 * (edgeY2 - edgeY));
					output.push(edgeX + (edgeX2 - edgeX) * ua1);
					output.push(edgeY + (edgeY2 - edgeY) * ua1);
					output.push(inputX2);
					output.push(inputY2);
				}
				clipped = true;
				ii += 2;
			}
			if(outputStart == output.length) {
				originalOutput.splice(0,originalOutput.length);
				return true;
			}
			output.push(output[0]);
			output.push(output[1]);
			if(i == clippingVerticesLast) {
				break;
			}
			var temp = output;
			output = input;
			output.splice(0,output.length);
			input = temp;
			i += 2;
		}
		if(originalOutput != output) {
			originalOutput.splice(0,originalOutput.length);
			var items = output;
			var count = output.length - 2;
			if(count == null) {
				count = -1;
			}
			if(count == -1) {
				count = items.length;
			}
			var i = originalOutput.length;
			var len = i + items.length;
			var len1 = originalOutput.length;
			if(len1 > len) {
				originalOutput.splice(len,len - len1);
			} else if(len1 < len) {
				while(len1 < len) {
					originalOutput.push(0);
					++len1;
				}
			}
			var _g = 0;
			var _g1 = items;
			while(_g < _g1.length) {
				var item = _g1[_g];
				++_g;
				originalOutput[i++] = item;
				if(--count <= 0) {
					break;
				}
			}
		} else {
			var size = originalOutput.length - 2;
			var len = originalOutput.length;
			if(len > size) {
				originalOutput.splice(size,size - len);
			} else if(len < size) {
				while(len < size) {
					originalOutput.push(0);
					++len;
				}
			}
		}
		return clipped;
	}
	,getClippedVertices: function() {
		return this.clippedVertices;
	}
	,getClippedTriangles: function() {
		return this.clippedTriangles;
	}
	,__class__: spine_utils_SkeletonClipping
};
var spine_openfl_SkeletonSprite = function(skeletonData) {
	this._isNative = false;
	this._buffdataPoint = 0;
	this.allUvs = openfl_Vector.toFloatVector(null);
	this.allTriangles = openfl_Vector.toIntVector(null);
	this.allVerticesArray = openfl_Vector.toFloatVector(null);
	this._actionName = "";
	this._isPlay = true;
	this.timeScale = 1;
	zygame_display_DisplayObjectContainer.call(this);
	this.skeleton = new spine_Skeleton(skeletonData);
	var _this = this.skeleton;
	var cacheReset = _this.cacheReset;
	var i = 0;
	var n = cacheReset.length;
	while(i < n) {
		var bone = cacheReset[i];
		bone.ax = bone.x;
		bone.ay = bone.y;
		bone.arotation = bone.rotation;
		bone.ascaleX = bone.scaleX;
		bone.ascaleY = bone.scaleY;
		bone.ashearX = bone.shearX;
		bone.ashearY = bone.shearY;
		bone.appliedValid = true;
		++i;
	}
	var cache = _this.cache;
	var i = 0;
	var n = cache.length;
	while(i < n) {
		cache[i].update();
		++i;
	}
	this._tempVerticesArray = [];
	this._quadTriangles = [];
	this._quadTriangles[0] = 0;
	this._quadTriangles[1] = 1;
	this._quadTriangles[2] = 2;
	this._quadTriangles[3] = 2;
	this._quadTriangles[4] = 3;
	this._quadTriangles[5] = 0;
	this._colors = [];
	this._shape = new openfl_display_Sprite();
	this.addChild(this._shape);
	this._trianglesVector = new haxe_ds_ObjectMap();
	this.mouseChildren = false;
};
$hxClasses["spine.openfl.SkeletonSprite"] = spine_openfl_SkeletonSprite;
spine_openfl_SkeletonSprite.__name__ = "spine.openfl.SkeletonSprite";
spine_openfl_SkeletonSprite.__interfaces__ = [spine_base_SpineBaseDisplay];
spine_openfl_SkeletonSprite.__super__ = zygame_display_DisplayObjectContainer;
spine_openfl_SkeletonSprite.prototype = $extend(zygame_display_DisplayObjectContainer.prototype,{
	skeleton: null
	,timeScale: null
	,batchs: null
	,_tempVerticesArray: null
	,_quadTriangles: null
	,_colors: null
	,_isPlay: null
	,_actionName: null
	,_trianglesVector: null
	,_spritePool: null
	,allVerticesArray: null
	,allTriangles: null
	,allUvs: null
	,_buffdataPoint: null
	,_shape: null
	,_isNative: null
	,set_isNative: function(value) {
		this._isNative = value;
		if(this._isNative && this._spritePool == null) {
			this._spritePool = new lime_utils_ObjectPool(function() {
				return new openfl_display_Sprite();
			});
		}
		return this._isNative;
	}
	,get_isNative: function() {
		return this._isNative;
	}
	,onSpineUpdate: function(dt) {
		if(this.batchs == null) {
			this.advanceTime(dt);
		}
	}
	,onRemoveToStage: function() {
		zygame_utils_SpineManager.removeOnFrame(this);
	}
	,onAddToStage: function() {
		zygame_utils_SpineManager.addOnFrame(this);
	}
	,destroy: function() {
		zygame_utils_SpineManager.removeOnFrame(this);
		if(this._spritePool != null) {
			this._spritePool.clear();
		}
		this._spritePool = null;
		this.removeChildren();
		this.get_graphics().clear();
	}
	,play: function(action,loop) {
		if(loop == null) {
			loop = true;
		}
		zygame_utils_SpineManager.addOnFrame(this);
		this._isPlay = true;
		if(action != null) {
			this._actionName = action;
		}
	}
	,get_isPlay: function() {
		return this._isPlay;
	}
	,set_isPlay: function(bool) {
		this._isPlay = bool;
		return bool;
	}
	,get_actionName: function() {
		return this._actionName;
	}
	,stop: function() {
		zygame_utils_SpineManager.removeOnFrame(this);
		this._isPlay = false;
	}
	,advanceTime: function(delta) {
		if(this._isPlay == false) {
			return;
		}
		this.skeleton.time += delta * this.timeScale;
		if(!this.get_visible()) {
			return;
		}
		if(this.get_isNative()) {
			this.renderNative();
		} else {
			this.renderTriangles();
		}
	}
	,renderNative: function() {
		this._buffdataPoint = 0;
		var drawOrder = this.skeleton.drawOrder;
		var n = drawOrder.length;
		var triangles = null;
		var uvs = null;
		var verticesLength = 0;
		var atlasRegion;
		var slot;
		var max = this._shape.get_numChildren() - 1;
		while(max >= 0) {
			var spr = this._shape.getChildAt(max);
			this._shape.removeChild(spr);
			this._spritePool.remove(spr);
			this._spritePool.add(spr);
			--max;
		}
		this.allTriangles.splice(0,this.allTriangles.get_length());
		var t = 0;
		var _g = 0;
		var _g1 = n;
		while(_g < _g1) {
			var i = _g++;
			slot = drawOrder[i];
			triangles = null;
			uvs = null;
			atlasRegion = null;
			if(slot.attachment != null) {
				if(((slot.attachment) instanceof spine_attachments_RegionAttachment)) {
					var region = slot.attachment;
					verticesLength = 8;
					var bone = slot.bone;
					var worldVertices = this._tempVerticesArray;
					var offset = 0;
					var vertexOffset = region.offset;
					var x = bone.worldX;
					var y = bone.worldY;
					var a = bone.a;
					var b = bone.b;
					var c = bone.c;
					var d = bone.d;
					var offsetX = 0;
					var offsetY = 0;
					offsetX = vertexOffset[6];
					offsetY = vertexOffset[7];
					worldVertices[offset] = offsetX * a + offsetY * b + x;
					worldVertices[offset + 1] = offsetX * c + offsetY * d + y;
					offset += 2;
					offsetX = vertexOffset[0];
					offsetY = vertexOffset[1];
					worldVertices[offset] = offsetX * a + offsetY * b + x;
					worldVertices[offset + 1] = offsetX * c + offsetY * d + y;
					offset += 2;
					offsetX = vertexOffset[2];
					offsetY = vertexOffset[3];
					worldVertices[offset] = offsetX * a + offsetY * b + x;
					worldVertices[offset + 1] = offsetX * c + offsetY * d + y;
					offset += 2;
					offsetX = vertexOffset[4];
					offsetY = vertexOffset[5];
					worldVertices[offset] = offsetX * a + offsetY * b + x;
					worldVertices[offset + 1] = offsetX * c + offsetY * d + y;
					uvs = region.uvs;
					triangles = this._quadTriangles;
					if(region.region == null) {
						throw haxe_Exception.thrown(new spine_support_error_IllegalStateException("Region has not been set: " + Std.string(region)));
					}
					atlasRegion = region.region;
				} else if(((slot.attachment) instanceof spine_attachments_MeshAttachment)) {
					var region1 = slot.attachment;
					verticesLength = 8;
					var count = region1.worldVerticesLength;
					var worldVertices1 = this._tempVerticesArray;
					count = (count >> 1) * 2;
					var skeleton = slot.bone.skeleton;
					var deformArray = slot.attachmentVertices;
					var vertices = region1.vertices;
					var bones = region1.bones;
					if(bones == null) {
						if(deformArray.length > 0) {
							vertices = deformArray;
						}
						var bone1 = slot.bone;
						var x1 = bone1.worldX;
						var y1 = bone1.worldY;
						var a1 = bone1.a;
						var b1 = bone1.b;
						var c1 = bone1.c;
						var d1 = bone1.d;
						var v = 0;
						var w = 0;
						while(w < count) {
							var vx = vertices[v];
							var vy = vertices[v + 1];
							worldVertices1[w] = vx * a1 + vy * b1 + x1;
							worldVertices1[w + 1] = vx * c1 + vy * d1 + y1;
							v += 2;
							w += 2;
						}
					} else {
						var v1 = 0;
						var skip = 0;
						var i1 = 0;
						while(i1 < 0) {
							var n = bones[v1];
							v1 += n + 1;
							skip += n;
							i1 += 2;
						}
						var skeletonBones = skeleton.getBones();
						if(deformArray.length == 0) {
							var w1 = 0;
							var b2 = skip * 3;
							while(w1 < count) {
								var wx = 0;
								var wy = 0;
								var n1 = bones[v1++];
								n1 += v1;
								while(v1 < n1) {
									var bone2 = js_Boot.__cast(skeletonBones[bones[v1]] , spine_Bone);
									var vx1 = vertices[b2];
									var vy1 = vertices[b2 + 1];
									var weight = vertices[b2 + 2];
									wx += (vx1 * bone2.a + vy1 * bone2.b + bone2.worldX) * weight;
									wy += (vx1 * bone2.c + vy1 * bone2.d + bone2.worldY) * weight;
									++v1;
									b2 += 3;
								}
								worldVertices1[w1] = wx;
								worldVertices1[w1 + 1] = wy;
								w1 += 2;
							}
						} else {
							var deform = deformArray;
							var w2 = 0;
							var b3 = skip * 3;
							var f = skip << 1;
							while(w2 < count) {
								var wx1 = 0;
								var wy1 = 0;
								var n2 = bones[v1++];
								n2 += v1;
								while(v1 < n2) {
									var bone3 = js_Boot.__cast(skeletonBones[bones[v1]] , spine_Bone);
									var vx2 = vertices[b3] + deform[f];
									var vy2 = vertices[b3 + 1] + deform[f + 1];
									var weight1 = vertices[b3 + 2];
									wx1 += (vx2 * bone3.a + vy2 * bone3.b + bone3.worldX) * weight1;
									wy1 += (vx2 * bone3.c + vy2 * bone3.d + bone3.worldY) * weight1;
									++v1;
									b3 += 3;
									f += 2;
								}
								worldVertices1[w2] = wx1;
								worldVertices1[w2 + 1] = wy1;
								w2 += 2;
							}
						}
					}
					uvs = region1.uvs;
					triangles = region1.triangles;
					if(region1.region == null) {
						throw haxe_Exception.thrown(new spine_support_error_IllegalStateException("Region has not been set: " + Std.string(region1)));
					}
					atlasRegion = region1.region;
				}
				if(atlasRegion != null) {
					var spr = this._spritePool.get();
					var curBitmap = atlasRegion.page.rendererObject;
					spr.get_graphics().clear();
					spr.get_graphics().beginBitmapFill(curBitmap,null,true,true);
					spr.get_graphics().drawTriangles(this.ofArrayFloat(this._tempVerticesArray),this.ofArrayInt(triangles),this.ofArrayFloat(uvs),1);
					spr.get_graphics().endFill();
					spr.set_alpha(slot.color.a);
					spr.get_transform().get_colorTransform().redMultiplier = slot.color.r;
					spr.get_transform().get_colorTransform().greenMultiplier = slot.color.g;
					spr.get_transform().get_colorTransform().blueMultiplier = slot.color.b;
					switch(slot.data.blendMode) {
					case 0:
						spr.set_blendMode(10);
						break;
					case 1:
						spr.set_blendMode(0);
						break;
					case 2:
						spr.set_blendMode(9);
						break;
					case 3:
						spr.set_blendMode(12);
						break;
					}
					this._shape.addChild(spr);
				}
			}
		}
	}
	,renderTriangles: function() {
		var clipper = spine_openfl_SkeletonSprite.clipper;
		this._buffdataPoint = 0;
		var uindex = 0;
		var drawOrder = this.skeleton.drawOrder;
		var n = drawOrder.length;
		var triangles = null;
		var uvs = null;
		var verticesLength = 0;
		var atlasRegion;
		var slot;
		var bitmapData = null;
		var v = null;
		this._shape.get_graphics().clear();
		this.allTriangles.splice(0,this.allTriangles.get_length());
		var t = 0;
		var _g = 0;
		var _g1 = n;
		while(_g < _g1) {
			var i = _g++;
			slot = drawOrder[i];
			triangles = null;
			uvs = null;
			atlasRegion = null;
			if(slot.attachment != null) {
				if(slot.color.a == 0) {
					continue;
				}
				if(((slot.attachment) instanceof spine_attachments_ClippingAttachment)) {
					continue;
				} else if(((slot.attachment) instanceof spine_attachments_RegionAttachment)) {
					var region = slot.attachment;
					verticesLength = 8;
					var bone = slot.bone;
					var worldVertices = this._tempVerticesArray;
					var offset = 0;
					var vertexOffset = region.offset;
					var x = bone.worldX;
					var y = bone.worldY;
					var a = bone.a;
					var b = bone.b;
					var c = bone.c;
					var d = bone.d;
					var offsetX = 0;
					var offsetY = 0;
					offsetX = vertexOffset[6];
					offsetY = vertexOffset[7];
					worldVertices[offset] = offsetX * a + offsetY * b + x;
					worldVertices[offset + 1] = offsetX * c + offsetY * d + y;
					offset += 2;
					offsetX = vertexOffset[0];
					offsetY = vertexOffset[1];
					worldVertices[offset] = offsetX * a + offsetY * b + x;
					worldVertices[offset + 1] = offsetX * c + offsetY * d + y;
					offset += 2;
					offsetX = vertexOffset[2];
					offsetY = vertexOffset[3];
					worldVertices[offset] = offsetX * a + offsetY * b + x;
					worldVertices[offset + 1] = offsetX * c + offsetY * d + y;
					offset += 2;
					offsetX = vertexOffset[4];
					offsetY = vertexOffset[5];
					worldVertices[offset] = offsetX * a + offsetY * b + x;
					worldVertices[offset + 1] = offsetX * c + offsetY * d + y;
					uvs = region.uvs;
					triangles = this._quadTriangles;
					if(region.region == null) {
						throw haxe_Exception.thrown(new spine_support_error_IllegalStateException("Region has not been set: " + Std.string(region)));
					}
					atlasRegion = region.region;
				} else if(((slot.attachment) instanceof spine_attachments_MeshAttachment)) {
					var region1 = slot.attachment;
					verticesLength = 8;
					var count = region1.worldVerticesLength;
					var worldVertices1 = this._tempVerticesArray;
					count = (count >> 1) * 2;
					var skeleton = slot.bone.skeleton;
					var deformArray = slot.attachmentVertices;
					var vertices = region1.vertices;
					var bones = region1.bones;
					if(bones == null) {
						if(deformArray.length > 0) {
							vertices = deformArray;
						}
						var bone1 = slot.bone;
						var x1 = bone1.worldX;
						var y1 = bone1.worldY;
						var a1 = bone1.a;
						var b1 = bone1.b;
						var c1 = bone1.c;
						var d1 = bone1.d;
						var v = 0;
						var w = 0;
						while(w < count) {
							var vx = vertices[v];
							var vy = vertices[v + 1];
							worldVertices1[w] = vx * a1 + vy * b1 + x1;
							worldVertices1[w + 1] = vx * c1 + vy * d1 + y1;
							v += 2;
							w += 2;
						}
					} else {
						var v1 = 0;
						var skip = 0;
						var i1 = 0;
						while(i1 < 0) {
							var n = bones[v1];
							v1 += n + 1;
							skip += n;
							i1 += 2;
						}
						var skeletonBones = skeleton.getBones();
						if(deformArray.length == 0) {
							var w1 = 0;
							var b2 = skip * 3;
							while(w1 < count) {
								var wx = 0;
								var wy = 0;
								var n1 = bones[v1++];
								n1 += v1;
								while(v1 < n1) {
									var bone2 = js_Boot.__cast(skeletonBones[bones[v1]] , spine_Bone);
									var vx1 = vertices[b2];
									var vy1 = vertices[b2 + 1];
									var weight = vertices[b2 + 2];
									wx += (vx1 * bone2.a + vy1 * bone2.b + bone2.worldX) * weight;
									wy += (vx1 * bone2.c + vy1 * bone2.d + bone2.worldY) * weight;
									++v1;
									b2 += 3;
								}
								worldVertices1[w1] = wx;
								worldVertices1[w1 + 1] = wy;
								w1 += 2;
							}
						} else {
							var deform = deformArray;
							var w2 = 0;
							var b3 = skip * 3;
							var f = skip << 1;
							while(w2 < count) {
								var wx1 = 0;
								var wy1 = 0;
								var n2 = bones[v1++];
								n2 += v1;
								while(v1 < n2) {
									var bone3 = js_Boot.__cast(skeletonBones[bones[v1]] , spine_Bone);
									var vx2 = vertices[b3] + deform[f];
									var vy2 = vertices[b3 + 1] + deform[f + 1];
									var weight1 = vertices[b3 + 2];
									wx1 += (vx2 * bone3.a + vy2 * bone3.b + bone3.worldX) * weight1;
									wy1 += (vx2 * bone3.c + vy2 * bone3.d + bone3.worldY) * weight1;
									++v1;
									b3 += 3;
									f += 2;
								}
								worldVertices1[w2] = wx1;
								worldVertices1[w2 + 1] = wy1;
								w2 += 2;
							}
						}
					}
					uvs = region1.uvs;
					triangles = region1.triangles;
					if(region1.region == null) {
						throw haxe_Exception.thrown(new spine_support_error_IllegalStateException("Region has not been set: " + Std.string(region1)));
					}
					atlasRegion = region1.region;
				}
				if(atlasRegion != null) {
					if(this.batchs != null) {
						this.batchs.uploadBuffData(this,this.ofArrayFloat(this._tempVerticesArray),this.ofArrayInt(triangles),this.ofArrayFloat(uvs));
					} else {
						if(bitmapData != atlasRegion.page.rendererObject) {
							bitmapData = atlasRegion.page.rendererObject;
							this._shape.get_graphics().beginBitmapFill(bitmapData,null,true,true);
						}
						var _g2 = 0;
						var _g3 = triangles.length;
						while(_g2 < _g3) {
							var vi = _g2++;
							this.allTriangles.set(this._buffdataPoint,triangles[vi] + t);
							this._buffdataPoint++;
						}
						var _g4 = 0;
						var _g5 = uvs.length;
						while(_g4 < _g5) {
							var ui = _g4++;
							this.allVerticesArray.set(uindex,this._tempVerticesArray[ui]);
							this.allUvs.set(uindex,uvs[ui]);
							++uindex;
						}
						t += uvs.length / 2 | 0;
					}
				}
			}
		}
		if(this.batchs == null && this.allTriangles.get_length() > 2) {
			this._shape.get_graphics().drawTriangles(this.allVerticesArray,this.allTriangles,this.allUvs,1);
			this._shape.get_graphics().endFill();
		}
	}
	,ofArrayInt: function(data) {
		var v = openfl_Vector.toIntVector(null);
		var _g = 0;
		var _g1 = data.length;
		while(_g < _g1) {
			var i = _g++;
			v.set(i,data[i]);
		}
		return v;
	}
	,ofArrayFloat: function(data) {
		var v = openfl_Vector.toFloatVector(null);
		var _g = 0;
		var _g1 = data.length;
		while(_g < _g1) {
			var i = _g++;
			v.set(i,data[i]);
		}
		return v;
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly,hitObject) {
		haxe_Log.trace("触摸：",{ fileName : "Source/spine/openfl/SkeletonSprite.hx", lineNumber : 490, className : "spine.openfl.SkeletonSprite", methodName : "__hitTest", customParams : [this.mouseEnabled,this.get_visible()]});
		if(this.mouseEnabled == false || this.get_visible() == false) {
			return false;
		}
		if(this.getBounds(this.stage).contains(x,y)) {
			haxe_Log.trace("触摸成功",{ fileName : "Source/spine/openfl/SkeletonSprite.hx", lineNumber : 494, className : "spine.openfl.SkeletonSprite", methodName : "__hitTest"});
			if(stack != null) {
				stack.push(this);
			}
			return true;
		}
		return false;
	}
	,__class__: spine_openfl_SkeletonSprite
	,__properties__: $extend(zygame_display_DisplayObjectContainer.prototype.__properties__,{get_actionName:"get_actionName",set_isPlay:"set_isPlay",get_isPlay:"get_isPlay",set_isNative:"set_isNative",get_isNative:"get_isNative"})
});
var spine_openfl_SkeletonAnimation = function(skeletonData,stateData) {
	this.assetsId = null;
	spine_openfl_SkeletonSprite.call(this,skeletonData);
	this.skeleton.flipY = true;
	this.state = new spine_AnimationState(stateData == null ? new spine_AnimationStateData(skeletonData) : stateData);
	this.advanceTime(0);
	this.setSkeletonData(skeletonData);
};
$hxClasses["spine.openfl.SkeletonAnimation"] = spine_openfl_SkeletonAnimation;
spine_openfl_SkeletonAnimation.__name__ = "spine.openfl.SkeletonAnimation";
spine_openfl_SkeletonAnimation.__super__ = spine_openfl_SkeletonSprite;
spine_openfl_SkeletonAnimation.prototype = $extend(spine_openfl_SkeletonSprite.prototype,{
	assetsId: null
	,state: null
	,setSkeletonData: function(skeletonData) {
		if(this.skeleton.getData() == skeletonData) {
			return;
		}
		this.skeleton = new spine_Skeleton(skeletonData);
		this.skeleton.flipY = true;
		this.state.data.skeletonData = skeletonData;
		var _this = this.skeleton;
		var cacheReset = _this.cacheReset;
		var i = 0;
		var n = cacheReset.length;
		while(i < n) {
			var bone = cacheReset[i];
			bone.ax = bone.x;
			bone.ay = bone.y;
			bone.arotation = bone.rotation;
			bone.ascaleX = bone.scaleX;
			bone.ascaleY = bone.scaleY;
			bone.ashearX = bone.shearX;
			bone.ashearY = bone.shearY;
			bone.appliedValid = true;
			++i;
		}
		var cache = _this.cache;
		var i = 0;
		var n = cache.length;
		while(i < n) {
			cache[i].update();
			++i;
		}
	}
	,advanceTime: function(time) {
		var _this = this.state;
		var delta = time * this.timeScale;
		delta *= _this.timeScale;
		var i = 0;
		var n = _this.tracks.length;
		while(i < n) {
			var current = _this.tracks[i];
			if(current == null) {
				++i;
				continue;
			}
			current.animationLast = current.nextAnimationLast;
			current.trackLast = current.nextTrackLast;
			var currentDelta = delta * current.timeScale;
			if(current.delay > 0) {
				current.delay -= currentDelta;
				if(current.delay > 0) {
					++i;
					continue;
				}
				currentDelta = -current.delay;
				current.delay = 0;
			}
			var next = current.next;
			if(next != null) {
				var nextTime = current.trackLast - next.delay;
				if(nextTime >= 0) {
					next.delay = 0;
					next.trackTime = nextTime + delta * next.timeScale;
					current.trackTime += currentDelta;
					var from;
					if(i < _this.tracks.length) {
						from = _this.tracks[i];
					} else {
						var this1 = _this.tracks;
						var size = i + 1;
						var len = this1.length;
						if(len > size) {
							this1.splice(size,size - len);
						} else if(len < size) {
							this1[size - 1] = null;
						}
						from = null;
					}
					_this.tracks[i] = next;
					if(from != null) {
						var _this1 = _this.queue;
						_this1.objects.push(1);
						_this1.objects.push(from);
						next.mixingFrom = from;
						next.mixTime = 0;
						if(from.mixingFrom != null && from.mixDuration > 0) {
							next.interruptAlpha *= Math.min(1,from.mixTime / from.mixDuration | 0);
						}
						var this2 = from.timelinesRotation;
						this2.splice(0,this2.length);
					}
					var _this2 = _this.queue;
					_this2.objects.push(0);
					_this2.objects.push(next);
					_this2.AnimationState_this.animationsChanged = true;
					while(next.mixingFrom != null) {
						next.mixTime += currentDelta;
						next = next.mixingFrom;
					}
					++i;
					continue;
				}
			} else if(current.trackLast >= current.trackEnd && current.mixingFrom == null) {
				_this.tracks[i] = null;
				var _this3 = _this.queue;
				_this3.objects.push(2);
				_this3.objects.push(current);
				_this3.AnimationState_this.animationsChanged = true;
				var next1 = current.next;
				while(next1 != null) {
					var _this4 = _this.queue;
					_this4.objects.push(3);
					_this4.objects.push(next1);
					next1 = next1.next;
				}
				current.next = null;
				++i;
				continue;
			}
			var tmp;
			if(current.mixingFrom != null) {
				var from1 = current.mixingFrom;
				if(from1 == null) {
					tmp = true;
				} else {
					var from2 = from1.mixingFrom;
					var finished;
					if(from2 == null) {
						finished = true;
					} else {
						var finished1 = _this.updateMixingFrom(from2,delta);
						from2.animationLast = from2.nextAnimationLast;
						from2.trackLast = from2.nextTrackLast;
						if(from1.mixTime > 0 && (from1.mixTime >= from1.mixDuration || from1.timeScale == 0)) {
							if(from2.totalAlpha == 0 || from1.mixDuration == 0) {
								from1.mixingFrom = from2.mixingFrom;
								from1.interruptAlpha = from2.interruptAlpha;
								var _this5 = _this.queue;
								_this5.objects.push(2);
								_this5.objects.push(from2);
								_this5.AnimationState_this.animationsChanged = true;
							}
							finished = finished1;
						} else {
							from2.trackTime += delta * from2.timeScale;
							from1.mixTime += delta * from1.timeScale;
							finished = false;
						}
					}
					from1.animationLast = from1.nextAnimationLast;
					from1.trackLast = from1.nextTrackLast;
					if(current.mixTime > 0 && (current.mixTime >= current.mixDuration || current.timeScale == 0)) {
						if(from1.totalAlpha == 0 || current.mixDuration == 0) {
							current.mixingFrom = from1.mixingFrom;
							current.interruptAlpha = from1.interruptAlpha;
							var _this6 = _this.queue;
							_this6.objects.push(2);
							_this6.objects.push(from1);
							_this6.AnimationState_this.animationsChanged = true;
						}
						tmp = finished;
					} else {
						from1.trackTime += delta * from1.timeScale;
						current.mixTime += delta * current.timeScale;
						tmp = false;
					}
				}
			} else {
				tmp = false;
			}
			if(tmp) {
				var from3 = current.mixingFrom;
				current.mixingFrom = null;
				while(from3 != null) {
					var _this7 = _this.queue;
					_this7.objects.push(2);
					_this7.objects.push(from3);
					_this7.AnimationState_this.animationsChanged = true;
					from3 = from3.mixingFrom;
				}
			}
			current.trackTime += currentDelta;
			++i;
		}
		var _this1 = _this.queue;
		if(!_this1.drainDisabled) {
			_this1.drainDisabled = true;
			var objects = _this1.objects;
			var listeners = _this1.AnimationState_this.listeners;
			var i = 0;
			while(i < objects.length) {
				var type = js_Boot.__cast(objects[i] , Int);
				var entry = js_Boot.__cast(objects[i + 1] , spine_TrackEntry);
				while(true) {
					var _switchCond1 = type;
					if(_switchCond1 == 0) {
						if(entry.listener != null) {
							entry.listener.start(entry);
						}
						var ii = 0;
						while(ii < listeners.length) {
							listeners[ii].start(entry);
							++ii;
						}
						break;
					} else if(_switchCond1 == 1) {
						if(entry.listener != null) {
							entry.listener.interrupt(entry);
						}
						var ii1 = 0;
						while(ii1 < listeners.length) {
							listeners[ii1].interrupt(entry);
							++ii1;
						}
						break;
					} else if(_switchCond1 == 2) {
						if(entry.listener != null) {
							entry.listener.end(entry);
						}
						var ii2 = 0;
						while(ii2 < listeners.length) {
							listeners[ii2].end(entry);
							++ii2;
						}
						if(entry.listener != null) {
							entry.listener.dispose(entry);
						}
						var ii3 = 0;
						while(ii3 < listeners.length) {
							listeners[ii3].dispose(entry);
							++ii3;
						}
						_this1.AnimationState_this.trackEntryPool.free(entry);
						break;
					} else if(_switchCond1 == 3) {
						if(entry.listener != null) {
							entry.listener.dispose(entry);
						}
						var ii4 = 0;
						while(ii4 < listeners.length) {
							listeners[ii4].dispose(entry);
							++ii4;
						}
						_this1.AnimationState_this.trackEntryPool.free(entry);
						break;
					} else if(_switchCond1 == 4) {
						if(entry.listener != null) {
							entry.listener.complete(entry);
						}
						var ii5 = 0;
						while(ii5 < listeners.length) {
							listeners[ii5].complete(entry);
							++ii5;
						}
						break;
					} else if(_switchCond1 == 5) {
						var event = js_Boot.__cast(objects[i++ + 2] , spine_Event);
						if(entry.listener != null) {
							entry.listener.event(entry,event);
						}
						var ii6 = 0;
						while(ii6 < listeners.length) {
							listeners[ii6].event(entry,event);
							++ii6;
						}
						break;
					}
					break;
				}
				i += 2;
			}
			var this1 = _this1.objects;
			this1.splice(0,this1.length);
			_this1.drainDisabled = false;
		}
		this.state.apply(this.skeleton);
		var _this = this.skeleton;
		var cacheReset = _this.cacheReset;
		var i = 0;
		var n = cacheReset.length;
		while(i < n) {
			var bone = cacheReset[i];
			bone.ax = bone.x;
			bone.ay = bone.y;
			bone.arotation = bone.rotation;
			bone.ascaleX = bone.scaleX;
			bone.ascaleY = bone.scaleY;
			bone.ashearX = bone.shearX;
			bone.ashearY = bone.shearY;
			bone.appliedValid = true;
			++i;
		}
		var cache = _this.cache;
		var i = 0;
		var n = cache.length;
		while(i < n) {
			cache[i].update();
			++i;
		}
		spine_openfl_SkeletonSprite.prototype.advanceTime.call(this,time);
	}
	,play: function(action,loop) {
		if(loop == null) {
			loop = true;
		}
		this.set_isPlay(true);
		if(action == this.get_actionName()) {
			return;
		}
		if(action != null && action != "") {
			var _this = this.state;
			var animation = _this.data.skeletonData.findAnimation(action);
			if(animation == null) {
				throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("Animation not found: " + action));
			}
			if(animation == null) {
				throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("animation cannot be null."));
			}
			var interrupt = true;
			var current;
			if(0 < _this.tracks.length) {
				current = _this.tracks[0];
			} else {
				var this1 = _this.tracks;
				var size = 1;
				var len = this1.length;
				if(len > size) {
					this1.splice(size,size - len);
				} else if(len < size) {
					this1[size - 1] = null;
				}
				current = null;
			}
			if(current != null) {
				if(current.nextTrackLast == -1) {
					_this.tracks[0] = current.mixingFrom;
					var _this1 = _this.queue;
					_this1.objects.push(1);
					_this1.objects.push(current);
					var _this1 = _this.queue;
					_this1.objects.push(2);
					_this1.objects.push(current);
					_this1.AnimationState_this.animationsChanged = true;
					var next = current.next;
					while(next != null) {
						var _this1 = _this.queue;
						_this1.objects.push(3);
						_this1.objects.push(next);
						next = next.next;
					}
					current.next = null;
					current = current.mixingFrom;
					interrupt = false;
				} else {
					var next = current.next;
					while(next != null) {
						var _this1 = _this.queue;
						_this1.objects.push(3);
						_this1.objects.push(next);
						next = next.next;
					}
					current.next = null;
				}
			}
			var entry = _this.trackEntryPool.obtain();
			entry.trackIndex = 0;
			entry.animation = animation;
			entry.loop = loop;
			entry.eventThreshold = 0;
			entry.attachmentThreshold = 0;
			entry.drawOrderThreshold = 0;
			entry.animationStart = 0;
			entry.animationEnd = animation.getDuration();
			entry.animationLast = -1;
			entry.nextAnimationLast = -1;
			entry.delay = 0;
			entry.trackTime = 0;
			entry.trackLast = -1;
			entry.nextTrackLast = -1;
			entry.trackEnd = 999999999.0;
			entry.timeScale = 1;
			entry.alpha = 1;
			entry.interruptAlpha = 1;
			entry.mixTime = 0;
			var tmp;
			if(current == null) {
				tmp = 0;
			} else {
				var _this1 = _this.data;
				var from = current.animation;
				if(from == null) {
					throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("from cannot be null."));
				}
				if(animation == null) {
					throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("to cannot be null."));
				}
				_this1.tempKey.a1 = from;
				_this1.tempKey.a2 = animation;
				tmp = spine_support_utils_ObjectMap.get(_this1.animationToMixTime,_this1.tempKey,_this1.defaultMix);
			}
			entry.mixDuration = tmp;
			var entry1 = entry;
			var from;
			if(0 < _this.tracks.length) {
				from = _this.tracks[0];
			} else {
				var this1 = _this.tracks;
				var size = 1;
				var len = this1.length;
				if(len > size) {
					this1.splice(size,size - len);
				} else if(len < size) {
					this1[size - 1] = null;
				}
				from = null;
			}
			_this.tracks[0] = entry1;
			if(from != null) {
				if(interrupt) {
					var _this1 = _this.queue;
					_this1.objects.push(1);
					_this1.objects.push(from);
				}
				entry1.mixingFrom = from;
				entry1.mixTime = 0;
				if(from.mixingFrom != null && from.mixDuration > 0) {
					entry1.interruptAlpha *= Math.min(1,from.mixTime / from.mixDuration | 0);
				}
				var this1 = from.timelinesRotation;
				this1.splice(0,this1.length);
			}
			var _this1 = _this.queue;
			_this1.objects.push(0);
			_this1.objects.push(entry1);
			_this1.AnimationState_this.animationsChanged = true;
			var _this1 = _this.queue;
			if(!_this1.drainDisabled) {
				_this1.drainDisabled = true;
				var objects = _this1.objects;
				var listeners = _this1.AnimationState_this.listeners;
				var i = 0;
				while(i < objects.length) {
					var type = js_Boot.__cast(objects[i] , Int);
					var entry = js_Boot.__cast(objects[i + 1] , spine_TrackEntry);
					while(true) {
						var _switchCond1 = type;
						if(_switchCond1 == 0) {
							if(entry.listener != null) {
								entry.listener.start(entry);
							}
							var ii = 0;
							while(ii < listeners.length) {
								listeners[ii].start(entry);
								++ii;
							}
							break;
						} else if(_switchCond1 == 1) {
							if(entry.listener != null) {
								entry.listener.interrupt(entry);
							}
							var ii1 = 0;
							while(ii1 < listeners.length) {
								listeners[ii1].interrupt(entry);
								++ii1;
							}
							break;
						} else if(_switchCond1 == 2) {
							if(entry.listener != null) {
								entry.listener.end(entry);
							}
							var ii2 = 0;
							while(ii2 < listeners.length) {
								listeners[ii2].end(entry);
								++ii2;
							}
							if(entry.listener != null) {
								entry.listener.dispose(entry);
							}
							var ii3 = 0;
							while(ii3 < listeners.length) {
								listeners[ii3].dispose(entry);
								++ii3;
							}
							_this1.AnimationState_this.trackEntryPool.free(entry);
							break;
						} else if(_switchCond1 == 3) {
							if(entry.listener != null) {
								entry.listener.dispose(entry);
							}
							var ii4 = 0;
							while(ii4 < listeners.length) {
								listeners[ii4].dispose(entry);
								++ii4;
							}
							_this1.AnimationState_this.trackEntryPool.free(entry);
							break;
						} else if(_switchCond1 == 4) {
							if(entry.listener != null) {
								entry.listener.complete(entry);
							}
							var ii5 = 0;
							while(ii5 < listeners.length) {
								listeners[ii5].complete(entry);
								++ii5;
							}
							break;
						} else if(_switchCond1 == 5) {
							var event = js_Boot.__cast(objects[i++ + 2] , spine_Event);
							if(entry.listener != null) {
								entry.listener.event(entry,event);
							}
							var ii6 = 0;
							while(ii6 < listeners.length) {
								listeners[ii6].event(entry,event);
								++ii6;
							}
							break;
						}
						break;
					}
					i += 2;
				}
				var this1 = _this1.objects;
				this1.splice(0,this1.length);
				_this1.drainDisabled = false;
			}
		}
		spine_openfl_SkeletonSprite.prototype.play.call(this,action);
	}
	,playForce: function(action,loop) {
		if(loop == null) {
			loop = true;
		}
		this.set_isPlay(true);
		if(action != null && action != "") {
			var _this = this.state;
			var animation = _this.data.skeletonData.findAnimation(action);
			if(animation == null) {
				throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("Animation not found: " + action));
			}
			if(animation == null) {
				throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("animation cannot be null."));
			}
			var interrupt = true;
			var current;
			if(0 < _this.tracks.length) {
				current = _this.tracks[0];
			} else {
				var this1 = _this.tracks;
				var size = 1;
				var len = this1.length;
				if(len > size) {
					this1.splice(size,size - len);
				} else if(len < size) {
					this1[size - 1] = null;
				}
				current = null;
			}
			if(current != null) {
				if(current.nextTrackLast == -1) {
					_this.tracks[0] = current.mixingFrom;
					var _this1 = _this.queue;
					_this1.objects.push(1);
					_this1.objects.push(current);
					var _this1 = _this.queue;
					_this1.objects.push(2);
					_this1.objects.push(current);
					_this1.AnimationState_this.animationsChanged = true;
					var next = current.next;
					while(next != null) {
						var _this1 = _this.queue;
						_this1.objects.push(3);
						_this1.objects.push(next);
						next = next.next;
					}
					current.next = null;
					current = current.mixingFrom;
					interrupt = false;
				} else {
					var next = current.next;
					while(next != null) {
						var _this1 = _this.queue;
						_this1.objects.push(3);
						_this1.objects.push(next);
						next = next.next;
					}
					current.next = null;
				}
			}
			var entry = _this.trackEntryPool.obtain();
			entry.trackIndex = 0;
			entry.animation = animation;
			entry.loop = loop;
			entry.eventThreshold = 0;
			entry.attachmentThreshold = 0;
			entry.drawOrderThreshold = 0;
			entry.animationStart = 0;
			entry.animationEnd = animation.getDuration();
			entry.animationLast = -1;
			entry.nextAnimationLast = -1;
			entry.delay = 0;
			entry.trackTime = 0;
			entry.trackLast = -1;
			entry.nextTrackLast = -1;
			entry.trackEnd = 999999999.0;
			entry.timeScale = 1;
			entry.alpha = 1;
			entry.interruptAlpha = 1;
			entry.mixTime = 0;
			var tmp;
			if(current == null) {
				tmp = 0;
			} else {
				var _this1 = _this.data;
				var from = current.animation;
				if(from == null) {
					throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("from cannot be null."));
				}
				if(animation == null) {
					throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("to cannot be null."));
				}
				_this1.tempKey.a1 = from;
				_this1.tempKey.a2 = animation;
				tmp = spine_support_utils_ObjectMap.get(_this1.animationToMixTime,_this1.tempKey,_this1.defaultMix);
			}
			entry.mixDuration = tmp;
			var entry1 = entry;
			var from;
			if(0 < _this.tracks.length) {
				from = _this.tracks[0];
			} else {
				var this1 = _this.tracks;
				var size = 1;
				var len = this1.length;
				if(len > size) {
					this1.splice(size,size - len);
				} else if(len < size) {
					this1[size - 1] = null;
				}
				from = null;
			}
			_this.tracks[0] = entry1;
			if(from != null) {
				if(interrupt) {
					var _this1 = _this.queue;
					_this1.objects.push(1);
					_this1.objects.push(from);
				}
				entry1.mixingFrom = from;
				entry1.mixTime = 0;
				if(from.mixingFrom != null && from.mixDuration > 0) {
					entry1.interruptAlpha *= Math.min(1,from.mixTime / from.mixDuration | 0);
				}
				var this1 = from.timelinesRotation;
				this1.splice(0,this1.length);
			}
			var _this1 = _this.queue;
			_this1.objects.push(0);
			_this1.objects.push(entry1);
			_this1.AnimationState_this.animationsChanged = true;
			var _this1 = _this.queue;
			if(!_this1.drainDisabled) {
				_this1.drainDisabled = true;
				var objects = _this1.objects;
				var listeners = _this1.AnimationState_this.listeners;
				var i = 0;
				while(i < objects.length) {
					var type = js_Boot.__cast(objects[i] , Int);
					var entry = js_Boot.__cast(objects[i + 1] , spine_TrackEntry);
					while(true) {
						var _switchCond1 = type;
						if(_switchCond1 == 0) {
							if(entry.listener != null) {
								entry.listener.start(entry);
							}
							var ii = 0;
							while(ii < listeners.length) {
								listeners[ii].start(entry);
								++ii;
							}
							break;
						} else if(_switchCond1 == 1) {
							if(entry.listener != null) {
								entry.listener.interrupt(entry);
							}
							var ii1 = 0;
							while(ii1 < listeners.length) {
								listeners[ii1].interrupt(entry);
								++ii1;
							}
							break;
						} else if(_switchCond1 == 2) {
							if(entry.listener != null) {
								entry.listener.end(entry);
							}
							var ii2 = 0;
							while(ii2 < listeners.length) {
								listeners[ii2].end(entry);
								++ii2;
							}
							if(entry.listener != null) {
								entry.listener.dispose(entry);
							}
							var ii3 = 0;
							while(ii3 < listeners.length) {
								listeners[ii3].dispose(entry);
								++ii3;
							}
							_this1.AnimationState_this.trackEntryPool.free(entry);
							break;
						} else if(_switchCond1 == 3) {
							if(entry.listener != null) {
								entry.listener.dispose(entry);
							}
							var ii4 = 0;
							while(ii4 < listeners.length) {
								listeners[ii4].dispose(entry);
								++ii4;
							}
							_this1.AnimationState_this.trackEntryPool.free(entry);
							break;
						} else if(_switchCond1 == 4) {
							if(entry.listener != null) {
								entry.listener.complete(entry);
							}
							var ii5 = 0;
							while(ii5 < listeners.length) {
								listeners[ii5].complete(entry);
								++ii5;
							}
							break;
						} else if(_switchCond1 == 5) {
							var event = js_Boot.__cast(objects[i++ + 2] , spine_Event);
							if(entry.listener != null) {
								entry.listener.event(entry,event);
							}
							var ii6 = 0;
							while(ii6 < listeners.length) {
								listeners[ii6].event(entry,event);
								++ii6;
							}
							break;
						}
						break;
					}
					i += 2;
				}
				var this1 = _this1.objects;
				this1.splice(0,this1.length);
				_this1.drainDisabled = false;
			}
		}
		spine_openfl_SkeletonSprite.prototype.play.call(this,action);
	}
	,__class__: spine_openfl_SkeletonAnimation
});
var spine_openfl_SkeletonBatchs = function(bitmapData) {
	this._isClearTriangles = true;
	this._setXBool = true;
	this._uindex = 0;
	this._buffdataPoint = 0;
	this.allUvs = openfl_Vector.toFloatVector(null);
	this.allTriangles = openfl_Vector.toIntVector(null);
	this.allVerticesArray = openfl_Vector.toFloatVector(null);
	openfl_display_Sprite.call(this);
	this._bitmapData = bitmapData;
	zygame_utils_SpineManager.addOnFrame(this);
};
$hxClasses["spine.openfl.SkeletonBatchs"] = spine_openfl_SkeletonBatchs;
spine_openfl_SkeletonBatchs.__name__ = "spine.openfl.SkeletonBatchs";
spine_openfl_SkeletonBatchs.__interfaces__ = [spine_base_SpineBaseDisplay];
spine_openfl_SkeletonBatchs.__super__ = openfl_display_Sprite;
spine_openfl_SkeletonBatchs.prototype = $extend(openfl_display_Sprite.prototype,{
	allVerticesArray: null
	,allTriangles: null
	,allUvs: null
	,_bitmapData: null
	,_buffdataPoint: null
	,_uindex: null
	,_setXBool: null
	,_isClearTriangles: null
	,onSpineUpdate: function(dt) {
		this.get_graphics().clear();
		this.allVerticesArray.splice(0,this.allVerticesArray.get_length());
		this.allUvs.splice(0,this.allUvs.get_length());
		this._buffdataPoint = 0;
		this._uindex = 0;
		var ren = this.get_numChildren();
		var _g = 0;
		var _g1 = ren;
		while(_g < _g1) {
			var i = _g++;
			var s = this.getChildAt(i);
			s.advanceTime(dt);
		}
		this.endFill();
	}
	,clearTriangles: function() {
		this.allTriangles.splice(0,this.allTriangles.get_length());
	}
	,uploadBuffData: function(sprite,v,i,uvs) {
		var t = this.allUvs.get_length() / 2 | 0;
		var _g = 0;
		var _g1 = i.get_length();
		while(_g < _g1) {
			var vi = _g++;
			var _g2 = vi;
			var _g3 = i;
			_g3.set(_g2,_g3.get(_g2) + t);
			this.allTriangles.set(this._buffdataPoint,i.get(vi));
			this._buffdataPoint++;
		}
		var _g = 0;
		var _g1 = uvs.get_length();
		while(_g < _g1) {
			var ui = _g++;
			this.allVerticesArray.set(this._uindex,v.get(ui) * (this._setXBool ? sprite.get_scaleX() : sprite.get_scaleY()));
			var _g2 = this._uindex;
			var _g3 = this.allVerticesArray;
			_g3.set(_g2,_g3.get(_g2) + (this._setXBool ? sprite.get_x() : sprite.get_y()));
			this.allUvs.set(this._uindex,uvs.get(ui));
			this._uindex++;
			this._setXBool = !this._setXBool;
		}
		t += uvs.get_length() / 2 | 0;
	}
	,endFill: function() {
		this.get_graphics().beginBitmapFill(this._bitmapData,null,true,true);
		this.get_graphics().drawTriangles(this.allVerticesArray,this.allTriangles,this.allUvs,1);
		this.get_graphics().endFill();
		this._isClearTriangles = false;
	}
	,addChildAt: function(child,index) {
		if(!((child) instanceof spine_openfl_SkeletonSprite)) {
			throw haxe_Exception.thrown("请不要添加非spine.openfl.SkeletonSprite对象！");
		}
		var s = js_Boot.__cast(child , spine_openfl_SkeletonSprite);
		s.batchs = this;
		s.get_graphics().clear();
		return openfl_display_Sprite.prototype.addChildAt.call(this,child,index);
	}
	,__class__: spine_openfl_SkeletonBatchs
});
var spine_support_concurrent_atomic_AtomicInteger = {};
spine_support_concurrent_atomic_AtomicInteger._new = function() {
	var this1 = 0;
	return this1;
};
spine_support_concurrent_atomic_AtomicInteger.getAndIncrement = function(this1) {
	return this1++;
};
var spine_support_error_IllegalStateException = function(message) {
	if(message == null) {
		message = "";
	}
	spine_support_error_Error.call(this,message);
	this.name = "IllegalStateException";
};
$hxClasses["spine.support.error.IllegalStateException"] = spine_support_error_IllegalStateException;
spine_support_error_IllegalStateException.__name__ = "spine.support.error.IllegalStateException";
spine_support_error_IllegalStateException.__super__ = spine_support_error_Error;
spine_support_error_IllegalStateException.prototype = $extend(spine_support_error_Error.prototype,{
	__class__: spine_support_error_IllegalStateException
});
var spine_support_error_RuntimeException = function(message) {
	if(message == null) {
		message = "";
	}
	spine_support_error_Error.call(this,message);
	this.name = "RuntimeException";
};
$hxClasses["spine.support.error.RuntimeException"] = spine_support_error_RuntimeException;
spine_support_error_RuntimeException.__name__ = "spine.support.error.RuntimeException";
spine_support_error_RuntimeException.__super__ = spine_support_error_Error;
spine_support_error_RuntimeException.prototype = $extend(spine_support_error_Error.prototype,{
	__class__: spine_support_error_RuntimeException
});
var spine_support_extensions_ArrayExtensions = function() { };
$hxClasses["spine.support.extensions.ArrayExtensions"] = spine_support_extensions_ArrayExtensions;
spine_support_extensions_ArrayExtensions.__name__ = "spine.support.extensions.ArrayExtensions";
spine_support_extensions_ArrayExtensions.setSize = function(array,size) {
	var len = array.length;
	if(len > size) {
		array.splice(size,size - len);
	} else if(len < size) {
		var dArray = array;
		dArray[size - 1] = null;
	}
	return array;
};
spine_support_extensions_ArrayExtensions.add = function(array,item) {
	array.push(item);
};
spine_support_extensions_ArrayExtensions.removeIndex = function(array,index) {
	array.splice(index,1);
};
spine_support_extensions_ArrayExtensions.unsafeGet = function(array,index) {
	return array[index];
};
spine_support_extensions_ArrayExtensions.unsafeSet = function(array,index,value) {
	array[index] = value;
};
var spine_support_extensions_FileExtensions = function() { };
$hxClasses["spine.support.extensions.FileExtensions"] = spine_support_extensions_FileExtensions;
spine_support_extensions_FileExtensions.__name__ = "spine.support.extensions.FileExtensions";
spine_support_extensions_FileExtensions.nameWithoutExtension = function(file) {
	var name = file.path;
	var slashIndex = name.lastIndexOf("/");
	if(slashIndex != -1) {
		name = name.substring(slashIndex);
	}
	var dotIndex = name.lastIndexOf(".");
	if(dotIndex != -1) {
		name = name.substring(0,dotIndex);
	}
	return name;
};
var spine_support_extensions_SpineExtensions = function() { };
$hxClasses["spine.support.extensions.SpineExtensions"] = spine_support_extensions_SpineExtensions;
spine_support_extensions_SpineExtensions.__name__ = "spine.support.extensions.SpineExtensions";
spine_support_extensions_SpineExtensions.equals = function(anim1,anim2) {
	return anim1 == anim2;
};
spine_support_extensions_SpineExtensions.getHashCode = function(anim) {
	return anim.hashCode;
};
var spine_support_extensions_StringExtensions = function() { };
$hxClasses["spine.support.extensions.StringExtensions"] = spine_support_extensions_StringExtensions;
spine_support_extensions_StringExtensions.__name__ = "spine.support.extensions.StringExtensions";
spine_support_extensions_StringExtensions.equals = function(str0,str1) {
	return str0 == str1;
};
spine_support_extensions_StringExtensions.getHashCode = function(str) {
	var hash = 0;
	var chr;
	if(str.length == 0) {
		return hash;
	}
	var _g = 0;
	var _g1 = str.length;
	while(_g < _g1) {
		var i = _g++;
		chr = HxOverrides.cca(str,i);
		hash = (hash << 5) - hash + chr;
	}
	return hash;
};
var spine_support_graphics_Color = function(r,g,b,a) {
	if(a == null) {
		a = 0;
	}
	if(b == null) {
		b = 0;
	}
	if(g == null) {
		g = 0;
	}
	if(r == null) {
		r = 0;
	}
	this.r = r;
	this.g = g;
	this.b = b;
	this.a = a;
};
$hxClasses["spine.support.graphics.Color"] = spine_support_graphics_Color;
spine_support_graphics_Color.__name__ = "spine.support.graphics.Color";
spine_support_graphics_Color.valueOf = function(hex) {
	if(hex.charAt(0) == "#") {
		hex = hex.substring(1);
	}
	if(HxOverrides.substr(hex,0,2) == "0x") {
		hex = hex.substring(2);
	}
	var r = Std.parseInt("0x" + hex.substring(0,2));
	var g = Std.parseInt("0x" + hex.substring(2,4));
	var b = Std.parseInt("0x" + hex.substring(4,6));
	var a = hex.length != 8 ? 255 : Std.parseInt("0x" + hex.substring(6,8));
	return new spine_support_graphics_Color(r / 255.0,g / 255.0,b / 255.0,a / 255.0);
};
spine_support_graphics_Color.prototype = {
	r: null
	,g: null
	,b: null
	,a: null
	,set: function(r,g,b,a) {
		if(a == null) {
			a = -1;
		}
		if(b == null) {
			b = -1;
		}
		if(g == null) {
			g = -1;
		}
		if(typeof(r) == "number") {
			this.r = r;
			this.g = g;
			this.b = b;
			if(a != -1) {
				this.a = a;
			}
		} else {
			var color = r;
			this.r = color.r;
			this.g = color.g;
			this.b = color.b;
			this.a = color.a;
		}
		return this;
	}
	,add: function(r,g,b,a) {
		this.r += r;
		this.g += g;
		this.b += b;
		this.a += a;
		return this;
	}
	,mul: function(r,g,b,a) {
		this.r *= r;
		this.g *= g;
		this.b *= b;
		this.a *= a;
		return this;
	}
	,setRgba888: function(value) {
		this.r = ((value & -16777216) >>> 24) / 255.0;
		this.g = ((value & 16711680) >>> 16) / 255.0;
		this.b = ((value & 65280) >>> 8) / 255.0;
		this.a = (value & 255) / 255.0;
		return this;
	}
	,__class__: spine_support_graphics_Color
};
var spine_support_graphics_TextureAtlas = function(object,textureLoader) {
	this.regions = [];
	this.pages = [];
	if(object == null) {
		return;
	}
	this.load(object == null ? "null" : "" + object,textureLoader);
};
$hxClasses["spine.support.graphics.TextureAtlas"] = spine_support_graphics_TextureAtlas;
spine_support_graphics_TextureAtlas.__name__ = "spine.support.graphics.TextureAtlas";
spine_support_graphics_TextureAtlas.prototype = {
	pages: null
	,regions: null
	,textureLoader: null
	,load: function(atlasText,textureLoader) {
		if(textureLoader == null) {
			throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("textureLoader cannot be null."));
		}
		this.textureLoader = textureLoader;
		var reader = new spine_support_graphics_Reader(atlasText);
		var tuple = [null,null,null,null];
		var page = null;
		while(true) {
			var line = reader.readLine();
			if(line == null) {
				break;
			}
			line = reader.trim(line);
			if(line.length == 0) {
				page = null;
			} else if(page == null) {
				page = new spine_support_graphics_AtlasPage();
				page.name = line;
				if(reader.readTuple(tuple) == 2) {
					page.width = Std.parseInt(tuple[0]);
					page.height = Std.parseInt(tuple[1]);
					reader.readTuple(tuple);
				}
				page.format = tuple[0];
				reader.readTuple(tuple);
				page.minFilter = tuple[0];
				page.magFilter = tuple[1];
				var direction = reader.readValue();
				page.uWrap = spine_support_graphics_TextureWrap.clampToEdge;
				page.vWrap = spine_support_graphics_TextureWrap.clampToEdge;
				if(direction == "x") {
					page.uWrap = spine_support_graphics_TextureWrap.repeat;
				} else if(direction == "y") {
					page.vWrap = spine_support_graphics_TextureWrap.repeat;
				} else if(direction == "xy") {
					page.uWrap = page.vWrap = spine_support_graphics_TextureWrap.repeat;
				}
				textureLoader.loadPage(page,line);
				this.pages[this.pages.length] = page;
			} else {
				var region = new spine_support_graphics_AtlasRegion();
				region.name = line;
				region.page = page;
				region.rotate = reader.readValue() == "true";
				reader.readTuple(tuple);
				var x = Std.parseInt(tuple[0]);
				var y = Std.parseInt(tuple[1]);
				reader.readTuple(tuple);
				var width = Std.parseInt(tuple[0]);
				var height = Std.parseInt(tuple[1]);
				region.u = x / page.width;
				region.v = y / page.height;
				if(region.rotate) {
					region.u2 = (x + height) / page.width;
					region.v2 = (y + width) / page.height;
				} else {
					region.u2 = (x + width) / page.width;
					region.v2 = (y + height) / page.height;
				}
				region.x = x;
				region.y = y;
				region.width = Math.abs(width);
				region.height = Math.abs(height);
				if(reader.readTuple(tuple) == 4) {
					region.splits = [];
					if(reader.readTuple(tuple) == 4) {
						region.pads = [Std.parseInt(tuple[0]),Std.parseInt(tuple[1]),Std.parseInt(tuple[2]),Std.parseInt(tuple[3])];
						reader.readTuple(tuple);
					}
				}
				region.originalWidth = Std.parseInt(tuple[0]);
				region.originalHeight = Std.parseInt(tuple[1]);
				if(region.rotate) {
					region.packedWidth = region.originalHeight;
					region.packedHeight = region.originalWidth;
				} else {
					region.packedWidth = region.originalWidth;
					region.packedHeight = region.originalHeight;
				}
				reader.readTuple(tuple);
				region.offsetX = Std.parseInt(tuple[0]);
				region.offsetY = Std.parseInt(tuple[1]);
				region.index = Std.parseInt(reader.readValue());
				textureLoader.loadRegion(region);
				this.regions[this.regions.length] = region;
			}
		}
	}
	,findRegion: function(name) {
		var i = 0;
		var n = this.regions.length;
		while(i < n) {
			if(this.regions[i].name == name) {
				return this.regions[i];
			}
			++i;
		}
		return null;
	}
	,dispose: function() {
		var i = 0;
		var n = this.pages.length;
		while(i < n) {
			this.textureLoader.unloadPage(this.pages[i]);
			++i;
		}
	}
	,__class__: spine_support_graphics_TextureAtlas
};
var spine_support_graphics_Reader = function(text) {
	this.lines = StringTools.replace(StringTools.replace(StringTools.trim(text),"\r\n","\n"),"\r","\n").split("\n");
	this.index = 0;
};
$hxClasses["spine.support.graphics.Reader"] = spine_support_graphics_Reader;
spine_support_graphics_Reader.__name__ = "spine.support.graphics.Reader";
spine_support_graphics_Reader.prototype = {
	lines: null
	,index: null
	,trim: function(value) {
		return StringTools.trim(value);
	}
	,readLine: function() {
		if(this.index >= this.lines.length) {
			return null;
		}
		return this.lines[this.index++];
	}
	,readValue: function() {
		var line = this.readLine();
		var colon = line.indexOf(":");
		if(colon == -1) {
			throw haxe_Exception.thrown(new spine_support_error_Error("Invalid line: " + line));
		}
		return this.trim(line.substring(colon + 1));
	}
	,readTuple: function(tuple) {
		var line = this.readLine();
		var colon = line.indexOf(":");
		if(colon == -1) {
			throw haxe_Exception.thrown(new spine_support_error_Error("Invalid line: " + line));
		}
		var i = 0;
		var lastMatch = colon + 1;
		while(i < 3) {
			var comma = line.indexOf(",",lastMatch);
			if(comma == -1) {
				break;
			}
			tuple[i] = this.trim(HxOverrides.substr(line,lastMatch,comma - lastMatch));
			lastMatch = comma + 1;
			++i;
		}
		tuple[i] = this.trim(line.substring(lastMatch));
		return i + 1;
	}
	,__class__: spine_support_graphics_Reader
};
var spine_support_graphics_AtlasPage = function() {
};
$hxClasses["spine.support.graphics.AtlasPage"] = spine_support_graphics_AtlasPage;
spine_support_graphics_AtlasPage.__name__ = "spine.support.graphics.AtlasPage";
spine_support_graphics_AtlasPage.prototype = {
	name: null
	,format: null
	,minFilter: null
	,magFilter: null
	,uWrap: null
	,vWrap: null
	,rendererObject: null
	,width: null
	,height: null
	,__class__: spine_support_graphics_AtlasPage
};
var spine_support_graphics_TextureRegion = function() {
	this.v2 = 0;
	this.u2 = 0;
	this.v = 0;
	this.u = 0;
};
$hxClasses["spine.support.graphics.TextureRegion"] = spine_support_graphics_TextureRegion;
spine_support_graphics_TextureRegion.__name__ = "spine.support.graphics.TextureRegion";
spine_support_graphics_TextureRegion.prototype = {
	rendererObject: null
	,u: null
	,v: null
	,u2: null
	,v2: null
	,getU: function() {
		return this.u;
	}
	,getV: function() {
		return this.v;
	}
	,getU2: function() {
		return this.u2;
	}
	,getV2: function() {
		return this.v2;
	}
	,__class__: spine_support_graphics_TextureRegion
};
var spine_support_graphics_AtlasRegion = function() {
	this.rotate = false;
	this.index = 0;
	this.originalHeight = 0;
	this.originalWidth = 0;
	this.offsetY = 0;
	this.offsetX = 0;
	this.packedHeight = 0;
	this.packedWidth = 0;
	this.height = 0;
	this.width = 0;
	this.y = 0;
	this.x = 0;
	spine_support_graphics_TextureRegion.call(this);
};
$hxClasses["spine.support.graphics.AtlasRegion"] = spine_support_graphics_AtlasRegion;
spine_support_graphics_AtlasRegion.__name__ = "spine.support.graphics.AtlasRegion";
spine_support_graphics_AtlasRegion.__super__ = spine_support_graphics_TextureRegion;
spine_support_graphics_AtlasRegion.prototype = $extend(spine_support_graphics_TextureRegion.prototype,{
	name: null
	,x: null
	,y: null
	,width: null
	,height: null
	,packedWidth: null
	,packedHeight: null
	,offsetX: null
	,offsetY: null
	,originalWidth: null
	,originalHeight: null
	,index: null
	,rotate: null
	,splits: null
	,pads: null
	,page: null
	,__class__: spine_support_graphics_AtlasRegion
});
var spine_support_graphics_TextureWrap = function(ordinal,name) {
	this.ordinal = ordinal;
	this.name = name;
};
$hxClasses["spine.support.graphics.TextureWrap"] = spine_support_graphics_TextureWrap;
spine_support_graphics_TextureWrap.__name__ = "spine.support.graphics.TextureWrap";
spine_support_graphics_TextureWrap.prototype = {
	ordinal: null
	,name: null
	,__class__: spine_support_graphics_TextureWrap
};
var spine_support_math_MathUtils = function() { };
$hxClasses["spine.support.math.MathUtils"] = spine_support_math_MathUtils;
spine_support_math_MathUtils.__name__ = "spine.support.math.MathUtils";
spine_support_math_MathUtils.sinDeg = function(degrees) {
	return Math.sin(degrees * spine_support_math_MathUtils.degRad);
};
spine_support_math_MathUtils.cosDeg = function(degrees) {
	return Math.cos(degrees * spine_support_math_MathUtils.degRad);
};
spine_support_math_MathUtils.sin = function(angle) {
	return Math.sin(angle);
};
spine_support_math_MathUtils.cos = function(angle) {
	return Math.cos(angle);
};
spine_support_math_MathUtils.clamp = function(value,min,max) {
	if(value < min) {
		return min;
	}
	if(value > max) {
		return max;
	}
	return value;
};
spine_support_math_MathUtils.max = function(val1,val2) {
	return Math.max(val1,val2);
};
spine_support_math_MathUtils.min = function(val1,val2) {
	return Math.min(val1,val2);
};
spine_support_math_MathUtils.signum = function(val) {
	if(val > 0) {
		return 1;
	} else if(val < 0) {
		return -1;
	} else {
		return 0;
	}
};
var spine_support_math_Matrix3 = function() {
	var array = [];
	var len = array.length;
	if(len > 9) {
		array.splice(9,9 - len);
	} else if(len < 9) {
		while(len < 9) {
			array.push(0);
			++len;
		}
	}
	this.val = array;
};
$hxClasses["spine.support.math.Matrix3"] = spine_support_math_Matrix3;
spine_support_math_Matrix3.__name__ = "spine.support.math.Matrix3";
spine_support_math_Matrix3.prototype = {
	val: null
	,__class__: spine_support_math_Matrix3
};
var spine_support_math_Vector2 = function(x,y) {
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.y = 0;
	this.x = 0;
	this.x = x;
	this.y = y;
};
$hxClasses["spine.support.math.Vector2"] = spine_support_math_Vector2;
spine_support_math_Vector2.__name__ = "spine.support.math.Vector2";
spine_support_math_Vector2.prototype = {
	x: null
	,y: null
	,set: function(x,y) {
		this.x = x;
		this.y = y;
		return this;
	}
	,__class__: spine_support_math_Vector2
};
var spine_support_utils_Array = {};
spine_support_utils_Array.__properties__ = {set_size:"set_size",get_size:"get_size",get_items:"get_items"};
spine_support_utils_Array.copy = function(src,srcPos,dest,destPos,length) {
	var _g = 0;
	var _g1 = length;
	while(_g < _g1) {
		var i = _g++;
		dest[i + destPos] = src[i + srcPos];
	}
};
spine_support_utils_Array.create = function(length) {
	if(length == null) {
		length = 0;
	}
	var len = length | 0;
	var capacity = len != 0 ? len : 16;
	var this1 = [];
	var array = this1;
	if(length != 0) {
		var len1 = array.length;
		if(len1 > len) {
			array.splice(len,len - len1);
		} else if(len1 < len) {
			array[len - 1] = null;
		}
	}
	return array;
};
spine_support_utils_Array.createFloatArray2D = function(length,length2) {
	if(length2 == null) {
		length2 = 0;
	}
	if(length == null) {
		length = 0;
	}
	var len = length | 0;
	var len2 = length2 | 0;
	var capacity = len != 0 ? len : 16;
	var this1 = [];
	var array = this1;
	if(length > 0) {
		var len1 = array.length;
		if(len1 > len) {
			array.splice(len,len - len1);
		} else if(len1 < len) {
			array[len - 1] = null;
		}
	}
	var _g = 0;
	var _g1 = len2;
	while(_g < _g1) {
		var i = _g++;
		var length = length2;
		if(length == null) {
			length = 0;
		}
		var len = length | 0;
		var capacity = len != 0 ? len : 16;
		var this1 = [];
		var array1 = this1;
		if(length > 0) {
			var len1 = array1.length;
			if(len1 > len) {
				array1.splice(len,len - len1);
			} else if(len1 < len) {
				while(len1 < len) {
					array1.push(0);
					++len1;
				}
			}
		}
		array[i] = array1;
	}
	return array;
};
spine_support_utils_Array.createIntArray2D = function(length,length2) {
	if(length2 == null) {
		length2 = 0;
	}
	if(length == null) {
		length = 0;
	}
	var len = length | 0;
	var len2 = length2 | 0;
	var capacity = len != 0 ? len : 16;
	var this1 = [];
	var array = this1;
	if(length > 0) {
		var len1 = array.length;
		if(len1 > len) {
			array.splice(len,len - len1);
		} else if(len1 < len) {
			array[len - 1] = null;
		}
	}
	var _g = 0;
	var _g1 = len2;
	while(_g < _g1) {
		var i = _g++;
		var length = length2;
		if(length == null) {
			length = 0;
		}
		var len = length | 0;
		var capacity = len != 0 ? len : 16;
		var this1 = [];
		var array1 = this1;
		if(length != 0) {
			var len1 = array1.length;
			if(len1 > len) {
				array1.splice(len,len - len1);
			} else if(len1 < len) {
				while(len1 < len) {
					array1.push(0);
					++len1;
				}
			}
		}
		array[i] = array1;
	}
	return array;
};
spine_support_utils_Array._new = function(capacity) {
	if(capacity == null) {
		capacity = 16;
	}
	var this1 = [];
	return this1;
};
spine_support_utils_Array.get_items = function(this1) {
	return this1;
};
spine_support_utils_Array.get_size = function(this1) {
	return this1.length;
};
spine_support_utils_Array.set_size = function(this1,size) {
	var len = this1.length;
	if(len > size) {
		this1.splice(size,size - len);
	} else if(len < size) {
		this1[size - 1] = null;
	}
	return this1.length;
};
spine_support_utils_Array.shrink = function(this1) {
	return this1;
};
spine_support_utils_Array.clear = function(this1) {
	this1.splice(0,this1.length);
};
spine_support_utils_Array.first = function(this1) {
	if(this1.length > 0) {
		return this1[0];
	} else {
		return null;
	}
};
spine_support_utils_Array.peek = function(this1) {
	if(this1.length == 0) {
		return null;
	} else {
		return this1[this1.length - 1];
	}
};
spine_support_utils_Array.contains = function(this1,value,identity) {
	return this1.indexOf(value) != -1;
};
spine_support_utils_Array.removeValue = function(this1,value,identity) {
	var index = this1.indexOf(value);
	if(index == -1) {
		return false;
	}
	this1.splice(index,1);
	return true;
};
spine_support_utils_Array.setSize = function(this1,size) {
	var len = this1.length;
	if(len > size) {
		this1.splice(size,size - len);
	} else if(len < size) {
		this1[size - 1] = null;
	}
	return this1;
};
spine_support_utils_Array.add = function(this1,item) {
	this1.push(item);
};
spine_support_utils_Array.addAll = function(this1,items,start,count) {
	if(count == null) {
		count = -1;
	}
	if(start == null) {
		start = 0;
	}
	if(count == -1) {
		count = items.length;
	}
	var i = this1.length;
	var len = i + items.length;
	var len1 = this1.length;
	if(len1 > len) {
		this1.splice(len,len - len1);
	} else if(len1 < len) {
		this1[len - 1] = null;
	}
	var _g = 0;
	var _g1 = items;
	while(_g < _g1.length) {
		var item = _g1[_g];
		++_g;
		this1[i++] = item;
		if(--count <= 0) {
			break;
		}
	}
};
spine_support_utils_Array.get = function(this1,index) {
	return this1[index];
};
spine_support_utils_Array.set = function(this1,index,value) {
	this1[index] = value;
};
spine_support_utils_Array.indexOf = function(this1,value,identity) {
	return this1.indexOf(value);
};
spine_support_utils_Array.removeIndex = function(this1,index) {
	var item = this1[index];
	this1.splice(index,1);
	return item;
};
spine_support_utils_Array.ensureCapacity = function(this1,size) {
	return this1;
};
var spine_support_utils_BooleanArray = {};
spine_support_utils_BooleanArray.__properties__ = {get_size:"get_size",get_items:"get_items"};
spine_support_utils_BooleanArray.create = function(length) {
	if(length == null) {
		length = 0;
	}
	var len = length | 0;
	var capacity = len != 0 ? len : 16;
	var this1 = [];
	var array = this1;
	if(length != 0) {
		var len1 = array.length;
		if(len1 > len) {
			array.splice(len,len - len1);
		} else if(len1 < len) {
			while(len1 < len) {
				array.push(false);
				++len1;
			}
		}
	}
	return array;
};
spine_support_utils_BooleanArray._new = function(capacity) {
	if(capacity == null) {
		capacity = 16;
	}
	var this1 = [];
	return this1;
};
spine_support_utils_BooleanArray.get_items = function(this1) {
	return this1;
};
spine_support_utils_BooleanArray.get_size = function(this1) {
	return this1.length;
};
spine_support_utils_BooleanArray.shrink = function(this1) {
	return this1;
};
spine_support_utils_BooleanArray.toArray = function(this1) {
	return this1;
};
spine_support_utils_BooleanArray.clear = function(this1) {
	this1.splice(0,this1.length);
};
spine_support_utils_BooleanArray.setSize = function(this1,size) {
	var len = this1.length;
	if(len > size) {
		this1.splice(size,size - len);
	} else if(len < size) {
		while(len < size) {
			this1.push(false);
			++len;
		}
	}
	return this1;
};
spine_support_utils_BooleanArray.add = function(this1,item) {
	this1.push(item);
};
spine_support_utils_BooleanArray.addAll = function(this1,items,start,count) {
	if(count == null) {
		count = -1;
	}
	if(start == null) {
		start = 0;
	}
	if(count == -1) {
		count = items.length;
	}
	var i = this1.length;
	var len = i + items.length;
	var len1 = this1.length;
	if(len1 > len) {
		this1.splice(len,len - len1);
	} else if(len1 < len) {
		while(len1 < len) {
			this1.push(false);
			++len1;
		}
	}
	var _g = 0;
	var _g1 = items;
	while(_g < _g1.length) {
		var item = _g1[_g];
		++_g;
		this1[i++] = item;
		if(--count <= 0) {
			break;
		}
	}
};
spine_support_utils_BooleanArray.get = function(this1,index) {
	return this1[index];
};
spine_support_utils_BooleanArray.set = function(this1,index,value) {
	this1[index] = value;
};
spine_support_utils_BooleanArray.indexOf = function(this1,value,identity) {
	return this1.indexOf(value);
};
spine_support_utils_BooleanArray.removeIndex = function(this1,index) {
	var item = this1[index];
	this1.splice(index,1);
	return item;
};
var spine_support_utils_FloatArray = {};
spine_support_utils_FloatArray.__properties__ = {get_size:"get_size",get_items:"get_items"};
spine_support_utils_FloatArray.create = function(length) {
	if(length == null) {
		length = 0;
	}
	var len = length | 0;
	var capacity = len != 0 ? len : 16;
	var this1 = [];
	var array = this1;
	if(length > 0) {
		var len1 = array.length;
		if(len1 > len) {
			array.splice(len,len - len1);
		} else if(len1 < len) {
			while(len1 < len) {
				array.push(0);
				++len1;
			}
		}
	}
	return array;
};
spine_support_utils_FloatArray._new = function(capacity) {
	if(capacity == null) {
		capacity = 16;
	}
	var this1 = [];
	return this1;
};
spine_support_utils_FloatArray.get_items = function(this1) {
	return this1;
};
spine_support_utils_FloatArray.get_size = function(this1) {
	return this1.length;
};
spine_support_utils_FloatArray.shrink = function(this1) {
	return this1;
};
spine_support_utils_FloatArray.toArray = function(this1) {
	return this1;
};
spine_support_utils_FloatArray.clear = function(this1) {
	this1.splice(0,this1.length);
};
spine_support_utils_FloatArray.setSize = function(this1,size) {
	var len = this1.length;
	if(len > size) {
		this1.splice(size,size - len);
	} else if(len < size) {
		while(len < size) {
			this1.push(0);
			++len;
		}
	}
	return this1;
};
spine_support_utils_FloatArray.add = function(this1,item) {
	this1.push(item);
};
spine_support_utils_FloatArray.addAll = function(this1,items,start,count) {
	if(count == null) {
		count = -1;
	}
	if(start == null) {
		start = 0;
	}
	if(count == -1) {
		count = items.length;
	}
	var i = this1.length;
	var len = i + items.length;
	var len1 = this1.length;
	if(len1 > len) {
		this1.splice(len,len - len1);
	} else if(len1 < len) {
		while(len1 < len) {
			this1.push(0);
			++len1;
		}
	}
	var _g = 0;
	var _g1 = items;
	while(_g < _g1.length) {
		var item = _g1[_g];
		++_g;
		this1[i++] = item;
		if(--count <= 0) {
			break;
		}
	}
};
spine_support_utils_FloatArray.get = function(this1,index) {
	return this1[index];
};
spine_support_utils_FloatArray.set = function(this1,index,value) {
	this1[index] = value;
};
spine_support_utils_FloatArray.indexOf = function(this1,value,identity) {
	return this1.indexOf(value);
};
spine_support_utils_FloatArray.removeIndex = function(this1,index) {
	var item = this1[index];
	this1.splice(index,1);
	return item;
};
var spine_support_utils_IntArray = {};
spine_support_utils_IntArray.__properties__ = {get_size:"get_size",get_items:"get_items"};
spine_support_utils_IntArray.create = function(length) {
	if(length == null) {
		length = 0;
	}
	var len = length | 0;
	var capacity = len != 0 ? len : 16;
	var this1 = [];
	var array = this1;
	if(length != 0) {
		var len1 = array.length;
		if(len1 > len) {
			array.splice(len,len - len1);
		} else if(len1 < len) {
			while(len1 < len) {
				array.push(0);
				++len1;
			}
		}
	}
	return array;
};
spine_support_utils_IntArray._new = function(capacity) {
	if(capacity == null) {
		capacity = 16;
	}
	var this1 = [];
	return this1;
};
spine_support_utils_IntArray.get_items = function(this1) {
	return this1;
};
spine_support_utils_IntArray.get_size = function(this1) {
	return this1.length;
};
spine_support_utils_IntArray.shrink = function(this1) {
	return this1;
};
spine_support_utils_IntArray.toArray = function(this1) {
	return this1;
};
spine_support_utils_IntArray.clear = function(this1) {
	this1.splice(0,this1.length);
};
spine_support_utils_IntArray.setSize = function(this1,size) {
	var len = this1.length;
	if(len > size) {
		this1.splice(size,size - len);
	} else if(len < size) {
		while(len < size) {
			this1.push(0);
			++len;
		}
	}
	return this1;
};
spine_support_utils_IntArray.add = function(this1,item) {
	this1.push(item);
};
spine_support_utils_IntArray.addAll = function(this1,items,start,count) {
	if(count == null) {
		count = -1;
	}
	if(start == null) {
		start = 0;
	}
	if(count == -1) {
		count = items.length;
	}
	var i = this1.length;
	var len = i + items.length;
	var len1 = this1.length;
	if(len1 > len) {
		this1.splice(len,len - len1);
	} else if(len1 < len) {
		while(len1 < len) {
			this1.push(0);
			++len1;
		}
	}
	var _g = 0;
	var _g1 = items;
	while(_g < _g1.length) {
		var item = _g1[_g];
		++_g;
		this1[i++] = item;
		if(--count <= 0) {
			break;
		}
	}
};
spine_support_utils_IntArray.get = function(this1,index) {
	return this1[index];
};
spine_support_utils_IntArray.set = function(this1,index,value) {
	this1[index] = value;
};
spine_support_utils_IntArray.indexOf = function(this1,value,identity) {
	return this1.indexOf(value);
};
spine_support_utils_IntArray.removeIndex = function(this1,index) {
	var item = this1[index];
	this1.splice(index,1);
	return item;
};
spine_support_utils_IntArray.ensureCapacity = function(this1,size) {
	return this1;
};
var spine_support_utils_IntSet = {};
spine_support_utils_IntSet._new = function() {
	var this1 = new haxe_ds_IntMap();
	return this1;
};
spine_support_utils_IntSet.add = function(this1,val) {
	if(this1.h.hasOwnProperty(val)) {
		return false;
	}
	this1.h[val] = true;
	return true;
};
spine_support_utils_IntSet.clear = function(this1) {
	var keys = [];
	var key = this1.keys();
	while(key.hasNext()) {
		var key1 = key.next();
		keys.push(key1);
	}
	var _g = 0;
	while(_g < keys.length) {
		var key = keys[_g];
		++_g;
		this1.remove(key);
	}
};
var spine_support_utils_JsonReader = function() {
};
$hxClasses["spine.support.utils.JsonReader"] = spine_support_utils_JsonReader;
spine_support_utils_JsonReader.__name__ = "spine.support.utils.JsonReader";
spine_support_utils_JsonReader.prototype = {
	parse: function(file) {
		return new spine_support_utils_JsonDynamic(JSON.parse(file.getContent()));
	}
	,__class__: spine_support_utils_JsonReader
};
var spine_support_utils_JsonValue = function() { };
$hxClasses["spine.support.utils.JsonValue"] = spine_support_utils_JsonValue;
spine_support_utils_JsonValue.__name__ = "spine.support.utils.JsonValue";
spine_support_utils_JsonValue.__isInterface__ = true;
spine_support_utils_JsonValue.prototype = {
	get_name: null
	,get_size: null
	,get_next: null
	,get_child: null
	,get: null
	,has: null
	,getChild: null
	,getString: null
	,getFloat: null
	,getInt: null
	,getBoolean: null
	,require: null
	,asString: null
	,asFloat: null
	,asInt: null
	,asFloatArray: null
	,asShortArray: null
	,isString: null
	,isArray: null
	,__class__: spine_support_utils_JsonValue
	,__properties__: {get_child:"get_child",get_next:"get_next",get_size:"get_size",get_name:"get_name"}
};
var spine_support_utils_JsonDynamic = function(data) {
	this.data = data;
};
$hxClasses["spine.support.utils.JsonDynamic"] = spine_support_utils_JsonDynamic;
spine_support_utils_JsonDynamic.__name__ = "spine.support.utils.JsonDynamic";
spine_support_utils_JsonDynamic.__interfaces__ = [spine_support_utils_JsonValue];
spine_support_utils_JsonDynamic.prototype = {
	data: null
	,toString: function() {
		return "JsonDynamic:" + Std.string(this.data);
	}
	,has: function(key) {
		return this.get(key) != null;
	}
	,require: function(key) {
		return this.get(key);
	}
	,get: function(key) {
		if(((this.data) instanceof Array)) {
			return null;
		} else if(Object.prototype.hasOwnProperty.call(this.data,key)) {
			return new spine_support_utils_JsonDynamic(Reflect.field(this.data,key));
		} else {
			return null;
		}
	}
	,getChild: function(key) {
		var item = Reflect.field(this.data,key);
		if(item == null) {
			return null;
		} else {
			var value = new spine_support_utils_JsonDynamic(item);
			var child = value.get_child();
			return child;
		}
	}
	,getString: function(key,defaultValue) {
		if(Object.prototype.hasOwnProperty.call(this.data,key)) {
			return Reflect.field(this.data,key);
		} else {
			return defaultValue;
		}
	}
	,getFloat: function(key,defaultValue) {
		if(defaultValue == null) {
			defaultValue = 0;
		}
		if(typeof(key) == "number" && ((key | 0) === key)) {
			if(((this.data) instanceof Array)) {
				return this.data[key];
			} else {
				return defaultValue;
			}
		} else if(Object.prototype.hasOwnProperty.call(this.data,key)) {
			return Reflect.field(this.data,key);
		} else {
			return defaultValue;
		}
	}
	,getInt: function(key,defaultValue) {
		if(defaultValue == null) {
			defaultValue = 0;
		}
		if(Object.prototype.hasOwnProperty.call(this.data,key)) {
			return Reflect.field(this.data,key);
		} else {
			return defaultValue;
		}
	}
	,getBoolean: function(key,defaultValue) {
		if(defaultValue == null) {
			defaultValue = false;
		}
		if(Object.prototype.hasOwnProperty.call(this.data,key)) {
			return Reflect.field(this.data,key);
		} else {
			return defaultValue;
		}
	}
	,asString: function() {
		return this.data;
	}
	,asFloatArray: function() {
		return this.data;
	}
	,asShortArray: function() {
		return this.data;
	}
	,asFloat: function() {
		return this.data;
	}
	,asInt: function() {
		return this.data;
	}
	,isString: function() {
		return typeof(this.data) == "string";
	}
	,isArray: function() {
		return ((this.data) instanceof Array);
	}
	,get_next: function() {
		return null;
	}
	,get_name: function() {
		return null;
	}
	,get_size: function() {
		if(((this.data) instanceof Array)) {
			return this.data.length;
		}
		return Reflect.fields(this.data).length;
	}
	,get_child: function() {
		var item = this.data;
		if(item == null) {
			return null;
		} else if(((item) instanceof Array)) {
			return new spine_support_utils_JsonChild(item,0);
		} else {
			var keys = [];
			var values = [];
			var _g = 0;
			var _g1 = Reflect.fields(item);
			while(_g < _g1.length) {
				var field = _g1[_g];
				++_g;
				keys.push(field);
				values.push(Reflect.field(item,field));
			}
			if(keys.length == 0) {
				return null;
			}
			return new spine_support_utils_JsonChild(values,0,keys);
		}
	}
	,__class__: spine_support_utils_JsonDynamic
	,__properties__: {get_child:"get_child",get_size:"get_size",get_name:"get_name",get_next:"get_next"}
};
var spine_support_utils_JsonChild = function(data,index,keys) {
	this.data = data;
	this.index = index;
	this.keys = keys;
};
$hxClasses["spine.support.utils.JsonChild"] = spine_support_utils_JsonChild;
spine_support_utils_JsonChild.__name__ = "spine.support.utils.JsonChild";
spine_support_utils_JsonChild.__interfaces__ = [spine_support_utils_JsonValue];
spine_support_utils_JsonChild.prototype = {
	toString: function() {
		return "JsonChild:" + this.data[this.index];
	}
	,keys: null
	,data: null
	,index: null
	,has: function(key) {
		return this.get(key) != null;
	}
	,require: function(key) {
		return this.get(key);
	}
	,get: function(key) {
		if(Object.prototype.hasOwnProperty.call(this.data[this.index],key)) {
			return new spine_support_utils_JsonDynamic(Reflect.field(this.data[this.index],key));
		} else {
			return null;
		}
	}
	,getChild: function(key) {
		var item = Reflect.field(this.data[this.index],key);
		if(item == null) {
			return null;
		} else {
			return new spine_support_utils_JsonDynamic(item).get_child();
		}
	}
	,getString: function(key,defaultValue) {
		if(Object.prototype.hasOwnProperty.call(this.data[this.index],key)) {
			return Reflect.field(this.data[this.index],key);
		} else {
			return defaultValue;
		}
	}
	,getFloat: function(key,defaultValue) {
		if(defaultValue == null) {
			defaultValue = 0;
		}
		if(typeof(key) == "number" && ((key | 0) === key)) {
			if(((this.data[this.index]) instanceof Array)) {
				return this.data[this.index][key];
			} else {
				return 0;
			}
		} else if(Object.prototype.hasOwnProperty.call(this.data[this.index],key)) {
			return Reflect.field(this.data[this.index],key);
		} else {
			return defaultValue;
		}
	}
	,getInt: function(key,defaultValue) {
		if(defaultValue == null) {
			defaultValue = 0;
		}
		if(Object.prototype.hasOwnProperty.call(this.data[this.index],key)) {
			return Reflect.field(this.data[this.index],key);
		} else {
			return defaultValue;
		}
	}
	,getBoolean: function(key,defaultValue) {
		if(defaultValue == null) {
			defaultValue = false;
		}
		if(Object.prototype.hasOwnProperty.call(this.data[this.index],key)) {
			return Reflect.field(this.data[this.index],key);
		} else {
			return defaultValue;
		}
	}
	,asString: function() {
		return this.data[this.index];
	}
	,asFloat: function() {
		return this.data[this.index];
	}
	,asInt: function() {
		return this.data[this.index];
	}
	,isString: function() {
		return typeof(this.data[this.index]) == "string";
	}
	,isArray: function() {
		return ((this.data[this.index]) instanceof Array);
	}
	,get_next: function() {
		if(this.index < this.data.length - 1) {
			return new spine_support_utils_JsonChild(this.data,this.index + 1,this.keys);
		} else {
			return null;
		}
	}
	,get_name: function() {
		if(this.keys != null) {
			return this.keys[this.index];
		} else {
			return null;
		}
	}
	,get_size: function() {
		return this.data[this.index].length;
	}
	,get_child: function() {
		var item = this.data[this.index];
		if(item == null) {
			return null;
		} else if(((item) instanceof Array)) {
			return new spine_support_utils_JsonChild(item,0);
		} else {
			var keys = [];
			var values = [];
			var _g = 0;
			var _g1 = Reflect.fields(item);
			while(_g < _g1.length) {
				var field = _g1[_g];
				++_g;
				keys.push(field);
				values.push(Reflect.field(item,field));
			}
			if(keys.length == 0) {
				return null;
			}
			return new spine_support_utils_JsonChild(values,0,keys);
		}
	}
	,asFloatArray: function() {
		return this.data[this.index];
	}
	,asShortArray: function() {
		return this.data[this.index];
	}
	,__class__: spine_support_utils_JsonChild
	,__properties__: {get_child:"get_child",get_size:"get_size",get_name:"get_name",get_next:"get_next"}
};
var spine_support_utils_ObjectMap = {};
spine_support_utils_ObjectMap._new = function() {
	var this1 = new haxe_ds_IntMap();
	return this1;
};
spine_support_utils_ObjectMap.get = function(this1,key,defaultValue) {
	var dKey = key;
	var key1 = dKey.getHashCode();
	var entries = this1.h[key1];
	if(entries != null) {
		var _g = 0;
		var _g1 = entries;
		while(_g < _g1.length) {
			var entry = _g1[_g];
			++_g;
			var dEntryKey = entry.key;
			if(dEntryKey.equals(key)) {
				return entry.value;
			}
		}
	}
	return defaultValue;
};
spine_support_utils_ObjectMap.clear = function(this1) {
	var keys = [];
	var key = this1.keys();
	while(key.hasNext()) {
		var key1 = key.next();
		keys.push(key1);
	}
	var _g = 0;
	while(_g < keys.length) {
		var key = keys[_g];
		++_g;
		this1.remove(key);
	}
};
spine_support_utils_ObjectMap.put = function(this1,key,value) {
	var dKey = key;
	var hashCode = dKey.getHashCode();
	var entries = this1.h[hashCode];
	if(entries == null) {
		entries = [];
		this1.h[hashCode] = entries;
	}
	var i = 0;
	var didSet = false;
	var _g = 0;
	var _g1 = entries;
	while(_g < _g1.length) {
		var entry = _g1[_g];
		++_g;
		var dEntryKey = entry.key;
		if(dEntryKey.equals(key)) {
			entries[i].key = key;
			entries[i].value = value;
			didSet = true;
			break;
		}
		++i;
	}
	if(!didSet) {
		entries.push(new spine_support_utils_Entry(key,value));
	}
};
spine_support_utils_ObjectMap.entries = function(this1) {
	var entries = [];
	var entryList = this1.iterator();
	while(entryList.hasNext()) {
		var entryList1 = entryList.next();
		if(entryList1 != null) {
			var _g = 0;
			var _g1 = entryList1;
			while(_g < _g1.length) {
				var entry = _g1[_g];
				++_g;
				entries.push(entry);
			}
		}
	}
	return entries;
};
spine_support_utils_ObjectMap.keys = function(this1) {
	var keys = [];
	var entryList = this1.iterator();
	while(entryList.hasNext()) {
		var entryList1 = entryList.next();
		var _g = 0;
		var _g1 = entryList1;
		while(_g < _g1.length) {
			var entry = _g1[_g];
			++_g;
			keys.push(entry.key);
		}
	}
	return keys;
};
var spine_support_utils_Entry = function(key,value) {
	this.key = key;
	this.value = value;
};
$hxClasses["spine.support.utils.Entry"] = spine_support_utils_Entry;
spine_support_utils_Entry.__name__ = "spine.support.utils.Entry";
spine_support_utils_Entry.prototype = {
	key: null
	,value: null
	,__class__: spine_support_utils_Entry
};
var spine_support_utils_SerializationException = function(message,originalError) {
	if(message == null) {
		message = "";
	}
	if(originalError != null) {
		if(message != "") {
			message += " " + Std.string(originalError);
		} else {
			message = "" + Std.string(originalError);
		}
	}
	spine_support_error_Error.call(this,message);
	this.name = "SerializationException";
};
$hxClasses["spine.support.utils.SerializationException"] = spine_support_utils_SerializationException;
spine_support_utils_SerializationException.__name__ = "spine.support.utils.SerializationException";
spine_support_utils_SerializationException.__super__ = spine_support_error_Error;
spine_support_utils_SerializationException.prototype = $extend(spine_support_error_Error.prototype,{
	__class__: spine_support_utils_SerializationException
});
var spine_support_utils_StringBuilder = {};
spine_support_utils_StringBuilder._new = function(capacity) {
	var this1 = new StringBuf();
	return this1;
};
spine_support_utils_StringBuilder.$length = function(this1) {
	return this1.b.length;
};
spine_support_utils_StringBuilder.append = function(this1,str) {
	this1.b += str == null ? "null" : "" + str;
};
var zygame_display_batch_ITileDisplayObject = function() { };
$hxClasses["zygame.display.batch.ITileDisplayObject"] = zygame_display_batch_ITileDisplayObject;
zygame_display_batch_ITileDisplayObject.__name__ = "zygame.display.batch.ITileDisplayObject";
zygame_display_batch_ITileDisplayObject.__isInterface__ = true;
zygame_display_batch_ITileDisplayObject.prototype = {
	get_width: null
	,set_width: null
	,get_height: null
	,set_height: null
	,get_curWidth: null
	,get_curHeight: null
	,__class__: zygame_display_batch_ITileDisplayObject
	,__properties__: {get_curHeight:"get_curHeight",get_curWidth:"get_curWidth",set_height:"set_height",get_height:"get_height",set_width:"set_width",get_width:"get_width"}
};
var zygame_display_batch_BDisplayObjectContainer = function() {
	this.name = null;
	this.mouseEnabled = true;
	openfl_display_TileContainer.call(this);
};
$hxClasses["zygame.display.batch.BDisplayObjectContainer"] = zygame_display_batch_BDisplayObjectContainer;
zygame_display_batch_BDisplayObjectContainer.__name__ = "zygame.display.batch.BDisplayObjectContainer";
zygame_display_batch_BDisplayObjectContainer.__interfaces__ = [zygame_mini_MiniExtend,zygame_core_Refresher,zygame_display_batch_ITileDisplayObject];
zygame_display_batch_BDisplayObjectContainer.__super__ = openfl_display_TileContainer;
zygame_display_batch_BDisplayObjectContainer.prototype = $extend(openfl_display_TileContainer.prototype,{
	customData: null
	,baseBuilder: null
	,mouseEnabled: null
	,name: null
	,onInit: function() {
		if(this.baseBuilder != null) {
			var call = this.baseBuilder.getFunction("onInit");
			if(call != null) {
				call();
			}
		}
	}
	,onFrame: function() {
		if(this.baseBuilder != null) {
			var call = this.baseBuilder.getFunction("onFrame");
			if(call != null) {
				call();
			}
		}
	}
	,setFrameEvent: function(isFrame) {
		if(isFrame) {
			zygame_core_Start.current.addToUpdate(this);
		} else {
			zygame_core_Start.current.removeToUpdate(this);
		}
	}
	,get_curWidth: function() {
		return this.get_width();
	}
	,get_curHeight: function() {
		return this.get_height();
	}
	,toString: function() {
		var c = js_Boot.getClass(this);
		return c.__name__;
	}
	,addChild: function(display) {
		openfl_display_TileContainer.prototype.addTile.call(this,display);
		if(((display) instanceof zygame_display_batch_BDisplayObjectContainer)) {
			(js_Boot.__cast(display , zygame_display_batch_BDisplayObjectContainer)).onInit();
		} else if(((display) instanceof zygame_display_batch_BDisplayObject)) {
			(js_Boot.__cast(display , zygame_display_batch_BDisplayObject)).onInit();
		}
	}
	,addChildAt: function(display,index) {
		openfl_display_TileContainer.prototype.addTileAt.call(this,display,index);
		if(((display) instanceof zygame_display_batch_BSprite)) {
			(js_Boot.__cast(display , zygame_display_batch_BSprite)).onInit();
		}
	}
	,removeChild: function(display) {
		openfl_display_TileContainer.prototype.removeTile.call(this,display);
	}
	,getStageWidth: function() {
		return zygame_core_Start.stageWidth;
	}
	,getStageHeight: function() {
		return zygame_core_Start.stageHeight;
	}
	,getParent: function() {
		return this.parent;
	}
	,__class__: zygame_display_batch_BDisplayObjectContainer
	,__properties__: $extend(openfl_display_TileContainer.prototype.__properties__,{get_curHeight:"get_curHeight",get_curWidth:"get_curWidth"})
});
var zygame_display_batch_BSprite = function() {
	this.mouseChildren = true;
	zygame_display_batch_BDisplayObjectContainer.call(this);
};
$hxClasses["zygame.display.batch.BSprite"] = zygame_display_batch_BSprite;
zygame_display_batch_BSprite.__name__ = "zygame.display.batch.BSprite";
zygame_display_batch_BSprite.__super__ = zygame_display_batch_BDisplayObjectContainer;
zygame_display_batch_BSprite.prototype = $extend(zygame_display_batch_BDisplayObjectContainer.prototype,{
	mouseChildren: null
	,getTileAtPos: function(posx,posy) {
		if(this.get_visible() == false) {
			return null;
		}
		posx -= this.get_x();
		posy -= this.get_y();
		var r = -(Math.PI / 180 * this.get_rotation());
		var rx = posx * Math.cos(r) - posy * Math.sin(r);
		var ry = posx * Math.sin(r) + posy * Math.cos(r);
		posx = rx;
		posy = ry;
		posx /= this.get_scaleX();
		posy /= this.get_scaleY();
		var tile = null;
		var num = this.get_numTiles() - 1;
		while(num >= 0) {
			tile = this.getTileAt(num);
			if(((tile) instanceof zygame_display_batch_BSprite)) {
				var tile2 = (js_Boot.__cast(tile , zygame_display_batch_BSprite)).getTileAtPos(posx,posy);
				if(tile2 != null && (js_Boot.__cast(tile , zygame_display_batch_BSprite)).mouseEnabled && tile.get_visible()) {
					if(this.mouseChildren) {
						return tile2;
					} else {
						return this;
					}
				}
			} else if(((tile) instanceof zygame_display_batch_BImage)) {
				var img = tile;
				var rect = img.getClickBounds(this);
				if(img.mouseEnabled && tile.get_visible() && rect != null && rect.contains(posx,posy)) {
					if(this.mouseChildren) {
						return tile;
					} else {
						return this;
					}
				}
			} else if(((tile) instanceof zygame_display_batch_BScale9Image)) {
				var img1 = tile;
				var rect1 = img1.getClickBounds(this);
				if(img1.mouseEnabled && tile.get_visible() && rect1 != null && rect1.contains(posx,posy)) {
					if(this.mouseChildren) {
						return tile;
					} else {
						return this;
					}
				}
			} else if(((tile) instanceof zygame_display_batch_BLabel)) {
				var img2 = tile;
				var rect2 = img2.getBounds(this);
				if(img2.mouseEnabled && tile.get_visible() && rect2 != null && rect2.contains(posx,posy)) {
					if(this.mouseChildren) {
						return tile;
					} else {
						return this;
					}
				}
			} else if(((tile) instanceof openfl_display_Tile)) {
				var img3 = tile;
				var rect3 = img3.getBounds(this);
				if(tile.get_visible() && rect3 != null && rect3.contains(posx,posy)) {
					if(this.mouseChildren) {
						return tile;
					} else {
						return this;
					}
				}
			}
			--num;
		}
		return null;
	}
	,dispatchTouchEvent: function(e) {
		var tile = null;
		var num = this.get_numTiles() - 1;
		while(num >= 0) {
			tile = this.getTileAt(num);
			if(((tile) instanceof zygame_display_batch_BSprite)) {
				if(((tile) instanceof zygame_display_batch_BTouchSprite)) {
					switch(e.type) {
					case "touchBegin":
						(js_Boot.__cast(tile , zygame_display_batch_BTouchSprite)).onTouchBegin(e);
						break;
					case "touchEnd":
						(js_Boot.__cast(tile , zygame_display_batch_BTouchSprite)).onTouchEnd(e);
						break;
					case "touchMove":
						(js_Boot.__cast(tile , zygame_display_batch_BTouchSprite)).onTouchMove(e);
						break;
					}
				}
				(js_Boot.__cast(tile , zygame_display_batch_BSprite)).dispatchTouchEvent(e);
			}
			--num;
		}
	}
	,__class__: zygame_display_batch_BSprite
});
var spine_tilemap_BaseSkeletonDraw = function(skeleton) {
	this.disableColor = false;
	this._map = new haxe_ds_ObjectMap();
	zygame_display_batch_BSprite.call(this);
	this.skeleton = skeleton;
};
$hxClasses["spine.tilemap.BaseSkeletonDraw"] = spine_tilemap_BaseSkeletonDraw;
spine_tilemap_BaseSkeletonDraw.__name__ = "spine.tilemap.BaseSkeletonDraw";
spine_tilemap_BaseSkeletonDraw.__super__ = zygame_display_batch_BSprite;
spine_tilemap_BaseSkeletonDraw.prototype = $extend(zygame_display_batch_BSprite.prototype,{
	skeleton: null
	,_map: null
	,disableColor: null
	,renderTriangles: function() {
		this.removeTiles();
		if(!this.get_visible() || this.skeleton == null) {
			return;
		}
		this.skeleton.flipY = true;
		var drawOrder = this.skeleton.drawOrder;
		var n = drawOrder.length;
		var atlasRegion;
		var bitmapData = null;
		var slot;
		var skeletonColor;
		var soltColor;
		var regionColor;
		var _g = 0;
		var _g1 = n;
		while(_g < _g1) {
			var i = _g++;
			slot = drawOrder[i];
			atlasRegion = null;
			bitmapData = null;
			if(slot.attachment != null) {
				if(((slot.attachment) instanceof spine_attachments_RegionAttachment)) {
					var region = slot.attachment;
					regionColor = region.color;
					if(region.region == null) {
						throw haxe_Exception.thrown(new spine_support_error_IllegalStateException("Region has not been set: " + Std.string(region)));
					}
					atlasRegion = region.region;
					if(atlasRegion != null) {
						var wrapper = this._map.h[slot.__id__];
						var tile = null;
						if(wrapper == null) {
							wrapper = new openfl_display_TileContainer();
							tile = new openfl_display_Tile(atlasRegion.page.rendererObject.getID(atlasRegion));
							wrapper.addTile(tile);
							this._map.set(slot,wrapper);
						} else {
							tile = wrapper.getTileAt(0);
							tile.set_id(atlasRegion.page.rendererObject.getID(atlasRegion));
						}
						var regionHeight = atlasRegion.rotate ? atlasRegion.width : atlasRegion.height;
						tile.set_rotation(-region.rotation);
						tile.set_scaleX(region.scaleX * (region.width / atlasRegion.width));
						tile.set_scaleY(region.scaleY * (region.height / atlasRegion.height));
						var radians = -region.rotation * Math.PI / 180;
						var cos = Math.cos(radians);
						var sin = Math.sin(radians);
						var shiftX = -region.width / 2 * region.scaleX;
						var shiftY = -region.height / 2 * region.scaleY;
						if(atlasRegion.rotate) {
							var _g2 = tile;
							_g2.set_rotation(_g2.get_rotation() + 90);
							shiftX += regionHeight * (region.width / atlasRegion.width);
						}
						tile.set_x(region.x + shiftX * cos - shiftY * sin);
						tile.set_y(-region.y + shiftX * sin + shiftY * cos);
						var bone = slot.bone;
						wrapper.set_x(bone.worldX);
						wrapper.set_y(bone.worldY);
						wrapper.set_rotation(js_Boot.__cast(Math.atan2(bone.c,bone.a) , Float) * spine_utils_SpineUtils.radDeg);
						wrapper.set_scaleX(js_Boot.__cast(Math.sqrt(bone.a * bone.a + bone.c * bone.c) , Float));
						wrapper.set_scaleY(js_Boot.__cast(Math.sqrt(bone.b * bone.b + bone.d * bone.d) , Float));
						this.addTile(wrapper);
						if(!this.disableColor) {
							wrapper.set_alpha(slot.color.a * this.skeleton.color.a * region.color.a);
							if(wrapper.get_colorTransform() == null) {
								wrapper.set_colorTransform(new openfl_geom_ColorTransform());
							}
							var tmp = slot.color.r * this.skeleton.color.r;
							wrapper.get_colorTransform().greenMultiplier = tmp * region.color.r;
							var tmp1 = slot.color.g * this.skeleton.color.g;
							wrapper.get_colorTransform().greenMultiplier = tmp1 * region.color.g;
							var tmp2 = slot.color.b * this.skeleton.color.b;
							wrapper.get_colorTransform().blueMultiplier = tmp2 * region.color.b;
						}
						switch(slot.data.blendMode) {
						case 0:
							wrapper.set_blendMode(10);
							break;
						case 1:
							wrapper.set_blendMode(0);
							break;
						case 2:
							wrapper.set_blendMode(9);
							break;
						case 3:
							wrapper.set_blendMode(12);
							break;
						}
					}
				} else if(((slot.attachment) instanceof spine_attachments_MeshAttachment)) {
					throw haxe_Exception.thrown("tilemap not support MeshAttachment!");
				}
			}
		}
	}
	,argbToNumber: function(a,r,g,b) {
		return a << 24 | r << 16 | g << 8 | b;
	}
	,__class__: spine_tilemap_BaseSkeletonDraw
});
var spine_tilemap_BitmapDataTextureLoader = function(bitmapDatas) {
	this.frameMaps = new haxe_ds_StringMap();
	this._bitmapData = bitmapDatas;
};
$hxClasses["spine.tilemap.BitmapDataTextureLoader"] = spine_tilemap_BitmapDataTextureLoader;
spine_tilemap_BitmapDataTextureLoader.__name__ = "spine.tilemap.BitmapDataTextureLoader";
spine_tilemap_BitmapDataTextureLoader.__interfaces__ = [spine_support_graphics_TextureLoader];
spine_tilemap_BitmapDataTextureLoader.prototype = {
	_bitmapData: null
	,_tileset: null
	,_ids: null
	,_widths: null
	,frameMaps: null
	,loadPage: function(page,path) {
		var this1 = this._bitmapData;
		var key = zygame_utils_StringUtils.getName(path);
		var bitmapData = this1.h[key];
		if(bitmapData == null) {
			throw haxe_Exception.thrown("BitmapData not found with name: " + path);
		}
		this._tileset = new openfl_display_Tileset(bitmapData);
		this._ids = new haxe_ds_ObjectMap();
		this._widths = new haxe_ds_ObjectMap();
		page.rendererObject = this;
		page.width = bitmapData.width;
		page.height = bitmapData.height;
	}
	,loadRegion: function(region) {
		var regionWidth = region.rotate ? region.height : region.width;
		var regionHeight = region.rotate ? region.width : region.height;
		this._widths.set(region,region.width);
		var rect = new openfl_geom_Rectangle(region.x,region.y,regionWidth,regionHeight);
		var id = this._tileset.addRect(rect);
		this._ids.set(region,id);
		if(!region.rotate) {
			region.width = region.packedWidth;
			region.height = region.packedHeight;
		} else {
			region.height = region.packedWidth;
			region.width = region.packedHeight;
		}
		var frame = new zygame_utils_load_Frame();
		frame.x = rect.x;
		frame.y = rect.y;
		frame.width = rect.width;
		frame.height = rect.height;
		if(region.rotate) {
			frame.width = rect.height;
			frame.height = rect.width;
		}
		frame.name = region.name;
		frame.rotate = region.rotate;
		frame.id = id;
		this.frameMaps.h[region.name] = frame;
	}
	,getID: function(region) {
		return this._ids.h[region.__id__];
	}
	,getWidth: function(region) {
		return this._widths.h[region.__id__];
	}
	,getRectByID: function(id) {
		return this._tileset.getRect(id);
	}
	,getTileset: function() {
		return this._tileset;
	}
	,unloadPage: function(page) {
		this._tileset.get_bitmapData().dispose();
	}
	,__class__: spine_tilemap_BitmapDataTextureLoader
};
var spine_tilemap_SkeletonSprite = function(skeletonData) {
	this._actionName = "";
	this._isPlay = true;
	this.timeScale = 1;
	spine_tilemap_BaseSkeletonDraw.call(this,new spine_Skeleton(skeletonData));
	var _this = this.skeleton;
	var cacheReset = _this.cacheReset;
	var i = 0;
	var n = cacheReset.length;
	while(i < n) {
		var bone = cacheReset[i];
		bone.ax = bone.x;
		bone.ay = bone.y;
		bone.arotation = bone.rotation;
		bone.ascaleX = bone.scaleX;
		bone.ascaleY = bone.scaleY;
		bone.ashearX = bone.shearX;
		bone.ashearY = bone.shearY;
		bone.appliedValid = true;
		++i;
	}
	var cache = _this.cache;
	var i = 0;
	var n = cache.length;
	while(i < n) {
		cache[i].update();
		++i;
	}
	zygame_utils_SpineManager.addOnFrame(this);
	this.mouseChildren = false;
};
$hxClasses["spine.tilemap.SkeletonSprite"] = spine_tilemap_SkeletonSprite;
spine_tilemap_SkeletonSprite.__name__ = "spine.tilemap.SkeletonSprite";
spine_tilemap_SkeletonSprite.__interfaces__ = [spine_base_SpineBaseDisplay];
spine_tilemap_SkeletonSprite.__super__ = spine_tilemap_BaseSkeletonDraw;
spine_tilemap_SkeletonSprite.prototype = $extend(spine_tilemap_BaseSkeletonDraw.prototype,{
	timeScale: null
	,_isPlay: null
	,_actionName: null
	,onSpineUpdate: function(dt) {
		this.advanceTime(dt);
	}
	,destroy: function() {
		zygame_utils_SpineManager.removeOnFrame(this);
		this.removeTiles();
	}
	,get_isPlay: function() {
		return this._isPlay;
	}
	,set_isPlay: function(bool) {
		this._isPlay = bool;
		return bool;
	}
	,get_actionName: function() {
		return this._actionName;
	}
	,play: function(action,loop) {
		if(loop == null) {
			loop = true;
		}
		this._isPlay = true;
		if(action != null) {
			this._actionName = action;
		}
	}
	,stop: function() {
		this._isPlay = false;
	}
	,advanceTime: function(delta) {
		if(!this._isPlay) {
			return;
		}
		this.skeleton.time += delta * this.timeScale;
		this.renderTriangles();
	}
	,__class__: spine_tilemap_SkeletonSprite
	,__properties__: $extend(spine_tilemap_BaseSkeletonDraw.prototype.__properties__,{get_actionName:"get_actionName",set_isPlay:"set_isPlay",get_isPlay:"get_isPlay"})
});
var spine_tilemap_SkeletonAnimation = function(skeletonData,stateData) {
	this.assetsId = null;
	spine_tilemap_SkeletonSprite.call(this,skeletonData);
	this.state = new spine_AnimationState(stateData == null ? new spine_AnimationStateData(skeletonData) : stateData);
	this.advanceTime(0);
};
$hxClasses["spine.tilemap.SkeletonAnimation"] = spine_tilemap_SkeletonAnimation;
spine_tilemap_SkeletonAnimation.__name__ = "spine.tilemap.SkeletonAnimation";
spine_tilemap_SkeletonAnimation.__super__ = spine_tilemap_SkeletonSprite;
spine_tilemap_SkeletonAnimation.prototype = $extend(spine_tilemap_SkeletonSprite.prototype,{
	assetsId: null
	,state: null
	,advanceTime: function(time) {
		var _this = this.state;
		var delta = time * this.timeScale;
		delta *= _this.timeScale;
		var i = 0;
		var n = _this.tracks.length;
		while(i < n) {
			var current = _this.tracks[i];
			if(current == null) {
				++i;
				continue;
			}
			current.animationLast = current.nextAnimationLast;
			current.trackLast = current.nextTrackLast;
			var currentDelta = delta * current.timeScale;
			if(current.delay > 0) {
				current.delay -= currentDelta;
				if(current.delay > 0) {
					++i;
					continue;
				}
				currentDelta = -current.delay;
				current.delay = 0;
			}
			var next = current.next;
			if(next != null) {
				var nextTime = current.trackLast - next.delay;
				if(nextTime >= 0) {
					next.delay = 0;
					next.trackTime = nextTime + delta * next.timeScale;
					current.trackTime += currentDelta;
					var from;
					if(i < _this.tracks.length) {
						from = _this.tracks[i];
					} else {
						var this1 = _this.tracks;
						var size = i + 1;
						var len = this1.length;
						if(len > size) {
							this1.splice(size,size - len);
						} else if(len < size) {
							this1[size - 1] = null;
						}
						from = null;
					}
					_this.tracks[i] = next;
					if(from != null) {
						var _this1 = _this.queue;
						_this1.objects.push(1);
						_this1.objects.push(from);
						next.mixingFrom = from;
						next.mixTime = 0;
						if(from.mixingFrom != null && from.mixDuration > 0) {
							next.interruptAlpha *= Math.min(1,from.mixTime / from.mixDuration | 0);
						}
						var this2 = from.timelinesRotation;
						this2.splice(0,this2.length);
					}
					var _this2 = _this.queue;
					_this2.objects.push(0);
					_this2.objects.push(next);
					_this2.AnimationState_this.animationsChanged = true;
					while(next.mixingFrom != null) {
						next.mixTime += currentDelta;
						next = next.mixingFrom;
					}
					++i;
					continue;
				}
			} else if(current.trackLast >= current.trackEnd && current.mixingFrom == null) {
				_this.tracks[i] = null;
				var _this3 = _this.queue;
				_this3.objects.push(2);
				_this3.objects.push(current);
				_this3.AnimationState_this.animationsChanged = true;
				var next1 = current.next;
				while(next1 != null) {
					var _this4 = _this.queue;
					_this4.objects.push(3);
					_this4.objects.push(next1);
					next1 = next1.next;
				}
				current.next = null;
				++i;
				continue;
			}
			var tmp;
			if(current.mixingFrom != null) {
				var from1 = current.mixingFrom;
				if(from1 == null) {
					tmp = true;
				} else {
					var from2 = from1.mixingFrom;
					var finished;
					if(from2 == null) {
						finished = true;
					} else {
						var finished1 = _this.updateMixingFrom(from2,delta);
						from2.animationLast = from2.nextAnimationLast;
						from2.trackLast = from2.nextTrackLast;
						if(from1.mixTime > 0 && (from1.mixTime >= from1.mixDuration || from1.timeScale == 0)) {
							if(from2.totalAlpha == 0 || from1.mixDuration == 0) {
								from1.mixingFrom = from2.mixingFrom;
								from1.interruptAlpha = from2.interruptAlpha;
								var _this5 = _this.queue;
								_this5.objects.push(2);
								_this5.objects.push(from2);
								_this5.AnimationState_this.animationsChanged = true;
							}
							finished = finished1;
						} else {
							from2.trackTime += delta * from2.timeScale;
							from1.mixTime += delta * from1.timeScale;
							finished = false;
						}
					}
					from1.animationLast = from1.nextAnimationLast;
					from1.trackLast = from1.nextTrackLast;
					if(current.mixTime > 0 && (current.mixTime >= current.mixDuration || current.timeScale == 0)) {
						if(from1.totalAlpha == 0 || current.mixDuration == 0) {
							current.mixingFrom = from1.mixingFrom;
							current.interruptAlpha = from1.interruptAlpha;
							var _this6 = _this.queue;
							_this6.objects.push(2);
							_this6.objects.push(from1);
							_this6.AnimationState_this.animationsChanged = true;
						}
						tmp = finished;
					} else {
						from1.trackTime += delta * from1.timeScale;
						current.mixTime += delta * current.timeScale;
						tmp = false;
					}
				}
			} else {
				tmp = false;
			}
			if(tmp) {
				var from3 = current.mixingFrom;
				current.mixingFrom = null;
				while(from3 != null) {
					var _this7 = _this.queue;
					_this7.objects.push(2);
					_this7.objects.push(from3);
					_this7.AnimationState_this.animationsChanged = true;
					from3 = from3.mixingFrom;
				}
			}
			current.trackTime += currentDelta;
			++i;
		}
		var _this1 = _this.queue;
		if(!_this1.drainDisabled) {
			_this1.drainDisabled = true;
			var objects = _this1.objects;
			var listeners = _this1.AnimationState_this.listeners;
			var i = 0;
			while(i < objects.length) {
				var type = js_Boot.__cast(objects[i] , Int);
				var entry = js_Boot.__cast(objects[i + 1] , spine_TrackEntry);
				while(true) {
					var _switchCond1 = type;
					if(_switchCond1 == 0) {
						if(entry.listener != null) {
							entry.listener.start(entry);
						}
						var ii = 0;
						while(ii < listeners.length) {
							listeners[ii].start(entry);
							++ii;
						}
						break;
					} else if(_switchCond1 == 1) {
						if(entry.listener != null) {
							entry.listener.interrupt(entry);
						}
						var ii1 = 0;
						while(ii1 < listeners.length) {
							listeners[ii1].interrupt(entry);
							++ii1;
						}
						break;
					} else if(_switchCond1 == 2) {
						if(entry.listener != null) {
							entry.listener.end(entry);
						}
						var ii2 = 0;
						while(ii2 < listeners.length) {
							listeners[ii2].end(entry);
							++ii2;
						}
						if(entry.listener != null) {
							entry.listener.dispose(entry);
						}
						var ii3 = 0;
						while(ii3 < listeners.length) {
							listeners[ii3].dispose(entry);
							++ii3;
						}
						_this1.AnimationState_this.trackEntryPool.free(entry);
						break;
					} else if(_switchCond1 == 3) {
						if(entry.listener != null) {
							entry.listener.dispose(entry);
						}
						var ii4 = 0;
						while(ii4 < listeners.length) {
							listeners[ii4].dispose(entry);
							++ii4;
						}
						_this1.AnimationState_this.trackEntryPool.free(entry);
						break;
					} else if(_switchCond1 == 4) {
						if(entry.listener != null) {
							entry.listener.complete(entry);
						}
						var ii5 = 0;
						while(ii5 < listeners.length) {
							listeners[ii5].complete(entry);
							++ii5;
						}
						break;
					} else if(_switchCond1 == 5) {
						var event = js_Boot.__cast(objects[i++ + 2] , spine_Event);
						if(entry.listener != null) {
							entry.listener.event(entry,event);
						}
						var ii6 = 0;
						while(ii6 < listeners.length) {
							listeners[ii6].event(entry,event);
							++ii6;
						}
						break;
					}
					break;
				}
				i += 2;
			}
			var this1 = _this1.objects;
			this1.splice(0,this1.length);
			_this1.drainDisabled = false;
		}
		this.state.apply(this.skeleton);
		var _this = this.skeleton;
		var cacheReset = _this.cacheReset;
		var i = 0;
		var n = cacheReset.length;
		while(i < n) {
			var bone = cacheReset[i];
			bone.ax = bone.x;
			bone.ay = bone.y;
			bone.arotation = bone.rotation;
			bone.ascaleX = bone.scaleX;
			bone.ascaleY = bone.scaleY;
			bone.ashearX = bone.shearX;
			bone.ashearY = bone.shearY;
			bone.appliedValid = true;
			++i;
		}
		var cache = _this.cache;
		var i = 0;
		var n = cache.length;
		while(i < n) {
			cache[i].update();
			++i;
		}
		spine_tilemap_SkeletonSprite.prototype.advanceTime.call(this,time);
	}
	,play: function(action,loop) {
		if(loop == null) {
			loop = true;
		}
		if(action != null && action != "") {
			var _this = this.state;
			var animation = _this.data.skeletonData.findAnimation(action);
			if(animation == null) {
				throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("Animation not found: " + action));
			}
			if(animation == null) {
				throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("animation cannot be null."));
			}
			var interrupt = true;
			var current;
			if(0 < _this.tracks.length) {
				current = _this.tracks[0];
			} else {
				var this1 = _this.tracks;
				var size = 1;
				var len = this1.length;
				if(len > size) {
					this1.splice(size,size - len);
				} else if(len < size) {
					this1[size - 1] = null;
				}
				current = null;
			}
			if(current != null) {
				if(current.nextTrackLast == -1) {
					_this.tracks[0] = current.mixingFrom;
					var _this1 = _this.queue;
					_this1.objects.push(1);
					_this1.objects.push(current);
					var _this1 = _this.queue;
					_this1.objects.push(2);
					_this1.objects.push(current);
					_this1.AnimationState_this.animationsChanged = true;
					var next = current.next;
					while(next != null) {
						var _this1 = _this.queue;
						_this1.objects.push(3);
						_this1.objects.push(next);
						next = next.next;
					}
					current.next = null;
					current = current.mixingFrom;
					interrupt = false;
				} else {
					var next = current.next;
					while(next != null) {
						var _this1 = _this.queue;
						_this1.objects.push(3);
						_this1.objects.push(next);
						next = next.next;
					}
					current.next = null;
				}
			}
			var entry = _this.trackEntryPool.obtain();
			entry.trackIndex = 0;
			entry.animation = animation;
			entry.loop = loop;
			entry.eventThreshold = 0;
			entry.attachmentThreshold = 0;
			entry.drawOrderThreshold = 0;
			entry.animationStart = 0;
			entry.animationEnd = animation.getDuration();
			entry.animationLast = -1;
			entry.nextAnimationLast = -1;
			entry.delay = 0;
			entry.trackTime = 0;
			entry.trackLast = -1;
			entry.nextTrackLast = -1;
			entry.trackEnd = 999999999.0;
			entry.timeScale = 1;
			entry.alpha = 1;
			entry.interruptAlpha = 1;
			entry.mixTime = 0;
			var tmp;
			if(current == null) {
				tmp = 0;
			} else {
				var _this1 = _this.data;
				var from = current.animation;
				if(from == null) {
					throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("from cannot be null."));
				}
				if(animation == null) {
					throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("to cannot be null."));
				}
				_this1.tempKey.a1 = from;
				_this1.tempKey.a2 = animation;
				tmp = spine_support_utils_ObjectMap.get(_this1.animationToMixTime,_this1.tempKey,_this1.defaultMix);
			}
			entry.mixDuration = tmp;
			var entry1 = entry;
			var from;
			if(0 < _this.tracks.length) {
				from = _this.tracks[0];
			} else {
				var this1 = _this.tracks;
				var size = 1;
				var len = this1.length;
				if(len > size) {
					this1.splice(size,size - len);
				} else if(len < size) {
					this1[size - 1] = null;
				}
				from = null;
			}
			_this.tracks[0] = entry1;
			if(from != null) {
				if(interrupt) {
					var _this1 = _this.queue;
					_this1.objects.push(1);
					_this1.objects.push(from);
				}
				entry1.mixingFrom = from;
				entry1.mixTime = 0;
				if(from.mixingFrom != null && from.mixDuration > 0) {
					entry1.interruptAlpha *= Math.min(1,from.mixTime / from.mixDuration | 0);
				}
				var this1 = from.timelinesRotation;
				this1.splice(0,this1.length);
			}
			var _this1 = _this.queue;
			_this1.objects.push(0);
			_this1.objects.push(entry1);
			_this1.AnimationState_this.animationsChanged = true;
			var _this1 = _this.queue;
			if(!_this1.drainDisabled) {
				_this1.drainDisabled = true;
				var objects = _this1.objects;
				var listeners = _this1.AnimationState_this.listeners;
				var i = 0;
				while(i < objects.length) {
					var type = js_Boot.__cast(objects[i] , Int);
					var entry = js_Boot.__cast(objects[i + 1] , spine_TrackEntry);
					while(true) {
						var _switchCond1 = type;
						if(_switchCond1 == 0) {
							if(entry.listener != null) {
								entry.listener.start(entry);
							}
							var ii = 0;
							while(ii < listeners.length) {
								listeners[ii].start(entry);
								++ii;
							}
							break;
						} else if(_switchCond1 == 1) {
							if(entry.listener != null) {
								entry.listener.interrupt(entry);
							}
							var ii1 = 0;
							while(ii1 < listeners.length) {
								listeners[ii1].interrupt(entry);
								++ii1;
							}
							break;
						} else if(_switchCond1 == 2) {
							if(entry.listener != null) {
								entry.listener.end(entry);
							}
							var ii2 = 0;
							while(ii2 < listeners.length) {
								listeners[ii2].end(entry);
								++ii2;
							}
							if(entry.listener != null) {
								entry.listener.dispose(entry);
							}
							var ii3 = 0;
							while(ii3 < listeners.length) {
								listeners[ii3].dispose(entry);
								++ii3;
							}
							_this1.AnimationState_this.trackEntryPool.free(entry);
							break;
						} else if(_switchCond1 == 3) {
							if(entry.listener != null) {
								entry.listener.dispose(entry);
							}
							var ii4 = 0;
							while(ii4 < listeners.length) {
								listeners[ii4].dispose(entry);
								++ii4;
							}
							_this1.AnimationState_this.trackEntryPool.free(entry);
							break;
						} else if(_switchCond1 == 4) {
							if(entry.listener != null) {
								entry.listener.complete(entry);
							}
							var ii5 = 0;
							while(ii5 < listeners.length) {
								listeners[ii5].complete(entry);
								++ii5;
							}
							break;
						} else if(_switchCond1 == 5) {
							var event = js_Boot.__cast(objects[i++ + 2] , spine_Event);
							if(entry.listener != null) {
								entry.listener.event(entry,event);
							}
							var ii6 = 0;
							while(ii6 < listeners.length) {
								listeners[ii6].event(entry,event);
								++ii6;
							}
							break;
						}
						break;
					}
					i += 2;
				}
				var this1 = _this1.objects;
				this1.splice(0,this1.length);
				_this1.drainDisabled = false;
			}
		}
		spine_tilemap_SkeletonSprite.prototype.play.call(this,action);
	}
	,__class__: spine_tilemap_SkeletonAnimation
});
var spine_utils_SpineUtils = function() {
};
$hxClasses["spine.utils.SpineUtils"] = spine_utils_SpineUtils;
spine_utils_SpineUtils.__name__ = "spine.utils.SpineUtils";
spine_utils_SpineUtils.cosDeg = function(angle) {
	return js_Boot.__cast(Math.cos(angle * spine_utils_SpineUtils.degRad) , Float);
};
spine_utils_SpineUtils.sinDeg = function(angle) {
	return js_Boot.__cast(Math.sin(angle * spine_utils_SpineUtils.degRad) , Float);
};
spine_utils_SpineUtils.cos = function(angle) {
	return js_Boot.__cast(Math.cos(angle) , Float);
};
spine_utils_SpineUtils.sin = function(angle) {
	return js_Boot.__cast(Math.sin(angle) , Float);
};
spine_utils_SpineUtils.atan2 = function(y,x) {
	return js_Boot.__cast(Math.atan2(y,x) , Float);
};
spine_utils_SpineUtils.prototype = {
	__class__: spine_utils_SpineUtils
};
var spine_utils_Triangulator = function() {
	this.polygonIndicesPool = new spine_utils__$Triangulator_IndicesPool();
	this.polygonPool = new spine_utils__$Triangulator_PolygonPool();
	this.triangles = [];
	this.isConcaveArray = [];
	this.indicesArray = [];
	this.convexPolygonsIndices = [];
	this.convexPolygons = [];
};
$hxClasses["spine.utils.Triangulator"] = spine_utils_Triangulator;
spine_utils_Triangulator.__name__ = "spine.utils.Triangulator";
spine_utils_Triangulator.isGeometryConcave = function(index,vertexCount,vertices,indices) {
	var previous = indices[(vertexCount + index - 1) % vertexCount] << 1;
	var current = indices[index] << 1;
	var next = indices[(index + 1) % vertexCount] << 1;
	var p1y = vertices[previous + 1];
	var p2y = vertices[current + 1];
	var p3y = vertices[next + 1];
	return !(vertices[previous] * (p3y - p2y) + vertices[current] * (p1y - p3y) + vertices[next] * (p2y - p1y) >= 0);
};
spine_utils_Triangulator.positiveArea = function(p1x,p1y,p2x,p2y,p3x,p3y) {
	return p1x * (p3y - p2y) + p2x * (p1y - p3y) + p3x * (p2y - p1y) >= 0;
};
spine_utils_Triangulator.computeWinding = function(p1x,p1y,p2x,p2y,p3x,p3y) {
	var px = p2x - p1x;
	var py = p2y - p1y;
	if(p3x * py - p3y * px + px * p1y - p1x * py >= 0) {
		return 1;
	} else {
		return -1;
	}
};
spine_utils_Triangulator.prototype = {
	convexPolygons: null
	,convexPolygonsIndices: null
	,indicesArray: null
	,isConcaveArray: null
	,triangles: null
	,polygonPool: null
	,polygonIndicesPool: null
	,triangulate: function(verticesArray) {
		var vertices = verticesArray;
		var vertexCount = verticesArray.length >> 1;
		var indicesArray = this.indicesArray;
		indicesArray.splice(0,indicesArray.length);
		var len = indicesArray.length;
		if(len > vertexCount) {
			indicesArray.splice(vertexCount,vertexCount - len);
		} else if(len < vertexCount) {
			while(len < vertexCount) {
				indicesArray.push(0);
				++len;
			}
		}
		var indices = indicesArray;
		var i = 0;
		while(i < vertexCount) {
			indices[i] = i;
			++i;
		}
		var isConcaveArray = this.isConcaveArray;
		var len = isConcaveArray.length;
		if(len > vertexCount) {
			isConcaveArray.splice(vertexCount,vertexCount - len);
		} else if(len < vertexCount) {
			while(len < vertexCount) {
				isConcaveArray.push(false);
				++len;
			}
		}
		var isConcave = isConcaveArray;
		var i = 0;
		var n = vertexCount;
		while(i < n) {
			var previous = indices[(vertexCount + i - 1) % vertexCount] << 1;
			var current = indices[i] << 1;
			var next = indices[(i + 1) % vertexCount] << 1;
			var p1y = vertices[previous + 1];
			var p2y = vertices[current + 1];
			var p3y = vertices[next + 1];
			isConcave[i] = !(vertices[previous] * (p3y - p2y) + vertices[current] * (p1y - p3y) + vertices[next] * (p2y - p1y) >= 0);
			++i;
		}
		var triangles = this.triangles;
		triangles.splice(0,triangles.length);
		while(vertexCount > 3) {
			var previous = vertexCount - 1;
			var i = 0;
			var next = 1;
			while(true) {
				var _gotoLabel_outer;
				while(true) {
					_gotoLabel_outer = 0;
					if(!isConcave[i]) {
						var p1 = indices[previous] << 1;
						var p2 = indices[i] << 1;
						var p3 = indices[next] << 1;
						var p1x = vertices[p1];
						var p1y = vertices[p1 + 1];
						var p2x = vertices[p2];
						var p2y = vertices[p2 + 1];
						var p3x = vertices[p3];
						var p3y = vertices[p3 + 1];
						var ii = (next + 1) % vertexCount;
						while(ii != previous) {
							if(!isConcave[ii]) {
								ii = (ii + 1) % vertexCount;
								continue;
							}
							var v = indices[ii] << 1;
							var vx = vertices[v];
							var vy = vertices[v + 1];
							if(p3x * (vy - p1y) + p1x * (p3y - vy) + vx * (p1y - p3y) >= 0) {
								if(p1x * (vy - p2y) + p2x * (p1y - vy) + vx * (p2y - p1y) >= 0) {
									if(p2x * (vy - p3y) + p3x * (p2y - vy) + vx * (p3y - p2y) >= 0) {
										_gotoLabel_outer = 1;
										break;
									}
								}
							}
							ii = (ii + 1) % vertexCount;
						}
						if(_gotoLabel_outer == 2) {
							continue;
						}
						if(_gotoLabel_outer >= 1) {
							break;
						}
						break;
					}
					if(_gotoLabel_outer == 0) {
						break;
					}
				}
				if(next == 0) {
					while(isConcave[i]) {
						--i;
						if(!(i > 0)) {
							break;
						}
					}
					break;
				}
				previous = i;
				i = next;
				next = (next + 1) % vertexCount;
			}
			triangles.push(indices[(vertexCount + i - 1) % vertexCount]);
			triangles.push(indices[i]);
			triangles.push(indices[(i + 1) % vertexCount]);
			var item = indicesArray[i];
			indicesArray.splice(i,1);
			var item1 = isConcaveArray[i];
			isConcaveArray.splice(i,1);
			--vertexCount;
			var previousIndex = (vertexCount + i - 1) % vertexCount;
			var nextIndex = i == vertexCount ? 0 : i;
			var previous1 = indices[(vertexCount + previousIndex - 1) % vertexCount] << 1;
			var current = indices[previousIndex] << 1;
			var next1 = indices[(previousIndex + 1) % vertexCount] << 1;
			var p1y1 = vertices[previous1 + 1];
			var p2y1 = vertices[current + 1];
			var p3y1 = vertices[next1 + 1];
			isConcave[previousIndex] = !(vertices[previous1] * (p3y1 - p2y1) + vertices[current] * (p1y1 - p3y1) + vertices[next1] * (p2y1 - p1y1) >= 0);
			var previous2 = indices[(vertexCount + nextIndex - 1) % vertexCount] << 1;
			var current1 = indices[nextIndex] << 1;
			var next2 = indices[(nextIndex + 1) % vertexCount] << 1;
			var p1y2 = vertices[previous2 + 1];
			var p2y2 = vertices[current1 + 1];
			var p3y2 = vertices[next2 + 1];
			isConcave[nextIndex] = !(vertices[previous2] * (p3y2 - p2y2) + vertices[current1] * (p1y2 - p3y2) + vertices[next2] * (p2y2 - p1y2) >= 0);
		}
		if(vertexCount == 3) {
			triangles.push(indices[2]);
			triangles.push(indices[0]);
			triangles.push(indices[1]);
		}
		return triangles;
	}
	,decompose: function(verticesArray,triangles) {
		var vertices = verticesArray;
		var convexPolygons = this.convexPolygons;
		this.polygonPool.freeAll(convexPolygons);
		convexPolygons.splice(0,convexPolygons.length);
		var convexPolygonsIndices = this.convexPolygonsIndices;
		this.polygonIndicesPool.freeAll(convexPolygonsIndices);
		convexPolygonsIndices.splice(0,convexPolygonsIndices.length);
		var polygonIndices = this.polygonIndicesPool.obtain();
		polygonIndices.splice(0,polygonIndices.length);
		var polygon = this.polygonPool.obtain();
		polygon.splice(0,polygon.length);
		var fanBaseIndex = -1;
		var lastWinding = 0;
		var trianglesItems = triangles;
		var i = 0;
		var n = triangles.length;
		while(i < n) {
			var t1 = trianglesItems[i] << 1;
			var t2 = trianglesItems[i + 1] << 1;
			var t3 = trianglesItems[i + 2] << 1;
			var x1 = vertices[t1];
			var y1 = vertices[t1 + 1];
			var x2 = vertices[t2];
			var y2 = vertices[t2 + 1];
			var x3 = vertices[t3];
			var y3 = vertices[t3 + 1];
			var merged = false;
			if(fanBaseIndex == t1) {
				var o = polygon.length - 4;
				var p = polygon;
				var p1x = p[o];
				var p1y = p[o + 1];
				var px = p[o + 2] - p1x;
				var py = p[o + 3] - p1y;
				var winding1 = x3 * py - y3 * px + px * p1y - p1x * py >= 0 ? 1 : -1;
				var px1 = p[0] - x3;
				var py1 = p[1] - y3;
				var winding2 = p[2] * py1 - p[3] * px1 + px1 * y3 - x3 * py1 >= 0 ? 1 : -1;
				if(winding1 == lastWinding && winding2 == lastWinding) {
					polygon.push(x3);
					polygon.push(y3);
					polygonIndices.push(t3);
					merged = true;
				}
			}
			if(!merged) {
				if(polygon.length > 0) {
					convexPolygons.push(polygon);
					convexPolygonsIndices.push(polygonIndices);
				} else {
					this.polygonPool.free(polygon);
					this.polygonIndicesPool.free(polygonIndices);
				}
				polygon = this.polygonPool.obtain();
				polygon.splice(0,polygon.length);
				polygon.push(x1);
				polygon.push(y1);
				polygon.push(x2);
				polygon.push(y2);
				polygon.push(x3);
				polygon.push(y3);
				polygonIndices = this.polygonIndicesPool.obtain();
				polygonIndices.splice(0,polygonIndices.length);
				polygonIndices.push(t1);
				polygonIndices.push(t2);
				polygonIndices.push(t3);
				var px2 = x2 - x1;
				var py2 = y2 - y1;
				lastWinding = x3 * py2 - y3 * px2 + px2 * y1 - x1 * py2 >= 0 ? 1 : -1;
				fanBaseIndex = t1;
			}
			i += 3;
		}
		if(polygon.length > 0) {
			convexPolygons.push(polygon);
			convexPolygonsIndices.push(polygonIndices);
		}
		var i = 0;
		var n = convexPolygons.length;
		while(i < n) {
			polygonIndices = convexPolygonsIndices[i];
			if(polygonIndices.length == 0) {
				++i;
				continue;
			}
			var firstIndex = polygonIndices[0];
			var lastIndex = polygonIndices[polygonIndices.length - 1];
			polygon = convexPolygons[i];
			var o = polygon.length - 4;
			var p = polygon;
			var prevPrevX = p[o];
			var prevPrevY = p[o + 1];
			var prevX = p[o + 2];
			var prevY = p[o + 3];
			var firstX = p[0];
			var firstY = p[1];
			var secondX = p[2];
			var secondY = p[3];
			var px = prevX - prevPrevX;
			var py = prevY - prevPrevY;
			var winding = firstX * py - firstY * px + px * prevPrevY - prevPrevX * py >= 0 ? 1 : -1;
			var ii = 0;
			while(ii < n) {
				if(ii == i) {
					++ii;
					continue;
				}
				var otherIndices = convexPolygonsIndices[ii];
				if(otherIndices.length != 3) {
					++ii;
					continue;
				}
				var otherFirstIndex = otherIndices[0];
				var otherSecondIndex = otherIndices[1];
				var otherLastIndex = otherIndices[2];
				var otherPoly = convexPolygons[ii];
				var x3 = otherPoly[otherPoly.length - 2];
				var y3 = otherPoly[otherPoly.length - 1];
				if(otherFirstIndex != firstIndex || otherSecondIndex != lastIndex) {
					++ii;
					continue;
				}
				var px1 = prevX - prevPrevX;
				var py1 = prevY - prevPrevY;
				var winding1 = x3 * py1 - y3 * px1 + px1 * prevPrevY - prevPrevX * py1 >= 0 ? 1 : -1;
				var px2 = firstX - x3;
				var py2 = firstY - y3;
				var winding2 = secondX * py2 - secondY * px2 + px2 * y3 - x3 * py2 >= 0 ? 1 : -1;
				if(winding1 == winding && winding2 == winding) {
					otherPoly.splice(0,otherPoly.length);
					otherIndices.splice(0,otherIndices.length);
					polygon.push(x3);
					polygon.push(y3);
					polygonIndices.push(otherLastIndex);
					prevPrevX = prevX;
					prevPrevY = prevY;
					prevX = x3;
					prevY = y3;
					ii = 0;
				}
				++ii;
			}
			++i;
		}
		var i = convexPolygons.length - 1;
		while(i >= 0) {
			polygon = convexPolygons[i];
			if(polygon.length == 0) {
				var item = convexPolygons[i];
				convexPolygons.splice(i,1);
				this.polygonPool.free(polygon);
				var item1 = convexPolygonsIndices[i];
				convexPolygonsIndices.splice(i,1);
				polygonIndices = item1;
				this.polygonIndicesPool.free(polygonIndices);
			}
			--i;
		}
		return convexPolygons;
	}
	,__class__: spine_utils_Triangulator
};
var spine_utils__$Triangulator_PolygonPool = function(initialCapacity,max) {
	spine_support_utils_Pool.call(this,initialCapacity,max);
};
$hxClasses["spine.utils._Triangulator.PolygonPool"] = spine_utils__$Triangulator_PolygonPool;
spine_utils__$Triangulator_PolygonPool.__name__ = "spine.utils._Triangulator.PolygonPool";
spine_utils__$Triangulator_PolygonPool.__super__ = spine_support_utils_Pool;
spine_utils__$Triangulator_PolygonPool.prototype = $extend(spine_support_utils_Pool.prototype,{
	newObject: function() {
		var this1 = [];
		return this1;
	}
	,__class__: spine_utils__$Triangulator_PolygonPool
});
var spine_utils__$Triangulator_IndicesPool = function(initialCapacity,max) {
	spine_support_utils_Pool.call(this,initialCapacity,max);
};
$hxClasses["spine.utils._Triangulator.IndicesPool"] = spine_utils__$Triangulator_IndicesPool;
spine_utils__$Triangulator_IndicesPool.__name__ = "spine.utils._Triangulator.IndicesPool";
spine_utils__$Triangulator_IndicesPool.__super__ = spine_support_utils_Pool;
spine_utils__$Triangulator_IndicesPool.prototype = $extend(spine_support_utils_Pool.prototype,{
	newObject: function() {
		var this1 = [];
		return this1;
	}
	,__class__: spine_utils__$Triangulator_IndicesPool
});
var spine_utils_VectorUtils = function() { };
$hxClasses["spine.utils.VectorUtils"] = spine_utils_VectorUtils;
spine_utils_VectorUtils.__name__ = "spine.utils.VectorUtils";
spine_utils_VectorUtils.pushVectorFloat = function(v,v2) {
	var _g = 0;
	var _g1 = v2.get_length();
	while(_g < _g1) {
		var i = _g++;
		v.push(v2.get(i));
	}
};
spine_utils_VectorUtils.pushVectorInt = function(v,v2) {
	var _g = 0;
	var _g1 = v2.get_length();
	while(_g < _g1) {
		var i = _g++;
		v.push(v2.get(i));
	}
};
var tweenxcore_Easing = function() { };
$hxClasses["tweenxcore.Easing"] = tweenxcore_Easing;
tweenxcore_Easing.__name__ = "tweenxcore.Easing";
tweenxcore_Easing.linear = function(t) {
	return t;
};
tweenxcore_Easing.sineIn = function(t) {
	if(t == 0) {
		return 0;
	} else if(t == 1) {
		return 1;
	} else {
		return 1 - Math.cos(t * 1.57079632679489656);
	}
};
tweenxcore_Easing.sineOut = function(t) {
	if(t == 0) {
		return 0;
	} else if(t == 1) {
		return 1;
	} else {
		return Math.sin(t * 1.57079632679489656);
	}
};
tweenxcore_Easing.sineInOut = function(t) {
	if(t == 0) {
		return 0;
	} else if(t == 1) {
		return 1;
	} else {
		return -0.5 * (Math.cos(3.1415926535897932384626433832795 * t) - 1);
	}
};
tweenxcore_Easing.sineOutIn = function(t) {
	if(t == 0) {
		return 0;
	} else if(t == 1) {
		return 1;
	} else if(t < 0.5) {
		return 0.5 * Math.sin(t * 2 * 1.57079632679489656);
	} else {
		return -0.5 * Math.cos((t * 2 - 1) * 1.57079632679489656) + 1;
	}
};
tweenxcore_Easing.quadIn = function(t) {
	return t * t;
};
tweenxcore_Easing.quadOut = function(t) {
	return -t * (t - 2);
};
tweenxcore_Easing.quadInOut = function(t) {
	if(t < 0.5) {
		return 2 * t * t;
	} else {
		return -2 * (--t * t) + 1;
	}
};
tweenxcore_Easing.quadOutIn = function(t) {
	if(t < 0.5) {
		return -0.5 * (t *= 2) * (t - 2);
	} else {
		t = t * 2 - 1;
		return 0.5 * t * t + 0.5;
	}
};
tweenxcore_Easing.cubicIn = function(t) {
	return t * t * t;
};
tweenxcore_Easing.cubicOut = function(t) {
	return --t * t * t + 1;
};
tweenxcore_Easing.cubicInOut = function(t) {
	if((t *= 2) < 1) {
		return 0.5 * t * t * t;
	} else {
		return 0.5 * ((t -= 2) * t * t + 2);
	}
};
tweenxcore_Easing.cubicOutIn = function(t) {
	t = t * 2 - 1;
	return 0.5 * (t * t * t + 1);
};
tweenxcore_Easing.quartIn = function(t) {
	return (t *= t) * t;
};
tweenxcore_Easing.quartOut = function(t) {
	t = --t * t;
	return 1 - t * t;
};
tweenxcore_Easing.quartInOut = function(t) {
	if((t *= 2) < 1) {
		return 0.5 * (t *= t) * t;
	} else {
		t = (t -= 2) * t;
		return -0.5 * (t * t - 2);
	}
};
tweenxcore_Easing.quartOutIn = function(t) {
	if(t < 0.5) {
		t = t * 2 - 1;
		return -0.5 * (t *= t) * t + 0.5;
	} else {
		t = t * 2 - 1;
		return 0.5 * (t *= t) * t + 0.5;
	}
};
tweenxcore_Easing.quintIn = function(t) {
	return t * (t *= t) * t;
};
tweenxcore_Easing.quintOut = function(t) {
	return --t * (t *= t) * t + 1;
};
tweenxcore_Easing.quintInOut = function(t) {
	if((t *= 2) < 1) {
		return 0.5 * t * (t *= t) * t;
	} else {
		return 0.5 * (t -= 2) * (t *= t) * t + 1;
	}
};
tweenxcore_Easing.quintOutIn = function(t) {
	t = t * 2 - 1;
	return 0.5 * (t * (t *= t) * t + 1);
};
tweenxcore_Easing.expoIn = function(t) {
	if(t == 0) {
		return 0;
	} else {
		return Math.exp(6.931471805599453 * (t - 1));
	}
};
tweenxcore_Easing.expoOut = function(t) {
	if(t == 1) {
		return 1;
	} else {
		return 1 - Math.exp(-6.93147180559945308 * t);
	}
};
tweenxcore_Easing.expoInOut = function(t) {
	if(t == 0) {
		return 0;
	} else if(t == 1) {
		return 1;
	} else if((t *= 2) < 1) {
		return 0.5 * Math.exp(6.931471805599453 * (t - 1));
	} else {
		return 0.5 * (2 - Math.exp(-6.93147180559945308 * (t - 1)));
	}
};
tweenxcore_Easing.expoOutIn = function(t) {
	if(t < 0.5) {
		return 0.5 * (1 - Math.exp(-13.8629436111989062 * t));
	} else if(t == 0.5) {
		return 0.5;
	} else {
		return 0.5 * (Math.exp(13.8629436111989062 * (t - 1)) + 1);
	}
};
tweenxcore_Easing.circIn = function(t) {
	if(t < -1 || 1 < t) {
		return 0;
	} else {
		return 1 - Math.sqrt(1 - t * t);
	}
};
tweenxcore_Easing.circOut = function(t) {
	if(t < 0 || 2 < t) {
		return 0;
	} else {
		return Math.sqrt(t * (2 - t));
	}
};
tweenxcore_Easing.circInOut = function(t) {
	if(t < -0.5 || 1.5 < t) {
		return 0.5;
	} else if((t *= 2) < 1) {
		return -0.5 * (Math.sqrt(1 - t * t) - 1);
	} else {
		return 0.5 * (Math.sqrt(1 - (t -= 2) * t) + 1);
	}
};
tweenxcore_Easing.circOutIn = function(t) {
	if(t < 0) {
		return 0;
	} else if(1 < t) {
		return 1;
	} else if(t < 0.5) {
		t = t * 2 - 1;
		return 0.5 * Math.sqrt(1 - t * t);
	} else {
		t = t * 2 - 1;
		return -0.5 * (Math.sqrt(1 - t * t) - 1 - 1);
	}
};
tweenxcore_Easing.bounceIn = function(t) {
	t = 1 - t;
	if(t < 0.363636363636363646) {
		return 1 - 7.5625 * t * t;
	} else if(t < 0.727272727272727293) {
		return 1 - (7.5625 * (t -= 0.545454545454545414) * t + 0.75);
	} else if(t < 0.909090909090909061) {
		return 1 - (7.5625 * (t -= 0.818181818181818232) * t + 0.9375);
	} else {
		return 1 - (7.5625 * (t -= 0.954545454545454586) * t + 0.984375);
	}
};
tweenxcore_Easing.bounceOut = function(t) {
	if(t < 0.363636363636363646) {
		return 7.5625 * t * t;
	} else if(t < 0.727272727272727293) {
		return 7.5625 * (t -= 0.545454545454545414) * t + 0.75;
	} else if(t < 0.909090909090909061) {
		return 7.5625 * (t -= 0.818181818181818232) * t + 0.9375;
	} else {
		return 7.5625 * (t -= 0.954545454545454586) * t + 0.984375;
	}
};
tweenxcore_Easing.bounceInOut = function(t) {
	if(t < 0.5) {
		t = 1 - t * 2;
		if(t < 0.363636363636363646) {
			return (1 - 7.5625 * t * t) * 0.5;
		} else if(t < 0.727272727272727293) {
			return (1 - (7.5625 * (t -= 0.545454545454545414) * t + 0.75)) * 0.5;
		} else if(t < 0.909090909090909061) {
			return (1 - (7.5625 * (t -= 0.818181818181818232) * t + 0.9375)) * 0.5;
		} else {
			return (1 - (7.5625 * (t -= 0.954545454545454586) * t + 0.984375)) * 0.5;
		}
	} else {
		t = t * 2 - 1;
		if(t < 0.363636363636363646) {
			return 7.5625 * t * t * 0.5 + 0.5;
		} else if(t < 0.727272727272727293) {
			return (7.5625 * (t -= 0.545454545454545414) * t + 0.75) * 0.5 + 0.5;
		} else if(t < 0.909090909090909061) {
			return (7.5625 * (t -= 0.818181818181818232) * t + 0.9375) * 0.5 + 0.5;
		} else {
			return (7.5625 * (t -= 0.954545454545454586) * t + 0.984375) * 0.5 + 0.5;
		}
	}
};
tweenxcore_Easing.bounceOutIn = function(t) {
	if(t < 0.5) {
		if((t *= 2) < 0.363636363636363646) {
			return 0.5 * (7.5625 * t * t);
		} else if(t < 0.727272727272727293) {
			return 0.5 * (7.5625 * (t -= 0.545454545454545414) * t + 0.75);
		} else if(t < 0.909090909090909061) {
			return 0.5 * (7.5625 * (t -= 0.818181818181818232) * t + 0.9375);
		} else {
			return 0.5 * (7.5625 * (t -= 0.954545454545454586) * t + 0.984375);
		}
	} else {
		t = 1 - (t * 2 - 1);
		if(t < 0.363636363636363646) {
			return 0.5 - 0.5 * (7.5625 * t * t) + 0.5;
		} else if(t < 0.727272727272727293) {
			return 0.5 - 0.5 * (7.5625 * (t -= 0.545454545454545414) * t + 0.75) + 0.5;
		} else if(t < 0.909090909090909061) {
			return 0.5 - 0.5 * (7.5625 * (t -= 0.818181818181818232) * t + 0.9375) + 0.5;
		} else {
			return 0.5 - 0.5 * (7.5625 * (t -= 0.954545454545454586) * t + 0.984375) + 0.5;
		}
	}
};
tweenxcore_Easing.backIn = function(t) {
	if(t == 0) {
		return 0;
	} else if(t == 1) {
		return 1;
	} else {
		return t * t * (2.70158 * t - 1.70158);
	}
};
tweenxcore_Easing.backOut = function(t) {
	if(t == 0) {
		return 0;
	} else if(t == 1) {
		return 1;
	} else {
		return --t * t * (2.70158 * t + 1.70158) + 1;
	}
};
tweenxcore_Easing.backInOut = function(t) {
	if(t == 0) {
		return 0;
	} else if(t == 1) {
		return 1;
	} else if((t *= 2) < 1) {
		return 0.5 * (t * t * (3.5949095 * t - 2.5949095));
	} else {
		return 0.5 * ((t -= 2) * t * (3.5949095 * t + 2.5949095) + 2);
	}
};
tweenxcore_Easing.backOutIn = function(t) {
	if(t == 0) {
		return 0;
	} else if(t == 1) {
		return 1;
	} else if(t < 0.5) {
		t = t * 2 - 1;
		return 0.5 * (t * t * (2.70158 * t + 1.70158) + 1);
	} else {
		t = t * 2 - 1;
		return 0.5 * t * t * (2.70158 * t - 1.70158) + 0.5;
	}
};
tweenxcore_Easing.elasticIn = function(t) {
	if(t == 0) {
		return 0;
	} else if(t == 1) {
		return 1;
	} else {
		var s = 7.5e-05;
		return -(Math.exp(6.931471805599453 * --t) * Math.sin((t * 0.001 - s) * 6.28318530717958623 / 0.0003));
	}
};
tweenxcore_Easing.elasticOut = function(t) {
	if(t == 0) {
		return 0;
	} else if(t == 1) {
		return 1;
	} else {
		var s = 7.5e-05;
		return Math.exp(-6.93147180559945308 * t) * Math.sin((t * 0.001 - s) * 6.28318530717958623 / 0.0003) + 1;
	}
};
tweenxcore_Easing.elasticInOut = function(t) {
	if(t == 0) {
		return 0;
	} else if(t == 1) {
		return 1;
	} else {
		var s = 7.5e-05;
		if((t *= 2) < 1) {
			return -0.5 * (Math.exp(6.931471805599453 * --t) * Math.sin((t * 0.001 - s) * 6.28318530717958623 / 0.0003));
		} else {
			return Math.exp(-6.93147180559945308 * --t) * Math.sin((t * 0.001 - s) * 6.28318530717958623 / 0.0003) * 0.5 + 1;
		}
	}
};
tweenxcore_Easing.elasticOutIn = function(t) {
	if(t < 0.5) {
		if((t *= 2) == 0) {
			return 0;
		} else {
			var s = 7.5e-05;
			return 0.5 * Math.exp(-6.93147180559945308 * t) * Math.sin((t * 0.001 - s) * 6.28318530717958623 / 0.0003) + 0.5;
		}
	} else if(t == 0.5) {
		return 0.5;
	} else if(t == 1) {
		return 1;
	} else {
		t = t * 2 - 1;
		var s = 7.5e-05;
		return -(0.5 * Math.exp(6.931471805599453 * --t) * Math.sin((t * 0.001 - s) * 6.28318530717958623 / 0.0003)) + 0.5;
	}
};
tweenxcore_Easing.warpOut = function(t) {
	if(t <= 0) {
		return 0;
	} else {
		return 1;
	}
};
tweenxcore_Easing.warpIn = function(t) {
	if(t < 1) {
		return 0;
	} else {
		return 1;
	}
};
tweenxcore_Easing.warpInOut = function(t) {
	if(t < 0.5) {
		return 0;
	} else {
		return 1;
	}
};
tweenxcore_Easing.warpOutIn = function(t) {
	if(t <= 0) {
		return 0;
	} else if(t < 1) {
		return 0.5;
	} else {
		return 1;
	}
};
var tweenxcore_FloatTools = function() { };
$hxClasses["tweenxcore.FloatTools"] = tweenxcore_FloatTools;
tweenxcore_FloatTools.__name__ = "tweenxcore.FloatTools";
tweenxcore_FloatTools.revert = function(rate) {
	return 1 - rate;
};
tweenxcore_FloatTools.clamp = function(value,min,max) {
	if(max == null) {
		max = 1.0;
	}
	if(min == null) {
		min = 0.0;
	}
	if(value <= min) {
		return min;
	} else if(max <= value) {
		return max;
	} else {
		return value;
	}
};
tweenxcore_FloatTools.lerp = function(rate,from,to) {
	return from * (1 - rate) + to * rate;
};
tweenxcore_FloatTools.inverseLerp = function(value,from,to) {
	return (value - from) / (to - from);
};
tweenxcore_FloatTools.repeat = function(value,from,to) {
	if(to == null) {
		to = 1.0;
	}
	if(from == null) {
		from = 0.0;
	}
	var p = (value - from) / (to - from);
	return p - Math.floor(p);
};
tweenxcore_FloatTools.shake = function(rate,center,randomFunc) {
	if(center == null) {
		center = 0.0;
	}
	if(randomFunc == null) {
		randomFunc = Math.random;
	}
	var rate1 = randomFunc();
	return center + (-rate * (1 - rate1) + rate * rate1);
};
tweenxcore_FloatTools.spread = function(rate,scale) {
	return -scale * (1 - rate) + scale * rate;
};
tweenxcore_FloatTools.sinByRate = function(rate) {
	return Math.sin(rate * 2 * Math.PI);
};
tweenxcore_FloatTools.cosByRate = function(rate) {
	return Math.cos(rate * 2 * Math.PI);
};
tweenxcore_FloatTools.yoyo = function(rate,easing) {
	return easing((rate < 0.5 ? rate : 1 - rate) * 2);
};
tweenxcore_FloatTools.zigzag = function(rate,easing) {
	if(rate < 0.5) {
		return easing(rate * 2);
	} else {
		return 1 - easing((rate - 0.5) * 2);
	}
};
tweenxcore_FloatTools.mixEasing = function(rate,easing1,easing2,easing2Strength) {
	if(easing2Strength == null) {
		easing2Strength = 0.5;
	}
	return easing1(rate) * (1 - easing2Strength) + easing2(rate) * easing2Strength;
};
tweenxcore_FloatTools.crossfadeEasing = function(rate,easing1,easing2,easing2StrengthEasing,easing2StrengthStart,easing2StrengthEnd) {
	if(easing2StrengthEnd == null) {
		easing2StrengthEnd = 1;
	}
	if(easing2StrengthStart == null) {
		easing2StrengthStart = 0;
	}
	var rate1 = easing2StrengthEasing(rate);
	var rate2 = easing2StrengthStart * (1 - rate1) + easing2StrengthEnd * rate1;
	return easing1(rate) * (1 - rate2) + easing2(rate) * rate2;
};
tweenxcore_FloatTools.connectEasing = function(time,easing1,easing2,switchTime,switchValue) {
	if(switchValue == null) {
		switchValue = 0.5;
	}
	if(switchTime == null) {
		switchTime = 0.5;
	}
	if(time < switchTime) {
		var rate = easing1(time / switchTime);
		return 0 * (1 - rate) + switchValue * rate;
	} else {
		var rate = easing2((time - switchTime) / (1 - switchTime));
		return switchValue * (1 - rate) + rate;
	}
};
tweenxcore_FloatTools.oneTwoEasing = function(time,easingOne,easingTwo,switchTime) {
	if(switchTime == null) {
		switchTime = 0.5;
	}
	if(time < switchTime) {
		return easingOne(time / switchTime);
	} else {
		return easingTwo((time - switchTime) / (1 - switchTime));
	}
};
tweenxcore_FloatTools.binarySearch = function(sortedValues,value,boundaryMode) {
	if(boundaryMode == null) {
		boundaryMode = 0;
	}
	var min = 0;
	var max = sortedValues.length;
	if(boundaryMode == 0) {
		while(true) {
			var next = ((max - min) / 2 | 0) + min;
			var dv = sortedValues[next];
			if(dv <= value) {
				min = next + 1;
			} else {
				max = next;
			}
			if(min == max) {
				break;
			}
		}
	} else {
		while(true) {
			var next = ((max - min) / 2 | 0) + min;
			var dv = sortedValues[next];
			if(dv < value) {
				min = next + 1;
			} else {
				max = next;
			}
			if(min == max) {
				break;
			}
		}
	}
	return min;
};
tweenxcore_FloatTools.polyline = function(rate,values) {
	if(values.length < 2) {
		throw haxe_Exception.thrown("points length must be more than 2");
	} else {
		var max = values.length - 1;
		var scaledRate = rate * max;
		var min = 0;
		var max1 = max - 1;
		if(max1 == null) {
			max1 = 1.0;
		}
		if(min == null) {
			min = 0.0;
		}
		var index = Math.floor(scaledRate <= min ? min : max1 <= scaledRate ? max1 : scaledRate);
		var innerRate = scaledRate - index;
		return values[index] * (1 - innerRate) + values[index + 1] * innerRate;
	}
};
tweenxcore_FloatTools.bezier2 = function(rate,from,control,to) {
	return (from * (1 - rate) + control * rate) * (1 - rate) + (control * (1 - rate) + to * rate) * rate;
};
tweenxcore_FloatTools.bezier3 = function(rate,from,control1,control2,to) {
	var control = control1 * (1 - rate) + control2 * rate;
	return ((from * (1 - rate) + control1 * rate) * (1 - rate) + control * rate) * (1 - rate) + (control * (1 - rate) + (control2 * (1 - rate) + to * rate) * rate) * rate;
};
tweenxcore_FloatTools.bezier = function(rate,values) {
	if(values.length < 2) {
		throw haxe_Exception.thrown("points length must be more than 2");
	} else if(values.length == 2) {
		return values[0] * (1 - rate) + values[1] * rate;
	} else if(values.length == 3) {
		var control = values[1];
		return (values[0] * (1 - rate) + control * rate) * (1 - rate) + (control * (1 - rate) + values[2] * rate) * rate;
	} else {
		return tweenxcore_FloatTools._bezier(rate,values);
	}
};
tweenxcore_FloatTools._bezier = function(rate,values) {
	if(values.length == 4) {
		var control1 = values[1];
		var control2 = values[2];
		var control = control1 * (1 - rate) + control2 * rate;
		return ((values[0] * (1 - rate) + control1 * rate) * (1 - rate) + control * rate) * (1 - rate) + (control * (1 - rate) + (control2 * (1 - rate) + values[3] * rate) * rate) * rate;
	}
	var _g = [];
	var _g1 = 0;
	var _g2 = values.length - 1;
	while(_g1 < _g2) {
		var i = _g1++;
		_g.push(values[i] * (1 - rate) + values[i + 1] * rate);
	}
	return tweenxcore_FloatTools._bezier(rate,_g);
};
tweenxcore_FloatTools.uniformQuadraticBSpline = function(rate,values) {
	if(values.length < 2) {
		throw haxe_Exception.thrown("points length must be more than 2");
	} else if(values.length == 2) {
		return values[0] * (1 - rate) + values[1] * rate;
	} else {
		var max = values.length - 2;
		var scaledRate = rate * max;
		var min = 0;
		var max1 = max - 1;
		if(max1 == null) {
			max1 = 1.0;
		}
		if(min == null) {
			min = 0.0;
		}
		var index = Math.floor(scaledRate <= min ? min : max1 <= scaledRate ? max1 : scaledRate);
		var innerRate = scaledRate - index;
		var p0 = values[index];
		var p1 = values[index + 1];
		var p2 = values[index + 2];
		return innerRate * innerRate * (p0 / 2 - p1 + p2 / 2) + innerRate * (-p0 + p1) + p0 / 2 + p1 / 2;
	}
};
tweenxcore_FloatTools.frameToSecond = function(frame,fps) {
	return frame / fps;
};
tweenxcore_FloatTools.secondToFrame = function(second,fps) {
	return second * fps;
};
tweenxcore_FloatTools.degreeToRate = function(degree) {
	return degree / 360;
};
tweenxcore_FloatTools.rateToDegree = function(rate) {
	return rate * 360;
};
tweenxcore_FloatTools.radianToRate = function(radian) {
	return radian / (2 * Math.PI);
};
tweenxcore_FloatTools.rateToRadian = function(rate) {
	return rate * 2 * Math.PI;
};
tweenxcore_FloatTools.millisecondToBeat = function(millisecond,bpm) {
	return millisecond * bpm / 60000;
};
tweenxcore_FloatTools.beatToMillisecond = function(beat,bpm) {
	return beat * 60000 / bpm;
};
var tweenxcore_PointTools = function() { };
$hxClasses["tweenxcore.PointTools"] = tweenxcore_PointTools;
tweenxcore_PointTools.__name__ = "tweenxcore.PointTools";
tweenxcore_PointTools.polyline = function(outputPoint,rate,points) {
	var xs = [];
	var ys = [];
	var p = $getIterator(points);
	while(p.hasNext()) {
		var p1 = p.next();
		xs.push(p1.x);
		ys.push(p1.y);
	}
	var tmp;
	if(xs.length < 2) {
		throw haxe_Exception.thrown("points length must be more than 2");
	} else {
		var max = xs.length - 1;
		var scaledRate = rate * max;
		var min = 0;
		var max1 = max - 1;
		if(max1 == null) {
			max1 = 1.0;
		}
		if(min == null) {
			min = 0.0;
		}
		var index = Math.floor(scaledRate <= min ? min : max1 <= scaledRate ? max1 : scaledRate);
		var innerRate = scaledRate - index;
		tmp = xs[index] * (1 - innerRate) + xs[index + 1] * innerRate;
	}
	outputPoint.x = tmp;
	var tmp;
	if(ys.length < 2) {
		throw haxe_Exception.thrown("points length must be more than 2");
	} else {
		var max = ys.length - 1;
		var scaledRate = rate * max;
		var min = 0;
		var max1 = max - 1;
		if(max1 == null) {
			max1 = 1.0;
		}
		if(min == null) {
			min = 0.0;
		}
		var index = Math.floor(scaledRate <= min ? min : max1 <= scaledRate ? max1 : scaledRate);
		var innerRate = scaledRate - index;
		tmp = ys[index] * (1 - innerRate) + ys[index + 1] * innerRate;
	}
	outputPoint.y = tmp;
};
tweenxcore_PointTools.bezier2 = function(outputPoint,rate,from,control,to) {
	var control1 = control.x;
	outputPoint.x = (from.x * (1 - rate) + control1 * rate) * (1 - rate) + (control1 * (1 - rate) + from.x * rate) * rate;
	var control1 = control.y;
	outputPoint.y = (from.y * (1 - rate) + control1 * rate) * (1 - rate) + (control1 * (1 - rate) + from.y * rate) * rate;
};
tweenxcore_PointTools.bezier3 = function(outputPoint,rate,from,control1,control2,to) {
	var control11 = control1.x;
	var control21 = control2.x;
	var control = control11 * (1 - rate) + control21 * rate;
	outputPoint.x = ((from.x * (1 - rate) + control11 * rate) * (1 - rate) + control * rate) * (1 - rate) + (control * (1 - rate) + (control21 * (1 - rate) + from.x * rate) * rate) * rate;
	var control11 = control1.y;
	var control21 = control2.y;
	var control = control11 * (1 - rate) + control21 * rate;
	outputPoint.y = ((from.y * (1 - rate) + control11 * rate) * (1 - rate) + control * rate) * (1 - rate) + (control * (1 - rate) + (control21 * (1 - rate) + from.y * rate) * rate) * rate;
};
tweenxcore_PointTools.bezier = function(outputPoint,rate,points) {
	var xs = [];
	var ys = [];
	var p = $getIterator(points);
	while(p.hasNext()) {
		var p1 = p.next();
		xs.push(p1.x);
		ys.push(p1.y);
	}
	var tmp;
	if(xs.length < 2) {
		throw haxe_Exception.thrown("points length must be more than 2");
	} else if(xs.length == 2) {
		tmp = xs[0] * (1 - rate) + xs[1] * rate;
	} else if(xs.length == 3) {
		var control = xs[1];
		tmp = (xs[0] * (1 - rate) + control * rate) * (1 - rate) + (control * (1 - rate) + xs[2] * rate) * rate;
	} else {
		tmp = tweenxcore_FloatTools._bezier(rate,xs);
	}
	outputPoint.x = tmp;
	var tmp;
	if(ys.length < 2) {
		throw haxe_Exception.thrown("points length must be more than 2");
	} else if(ys.length == 2) {
		tmp = ys[0] * (1 - rate) + ys[1] * rate;
	} else if(ys.length == 3) {
		var control = ys[1];
		tmp = (ys[0] * (1 - rate) + control * rate) * (1 - rate) + (control * (1 - rate) + ys[2] * rate) * rate;
	} else {
		tmp = tweenxcore_FloatTools._bezier(rate,ys);
	}
	outputPoint.y = tmp;
};
tweenxcore_PointTools.uniformQuadraticBSpline = function(outputPoint,rate,points) {
	var xs = [];
	var ys = [];
	var p = $getIterator(points);
	while(p.hasNext()) {
		var p1 = p.next();
		xs.push(p1.x);
		ys.push(p1.y);
	}
	var tmp;
	if(xs.length < 2) {
		throw haxe_Exception.thrown("points length must be more than 2");
	} else if(xs.length == 2) {
		tmp = xs[0] * (1 - rate) + xs[1] * rate;
	} else {
		var max = xs.length - 2;
		var scaledRate = rate * max;
		var min = 0;
		var max1 = max - 1;
		if(max1 == null) {
			max1 = 1.0;
		}
		if(min == null) {
			min = 0.0;
		}
		var index = Math.floor(scaledRate <= min ? min : max1 <= scaledRate ? max1 : scaledRate);
		var innerRate = scaledRate - index;
		var p0 = xs[index];
		var p1 = xs[index + 1];
		var p2 = xs[index + 2];
		tmp = innerRate * innerRate * (p0 / 2 - p1 + p2 / 2) + innerRate * (-p0 + p1) + p0 / 2 + p1 / 2;
	}
	outputPoint.x = tmp;
	var tmp;
	if(ys.length < 2) {
		throw haxe_Exception.thrown("points length must be more than 2");
	} else if(ys.length == 2) {
		tmp = ys[0] * (1 - rate) + ys[1] * rate;
	} else {
		var max = ys.length - 2;
		var scaledRate = rate * max;
		var min = 0;
		var max1 = max - 1;
		if(max1 == null) {
			max1 = 1.0;
		}
		if(min == null) {
			min = 0.0;
		}
		var index = Math.floor(scaledRate <= min ? min : max1 <= scaledRate ? max1 : scaledRate);
		var innerRate = scaledRate - index;
		var p0 = ys[index];
		var p1 = ys[index + 1];
		var p2 = ys[index + 2];
		tmp = innerRate * innerRate * (p0 / 2 - p1 + p2 / 2) + innerRate * (-p0 + p1) + p0 / 2 + p1 / 2;
	}
	outputPoint.y = tmp;
};
var tweenxcore_MatrixTools = function() { };
$hxClasses["tweenxcore.MatrixTools"] = tweenxcore_MatrixTools;
tweenxcore_MatrixTools.__name__ = "tweenxcore.MatrixTools";
tweenxcore_MatrixTools.createSimilarityTransform = function(outputMatrix,fromX,fromY,toX,toY) {
	var dx = toX - fromX;
	var dy = toY - fromY;
	var rot = Math.atan2(dy,dx);
	var d = Math.sqrt(dx * dx + dy * dy);
	outputMatrix.a = d * Math.cos(rot);
	outputMatrix.b = d * Math.sin(rot);
	outputMatrix.c = -d * Math.sin(rot);
	outputMatrix.d = d * Math.cos(rot);
	outputMatrix.tx = fromX;
	outputMatrix.ty = fromY;
};
var zygame_ZStd = function() { };
$hxClasses["zygame.ZStd"] = zygame_ZStd;
zygame_ZStd.__name__ = "zygame.ZStd";
zygame_ZStd.is = function(v,v2) {
	return v == v2;
};
zygame_ZStd.isNot = function(v,v2) {
	return v != v2;
};
var zygame_cmnt_API = function() { };
$hxClasses["zygame.cmnt.API"] = zygame_cmnt_API;
zygame_cmnt_API.__name__ = "zygame.cmnt.API";
zygame_cmnt_API.getUserAPI = function(userData,api,map,callBack,noJson,isv2) {
	if(isv2 == null) {
		isv2 = false;
	}
	if(noJson == null) {
		noJson = false;
	}
	if(userData.getToken() == null) {
		callBack(new zygame_cmnt_callback_CmntCallBackData(api,406,"UserData.getToken() is null!"));
		return;
	}
	if(map == null) {
		map = new haxe_ds_StringMap();
	}
	if(isv2) {
		var value = userData.getToken();
		map.h["token"] = value;
	} else {
		var value = userData.getToken();
		map.h["accessToken"] = value;
	}
	zygame_cmnt_API.getAPI(api,map,callBack,noJson,isv2);
};
zygame_cmnt_API.getAPI = function(api,map,callBack,noJson,isv2) {
	if(isv2 == null) {
		isv2 = false;
	}
	if(noJson == null) {
		noJson = false;
	}
	if(map == null) {
		map = new haxe_ds_StringMap();
	}
	if(isv2) {
		map.h["apiVersion"] = "1000";
		map.h["appId"] = zygame_cmnt_API.appkey;
		if(zygame_cmnt_API.channel == null) {
			zygame_cmnt_API.channel = zygame_utils_Lib.getChannel();
		}
		map.h["channel"] = zygame_cmnt_API.channel;
	} else {
		map.h["appkey"] = zygame_cmnt_API.appkey;
	}
	map.h["deviceId"] = zygame_cmnt_API.deviceId;
	var value = zygame_utils_Lib.getVersion();
	map.h["version"] = value;
	var value = zygame_cmnt_API.getSign(map,"Ipkdevkh5lAhfBdfCk89D77fEdkhFfdaGkhjHfd7faFK76ffKHYI8fGMHa7ad7f89",isv2);
	map.h["signature"] = value;
	zygame_cmnt_API.getBaseApi(api,map,callBack,noJson,isv2);
};
zygame_cmnt_API.getBaseSignApi = function(api,map,callBack,noJson,isv2) {
	if(isv2 == null) {
		isv2 = false;
	}
	if(noJson == null) {
		noJson = false;
	}
	if(map == null) {
		map = new haxe_ds_StringMap();
	}
	var value = zygame_cmnt_API.getSign(map,"Ipkdevkh5lAhfBdfCk89D77fEdkhFfdaGkhjHfd7faFK76ffKHYI8fGMHa7ad7f89",isv2);
	map.h["signature"] = value;
	zygame_cmnt_API.getBaseApi(api,map,callBack,noJson,isv2);
};
zygame_cmnt_API.getBaseApi = function(api,map,callBack,noJson,isv2,noParsingJson) {
	if(noParsingJson == null) {
		noParsingJson = false;
	}
	if(isv2 == null) {
		isv2 = false;
	}
	if(noJson == null) {
		noJson = false;
	}
	var path = "";
	if(api.indexOf("http") == 0) {
		path = api;
	} else {
		path = isv2 ? zygame_cmnt_API.v2root + api : zygame_cmnt_API.root + api;
	}
	var obj = { };
	if(map != null) {
		var keys = haxe_ds_StringMap.keysIterator(map.h);
		while(keys.hasNext()) {
			var key = keys.next();
			obj[key] = map.h[key];
		}
	}
	var url = new openfl_net_URLRequest(path);
	url.method = "POST";
	if(!noJson) {
		url.contentType = "application/json";
	}
	url.data = JSON.stringify(obj);
	var loader = new openfl_net_URLLoader(url);
	loader.addEventListener("ioError",function(e) {
		if(callBack != null) {
			callBack(new zygame_cmnt_callback_CmntCallBackData(api,-1,loader.data));
		}
		callBack = null;
	});
	loader.addEventListener("complete",function(e) {
		var data = loader.data;
		var curl = "COMPLETE: curl -H \"Content-Type:application/json\" -X POST --data '" + Std.string(url.data) + "' " + path;
		if(callBack != null) {
			try {
				if(noParsingJson) {
					callBack(new zygame_cmnt_callback_CmntCallBackData(api,0,data));
				} else {
					var json = JSON.parse(data);
					if(path.indexOf(zygame_cmnt_API.v2root) != -1) {
						if(json.code == 0) {
							callBack(new zygame_cmnt_callback_CmntCallBackData(api,0,data));
						} else {
							zygame_cmnt_GameUtils.reportErrorLog("访问异常","请求异常结果：" + data,curl,"API",3);
							callBack(new zygame_cmnt_callback_CmntCallBackData(api,-1,data));
						}
					} else {
						callBack(new zygame_cmnt_callback_CmntCallBackData(api,0,data));
					}
				}
			} catch( _g ) {
				var e = haxe_Exception.caught(_g);
				zygame_cmnt_GameUtils.reportErrorLog("请求API","读取错误：" + e.get_message() + " " + haxe_CallStack.toString(e.get_stack()) + ",by " + path,curl,"API",3);
				zygame_core_Start.current.log("读取错误：" + e.get_message() + " " + haxe_CallStack.toString(e.get_stack()) + ",by " + path);
				callBack(new zygame_cmnt_callback_CmntCallBackData(api,-1,null));
			}
			callBack = null;
		}
	});
	zygame_utils_Lib.setTimeout(function() {
		if(callBack != null) {
			zygame_core_Start.current.log("请求超时："," API:" + path);
			callBack(new zygame_cmnt_callback_CmntCallBackData(api,-1,null));
		}
		callBack = null;
	},3000);
};
zygame_cmnt_API.getSign = function(map,key,isV2) {
	if(isV2) {
		return zygame_cmnt_v2_Sign.getSign(map);
	}
	var filteredReq = zygame_cmnt_API.paraFilter(map);
	var prestr = zygame_cmnt_API.createLinkString(filteredReq,true,false);
	prestr += zygame_cmnt_API.QSTRING_SPLIT + haxe_crypto_Md5.encode(key);
	prestr = haxe_crypto_Md5.encode(prestr);
	return prestr;
};
zygame_cmnt_API.paraFilter = function(map) {
	var result = new haxe_ds_StringMap();
	if(map == null) {
		return result;
	}
	var keys = haxe_ds_StringMap.keysIterator(map.h);
	while(keys.hasNext()) {
		var key = keys.next();
		var value = map.h[key];
		if(!(typeof(value) != "string" || value == null || value == "" || key.indexOf(zygame_cmnt_API.SIGNATURE) != -1 || key.indexOf(zygame_cmnt_API.SIGN_METHOD) != -1)) {
			result.h[key] = value;
		}
	}
	return result;
};
zygame_cmnt_API.createLinkString = function(map,sort,encode) {
	var keys = [];
	var keysI = haxe_ds_StringMap.keysIterator(map.h);
	while(keysI.hasNext()) keys.push(keysI.next());
	if(sort) {
		keys.sort(function(v,v2) {
			var _g = 0;
			var _g1 = v.length;
			while(_g < _g1) {
				var i = _g++;
				if(i > v2.length) {
					return -1;
				} else {
					var a1 = HxOverrides.cca(v,i);
					var a2 = HxOverrides.cca(v2,i);
					if(a1 > a2) {
						return 1;
					} else if(a1 < a2) {
						return -1;
					}
				}
			}
			return -1;
		});
	}
	var data = "";
	var _g = 0;
	var _g1 = keys.length;
	while(_g < _g1) {
		var i = _g++;
		var key = keys[i];
		var value = map.h[key];
		if(value == null) {
			continue;
		} else {
			var encode1 = encode;
		}
		data += key + zygame_cmnt_API.QSTRING_EQUAL + value;
		if(i != keys.length - 1) {
			data += zygame_cmnt_API.QSTRING_SPLIT;
		}
	}
	return data;
};
var zygame_cmnt_Cmnt = function() { };
$hxClasses["zygame.cmnt.Cmnt"] = zygame_cmnt_Cmnt;
zygame_cmnt_Cmnt.__name__ = "zygame.cmnt.Cmnt";
zygame_cmnt_Cmnt.initCore = function(group,channel) {
	zygame_cmnt_API.channel = channel;
	zygame_cmnt_Cmnt.pkg = group;
};
zygame_cmnt_Cmnt.initGroup = function(group) {
	zygame_cmnt_Cmnt.pkg = group;
};
zygame_cmnt_Cmnt.initUserData = function() {
	zygame_cmnt_Cmnt.userData = new zygame_cmnt_data_CmntUserData();
};
zygame_cmnt_Cmnt.init = function(appkey,oldAppKey,deviceId) {
	zygame_cmnt_Cmnt.oldAppKey = oldAppKey;
	zygame_cmnt_API.appkey = appkey;
	zygame_cmnt_API.deviceId = deviceId;
	zygame_cmnt_Cmnt.isInit = true;
	haxe_Log.trace("[zygameui]appid=" + appkey,{ fileName : "Source/zygame/cmnt/Cmnt.hx", lineNumber : 73, className : "zygame.cmnt.Cmnt", methodName : "init"});
	zygame_cmnt_GameUtils.start();
};
zygame_cmnt_Cmnt.getRandomNickName = function(callBack) {
	zygame_cmnt_API.getAPI("user/api/getRandomNickname",null,callBack,false,true);
};
zygame_cmnt_Cmnt.isLogin = function() {
	return zygame_cmnt_Cmnt.userData.isLogin();
};
zygame_cmnt_Cmnt.userDataCallBack = function(callBack) {
	return function(data) {
		if(data.code == 0) {
			zygame_cmnt_Cmnt.userData.updateUserData(JSON.parse(data.data).data);
		}
		callBack(data);
	};
};
zygame_cmnt_Cmnt.getServerTime = function(call) {
	zygame_cmnt_API.getAPI("kengsdk/api/getTime",null,function(data) {
		if(data.code == 0) {
			call(data.obj.data);
		} else {
			call(-1);
		}
	},false,true);
};
zygame_cmnt_Cmnt.loginByOpenID = function(callBack) {
	if(zygame_cmnt_Cmnt.userData.getOpenID() == null) {
		zygame_core_Start.current.log("没有提供有效的OpenId，无法登录！");
		callBack(new zygame_cmnt_callback_CmntCallBackData("user/api/login",400,null));
		return;
	}
	var nickName = zygame_cmnt_Cmnt.userData.getNickName();
	var map = new haxe_ds_StringMap();
	var value = zygame_cmnt_Cmnt.userData.getOpenID();
	map.h["openId"] = value;
	zygame_cmnt_API.getAPI("user/api/openIdLogin",map,function(data) {
		if(data.code == 0) {
			zygame_cmnt_Cmnt.userData.updateUserData(data.obj.data);
		}
		callBack(data);
	},false,true);
};
zygame_cmnt_Cmnt.loginGuest = function(nickName,callBack) {
	var data = new zygame_cmnt_data_GuestUserData({ openid : zygame_utils_Lib.getUUID(), name : nickName, avatar : null});
	zygame_cmnt_Cmnt.userData.setLocalUserData(data);
	zygame_cmnt_Cmnt.login(callBack);
};
zygame_cmnt_Cmnt.updateUserInfo = function(nickName,isMan,callBack) {
	zygame_cmnt_Cmnt.checkSensitiveWord(nickName,function(data) {
		if(data.code == 0) {
			var tmp = zygame_cmnt_Cmnt.userData;
			var _g = new haxe_ds_StringMap();
			_g.h["nickname"] = nickName;
			_g.h["man"] = isMan;
			zygame_cmnt_API.getUserAPI(tmp,"user/api/updateUserInfo",_g,function(data) {
				zygame_cmnt_Cmnt.userData.setNickName(nickName);
				if(callBack != null) {
					callBack(data);
				}
			},false,true);
		} else {
			if(data.code == -1 && data.data != null) {
				data.code = 3000;
			}
			callBack(data);
		}
	});
};
zygame_cmnt_Cmnt.login = function(callBack) {
	if(zygame_cmnt_Cmnt.userData.getOpenID() == null || zygame_cmnt_Cmnt.userData.getNickName() == null) {
		callBack(new zygame_cmnt_callback_CmntCallBackData("user/api/login",400,null));
		return;
	}
	var nickName = zygame_cmnt_Cmnt.userData.getNickName();
	var map = new haxe_ds_StringMap();
	var value = zygame_cmnt_Cmnt.userData.getOpenID();
	map.h["openId"] = value;
	map.h["nickname"] = nickName;
	var value = zygame_cmnt_Cmnt.userData.getSex() == "1" ? "true" : "false";
	map.h["man"] = value;
	zygame_cmnt_API.getAPI("user/api/login",map,function(data) {
		if(data.code == 0) {
			zygame_cmnt_Cmnt.userData.updateUserData(data.obj.data);
		}
		callBack(data);
	},false,true);
};
zygame_cmnt_Cmnt.getUserOnlineData = function(callBack) {
	var map = new haxe_ds_StringMap();
	zygame_cmnt_API.getUserAPI(zygame_cmnt_Cmnt.userData,"user/api/getUserData",map,function(data) {
		if(data != null && data.code == 0) {
			if(data.obj.data != null) {
				callBack(data);
			} else {
				callBack(data);
			}
		}
	},false,true);
};
zygame_cmnt_Cmnt.saveUserData = function(data,callBack) {
	var now = new Date().getTime();
	if(now - zygame_cmnt_Cmnt._saveTime > 60000) {
		zygame_cmnt_Cmnt._saveTime = now;
		var map = new haxe_ds_StringMap();
		map.h["data"] = data;
		zygame_cmnt_API.getUserAPI(zygame_cmnt_Cmnt.userData,"user/api/saveUserData",map,callBack,false,true);
	}
};
zygame_cmnt_Cmnt.listInvitation = function(callBack) {
	var map = new haxe_ds_StringMap();
	zygame_cmnt_API.getUserAPI(zygame_cmnt_Cmnt.userData,"user/api/listInvitation",map,callBack,false,true);
};
zygame_cmnt_Cmnt.reportInvitation = function(userId,data,callBack) {
	var map = new haxe_ds_StringMap();
	var value = JSON.stringify(data);
	map.h["inviteeData"] = value;
	map.h["inviterUserId"] = userId;
	zygame_cmnt_API.getUserAPI(zygame_cmnt_Cmnt.userData,"user/api/reportInvitation",map,callBack,false,true);
};
zygame_cmnt_Cmnt.reportInvitationByCode = function(code,data,callBack) {
	var map = new haxe_ds_StringMap();
	var value = JSON.stringify(data);
	map.h["inviteeData"] = value;
	map.h["code"] = code;
	zygame_cmnt_API.getUserAPI(zygame_cmnt_Cmnt.userData,"user/api/reportInvitationByCode",map,callBack,false,true);
};
zygame_cmnt_Cmnt.getInviteCode = function(callBack) {
	zygame_cmnt_API.getUserAPI(zygame_cmnt_Cmnt.userData,"user/api/getInviteCode",null,callBack,false,true);
};
zygame_cmnt_Cmnt.getRankingList = function(name,page,callBack,size,pname) {
	if(size == null) {
		size = 20;
	}
	var map = new haxe_ds_StringMap();
	map.h["name"] = name + (pname == null ? "" : "-" + pname);
	map.h["page"] = page == null ? "null" : "" + page;
	map.h["size"] = size == null ? "null" : "" + size;
	zygame_cmnt_API.getAPI("rklist/api/getRankingList",map,callBack,false,true);
};
zygame_cmnt_Cmnt.getRanking = function(name,score,callBack,pname) {
	var map = new haxe_ds_StringMap();
	map.h["name"] = name + (pname == null ? "" : "-" + pname);
	map.h["score"] = score == null ? "null" : "" + score;
	zygame_cmnt_API.getUserAPI(zygame_cmnt_Cmnt.userData,"rklist/api/getRanking",map,callBack,false,true);
};
zygame_cmnt_Cmnt.reportValue = function(name,score,data,callBack,pname) {
	var map = new haxe_ds_StringMap();
	map.h["name"] = name + (pname == null ? "" : "-" + pname);
	map.h["score"] = score == null ? "null" : "" + score;
	var value = JSON.stringify(data);
	map.h["data"] = value;
	zygame_cmnt_API.getUserAPI(zygame_cmnt_Cmnt.userData,"rklist/api/reportValue",map,callBack,false,true);
};
zygame_cmnt_Cmnt.getCommentList = function(levelTag,page,size,callBack) {
	var map = new haxe_ds_StringMap();
	map.h["levelKey"] = levelTag;
	map.h["page"] = page == null ? "null" : "" + page;
	map.h["size"] = size == null ? "null" : "" + size;
	map.h["group"] = zygame_cmnt_Cmnt.pkg;
	zygame_cmnt_API.getAPI("level/api/commentList",map,callBack,false,true);
};
zygame_cmnt_Cmnt.uploadComment = function(levelTag,content,callBack) {
	if(zygame_cmnt_Cmnt.pkg == null) {
		throw haxe_Exception.thrown("请在使用之前先调用Cmnt.initPkg(游戏包名)接口");
	}
	var map = new haxe_ds_StringMap();
	map.h["levelKey"] = levelTag;
	map.h["group"] = zygame_cmnt_Cmnt.pkg;
	map.h["content"] = content;
	zygame_cmnt_API.getUserAPI(zygame_cmnt_Cmnt.userData,"level/api/commentSubmit",map,callBack,false,true);
};
zygame_cmnt_Cmnt.getLevelCount = function(levelKey,field,callBack) {
	if(zygame_cmnt_Cmnt.pkg == null) {
		throw haxe_Exception.thrown("请在使用之前先调用Cmnt.initPkg(游戏包名)接口");
	}
	var map = new haxe_ds_StringMap();
	map.h["levelKey"] = levelKey;
	map.h["group"] = zygame_cmnt_Cmnt.pkg;
	map.h["field"] = field;
	zygame_cmnt_API.getUserAPI(zygame_cmnt_Cmnt.userData,"level/api/counter/getCount",map,callBack,false,true);
};
zygame_cmnt_Cmnt.getLevelAllCount = function(levelKey,callBack) {
	if(zygame_cmnt_Cmnt.pkg == null) {
		throw haxe_Exception.thrown("请在使用之前先调用Cmnt.initPkg(游戏包名)接口");
	}
	var map = new haxe_ds_StringMap();
	map.h["levelKey"] = levelKey;
	map.h["group"] = zygame_cmnt_Cmnt.pkg;
	zygame_cmnt_API.getAPI("level/api/counter/getLevelData",map,callBack,false,true);
};
zygame_cmnt_Cmnt.increaseLevelCount = function(levelKey,field,callBack,value) {
	if(value == null) {
		value = 1;
	}
	if(zygame_cmnt_Cmnt.pkg == null) {
		throw haxe_Exception.thrown("请在使用之前先调用Cmnt.initPkg(游戏包名)接口");
	}
	var map = new haxe_ds_StringMap();
	map.h["levelKey"] = levelKey;
	map.h["group"] = zygame_cmnt_Cmnt.pkg;
	map.h["field"] = field;
	map.h["value"] = value == null ? "null" : "" + value;
	zygame_cmnt_API.getUserAPI(zygame_cmnt_Cmnt.userData,"level/api/counter/increase",map,callBack,false,true);
};
zygame_cmnt_Cmnt.levelPraiseCount = function(level,callBack) {
	zygame_cmnt_Cmnt.increaseLevelCount(level,"praise",callBack);
};
zygame_cmnt_Cmnt.levelShareCount = function(level,callBack) {
	zygame_cmnt_Cmnt.increaseLevelCount(level,"share",callBack);
};
zygame_cmnt_Cmnt.levelGameStart = function(level,callBack) {
	zygame_cmnt_Cmnt.increaseLevelCount(level,"gameStart",callBack);
};
zygame_cmnt_Cmnt.levelGameWin = function(level,callBack) {
	zygame_cmnt_Cmnt.increaseLevelCount(level,"gameWin",callBack);
};
zygame_cmnt_Cmnt.levelGameOver = function(level,callBack) {
	zygame_cmnt_Cmnt.increaseLevelCount(level,"gameOver",callBack);
};
zygame_cmnt_Cmnt.praiseComment = function(id,callBack) {
	var map = new haxe_ds_StringMap();
	map.h["id"] = id;
	zygame_cmnt_API.getUserAPI(zygame_cmnt_Cmnt.userData,"level/api/commentPraise",map,callBack,false,true);
};
zygame_cmnt_Cmnt.getUUID = function(callBack) {
	zygame_cmnt_Cmnt.getServerTime(function(f) {
		if(f != -1) {
			callBack(new zygame_cmnt_callback_CmntCallBackData("getUUID",0,"{\"uuid\":\"" + "guest_" + haxe_crypto_Md5.encode(f == null ? "null" : "" + f) + "\"}"));
		} else {
			callBack(new zygame_cmnt_callback_CmntCallBackData("getUUID",-1,"{code:-1}"));
		}
	});
};
zygame_cmnt_Cmnt.checkSensitiveWord = function(content,callBack) {
	if(content == "" || content == null) {
		if(callBack != null) {
			callBack(new zygame_cmnt_callback_CmntCallBackData("checkSensitiveWord",1002,"{\"code\":1002,\"message\":\"必需提供检测内容content\",\"data\":null}"));
		}
		return;
	}
	var _g = new haxe_ds_StringMap();
	_g.h["content"] = content;
	zygame_cmnt_API.getBaseApi("kengsdk/api/checkSensitiveWord",_g,callBack,false,true);
};
zygame_cmnt_Cmnt.getCity = function(callBack,isReset) {
	if(isReset == null) {
		isReset = false;
	}
	var city = zygame_utils_Lib.getData("ad_info");
	if(isReset || city == null) {
		zygame_cmnt_API.getAPI("user/api/getCity",null,function(data) {
			if(data.code == 0) {
				zygame_utils_Lib.setData("ad_info",data.obj.data.ad_info);
				callBack(new zygame_cmnt_callback_CmntCallBackData("user/api/getCity",0,JSON.stringify({ data : data.obj.data.ad_info})));
			} else {
				callBack(data);
			}
		},false,true);
	} else {
		callBack(new zygame_cmnt_callback_CmntCallBackData("user/api/getCity",0,JSON.stringify({ data : city})));
	}
};
zygame_cmnt_Cmnt.getIp = function(callBack) {
	zygame_cmnt_API.getAPI("kengsdk/api/getIp",null,callBack,false,true);
};
var zygame_cmnt_GameUtils = function() { };
$hxClasses["zygame.cmnt.GameUtils"] = zygame_cmnt_GameUtils;
zygame_cmnt_GameUtils.__name__ = "zygame.cmnt.GameUtils";
zygame_cmnt_GameUtils.insertValueEvent = function(location,type,action,value,callBack) {
};
zygame_cmnt_GameUtils.insertEvent = function(location,type,action,callBack) {
	zygame_cmnt_GameUtils.insertValueEvent(location,type,action,1,callBack);
};
zygame_cmnt_GameUtils.gameBegin = function(levelKey,callback,levelSerial) {
	if(levelSerial == null) {
		levelSerial = -1;
	}
	if(levelSerial > 0) {
		zygame_cmnt_GameUtils.levelPost(levelSerial,levelKey,zygame_utils_Lib.getData("s_" + levelKey + levelSerial,false) == true ? "start" : "first_start");
		zygame_utils_Lib.setData("s_" + levelKey + levelSerial,true);
	}
};
zygame_cmnt_GameUtils.gameWin = function(levelKey,callback,levelSerial) {
	if(levelSerial == null) {
		levelSerial = -1;
	}
	if(levelSerial > 0) {
		zygame_cmnt_GameUtils.levelPost(levelSerial,levelKey,zygame_utils_Lib.getData("p_" + levelKey + levelSerial,false) == true ? "pass" : "first_pass");
		zygame_utils_Lib.setData("p_" + levelKey + levelSerial,true);
	}
};
zygame_cmnt_GameUtils.gameOver = function(levelKey,callback,levelSerial) {
	if(levelSerial == null) {
		levelSerial = -1;
	}
	if(levelSerial > 0) {
		zygame_cmnt_GameUtils.levelPost(levelSerial,levelKey,"fail");
	}
};
zygame_cmnt_GameUtils.levelPost = function(levelSerial,levelName,key) {
	haxe_Log.trace("[LEVEL]",{ fileName : "Source/zygame/cmnt/GameUtils.hx", lineNumber : 106, className : "zygame.cmnt.GameUtils", methodName : "levelPost", customParams : [levelSerial,levelName,key]});
	var data = { };
	Reflect.setProperty(data,key,1);
	var _g = new haxe_ds_StringMap();
	_g.h["data"] = data;
	_g.h["levelName"] = levelName;
	_g.h["levelSerial"] = levelSerial;
	zygame_cmnt_API.getAPI("statistics/api/reportLevelAction",_g,null,false,true);
};
zygame_cmnt_GameUtils.reportErrorLog = function(position,log,errData,type,level) {
	if(level == null) {
		level = 3;
	}
	var _g = new haxe_ds_StringMap();
	_g.h["position"] = position;
	_g.h["errLog"] = log;
	_g.h["errData"] = errData;
	_g.h["level"] = level;
	_g.h["type"] = type;
	zygame_cmnt_API.getAPI("statistics/api/reportErrorLog",_g,null,false,true);
};
zygame_cmnt_GameUtils.start = function() {
	if(zygame_cmnt_GameUtils._start) {
		return;
	}
	zygame_cmnt_GameUtils._start = true;
	zygame_cmnt_GameUtils._loadtime = new Date().getTime();
	var _g = new haxe_ds_StringMap();
	_g.h["action"] = "start_loading";
	_g.h["count"] = "1";
	zygame_cmnt_API.getAPI("statistics/api/reportClientAction",_g,function(data) {
	},false,true);
};
zygame_cmnt_GameUtils.loaded = function() {
	if(!zygame_cmnt_GameUtils._loaded && zygame_cmnt_GameUtils._start) {
		zygame_cmnt_GameUtils._loaded = true;
		var useTime = new Date().getTime() - zygame_cmnt_GameUtils._loadtime;
		haxe_Log.trace("[loaded time]" + useTime,{ fileName : "Source/zygame/cmnt/GameUtils.hx", lineNumber : 158, className : "zygame.cmnt.GameUtils", methodName : "loaded"});
		var _g = new haxe_ds_StringMap();
		_g.h["action"] = "load_complete";
		_g.h["count"] = "1";
		_g.h["value"] = useTime;
		zygame_cmnt_API.getAPI("statistics/api/reportClientAction",_g,function(data) {
		},false,true);
	}
};
var zygame_cmnt_MessageSystem = function() { };
$hxClasses["zygame.cmnt.MessageSystem"] = zygame_cmnt_MessageSystem;
zygame_cmnt_MessageSystem.__name__ = "zygame.cmnt.MessageSystem";
zygame_cmnt_MessageSystem.init = function(interval) {
	if(interval == null) {
		interval = 60;
	}
	if(zygame_cmnt_MessageSystem._share == null) {
		zygame_cmnt_MessageSystem._share = openfl_net_SharedObject.getLocal("msgSys");
	}
	zygame_cmnt_MessageSystem._interval = interval;
	zygame_cmnt_MessageSystem.getMessage();
};
zygame_cmnt_MessageSystem.getMessage = function() {
	if(!zygame_cmnt_Cmnt.userData.isLogin()) {
		zygame_cmnt_MessageSystem.onMessageData(null);
		return;
	}
	zygame_cmnt_API.getUserAPI(zygame_cmnt_Cmnt.userData,"user/api/getMessages",null,zygame_cmnt_MessageSystem.onMessageData,false,true);
};
zygame_cmnt_MessageSystem.updateMessageList = function() {
};
zygame_cmnt_MessageSystem.onMessage = function(msg) {
};
zygame_cmnt_MessageSystem.onMessageData = function(data) {
	if(data != null) {
		if(data.code == 0) {
			var array = data.obj.data;
			if(array.length > 0) {
				var shareArray = zygame_cmnt_MessageSystem.getMessageList();
				if(shareArray == null) {
					shareArray = [];
				}
				var _g = 0;
				while(_g < array.length) {
					var item = array[_g];
					++_g;
					item.read = false;
					if(item.type == 0 || item.type == 1 && zygame_cmnt_MessageSystem.getMessageBySid(item.sid) == null) {
						zygame_cmnt_MessageSystem.onMessage(item);
						shareArray.push(item);
					}
				}
				if(zygame_cmnt_MessageSystem._share == null) {
					zygame_cmnt_MessageSystem._share = openfl_net_SharedObject.getLocal("msgSys");
				}
				zygame_cmnt_MessageSystem._share.data.messages = shareArray;
				zygame_cmnt_MessageSystem.updateMessageList();
				zygame_cmnt_MessageSystem._share.flush();
			}
		}
	}
	zygame_utils_Lib.setTimeout(zygame_cmnt_MessageSystem.getMessage,zygame_cmnt_MessageSystem._interval * 1000);
};
zygame_cmnt_MessageSystem.getMessageList = function() {
	if(zygame_cmnt_MessageSystem._share == null) {
		zygame_cmnt_MessageSystem._share = openfl_net_SharedObject.getLocal("msgSys");
	}
	if(zygame_cmnt_MessageSystem._share.data.messages == null) {
		return [];
	} else {
		return zygame_cmnt_MessageSystem._share.data.messages;
	}
};
zygame_cmnt_MessageSystem.readMessage = function(sid) {
	var item = zygame_cmnt_MessageSystem.getMessageBySid(sid);
	if(item != null) {
		item.read = true;
		zygame_cmnt_MessageSystem._share.flush();
	}
};
zygame_cmnt_MessageSystem.send = function(title,content,extendData,targetUserId,callBack) {
	var extData = extendData == null || typeof(extendData) == "string" ? extendData : JSON.stringify(extendData);
	var tmp = zygame_cmnt_Cmnt.userData;
	var _g = new haxe_ds_StringMap();
	_g.h["title"] = title;
	_g.h["content"] = content;
	_g.h["data"] = extData;
	_g.h["targetUserId"] = targetUserId;
	zygame_cmnt_API.getUserAPI(tmp,"user/api/sendMsg",_g,callBack,false,true);
};
zygame_cmnt_MessageSystem.clearReadMessage = function() {
	var array = zygame_cmnt_MessageSystem.getMessageList();
	var i = zygame_cmnt_MessageSystem.getMessageList().length - 1;
	while(i >= 0) {
		if(array[i].read == true) {
			HxOverrides.remove(array,array[i]);
		}
		--i;
	}
	zygame_cmnt_MessageSystem._share.flush();
};
zygame_cmnt_MessageSystem.removeAllMessage = function() {
	var array = zygame_cmnt_MessageSystem.getMessageList();
	var i = zygame_cmnt_MessageSystem.getMessageList().length - 1;
	while(i >= 0) {
		HxOverrides.remove(array,array[i]);
		--i;
	}
	zygame_cmnt_MessageSystem._share.flush();
};
zygame_cmnt_MessageSystem.remove = function(sid) {
	var item = zygame_cmnt_MessageSystem.getMessageBySid(sid);
	if(item != null) {
		HxOverrides.remove(zygame_cmnt_MessageSystem.getMessageList(),item);
		zygame_cmnt_MessageSystem._share.flush();
	}
};
zygame_cmnt_MessageSystem.getMessageBySid = function(sid) {
	var arr = zygame_cmnt_MessageSystem.getMessageList();
	var _g = 0;
	while(_g < arr.length) {
		var item = arr[_g];
		++_g;
		if(item.sid == sid) {
			return item;
		}
	}
	return null;
};
var zygame_cmnt_UploadAPI = function() { };
$hxClasses["zygame.cmnt.UploadAPI"] = zygame_cmnt_UploadAPI;
zygame_cmnt_UploadAPI.__name__ = "zygame.cmnt.UploadAPI";
zygame_cmnt_UploadAPI.uploadFile = function(file,projectId,cut,lastWidth,lastHeight,scale,folder) {
	if(folder == null) {
		folder = "client";
	}
	if(scale == null) {
		scale = 1;
	}
	var api = zygame_cmnt_API.v2root + "file/api/uploadImage";
	var privateKey = "Ipkh9hk38Ubht^ljThJk3fsX89%&*hh$#";
	var formData = { privateKey : privateKey, projectId : projectId, lastWidth : lastWidth, lastHeight : lastHeight, version : 1000};
	if(folder != null) {
		formData.folder = folder;
	}
	formData.cutX = cut.x;
	formData.cutY = cut.y;
	formData.width = cut.width;
	formData.height = cut.height;
	var uploadTask = null;
	if(uploadTask == null) {
		throw haxe_Exception.thrown("Current platfrom upload api no support!");
	}
	return uploadTask;
};
var zygame_cmnt_UploadTask = function() {
};
$hxClasses["zygame.cmnt.UploadTask"] = zygame_cmnt_UploadTask;
zygame_cmnt_UploadTask.__name__ = "zygame.cmnt.UploadTask";
zygame_cmnt_UploadTask.prototype = {
	onSuccess: function(res) {
	}
	,onFail: function(res) {
	}
	,__class__: zygame_cmnt_UploadTask
};
var zygame_cmnt_callback_CmntCallBackData = function(api,code,data) {
	this.api = api;
	this.code = code;
	this.data = data;
	if(data != null) {
		try {
			this.obj = JSON.parse(data);
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
		}
	}
};
$hxClasses["zygame.cmnt.callback.CmntCallBackData"] = zygame_cmnt_callback_CmntCallBackData;
zygame_cmnt_callback_CmntCallBackData.__name__ = "zygame.cmnt.callback.CmntCallBackData";
zygame_cmnt_callback_CmntCallBackData.prototype = {
	api: null
	,code: null
	,data: null
	,obj: null
	,__class__: zygame_cmnt_callback_CmntCallBackData
};
var zygame_cmnt_data_BaseUserData = function() { };
$hxClasses["zygame.cmnt.data.BaseUserData"] = zygame_cmnt_data_BaseUserData;
zygame_cmnt_data_BaseUserData.__name__ = "zygame.cmnt.data.BaseUserData";
zygame_cmnt_data_BaseUserData.__isInterface__ = true;
zygame_cmnt_data_BaseUserData.prototype = {
	getOpenID: null
	,getNickName: null
	,getAvatar: null
	,getSex: null
	,isGuest: null
	,__class__: zygame_cmnt_data_BaseUserData
};
var zygame_cmnt_data_CmntUserData = function() {
	this._isLogin = false;
	if(zygame_cmnt_data_CmntUserData.shareData == null) {
		zygame_cmnt_data_CmntUserData.shareData = openfl_net_SharedObject.getLocal("cmnt.zygame.net");
	}
	var pclass = $hxClasses["UserData"];
	if(pclass != null) {
		this._localUserData = Type.createInstance(pclass,[]);
	} else {
		haxe_Log.trace("绑定本地UserData数据失败！",{ fileName : "Source/zygame/cmnt/data/CmntUserData.hx", lineNumber : 44, className : "zygame.cmnt.data.CmntUserData", methodName : "new"});
	}
};
$hxClasses["zygame.cmnt.data.CmntUserData"] = zygame_cmnt_data_CmntUserData;
zygame_cmnt_data_CmntUserData.__name__ = "zygame.cmnt.data.CmntUserData";
zygame_cmnt_data_CmntUserData.prototype = {
	_localUserData: null
	,_isLogin: null
	,setLocalUserData: function(localUserData) {
		this._localUserData = localUserData;
		if(this._localUserData.getOpenID() != null) {
			zygame_cmnt_data_CmntUserData.shareData.data.openid = this._localUserData.getOpenID();
		}
		if(this._localUserData.getNickName() != null) {
			zygame_cmnt_data_CmntUserData.shareData.data.nickName = this._localUserData.getNickName();
		}
		if(this._localUserData.getAvatar() != null) {
			zygame_cmnt_data_CmntUserData.shareData.data.avatar = this._localUserData.getAvatar();
		}
		zygame_cmnt_data_CmntUserData.shareData.flush();
	}
	,isGuest: function() {
		if(this._localUserData != null) {
			return this._localUserData.isGuest();
		} else {
			return true;
		}
	}
	,isLogin: function() {
		return this._isLogin;
	}
	,updateUserData: function(userData) {
		if(userData == null) {
			return;
		}
		if(userData.userId != null) {
			zygame_cmnt_data_CmntUserData.shareData.data.userId = userData.userId;
		}
		if(userData.token != null) {
			this._isLogin = true;
			zygame_cmnt_data_CmntUserData.shareData.data.token = userData.token;
		}
		if(userData.userinfo != null) {
			zygame_cmnt_data_CmntUserData.shareData.data.userinfo = userData.userinfo;
		}
		if(userData.nickname != null) {
			this.setNickName(userData.nickname);
		}
		var tmp = userData.man != null;
		zygame_cmnt_data_CmntUserData.shareData.flush();
	}
	,getNickName: function(defalutName) {
		var name = this._localUserData != null ? this._localUserData.getNickName() : defalutName;
		if(name == null) {
			return zygame_cmnt_data_CmntUserData.shareData.data.nickName;
		}
		return name;
	}
	,setNickName: function(name) {
		if(((this._localUserData) instanceof zygame_cmnt_data_GuestUserData)) {
			(js_Boot.__cast(this._localUserData , zygame_cmnt_data_GuestUserData)).data.name = name;
		}
		zygame_cmnt_data_CmntUserData.shareData.data.nickName = name;
		zygame_cmnt_data_CmntUserData.shareData.flush();
	}
	,getOpenID: function() {
		var openid = this._localUserData != null ? this._localUserData.getOpenID() : null;
		if(openid == null) {
			openid = zygame_cmnt_data_CmntUserData.shareData.data.openid;
			if(openid != null && openid.indexOf("GUEST_") == 0) {
				return null;
			}
			return openid;
		}
		return openid;
	}
	,getAvatar: function() {
		var avatar = this._localUserData != null ? this._localUserData.getAvatar() : null;
		if(avatar == null) {
			avatar = zygame_cmnt_data_CmntUserData.shareData.data.avatar;
		}
		return avatar;
	}
	,getSex: function() {
		if(this._localUserData != null) {
			return this._localUserData.getSex();
		} else {
			return null;
		}
	}
	,getToken: function() {
		return zygame_cmnt_data_CmntUserData.shareData.data.token;
	}
	,clearToken: function() {
		zygame_cmnt_data_CmntUserData.shareData.data.token = null;
		zygame_cmnt_data_CmntUserData.shareData.flush();
	}
	,getUserId: function() {
		if(zygame_cmnt_data_CmntUserData.shareData.data.userId != null) {
			return zygame_cmnt_data_CmntUserData.shareData.data.userId;
		}
		if(zygame_cmnt_data_CmntUserData.shareData.data.userinfo != null) {
			return zygame_cmnt_data_CmntUserData.shareData.data.userinfo.id;
		}
		return null;
	}
	,data: null
	,get_data: function() {
		return zygame_cmnt_data_CmntUserData.shareData.data;
	}
	,__class__: zygame_cmnt_data_CmntUserData
	,__properties__: {get_data:"get_data"}
};
var zygame_cmnt_data_GuestUserData = function(data) {
	this.data = data;
};
$hxClasses["zygame.cmnt.data.GuestUserData"] = zygame_cmnt_data_GuestUserData;
zygame_cmnt_data_GuestUserData.__name__ = "zygame.cmnt.data.GuestUserData";
zygame_cmnt_data_GuestUserData.__interfaces__ = [zygame_cmnt_data_BaseUserData];
zygame_cmnt_data_GuestUserData.prototype = {
	data: null
	,getOpenID: function() {
		return this.data.openid;
	}
	,getNickName: function() {
		return this.data.name;
	}
	,getAvatar: function() {
		return this.data.avatar;
	}
	,getSex: function() {
		if(this.data.sex == null) {
			return "2";
		}
		return this.data.sex;
	}
	,isGuest: function() {
		return true;
	}
	,__class__: zygame_cmnt_data_GuestUserData
};
var zygame_cmnt_data_OnlineUserData = function() {
	this.version = 0;
	this.isSyncUserData = false;
	if(zygame_cmnt_data_OnlineUserData.shareObject == null) {
		zygame_cmnt_data_OnlineUserData.shareObject = openfl_net_SharedObject.getLocal("online.user.data");
	}
	this.updateUserData(zygame_cmnt_data_OnlineUserData.shareObject.data);
};
$hxClasses["zygame.cmnt.data.OnlineUserData"] = zygame_cmnt_data_OnlineUserData;
zygame_cmnt_data_OnlineUserData.__name__ = "zygame.cmnt.data.OnlineUserData";
zygame_cmnt_data_OnlineUserData.prototype = {
	isSyncUserData: null
	,version: null
	,clearShareObject: function() {
		var keys = Reflect.fields(zygame_cmnt_data_OnlineUserData.shareObject.data);
		var _g = 0;
		while(_g < keys.length) {
			var key = keys[_g];
			++_g;
			Reflect.deleteField(zygame_cmnt_data_OnlineUserData.shareObject.data,key);
		}
	}
	,async: function(cb,isFouceUpload) {
		if(isFouceUpload == null) {
			isFouceUpload = false;
		}
		var _gthis = this;
		this.version++;
		this.saveLocalUserData();
		if(!zygame_cmnt_Cmnt.userData.isGuest()) {
			if(zygame_cmnt_Cmnt.userData.isLogin()) {
				if(!this.isSyncUserData && !isFouceUpload) {
					zygame_cmnt_Cmnt.getUserOnlineData(function(data) {
						if(data.code == 0) {
							_gthis.isSyncUserData = true;
							var jsonData = data.obj.data;
							if(jsonData != null && jsonData.contentType == "base64") {
								jsonData = JSON.parse(haxe_crypto_Base64.decode(jsonData.data).toString());
							}
							if(jsonData != null && jsonData.version >= _gthis.version || jsonData != null && jsonData.version == null) {
								_gthis.updateUserData(jsonData);
							} else {
								_gthis.uploadUserData();
							}
							if(cb != null) {
								cb({ code : 0});
							}
						} else {
							haxe_Log.trace("UserData async error: " + data.data,{ fileName : "Source/zygame/cmnt/data/OnlineUserData.hx", lineNumber : 74, className : "zygame.cmnt.data.OnlineUserData", methodName : "async"});
							if(cb != null) {
								cb({ code : data.code});
							}
						}
					});
				} else {
					this.uploadUserData(cb);
				}
			} else if(cb != null) {
				cb({ code : 400});
			}
		} else if(cb != null) {
			cb({ code : 0});
		}
	}
	,saveLocalUserData: function() {
		var keys = Reflect.fields(this);
		var _g = 0;
		while(_g < keys.length) {
			var s = keys[_g];
			++_g;
			if(s != "isSyncUserData") {
				Reflect.setProperty(zygame_cmnt_data_OnlineUserData.shareObject.data,s,Reflect.getProperty(this,s));
			}
		}
		zygame_cmnt_data_OnlineUserData.shareObject.flush();
	}
	,uploadUserData: function(cb) {
		var obj = { };
		var keys = Reflect.fields(this);
		var _g = 0;
		while(_g < keys.length) {
			var s = keys[_g];
			++_g;
			if(s != "isSyncUserData") {
				Reflect.setProperty(obj,s,Reflect.getProperty(this,s));
			}
		}
		var base64 = haxe_crypto_Base64.encode(haxe_io_Bytes.ofString(JSON.stringify(obj)));
		var obj2 = { contentType : "base64", data : base64};
		if(!zygame_cmnt_Cmnt.userData.isGuest()) {
			zygame_cmnt_Cmnt.saveUserData(obj2,function(data) {
				if(data.code != 0) {
					if(cb != null) {
						cb(data);
					}
				}
			});
		}
	}
	,updateUserData: function(data) {
		this.setPropertyData(this,data,false);
	}
	,isDynamicProperty: function(data) {
		return !(typeof(data) == "number" && ((data | 0) === data) || typeof(data) == "number" || typeof(data) == "boolean" || typeof(data) == "string" || ((data) instanceof Array));
	}
	,setPropertyData: function(data,data2,isChild) {
		var keys = Reflect.fields(data2);
		var _g = 0;
		while(_g < keys.length) {
			var s = keys[_g];
			++_g;
			if(isChild == false && (s == "data" || s == "contentType")) {
				continue;
			}
			var setData = Reflect.getProperty(data2,s);
			if(setData == null) {
				continue;
			}
			try {
				if(!isChild && this.isDynamicProperty(setData)) {
					this.setPropertyData(Reflect.getProperty(data,s),setData,true);
				} else {
					Reflect.setProperty(data,s,setData);
				}
			} catch( _g1 ) {
				haxe_NativeStackTrace.lastError = _g1;
			}
		}
	}
	,__class__: zygame_cmnt_data_OnlineUserData
};
var zygame_cmnt_platform_XiaoMiApi = function() { };
$hxClasses["zygame.cmnt.platform.XiaoMiApi"] = zygame_cmnt_platform_XiaoMiApi;
zygame_cmnt_platform_XiaoMiApi.__name__ = "zygame.cmnt.platform.XiaoMiApi";
zygame_cmnt_platform_XiaoMiApi.createOrder = function(token,appId,gameId,secretKey,price,sname,call) {
	var map = new haxe_ds_StringMap();
	map.h["token"] = token;
	map.h["appId"] = appId;
	map.h["gameId"] = gameId;
	map.h["secretKey"] = secretKey;
	map.h["price"] = price == null ? "null" : "" + price;
	map.h["sname"] = sname;
	map.h["currency"] = "1";
	map.h["amount"] = "1";
	map.h["extend"] = "1";
	zygame_cmnt_API.getAPI("xiaomi-pay/createOrder",map,call);
};
zygame_cmnt_platform_XiaoMiApi.xiaomiCheckToken = function(token,appId,gameId,secretKey,call) {
	var map = new haxe_ds_StringMap();
	map.h["token"] = token;
	map.h["appId"] = appId;
	map.h["gameId"] = gameId;
	map.h["secretKey"] = secretKey;
	zygame_cmnt_API.getAPI("api/xiaomi/xiaomiCheckToken",map,call);
};
var zygame_cmnt_v2_Sign = function() { };
$hxClasses["zygame.cmnt.v2.Sign"] = zygame_cmnt_v2_Sign;
zygame_cmnt_v2_Sign.__name__ = "zygame.cmnt.v2.Sign";
zygame_cmnt_v2_Sign.getSignByObject = function(data) {
	var map = new haxe_ds_StringMap();
	var keys = Reflect.fields(data);
	var _g = 0;
	while(_g < keys.length) {
		var name = keys[_g];
		++_g;
		var value = Reflect.getProperty(data,name);
		map.h[name] = value;
	}
	return zygame_cmnt_v2_Sign.getSign(map);
};
zygame_cmnt_v2_Sign.getSign = function(map,key) {
	if(key == null) {
		key = "Ipkdevkh5lAhf*a%7ad7&f894398JGG7H3#jhkn";
	}
	map = haxe_ds_StringMap.createCopy(map.h);
	var keys = haxe_ds_StringMap.keysIterator(map.h);
	while(keys.hasNext()) {
		var key1 = keys.next();
		var value = map.h[key1];
		if(value == null) {
			continue;
		}
		if(typeof(value) != "string" && !(typeof(value) == "number" && ((value | 0) === value)) && typeof(value) != "number" && typeof(value) != "boolean") {
			if(Object.prototype.hasOwnProperty.call(map.h,key1)) {
				delete(map.h[key1]);
			}
			zygame_cmnt_v2_Sign.transMultilevelToSingleLevel(map,value,key1);
		} else {
			map.h[key1] = Std.string(value);
		}
	}
	var filteredReq = zygame_cmnt_v2_Sign.paraFilter(map);
	var prestr = zygame_cmnt_v2_Sign.createLinkString(filteredReq,true,false);
	prestr += zygame_cmnt_v2_Sign.QSTRING_SPLIT + haxe_crypto_Md5.encode(key);
	prestr = haxe_crypto_Md5.encode(prestr);
	return prestr;
};
zygame_cmnt_v2_Sign.paraFilter = function(map) {
	var result = new haxe_ds_StringMap();
	if(map == null) {
		return result;
	}
	var keys = haxe_ds_StringMap.keysIterator(map.h);
	while(keys.hasNext()) {
		var key = keys.next();
		var value = map.h[key];
		if(!(typeof(value) != "string" || value == null || value == "" || key.indexOf(zygame_cmnt_v2_Sign.SIGNATURE) != -1 || key.indexOf(zygame_cmnt_v2_Sign.SIGN_METHOD) != -1)) {
			result.h[key] = value;
		}
	}
	return result;
};
zygame_cmnt_v2_Sign.transMultilevelToSingleLevel = function(dataList,data,parentKey) {
	if(((data) instanceof Array)) {
		var value = JSON.stringify(data);
		dataList.h[parentKey] = value;
		return;
	}
	var keys = Reflect.fields(data);
	var _g = 0;
	while(_g < keys.length) {
		var key = keys[_g];
		++_g;
		var value = Reflect.getProperty(data,key);
		var newKey = parentKey == null ? key : parentKey + "." + key;
		if(((value) instanceof Array)) {
			var value1 = JSON.stringify(value);
			dataList.h[newKey] = value1;
		} else if(typeof(value) == "string" || typeof(value) == "number" && ((value | 0) === value) || typeof(value) == "number" || typeof(value) == "boolean") {
			dataList.h[newKey] = Std.string(value);
		} else {
			zygame_cmnt_v2_Sign.transMultilevelToSingleLevel(dataList,value,newKey);
		}
	}
};
zygame_cmnt_v2_Sign.createLinkString = function(map,sort,encode) {
	var keys = [];
	var keysI = haxe_ds_StringMap.keysIterator(map.h);
	while(keysI.hasNext()) keys.push(keysI.next());
	if(sort) {
		keys.sort(function(v,v2) {
			var _g = 0;
			var _g1 = v.length;
			while(_g < _g1) {
				var i = _g++;
				if(i > v2.length) {
					return 1;
				} else {
					var a1 = HxOverrides.cca(v,i);
					var a2 = HxOverrides.cca(v2,i);
					if(a1 > a2) {
						return 1;
					} else if(a1 < a2) {
						return -1;
					}
				}
			}
			return -1;
		});
	}
	var data = "";
	var _g = 0;
	var _g1 = keys.length;
	while(_g < _g1) {
		var i = _g++;
		var key = keys[i];
		var value = map.h[key];
		if(value == null) {
			continue;
		} else {
			var encode1 = encode;
		}
		data += key + zygame_cmnt_v2_Sign.QSTRING_EQUAL + value;
		if(i != keys.length - 1) {
			data += zygame_cmnt_v2_Sign.QSTRING_SPLIT;
		}
	}
	return data;
};
var zygame_components_base_DataProviderComponent = function() {
	zygame_components_base_Component.call(this);
};
$hxClasses["zygame.components.base.DataProviderComponent"] = zygame_components_base_DataProviderComponent;
zygame_components_base_DataProviderComponent.__name__ = "zygame.components.base.DataProviderComponent";
zygame_components_base_DataProviderComponent.__super__ = zygame_components_base_Component;
zygame_components_base_DataProviderComponent.prototype = $extend(zygame_components_base_Component.prototype,{
	_dataProvider: null
	,set_dataProvider: function(data) {
		this._dataProvider = data;
		return data;
	}
	,get_dataProvider: function() {
		return this._dataProvider;
	}
	,__class__: zygame_components_base_DataProviderComponent
	,__properties__: $extend(zygame_components_base_Component.prototype.__properties__,{set_dataProvider:"set_dataProvider",get_dataProvider:"get_dataProvider"})
});
var zygame_components_ZImage = function() {
	this.isAysn = false;
	this.isDispose = false;
	zygame_components_base_DataProviderComponent.call(this);
	this.display = new zygame_display_Image(null);
	this.addChild(this.display);
};
$hxClasses["zygame.components.ZImage"] = zygame_components_ZImage;
zygame_components_ZImage.__name__ = "zygame.components.ZImage";
zygame_components_ZImage.__super__ = zygame_components_base_DataProviderComponent;
zygame_components_ZImage.prototype = $extend(zygame_components_base_DataProviderComponent.prototype,{
	isDispose: null
	,isAysn: null
	,display: null
	,initComponents: function() {
		this.updateComponents();
	}
	,updateComponents: function() {
		var _gthis = this;
		if(this.display != null) {
			var data = zygame_components_base_DataProviderComponent.prototype.get_dataProvider.call(this);
			if(data != null) {
				if(typeof(data) == "string") {
					var path = data;
					this.isAysn = true;
					zygame_utils_AssetsUtils.loadBitmapData(path,false).onComplete(function(bitmapData) {
						if(_gthis.isDispose) {
							zygame_utils_ZGC.disposeBitmapData(bitmapData);
							return;
						}
						_gthis.display.set_bitmapData(bitmapData);
						_gthis.onBitmapDataUpdate();
					});
				} else if(((data) instanceof openfl_display_BitmapData) || ((data) instanceof zygame_utils_load_Frame)) {
					this.display.set_bitmapData(data);
				}
			}
			this.display.set_visible(data != null);
			if(this.display._setWidth) {
				this.display.set_width(this.display._width);
			}
			if(this.display._setHeight) {
				this.display.set_height(this.display._height);
			}
		}
	}
	,set_width: function(value) {
		this.display.set_width(value);
		return value;
	}
	,set_height: function(value) {
		this.display.set_height(value);
		return value;
	}
	,get_width: function() {
		return Math.abs(this.display.get_width() * this.get_scaleX());
	}
	,get_height: function() {
		return Math.abs(this.display.get_height() * this.get_scaleY());
	}
	,set_dataProvider: function(data) {
		if(zygame_components_base_DataProviderComponent.prototype.get_dataProvider.call(this) == data) {
			return data;
		}
		if(this.display.get_bitmapData() != null && this.isAysn && ((this.display.get_bitmapData()) instanceof openfl_display_BitmapData)) {
			zygame_utils_ZGC.disposeBitmapData(this.display.get_bitmapData());
		}
		zygame_components_base_DataProviderComponent.prototype.set_dataProvider.call(this,data);
		this.updateComponents();
		return data;
	}
	,get_dataProvider: function() {
		return zygame_components_base_DataProviderComponent.prototype.get_dataProvider.call(this);
	}
	,setScale9Grid: function(rect) {
		this.display.setScale9Grid(rect);
	}
	,set_shader: function(value) {
		if(this.display != null) {
			this.display.set_shader(value);
		}
		return value;
	}
	,get_shader: function() {
		if(this.display == null) {
			return null;
		}
		return this.display.get_shader();
	}
	,onBitmapDataUpdate: function() {
	}
	,destroy: function() {
		zygame_components_base_DataProviderComponent.prototype.destroy.call(this);
		this.isDispose = true;
		if(this.display.get_bitmapData() != null && this.isAysn && ((this.display.get_bitmapData()) instanceof openfl_display_BitmapData)) {
			zygame_utils_ZGC.disposeBitmapData(this.display.get_bitmapData());
		}
	}
	,set_vAlign: function(value) {
		this.display.set_vAlign(value);
		return zygame_components_base_DataProviderComponent.prototype.set_vAlign.call(this,value);
	}
	,set_hAlign: function(value) {
		this.display.set_hAlign(value);
		return zygame_components_base_DataProviderComponent.prototype.set_hAlign.call(this,value);
	}
	,alignPivot: function(v,h) {
		zygame_components_base_DataProviderComponent.prototype.alignPivot.call(this,v,h);
		this.display.alignPivot(v,h);
	}
	,__class__: zygame_components_ZImage
});
var zygame_components_ZAnimation = function() {
	this.isPlaying = false;
	this.loop = -1;
	zygame_components_ZImage.call(this);
};
$hxClasses["zygame.components.ZAnimation"] = zygame_components_ZAnimation;
zygame_components_ZAnimation.__name__ = "zygame.components.ZAnimation";
zygame_components_ZAnimation.createAnimation = function(fps,bitmaps) {
	var an = new zygame_components_ZAnimation();
	var anData = new zygame_components_data_AnimationData(fps);
	anData.addFrames(bitmaps);
	an.set_dataProvider(anData);
	return an;
};
zygame_components_ZAnimation.__super__ = zygame_components_ZImage;
zygame_components_ZAnimation.prototype = $extend(zygame_components_ZImage.prototype,{
	loop: null
	,isPlaying: null
	,currentFrame: null
	,_delayFrame: null
	,_animation: null
	,initComponents: function() {
		zygame_components_ZImage.prototype.initComponents.call(this);
	}
	,onAddToStage: function() {
		this.setFrameEvent(true);
	}
	,onRemoveToStage: function() {
		this.setFrameEvent(false);
	}
	,onFrame: function() {
		if(this._animation == null || !this.isPlaying || this.loop == 0) {
			return;
		}
		if(this._animation.update()) {
			if(this._delayFrame > 0) {
				this._delayFrame--;
				return;
			}
			this.currentFrame++;
			if(this.currentFrame >= this._animation.frames.length) {
				this.currentFrame = 0;
				if(this.loop > 0) {
					this.loop--;
				}
				if(this.hasEventListener("complete")) {
					this.dispatchEvent(new openfl_events_Event("complete"));
				}
			}
			var frameData = this._animation.getFrame(this.currentFrame);
			if(frameData != null) {
				this._delayFrame = frameData.delayFrame;
				frameData.tryCall();
				zygame_components_ZImage.prototype.set_dataProvider.call(this,frameData.bitmapData);
			}
		}
	}
	,getData: function() {
		return this.get_dataProvider();
	}
	,set_dataProvider: function(data) {
		this._animation = data;
		if(this.isPlaying) {
			this.playGo(0);
		} else {
			this.stop(0);
		}
		return data;
	}
	,get_dataProvider: function() {
		return this._animation;
	}
	,play: function(loop) {
		if(loop == null) {
			loop = 0;
		}
		if(loop != 0) {
			this.loop = loop;
		}
		this.isPlaying = true;
	}
	,stop: function(frame) {
		if(frame == null) {
			frame = -1;
		}
		this.isPlaying = false;
		if(frame >= 0) {
			this.currentFrame = frame;
		}
		if(this._animation != null) {
			if(this._animation.getFrame(this.currentFrame) != null) {
				zygame_components_ZImage.prototype.set_dataProvider.call(this,this._animation.getFrame(this.currentFrame).bitmapData);
			}
		}
	}
	,playGo: function(frame,loop) {
		if(loop == null) {
			loop = 0;
		}
		if(this._animation != null) {
			this.isPlaying = true;
			if(frame >= 0) {
				this.currentFrame = frame;
			}
			if(this._animation.getFrame(this.currentFrame) != null) {
				zygame_components_ZImage.prototype.set_dataProvider.call(this,this._animation.getFrame(this.currentFrame).bitmapData);
			}
		}
	}
	,onRemove: function() {
		zygame_components_ZImage.prototype.onRemove.call(this);
		this.setFrameEvent(false);
	}
	,__class__: zygame_components_ZAnimation
});
var zygame_components_ZBitmapLabel = function(fnt) {
	this._text = "";
	this._fnt = fnt;
	zygame_components_base_DataProviderComponent.call(this);
	this._textmap = new openfl_display_Tilemap(0,0,this._fnt != null ? this._fnt.getTileset() : null);
	this._node = new zygame_display_batch_BLabel(fnt);
	this._textmap.addTile(this._node);
	this.set_vAlign("center");
	this.set_hAlign("left");
};
$hxClasses["zygame.components.ZBitmapLabel"] = zygame_components_ZBitmapLabel;
zygame_components_ZBitmapLabel.__name__ = "zygame.components.ZBitmapLabel";
zygame_components_ZBitmapLabel.__super__ = zygame_components_base_DataProviderComponent;
zygame_components_ZBitmapLabel.prototype = $extend(zygame_components_base_DataProviderComponent.prototype,{
	_fnt: null
	,_textmap: null
	,_node: null
	,_text: null
	,initComponents: function() {
		this.addChild(this._textmap);
	}
	,clearFontSelectColor: function() {
		this._node.clearFontSelectColor();
	}
	,setFontSelectColor: function(startIndex,len,color) {
		this._node.setFontSelectColor(startIndex,len,color);
	}
	,set_wordWrap: function(value) {
		this._node.wordWrap = value;
		return value;
	}
	,get_wordWrap: function() {
		return this._node.wordWrap;
	}
	,get_vAlign: function() {
		return this._node.get_vAlign();
	}
	,get_hAlign: function() {
		return this._node.get_hAlign();
	}
	,set_vAlign: function(value) {
		this._node.set_vAlign(value);
		this.updateComponents();
		return value;
	}
	,set_hAlign: function(value) {
		this._node.set_hAlign(value);
		this.updateComponents();
		return value;
	}
	,setFontName: function(str) {
		this._node.set_fontName(str);
	}
	,setFontColor: function(color) {
		this._node.setFontColor(color);
	}
	,setFontSize: function(size) {
		this._node.setFontSize(size);
		this.updateComponents();
	}
	,updateComponents: function() {
		this._node.updateText(this._text);
	}
	,set_width: function(value) {
		this._textmap.set_width(value);
		this._node.set_width(value);
		this.updateComponents();
		return value;
	}
	,get_width: function() {
		return this._textmap.get_width();
	}
	,set_height: function(value) {
		this._textmap.set_height(value);
		this._node.set_height(value);
		this.updateComponents();
		return value;
	}
	,get_height: function() {
		return this._textmap.get_height();
	}
	,set_dataProvider: function(value) {
		if(typeof(value) == "number" && ((value | 0) === value)) {
			value = Std.string(value);
		}
		zygame_components_base_DataProviderComponent.prototype.set_dataProvider.call(this,value);
		this._text = value;
		this.updateComponents();
		return value;
	}
	,__class__: zygame_components_ZBitmapLabel
	,__properties__: $extend(zygame_components_base_DataProviderComponent.prototype.__properties__,{set_wordWrap:"set_wordWrap",get_wordWrap:"get_wordWrap"})
});
var zygame_components_ZLayoutBox = function() {
	this._componentHeight = 0;
	this._componentWidth = 0;
	zygame_display_DisplayObjectContainer.call(this);
};
$hxClasses["zygame.components.ZLayoutBox"] = zygame_components_ZLayoutBox;
zygame_components_ZLayoutBox.__name__ = "zygame.components.ZLayoutBox";
zygame_components_ZLayoutBox.__super__ = zygame_display_DisplayObjectContainer;
zygame_components_ZLayoutBox.prototype = $extend(zygame_display_DisplayObjectContainer.prototype,{
	updateLayout: function() {
	}
	,_componentWidth: null
	,_componentHeight: null
	,set_width: function(value) {
		this._componentWidth = value;
		return value;
	}
	,set_height: function(value) {
		this._componentHeight = value;
		return value;
	}
	,get_width: function() {
		if(this._componentWidth == 0 || zygame_display_DisplayObjectContainer.prototype.get_width.call(this) > this._componentWidth) {
			return zygame_display_DisplayObjectContainer.prototype.get_width.call(this);
		}
		return this._componentWidth;
	}
	,get_height: function() {
		if(this._componentHeight == 0 || zygame_display_DisplayObjectContainer.prototype.get_height.call(this) > this._componentHeight) {
			return zygame_display_DisplayObjectContainer.prototype.get_height.call(this);
		}
		return this._componentHeight;
	}
	,__class__: zygame_components_ZLayoutBox
});
var zygame_components_VBox = function() {
	this.gap = 0;
	zygame_components_ZLayoutBox.call(this);
};
$hxClasses["zygame.components.VBox"] = zygame_components_VBox;
zygame_components_VBox.__name__ = "zygame.components.VBox";
zygame_components_VBox.__super__ = zygame_components_ZLayoutBox;
zygame_components_VBox.prototype = $extend(zygame_components_ZLayoutBox.prototype,{
	gap: null
	,updateLayout: function() {
		var mathy = 0;
		var _g = 0;
		var _g1 = this.get_numChildren();
		while(_g < _g1) {
			var i = _g++;
			var tile = this.getChildAt(i);
			tile.set_y(mathy);
			mathy += tile.get_height() + this.gap;
		}
	}
	,__class__: zygame_components_VBox
});
var zygame_components_HBox = function() {
	this.gap = 0;
	zygame_components_ZLayoutBox.call(this);
};
$hxClasses["zygame.components.HBox"] = zygame_components_HBox;
zygame_components_HBox.__name__ = "zygame.components.HBox";
zygame_components_HBox.__super__ = zygame_components_ZLayoutBox;
zygame_components_HBox.prototype = $extend(zygame_components_ZLayoutBox.prototype,{
	gap: null
	,updateLayout: function() {
		var mathx = 0;
		var _g = 0;
		var _g1 = this.get_numChildren();
		while(_g < _g1) {
			var i = _g++;
			var tile = this.getChildAt(i);
			tile.set_x(mathx);
			mathx += tile.get_width() + this.gap;
		}
	}
	,__class__: zygame_components_HBox
});
var zygame_components_ZBuilder = function() { };
$hxClasses["zygame.components.ZBuilder"] = zygame_components_ZBuilder;
zygame_components_ZBuilder.__name__ = "zygame.components.ZBuilder";
zygame_components_ZBuilder.init = function() {
	zygame_components_ZBuilder.classMaps = new haxe_ds_StringMap();
	zygame_components_ZBuilder.parsingMaps = new haxe_ds_StringMap();
	zygame_components_ZBuilder.createMaps = new haxe_ds_StringMap();
	zygame_components_ZBuilder.addMaps = new haxe_ds_StringMap();
	zygame_components_ZBuilder.endMaps = new haxe_ds_StringMap();
	zygame_components_ZBuilder.defineMaps = new haxe_ds_StringMap();
	zygame_components_ZBuilder.bind(zygame_display_batch_VBBox);
	zygame_components_ZBuilder.bind(zygame_display_batch_HBBox);
	zygame_components_ZBuilder.bind(zygame_components_ZAnimation);
	zygame_components_ZBuilder.bind(zygame_components_ZBitmapLabel);
	zygame_components_ZBuilder.bind(zygame_components_ZBox);
	zygame_components_ZBuilder.bind(zygame_components_ZButton);
	zygame_components_ZBuilder.bind(zygame_components_ZImage);
	zygame_components_ZBuilder.bind(zygame_components_ZInputLabel);
	zygame_components_ZBuilder.bind(zygame_components_ZLabel);
	zygame_components_ZBuilder.bind(zygame_components_ZList);
	zygame_components_ZBuilder.bind(zygame_components_ZQuad);
	zygame_components_ZBuilder.bind(zygame_components_ZScroll);
	zygame_components_ZBuilder.bind(zygame_display_batch_TouchImageBatchsContainer);
	zygame_components_ZBuilder.bind(zygame_display_batch_BButton);
	zygame_components_ZBuilder.bind(zygame_display_batch_BDisplayObject);
	zygame_components_ZBuilder.bind(zygame_display_batch_BDisplayObjectContainer);
	zygame_components_ZBuilder.bind(zygame_display_batch_BImage);
	zygame_components_ZBuilder.bind(zygame_display_batch_BLabel);
	zygame_components_ZBuilder.bind(zygame_display_batch_BScale9Image);
	zygame_components_ZBuilder.bind(zygame_display_batch_BSprite);
	zygame_components_ZBuilder.bind(zygame_display_batch_BTouchSprite);
	zygame_components_ZBuilder.bind(zygame_display_batch_ImageBatchs);
	zygame_components_ZBuilder.bind(zygame_display_batch_BBox);
	zygame_components_ZBuilder.bind(zygame_display_batch_BAnimation);
	zygame_components_ZBuilder.bind(zygame_mini_MiniEngineScene);
	zygame_components_ZBuilder.bind(zygame_display_batch_BScale9Button);
	zygame_components_ZBuilder.bind(zygame_components_VBox);
	zygame_components_ZBuilder.bind(zygame_components_HBox);
	zygame_components_ZBuilder.bind(zygame_script_ZHaxe);
	zygame_components_ZBuilder.bind(zygame_shader_engine_ZShader);
	zygame_components_ZBuilder.bind(zygame_script_ZInt);
	zygame_components_ZBuilder.bind(zygame_script_ZBool);
	zygame_components_ZBuilder.bind(zygame_script_ZString);
	zygame_components_ZBuilder.bind(zygame_script_ZFloat);
	zygame_components_ZBuilder.bind(zygame_script_ZArray);
	zygame_components_ZBuilder.bind(zygame_script_ZObject);
	zygame_components_ZBuilder.bind(zygame_components_ZAnimation);
	zygame_components_ZBuilder.bind(zygame_components_ZTween);
	zygame_components_ZBuilder.bind(zygame_components_ZBitmapLabel);
	zygame_components_ZBuilder.bind(zygame_components_ZSpine);
	zygame_components_ZBuilder.bindParsing(zygame_components_ZImage,"src",function(ui,name,value) {
		var values = value.split(":");
		if(values.length >= 3) {
			(js_Boot.__cast(zygame_components_ZBuilder.getBaseTextureAtlas(values[0]) , zygame_utils_load_TextureAtlas)).bindScale9(values[1],values[2]);
			values.pop();
			value = values.join(":");
		}
		if(value.indexOf("http") == 0 || zygame_components_ZBuilder.getBaseBitmapData(ui,name,value) == null) {
			(js_Boot.__cast(ui , zygame_components_ZImage)).set_dataProvider(value);
		} else {
			(js_Boot.__cast(ui , zygame_components_ZImage)).set_dataProvider(zygame_components_ZBuilder.getBaseBitmapData(ui,name,value));
		}
	});
	zygame_components_ZBuilder.bindParsing(zygame_display_batch_BImage,"src",function(ui,name,value) {
		(js_Boot.__cast(ui , zygame_display_batch_BImage)).setFrame(zygame_components_ZBuilder.getBaseBitmapData(ui,name,value));
	});
	zygame_components_ZBuilder.bindParsing(zygame_display_batch_BScale9Image,"src",function(ui,name,value) {
		var values = value.split(":");
		if(values.length >= 3) {
			(js_Boot.__cast(zygame_components_ZBuilder.getBaseTextureAtlas(values[0]) , zygame_utils_load_TextureAtlas)).bindScale9(values[1],values[2]);
		}
		var bitmap = zygame_components_ZBuilder.getBaseBitmapData(ui,name,value);
		(js_Boot.__cast(ui , zygame_display_batch_BScale9Image)).setFrame(bitmap);
	});
	zygame_components_ZBuilder.bindParsing(zygame_display_batch_BButton,"src",function(ui,name,value) {
		var arr = value.split(":");
		(js_Boot.__cast(ui , zygame_display_batch_BButton)).skin = zygame_display_batch_BButton.createButtonFrameSkin(zygame_components_ZBuilder.getBaseTextureAtlas(arr[0]),zygame_components_ZBuilder.getBaseBitmapData(ui,name,value));
		(js_Boot.__cast(ui , zygame_display_batch_BButton)).updateComponents();
	});
	zygame_components_ZBuilder.bindParsing(zygame_components_ZButton,"src",function(ui,name,value) {
		var values = value.split(":");
		if(values.length >= 3) {
			(js_Boot.__cast(zygame_components_ZBuilder.getBaseTextureAtlas(values[0]) , zygame_utils_load_TextureAtlas)).bindScale9(values[1],values[2]);
		}
		(js_Boot.__cast(ui , zygame_components_ZButton)).set_skin(zygame_components_ZButton.createSkin(zygame_components_ZBuilder.getBaseBitmapData(ui,name,value)));
		(js_Boot.__cast(ui , zygame_components_ZButton)).updateComponents();
	});
	zygame_components_ZBuilder.bindParsing(zygame_components_ZAnimation,"src",function(ui,name,value) {
		var anData = (js_Boot.__cast(ui , zygame_components_ZAnimation)).get_dataProvider();
		if(anData == null) {
			anData = new zygame_components_data_AnimationData(12);
		}
		var array = value.split(",");
		var _g_current = 0;
		var _g_array = array;
		while(_g_current < _g_array.length) {
			var _g1_value = _g_array[_g_current];
			var _g1_key = _g_current++;
			var key = _g1_key;
			var value2 = _g1_value;
			if(value2.indexOf(":") != -1) {
				var valueArray = value2.split(":");
				var textureAtlas = zygame_components_ZBuilder.getBaseTextureAtlas(valueArray[0]);
				anData.addFrame(textureAtlas.getBitmapDataFrame(valueArray[1]));
			} else {
				anData.addFrame(zygame_components_ZBuilder.getBaseBitmapData(ui,name,value2));
			}
		}
		(js_Boot.__cast(ui , zygame_components_ZAnimation)).set_dataProvider(anData);
	});
	zygame_components_ZBuilder.bindParsing(zygame_components_ZAnimation,"loop",function(ui,name,value) {
		(js_Boot.__cast(ui , zygame_components_ZAnimation)).loop = Std.parseInt(value);
	});
	zygame_components_ZBuilder.bindParsing(zygame_components_ZAnimation,"play",function(ui,name,value) {
		if(value == "true") {
			(js_Boot.__cast(ui , zygame_components_ZAnimation)).play((js_Boot.__cast(ui , zygame_components_ZAnimation)).loop);
		} else {
			(js_Boot.__cast(ui , zygame_components_ZAnimation)).stop();
		}
	});
	zygame_components_ZBuilder.bindParsing(zygame_components_ZAnimation,"fps",function(ui,name,value) {
		var anData = (js_Boot.__cast(ui , zygame_components_ZAnimation)).get_dataProvider();
		if(anData == null) {
			anData = new zygame_components_data_AnimationData(12);
			(js_Boot.__cast(ui , zygame_components_ZAnimation)).set_dataProvider(anData);
		}
		anData.fps.set_fps(Std.parseInt(value));
	});
	zygame_components_ZBuilder.bindParsing(zygame_display_batch_BAnimation,"src",function(ui,name,value) {
		var anData = (js_Boot.__cast(ui , zygame_display_batch_BAnimation)).get_dataProvider();
		if(anData == null) {
			anData = new zygame_components_data_AnimationData(12);
		}
		if(value.indexOf(",") != -1) {
			var array = value.split(",");
			var _g_current = 0;
			var _g_array = array;
			while(_g_current < _g_array.length) {
				var _g1_value = _g_array[_g_current];
				var _g1_key = _g_current++;
				var key = _g1_key;
				var value2 = _g1_value;
				if(value2.indexOf(":") != -1) {
					var valueArray = value2.split(":");
					var textureAtlas = zygame_components_ZBuilder.getBaseTextureAtlas(valueArray[0]);
					anData.addFrame(textureAtlas.getBitmapDataFrame(valueArray[1]));
				}
			}
		} else {
			var array = value.split(":");
			var textureAtlas = zygame_components_ZBuilder.getBaseTextureAtlas(array[0]);
			anData.addFrames(textureAtlas.getBitmapDataFrames(array[1]));
		}
		(js_Boot.__cast(ui , zygame_display_batch_BAnimation)).set_dataProvider(anData);
	});
	zygame_components_ZBuilder.bindParsing(zygame_display_batch_BAnimation,"play",function(ui,name,value) {
		if(value == "true") {
			(js_Boot.__cast(ui , zygame_display_batch_BAnimation)).play((js_Boot.__cast(ui , zygame_display_batch_BAnimation)).loop);
		} else {
			(js_Boot.__cast(ui , zygame_display_batch_BAnimation)).stop();
		}
	});
	zygame_components_ZBuilder.bindParsing(zygame_display_batch_BAnimation,"loop",function(ui,name,value) {
		(js_Boot.__cast(ui , zygame_display_batch_BAnimation)).loop = Std.parseInt(value);
	});
	zygame_components_ZBuilder.bindParsing(zygame_display_batch_BAnimation,"fps",function(ui,name,value) {
		var anData = (js_Boot.__cast(ui , zygame_display_batch_BAnimation)).get_dataProvider();
		if(anData == null) {
			anData = new zygame_components_data_AnimationData(12);
			(js_Boot.__cast(ui , zygame_display_batch_BAnimation)).set_dataProvider(anData);
		}
		anData.fps.set_fps(Std.parseInt(value));
	});
	zygame_components_ZBuilder.bindParsing(zygame_display_batch_BScale9Button,"src",function(ui,name,value) {
		var arr = value.split(":");
		if(arr.length >= 3) {
			(js_Boot.__cast(zygame_components_ZBuilder.getBaseTextureAtlas(arr[0]) , zygame_utils_load_TextureAtlas)).bindScale9(arr[1],arr[2]);
		}
		(js_Boot.__cast(ui , zygame_display_batch_BScale9Button)).skin = zygame_display_batch_BButton.createButtonFrameSkin(zygame_components_ZBuilder.getBaseTextureAtlas(arr[0]),zygame_components_ZBuilder.getBaseBitmapData(ui,name,value));
		(js_Boot.__cast(ui , zygame_display_batch_BScale9Button)).updateComponents();
	});
	zygame_components_ZBuilder.bindParsing(zygame_script_ZHaxe,"args",function(ui,name,value) {
		(js_Boot.__cast(ui , zygame_script_ZHaxe)).argsName = value.split(",");
	});
	zygame_components_ZBuilder.bindParsing(zygame_display_batch_BScale9Button,"content",function(ui,name,value) {
		(js_Boot.__cast(ui , zygame_display_batch_BScale9Button)).setContent(zygame_components_ZBuilder.getBaseBitmapData(ui,name,value));
	});
	zygame_components_ZBuilder.bindParsing(zygame_components_ZButton,"content",function(ui,name,value) {
		(js_Boot.__cast(ui , zygame_components_ZButton)).setContent(zygame_components_ZBuilder.getBaseBitmapData(ui,name,value));
	});
	zygame_components_ZBuilder.bindParsing(zygame_display_batch_BButton,"content",function(ui,name,value) {
		(js_Boot.__cast(ui , zygame_display_batch_BButton)).setContent(zygame_components_ZBuilder.getBaseBitmapData(ui,name,value));
	});
	zygame_components_ZBuilder.bindParsing(zygame_display_batch_BLabel,"text",function(ui,name,value) {
		(js_Boot.__cast(ui , zygame_display_batch_BLabel)).updateText(value);
	});
	zygame_components_ZBuilder.bindParsing(zygame_components_ZButton,"text",function(ui,name,value) {
		zygame_utils_Lib.nextFrameCall(($_=(js_Boot.__cast(ui , zygame_components_ZButton)),$bind($_,$_.setText)),[value]);
	});
	zygame_components_ZBuilder.bindParsing(zygame_components_ZLabel,"text",function(ui,name,value) {
		(js_Boot.__cast(ui , zygame_components_ZLabel)).set_dataProvider(value);
	});
	zygame_components_ZBuilder.bindParsing(zygame_components_ZButton,"size",function(ui,name,value) {
		zygame_utils_Lib.nextFrameCall(($_=(js_Boot.__cast(ui , zygame_components_ZButton)),$bind($_,$_.setTextSize)),[Std.parseInt(value)]);
	});
	zygame_components_ZBuilder.bindParsing(zygame_display_batch_BLabel,"size",function(ui,name,value) {
		(js_Boot.__cast(ui , zygame_display_batch_BLabel)).setFontSize(Std.parseInt(value));
	});
	zygame_components_ZBuilder.bindParsing(zygame_display_batch_BLabel,"color",function(ui,name,value) {
		(js_Boot.__cast(ui , zygame_display_batch_BLabel)).setFontColor(Std.parseInt(value));
	});
	zygame_components_ZBuilder.bindParsing(zygame_components_ZLabel,"size",function(ui,name,value) {
		(js_Boot.__cast(ui , zygame_components_ZLabel)).setFontSize(Std.parseInt(value));
	});
	zygame_components_ZBuilder.bindParsing(zygame_components_ZInputLabel,"size",function(ui,name,value) {
		(js_Boot.__cast(ui , zygame_components_ZInputLabel)).setFontSize(Std.parseInt(value));
	});
	zygame_components_ZBuilder.bindParsing(zygame_components_ZInputLabel,"color",function(ui,name,value) {
		(js_Boot.__cast(ui , zygame_components_ZInputLabel)).setFontColor(Std.parseInt(value));
	});
	zygame_components_ZBuilder.bindParsing(zygame_components_ZLabel,"color",function(ui,name,value) {
		(js_Boot.__cast(ui , zygame_components_ZLabel)).setFontColor(Std.parseInt(value));
	});
	zygame_components_ZBuilder.bindParsing(zygame_components_ZBitmapLabel,"color",function(ui,name,value) {
		(js_Boot.__cast(ui , zygame_components_ZBitmapLabel)).setFontColor(Std.parseInt(value));
	});
	zygame_components_ZBuilder.bindParsing(zygame_components_ZBitmapLabel,"fontName",function(ui,name,value) {
		(js_Boot.__cast(ui , zygame_components_ZBitmapLabel)).setFontName(value);
	});
	zygame_components_ZBuilder.bindParsing(zygame_components_ZBitmapLabel,"size",function(ui,name,value) {
		(js_Boot.__cast(ui , zygame_components_ZBitmapLabel)).setFontSize(Std.parseInt(value));
	});
	zygame_components_ZBuilder.bindParsing(zygame_components_ZBitmapLabel,"text",function(ui,name,value) {
		(js_Boot.__cast(ui , zygame_components_ZBitmapLabel)).set_dataProvider(value);
	});
	zygame_components_ZBuilder.bindParsing(zygame_components_ZInputLabel,"text",function(ui,name,value) {
		(js_Boot.__cast(ui , zygame_components_ZInputLabel)).set_dataProvider(value);
	});
	zygame_components_ZBuilder.bindParsing(zygame_components_ZBitmapLabel,"color",function(ui,name,value) {
		(js_Boot.__cast(ui , zygame_components_ZBitmapLabel)).setFontColor(Std.parseInt(value));
	});
	zygame_components_ZBuilder.bindParsing(zygame_components_ZBitmapLabel,"size",function(ui,name,value) {
		(js_Boot.__cast(ui , zygame_components_ZBitmapLabel)).setFontSize(Std.parseInt(value));
	});
	zygame_components_ZBuilder.bindParsing(zygame_components_ZBitmapLabel,"text",function(ui,name,value) {
		(js_Boot.__cast(ui , zygame_components_ZBitmapLabel)).set_dataProvider(value);
	});
	zygame_components_ZBuilder.bindParsing(zygame_components_ZList,"src",function(ui,name,value) {
		(js_Boot.__cast(ui , zygame_components_ZList)).createImageBatch(zygame_components_ZBuilder.getBaseTextureAtlas(value));
	});
	zygame_components_ZBuilder.bindParsing(zygame_components_ZList,"itemRenderType",function(ui,name,value) {
		(js_Boot.__cast(ui , zygame_components_ZList)).itemRenderType = $hxClasses[value];
	});
	zygame_components_ZBuilder.bindCreate(zygame_components_ZSpine,function(xml) {
		var target = xml.get("src");
		if(target != null) {
			var data = target.split(":");
			return [data[0],data[1]];
		}
		return [];
	});
	zygame_components_ZBuilder.bindCreate(zygame_components_ZBitmapLabel,function(xml) {
		var a = zygame_components_ZBuilder.getBaseTextureAtlas(xml.get("src"));
		return [a];
	});
	zygame_components_ZBuilder.bindCreate(zygame_components_ZBitmapLabel,function(xml) {
		var a = zygame_components_ZBuilder.getBaseTextureAtlas(xml.get("src"));
		return [a];
	});
	zygame_components_ZBuilder.bindCreate(zygame_display_batch_TouchImageBatchsContainer,function(xml) {
		var a = zygame_components_ZBuilder.getBaseTextureAtlas(xml.get("src"));
		return [a];
	});
	zygame_components_ZBuilder.bindCreate(zygame_display_batch_ImageBatchs,function(xml) {
		var a = zygame_components_ZBuilder.getBaseTextureAtlas(xml.get("src"));
		return [a];
	});
	zygame_components_ZBuilder.bindCreate(zygame_display_batch_BLabel,function(xml) {
		var a = zygame_components_ZBuilder.getBaseTextureAtlas(xml.get("src"));
		return [a];
	});
	zygame_components_ZBuilder.bindCreate(zygame_script_ZHaxe,function(xml) {
		if(xml.nodeType != Xml.Document && xml.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
		}
		var _this = xml.children[0];
		if(_this.nodeType == Xml.Document || _this.nodeType == Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, unexpected " + (_this.nodeType == null ? "null" : XmlType.toString(_this.nodeType)));
		}
		return [_this.nodeValue];
	});
	zygame_components_ZBuilder.bindCreate(zygame_shader_engine_ZShader,function(xml) {
		return [xml];
	});
	zygame_components_ZBuilder.bindCreate(zygame_script_ZInt,function(xml) {
		return [Std.parseInt(xml.get("value"))];
	});
	zygame_components_ZBuilder.bindCreate(zygame_script_ZFloat,function(xml) {
		return [parseFloat(xml.get("value"))];
	});
	zygame_components_ZBuilder.bindCreate(zygame_script_ZBool,function(xml) {
		return [xml.get("value") == "true"];
	});
	zygame_components_ZBuilder.bindCreate(zygame_script_ZString,function(xml) {
		return [xml.get("value")];
	});
	zygame_components_ZBuilder.bindCreate(zygame_components_ZTween,function(xml) {
		return [xml];
	});
	zygame_components_ZBuilder.bindAdd(zygame_display_batch_TouchImageBatchsContainer,function(obj,parent,xml) {
		(js_Boot.__cast(parent , zygame_display_batch_TouchImageBatchsContainer)).getBatchs().addChild(obj);
	});
	zygame_components_ZBuilder.bindAdd(zygame_display_batch_BButton,function(obj,parent,xml) {
		(js_Boot.__cast(parent , zygame_display_batch_BButton)).box.addChild(obj);
	});
	zygame_components_ZBuilder.bindAdd(zygame_display_batch_BScale9Button,function(obj,parent,xml) {
		(js_Boot.__cast(parent , zygame_display_batch_BScale9Button)).box.addChild(obj);
	});
	zygame_components_ZBuilder.bindAdd(zygame_components_ZButton,function(obj,parent,xml) {
		(js_Boot.__cast(parent , zygame_components_ZButton)).box.addChild(obj);
	});
	zygame_components_ZBuilder.bindAdd(zygame_display_batch_VBBox,function(obj,parent,xml) {
		(js_Boot.__cast(parent , zygame_display_batch_VBBox)).addLayout(obj);
	});
	zygame_components_ZBuilder.bindAdd(zygame_display_batch_HBBox,function(obj,parent,xml) {
		(js_Boot.__cast(parent , zygame_display_batch_HBBox)).addLayout(obj);
	});
	zygame_components_ZBuilder.bindEnd(zygame_display_batch_VBBox,function(obj) {
		(js_Boot.__cast(obj , zygame_display_batch_VBBox)).updateLayout();
	});
	zygame_components_ZBuilder.bindEnd(zygame_display_batch_HBBox,function(obj) {
		(js_Boot.__cast(obj , zygame_display_batch_HBBox)).updateLayout();
	});
	zygame_components_ZBuilder.bindEnd(zygame_components_VBox,function(obj) {
		(js_Boot.__cast(obj , zygame_components_VBox)).updateLayout();
	});
	zygame_components_ZBuilder.bindEnd(zygame_components_HBox,function(obj) {
		(js_Boot.__cast(obj , zygame_components_HBox)).updateLayout();
	});
};
zygame_components_ZBuilder.getDynamicTextureAtlas = function(value) {
	var _g = 0;
	var _g1 = zygame_components_ZBuilder.baseAssetsList;
	while(_g < _g1.length) {
		var assets = _g1[_g];
		++_g;
		var atlas = assets.getDynamicTextureAtlas(value);
		if(atlas != null) {
			return atlas;
		}
	}
	return null;
};
zygame_components_ZBuilder.getBaseObject = function(value) {
	var _g = 0;
	var _g1 = zygame_components_ZBuilder.baseAssetsList;
	while(_g < _g1.length) {
		var assets = _g1[_g];
		++_g;
		var data = assets.getObject(value);
		if(data != null) {
			return data;
		}
	}
	return null;
};
zygame_components_ZBuilder.createSpineSpriteSkeleton = function(atalsName,skeletonJsonName) {
	var atlas = zygame_components_ZBuilder.getBaseTextureAtlas(atalsName);
	if(atlas == null) {
		return null;
	}
	return atlas.buildSpriteSkeleton(skeletonJsonName,JSON.stringify(zygame_components_ZBuilder.getBaseObject(skeletonJsonName)));
};
zygame_components_ZBuilder.getBaseTextureAtlas = function(value) {
	var _g = 0;
	var _g1 = zygame_components_ZBuilder.baseAssetsList;
	while(_g < _g1.length) {
		var assets = _g1[_g];
		++_g;
		var atlas = assets.getTextureAtlas(value);
		if(atlas != null) {
			return atlas;
		}
	}
	var atlas = zygame_components_ZBuilder.getFntData(value);
	if(atlas == null) {
		atlas = zygame_components_ZBuilder.getTextAtlas(value);
	}
	if(atlas == null) {
		atlas = zygame_components_ZBuilder.getDynamicTextureAtlas(value);
	}
	if(atlas == null) {
		atlas = zygame_components_ZBuilder.getSpineAtlas(value);
	}
	if(atlas == null && zygame_components_ZBuilder.useDefault) {
		return zygame_components_ZBuilder.defalutAssets.getTextureAtlas("ui");
	}
	return atlas;
};
zygame_components_ZBuilder.getFntData = function(value) {
	var _g = 0;
	var _g1 = zygame_components_ZBuilder.baseAssetsList;
	while(_g < _g1.length) {
		var assets = _g1[_g];
		++_g;
		var atlas = assets.getFntData(value);
		if(atlas != null) {
			return atlas;
		}
	}
	return null;
};
zygame_components_ZBuilder.getTextAtlas = function(value) {
	var _g = 0;
	var _g1 = zygame_components_ZBuilder.baseAssetsList;
	while(_g < _g1.length) {
		var assets = _g1[_g];
		++_g;
		var atlas = assets.getTextAtlas(value);
		if(atlas != null) {
			return atlas;
		}
	}
	return null;
};
zygame_components_ZBuilder.getSpineAtlas = function(value) {
	var _g = 0;
	var _g1 = zygame_components_ZBuilder.baseAssetsList;
	while(_g < _g1.length) {
		var assets = _g1[_g];
		++_g;
		var atlas = assets.getSpineTextureAlats(value);
		if(atlas != null) {
			return atlas;
		}
	}
	return null;
};
zygame_components_ZBuilder.getXml = function(value) {
	var _g = 0;
	var _g1 = zygame_components_ZBuilder.baseAssetsList;
	while(_g < _g1.length) {
		var assets = _g1[_g];
		++_g;
		var xml = assets.getXml(value);
		if(xml != null) {
			return xml;
		}
	}
	return null;
};
zygame_components_ZBuilder.getBaseBitmapData = function(ui,name,value) {
	var bitmap = null;
	var _g = 0;
	var _g1 = zygame_components_ZBuilder.baseAssetsList;
	while(_g < _g1.length) {
		var assets = _g1[_g];
		++_g;
		bitmap = assets.getBitmapData(value);
		if(bitmap != null) {
			break;
		}
	}
	if(bitmap == null && zygame_components_ZBuilder.useDefault) {
		if(((ui) instanceof zygame_display_batch_BToggleButton) || ((ui) instanceof zygame_components_base_ToggleButton)) {
			return zygame_components_ZBuilder.defalutAssets.getBitmapData("ui:button");
		}
		return zygame_components_ZBuilder.defalutAssets.getBitmapData("ui:other");
	}
	return bitmap;
};
zygame_components_ZBuilder.defineValue = function(defineName,defineValue) {
	zygame_components_ZBuilder.defineMaps.h[defineName] = defineValue;
};
zygame_components_ZBuilder.removeDefineValue = function(defineName) {
	var _this = zygame_components_ZBuilder.defineMaps;
	if(Object.prototype.hasOwnProperty.call(_this.h,defineName)) {
		delete(_this.h[defineName]);
	}
};
zygame_components_ZBuilder.bindAssets = function(assets) {
	if(assets == null) {
		return;
	}
	if(zygame_components_ZBuilder.baseAssetsList.indexOf(assets) == -1) {
		zygame_components_ZBuilder.baseAssetsList.push(assets);
	}
};
zygame_components_ZBuilder.unbindAssets = function(assets) {
	HxOverrides.remove(zygame_components_ZBuilder.baseAssetsList,assets);
};
zygame_components_ZBuilder.getBaseAssets = function() {
	return null;
};
zygame_components_ZBuilder.bind = function(obj) {
	var className = null;
	if(typeof(obj) == "string") {
		className = obj;
	} else {
		className = obj.__name__;
	}
	className = HxOverrides.substr(className,className.lastIndexOf(".") + 1,null);
	var this1 = zygame_components_ZBuilder.classMaps;
	var value = typeof(obj) == "string" ? $hxClasses[obj] : obj;
	this1.h[className] = value;
};
zygame_components_ZBuilder.bindCreate = function(obj,fun) {
	var className = obj.__name__;
	className = HxOverrides.substr(className,className.lastIndexOf(".") + 1,null);
	zygame_components_ZBuilder.createMaps.h[className] = fun;
};
zygame_components_ZBuilder.bindEnd = function(obj,fun) {
	var className = obj.__name__;
	className = HxOverrides.substr(className,className.lastIndexOf(".") + 1,null);
	zygame_components_ZBuilder.endMaps.h[className] = fun;
};
zygame_components_ZBuilder.bindAdd = function(obj,fun) {
	var className = obj.__name__;
	className = HxOverrides.substr(className,className.lastIndexOf(".") + 1,null);
	zygame_components_ZBuilder.addMaps.h[className] = fun;
};
zygame_components_ZBuilder.bindParsing = function(obj,key,fun) {
	var className = null;
	if(typeof(obj) == "string") {
		className = obj;
	} else {
		className = obj.__name__;
	}
	className = HxOverrides.substr(className,className.lastIndexOf(".") + 1,null);
	zygame_components_ZBuilder.parsingMaps.h[className + "." + key] = fun;
};
zygame_components_ZBuilder.createAssetsBuilder = function(xmlPath,parent) {
	return new zygame_components_AssetsBuilder(xmlPath,parent);
};
zygame_components_ZBuilder.buildXmlUiFind = function(xmlfileName,parent) {
	var xml = zygame_components_ZBuilder.getXml(xmlfileName);
	if(xml == null) {
		throw haxe_Exception.thrown(xmlfileName + "配置不存在");
	}
	var builder = new zygame_components_Builder();
	if(xml.nodeType != Xml.Document && xml.nodeType != Xml.Element) {
		throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
	}
	zygame_components_ZBuilder.buildui(xml.children[0],parent,builder);
	builder.bindBuilder();
	if(js_Boot.__implements(builder.display,zygame_components_BuilderRootDisplay)) {
		var root = js_Boot.__cast(builder.display , zygame_components_BuilderRootDisplay);
		root.builder = builder;
		root.onInitBuilder();
	}
	return builder;
};
zygame_components_ZBuilder.buildXmlUI = function(assets,xmlfileName,parent) {
	var isInAssets = zygame_components_ZBuilder.baseAssetsList.indexOf(assets) != -1;
	if(!isInAssets) {
		zygame_components_ZBuilder.bindAssets(assets);
	}
	var xml = assets.getXml(xmlfileName);
	var builder = new zygame_components_Builder();
	if(xml.nodeType != Xml.Document && xml.nodeType != Xml.Element) {
		throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
	}
	zygame_components_ZBuilder.buildui(xml.children[0],parent,builder);
	builder.bindBuilder();
	if(js_Boot.__implements(builder.display,zygame_components_BuilderRootDisplay)) {
		var root = js_Boot.__cast(builder.display , zygame_components_BuilderRootDisplay);
		root.builder = builder;
		root.onInitBuilder();
	}
	if(!isInAssets) {
		zygame_components_ZBuilder.unbindAssets(assets);
	}
	return builder;
};
zygame_components_ZBuilder.build = function(xml,parent,superInit,defalutArgs) {
	var builder = new zygame_components_Builder();
	if(xml.nodeType != Xml.Document && xml.nodeType != Xml.Element) {
		throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
	}
	zygame_components_ZBuilder.buildui(xml.children[0],parent,builder,superInit,defalutArgs);
	builder.bindBuilder();
	if(js_Boot.__implements(builder.display,zygame_components_BuilderRootDisplay)) {
		var root = js_Boot.__cast(builder.display , zygame_components_BuilderRootDisplay);
		root.builder = builder;
		root.onInitBuilder();
	}
	return builder;
};
zygame_components_ZBuilder.buildui = function(xml,parent,builder,superInit,defalutArgs) {
	if(defalutArgs == null) {
		defalutArgs = [];
	}
	if(xml.exists("if")) {
		var isExists = false;
		var array = xml.get("if").split(" ");
		var _g = 0;
		while(_g < array.length) {
			var ifstr = array[_g];
			++_g;
			if(Object.prototype.hasOwnProperty.call(zygame_components_ZBuilder.defineMaps.h,ifstr)) {
				isExists = true;
				break;
			}
		}
		if(!isExists) {
			return null;
		}
	}
	if(xml.exists("unless")) {
		var isExists = false;
		var array = xml.get("unless").split(" ");
		var _g = 0;
		while(_g < array.length) {
			var ifstr = array[_g];
			++_g;
			if(!Object.prototype.hasOwnProperty.call(zygame_components_ZBuilder.defineMaps.h,ifstr)) {
				isExists = true;
				break;
			}
		}
		if(!isExists) {
			return null;
		}
	}
	if(xml.nodeType != Xml.Element) {
		throw haxe_Exception.thrown("Bad node type, expected Element but found " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
	}
	var className = xml.nodeName;
	var ui = null;
	var base = null;
	if(!Object.prototype.hasOwnProperty.call(zygame_components_ZBuilder.classMaps.h,className)) {
		base = $hxClasses[className];
	} else {
		base = zygame_components_ZBuilder.classMaps.h[className];
	}
	if(base == null) {
		var xml1 = zygame_components_ZBuilder.getXml(className);
		if(xml1 != null) {
			if(xml1.nodeType != Xml.Document && xml1.nodeType != Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (xml1.nodeType == null ? "null" : XmlType.toString(xml1.nodeType)));
			}
			ui = zygame_components_ZBuilder.buildui(xml1.children[0],parent,builder);
		} else {
			throw haxe_Exception.thrown("Class name " + className + " is not define xml assets!");
		}
	} else {
		ui = Type.createInstance(base,Object.prototype.hasOwnProperty.call(zygame_components_ZBuilder.createMaps.h,className) ? zygame_components_ZBuilder.createMaps.h[className](xml) : defalutArgs);
	}
	if(!((ui) instanceof openfl_display_DisplayObject) && !((ui) instanceof openfl_display_Tile)) {
		if(((ui) instanceof zygame_shader_engine_ZShader)) {
			try {
				if(((parent) instanceof openfl_display_DisplayObject)) {
					(js_Boot.__cast(parent , openfl_display_DisplayObject)).set_shader(ui);
				} else if(((parent) instanceof openfl_display_Tile)) {
					(js_Boot.__cast(parent , openfl_display_Tile)).set_shader(ui);
				}
			} catch( _g ) {
				var e = haxe_Exception.caught(_g);
				var tmp = haxe_Log.trace;
				var tmp1 = e.get_message() + "\n";
				var tmp2 = e.get_stack();
				tmp("异常：",{ fileName : "Source/zygame/components/ZBuilder.hx", lineNumber : 766, className : "zygame.components.ZBuilder", methodName : "buildui", customParams : [tmp1 + (tmp2 == null ? "null" : haxe_CallStack.toString(tmp2))]});
				if(((parent) instanceof openfl_display_DisplayObject)) {
					(js_Boot.__cast(parent , openfl_display_DisplayObject)).set_shader(null);
				} else if(((parent) instanceof openfl_display_Tile)) {
					(js_Boot.__cast(parent , openfl_display_Tile)).set_shader(null);
				}
			}
		}
		var idname = xml.get("id");
		if(idname != null) {
			builder.ids.h[idname] = ui;
			if(((ui) instanceof zygame_script_ZHaxe)) {
				if(idname == "super") {
					(js_Boot.__cast(ui , zygame_script_ZHaxe)).bindBuilder(builder);
					(js_Boot.__cast(ui , zygame_script_ZHaxe)).call();
				} else if(xml.exists("args")) {
					(js_Boot.__cast(ui , zygame_script_ZHaxe)).argsName = xml.get("args").split(",");
				}
			} else if(((ui) instanceof zygame_components_ZTween)) {
				(js_Boot.__cast(ui , zygame_components_ZTween)).bindBuilder(builder);
			}
		} else {
			throw haxe_Exception.thrown("Create " + className + " not define id.");
		}
		if(builder.display == null) {
			builder.display = ui;
			var items = xml.elements();
			while(items.hasNext()) {
				var itemxml = items.next();
				zygame_components_ZBuilder.buildui(itemxml,ui,builder);
			}
		}
		return ui;
	}
	if(builder.display == null) {
		builder.display = ui;
	}
	var parentClassName;
	if(parent != null) {
		var c = js_Boot.getClass(parent);
		parentClassName = c.__name__;
	} else {
		parentClassName = null;
	}
	if(parentClassName != null) {
		parentClassName = HxOverrides.substr(parentClassName,parentClassName.lastIndexOf(".") + 1,null);
	}
	if(parentClassName != null && Object.prototype.hasOwnProperty.call(zygame_components_ZBuilder.addMaps.h,parentClassName)) {
		zygame_components_ZBuilder.addMaps.h[parentClassName](ui,parent,xml);
	} else if(((parent) instanceof zygame_display_batch_ImageBatchs)) {
		(js_Boot.__cast(parent , zygame_display_batch_ImageBatchs)).addChild(ui);
	} else if(((parent) instanceof openfl_display_DisplayObjectContainer)) {
		(js_Boot.__cast(parent , openfl_display_DisplayObjectContainer)).addChild(ui);
	} else if(((parent) instanceof openfl_display_TileContainer)) {
		(js_Boot.__cast(parent , openfl_display_TileContainer)).addTile(ui);
	} else if(((parent) instanceof openfl_display_Tilemap)) {
		(js_Boot.__cast(parent , openfl_display_Tilemap)).addTile(ui);
	}
	var attr = xml.attributes();
	while(attr.hasNext()) {
		var name = attr.next();
		if(name == "id") {
			var this1 = builder.ids;
			var key = xml.get(name);
			this1.h[key] = ui;
			if(!xml.exists("name")) {
				zygame_components_ZBuilder.setProperty(ui,"name",xml.get(name));
			}
			continue;
		}
		if(zygame_components_ZBuilder.igone.indexOf(name) != -1) {
			continue;
		}
		var value = xml.get(name);
		if(value != null && value.indexOf("::") == 0 && value.lastIndexOf("::") == value.length - 2) {
			var defineKey = StringTools.replace(value,"::","");
			if(Object.prototype.hasOwnProperty.call(zygame_components_ZBuilder.defineMaps.h,defineKey)) {
				value = zygame_components_ZBuilder.defineMaps.h[defineKey];
			}
		}
		var att = zygame_components_ZBuilder.getProperty(ui,name);
		var parsingName = className + "." + name;
		if(Object.prototype.hasOwnProperty.call(zygame_components_ZBuilder.parsingMaps.h,parsingName)) {
			zygame_components_ZBuilder.parsingMaps.h[parsingName](ui,name,value);
		} else if(typeof(att) == "number" && value.indexOf("0x") == -1) {
			if(value.indexOf("%") != -1) {
				var bfb = parseFloat(HxOverrides.substr(value,0,value.lastIndexOf("%")));
				bfb = bfb / 100 * zygame_components_ZBuilder.getProperty(parent,name);
				zygame_components_ZBuilder.setProperty(ui,name,bfb);
			} else {
				zygame_components_ZBuilder.setProperty(ui,name,parseFloat(value));
			}
		} else if(typeof(att) == "number" && ((att | 0) === att)) {
			zygame_components_ZBuilder.setProperty(ui,name,Std.parseInt(value));
		} else if(typeof(att) == "boolean") {
			zygame_components_ZBuilder.setProperty(ui,name,xml.get(name) == "true");
		} else if(typeof(att) == "string" || att == null) {
			zygame_components_ZBuilder.setProperty(ui,name,xml.get(name));
		}
	}
	try {
		if(parent != null) {
			zygame_components_ZBuilder.align(ui,parent,xml.get("left"),xml.get("right"),xml.get("top"),xml.get("bottom"),xml.get("centerX"),xml.get("centerY"));
		}
	} catch( _g ) {
		haxe_NativeStackTrace.lastError = _g;
		throw haxe_Exception.thrown("Align error:" + haxe_xml_Printer.print(xml));
	}
	var items = xml.elements();
	while(items.hasNext()) {
		var itemxml = items.next();
		zygame_components_ZBuilder.buildui(itemxml,ui,builder);
	}
	if(Object.prototype.hasOwnProperty.call(zygame_components_ZBuilder.endMaps.h,className)) {
		zygame_components_ZBuilder.endMaps.h[className](ui);
	}
	if(parent != null) {
		zygame_components_ZBuilder.align(ui,parent,xml.get("left"),xml.get("right"),xml.get("top"),xml.get("bottom"),xml.get("centerX"),xml.get("centerY"));
	}
	return ui;
};
zygame_components_ZBuilder.align = function(obj,parent,leftPx,rightPx,topPx,bottomPx,centerX,centerY) {
	if(typeof(leftPx) == "string") {
		leftPx = Std.parseInt(leftPx);
	}
	if(typeof(rightPx) == "string") {
		rightPx = Std.parseInt(rightPx);
	}
	if(typeof(topPx) == "string") {
		topPx = Std.parseInt(topPx);
	}
	if(typeof(bottomPx) == "string") {
		bottomPx = Std.parseInt(bottomPx);
	}
	if(typeof(centerX) == "string") {
		centerX = Std.parseInt(centerX);
	}
	if(typeof(centerY) == "string") {
		centerY = Std.parseInt(centerY);
	}
	var objWidth = zygame_components_ZBuilder.getProperty(obj,"width");
	var objHeight = zygame_components_ZBuilder.getProperty(obj,"height");
	var parentWidth = zygame_components_ZBuilder.getProperty(parent,"width");
	var parentHeight = zygame_components_ZBuilder.getProperty(parent,"height");
	if(leftPx != null && rightPx != null) {
		zygame_components_ZBuilder.setProperty(obj,"x",leftPx);
		zygame_components_ZBuilder.setProperty(obj,"width",parentWidth - rightPx - leftPx);
	} else if(leftPx != null && centerX != null) {
		zygame_components_ZBuilder.setProperty(obj,"x",leftPx);
		zygame_components_ZBuilder.setProperty(obj,"width",parentWidth / 2 + centerX - leftPx);
	} else if(rightPx != null && centerX != null) {
		zygame_components_ZBuilder.setProperty(obj,"x",parentWidth / 2 + centerX);
		zygame_components_ZBuilder.setProperty(obj,"width",parentWidth / 2 - centerX - rightPx);
	} else if(leftPx != null) {
		zygame_components_ZBuilder.setProperty(obj,"x",leftPx);
	} else if(rightPx != null) {
		zygame_components_ZBuilder.setProperty(obj,"x",parentWidth - rightPx - objWidth);
	} else if(centerX != null) {
		zygame_components_ZBuilder.setProperty(obj,"x",parentWidth / 2 + centerX - objWidth / 2);
	}
	if(topPx != null && bottomPx != null) {
		zygame_components_ZBuilder.setProperty(obj,"y",topPx);
		zygame_components_ZBuilder.setProperty(obj,"height",parentHeight - topPx - bottomPx);
	} else if(topPx != null && centerY != null) {
		zygame_components_ZBuilder.setProperty(obj,"y",topPx);
		zygame_components_ZBuilder.setProperty(obj,"height",parentHeight / 2 + centerY - topPx);
	} else if(bottomPx != null && centerY != null) {
		zygame_components_ZBuilder.setProperty(obj,"y",parentHeight / 2 + centerY);
		zygame_components_ZBuilder.setProperty(obj,"height",parentHeight / 2 - bottomPx - centerY);
	} else if(topPx != null) {
		zygame_components_ZBuilder.setProperty(obj,"y",topPx);
	} else if(bottomPx != null) {
		zygame_components_ZBuilder.setProperty(obj,"y",parentHeight - bottomPx - objHeight);
	} else if(centerY != null) {
		zygame_components_ZBuilder.setProperty(obj,"y",parentHeight / 2 + centerY - objHeight / 2);
	}
};
zygame_components_ZBuilder.setProperty = function(data,key,value) {
	if(data["set_" + key] != null) {
		data["set_" + key](value);
	} else {
		data[key] = value;
	}
};
zygame_components_ZBuilder.getProperty = function(data,key) {
	if(data["get_" + key] != null) {
		return data["get_" + key]();
	} else {
		return data[key];
	}
};
var zygame_components_Builder = function() {
	this.display = null;
	this.ids = new haxe_ds_StringMap();
};
$hxClasses["zygame.components.Builder"] = zygame_components_Builder;
zygame_components_Builder.__name__ = "zygame.components.Builder";
zygame_components_Builder.prototype = {
	display: null
	,ids: null
	,get: function(id,type) {
		return this.ids.h[id];
	}
	,getFunction: function(id) {
		var data = this.ids.h[id];
		if(((data) instanceof zygame_script_ZHaxe)) {
			return ($_=(js_Boot.__cast(data , zygame_script_ZHaxe)),$bind($_,$_.call));
		}
		if(((data) instanceof zygame_components_ZTween)) {
			return ($_=(js_Boot.__cast(data , zygame_components_ZTween)),$bind($_,$_.play));
		}
		return null;
	}
	,bindBuilder: function() {
		var _g = haxe_ds_StringMap.kvIterator(this.ids.h);
		while(_g.hasNext()) {
			var _g1 = _g.next();
			var key = _g1.key;
			var value = _g1.value;
			if(((value) instanceof zygame_script_ZHaxe)) {
				(js_Boot.__cast(value , zygame_script_ZHaxe)).bindBuilder(this);
			}
		}
	}
	,variablesAllHaxe: function(func,data) {
		if(this.ids == null) {
			return;
		}
		var _g = haxe_ds_StringMap.kvIterator(this.ids.h);
		while(_g.hasNext()) {
			var _g1 = _g.next();
			var key = _g1.key;
			var value = _g1.value;
			if(((value) instanceof zygame_script_ZHaxe)) {
				(js_Boot.__cast(value , zygame_script_ZHaxe)).interp.variables.h[func] = data;
			}
		}
	}
	,variablesAllHaxeBindMiniAssets: function(miniAssets) {
		if(this.ids == null) {
			return;
		}
		var _g = haxe_ds_StringMap.kvIterator(this.ids.h);
		while(_g.hasNext()) {
			var _g1 = _g.next();
			var key = _g1.key;
			var value = _g1.value;
			if(((value) instanceof zygame_script_ZHaxe)) {
				(js_Boot.__cast(value , zygame_script_ZHaxe)).interp.miniAssets = miniAssets;
			}
		}
	}
	,dispose: function() {
		if(this.ids != null) {
			var _g = haxe_ds_StringMap.kvIterator(this.ids.h);
			while(_g.hasNext()) {
				var _g1 = _g.next();
				var key = _g1.key;
				var value = _g1.value;
				if(((value) instanceof zygame_components_ZTween)) {
					(js_Boot.__cast(value , zygame_components_ZTween)).stop();
				}
			}
			this.ids = null;
			this.display = null;
		}
	}
	,disposeView: function() {
		if(this.display != null && (js_Boot.__cast(this.display , openfl_display_DisplayObject)).parent != null) {
			(js_Boot.__cast(this.display , openfl_display_DisplayObject)).parent.removeChild(js_Boot.__cast(this.display , openfl_display_DisplayObject));
		}
		this.dispose();
	}
	,__class__: zygame_components_Builder
};
var zygame_components_AssetsBuilder = function(path,parent) {
	this.viewXmlPath = null;
	this.assets = new zygame_utils_ZAssets();
	zygame_components_Builder.call(this);
	this.viewXmlPath = path;
	this._viewParent = parent;
};
$hxClasses["zygame.components.AssetsBuilder"] = zygame_components_AssetsBuilder;
zygame_components_AssetsBuilder.__name__ = "zygame.components.AssetsBuilder";
zygame_components_AssetsBuilder.__super__ = zygame_components_Builder;
zygame_components_AssetsBuilder.prototype = $extend(zygame_components_Builder.prototype,{
	assets: null
	,viewXmlPath: null
	,_viewParent: null
	,loadFiles: function(files) {
		this.assets.loadFiles(files);
		return this;
	}
	,loadTextures: function(img,xml,isAtf) {
		if(isAtf == null) {
			isAtf = false;
		}
		this.assets.loadTextures(img,xml,isAtf);
		return this;
	}
	,loadSpine: function(pngs,atlas) {
		this.assets.loadSpineTextAlats(pngs,atlas);
		return this;
	}
	,build: function(cb,onloaded) {
		var _gthis = this;
		this.assets.loadFile(this.viewXmlPath);
		this.assets.start(function(f) {
			if(f == 1) {
				zygame_components_ZBuilder.bindAssets(_gthis.assets);
				if(onloaded != null) {
					onloaded();
				}
				zygame_components_ZBuilder.buildui(_gthis.assets.getXml(zygame_utils_StringUtils.getName(_gthis.viewXmlPath)).firstElement(),_gthis._viewParent,_gthis);
				_gthis._viewParent = null;
				zygame_components_ZBuilder.unbindAssets(_gthis.assets);
				cb(true);
			}
		},function(msg) {
			cb(false);
		});
		return this;
	}
	,dispose: function() {
		if(this.assets == null) {
			return;
		}
		this.assets.unloadAll();
		this.assets = null;
	}
	,__class__: zygame_components_AssetsBuilder
});
var zygame_components_BuilderRootDisplay = function() { };
$hxClasses["zygame.components.BuilderRootDisplay"] = zygame_components_BuilderRootDisplay;
zygame_components_BuilderRootDisplay.__name__ = "zygame.components.BuilderRootDisplay";
zygame_components_BuilderRootDisplay.__isInterface__ = true;
zygame_components_BuilderRootDisplay.prototype = {
	builder: null
	,onInitBuilder: null
	,__class__: zygame_components_BuilderRootDisplay
};
var zygame_components_base_ToggleButton = function() {
	this._toggleState = "up";
	this._currentTouchID = -1;
	zygame_components_base_Component.call(this);
	this.box = new zygame_components_ZBox();
	this.addChild(this.box);
	this.mouseChildren = false;
	this.setTouchEvent(true);
	var img = new zygame_components_ZImage();
	this.addComponent(img,"image");
	this.setChildIndex(img,0);
};
$hxClasses["zygame.components.base.ToggleButton"] = zygame_components_base_ToggleButton;
zygame_components_base_ToggleButton.__name__ = "zygame.components.base.ToggleButton";
zygame_components_base_ToggleButton.__super__ = zygame_components_base_Component;
zygame_components_base_ToggleButton.prototype = $extend(zygame_components_base_Component.prototype,{
	_currentTouchID: null
	,_toggleState: null
	,get_toggleState: function() {
		return this._toggleState;
	}
	,box: null
	,initComponents: function() {
		this.updateComponents();
	}
	,updateComponents: function() {
		var img = this.findComponent("image");
		if(img == null) {
			return;
		}
		var skin = this.get_skin();
		if(skin != null) {
			var skinData = null;
			switch(this._toggleState) {
			case "down":
				skinData = skin.get_downSkin();
				break;
			case "out":
				skinData = skin.get_outSkin();
				break;
			case "over":
				skinData = skin.get_overSkin();
				break;
			case "up":
				skinData = skin.get_upSkin();
				break;
			}
			img.set_dataProvider(skinData == null ? skin.get_defalutSkin() : skinData);
		}
	}
	,sendToggleState: function(state) {
		this._toggleState = state;
		this.updateComponents();
	}
	,onTouchBegin: function(touch) {
		if(this._currentTouchID != -1) {
			return;
		}
		this._currentTouchID = touch.touchPointID;
		this.sendToggleState("down");
	}
	,onTouchEnd: function(touch) {
		if(touch.touchPointID == this._currentTouchID) {
			var img = this.findComponent("image");
			var wz = img.get_width();
			var hz = img.get_height();
			if(img.get_scaleX() < 1) {
				wz /= img.get_scaleX();
			}
			if(img.get_scaleY() < 1) {
				hz /= img.get_scaleY();
			}
			this.sendToggleState("up");
			if(0 < this.get_mouseX() && 0 < this.get_mouseY() && this.get_mouseX() < wz && this.get_mouseY() < hz) {
				this.dispatchEvent(new openfl_events_Event("select",true,false));
			}
			this._currentTouchID = -1;
		}
	}
	,setContent: function(data) {
		var curimg = this.findComponent("image");
		var img = new zygame_components_ZImage();
		img.set_dataProvider(data);
		this.box.removeChildren();
		this.box.addComponent(img,"content");
		img.set_x(curimg.get_width() / 2 - img.get_width() / 2);
		img.set_y(curimg.get_height() / 2 - img.get_height() / 2);
	}
	,set_shader: function(value) {
		var img = this.findComponent("image");
		if(img != null) {
			img.set_shader(value);
		}
		return value;
	}
	,__class__: zygame_components_base_ToggleButton
	,__properties__: $extend(zygame_components_base_Component.prototype.__properties__,{get_toggleState:"get_toggleState"})
});
var zygame_components_ZButton = function() {
	zygame_components_base_ToggleButton.call(this);
};
$hxClasses["zygame.components.ZButton"] = zygame_components_ZButton;
zygame_components_ZButton.__name__ = "zygame.components.ZButton";
zygame_components_ZButton.createModelButton = function(txt) {
	var button = new zygame_components_ZButton();
	button.set_skin(zygame_components_ZButton.createSkin(zygame_components_ZModel._modelBitmapData,null,null,null));
	button.setText(txt);
	button.set_width(100);
	button.set_height(32);
	return button;
};
zygame_components_ZButton.createButton = function(up,down,over,out) {
	var button = new zygame_components_ZButton();
	button.set_skin(zygame_components_ZButton.createSkin(up,down,over,out));
	return button;
};
zygame_components_ZButton.createSkin = function(up,down,over,out) {
	var s = new zygame_components_skin_ButtonSkin();
	s.set_upSkin(up);
	s.set_downSkin(down);
	s.set_overSkin(over);
	s.set_outSkin(out);
	return s;
};
zygame_components_ZButton.__super__ = zygame_components_base_ToggleButton;
zygame_components_ZButton.prototype = $extend(zygame_components_base_ToggleButton.prototype,{
	_text: null
	,_clickCall: null
	,set_clickEvent: function(call) {
		if(this._clickCall != null) {
			this.removeEventListener("click",this._clickCall);
		}
		if(call == null) {
			this._clickCall = null;
			return call;
		}
		this._clickCall = function(_) {
			call();
		};
		this.addEventListener("click",this._clickCall);
		return call;
	}
	,set_width: function(value) {
		var img = this.findComponent("image");
		img.set_width(value);
		var contentimg = this.box.findComponent("content");
		if(contentimg != null) {
			contentimg.set_x(img.get_width() / 2 - contentimg.get_width() / 2);
		}
		return value;
	}
	,set_height: function(value) {
		var img = this.findComponent("image");
		img.set_height(value);
		var contentimg = this.box.findComponent("content");
		if(contentimg != null) {
			contentimg.set_y(img.get_height() / 2 - contentimg.get_height() / 2);
		}
		return value;
	}
	,get_width: function() {
		var img = this.findComponent("image");
		if(img != null) {
			return img.get_width();
		} else {
			return 0;
		}
	}
	,get_height: function() {
		var img = this.findComponent("image");
		if(img != null) {
			return img.get_height();
		} else {
			return 0;
		}
	}
	,updateComponents: function() {
		zygame_components_base_ToggleButton.prototype.updateComponents.call(this);
		var img = this.findComponent("image");
		if(img == null) {
			return;
		}
		var skin = this.get_skin();
		img.set_scaleX(1);
		img.set_scaleY(1);
		img.set_x(0);
		img.set_y(0);
		this.box.set_scaleX(1);
		this.box.set_scaleY(1);
		this.box.set_x(0);
		this.box.set_y(0);
		if(skin != null && this.get_toggleState() == "down" && skin.get_downSkin() == null) {
			img.set_scaleX(0.94);
			img.set_scaleY(0.94);
			img.set_x(img.get_width() * 0.03);
			img.set_y(img.get_height() * 0.03);
			this.box.set_scaleX(0.94);
			this.box.set_scaleY(0.94);
			this.box.set_x(img.get_x());
			this.box.set_y(img.get_y());
		}
		if(skin != null && !skin.hasEventListener("change")) {
			skin.addEventListener("change",$bind(this,this.onChange));
		}
	}
	,onChange: function(e) {
		this.updateComponents();
	}
	,initText: function() {
		if(this._text == null) {
			this._text = new zygame_components_ZLabel();
			this._text.set_width(this.get_width());
			this._text.set_height(this.get_height());
			this._text.set_hAlign("center");
			this._text.mouseEnabled = false;
			this.box.addChild(this._text);
		}
	}
	,setTextColor: function(color) {
		this.initText();
		this._text.setFontColor(color);
	}
	,setTextSize: function(size) {
		this.initText();
		this._text.setFontSize(size);
	}
	,getText: function() {
		if(this._text == null) {
			return "";
		}
		return this._text.get_dataProvider();
	}
	,setText: function(text) {
		this.initText();
		this._text.set_dataProvider(text);
	}
	,setTextPos: function(xz,yz) {
		this._text.set_x(xz);
		this._text.set_y(yz);
	}
	,setScale9Grid: function(rect) {
		var img = this.findComponent("image");
		if(img != null) {
			img.setScale9Grid(rect);
		}
	}
	,__class__: zygame_components_ZButton
	,__properties__: $extend(zygame_components_base_ToggleButton.prototype.__properties__,{set_clickEvent:"set_clickEvent"})
});
var zygame_components_ZGraphics = function() {
	this.maxDrawHeight = 0;
	this.maxDrawWidth = 0;
	this.lineSize = 1;
	this.commend = [];
	this.isLineTo = false;
	this.maxIndicesID = 0;
	this.indicesID = 0;
	this.eraseIndexs = [];
	this.eraseUv = openfl_Vector.toFloatVector(null);
	this.eraseIds = [];
	this.eraseVertices = openfl_Vector.toFloatVector(null);
	this.ids = [];
	this.uv = openfl_Vector.toFloatVector(null);
	this.indices = openfl_Vector.toIntVector(null);
	this.vertices = openfl_Vector.toFloatVector(null);
	zygame_display_DisplayObjectContainer.call(this);
	this.draw = this;
};
$hxClasses["zygame.components.ZGraphics"] = zygame_components_ZGraphics;
zygame_components_ZGraphics.__name__ = "zygame.components.ZGraphics";
zygame_components_ZGraphics.formBase64 = function(atlas,base64) {
	var bytes = openfl_utils_ByteArray.fromBytes(haxe_crypto_Base64.decode(base64));
	bytes.uncompress(null);
	var data = bytes.readUTFBytes(openfl_utils_ByteArray.get_length(bytes));
	var obj = JSON.parse(data);
	var g = new zygame_components_ZGraphics();
	g.beginTextureAtlas(atlas);
	var vertices = obj.vertices;
	var _g = 0;
	while(_g < vertices.length) {
		var f = vertices[_g];
		++_g;
		g.vertices.push(f);
	}
	var len = vertices.length / 8 | 0;
	var _g = 0;
	var _g1 = len;
	while(_g < _g1) {
		var i = _g++;
		g.pushRectIndices();
	}
	var ids = obj.ids;
	var _g = 0;
	while(_g < ids.length) {
		var idname = ids[_g];
		++_g;
		g.beginFrameByName(idname);
		g.pushFrameUVs();
	}
	g.fillEnd();
	return g;
};
zygame_components_ZGraphics.__super__ = zygame_display_DisplayObjectContainer;
zygame_components_ZGraphics.prototype = $extend(zygame_display_DisplayObjectContainer.prototype,{
	draw: null
	,vertices: null
	,indices: null
	,uv: null
	,ids: null
	,eraseVertices: null
	,eraseIds: null
	,eraseUv: null
	,eraseIndexs: null
	,indicesID: null
	,maxIndicesID: null
	,lineStyle: null
	,moveToPos: null
	,isLineTo: null
	,commend: null
	,lineSize: null
	,textureAtlas: null
	,curFrame: null
	,frameName: null
	,maxDrawWidth: null
	,maxDrawHeight: null
	,clear: function() {
		this.draw.get_graphics().clear();
		this.indicesID = 0;
		this.maxIndicesID = 0;
		this.vertices.splice(0,this.vertices.get_length());
		this.indices.splice(0,this.indices.get_length());
		this.ids.splice(0,this.ids.length);
		this.uv.splice(0,this.uv.get_length());
		this.eraseVertices.splice(0,this.eraseVertices.get_length());
		this.eraseUv.splice(0,this.eraseUv.get_length());
		this.eraseIds.splice(0,this.eraseIds.length);
		this.eraseIndexs.splice(0,this.eraseIndexs.length);
		this.commend.splice(0,this.commend.length);
	}
	,withdraw: function() {
		while(true) if(this.getLastCommend() == "moveTo") {
			this.commend.pop();
		} else {
			break;
		}
		if(this.getLastCommend() == "erase") {
			var _g = 0;
			var _g1 = this.commend.length;
			while(_g < _g1) {
				var i = _g++;
				var c = this.commend.pop();
				if(c != "erase") {
					break;
				}
				var index = this.eraseIndexs.pop();
				this.pushStringVector(this.eraseIds.splice(this.eraseVertices.get_length() - 1,1),this.ids,index);
				this.pushVector(this.eraseVertices.splice(this.eraseVertices.get_length() - 8,8),this.vertices,index);
				this.pushVector(this.eraseUv.splice(this.eraseUv.get_length() - 8,8),this.uv,index);
			}
		} else if(this.getLastCommend() != "lineTo") {
			this.commend.pop();
			this.uv.splice(this.vertices.get_length() - 8,8);
			this.ids.splice((this.vertices.get_length() - 8) / 8 | 0,1);
			this.vertices.splice(this.vertices.get_length() - 8,8);
		} else {
			var _g = 0;
			var _g1 = this.commend.length;
			while(_g < _g1) {
				var i = _g++;
				var c = this.commend.pop();
				if(c != "lineTo") {
					break;
				}
				this.ids.splice((this.vertices.get_length() - 8) / 8 | 0,1);
				this.vertices.splice(this.vertices.get_length() - 8,8);
				this.uv.splice(this.uv.get_length() - 8,8);
			}
		}
		this.fillEnd();
	}
	,isNull: function() {
		return this.vertices.get_length() != 0;
	}
	,beginTextureAtlas: function(texture) {
		this.draw.get_graphics().clear();
		this.textureAtlas = texture;
	}
	,beginFrameByName: function(name) {
		this.frameName = name;
		this.curFrame = this.textureAtlas.getBitmapDataFrame(name);
	}
	,drawTriangles: function(x1,y1,x2,y2,x3,y3) {
		this.pushFrameUVs();
		this.pushPoint(x1,y1);
		this.pushPoint(x2,y2);
		this.pushPoint(x3,y3);
		this.pushPoint(x3,y3);
		this.pushRectIndices();
	}
	,drawRect: function(x,y,width,height) {
		this.pushFrameUVs();
		this.pushPoint(x,y);
		this.pushPoint(x + width,y);
		this.pushPoint(x,y + height);
		this.pushPoint(x + width,y + height);
		this.pushRectIndices();
		this.commend.push("drawRect");
	}
	,erase: function(x,y,size) {
		if(size == null) {
			size = 5;
		}
		var i = 0;
		while(true) {
			var isErase = this.cheakIn(i,x,y,size);
			if(isErase) {
				this.eraseIndexs.push(i);
				this.pushVector(this.vertices.splice(i,8),this.eraseVertices);
				this.pushVector(this.uv.splice(i,8),this.eraseUv);
				this.pushStringVector(this.ids.splice(i / 8 | 0,1),this.eraseIds);
				this.commend.push("erase");
			}
			i += 8;
			if(i >= this.vertices.get_length()) {
				break;
			}
		}
		this.fillEnd();
	}
	,pushVector: function(v1,v2,index) {
		if(index == null) {
			index = -1;
		}
		var _g = 0;
		var _g1 = v1.get_length();
		while(_g < _g1) {
			var i = _g++;
			if(index == -1) {
				v2.push(v1.get(i));
			} else {
				v2.insertAt(index + i,v1.get(i));
			}
		}
	}
	,pushStringVector: function(v1,v2,index) {
		if(index == null) {
			index = -1;
		}
		var _g = 0;
		var _g1 = v1.length;
		while(_g < _g1) {
			var i = _g++;
			if(index == -1) {
				v2.push(v1[i]);
			} else {
				v2.splice(index + i,0,v1[i]);
			}
		}
	}
	,cheakIn: function(index,x,y,size) {
		var pointA = new openfl_geom_Point();
		pointA.x = this.vertices.get(index);
		pointA.y = this.vertices.get(index + 1);
		var pointB = new openfl_geom_Point();
		pointB.x = this.vertices.get(index + 6);
		pointB.y = this.vertices.get(index + 7);
		if(this.pointToLineDistance(pointA,pointB,new openfl_geom_Point(x,y)) < size) {
			return true;
		}
		return false;
	}
	,pointToLineDistance: function(p1,p2,p3) {
		var xDelta = p2.x - p1.x;
		var yDelta = p2.y - p1.y;
		if(xDelta == 0 && yDelta == 0) {
			p2.x += 1;
			p2.y += 1;
			xDelta = 1;
			yDelta = 1;
		}
		var u = ((p3.x - p1.x) * xDelta + (p3.y - p1.y) * yDelta) / (xDelta * xDelta + yDelta * yDelta);
		var closestPoint;
		if(u < 0) {
			closestPoint = p1;
		} else if(u > 1) {
			closestPoint = p2;
		} else {
			closestPoint = new openfl_geom_Point(p1.x + u * xDelta,p1.y + u * yDelta);
		}
		return openfl_geom_Point.distance(closestPoint,p3);
	}
	,moveTo: function(x,y) {
		this.isLineTo = false;
		if(this.moveToPos == null) {
			this.moveToPos = new openfl_geom_Point(x,y);
		} else {
			this.moveToPos.x = x;
			this.moveToPos.y = y;
		}
		this.commend.push("moveTo");
	}
	,lineTo: function(x,y) {
		this.drawLine(this.moveToPos.x,this.moveToPos.y,x,y,0,0);
		if(this.isLineTo) {
			this.vertices.set(this.vertices.get_length() - 10,this.vertices.get(this.vertices.get_length() - 4));
			this.vertices.set(this.vertices.get_length() - 9,this.vertices.get(this.vertices.get_length() - 3));
			this.vertices.set(this.vertices.get_length() - 14,this.vertices.get(this.vertices.get_length() - 8));
			this.vertices.set(this.vertices.get_length() - 13,this.vertices.get(this.vertices.get_length() - 7));
		}
		this.moveToPos.x = x;
		this.moveToPos.y = y;
		this.isLineTo = true;
		this.commend.push("lineTo");
	}
	,drawLine: function(startX,startY,endX,endY,offectX,offectY) {
		if(offectY == null) {
			offectY = 0;
		}
		if(offectX == null) {
			offectX = 0;
		}
		var pointA = new openfl_geom_Point();
		pointA.x = startX;
		pointA.y = startY;
		var pointB = new openfl_geom_Point();
		pointB.x = endX;
		pointB.y = endY;
		var d = openfl_geom_Point.distance(pointA,pointB);
		var a = Math.atan2(pointB.y - pointA.y,pointB.x - pointA.x);
		var cos = Math.cos(a);
		var sin = Math.sin(a);
		startX += sin * this.lineSize;
		startY -= cos * this.lineSize;
		this.pushFrameUVs(offectX,offectY);
		this.pushPoint(startX,startY);
		this.pushPoint(startX + d * cos,startY + d * sin);
		startX -= sin * this.lineSize * 2;
		startY += cos * this.lineSize * 2;
		this.pushPoint(startX,startY);
		this.pushPoint(startX + d * cos,startY + d * sin);
		this.pushRectIndices();
		if(this.getLastCommend() != "moveTo" && this.getLastCommend() != "lineTo") {
			this.commend.push("drawLine");
		}
	}
	,getLastCommend: function() {
		if(this.commend.length > 0) {
			return this.commend[this.commend.length - 1];
		}
		return null;
	}
	,fillEnd: function() {
		this.draw.get_graphics().clear();
		this.draw.get_graphics().beginBitmapFill(this.textureAtlas.getRootBitmapData(),null,true,true);
		this.draw.get_graphics().drawTriangles(this.vertices,this.indices,this.uv);
		this.draw.get_graphics().endFill();
	}
	,pushFrameUVs: function(pxf,pyf) {
		if(pyf == null) {
			pyf = 0;
		}
		if(pxf == null) {
			pxf = 0;
		}
		if(this.curFrame == null) {
			this.pushUV(0,0);
			this.pushUV(0,0);
			this.pushUV(0,0);
			this.pushUV(0,0);
			this.ids.push(null);
		} else {
			var uvs = this.curFrame.getUv();
			var px = pxf == 0 ? 0 : (uvs[6] - uvs[0]) * pxf;
			var py = pyf == 0 ? 0 : (uvs[7] - uvs[1]) * pyf;
			this.pushUV(uvs[0] + px,uvs[1] + py);
			this.pushUV(uvs[2] - px,uvs[3] + py);
			this.pushUV(uvs[4] + px,uvs[5] - py);
			this.pushUV(uvs[6] - px,uvs[7] - py);
			this.ids.push(this.frameName);
		}
	}
	,pushUV: function(x,y) {
		this.uv.push(x);
		this.uv.push(y);
	}
	,pushPoint: function(x,y) {
		if(this.maxDrawWidth != 0) {
			if(x < 0) {
				x = 0;
			} else if(x > this.maxDrawWidth) {
				x = this.maxDrawWidth;
			}
		}
		if(this.maxDrawHeight != 0) {
			if(y < 0) {
				y = 0;
			} else if(y > this.maxDrawHeight) {
				y = this.maxDrawHeight;
			}
		}
		this.vertices.push(x | 0);
		this.vertices.push(y | 0);
	}
	,pushRectIndices: function() {
		this.pushIndices();
		this.pushIndices();
		this.endIndices();
	}
	,pushIndices: function() {
		this.indices.push(this.indicesID);
		this.indices.push(this.indicesID + 1);
		this.indices.push(this.indicesID + 2);
		this.indicesID++;
		if(this.maxIndicesID < this.indicesID + 2) {
			this.maxIndicesID = this.indicesID + 2;
		}
	}
	,endIndices: function() {
		this.indicesID = this.maxIndicesID;
	}
	,toObject: function() {
		return { vertices : this.vertices, ids : this.ids};
	}
	,toBase64: function() {
		var data = JSON.stringify(this.toObject());
		var this1 = new openfl_utils_ByteArrayData(0);
		var b = this1;
		b.writeUTFBytes(data);
		b.compress(null);
		var base64 = haxe_crypto_Base64.encode(openfl_utils_ByteArray.toBytes(b),true);
		b.clear();
		return base64;
	}
	,getLocalBounds: function() {
		var rect = new openfl_geom_Rectangle();
		var maxX = this.vertices.get(0);
		var minX = this.vertices.get(0);
		var maxY = this.vertices.get(1);
		var minY = this.vertices.get(1);
		var _g = 0;
		var _g1 = this.vertices.get_length();
		while(_g < _g1) {
			var i = _g++;
			var v = this.vertices.get(i);
			if(i / 2 == (i / 2 | 0)) {
				if(v > maxX) {
					maxX = v;
				} else if(v < minX) {
					minX = v;
				}
			} else if(v > maxY) {
				maxY = v;
			} else if(v < minY) {
				minY = v;
			}
		}
		rect.x = minX;
		rect.y = minY;
		rect.width = maxX - minX;
		rect.height = maxY - minY;
		return rect;
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly,hitObject) {
		return false;
	}
	,__class__: zygame_components_ZGraphics
});
var zygame_components_ZLabel = function() {
	this._isDownTime = 0;
	this.curstate = false;
	this.quadhidetime = 30;
	this.quadshowtime = 0;
	this._scale = 2;
	this.__point = new openfl_geom_Point();
	this.igoneChars = [];
	this._height = 0;
	this._width = 100;
	var _gthis = this;
	zygame_components_base_DataProviderComponent.call(this);
	this._display = new zygame_components_base_ZTextField();
	this._font = new openfl_text_TextFormat(zygame_components_base_ZConfig.fontName);
	this._display.set_scaleX(1 / this._scale);
	this._display.set_scaleY(1 / this._scale);
	this._display.set_width(0);
	this._display.set_height(0);
	this._display.setTextFormat(this._font);
	this._display.set_wordWrap(true);
	this._display.set_selectable(false);
	this._display.addEventListener("change",function(_) {
		_gthis.updateComponents();
	});
	this.mouseChildren = false;
	this.zquad = new zygame_components_ZQuad();
	this.zquad.set_visible(false);
	this.set_vAlign("center");
};
$hxClasses["zygame.components.ZLabel"] = zygame_components_ZLabel;
zygame_components_ZLabel.__name__ = "zygame.components.ZLabel";
zygame_components_ZLabel._getCurrentScale = function() {
	if(zygame_core_Start.currentScale < 1) {
		return 1;
	} else {
		return zygame_core_Start.currentScale;
	}
};
zygame_components_ZLabel.__super__ = zygame_components_base_DataProviderComponent;
zygame_components_ZLabel.prototype = $extend(zygame_components_base_DataProviderComponent.prototype,{
	_defaultDisplay: null
	,_display: null
	,_font: null
	,_isHtml: null
	,_width: null
	,_height: null
	,igoneChars: null
	,__point: null
	,_scale: null
	,zquad: null
	,quadshowtime: null
	,quadhidetime: null
	,curstate: null
	,rect: null
	,set_defaultText: function(value) {
		if(this._defaultDisplay == null) {
			this.updatedefaultText();
		}
		this.updateComponents();
		this._defaultDisplay.set_text(value);
		return value;
	}
	,get_defaultText: function() {
		if(this._defaultDisplay == null) {
			return "";
		} else {
			return this._defaultDisplay.get_text();
		}
	}
	,set_defaultColor: function(value) {
		if(this._defaultDisplay == null) {
			this.updatedefaultText();
		}
		this.updateComponents();
		this._defaultDisplay.set_textColor(value);
		return value;
	}
	,updatedefaultText: function() {
		if(this._defaultDisplay == null) {
			this._defaultDisplay = new zygame_components_base_ZTextField();
			this.addChild(this._defaultDisplay);
		}
		this._defaultDisplay.set_wordWrap(this._display.get_wordWrap());
		this._defaultDisplay.set_scaleX(1 / this._scale);
		this._defaultDisplay.set_scaleY(1 / this._scale);
		this._defaultDisplay.set_width(this._display.get_width() * this._scale);
		this._defaultDisplay.set_height(this._display.get_height() * this._scale);
		this._defaultDisplay.mouseEnabled = false;
		var oldColor = this._font.color;
		this._font.color = this.get_defaultColor();
		this._defaultDisplay.setTextFormat(this._font);
		this._font.color = oldColor;
	}
	,get_defaultColor: function() {
		if(this._defaultDisplay == null) {
			return 0;
		} else {
			return this._defaultDisplay.get_textColor();
		}
	}
	,set_vAlign: function(value) {
		zygame_components_base_DataProviderComponent.prototype.set_vAlign.call(this,value);
		this.updateComponents();
		return value;
	}
	,set_hAlign: function(value) {
		zygame_components_base_DataProviderComponent.prototype.set_hAlign.call(this,value);
		this.updateComponents();
		return value;
	}
	,initComponents: function() {
		this.addChild(this._display);
		this.addChild(this.zquad);
	}
	,updateTextXY: function(txt) {
		var txtHeight = this._display.get_textHeight();
		if(txtHeight == 0) {
			txtHeight = this._font.size;
		}
		switch(this.get_hAlign()) {
		case "center":
			txt.set_x(this._width / 2 - txt.get_textWidth() / this._scale / 2);
			break;
		case "left":
			txt.set_x(0);
			break;
		case "right":
			txt.set_x(this._width - txt.get_textWidth() / this._scale);
			break;
		}
		switch(this.get_vAlign()) {
		case "bottom":
			txt.set_y(this._height - txtHeight / this._scale);
			break;
		case "center":
			txt.set_y(this._height / 2 - txtHeight / this._scale / 2);
			break;
		case "top":
			txt.set_y(0);
			break;
		}
		if(this.get_height() < txtHeight / this._scale) {
			this.set_height(txtHeight / this._scale + 32);
		}
	}
	,updateComponents: function() {
		this._display.set_width(this._width * this._scale);
		this._display.set_height(this._height);
		var _g = 0;
		var _g1 = this.igoneChars;
		while(_g < _g1.length) {
			var text = _g1[_g];
			++_g;
			this._display.set_text(StringTools.replace(this._display.get_text(),text,""));
		}
		this.updateTextXY(this._display);
		this.set_scrollRect(new openfl_geom_Rectangle(0,0,this.get_width(),this.get_height()));
		if(this.zquad.get_visible()) {
			if(this._display.get_text().length > 0) {
				this.rect = this._display.getCharBoundaries(this._display.get_text().length - 1);
				if(this.rect != null) {
					this.zquad.set_x((this.rect.x + this.rect.width) / this._scale + this._display.get_x());
					this.zquad.set_y(this.rect.y / this._scale + this._font.size * 0.168 / this._scale + this._display.get_y());
				}
			} else {
				this.zquad.set_x(this._display.get_x());
				this.zquad.set_y(this._font.size * 0.168 / this._scale + this._display.get_y());
			}
		} else {
			this.zquad.set_x(this._display.get_x());
			this.zquad.set_y(this._font.size * 0.168 / this._scale + this._display.get_y());
		}
		if(this._defaultDisplay != null) {
			this.updatedefaultText();
			if(this._display.get_text().length == 0) {
				this.updateTextXY(this._defaultDisplay);
				this._defaultDisplay.set_visible(true);
			} else {
				this._defaultDisplay.set_visible(false);
			}
		}
		this._display.set_width(this._display.get_textWidth() + 5);
		this._display.set_height(this._display.get_textHeight() + 5);
		if(this._defaultDisplay != null) {
			this._defaultDisplay.set_width(this._defaultDisplay.get_textWidth() + 5);
			this._defaultDisplay.set_height(this._defaultDisplay.get_textHeight() + 5);
		}
	}
	,get_dataProvider: function() {
		if(this._isHtml) {
			return this._display.get_htmlText();
		} else {
			return this._display.get_text();
		}
	}
	,set_dataProvider: function(value) {
		value = Std.string(value);
		zygame_components_base_DataProviderComponent.prototype.set_dataProvider.call(this,value);
		if(this.getDisplay().get_wordWrap() == false) {
			value = StringTools.replace(value,"\n","");
			value = StringTools.replace(value,"\r","");
		}
		if(value != null && typeof(value) == "string" && value.indexOf("@") == 0) {
			value = zygame_utils_LanguageUtils.getText(value);
		}
		if(this._isHtml) {
			this._display.set_htmlText(value);
		} else {
			if(this._display.get_text() == value) {
				return value;
			}
			if(this._display.get_text() != Std.string(value)) {
				this._display.__cleanup();
			}
			this._display.set_text(Std.string(value));
		}
		this.updateComponents();
		return value;
	}
	,selectText: function(start,len) {
		if(len == null) {
			len = -1;
		}
		if(start == null) {
			start = 0;
		}
		if(this._display.get_selectable() && this._display.get_type() == 1) {
			this._display.setSelection(start,len == -1 ? this._display.get_text().length : len);
		}
	}
	,set_width: function(value) {
		this._width = value;
		this.updateComponents();
		return value;
	}
	,get_width: function() {
		return Math.abs(this._width * this.get_scaleX());
	}
	,set_height: function(value) {
		this._height = value;
		this.updateComponents();
		return value;
	}
	,get_height: function() {
		return Math.abs(this._height * this.get_scaleY());
	}
	,getTextHeight: function() {
		return this._display.get_textHeight() / this._scale;
	}
	,getTextWidth: function() {
		return this._display.get_textWidth() / this._scale;
	}
	,setFontSize: function(font) {
		this._font.size = font * this._scale | 0;
		this._display.setTextFormat(this._font);
		this.zquad.set_width(2);
		this.zquad.set_height(font);
		this.updateComponents();
	}
	,setFontColor: function(color) {
		this._font.color = color;
		this.zquad.set_color(color);
		this._display.setTextFormat(this._font);
		this.updateComponents();
	}
	,setHtml: function(bool) {
		this._isHtml = bool;
		this.set_dataProvider(this.get_dataProvider());
	}
	,setSelectable: function(bool) {
		this._display.set_selectable(bool);
	}
	,setWordWrap: function(bool) {
		this._display.set_wordWrap(bool);
	}
	,setIsInput: function(bool) {
		this.mouseChildren = false;
		if(bool) {
			this.addEventListener("mouseDown",$bind(this,this.onMiniGameInputDown));
			this.addEventListener("click",$bind(this,this.onMiniGameInput));
		} else {
			this.removeEventListener("mouseDown",$bind(this,this.onMiniGameInputDown));
			this.removeEventListener("click",$bind(this,this.onMiniGameInput));
		}
	}
	,_isDownTime: null
	,onMiniGameInputDown: function(e) {
		this._isDownTime = new Date().getTime();
	}
	,onMiniGameInput: function(e) {
		var timecha = new Date().getTime() - this._isDownTime;
		zygame_components_input_HTML5TextInput.openInput(this);
		this.setSelectQuadVisible(true);
	}
	,stroke: function(color,blur) {
		if(blur == null) {
			blur = 4;
		}
		if(blur == 1) {
			this.getDisplay().set_shader(new zygame_shader_StrokeShader(color,blur,0.5));
		} else {
			this.getDisplay().set_shader(new zygame_shader_StrokeShader(color,blur,0));
		}
	}
	,getBounds: function(target) {
		var rect = zygame_components_base_DataProviderComponent.prototype.getBounds.call(this,target);
		return rect;
	}
	,destroy: function() {
		zygame_components_base_DataProviderComponent.prototype.destroy.call(this);
		this.removeChild(this._display);
		this._display = null;
		this.setFrameEvent(false);
	}
	,getDisplay: function() {
		return this._display;
	}
	,setSelectQuadVisible: function(b) {
		if(b == null) {
			b = false;
		}
		this.zquad.set_visible(b);
		this.zquad.set_alpha(1);
		this.setFrameEvent(b);
		if(b) {
			this.updateComponents();
		} else {
			zygame_components_input_HTML5TextInput.closeInput();
		}
	}
	,onAddToStage: function() {
		zygame_components_base_DataProviderComponent.prototype.onAddToStage.call(this);
	}
	,onRemoveToStage: function() {
		zygame_components_base_DataProviderComponent.prototype.onRemoveToStage.call(this);
		this.setSelectQuadVisible(false);
	}
	,onFrame: function() {
		if(this.zquad.get_visible()) {
			this.quadshowtime++;
			if(this.quadshowtime >= this.quadhidetime) {
				this.quadshowtime = 0;
				if(this.curstate) {
					this.zquad.set_alpha(0);
				} else {
					this.zquad.set_alpha(1);
				}
				this.curstate = !this.curstate;
			}
		}
	}
	,__class__: zygame_components_ZLabel
	,__properties__: $extend(zygame_components_base_DataProviderComponent.prototype.__properties__,{set_defaultColor:"set_defaultColor",get_defaultColor:"get_defaultColor",set_defaultText:"set_defaultText",get_defaultText:"get_defaultText"})
});
var zygame_components_ZInputLabel = function() {
	zygame_components_ZLabel.call(this);
};
$hxClasses["zygame.components.ZInputLabel"] = zygame_components_ZInputLabel;
zygame_components_ZInputLabel.__name__ = "zygame.components.ZInputLabel";
zygame_components_ZInputLabel.__super__ = zygame_components_ZLabel;
zygame_components_ZInputLabel.prototype = $extend(zygame_components_ZLabel.prototype,{
	onInit: function() {
		zygame_components_ZLabel.prototype.onInit.call(this);
		this.setWordWrap(false);
		this.setIsInput(true);
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly,hitObject) {
		if(this.mouseEnabled == false || this.get_visible() == false) {
			return false;
		}
		this.__point.x = 0;
		this.__point.y = 0;
		this.__point = this.localToGlobal(this.__point);
		var rect = new openfl_geom_Rectangle(this.__point.x,this.__point.y);
		this.__point.x = this._width;
		this.__point.y = this._height;
		this.__point = this.localToGlobal(this.__point);
		rect.width = this.__point.x - rect.x;
		rect.height = this.__point.y - rect.y;
		if(rect.contains(x,y)) {
			if(stack != null) {
				stack.push(this._display);
				stack.push(this);
			}
			return true;
		}
		return false;
	}
	,__class__: zygame_components_ZInputLabel
});
var zygame_components_ZScroll = function() {
	this._hMoveing = false;
	this._vMoveing = false;
	this._moveMath = 0;
	this._isMove = false;
	this._height = 0;
	this._width = 0;
	this._cutRect2 = new openfl_geom_Rectangle();
	this.disableSuperscreenEasing = false;
	this._h = 0;
	this._v = 0;
	this.slowSpeed = 0.2;
	this.hscrollState = "auto";
	this.vscrollState = "auto";
	this._bgColor = 0;
	zygame_components_base_DataProviderComponent.call(this);
	this._view = new zygame_components_ZBox();
	this._bgDisplay = new zygame_components_ZQuad();
	this._bgDisplay.set_alpha(0);
};
$hxClasses["zygame.components.ZScroll"] = zygame_components_ZScroll;
zygame_components_ZScroll.__name__ = "zygame.components.ZScroll";
zygame_components_ZScroll.__super__ = zygame_components_base_DataProviderComponent;
zygame_components_ZScroll.prototype = $extend(zygame_components_base_DataProviderComponent.prototype,{
	touchBatch: null
	,get_batch: function() {
		return this.touchBatch;
	}
	,createImageBatch: function(textures) {
		this.touchBatch = new zygame_display_batch_TouchImageBatchsContainer(textures);
		this.touchBatch.getBatchs().set_width(this.get_width());
		this.touchBatch.getBatchs().set_height(this.get_height());
		this.touchBatch.setTouchEvent(false);
		zygame_components_base_DataProviderComponent.prototype.addChildAt.call(this,this.touchBatch,1);
	}
	,_bgColor: null
	,vscrollState: null
	,hscrollState: null
	,slowSpeed: null
	,_v: null
	,_h: null
	,disableSuperscreenEasing: null
	,addChild: function(display) {
		return this._view.addChild(display);
	}
	,addChildAt: function(display,index) {
		return this._view.addChildAt(display,index);
	}
	,getIsMoveing: function() {
		if(!(Math.abs(this._movePosBegin.x - this.get_mouseX()) > 10)) {
			return Math.abs(this._movePosBegin.y - this.get_mouseY()) > 10;
		} else {
			return true;
		}
	}
	,isMoveing: function() {
		return this._moveMath != 0;
	}
	,_view: null
	,_bgDisplay: null
	,setBackgroundColor: function(u) {
		this._bgColor = u;
		this._bgDisplay.set_alpha(1);
		this._bgDisplay.set_color(u);
		this._bgDisplay.set_width(this.get_width());
		this._bgDisplay.set_height(this.get_height());
	}
	,setBackgroundAlpha: function(f) {
		this._bgDisplay.set_alpha(f);
	}
	,updateComponents: function() {
		if(this._view != null) {
			this._view.updateComponents();
		}
	}
	,initComponents: function() {
		zygame_components_base_DataProviderComponent.prototype.addChildAt.call(this,this._view,0);
		this.addComponent(this._view,"view");
		this._movePosBegin = new openfl_geom_Point();
		this._boxPosBegin = new openfl_geom_Point();
		this._movePos = new openfl_geom_Point();
		this._lastMovePos = new openfl_geom_Point();
		this.set_cutRect(new zygame_utils_Rect(0,0,this.get_width(),this.get_height()));
		zygame_components_base_DataProviderComponent.prototype.addChildAt.call(this,this._bgDisplay,0);
		this._bgDisplay.set_color(this._bgColor);
		this._bgDisplay.set_width(this.get_width());
		this._bgDisplay.set_height(this.get_height());
	}
	,_cutRect: null
	,_cutRect2: null
	,get_cutRect: function() {
		return this._cutRect;
	}
	,set_cutRect: function(rect) {
		if(this._cutRect != rect) {
			if(this._cutRect != null) {
				this._cutRect.removeEventListener("change",$bind(this,this._onSizeChange));
			}
			if(rect != null) {
				rect.addEventListener("change",$bind(this,this._onSizeChange));
			}
		}
		this._cutRect = rect;
		if(rect != null) {
			this._onSizeChange(null);
		} else {
			this.set_mask(null);
		}
		return rect;
	}
	,_onSizeChange: function(e) {
		this._cutRect2.x = -this._h;
		this._cutRect2.y = -this._v;
		this._cutRect2.width = this._cutRect.get_width();
		this._cutRect2.height = this._cutRect.get_height();
		this._view.set_scrollRect(this._cutRect2);
		if(this.get_batch() != null) {
			this.get_batch().getBatchs().getBSprite().set_y(this._v);
		}
		this.invalidate();
	}
	,_width: null
	,_height: null
	,set_width: function(value) {
		this._width = value;
		if(this._bgDisplay != null) {
			this._bgDisplay.set_width(value);
		}
		if(this.get_batch() != null) {
			this.get_batch().set_width(value);
		}
		if(this.get_cutRect() != null) {
			this.get_cutRect().set_width(value);
		}
		return value;
	}
	,set_height: function(value) {
		this._height = value;
		if(this._bgDisplay != null) {
			this._bgDisplay.set_height(value);
		}
		if(this.get_batch() != null) {
			this.get_batch().set_height(value);
		}
		if(this.get_cutRect() != null) {
			this.get_cutRect().set_height(value);
		}
		return value;
	}
	,get_width: function() {
		return this._width;
	}
	,get_height: function() {
		return this._height;
	}
	,_movePosBegin: null
	,_boxPosBegin: null
	,_isMove: null
	,_moveMath: null
	,_movePos: null
	,_lastMovePos: null
	,_vMoveing: null
	,_hMoveing: null
	,onTouchBegin: function(touch) {
		zygame_components_base_DataProviderComponent.prototype.onTouchBegin.call(this,touch);
		if(this.get_mouseX() < 0 || this.get_mouseY() < 0 || this.get_mouseX() > this.get_width() || this.get_mouseY() > this.get_height()) {
			return;
		}
		if(this.touchBatch != null) {
			this.touchBatch.onTouchBegin(touch);
		}
		if(touch.touchPointID != 0) {
			return;
		}
		this._isMove = true;
		this._boxPosBegin.x = this._h;
		this._boxPosBegin.y = this._v;
		this._movePosBegin.x = this.get_mouseX();
		this._movePosBegin.y = this.get_mouseY();
		this._lastMovePos.x = this.get_mouseX();
		this._lastMovePos.y = this.get_mouseY();
		this._movePos.x = 0;
		this._movePos.y = 0;
		this._vMoveing = true;
		this._hMoveing = true;
		if(this.get_view().get_height() < this.get_height()) {
			this._vMoveing = false;
		}
		if(this.get_view().get_width() < this.get_width()) {
			this._hMoveing = false;
		}
	}
	,onTouchMove: function(touch) {
		if(this.touchBatch != null) {
			this.touchBatch.onTouchMove(touch);
		}
		if(this._isMove && touch.touchPointID == 0 && this.getIsMoveing()) {
			if(this.hscrollState != "off" && this._hMoveing) {
				this._h = this._boxPosBegin.x - (this._movePosBegin.x - this.get_mouseX());
			}
			if(this.vscrollState != "off" && this._vMoveing) {
				this._v = this._boxPosBegin.y - (this._movePosBegin.y - this.get_mouseY());
			}
			var rx = this._lastMovePos.x - this.get_mouseX();
			var ry = this._lastMovePos.y - this.get_mouseY();
			var mx = Math.abs(rx);
			var my = Math.abs(ry);
			if(mx > 10 || my > 10) {
				this._moveMath = 5;
			}
			if(mx > Math.abs(this._movePos.x) || rx > 0 != this._movePos.x > 0) {
				var tmp = this._lastMovePos.x;
				var tmp1 = this.get_mouseX();
				this._movePos.x = tmp - tmp1;
			}
			if(my > Math.abs(this._movePos.y) || ry > 0 != this._movePos.y > 0) {
				var tmp = this._lastMovePos.y;
				var tmp1 = this.get_mouseY();
				this._movePos.y = tmp - tmp1;
			}
			this._lastMovePos.x = this.get_mouseX();
			this._lastMovePos.y = this.get_mouseY();
			this.updateDisableSuperscreenEasing();
		}
	}
	,onTouchEnd: function(touch) {
		if(this.touchBatch != null) {
			this.touchBatch.onTouchEnd(touch);
		}
		if(touch.touchPointID == 0) {
			this._isMove = false;
			if(this._moveMath == 0) {
				if((this._h | 0) > 0 || this.get_viewWidth() < this.get_width()) {
					this._moveMath = 1;
				} else if((this._h | 0) < this.get_width() - this.get_viewWidth()) {
					this._moveMath = 1;
				}
				if((this._v | 0) > 0 || this.get_viewHeight() < this.get_height()) {
					this._moveMath = 1;
				} else if((this._v | 0) < this.get_height() - this.get_viewHeight()) {
					this._moveMath = 1;
				} else {
					this._moveMath = 0;
				}
				this._movePos.x = 0;
				this._movePos.y = 0;
			}
		}
	}
	,onFrame: function() {
		if(!this._isMove && this._moveMath > 0) {
			if((this._movePos.x | 0) == 0 && (this._movePos.y | 0) == 0) {
				if(this.vscrollState != "off" && this._vMoveing) {
					if((this._v | 0) > 0 || this.get_viewHeight() < this.get_height()) {
						this._v -= this._v * this.slowSpeed;
					} else if((this._v | 0) < this.get_height() - this.get_viewHeight()) {
						this._v += (this.get_height() - this.get_viewHeight() - this._v) * this.slowSpeed;
					} else {
						this._vMoveing = false;
					}
				} else {
					this._vMoveing = false;
				}
				if(this.hscrollState != "off" && this._hMoveing) {
					if((this._h | 0) > 0 || this.get_viewWidth() < this.get_width()) {
						this._h -= this._h * this.slowSpeed;
					} else if((this._h | 0) < this.get_width() - this.get_viewWidth()) {
						this._h += (this.get_width() - this.get_viewWidth() - this._h) * this.slowSpeed;
					} else {
						this._hMoveing = false;
					}
				} else {
					this._hMoveing = false;
				}
				if(this._vMoveing == false && this._hMoveing == false) {
					this._moveMath = 0;
				}
			} else {
				if(this.hscrollState != "off" && this._hMoveing) {
					this._movePos.x -= this._movePos.x * this.slowSpeed;
					this._h -= this._movePos.x;
				} else {
					this._movePos.x = 0;
				}
				if(this.vscrollState != "off" && this._vMoveing) {
					this._movePos.y -= this._movePos.y * this.slowSpeed;
					this._v -= this._movePos.y;
				} else {
					this._movePos.y = 0;
				}
			}
			this._v = this._v | 0;
			this._h = this._h | 0;
		} else {
			this._moveMath -= this._moveMath > 0 ? 1 : 0;
		}
		this.updateDisableSuperscreenEasing();
		this._onSizeChange(null);
	}
	,updateDisableSuperscreenEasing: function() {
		if(this.disableSuperscreenEasing) {
			if(this.get_height() > this.get_viewHeight()) {
				this._v = 0;
			} else if((this._v | 0) > 0) {
				this._v = 0;
			} else if((this._v | 0) < this.get_height() - this.get_viewHeight()) {
				this._v = this.get_height() - this.get_viewHeight();
			}
			if(this.get_width() > this.get_viewWidth()) {
				this._h = 0;
			} else if((this._h | 0) > 0) {
				this._h = 0;
			} else if((this._h | 0) < this.get_width() - this.get_viewWidth()) {
				this._h = this.get_width() - this.get_viewWidth();
			}
		}
	}
	,get_viewWidth: function() {
		return this._view.get_width();
	}
	,get_viewHeight: function() {
		return this._view.get_height();
	}
	,get_vscroll: function() {
		return -this._v;
	}
	,set_vscroll: function(value) {
		this._v = -value;
		this._vMoveing = true;
		this._onSizeChange(null);
		this.updateComponents();
		return value;
	}
	,get_hscroll: function() {
		return -this._h;
	}
	,set_hscroll: function(value) {
		this._h = -value;
		this._hMoveing = true;
		this._onSizeChange(null);
		this.updateComponents();
		return value;
	}
	,get_view: function() {
		return this._view;
	}
	,get_layout: function() {
		return this._view.get_layout();
	}
	,set_layout: function(value) {
		this._view.set_layout(value);
		return value;
	}
	,onAddToStage: function() {
		this.setTouchEvent(true);
		this.setFrameEvent(true);
	}
	,onRemoveToStage: function() {
		this.setTouchEvent(false);
		this.setFrameEvent(false);
	}
	,onRemove: function() {
		zygame_components_base_DataProviderComponent.prototype.onRemove.call(this);
	}
	,__class__: zygame_components_ZScroll
	,__properties__: $extend(zygame_components_base_DataProviderComponent.prototype.__properties__,{set_layout:"set_layout",get_layout:"get_layout",get_view:"get_view",set_hscroll:"set_hscroll",get_hscroll:"get_hscroll",set_vscroll:"set_vscroll",get_vscroll:"get_vscroll",get_viewHeight:"get_viewHeight",get_viewWidth:"get_viewWidth",set_cutRect:"set_cutRect",get_cutRect:"get_cutRect",get_batch:"get_batch"})
});
var zygame_components_ZList = function() {
	this.cache = false;
	this.gap = 0;
	zygame_components_ZScroll.call(this);
};
$hxClasses["zygame.components.ZList"] = zygame_components_ZList;
zygame_components_ZList.__name__ = "zygame.components.ZList";
zygame_components_ZList.__super__ = zygame_components_ZScroll;
zygame_components_ZList.prototype = $extend(zygame_components_ZScroll.prototype,{
	gap: null
	,_itemRenders: null
	,itemRenderType: null
	,currentSelectItem: null
	,cache: null
	,initComponents: function() {
		zygame_components_ZScroll.prototype.initComponents.call(this);
		var layout2 = new zygame_components_layout_ListLayout();
		this.hscrollState = "off";
		this.get_view().set_layout(layout2);
		this.updateComponents();
		this._itemRenders = [];
	}
	,onTouchEnd: function(touch) {
		zygame_components_ZScroll.prototype.onTouchEnd.call(this,touch);
		if(js_Boot.__instanceof(touch.target,this.itemRenderType) && this.getIsMoveing() == false && this.currentSelectItem != (js_Boot.__cast(touch.target , zygame_components_base_ItemRender)).get_data()) {
			this.currentSelectItem = (js_Boot.__cast(touch.target , zygame_components_base_ItemRender)).get_data();
			this.updateAll();
			this.dispatchEvent(new openfl_events_Event("change"));
		}
	}
	,set_dataProvider: function(data) {
		if(!((data) instanceof zygame_components_data_ListData) && data != null) {
			throw haxe_Exception.thrown("ZList对象只允许使用ListData数据，请使用ListData数据进行设置。");
		}
		zygame_components_ZScroll.prototype.set_dataProvider.call(this,data);
		this.updateAll();
		return data;
	}
	,updateAll: function() {
		if(!this.cache) {
			while(this.get_view().childs.length > 0) this.removeItemRender(this.get_view().childs[0],true);
		}
		this.updateComponents();
	}
	,updateComponents: function() {
		if(this.get_view() != null) {
			if(((this.get_view().get_layout()) instanceof zygame_components_layout_ListLayout)) {
				this.get_view().updateComponents();
			} else {
				throw haxe_Exception.thrown("ZList只可以使用ListLayout布局对象，ZList在被创建出来那一刻默认就是ListLayout布局。");
			}
		}
	}
	,addChild: function(display) {
		return this.addChildAt(display,0);
	}
	,addChildAt: function(display,index) {
		throw haxe_Exception.thrown("ZList是一个列表组件，无法直接添加对象，请使用dataProvider进行管理列表");
	}
	,createItemRender: function(value) {
		if(this._itemRenders.length > 0) {
			var _g = 0;
			var _g1 = this._itemRenders;
			while(_g < _g1.length) {
				var render = _g1[_g];
				++_g;
				if(render.get_data() == value) {
					HxOverrides.remove(this._itemRenders,render);
					return render;
				}
			}
			return this._itemRenders.shift();
		}
		var item = null;
		if(this.itemRenderType != null) {
			item = Type.createInstance(this.itemRenderType,[]);
		} else {
			item = new zygame_components_base_DefalutItemRender();
		}
		if((js_Boot.__cast(this.get_layout() , zygame_components_layout_ListLayout)).direction == "vertical") {
			item.set_width(this.get_width());
		} else {
			item.set_height(this.get_height());
		}
		return item;
	}
	,removeItemRender: function(item,clearData) {
		if(clearData == null) {
			clearData = false;
		}
		if(item != null && item.parent != null) {
			if(!this.cache) {
				this._itemRenders.push(item);
				this.get_view().removeChildSuper(item);
				if(item.tileDisplayObject != null) {
					this.get_batch().getBatchs().removeTile(item.tileDisplayObject);
				}
			}
			if(clearData) {
				item.set_data(null);
			}
		}
	}
	,onFrame: function() {
		zygame_components_ZScroll.prototype.onFrame.call(this);
		if(this._vMoveing || this._hMoveing) {
			this.get_view().updateComponents();
		}
	}
	,addChildSuper: function(item) {
		zygame_components_ZScroll.prototype.addChild.call(this,item);
		if(item.tileDisplayObject != null) {
			this.get_batch().getBatchs().addChild(item.tileDisplayObject);
		}
	}
	,__class__: zygame_components_ZList
});
var zygame_components_ZMapliveScene = function(data) {
	zygame_components_ZScene.call(this);
	this._data = data;
};
$hxClasses["zygame.components.ZMapliveScene"] = zygame_components_ZMapliveScene;
zygame_components_ZMapliveScene.__name__ = "zygame.components.ZMapliveScene";
zygame_components_ZMapliveScene.__super__ = zygame_components_ZScene;
zygame_components_ZMapliveScene.prototype = $extend(zygame_components_ZScene.prototype,{
	_data: null
	,_node: null
	,initComponents: function() {
		zygame_components_ZScene.prototype.initComponents.call(this);
		this._node = new zygame_display_DisplayObjectContainer();
		this.addChild(this._node);
		var arr = this._data.getLayers();
		var _g = 0;
		var _g1 = arr.length;
		while(_g < _g1) {
			var i = _g++;
			var data = arr[i];
			var layer = new zygame_components_ZMapliveLayer(data,this._data);
			layer.set_name(data.name);
			this._node.addChild(layer);
		}
	}
	,getLayerCount: function() {
		return this._node.get_numChildren();
	}
	,getLayerAt: function(index) {
		var display = this._node.getChildAt(index);
		if(display == null) {
			return null;
		}
		return display;
	}
	,getLayer: function(name) {
		var display = this._node.getChildByName(name);
		if(display == null) {
			return null;
		}
		return display;
	}
	,getSceneData: function() {
		return this._data;
	}
	,__class__: zygame_components_ZMapliveScene
});
var zygame_components_ZMapliveLayer = function(data,sceneData) {
	zygame_display_DisplayObjectContainer.call(this);
	this._data = data;
	this.sceneData = sceneData;
	this.set_name(this._data.name);
	this.set_alpha(this._data.alpha);
	this.set_visible(this._data.visible);
};
$hxClasses["zygame.components.ZMapliveLayer"] = zygame_components_ZMapliveLayer;
zygame_components_ZMapliveLayer.__name__ = "zygame.components.ZMapliveLayer";
zygame_components_ZMapliveLayer.__super__ = zygame_display_DisplayObjectContainer;
zygame_components_ZMapliveLayer.prototype = $extend(zygame_display_DisplayObjectContainer.prototype,{
	_data: null
	,sceneData: null
	,onInit: function() {
		zygame_display_DisplayObjectContainer.prototype.onInit.call(this);
		zygame_utils_DisplayObjectUtils.createChildren(this._data.children,this,this.sceneData);
	}
	,__class__: zygame_components_ZMapliveLayer
});
var zygame_components_ZModel = function(width,height) {
	zygame_components_ZImage.call(this);
	this.set_width(width);
	this.set_height(height);
};
$hxClasses["zygame.components.ZModel"] = zygame_components_ZModel;
zygame_components_ZModel.__name__ = "zygame.components.ZModel";
zygame_components_ZModel.showTextModel = function(txt,showTime) {
	if(showTime == null) {
		showTime = 2000;
	}
	if(zygame_components_ZModel.currentModel != null) {
		zygame_components_ZModel.currentLabel.set_width(zygame_utils_Lib.int(zygame_core_Start.current.getStageWidth() * 0.8));
		zygame_components_ZModel.currentLabel.set_dataProvider(txt);
		zygame_components_ZModel.currentLabel.set_width(zygame_components_ZModel.currentLabel.getTextWidth() + 32);
		zygame_components_ZModel.currentModel.set_width(zygame_utils_Lib.int(zygame_components_ZModel.currentLabel.get_width()));
		zygame_components_ZModel.currentLabel.set_height(zygame_components_ZModel.currentLabel.getTextHeight());
		zygame_components_ZModel.currentModel.set_height(zygame_utils_Lib.int(zygame_components_ZModel.currentLabel.get_height() + 5));
		zygame_utils_Lib.clearTimeout(zygame_components_ZModel.currentCallTime);
		zygame_components_ZModel.currentCallTime = zygame_utils_Lib.setTimeout(zygame_components_ZModel.clearTextModel,showTime);
		zygame_components_ZModel.currentModel.set_x((zygame_core_Start.current.getStageWidth() - zygame_components_ZModel.currentModel.get_width()) / 2);
		zygame_components_ZModel.currentModel.set_y(zygame_core_Start.current.getStageHeight() * 0.2);
		return;
	}
	var label = new zygame_components_ZLabel();
	label.set_width(zygame_utils_Lib.int(zygame_core_Start.current.getStageWidth() * 0.8));
	label.set_hAlign("center");
	label.set_dataProvider(txt);
	label.setFontColor(16777215);
	label.setFontSize(zygame_components_ZModel.fontSize);
	label.set_width(label.getTextWidth() + 32);
	label.set_height(label.getTextHeight());
	var model = new zygame_components_ZModel(zygame_utils_Lib.int(label.get_width()),zygame_utils_Lib.int(label.get_height() + 5));
	zygame_core_Start.current.getTopView().addChild(model);
	model.set_x((zygame_core_Start.current.getStageWidth() - model.get_width()) / 2);
	model.set_y(zygame_core_Start.current.getStageHeight() * 0.2);
	model.addChild(label);
	zygame_components_ZModel.currentCallTime = zygame_utils_Lib.setTimeout(zygame_components_ZModel.clearTextModel,showTime);
	zygame_components_ZModel.currentLabel = label;
	zygame_components_ZModel.currentModel = model;
	model.display.set_alpha(0.8);
};
zygame_components_ZModel.clearTextModel = function() {
	zygame_utils_Lib.clearTimeout(zygame_components_ZModel.currentCallTime);
	zygame_components_ZModel.currentModel.parent.removeChild(zygame_components_ZModel.currentModel);
	zygame_components_ZModel.currentLabel.destroy();
	zygame_components_ZModel.currentLabel = null;
	zygame_components_ZModel.currentModel = null;
	zygame_components_ZModel.currentCallTime = -1;
};
zygame_components_ZModel.__super__ = zygame_components_ZImage;
zygame_components_ZModel.prototype = $extend(zygame_components_ZImage.prototype,{
	onInit: function() {
		var _gthis = this;
		zygame_components_ZImage.prototype.onInit.call(this);
		if(zygame_components_ZModel._modelBitmapData == null) {
			openfl_display_BitmapData.loadFromBase64(zygame_components_ZModel._modelBase64,"image/png").onComplete(function(data) {
				zygame_components_ZModel._modelBitmapData = data;
				zygame_components_ZModel._ccs = zygame_utils_Lib.cssRectangle(zygame_components_ZModel._modelBitmapData,"8 12 9 11");
				_gthis.set_dataProvider(data);
				_gthis.setScale9Grid(zygame_components_ZModel._ccs);
			});
		} else {
			this.set_dataProvider(zygame_components_ZModel._modelBitmapData);
			this.setScale9Grid(zygame_components_ZModel._ccs);
		}
	}
	,__class__: zygame_components_ZModel
});
var zygame_components_ZQuad = function() {
	this._color = 0;
	zygame_components_ZBox.call(this);
	this.display = new openfl_display_Bitmap(zygame_components_ZQuad.quadBitmapData);
	this.display.set_shader(new zygame_shader_ColorShader(0));
};
$hxClasses["zygame.components.ZQuad"] = zygame_components_ZQuad;
zygame_components_ZQuad.__name__ = "zygame.components.ZQuad";
zygame_components_ZQuad.__super__ = zygame_components_ZBox;
zygame_components_ZQuad.prototype = $extend(zygame_components_ZBox.prototype,{
	display: null
	,initComponents: function() {
		zygame_components_ZBox.prototype.initComponents.call(this);
		this.addChildAt(this.display,0);
		this.updateComponents();
	}
	,updateComponents: function() {
		(js_Boot.__cast(this.display.get_shader() , zygame_shader_ColorShader)).updateColor(this.get_color());
		this.display.set_width(this.get_width() + 1);
		this.display.set_height(this.get_height() + 1);
	}
	,_color: null
	,set_color: function(value) {
		this._color = value;
		this.updateComponents();
		return value;
	}
	,get_color: function() {
		return this._color;
	}
	,set_width: function(value) {
		zygame_components_ZBox.prototype.set_width.call(this,value);
		this.updateComponents();
		return value;
	}
	,set_height: function(value) {
		zygame_components_ZBox.prototype.set_height.call(this,value);
		this.updateComponents();
		return value;
	}
	,__class__: zygame_components_ZQuad
	,__properties__: $extend(zygame_components_ZBox.prototype.__properties__,{set_color:"set_color",get_color:"get_color"})
});
var zygame_components_ZSpine = function(atlasName,skeletionName) {
	zygame_components_ZBox.call(this);
	this.spine = zygame_components_ZBuilder.createSpineSpriteSkeleton(atlasName,skeletionName);
	if(this.spine != null) {
		this.addChild(this.spine);
	}
};
$hxClasses["zygame.components.ZSpine"] = zygame_components_ZSpine;
zygame_components_ZSpine.__name__ = "zygame.components.ZSpine";
zygame_components_ZSpine.__super__ = zygame_components_ZBox;
zygame_components_ZSpine.prototype = $extend(zygame_components_ZBox.prototype,{
	spine: null
	,get_action: function() {
		return this.spine.get_actionName();
	}
	,set_action: function(v) {
		this.spine.playForce(v,true);
		return v;
	}
	,onInit: function() {
		zygame_components_ZBox.prototype.onInit.call(this);
		this.spine.mouseEnabled = true;
	}
	,__class__: zygame_components_ZSpine
	,__properties__: $extend(zygame_components_ZBox.prototype.__properties__,{set_action:"set_action",get_action:"get_action"})
});
var zygame_components_ZTween = function(xml) {
	this.loop = 0;
	this._onFrameId = -1;
	this._isPlay = false;
	this._maxFrame = 0;
	this._crrentFrame = 0;
	this._baseFrames = [];
	this._baseXml = xml;
};
$hxClasses["zygame.components.ZTween"] = zygame_components_ZTween;
zygame_components_ZTween.__name__ = "zygame.components.ZTween";
zygame_components_ZTween.prototype = {
	_baseXml: null
	,_baseFrames: null
	,_builder: null
	,_crrentFrame: null
	,_maxFrame: null
	,_isPlay: null
	,_onFrameId: null
	,loop: null
	,bindBuilder: function(builder) {
		this._builder = builder;
		if(this._baseXml.get("auto") == "true") {
			this.play();
		}
		if(this._baseXml.exists("loop")) {
			this.loop = Std.parseInt(this._baseXml.get("loop"));
		}
		var frames = this._baseXml.elements();
		var lastStart = 0;
		while(frames.hasNext()) {
			var xml = frames.next();
			var this1 = builder.ids;
			var key = xml.get("bind");
			var tw = new zygame_components_TweenFrame(xml,this1.h[key]);
			if(!xml.exists("start")) {
				tw.start = lastStart;
			}
			lastStart = tw.end + 1;
			if(xml.exists("onend")) {
				tw.onend = builder.getFunction(xml.get("onend"));
			}
			if(xml.exists("onstart")) {
				tw.onstart = builder.getFunction(xml.get("onstart"));
			}
			if(xml.exists("onframe")) {
				tw.onframe = builder.getFunction(xml.get("onframe"));
			}
			if(tw.end > this._maxFrame) {
				this._maxFrame = tw.end;
			}
			this._baseFrames.push(tw);
		}
	}
	,nextFrame: function() {
		this._crrentFrame++;
		if(this._crrentFrame > this._maxFrame) {
			this._crrentFrame = this._maxFrame;
		}
		this.update();
	}
	,lastFrame: function() {
		this._crrentFrame--;
		if(this._crrentFrame < 0) {
			this._crrentFrame = 0;
		}
		this.update();
	}
	,play: function(frame) {
		if(frame == null) {
			frame = -1;
		}
		if(frame >= 0) {
			this._crrentFrame = frame;
		}
		if(!this._isPlay) {
			this._isPlay = true;
			if(this._crrentFrame >= this._maxFrame || this._crrentFrame < 0) {
				this._crrentFrame = 0;
			}
			this._onFrameId = zygame_utils_Lib.setInterval($bind(this,this.onFrame));
		}
	}
	,getFrameList: function() {
		return this._baseFrames;
	}
	,onFrame: function() {
		this._crrentFrame++;
		if(this._crrentFrame > this._maxFrame) {
			if(this._isPlay) {
				this._crrentFrame--;
				if(this.loop <= 0) {
					this.stop();
					return;
				} else {
					this.loop--;
				}
			}
			this._crrentFrame = 0;
		}
		this.update();
	}
	,update: function() {
		var _g = 0;
		var _g1 = this._baseFrames;
		while(_g < _g1.length) {
			var frame = _g1[_g];
			++_g;
			frame.update(this._crrentFrame);
		}
	}
	,stop: function() {
		if(this._onFrameId != -1) {
			zygame_utils_Lib.clearInterval(this._onFrameId);
		}
		this._isPlay = false;
	}
	,__class__: zygame_components_ZTween
};
var zygame_components_TweenFrame = function(tween,bind) {
	this.lastFrame = 0;
	this._canUpdateData = false;
	this.bind = null;
	this.key = "";
	this.to = 0;
	this.from = 0;
	this.type = null;
	this.end = 0;
	this.start = 0;
	this.bind = bind;
	this.key = tween.get("key");
	this._baseXml = tween;
	this.start = Std.parseInt(tween.get("start"));
	this.end = Std.parseInt(tween.get("end"));
	this.updateData();
};
$hxClasses["zygame.components.TweenFrame"] = zygame_components_TweenFrame;
zygame_components_TweenFrame.__name__ = "zygame.components.TweenFrame";
zygame_components_TweenFrame.prototype = {
	start: null
	,end: null
	,type: null
	,from: null
	,to: null
	,key: null
	,bind: null
	,_canUpdateData: null
	,_baseXml: null
	,onend: null
	,onstart: null
	,onframe: null
	,lastFrame: null
	,updateData: function() {
		this._canUpdateData = false;
		var _this = this._baseXml;
		if(_this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element but found " + (_this.nodeType == null ? "null" : XmlType.toString(_this.nodeType)));
		}
		if(_this.nodeName == "add") {
			this.from = this._baseXml.exists("from") ? Reflect.getProperty(this.bind,this.key) + parseFloat(this._baseXml.get("from")) : Reflect.getProperty(this.bind,this.key);
			this.to = Reflect.getProperty(this.bind,this.key) + parseFloat(this._baseXml.get("to"));
			this.type = this._baseXml.get("type");
		} else {
			this.from = this._baseXml.exists("from") ? parseFloat(this._baseXml.get("from")) : Reflect.getProperty(this.bind,this.key);
			this.to = parseFloat(this._baseXml.get("to"));
			this.type = this._baseXml.get("type");
		}
	}
	,update: function(frame) {
		if(this.lastFrame == frame) {
			return;
		}
		this.lastFrame = frame;
		var timeline = this.end;
		if(frame >= this.start && frame <= this.end) {
			if(this._canUpdateData || frame == this.start + 1) {
				this.updateData();
			}
			timeline = (frame - this.start) / (timeline - this.start);
			if(frame == this.end && this.onend != null) {
				this.onend();
			}
			if(frame == this.start && this.onstart != null) {
				this.onstart();
			}
			if(this.onframe != null) {
				this.onframe();
			}
		} else {
			this._canUpdateData = true;
			return;
		}
		if(this.type == "backOut") {
			var t = timeline;
			var rate = t == 0 ? 0 : t == 1 ? 1 : --t * t * (2.70158 * t + 1.70158) + 1;
			Reflect.setProperty(this.bind,this.key,this.from * (1 - rate) + this.to * rate);
		} else {
			Reflect.setProperty(this.bind,this.key,this.from * (1 - timeline) + this.to * timeline);
		}
	}
	,__class__: zygame_components_TweenFrame
};
var zygame_components_base_ItemRender = function() {
	zygame_components_ZBox.call(this);
	this.set_visible(false);
};
$hxClasses["zygame.components.base.ItemRender"] = zygame_components_base_ItemRender;
zygame_components_base_ItemRender.__name__ = "zygame.components.base.ItemRender";
zygame_components_base_ItemRender.__super__ = zygame_components_ZBox;
zygame_components_base_ItemRender.prototype = $extend(zygame_components_ZBox.prototype,{
	_data: null
	,tileDisplayObject: null
	,get_data: function() {
		return this._data;
	}
	,set_data: function(value) {
		this._data = value;
		this.set_visible(this._data != null);
		return this._data;
	}
	,_selected: null
	,get_selected: function() {
		return this._selected;
	}
	,set_selected: function(bool) {
		this._selected = bool;
		return this._selected;
	}
	,addTile: function(tile) {
		if(this.tileDisplayObject == null) {
			this.tileDisplayObject = new zygame_display_batch_BBox();
		}
		this.tileDisplayObject.addTile(tile);
	}
	,__class__: zygame_components_base_ItemRender
	,__properties__: $extend(zygame_components_ZBox.prototype.__properties__,{set_selected:"set_selected",get_selected:"get_selected",set_data:"set_data",get_data:"get_data"})
});
var zygame_components_base_DefalutItemRender = function() {
	zygame_components_base_ItemRender.call(this);
	this.set_height(100);
	this.log("defalut");
};
$hxClasses["zygame.components.base.DefalutItemRender"] = zygame_components_base_DefalutItemRender;
zygame_components_base_DefalutItemRender.__name__ = "zygame.components.base.DefalutItemRender";
zygame_components_base_DefalutItemRender.__super__ = zygame_components_base_ItemRender;
zygame_components_base_DefalutItemRender.prototype = $extend(zygame_components_base_ItemRender.prototype,{
	_text: null
	,initComponents: function() {
		zygame_components_base_ItemRender.prototype.initComponents.call(this);
		this._text = new zygame_components_ZLabel();
		this.addChild(this._text);
		this._text.set_dataProvider("test");
		this._text.set_width(100);
		this._text.set_height(100);
		this._text.setFontColor(0);
		this._text.setFontSize(32);
	}
	,set_data: function(value) {
		zygame_components_base_ItemRender.prototype.set_data.call(this,value);
		if(value != null) {
			this._text.set_dataProvider(value);
		}
		return this._data;
	}
	,__class__: zygame_components_base_DefalutItemRender
});
var zygame_components_renders_text_HTML5CacheTextFieldBitmapData = function() {
	this._maxWidth = 0;
	this._maxHeight = 0;
	this._fillTextCommand = null;
	this.isZh = false;
	this.line = 1;
	this.drawTime = 0;
	this.drawText = "";
	this.gapHeight = 20;
	this.rects = new haxe_ds_StringMap();
	this._text = "";
	this.wordWrap = false;
	this.mouseEnabled = false;
	this.selectable = false;
	this.height = 0;
	this.width = 0;
};
$hxClasses["zygame.components.renders.text.HTML5CacheTextFieldBitmapData"] = zygame_components_renders_text_HTML5CacheTextFieldBitmapData;
zygame_components_renders_text_HTML5CacheTextFieldBitmapData.__name__ = "zygame.components.renders.text.HTML5CacheTextFieldBitmapData";
zygame_components_renders_text_HTML5CacheTextFieldBitmapData.prototype = {
	width: null
	,height: null
	,selectable: null
	,mouseEnabled: null
	,wordWrap: null
	,textFormat: null
	,_text: null
	,bitmapData: null
	,canvas: null
	,context2d: null
	,rects: null
	,gapHeight: null
	,id: null
	,drawText: null
	,drawTime: null
	,line: null
	,isZh: null
	,_fillTextCommand: null
	,_maxHeight: null
	,_maxWidth: null
	,setTextFormat: function(format) {
		this.textFormat = format;
	}
	,set_text: function(text) {
		this.isZh = false;
		text = StringTools.replace(text," ","") + " ";
		if(this._text == text) {
			return text;
		}
		this._text = text;
		this.render();
		return this._text;
	}
	,get_text: function() {
		return this._text;
	}
	,getCharBoundaries: function(index,isEmoj) {
		if(isEmoj == null) {
			isEmoj = false;
		}
		if(isEmoj) {
			return this.rects.h[this._text.charAt(index - 1) + this._text.charAt(index)];
		}
		return this.rects.h[this._text.charAt(index)];
	}
	,updateMaxWidthAndHeight: function(rect) {
		if(this._maxWidth < rect.x + rect.width) {
			this._maxWidth = rect.x + rect.width | 0;
		}
		if(this._maxHeight < rect.y + rect.height) {
			this._maxHeight = rect.y + rect.height | 0;
		}
		return rect;
	}
	,render: function() {
		this._fillTextCommand = [];
		this.line = 1;
		this.drawTime = 0;
		this.disposeSelf();
		this.canvas = window.document.createElement("canvas");
		this.context2d = this.canvas.getContext("2d",null);
		this.context2d.clearRect(0,0,4096,4096);
		this.context2d.font = this.textFormat.size + "px " + (this.textFormat.font == null ? "'sans-serif'" : this.textFormat.font);
		var r = this.textFormat.color >> 16 & 255;
		var g = this.textFormat.color >> 8 & 255;
		var b = this.textFormat.color & 255;
		this.context2d.fillStyle = "rgb(" + r + "," + g + "," + b + ")";
		var height = this.textFormat.size;
		var px = 3;
		var req = new EReg("[\\ud04e-\\ue50e]+","");
		var emoj = "";
		var bwidth = this.context2d.measureText(" ").width;
		this._maxWidth = 0;
		this._maxHeight = 0;
		var _g = 0;
		var _g1 = this._text.length;
		while(_g < _g1) {
			var i = _g++;
			var char = this._text.charAt(i);
			if(this.isZh == false) {
				var code = HxOverrides.cca(this._text,i);
				if(code >= 19968) {
					this.isZh = true;
					this.flushText();
					px = 3;
					this.line++;
				}
			}
			var width = this.context2d.measureText(char).width;
			if(px + width + 15 > 2048) {
				this.flushText();
				px = 3;
				this.line++;
			}
			if(req.match(char)) {
				emoj += char;
				if(emoj.length == 2) {
					width = this.context2d.measureText(emoj).width;
					this.drawText += emoj;
					var this1 = this.rects;
					var value = this.updateMaxWidthAndHeight(new openfl_geom_Rectangle(px,(this.line - 1) * (height + this.gapHeight) + this.gapHeight,width,height + this.gapHeight));
					this1.h[emoj] = value;
					emoj = "";
					px += width;
				}
			} else {
				if(this.isZh) {
					this.drawText += char + " ";
					var this2 = this.rects;
					var value1 = this.updateMaxWidthAndHeight(new openfl_geom_Rectangle(px - bwidth * 0.125,(this.line - 1) * (height + this.gapHeight) + this.gapHeight,width + bwidth * 0.25,height + this.gapHeight));
					this2.h[char] = value1;
				} else {
					this.drawTime++;
					var this3 = this.rects;
					var value2 = this.updateMaxWidthAndHeight(new openfl_geom_Rectangle(px - bwidth * 0.125,(this.line - 1) * (height + this.gapHeight) + this.gapHeight,width + bwidth * 0.25,height + this.gapHeight));
					this3.h[char] = value2;
					this._fillTextCommand.push(new zygame_components_renders_text_FillTextCommand(char,px,this.line * (this.textFormat.size + this.gapHeight)));
				}
				px += width + bwidth;
			}
			if(this.drawText.length != 0 && i == this._text.length - 1) {
				this.flushText();
			}
		}
		var ratio = this.line * (height + this.gapHeight) / 2048 * 100 | 0;
		this.height = this._maxHeight;
		this.width = this._maxWidth;
		this.canvas.width = this.width;
		this.canvas.height = this.height;
		this.bitmapData = openfl_display_BitmapData.fromCanvas(this.canvas);
		this.context2d.font = this.textFormat.size + "px " + (this.textFormat.font == null ? "'sans-serif'" : this.textFormat.font);
		this.context2d.fillStyle = "rgb(" + r + "," + g + "," + b + ")";
		var _g = 0;
		var _g1 = this._fillTextCommand;
		while(_g < _g1.length) {
			var command = _g1[_g];
			++_g;
			command.draw(this.context2d);
		}
		this._fillTextCommand = null;
		haxe_Log.trace("HTMLCacheText ID \"" + this.id + "\" ratio:" + ratio + "% chars:" + this._text.length + " drawtime:" + this.drawTime,{ fileName : "Source/zygame/components/renders/text/HTML5CacheTextFieldBitmapData.hx", lineNumber : 212, className : "zygame.components.renders.text.HTML5CacheTextFieldBitmapData", methodName : "render"});
	}
	,flushText: function() {
		this.drawTime++;
		this._fillTextCommand.push(new zygame_components_renders_text_FillTextCommand(this.drawText,3,this.line * (this.textFormat.size + this.gapHeight)));
		this.drawText = "";
	}
	,dispose: function() {
		this.disposeSelf();
		this.rects = null;
		haxe_Log.trace("cacheText id(" + this.id + ")清理HTML5CacheTextFieldBitmapData",{ fileName : "Source/zygame/components/renders/text/HTML5CacheTextFieldBitmapData.hx", lineNumber : 226, className : "zygame.components.renders.text.HTML5CacheTextFieldBitmapData", methodName : "dispose"});
	}
	,disposeSelf: function() {
		if(this.context2d != null) {
			this.context2d.clearRect(0,0,4096,4096);
			if(this.context2d.cleanup != null) {
				this.context2d.cleanup();
			}
		}
		if(this.canvas != null && this.canvas.cleanup != null) {
			this.canvas.cleanup();
		}
		this.canvas = null;
		this.context2d = null;
		if(this.bitmapData != null) {
			haxe_Log.trace("cacheText disposeBitmapData ZGC " + this.id,{ fileName : "Source/zygame/components/renders/text/HTML5CacheTextFieldBitmapData.hx", lineNumber : 250, className : "zygame.components.renders.text.HTML5CacheTextFieldBitmapData", methodName : "disposeSelf"});
			zygame_utils_ZGC.disposeBitmapData(this.bitmapData);
			this.bitmapData = null;
		}
	}
	,__class__: zygame_components_renders_text_HTML5CacheTextFieldBitmapData
	,__properties__: {set_text:"set_text",get_text:"get_text"}
};
var zygame_components_base_ZCacheTextField = function(id,fontName,fontsize,color) {
	if(color == null) {
		color = 16777215;
	}
	this.cacheAutoWrap = false;
	zygame_components_renders_text_HTML5CacheTextFieldBitmapData.call(this);
	this.id = id;
	this._color = color;
	this.width = 2000;
	this.height = 4000;
	this._lineCount = UInt.toFloat(this.width) / UInt.toFloat(fontsize * 2) | 0;
	this.selectable = false;
	this.mouseEnabled = false;
	var f = new openfl_text_TextFormat();
	f.size = fontsize;
	f.color = color;
	f.font = fontName;
	this.wordWrap = true;
	this.setTextFormat(f);
};
$hxClasses["zygame.components.base.ZCacheTextField"] = zygame_components_base_ZCacheTextField;
zygame_components_base_ZCacheTextField.__name__ = "zygame.components.base.ZCacheTextField";
zygame_components_base_ZCacheTextField.__super__ = zygame_components_renders_text_HTML5CacheTextFieldBitmapData;
zygame_components_base_ZCacheTextField.prototype = $extend(zygame_components_renders_text_HTML5CacheTextFieldBitmapData.prototype,{
	_atlas: null
	,_xml: null
	,_color: null
	,cacheAutoWrap: null
	,_lineCount: null
	,set_text: function(value) {
		value = this.deWeighting(value);
		if(this.get_text() == value) {
			return value;
		}
		zygame_components_renders_text_HTML5CacheTextFieldBitmapData.prototype.set_text.call(this,value);
		var xml = Xml.createDocument();
		var atlas = Xml.createElement("TextureAtlas");
		xml.insertChild(atlas,0);
		value = this.get_text();
		var req = new EReg("[\\ud04e-\\ue50e]+","");
		var emoj = "";
		var isEmoj = false;
		var _g = 0;
		var _g1 = value.length;
		while(_g < _g1) {
			var i = _g++;
			var data = value.charAt(i);
			if(req.match(data)) {
				emoj += data;
				if(emoj.length == 2) {
					isEmoj = true;
					data = emoj;
					emoj = "";
				} else {
					continue;
				}
			}
			var rect = this.getCharBoundaries(i,isEmoj);
			isEmoj = false;
			if(data == " ") {
				continue;
			}
			if(rect == null) {
				continue;
			}
			var rectXml = Xml.createElement("SubTexture");
			rectXml.set("name",data);
			rectXml.set("x",Std.string(rect.x + 1));
			rectXml.set("width",Std.string(rect.width - 2));
			if(this.cacheAutoWrap) {
				rectXml.set("y",Std.string(rect.y - 2));
				rectXml.set("height",Std.string(rect.height + 4));
			} else {
				rectXml.set("y",Std.string(rect.y + 1));
				rectXml.set("height",Std.string(rect.height - 2));
			}
			atlas.insertChild(rectXml,0);
		}
		var bdata = this.bitmapData;
		if(this._atlas != null) {
			this._atlas.updateAtlas(bdata,xml);
		} else {
			this._atlas = new zygame_utils_load_TextTextureAtlas(bdata,xml,this._color);
		}
		this._atlas.isTextAtlas = true;
		return value;
	}
	,getAtlas: function() {
		return this._atlas;
	}
	,deWeighting: function(value) {
		var emoj = "";
		var req = new EReg("[\\ud04e-\\ue50e]+","");
		var array = [];
		var newvalue = "";
		var _g = 0;
		var _g1 = value.length;
		while(_g < _g1) {
			var i = _g++;
			var str = value.charAt(i);
			if(str == " ") {
				continue;
			}
			if(HxOverrides.cca(str,0) > 800 && HxOverrides.cca(str,0) < 900) {
				continue;
			}
			if(req.match(str)) {
				emoj += str;
			} else if(array.indexOf(str) == -1) {
				array.push(str);
			}
		}
		array.sort(function(a,b) {
			if(HxOverrides.cca(a,0) > HxOverrides.cca(b,0)) {
				return 1;
			} else {
				return -1;
			}
		});
		var _g = 0;
		var _g1 = array.length;
		while(_g < _g1) {
			var i = _g++;
			var space = " ";
			newvalue += array[i] + space;
			if(this.cacheAutoWrap && i % this._lineCount == 0) {
				newvalue += "\n\n";
			}
		}
		value = newvalue + "\n\n" + emoj;
		value = StringTools.replace(value," ️","");
		return value;
	}
	,dispose: function() {
		this._xml = null;
		this._atlas.dispose();
		this._atlas = null;
		zygame_components_renders_text_HTML5CacheTextFieldBitmapData.prototype.dispose.call(this);
	}
	,__class__: zygame_components_base_ZCacheTextField
});
var zygame_components_base_ZConfig = function() { };
$hxClasses["zygame.components.base.ZConfig"] = zygame_components_base_ZConfig;
zygame_components_base_ZConfig.__name__ = "zygame.components.base.ZConfig";
var zygame_components_base_ZTextField = function() {
	openfl_text_TextField.call(this);
};
$hxClasses["zygame.components.base.ZTextField"] = zygame_components_base_ZTextField;
zygame_components_base_ZTextField.__name__ = "zygame.components.base.ZTextField";
zygame_components_base_ZTextField.__super__ = openfl_text_TextField;
zygame_components_base_ZTextField.prototype = $extend(openfl_text_TextField.prototype,{
	__cleanup: function() {
		
        if(this.__graphics != null && this.__graphics.__bitmap != null)
        {
            if(this.__graphics.__bitmap.__texture != null)
            {
                this.__graphics.__bitmap.__texture.dispose();
                this.__graphics.__bitmap.__texture = null;
            }
            this.__graphics.__bitmap.dispose();
        }
        if(this.__graphics != null && this.__graphics.__canvas != null && this.__graphics.__canvas.cleanup != null)
            this.__graphics.__canvas.cleanup();
		openfl_text_TextField.prototype.__cleanup.call(this);
	}
	,__enableInput: function() {
		if(!zygame_components_base_ZTextField.initTextFieldWindow) {
			zygame_components_base_ZTextField.initTextFieldWindow = true;
			window.document.addEventListener("compositionstart",function(e) {
				if(zygame_components_base_ZTextField.compositionstart == false) {
					zygame_components_base_ZTextField.compositionstart = true;
				}
			});
		}
		openfl_text_TextField.prototype.__enableInput.call(this);
	}
	,window_onTextInput: function(value) {
		if(zygame_components_base_ZTextField.compositionstart) {
			zygame_components_base_ZTextField.compositionstart = false;
			return;
		}
		openfl_text_TextField.prototype.window_onTextInput.call(this,value);
	}
	,set_text: function(value) {
		if(this.get_text() != value) {
			openfl_text_TextField.prototype.set_text.call(this,value);
		}
		return value;
	}
	,__class__: zygame_components_base_ZTextField
});
var zygame_components_data_AnimationData = function(curfps) {
	this.frames = [];
	this.fps = new zygame_utils_FPSUtil(curfps);
	this._frame = 0;
};
$hxClasses["zygame.components.data.AnimationData"] = zygame_components_data_AnimationData;
zygame_components_data_AnimationData.__name__ = "zygame.components.data.AnimationData";
zygame_components_data_AnimationData.prototype = {
	frames: null
	,fps: null
	,_frame: null
	,update: function() {
		return this.fps.update();
	}
	,getFrame: function(frame) {
		if(frame < this.frames.length) {
			return this.frames[frame];
		}
		return null;
	}
	,addFrame: function(bitmapData,delayFrame,call) {
		if(delayFrame == null) {
			delayFrame = 0;
		}
		var frameData = new zygame_components_data_FrameData(bitmapData,delayFrame);
		this.frames.push(frameData);
		if(call != null) {
			frameData.call = call;
		}
	}
	,addFrames: function(arr) {
		var _g = 0;
		var _g1 = arr.length;
		while(_g < _g1) {
			var i = _g++;
			this.addFrame(arr[i]);
		}
	}
	,setFrameDelay: function(frame,delayFrame) {
		this.frames[frame].delayFrame = delayFrame;
	}
	,setFrameCall: function(frame,call) {
		this.frames[frame].call = call;
	}
	,__class__: zygame_components_data_AnimationData
};
var zygame_components_data_FrameData = function(bitmapData,delayFrame) {
	this.bitmapData = bitmapData;
	this.delayFrame = delayFrame;
};
$hxClasses["zygame.components.data.FrameData"] = zygame_components_data_FrameData;
zygame_components_data_FrameData.__name__ = "zygame.components.data.FrameData";
zygame_components_data_FrameData.prototype = {
	bitmapData: null
	,delayFrame: null
	,call: null
	,tryCall: function() {
		if(this.call != null) {
			this.call();
		}
	}
	,__class__: zygame_components_data_FrameData
};
var zygame_components_data_ListData = function(arr) {
	this._data = arr != null ? arr : [];
};
$hxClasses["zygame.components.data.ListData"] = zygame_components_data_ListData;
zygame_components_data_ListData.__name__ = "zygame.components.data.ListData";
zygame_components_data_ListData.prototype = {
	_data: null
	,get_length: function() {
		return this._data.length;
	}
	,addItem: function(data) {
		this._data.push(data);
	}
	,getItem: function(index) {
		return this._data[index];
	}
	,remove: function(index) {
		if(this._data.length == 0) {
			return null;
		}
		return this._data.splice(index,1)[0];
	}
	,__class__: zygame_components_data_ListData
	,__properties__: {get_length:"get_length"}
};
var zygame_components_input_HTML5TextInput = function() { };
$hxClasses["zygame.components.input.HTML5TextInput"] = zygame_components_input_HTML5TextInput;
zygame_components_input_HTML5TextInput.__name__ = "zygame.components.input.HTML5TextInput";
zygame_components_input_HTML5TextInput.openInput = function(input) {
	zygame_components_input_HTML5TextInput.zinput = input;
	var point = input.localToGlobal(new openfl_geom_Point(0,0));
	if(zygame_components_input_HTML5TextInput.textureArea == null) {
		zygame_components_input_HTML5TextInput.textureArea = window.document.createElement("textarea");
		zygame_components_input_HTML5TextInput.textureArea.style.position = "absolute";
		zygame_components_input_HTML5TextInput.textureArea.style.bottom = "0px";
		zygame_components_input_HTML5TextInput.textureArea.style.left = "0px";
		zygame_components_input_HTML5TextInput.textureArea.style.width = "100%";
		zygame_components_input_HTML5TextInput.textureArea.style.height = "36px";
		zygame_components_input_HTML5TextInput.textureArea.style.fontSize = "24px";
		if(zygame_utils_Lib.isPc()) {
			zygame_components_input_HTML5TextInput.textureArea.style.zIndex = "-1";
		}
		zygame_components_input_HTML5TextInput.textureArea.oninput = zygame_components_input_HTML5TextInput.onInput;
		window.document.getElementsByTagName("html")[0].appendChild(zygame_components_input_HTML5TextInput.textureArea);
		window.document.onresize = zygame_components_input_HTML5TextInput.onResize;
	}
	zygame_components_input_HTML5TextInput.textureArea.value = zygame_components_input_HTML5TextInput.zinput.get_dataProvider();
	zygame_components_input_HTML5TextInput.textureArea.style.visibility = "visible";
	zygame_components_input_HTML5TextInput.textureArea.focus();
};
zygame_components_input_HTML5TextInput.onResize = function() {
	if($global.navigator.userAgent.indexOf("Android") != -1) {
		window.addEventListener("resize",function() {
			if(window.document.activeElement.tagName == "INPUT" || window.document.activeElement.tagName == "TEXTAREA") {
				window.setTimeout(function() {
					window.document.activeElement.scrollIntoViewIfNeeded();
				},0);
			}
		});
	}
};
zygame_components_input_HTML5TextInput.onInput = function() {
	if(zygame_components_input_HTML5TextInput.zinput == null) {
		return;
	}
	zygame_components_input_HTML5TextInput.zinput.set_dataProvider(HxOverrides.substr(zygame_components_input_HTML5TextInput.textureArea.value,0,zygame_components_input_HTML5TextInput.zinput.getDisplay().get_maxChars() == 0 ? 99999 : zygame_components_input_HTML5TextInput.zinput.getDisplay().get_maxChars()));
};
zygame_components_input_HTML5TextInput.closeInput = function() {
	zygame_components_input_HTML5TextInput.zinput = null;
	if(zygame_components_input_HTML5TextInput.textureArea != null) {
		zygame_components_input_HTML5TextInput.textureArea.style.visibility = "hidden";
	}
};
var zygame_components_layout_BaseLayout = function() {
};
$hxClasses["zygame.components.layout.BaseLayout"] = zygame_components_layout_BaseLayout;
zygame_components_layout_BaseLayout.__name__ = "zygame.components.layout.BaseLayout";
zygame_components_layout_BaseLayout.prototype = {
	layout: function(component) {
	}
	,__class__: zygame_components_layout_BaseLayout
};
var zygame_components_layout_FlowLayout = function() {
	this.direction = "horizontal";
	zygame_components_layout_BaseLayout.call(this);
};
$hxClasses["zygame.components.layout.FlowLayout"] = zygame_components_layout_FlowLayout;
zygame_components_layout_FlowLayout.__name__ = "zygame.components.layout.FlowLayout";
zygame_components_layout_FlowLayout.__super__ = zygame_components_layout_BaseLayout;
zygame_components_layout_FlowLayout.prototype = $extend(zygame_components_layout_BaseLayout.prototype,{
	direction: null
	,layout: function(box) {
		if(this.direction == "horizontal") {
			this.layoutHorizontal(box);
		} else {
			this.layoutVertical(box);
		}
	}
	,layoutHorizontal: function(box) {
		if(box.isAutoWidth()) {
			throw haxe_Exception.thrown("未对ZBox对象设置实际宽度，无法使用FlowLayout布局。");
		}
		var ix = 0;
		var max = 0;
		var iy = 0;
		var child;
		var _g = 0;
		var _g1 = box.childs.length;
		while(_g < _g1) {
			var i = _g++;
			child = box.childs[i];
			if(ix + child.get_width() > box.get_width()) {
				ix = 0;
				iy += max;
				max = 0;
				child.set_x(ix);
				child.set_y(iy);
			} else {
				child.set_x(ix);
				child.set_y(iy);
				ix += child.get_width();
				if(child.get_height() > max) {
					max = child.get_height();
				}
			}
		}
	}
	,layoutVertical: function(box) {
		if(box.isAutoHeight()) {
			throw haxe_Exception.thrown("未对ZBox对象设置实际高度，无法使用FlowLayout布局。");
		}
		var ix = 0;
		var max = 0;
		var iy = 0;
		var child;
		var _g = 0;
		var _g1 = box.childs.length;
		while(_g < _g1) {
			var i = _g++;
			child = box.childs[i];
			if(iy + child.get_height() > box.get_height()) {
				iy = 0;
				ix += max;
				max = 0;
				child.set_x(ix);
				child.set_y(iy);
			} else {
				child.set_x(ix);
				child.set_y(iy);
				iy += child.get_height();
				if(child.get_width() > max) {
					max = child.get_width();
				}
			}
		}
	}
	,__class__: zygame_components_layout_FlowLayout
});
var zygame_components_layout_FreeLayout = function() {
	zygame_components_layout_BaseLayout.call(this);
};
$hxClasses["zygame.components.layout.FreeLayout"] = zygame_components_layout_FreeLayout;
zygame_components_layout_FreeLayout.__name__ = "zygame.components.layout.FreeLayout";
zygame_components_layout_FreeLayout.__super__ = zygame_components_layout_BaseLayout;
zygame_components_layout_FreeLayout.prototype = $extend(zygame_components_layout_BaseLayout.prototype,{
	layout: function(box) {
		var _g = 0;
		var _g1 = box.childs.length;
		while(_g < _g1) {
			var i = _g++;
			if(((box.childs[i]) instanceof zygame_components_base_Component)) {
				var c = box.childs[i];
				if(c.hasLayoutData()) {
					if(c.get_layoutData().left != null && c.get_layoutData().right != null) {
						c.set_x(c.get_layoutData().left);
						c.set_width(box.get_width() - c.get_layoutData().right - c.get_x());
					} else if(c.get_layoutData().left != null) {
						c.set_x(c.get_layoutData().left);
					} else if(c.get_layoutData().right != null) {
						c.set_x(box.get_width() - c.get_layoutData().right);
					} else if(c.get_layoutData().centerX != null) {
						c.set_x(box.get_width() / 2 - c.get_width() / 2 + c.get_layoutData().centerX);
					}
					if(c.get_layoutData().top != null && c.get_layoutData().bottom != null) {
						c.set_y(c.get_layoutData().top);
						c.set_height(box.get_height() - c.get_layoutData().bottom - c.get_y());
					} else if(c.get_layoutData().top != null) {
						c.set_y(c.get_layoutData().top);
					} else if(c.get_layoutData().bottom != null) {
						c.set_y(box.get_height() - c.get_layoutData().bottom);
					} else if(c.get_layoutData().centerY != null) {
						c.set_x(box.get_height() / 2 - c.get_height() / 2 + c.get_layoutData().centerY);
					}
				}
			}
		}
	}
	,__class__: zygame_components_layout_FreeLayout
});
var zygame_components_layout_HLayout = function() {
	zygame_components_layout_BaseLayout.call(this);
};
$hxClasses["zygame.components.layout.HLayout"] = zygame_components_layout_HLayout;
zygame_components_layout_HLayout.__name__ = "zygame.components.layout.HLayout";
zygame_components_layout_HLayout.__super__ = zygame_components_layout_BaseLayout;
zygame_components_layout_HLayout.prototype = $extend(zygame_components_layout_BaseLayout.prototype,{
	gap: null
	,layout: function(box) {
		var ix = 0;
		var _g = 0;
		var _g1 = box.childs.length;
		while(_g < _g1) {
			var i = _g++;
			box.childs[i].set_x(ix);
			box.childs[i].set_y(box.get_height() / 2 - box.childs[i].get_height() / 2);
			ix += this.gap + box.childs[i].get_width();
		}
	}
	,__class__: zygame_components_layout_HLayout
});
var zygame_components_layout_ListLayout = function() {
	this.direction = "vertical";
	this.virtualHeight = 0;
	this.virtualWidth = 0;
	zygame_components_layout_BaseLayout.call(this);
};
$hxClasses["zygame.components.layout.ListLayout"] = zygame_components_layout_ListLayout;
zygame_components_layout_ListLayout.__name__ = "zygame.components.layout.ListLayout";
zygame_components_layout_ListLayout.__super__ = zygame_components_layout_BaseLayout;
zygame_components_layout_ListLayout.prototype = $extend(zygame_components_layout_BaseLayout.prototype,{
	virtualWidth: null
	,virtualHeight: null
	,direction: null
	,layout: function(box) {
		if(((box.parent) instanceof zygame_components_ZList)) {
			if(this.direction == "vertical") {
				this.layoutListV(box.parent);
			} else if(this.direction == "horizontal") {
				this.layoutListH(box.parent);
			}
		} else {
			throw haxe_Exception.thrown("ListLayout布局只能在ZList中使用，如果需要竖向/横向布局，请使用VLayout或者HLayout。");
		}
	}
	,layoutListV: function(list) {
		var data = list.get_dataProvider();
		if(data == null) {
			return;
		}
		var itemOnw = this.virtualHeight == 0 ? list.createItemRender(null) : null;
		if(itemOnw != null) {
			list.get_view().addChildSuper(itemOnw);
			if(itemOnw.tileDisplayObject != null) {
				list.get_batch().getBatchs().addChild(itemOnw.tileDisplayObject);
			}
			this.virtualHeight = itemOnw.get_height() + list.gap;
			if(list.cache == false) {
				list.removeItemRender(itemOnw);
			}
		}
		list.get_view().set_height(data.get_length() * this.virtualHeight);
		var startIndex = list.get_vscroll() / this.virtualHeight | 0;
		if(startIndex < 0) {
			startIndex = 0;
		}
		var endIndex = (list.get_height() / this.virtualHeight | 0) + 1;
		if(endIndex > data.get_length() - startIndex - 1 || endIndex + startIndex > data.get_length()) {
			endIndex = data.get_length() - startIndex - 1;
		}
		endIndex += startIndex;
		var count = list.cache ? startIndex : 0;
		var index = startIndex;
		var _g = 0;
		var _g1 = list.get_view().childs;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			c.set_visible(false);
			if((js_Boot.__cast(c , zygame_components_base_ItemRender)).tileDisplayObject != null) {
				(js_Boot.__cast(c , zygame_components_base_ItemRender)).tileDisplayObject.set_visible(false);
			}
		}
		while(index <= endIndex) {
			var itemdata = data.getItem(index);
			if(count >= list.get_view().childs.length) {
				var item = list.createItemRender(itemdata);
				item.set_visible(true);
				list.addChildSuper(item);
				item.set_y(this.virtualHeight * index);
				if(item.tileDisplayObject != null) {
					item.tileDisplayObject.set_y(item.get_y());
					item.tileDisplayObject.set_visible(true);
				}
				this.updateData(item,itemdata,list.currentSelectItem != null && list.currentSelectItem == data.getItem(index));
			} else {
				var itemCopy = list.get_view().childs[count];
				itemCopy.set_y(this.virtualHeight * index);
				itemCopy.set_visible(true);
				if(itemCopy.tileDisplayObject != null) {
					itemCopy.tileDisplayObject.set_y(itemCopy.get_y());
					itemCopy.tileDisplayObject.set_visible(true);
				}
				this.updateData(itemCopy,itemdata,list.currentSelectItem != null && list.currentSelectItem == data.getItem(index));
			}
			++count;
			++index;
			if(count >= data.get_length()) {
				break;
			}
		}
		var len = list.get_view().childs.length;
		var _g = count;
		var _g1 = len;
		while(_g < _g1) {
			var del = _g++;
			list.removeItemRender(list.get_view().childs[del]);
		}
	}
	,updateData: function(item,data,selected) {
		if(selected != item.get_selected()) {
			item.set_selected(selected);
		}
		if(data != item.get_data()) {
			item.set_data(data);
		}
	}
	,layoutListH: function(list) {
		var data = list.get_dataProvider();
		if(data == null) {
			return;
		}
		var itemOnw = this.virtualWidth == 0 ? list.createItemRender(null) : null;
		if(itemOnw != null) {
			list.get_view().addChildSuper(itemOnw);
			if(itemOnw.tileDisplayObject != null) {
				list.get_batch().getBatchs().addChild(itemOnw.tileDisplayObject);
			}
			this.virtualWidth = itemOnw.get_width() + list.gap;
			if(list.cache == false) {
				list.removeItemRender(itemOnw);
			}
		}
		list.get_view().set_width(data.get_length() * this.virtualWidth);
		var startIndex = list.get_hscroll() / this.virtualWidth | 0;
		if(startIndex < 0) {
			startIndex = 0;
		}
		var endIndex = (list.get_width() / this.virtualWidth | 0) + 1;
		if(endIndex > data.get_length() - startIndex - 1 || endIndex + startIndex > data.get_length()) {
			endIndex = data.get_length() - startIndex - 1;
		}
		endIndex += startIndex;
		var _g = 0;
		var _g1 = list.get_view().childs;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			c.set_visible(false);
			if((js_Boot.__cast(c , zygame_components_base_ItemRender)).tileDisplayObject != null) {
				(js_Boot.__cast(c , zygame_components_base_ItemRender)).tileDisplayObject.set_visible(false);
			}
		}
		var count = list.cache ? startIndex : 0;
		var index = startIndex;
		while(index <= endIndex) {
			var itemData = data.getItem(index);
			if(count >= list.get_view().childs.length) {
				var item = list.createItemRender(itemData);
				list.get_view().addChildSuper(item);
				item.set_x(this.virtualWidth * index);
				item.set_visible(true);
				if(item.tileDisplayObject != null) {
					item.tileDisplayObject.set_y(item.get_y());
					item.tileDisplayObject.set_visible(true);
				}
				this.updateData(item,itemData,list.currentSelectItem != null && list.currentSelectItem == data.getItem(index));
			} else {
				var itemCopy = list.get_view().childs[count];
				itemCopy.set_x(this.virtualWidth * index);
				itemCopy.set_visible(true);
				if(itemCopy.tileDisplayObject != null) {
					itemCopy.tileDisplayObject.set_y(itemCopy.get_y());
					itemCopy.tileDisplayObject.set_visible(true);
				}
				this.updateData(itemCopy,itemData,list.currentSelectItem != null && list.currentSelectItem == data.getItem(index));
			}
			++count;
			++index;
		}
		var len = list.get_view().childs.length;
		var _g = count;
		var _g1 = len;
		while(_g < _g1) {
			var del = _g++;
			list.removeItemRender(list.get_view().childs[del]);
		}
	}
	,__class__: zygame_components_layout_ListLayout
});
var zygame_components_layout_VLayout = function() {
	zygame_components_layout_BaseLayout.call(this);
};
$hxClasses["zygame.components.layout.VLayout"] = zygame_components_layout_VLayout;
zygame_components_layout_VLayout.__name__ = "zygame.components.layout.VLayout";
zygame_components_layout_VLayout.__super__ = zygame_components_layout_BaseLayout;
zygame_components_layout_VLayout.prototype = $extend(zygame_components_layout_BaseLayout.prototype,{
	gap: null
	,layout: function(box) {
		var iy = 0;
		var _g = 0;
		var _g1 = box.childs.length;
		while(_g < _g1) {
			var i = _g++;
			box.childs[i].set_y(iy);
			iy += this.gap + box.childs[i].get_height();
		}
	}
	,__class__: zygame_components_layout_VLayout
});
var zygame_components_renders_text_FillTextCommand = function(text,x,y) {
	this.y = 0;
	this.x = 0;
	this.text = null;
	this.text = text;
	this.x = x;
	this.y = y;
};
$hxClasses["zygame.components.renders.text.FillTextCommand"] = zygame_components_renders_text_FillTextCommand;
zygame_components_renders_text_FillTextCommand.__name__ = "zygame.components.renders.text.FillTextCommand";
zygame_components_renders_text_FillTextCommand.prototype = {
	text: null
	,x: null
	,y: null
	,draw: function(context) {
		context.fillText(this.text,this.x,this.y);
	}
	,__class__: zygame_components_renders_text_FillTextCommand
};
var zygame_components_skin_BaseSkin = function() {
	openfl_events_EventDispatcher.call(this);
	this._dist = openfl_utils_Dictionary.toStringMap(null);
};
$hxClasses["zygame.components.skin.BaseSkin"] = zygame_components_skin_BaseSkin;
zygame_components_skin_BaseSkin.__name__ = "zygame.components.skin.BaseSkin";
zygame_components_skin_BaseSkin.__super__ = openfl_events_EventDispatcher;
zygame_components_skin_BaseSkin.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	_dist: null
	,setSkinValue: function(key,skin) {
		var value = skin;
		this._dist.h[key] = value;
		if(key == "up") {
			this.set_defalutSkin(skin);
		}
		this.dispatchEvent(new openfl_events_Event("change",false,false));
	}
	,getSkinValue: function(key) {
		return this._dist.h[key];
	}
	,set_defalutSkin: function(skin) {
		this.setSkinValue("defalut",skin);
		return skin;
	}
	,get_defalutSkin: function() {
		return this.getSkinValue("defalut");
	}
	,__class__: zygame_components_skin_BaseSkin
	,__properties__: {set_defalutSkin:"set_defalutSkin",get_defalutSkin:"get_defalutSkin"}
});
var zygame_components_skin_ButtonSkin = function() {
	zygame_components_skin_BaseSkin.call(this);
};
$hxClasses["zygame.components.skin.ButtonSkin"] = zygame_components_skin_ButtonSkin;
zygame_components_skin_ButtonSkin.__name__ = "zygame.components.skin.ButtonSkin";
zygame_components_skin_ButtonSkin.__super__ = zygame_components_skin_BaseSkin;
zygame_components_skin_ButtonSkin.prototype = $extend(zygame_components_skin_BaseSkin.prototype,{
	set_upSkin: function(skin) {
		this.setSkinValue("up",skin);
		return skin;
	}
	,get_upSkin: function() {
		return this.getSkinValue("up");
	}
	,set_overSkin: function(skin) {
		this.setSkinValue("over",skin);
		return skin;
	}
	,get_overSkin: function() {
		return this.getSkinValue("over");
	}
	,set_outSkin: function(skin) {
		this.setSkinValue("out",skin);
		return skin;
	}
	,get_outSkin: function() {
		return this.getSkinValue("out");
	}
	,set_downSkin: function(skin) {
		this.setSkinValue("down",skin);
		return skin;
	}
	,get_downSkin: function() {
		return this.getSkinValue("down");
	}
	,__class__: zygame_components_skin_ButtonSkin
	,__properties__: $extend(zygame_components_skin_BaseSkin.prototype.__properties__,{set_downSkin:"set_downSkin",get_downSkin:"get_downSkin",set_outSkin:"set_outSkin",get_outSkin:"get_outSkin",set_overSkin:"set_overSkin",get_overSkin:"get_overSkin",set_upSkin:"set_upSkin",get_upSkin:"get_upSkin"})
});
var zygame_components_skin_ButtonFrameSkin = function(sprites) {
	zygame_components_skin_ButtonSkin.call(this);
	this.textureAtlas = sprites;
};
$hxClasses["zygame.components.skin.ButtonFrameSkin"] = zygame_components_skin_ButtonFrameSkin;
zygame_components_skin_ButtonFrameSkin.__name__ = "zygame.components.skin.ButtonFrameSkin";
zygame_components_skin_ButtonFrameSkin.__super__ = zygame_components_skin_ButtonSkin;
zygame_components_skin_ButtonFrameSkin.prototype = $extend(zygame_components_skin_ButtonSkin.prototype,{
	textureAtlas: null
	,getFrameSkin: function(skin) {
		if(skin == null) {
			return null;
		}
		if(((skin) instanceof zygame_utils_load_Frame)) {
			return skin;
		}
		return null;
	}
	,__class__: zygame_components_skin_ButtonFrameSkin
});
var zygame_core_KeyboardManager = function() { };
$hxClasses["zygame.core.KeyboardManager"] = zygame_core_KeyboardManager;
zygame_core_KeyboardManager.__name__ = "zygame.core.KeyboardManager";
zygame_core_KeyboardManager.init = function() {
	var c = $hxClasses["Keyboard"];
	if(c == null) {
		return;
	}
	zygame_core_KeyboardManager.keyboard = Type.createInstance(c,[]);
	zygame_core_KeyboardManager.keyboard.onKeyboardComplete(zygame_core_KeyboardManager.onKeyboardComplete);
};
zygame_core_KeyboardManager.onKeyboardComplete = function() {
	zygame_core_KeyboardManager.focus(null);
};
zygame_core_KeyboardManager.isSupportInput = function() {
	return true;
};
zygame_core_KeyboardManager.focus = function(display) {
	var current = zygame_core_Start.current;
	if(display == null) {
		current.set_y(0);
		return;
	}
	if(current.getStageWidth() < current.getStageHeight()) {
		var moveY = current.stage.stageHeight / 2;
		var _g = current;
		_g.set_y(_g.get_y() + (moveY - moveY / 2));
	}
};
var zygame_core_UpdateStats = function(display,action) {
	this.action = 0;
	this.display = display;
	this.action = action;
};
$hxClasses["zygame.core.UpdateStats"] = zygame_core_UpdateStats;
zygame_core_UpdateStats.__name__ = "zygame.core.UpdateStats";
zygame_core_UpdateStats.prototype = {
	display: null
	,action: null
	,__class__: zygame_core_UpdateStats
};
var zygame_display_Image = function(bitmapData) {
	this._isPlay = false;
	this._index = 0;
	this._loop = false;
	this._height = 0;
	this._setHeight = false;
	this._width = 0;
	this._setWidth = false;
	this.isBitmapDataDraw = false;
	this.assetsId = null;
	zygame_display_DisplayObjectContainer.call(this);
	this.set_bitmapData(bitmapData);
	this.mouseChildren = false;
	if(((bitmapData) instanceof openfl_display_BitmapData)) {
		this.set_width((js_Boot.__cast(bitmapData , openfl_display_BitmapData)).width);
		this.set_height((js_Boot.__cast(bitmapData , openfl_display_BitmapData)).height);
	} else if(((bitmapData) instanceof zygame_utils_load_Frame)) {
		var frame = js_Boot.__cast(bitmapData , zygame_utils_load_Frame);
		this.set_width(frame.frameWidth > frame.width ? frame.frameWidth : frame.width);
		this.set_height(frame.frameHeight > frame.height ? frame.frameHeight : frame.height);
	}
};
$hxClasses["zygame.display.Image"] = zygame_display_Image;
zygame_display_Image.__name__ = "zygame.display.Image";
zygame_display_Image.__super__ = zygame_display_DisplayObjectContainer;
zygame_display_Image.prototype = $extend(zygame_display_DisplayObjectContainer.prototype,{
	assetsId: null
	,isBitmapDataDraw: null
	,_bitmap: null
	,_tilemap: null
	,_curFrame: null
	,_curImg: null
	,_scale9: null
	,_scale9Img: null
	,_setWidth: null
	,_width: null
	,_setHeight: null
	,_height: null
	,_scale9Grid: null
	,set_bitmapData: function(bitmapData) {
		var isFrameRect = false;
		if(bitmapData == null) {
			if(this._tilemap != null) {
				this._tilemap.set_visible(false);
			}
			if(this._bitmap != null) {
				this._bitmap.set_visible(false);
			}
		} else if(((bitmapData) instanceof openfl_display_BitmapData)) {
			this.isBitmapDataDraw = true;
			if(this._tilemap != null) {
				this._tilemap.set_visible(false);
			}
			if(this._bitmap == null) {
				this._bitmap = new openfl_display_Bitmap(bitmapData,null,true);
				this.addChild(this._bitmap);
			} else {
				this._bitmap.set_visible(true);
				this._bitmap.set_bitmapData(bitmapData);
			}
			this._bitmap.smoothing = true;
		} else if(((bitmapData) instanceof zygame_utils_load_Frame)) {
			this._curFrame = bitmapData;
			this.isBitmapDataDraw = false;
			if(this._bitmap != null) {
				this._bitmap.set_visible(false);
			}
			var frame = bitmapData;
			if(this._tilemap == null) {
				this._tilemap = new openfl_display_Tilemap(0,0,frame.parent.getTileset(),true);
				this.addChild(this._tilemap);
				this._curImg = new zygame_display_batch_BImage();
				this._tilemap.addTile(this._curImg);
			} else {
				this._tilemap.set_tileset(frame.parent.getTileset());
				this._tilemap.set_visible(true);
			}
			this._curImg.setFrame(frame);
			isFrameRect = frame.frameWidth != 0 || frame.frameHeight != 0;
			if(isFrameRect) {
				this._tilemap.set_width(frame.width + Math.abs(frame.frameX));
				this._tilemap.set_height(frame.height + Math.abs(frame.frameY));
				if(this._tilemap.get_width() < frame.frameWidth) {
					this._tilemap.set_width(frame.frameWidth);
				}
				if(this._tilemap.get_height() < frame.frameHeight) {
					this._tilemap.set_height(frame.frameHeight);
				}
			} else {
				this._tilemap.set_width(frame.width);
				this._tilemap.set_height(frame.height);
			}
			if(this._curFrame.get_scale9rect() != null) {
				this._scale9Grid = this._curFrame.get_scale9rect();
			}
			if(this._scale9Grid != null) {
				this.updateScale9();
			}
		}
		if(this._setWidth) {
			this.set_width(this._width);
		}
		if(this._setHeight) {
			this.set_height(this._height);
		}
		this.alignPivot(this.get_vAlign(),this.get_hAlign());
		if(isFrameRect && !this.isBitmapDataDraw) {
			if(this._curFrame.frameX < 0) {
				this._curImg.set_originX(0);
				var _g = this._tilemap;
				_g.set_x(_g.get_x() + this._curFrame.frameX);
			}
			if(this._curFrame.frameY < 0) {
				this._curImg.set_originY(0);
				var _g = this._tilemap;
				_g.set_y(_g.get_y() + this._curFrame.frameY);
			}
		}
		this.updateShader();
		return bitmapData;
	}
	,updateScale9: function() {
		if(this._tilemap == null) {
			return;
		}
		if(this._scale9 != null) {
			this._scale9.set_visible(false);
		}
		if(this._curImg.curFrame.get_scale9frames() != null) {
			if(this._scale9 == null) {
				this._scale9 = new zygame_display_batch_BScale9Image(this._curFrame);
				this._tilemap.addTile(this._scale9);
			}
			if(this._scale9.curFrame != this._curFrame) {
				this._scale9.setFrame(this._curFrame);
			}
			this._scale9.set_width(this._width);
			this._scale9.set_height(this._height);
			this._curImg.set_visible(false);
			this._scale9.set_visible(true);
			return;
		}
		if(this._scale9Grid == null) {
			this._tilemap.set_scale9Grid(this._scale9Grid);
			this._tilemap.set_tileset(this._curFrame.parent.getTileset());
			this._curImg.set_visible(true);
			return;
		}
		if(this._scale9Grid != this._tilemap.get_scale9Grid()) {
			this._tilemap.set_scale9Grid(this._scale9Grid);
			this._tilemap.set_tileset(this._curFrame.getScale9GirdTileset(this._scale9Grid));
		}
		this._curImg.set_visible(false);
		if(this._scale9Img == null) {
			this._scale9Img = [];
			this._scale9Img.push(new openfl_display_Tile(0));
			this._tilemap.addTile(this._scale9Img[0]);
			this._scale9Img.push(new openfl_display_Tile(1));
			this._tilemap.addTile(this._scale9Img[1]);
			this._scale9Img.push(new openfl_display_Tile(2));
			this._tilemap.addTile(this._scale9Img[2]);
			this._scale9Img.push(new openfl_display_Tile(3));
			this._tilemap.addTile(this._scale9Img[3]);
			this._scale9Img.push(new openfl_display_Tile(4));
			this._tilemap.addTile(this._scale9Img[4]);
			this._scale9Img.push(new openfl_display_Tile(5));
			this._tilemap.addTile(this._scale9Img[5]);
			this._scale9Img.push(new openfl_display_Tile(6));
			this._tilemap.addTile(this._scale9Img[6]);
			this._scale9Img.push(new openfl_display_Tile(7));
			this._tilemap.addTile(this._scale9Img[7]);
			this._scale9Img.push(new openfl_display_Tile(8));
			this._tilemap.addTile(this._scale9Img[8]);
		}
		var _g = 0;
		while(_g < 9) {
			var i = _g++;
			var tile = this._scale9Img[i];
			var left = this._scale9Grid.x;
			var right = this._curFrame.width - this._scale9Grid.x - this._scale9Grid.width;
			var bottom = this._curFrame.height - this._scale9Grid.y - this._scale9Grid.height;
			var top = this._scale9Grid.y;
			var cwidth = this._width - left - right;
			var cheight = this._height - top - bottom;
			var pscaleX = cwidth / this._tilemap.get_tileset().getRect(i).width;
			var pscaleY = cheight / this._tilemap.get_tileset().getRect(i).height;
			switch(i) {
			case 0:
				break;
			case 1:
				tile.set_x(left);
				tile.set_scaleX(pscaleX);
				break;
			case 2:
				tile.set_x(this._width - right);
				break;
			case 3:
				tile.set_y(top);
				tile.set_scaleY(pscaleY);
				break;
			case 4:
				tile.set_x(left);
				tile.set_y(top);
				tile.set_scaleX(pscaleX);
				tile.set_scaleY(pscaleY);
				break;
			case 5:
				tile.set_x(this._width - right);
				tile.set_y(top);
				tile.set_scaleY(pscaleY);
				break;
			case 6:
				tile.set_y(this._height - bottom);
				break;
			case 7:
				tile.set_x(left);
				tile.set_y(this._height - bottom);
				tile.set_scaleX(pscaleX);
				break;
			case 8:
				tile.set_x(this._width - right);
				tile.set_y(this._height - bottom);
				break;
			}
		}
	}
	,get_bitmapData: function() {
		if(this._bitmap == null && this._tilemap == null) {
			return null;
		}
		if(this.isBitmapDataDraw) {
			return this._bitmap.get_bitmapData();
		}
		return this._curFrame;
	}
	,onInit: function() {
	}
	,get_pivotX: function() {
		if(this.isBitmapDataDraw) {
			return -this._bitmap.get_x();
		} else {
			return -this._tilemap.get_x();
		}
	}
	,set_pivotX: function(f) {
		if(this.isBitmapDataDraw) {
			this._bitmap.set_x(-f);
		} else {
			this._tilemap.set_x(-f);
		}
		return this.get_pivotX();
	}
	,get_pivotY: function() {
		if(this.isBitmapDataDraw) {
			return -this._bitmap.get_y();
		} else {
			return -this._tilemap.get_y();
		}
	}
	,set_pivotY: function(f) {
		if(this.isBitmapDataDraw) {
			this._bitmap.set_y(-f);
		} else {
			this._tilemap.set_y(-f);
		}
		return this.get_pivotY();
	}
	,alignPivot: function(v,h) {
		zygame_display_DisplayObjectContainer.prototype.alignPivot.call(this,v,h);
		if(this._bitmap == null && this._tilemap == null) {
			return;
		}
		zygame_utils_Align.alignDisplay(this.isBitmapDataDraw ? this._bitmap : this._tilemap,v,h);
	}
	,_animation: null
	,_fps: null
	,_loop: null
	,_call: null
	,_index: null
	,_isPlay: null
	,playImages: function(array,fps,loop,call) {
		this._animation = array;
		this._fps = new zygame_utils_FPSUtil(fps);
		this._loop = loop;
		this._call = call;
		this._index = 0;
		this.set_bitmapData(array[0]);
		this.setFrameEvent(true);
		this._isPlay = true;
	}
	,onRemoveToStage: function() {
		zygame_display_DisplayObjectContainer.prototype.onRemoveToStage.call(this);
		this.setFrameEvent(false);
	}
	,onAddToStage: function() {
		zygame_display_DisplayObjectContainer.prototype.onRemoveToStage.call(this);
		if(this._isPlay) {
			this.setFrameEvent(this._isPlay);
		}
	}
	,onFrame: function() {
		if(this._fps != null && this._fps.update()) {
			this._index++;
			if(this._index >= this._animation.length) {
				this._index = 0;
				if(this._call != null) {
					this._call();
				}
				if(this._loop == false) {
					this.setFrameEvent(false);
					this._isPlay = false;
					return;
				}
			}
			this.set_bitmapData(this._animation[this._index]);
		}
	}
	,set_height: function(height) {
		this._setHeight = true;
		this._height = height;
		if(this._bitmap == null && this._tilemap == null) {
			return 0;
		}
		if(this.isBitmapDataDraw && this._bitmap != null) {
			this._bitmap.set_height(height);
		} else if(this._tilemap != null) {
			this._tilemap.set_height(height);
			this._curImg.set_height(height);
		}
		this.updateScale9();
		return height;
	}
	,set_width: function(width) {
		this._setWidth = true;
		this._width = width;
		if(this._bitmap == null && this._tilemap == null) {
			return 0;
		}
		if(this.isBitmapDataDraw && this._bitmap != null) {
			this._bitmap.set_width(width);
		} else if(this._tilemap != null) {
			this._tilemap.set_width(width);
			this._curImg.set_width(width);
		}
		this.updateScale9();
		return width;
	}
	,get_width: function() {
		if(this._setWidth) {
			return Math.abs(this._width * this.get_scaleX());
		}
		return zygame_display_DisplayObjectContainer.prototype.get_width.call(this);
	}
	,get_height: function() {
		if(this._setHeight) {
			return Math.abs(this._height * this.get_scaleY());
		}
		return zygame_display_DisplayObjectContainer.prototype.get_height.call(this);
	}
	,getDisplay: function() {
		if(this._bitmap == null && this._tilemap == null) {
			return null;
		}
		if(this.isBitmapDataDraw) {
			return this._bitmap;
		} else {
			return this._tilemap;
		}
	}
	,setScale9Grid: function(rect) {
		this._scale9Grid = rect;
		if(this.isBitmapDataDraw && this._bitmap != null) {
			var textureAtlas = zygame_utils_load_TextureAtlas.createTextureAtlasByOne(this._bitmap.get_bitmapData());
			this.set_bitmapData(textureAtlas.getBitmapDataFrame("img"));
		}
		if(this._bitmap != null) {
			this._bitmap.set_scale9Grid(rect);
		}
		if(this._tilemap != null) {
			this.updateScale9();
		}
	}
	,clearDrawTiles: function() {
		if(this._tilemap != null) {
			this._tilemap.removeTiles();
			this._tilemap.addTile(this._curImg);
		}
	}
	,drawTile: function(frame,x,y,width,height) {
		if(this._tilemap != null) {
			var img = new zygame_display_batch_BImage(frame);
			this._tilemap.addTile(img);
			img.set_x(x);
			img.set_y(y);
			img.set_width(width);
			img.set_height(height);
		}
	}
	,set_shader: function(value) {
		var display = this.getDisplay();
		if(display != null) {
			display.set_shader(value);
		}
		this.updateShader();
		return value;
	}
	,get_shader: function() {
		var display = this.getDisplay();
		if(display == null) {
			return null;
		}
		return display.get_shader();
	}
	,updateShader: function() {
		var display = this.getDisplay();
		if(display == null) {
			return;
		}
		if(((display.get_shader()) instanceof zygame_shader_engine_ZShader)) {
			(js_Boot.__cast(display.get_shader() , zygame_shader_engine_ZShader)).updateFrame(this._curFrame);
		}
	}
	,__class__: zygame_display_Image
	,__properties__: $extend(zygame_display_DisplayObjectContainer.prototype.__properties__,{set_pivotY:"set_pivotY",get_pivotY:"get_pivotY",set_pivotX:"set_pivotX",get_pivotX:"get_pivotX",set_bitmapData:"set_bitmapData",get_bitmapData:"get_bitmapData"})
});
var zygame_display_EraseImage = function(bitmapData,targetBitmapData,maskBitmapData) {
	this._drawAllTrueCount = 0;
	this._drawTrueCount = 0;
	this._drawArray = [];
	this._lastPos = new openfl_geom_Point();
	zygame_display_Image.call(this,bitmapData);
	this._maskBitmapData = maskBitmapData;
	this._targetBitmapData = targetBitmapData;
	this._sprite = new openfl_display_Sprite();
	this._draw = new openfl_display_BitmapData(targetBitmapData.width,targetBitmapData.height,true,0);
	var _g = 0;
	var _g1 = bitmapData.width / 5 | 0;
	while(_g < _g1) {
		var ix = _g++;
		this._drawArray[ix] = [];
		var _g2 = 0;
		var _g3 = bitmapData.height / 5 | 0;
		while(_g2 < _g3) {
			var iy = _g2++;
			this._drawArray[ix][iy] = false;
			this._drawAllTrueCount++;
		}
	}
	this._cloneBitmap = new openfl_display_Bitmap(targetBitmapData.clone());
	this._cloneBitmap.smoothing = true;
	this.addChild(this._cloneBitmap);
	this.updateBitmapData();
};
$hxClasses["zygame.display.EraseImage"] = zygame_display_EraseImage;
zygame_display_EraseImage.__name__ = "zygame.display.EraseImage";
zygame_display_EraseImage.__super__ = zygame_display_Image;
zygame_display_EraseImage.prototype = $extend(zygame_display_Image.prototype,{
	_maskBitmapData: null
	,_targetBitmapData: null
	,_cloneBitmap: null
	,_draw: null
	,_sprite: null
	,_isDown: null
	,_lastPos: null
	,_drawArray: null
	,_drawTrueCount: null
	,_drawAllTrueCount: null
	,onInit: function() {
		zygame_display_Image.prototype.onInit.call(this);
		this.stage.addEventListener("mouseDown",$bind(this,this.onDown));
		this.stage.addEventListener("mouseUp",$bind(this,this.onUp));
		this.stage.addEventListener("mouseMove",$bind(this,this.onMove));
	}
	,onRemove: function() {
		zygame_display_Image.prototype.onRemove.call(this);
		this.stage.removeEventListener("mouseDown",$bind(this,this.onDown));
		this.stage.removeEventListener("mouseUp",$bind(this,this.onUp));
		this.stage.removeEventListener("mouseMove",$bind(this,this.onMove));
		this._cloneBitmap.get_bitmapData().dispose();
		this._cloneBitmap.get_bitmapData().disposeImage();
		this._cloneBitmap.set_bitmapData(null);
		this._targetBitmapData = null;
		this._draw.dispose();
		this._draw.disposeImage();
		this._draw = null;
		this._maskBitmapData = null;
	}
	,set_pivotX: function(f) {
		this._cloneBitmap.set_x(-f);
		return this.get_pivotX();
	}
	,set_pivotY: function(f) {
		this._cloneBitmap.set_y(-f);
		return this.get_pivotY();
	}
	,alignPivot: function(v,h) {
		zygame_display_Image.prototype.alignPivot.call(this,v,h);
		if(this._cloneBitmap != null) {
			zygame_utils_Align.alignDisplay(this._cloneBitmap,v,h);
		}
	}
	,getPercentage: function() {
		return this._drawTrueCount / this._drawAllTrueCount;
	}
	,setMaskBitmapData: function(maskBitmapData) {
		this._maskBitmapData = maskBitmapData;
	}
	,clear: function() {
		this._draw.fillRect(this._draw.rect,0);
		this.updateBitmapData();
		this._drawTrueCount = 0;
		var _g = 0;
		var _g1 = this.get_bitmapData().width / 5 | 0;
		while(_g < _g1) {
			var ix = _g++;
			var _g2 = 0;
			var _g3 = this.get_bitmapData().height / 5 | 0;
			while(_g2 < _g3) {
				var iy = _g2++;
				this._drawArray[ix][iy] = false;
			}
		}
	}
	,updateBitmapData: function(rect,pos) {
		if(rect == null) {
			rect = new openfl_geom_Rectangle(0,0,this._draw.width,this._draw.height);
		}
		if(rect.x < 0) {
			rect.width += rect.x;
			rect.x = 0;
			pos.x = 0;
		}
		if(rect.y < 0) {
			rect.height += rect.y;
			rect.y = 0;
			pos.y = 0;
		}
		if(pos == null) {
			pos = new openfl_geom_Point();
		}
		this._cloneBitmap.get_bitmapData().copyChannel(this._draw,rect,pos,1,8);
	}
	,onMove: function(e) {
		if(!this._isDown) {
			return;
		}
		this._sprite.get_graphics().clear();
		this._sprite.get_graphics().beginFill(16711680,1);
		this._sprite.get_graphics().lineStyle(40,16711680,1);
		this._sprite.get_graphics().moveTo(this._lastPos.x,this._lastPos.y);
		this._sprite.get_graphics().lineTo(this.getMouseX(),this.getMouseY());
		this._sprite.get_graphics().endFill();
		this._draw.draw(this._sprite,null,null,null,null,true);
		var rect = this._sprite.getBounds(null);
		this.updateBitmapData(rect,new openfl_geom_Point(rect.x,rect.y));
		var xid = rect.x / 5 | 0;
		var yid = rect.y / 5 | 0;
		var wlen = rect.width / 5 | 0;
		var hlen = rect.height / 5 | 0;
		var _g = xid;
		var _g1 = xid + wlen;
		while(_g < _g1) {
			var ix = _g++;
			var _g2 = yid;
			var _g3 = yid + hlen;
			while(_g2 < _g3) {
				var iy = _g2++;
				if(this._draw.getPixel(ix * 5,iy * 5) != 0 && (this._maskBitmapData == null || this._maskBitmapData.getPixel(ix * 5,iy * 5) != 0)) {
					if(this._drawArray[ix] != null && this._drawArray[ix][iy] == false) {
						this._drawArray[ix][iy] = true;
						this._drawTrueCount++;
					}
				}
			}
		}
		this._lastPos.x = this.getMouseX();
		this._lastPos.y = this.getMouseY();
	}
	,getMouseX: function() {
		return this.get_mouseX() + this.get_pivotX();
	}
	,getMouseY: function() {
		return this.get_mouseY() + this.get_pivotY();
	}
	,onDown: function(e) {
		this._isDown = true;
		this._lastPos.x = this.getMouseX();
		this._lastPos.y = this.getMouseY();
		this.onMove(null);
	}
	,onUp: function(e) {
		this._isDown = false;
	}
	,__class__: zygame_display_EraseImage
});
var zygame_display_ZBitmapData = function(width,height,transparent,fillColor) {
	openfl_display_BitmapData.call(this,width,height,transparent,fillColor);
};
$hxClasses["zygame.display.ZBitmapData"] = zygame_display_ZBitmapData;
zygame_display_ZBitmapData.__name__ = "zygame.display.ZBitmapData";
zygame_display_ZBitmapData.fromImage = function(image,transparent) {
	if(transparent == null) {
		transparent = true;
	}
	if(image == null || image.buffer == null) {
		return null;
	}
	var bitmapData = new zygame_display_ZBitmapData(0,0,transparent,0);
	bitmapData.__fromImage(image);
	bitmapData.image.set_transparent(transparent);
	if(bitmapData.image != null) {
		return bitmapData;
	} else {
		return null;
	}
};
zygame_display_ZBitmapData.__super__ = openfl_display_BitmapData;
zygame_display_ZBitmapData.prototype = $extend(openfl_display_BitmapData.prototype,{
	path: null
	,getTexture: function(context) {
		var t = openfl_display_BitmapData.prototype.getTexture.call(this,context);
		this.disposeCavansImage();
		return t;
	}
	,disposeCavansImage: function() {
		openfl_display_BitmapData.prototype.disposeImage.call(this);
		var getImage = this.image;
		if(getImage != null && getImage.buffer != null && (getImage.buffer.__srcImage != null && getImage.buffer.__srcImage.disposeImage != null)) {
			getImage.buffer.__srcImage.disposeImage();
		}
	}
	,dispose: function() {
		openfl_display_BitmapData.prototype.dispose.call(this);
	}
	,__class__: zygame_display_ZBitmapData
});
var zygame_display_batch_BDisplayObject = function(id,x,y,scaleX,scaleY,rotation,originX,originY) {
	if(originY == null) {
		originY = 0;
	}
	if(originX == null) {
		originX = 0;
	}
	if(rotation == null) {
		rotation = 0;
	}
	if(scaleY == null) {
		scaleY = 1;
	}
	if(scaleX == null) {
		scaleX = 1;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	if(id == null) {
		id = 0;
	}
	this.name = null;
	this.mouseEnabled = true;
	openfl_display_Tile.call(this,id,y,y,scaleX,scaleY,rotation,originX,originY);
};
$hxClasses["zygame.display.batch.BDisplayObject"] = zygame_display_batch_BDisplayObject;
zygame_display_batch_BDisplayObject.__name__ = "zygame.display.batch.BDisplayObject";
zygame_display_batch_BDisplayObject.__interfaces__ = [zygame_mini_MiniExtend,zygame_core_Refresher,zygame_display_batch_ITileDisplayObject];
zygame_display_batch_BDisplayObject.__super__ = openfl_display_Tile;
zygame_display_batch_BDisplayObject.prototype = $extend(openfl_display_Tile.prototype,{
	customData: null
	,baseBuilder: null
	,mouseEnabled: null
	,name: null
	,onInit: function() {
		if(this.baseBuilder != null) {
			var call = this.baseBuilder.getFunction("onInit");
			if(call != null) {
				call();
			}
		}
	}
	,onFrame: function() {
		if(this.baseBuilder != null) {
			var call = this.baseBuilder.getFunction("onFrame");
			if(call != null) {
				call();
			}
		}
	}
	,setFrameEvent: function(isFrame) {
		if(isFrame) {
			zygame_core_Start.current.addToUpdate(this);
		} else {
			zygame_core_Start.current.removeToUpdate(this);
		}
	}
	,get_curWidth: function() {
		return this.get_width();
	}
	,get_curHeight: function() {
		return this.get_height();
	}
	,toString: function() {
		var c = js_Boot.getClass(this);
		return c.__name__;
	}
	,getParent: function() {
		return this.parent;
	}
	,getStageWidth: function() {
		return zygame_core_Start.stageWidth;
	}
	,getStageHeight: function() {
		return zygame_core_Start.stageHeight;
	}
	,__class__: zygame_display_batch_BDisplayObject
	,__properties__: $extend(openfl_display_Tile.prototype.__properties__,{get_curHeight:"get_curHeight",get_curWidth:"get_curWidth"})
});
var zygame_display_batch_BImage = function(frame) {
	zygame_display_batch_BDisplayObject.call(this,frame != null ? frame.id : -1,0,0,1,1);
	this.setFrame(frame);
};
$hxClasses["zygame.display.batch.BImage"] = zygame_display_batch_BImage;
zygame_display_batch_BImage.__name__ = "zygame.display.batch.BImage";
zygame_display_batch_BImage.__super__ = zygame_display_batch_BDisplayObject;
zygame_display_batch_BImage.prototype = $extend(zygame_display_batch_BDisplayObject.prototype,{
	curFrame: null
	,curParent: null
	,getCurWidth: function() {
		if(this.curFrame != null) {
			if(this.curFrame.frameWidth > this.curFrame.width) {
				return this.curFrame.frameWidth;
			}
			return this.curFrame.width;
		}
		return 0;
	}
	,getCurHeight: function() {
		if(this.curFrame != null) {
			if(this.curFrame.frameHeight > this.curFrame.height) {
				return this.curFrame.frameHeight;
			}
			return this.curFrame.height;
		}
		return 0;
	}
	,__findTileRect: function(result) {
		zygame_display_batch_BDisplayObject.prototype.__findTileRect.call(this,result);
		if(result.width < this.getCurWidth()) {
			result.width = this.getCurWidth();
		}
		if(result.height < this.getCurHeight()) {
			result.height = this.getCurHeight();
		}
	}
	,set_id: function(id) {
		var newFrame = this.curParent.getBitmapDataFrameAt(id);
		this.setFrame(newFrame);
		return id;
	}
	,setFrame: function(frame) {
		if(frame == null) {
			zygame_display_batch_BDisplayObject.prototype.set_id.call(this,-1);
			return;
		}
		zygame_display_batch_BDisplayObject.prototype.set_id.call(this,frame.id);
		this.curParent = frame.parent;
		this.curFrame = frame;
		this.set_originX(-frame.frameX);
		this.set_originY(-frame.frameY);
	}
	,getClickBounds: function(tile) {
		if(this.curFrame != null) {
			var rect = new openfl_geom_Rectangle();
			this.__findTileRect(rect);
			rect.__transform(rect,this.get_matrix());
			return rect;
		}
		return null;
	}
	,getBounds: function(tile) {
		var rect = null;
		if(tile == this.parent) {
			rect = this.getClickBounds(tile);
		}
		if(rect == null) {
			rect = zygame_display_batch_BDisplayObject.prototype.getBounds.call(this,tile);
		}
		return rect;
	}
	,__class__: zygame_display_batch_BImage
});
var zygame_display_batch_BAnimation = function(frame) {
	this.currentFrame = 0;
	this.isPlaying = false;
	this.loop = -1;
	zygame_display_batch_BImage.call(this,frame);
};
$hxClasses["zygame.display.batch.BAnimation"] = zygame_display_batch_BAnimation;
zygame_display_batch_BAnimation.__name__ = "zygame.display.batch.BAnimation";
zygame_display_batch_BAnimation.createAnimation = function(fps,bitmaps) {
	var an = new zygame_display_batch_BAnimation();
	var anData = new zygame_components_data_AnimationData(fps);
	anData.addFrames(bitmaps);
	an.data = anData;
	return an;
};
zygame_display_batch_BAnimation.__super__ = zygame_display_batch_BImage;
zygame_display_batch_BAnimation.prototype = $extend(zygame_display_batch_BImage.prototype,{
	_animation: null
	,loop: null
	,isPlaying: null
	,currentFrame: null
	,_delayFrame: null
	,onComplete: function() {
	}
	,onFrame: function() {
		zygame_display_batch_BImage.prototype.onFrame.call(this);
		if(this._animation == null || !this.isPlaying || this.loop == 0) {
			return;
		}
		if(this._animation.update()) {
			if(this._delayFrame > 0) {
				this._delayFrame--;
				return;
			}
			this.currentFrame++;
			if(this.currentFrame >= this._animation.frames.length) {
				this.currentFrame = 0;
				if(this.loop > 0) {
					this.loop--;
				}
				this.onComplete();
			}
			if(this._animation != null) {
				var frameData = this._animation.getFrame(this.currentFrame);
				if(frameData != null) {
					this._delayFrame = frameData.delayFrame;
					frameData.tryCall();
					this.setFrame(frameData.bitmapData);
				}
			}
		}
	}
	,get_dataProvider: function() {
		return this._animation;
	}
	,set_dataProvider: function(value) {
		this._animation = value;
		if(this._animation != null && this._animation.getFrame(this.currentFrame) != null) {
			this.setFrame(this._animation.getFrame(this.currentFrame).bitmapData);
		}
		return value;
	}
	,play: function(loop) {
		if(loop == null) {
			loop = 0;
		}
		if(loop != 0) {
			this.loop = loop;
		}
		this.isPlaying = true;
		this.setFrameEvent(true);
	}
	,stop: function(frame) {
		if(frame == null) {
			frame = -1;
		}
		this.isPlaying = false;
		this.setFrameEvent(false);
		if(frame >= 0) {
			this.currentFrame = frame;
		}
		if(this._animation != null && this._animation.getFrame(this.currentFrame) != null) {
			this.setFrame(this._animation.getFrame(this.currentFrame).bitmapData);
		}
	}
	,playGo: function(frame,loop) {
		if(loop == null) {
			loop = 0;
		}
		this.isPlaying = true;
		if(frame >= 0) {
			this.currentFrame = frame;
		}
		if(this._animation != null && this._animation.getFrame(this.currentFrame) != null) {
			this.setFrame(this._animation.getFrame(this.currentFrame).bitmapData);
		}
	}
	,__class__: zygame_display_batch_BAnimation
	,__properties__: $extend(zygame_display_batch_BImage.prototype.__properties__,{set_dataProvider:"set_dataProvider",get_dataProvider:"get_dataProvider"})
});
var zygame_display_batch_BBox = function() {
	this._height = 0;
	this._width = 0;
	zygame_display_batch_BSprite.call(this);
};
$hxClasses["zygame.display.batch.BBox"] = zygame_display_batch_BBox;
zygame_display_batch_BBox.__name__ = "zygame.display.batch.BBox";
zygame_display_batch_BBox.__super__ = zygame_display_batch_BSprite;
zygame_display_batch_BBox.prototype = $extend(zygame_display_batch_BSprite.prototype,{
	_width: null
	,_height: null
	,get_width: function() {
		var w = zygame_display_batch_BSprite.prototype.get_width.call(this);
		if(w > this._width) {
			return w;
		}
		return this._width;
	}
	,set_width: function(f) {
		this._width = f;
		return f;
	}
	,get_height: function() {
		var h = zygame_display_batch_BSprite.prototype.get_height.call(this);
		if(h > this._height) {
			return h;
		}
		return this._height;
	}
	,set_height: function(f) {
		this._height = f;
		return f;
	}
	,__class__: zygame_display_batch_BBox
});
var zygame_display_batch_BLayoutBox = function() {
	zygame_display_batch_BBox.call(this);
};
$hxClasses["zygame.display.batch.BLayoutBox"] = zygame_display_batch_BLayoutBox;
zygame_display_batch_BLayoutBox.__name__ = "zygame.display.batch.BLayoutBox";
zygame_display_batch_BLayoutBox.__super__ = zygame_display_batch_BBox;
zygame_display_batch_BLayoutBox.prototype = $extend(zygame_display_batch_BBox.prototype,{
	addLayout: function(tile) {
		zygame_display_batch_BBox.prototype.addChild.call(this,js_Boot.__cast(tile , openfl_display_Tile));
	}
	,updateLayout: function() {
	}
	,__class__: zygame_display_batch_BLayoutBox
});
var zygame_display_batch_VBBox = function() {
	this.gap = 0;
	zygame_display_batch_BLayoutBox.call(this);
};
$hxClasses["zygame.display.batch.VBBox"] = zygame_display_batch_VBBox;
zygame_display_batch_VBBox.__name__ = "zygame.display.batch.VBBox";
zygame_display_batch_VBBox.__super__ = zygame_display_batch_BLayoutBox;
zygame_display_batch_VBBox.prototype = $extend(zygame_display_batch_BLayoutBox.prototype,{
	gap: null
	,updateLayout: function() {
		var mathy = 0;
		var _g = 0;
		var _g1 = this.get_numTiles();
		while(_g < _g1) {
			var i = _g++;
			var tile = this.getTileAt(i);
			tile.set_y(mathy);
			if(((tile) instanceof zygame_display_batch_BDisplayObject)) {
				mathy += (js_Boot.__cast(tile , zygame_display_batch_BDisplayObject)).get_height() + this.gap;
			} else if(((tile) instanceof zygame_display_batch_BDisplayObjectContainer)) {
				mathy += (js_Boot.__cast(tile , zygame_display_batch_BDisplayObjectContainer)).get_height() + this.gap;
			}
		}
	}
	,__class__: zygame_display_batch_VBBox
});
var zygame_display_batch_HBBox = function() {
	this.gap = 0;
	zygame_display_batch_BLayoutBox.call(this);
};
$hxClasses["zygame.display.batch.HBBox"] = zygame_display_batch_HBBox;
zygame_display_batch_HBBox.__name__ = "zygame.display.batch.HBBox";
zygame_display_batch_HBBox.__super__ = zygame_display_batch_BLayoutBox;
zygame_display_batch_HBBox.prototype = $extend(zygame_display_batch_BLayoutBox.prototype,{
	gap: null
	,updateLayout: function() {
		var mathx = 0;
		var _g = 0;
		var _g1 = this.get_numTiles();
		while(_g < _g1) {
			var i = _g++;
			var tile = this.getTileAt(i);
			tile.set_x(mathx);
			if(((tile) instanceof zygame_display_batch_BDisplayObject)) {
				mathx += (js_Boot.__cast(tile , zygame_display_batch_BDisplayObject)).get_width() + this.gap;
			} else if(((tile) instanceof zygame_display_batch_BDisplayObjectContainer)) {
				mathx += (js_Boot.__cast(tile , zygame_display_batch_BDisplayObjectContainer)).get_width() + this.gap;
			}
		}
	}
	,__class__: zygame_display_batch_HBBox
});
var zygame_display_batch_BTouchSprite = function() {
	zygame_display_batch_BSprite.call(this);
};
$hxClasses["zygame.display.batch.BTouchSprite"] = zygame_display_batch_BTouchSprite;
zygame_display_batch_BTouchSprite.__name__ = "zygame.display.batch.BTouchSprite";
zygame_display_batch_BTouchSprite.__super__ = zygame_display_batch_BSprite;
zygame_display_batch_BTouchSprite.prototype = $extend(zygame_display_batch_BSprite.prototype,{
	onTouchBegin: function(touch) {
	}
	,onTouchMove: function(touch) {
	}
	,onTouchEnd: function(touch) {
	}
	,__class__: zygame_display_batch_BTouchSprite
});
var zygame_display_batch_BToggleButton = function(display) {
	this._currentTouchID = -1;
	zygame_display_batch_BTouchSprite.call(this);
	this.img = display;
	this.box = new zygame_display_batch_BSprite();
	this.addChild(this.box);
	this.box.addChild(this.img);
	this.mouseChildren = false;
};
$hxClasses["zygame.display.batch.BToggleButton"] = zygame_display_batch_BToggleButton;
zygame_display_batch_BToggleButton.__name__ = "zygame.display.batch.BToggleButton";
zygame_display_batch_BToggleButton.__super__ = zygame_display_batch_BTouchSprite;
zygame_display_batch_BToggleButton.prototype = $extend(zygame_display_batch_BTouchSprite.prototype,{
	box: null
	,img: null
	,content: null
	,_currentTouchID: null
	,skin: null
	,clickEvent: null
	,_toggleState: null
	,get_toggleState: function() {
		return this._toggleState;
	}
	,getDisplay: function() {
		return this.img;
	}
	,onInit: function() {
		this.updateComponents();
	}
	,updateComponents: function() {
		if(this.skin != null) {
			var skinData = null;
			switch(this._toggleState) {
			case "down":
				skinData = this.skin.get_downSkin();
				break;
			case "out":
				skinData = this.skin.get_outSkin();
				break;
			case "over":
				skinData = this.skin.get_overSkin();
				break;
			case "up":
				skinData = this.skin.get_upSkin();
				break;
			}
			if(skinData == null) {
				skinData = this.skin.get_defalutSkin();
			}
			if(((this.img) instanceof zygame_display_batch_BImage)) {
				(js_Boot.__cast(this.img , zygame_display_batch_BImage)).setFrame(this.skin.getFrameSkin(skinData));
			} else if(((this.img) instanceof zygame_display_batch_BScale9Image)) {
				(js_Boot.__cast(this.img , zygame_display_batch_BScale9Image)).setFrame(this.skin.getFrameSkin(skinData));
			}
		}
		if(this.content != null) {
			this.content.set_x(this.getDisplayWidth() / 2 - this.content.get_curWidth() / 2);
			this.content.set_y(this.getDisplayHeight() / 2 - this.content.get_curHeight() / 2);
		}
	}
	,sendToggleState: function(state) {
		this._toggleState = state;
		this.updateComponents();
	}
	,onTouchBegin: function(touch) {
		if(this._currentTouchID != -1) {
			return;
		}
		this._currentTouchID = touch.touchPointID;
		this.sendToggleState("down");
	}
	,onTouchEnd: function(touch) {
		if(touch.touchPointID == this._currentTouchID && touch != null) {
			this.sendToggleState("up");
			if(((touch.target) instanceof zygame_display_batch_TouchImageBatchsContainer)) {
				var batchs = touch.target;
				if(batchs.getTilePosAt(batchs.get_mouseX(),batchs.get_mouseY()) == this) {
					if(this.clickEvent != null) {
						this.clickEvent();
					}
				}
			}
			this._currentTouchID = -1;
		}
	}
	,setContent: function(frame) {
		var img = new zygame_display_batch_BImage(frame);
		img.name = "CONTENT";
		this.box.removeTiles(1);
		this.box.addChild(img);
		this.content = img;
		this.updateComponents();
	}
	,getDisplayWidth: function() {
		if(this.getDisplay() != null) {
			if(((this.getDisplay()) instanceof zygame_display_batch_BImage)) {
				return (js_Boot.__cast(this.getDisplay() , zygame_display_batch_BImage)).get_curWidth();
			} else {
				return (js_Boot.__cast(this.getDisplay() , zygame_display_batch_BScale9Image)).get_curWidth();
			}
		}
		return 0;
	}
	,getDisplayHeight: function() {
		if(this.getDisplay() != null) {
			if(((this.getDisplay()) instanceof zygame_display_batch_BImage)) {
				return (js_Boot.__cast(this.getDisplay() , zygame_display_batch_BImage)).get_curHeight();
			} else {
				return (js_Boot.__cast(this.getDisplay() , zygame_display_batch_BScale9Image)).get_curHeight();
			}
		}
		return 0;
	}
	,__class__: zygame_display_batch_BToggleButton
	,__properties__: $extend(zygame_display_batch_BTouchSprite.prototype.__properties__,{get_toggleState:"get_toggleState"})
});
var zygame_display_batch_BButton = function(tile) {
	this.anchorY = 0;
	this.anchorX = 0;
	zygame_display_batch_BToggleButton.call(this,tile != null ? tile : new zygame_display_batch_BImage());
};
$hxClasses["zygame.display.batch.BButton"] = zygame_display_batch_BButton;
zygame_display_batch_BButton.__name__ = "zygame.display.batch.BButton";
zygame_display_batch_BButton.createScale9Button = function(sprites,width,height,up,down,over,out) {
	var button = new zygame_display_batch_BScale9Button();
	button.skin = zygame_display_batch_BButton.createButtonFrameSkin(sprites,up,down,over,out);
	button.updateComponents();
	button.set_width(width);
	button.set_height(height);
	return button;
};
zygame_display_batch_BButton.createButton = function(sprites,up,down,over,out) {
	var button = new zygame_display_batch_BButton();
	button.skin = zygame_display_batch_BButton.createButtonFrameSkin(sprites,up,down,over,out);
	button.updateComponents();
	return button;
};
zygame_display_batch_BButton.createButtonFrameSkin = function(sprites,up,down,over,out) {
	var skin = new zygame_components_skin_ButtonFrameSkin(sprites);
	skin.set_upSkin(up);
	skin.set_downSkin(down);
	skin.set_overSkin(over);
	skin.set_outSkin(out);
	return skin;
};
zygame_display_batch_BButton.__super__ = zygame_display_batch_BToggleButton;
zygame_display_batch_BButton.prototype = $extend(zygame_display_batch_BToggleButton.prototype,{
	anchorX: null
	,anchorY: null
	,updateComponents: function() {
		zygame_display_batch_BToggleButton.prototype.updateComponents.call(this);
		this.box.set_scaleX(1);
		this.box.set_scaleY(1);
		this.box.set_x(-this.anchorX);
		this.box.set_y(-this.anchorY);
		if(this.skin != null && this.get_toggleState() == "down" && this.skin.get_downSkin() == null) {
			this.box.set_scaleX(0.94);
			this.box.set_scaleY(0.94);
			if(((this.getDisplay()) instanceof zygame_display_batch_BImage)) {
				this.box.set_x(-this.anchorX + (js_Boot.__cast(this.getDisplay() , zygame_display_batch_BImage)).get_curWidth() * 0.03);
				this.box.set_y(-this.anchorY + (js_Boot.__cast(this.getDisplay() , zygame_display_batch_BImage)).get_curHeight() * 0.03);
			} else {
				this.box.set_x(-this.anchorX + (js_Boot.__cast(this.getDisplay() , zygame_display_batch_BScale9Image)).get_width() * 0.03);
				this.box.set_y(-this.anchorY + (js_Boot.__cast(this.getDisplay() , zygame_display_batch_BScale9Image)).get_height() * 0.03);
			}
		}
		if(this.skin != null && !this.skin.hasEventListener("change")) {
			this.skin.addEventListener("change",$bind(this,this.onChange));
		}
	}
	,onChange: function(e) {
		this.updateComponents();
	}
	,__class__: zygame_display_batch_BButton
});
var zygame_display_batch_BScale9Button = function() {
	zygame_display_batch_BButton.call(this,new zygame_display_batch_BScale9Image());
};
$hxClasses["zygame.display.batch.BScale9Button"] = zygame_display_batch_BScale9Button;
zygame_display_batch_BScale9Button.__name__ = "zygame.display.batch.BScale9Button";
zygame_display_batch_BScale9Button.__super__ = zygame_display_batch_BButton;
zygame_display_batch_BScale9Button.prototype = $extend(zygame_display_batch_BButton.prototype,{
	set_width: function(value) {
		(js_Boot.__cast(this.getDisplay() , zygame_display_batch_BScale9Image)).set_width(value);
		this.updateComponents();
		return value;
	}
	,set_height: function(value) {
		(js_Boot.__cast(this.getDisplay() , zygame_display_batch_BScale9Image)).set_height(value);
		this.updateComponents();
		return value;
	}
	,__class__: zygame_display_batch_BScale9Button
});
var zygame_display_batch_BLabel = function(fnt) {
	this._hAlign = "left";
	this._vAlign = "top";
	this.fontEnd = "";
	this._font = "";
	this.wordWrap = false;
	this._height = 0;
	this._width = 0;
	this._text = "";
	this._size = 0;
	this._lineHeight = 0;
	this._maxHeight = 0;
	this._maxWidth = 0;
	this._texts = [];
	zygame_display_batch_BSprite.call(this);
	this.fntData = fnt;
	this._node = new zygame_display_batch_BSprite();
	this.addChild(this._node);
};
$hxClasses["zygame.display.batch.BLabel"] = zygame_display_batch_BLabel;
zygame_display_batch_BLabel.__name__ = "zygame.display.batch.BLabel";
zygame_display_batch_BLabel.__super__ = zygame_display_batch_BSprite;
zygame_display_batch_BLabel.prototype = $extend(zygame_display_batch_BSprite.prototype,{
	_texts: null
	,_maxWidth: null
	,_maxHeight: null
	,_lineHeight: null
	,_size: null
	,_text: null
	,fntData: null
	,_width: null
	,_height: null
	,wordWrap: null
	,_node: null
	,_font: null
	,get_fontName: function() {
		return this._font;
	}
	,set_fontName: function(value) {
		this._font = value;
		this.updateText(this.getText(),true);
		return this._font;
	}
	,fontEnd: null
	,get_width: function() {
		if(this._width == 0) {
			return this.getTextWidth();
		}
		return Math.abs(this._width * this.get_scaleX());
	}
	,set_width: function(w) {
		this._width = w;
		this.updateLayout();
		return this._width;
	}
	,get_height: function() {
		if(this._height == 0) {
			return this.getTextHeight();
		}
		return Math.abs(this._height * this.get_scaleY());
	}
	,set_height: function(h) {
		this._height = h;
		this.updateLayout();
		return this._height;
	}
	,_vAlign: null
	,set_vAlign: function(value) {
		this._vAlign = value;
		this.updateLayout();
		return this._vAlign;
	}
	,get_vAlign: function() {
		return this._vAlign;
	}
	,_hAlign: null
	,set_hAlign: function(value) {
		this._hAlign = value;
		this.updateLayout();
		return this._hAlign;
	}
	,get_hAlign: function() {
		return this._hAlign;
	}
	,updateLayout: function() {
		if(this.get_width() > 0) {
			switch(this.get_hAlign()) {
			case "center":
				this._node.set_x(this._width / 2 - this.getTextWidth() / 2);
				break;
			case "left":
				this._node.set_x(0);
				break;
			case "right":
				this._node.set_x(this._width - this.getTextWidth());
				break;
			}
		}
		if(this.get_height() > 0) {
			switch(this.get_vAlign()) {
			case "bottom":
				this._node.set_y(this._height - this.getTextHeight());
				break;
			case "center":
				this._node.set_y(this._height / 2 - this.getTextHeight() / 2);
				break;
			case "top":
				this._node.set_y(0);
				break;
			}
		}
	}
	,updateText: function(value,sizeChange) {
		if(sizeChange == null) {
			sizeChange = false;
		}
		if(typeof(value) != "string") {
			value = Std.string(value);
		}
		if(this._text != value || sizeChange) {
			this._text = value;
			this._node.removeTiles();
			if(value == null || this.fntData == null) {
				return;
			}
			this._texts = value.split("");
			if(((this.fntData) instanceof zygame_utils_load_FntData)) {
				this._lineHeight = 0;
				var curFntData = this.fntData;
				this._maxHeight = curFntData.maxHeight;
				var offestX = 0;
				var offestY = 0;
				var _g = 0;
				var _g1 = this._texts;
				while(_g < _g1.length) {
					var char = _g1[_g];
					++_g;
					var id = HxOverrides.cca(char,0);
					var frame = curFntData.getTileFrame(id);
					if(frame != null) {
						var tile = new zygame_display_batch_FntTile(frame);
						this._node.addChild(tile);
						offestY = frame.get_yoffset();
						tile.set_x(offestX + frame.get_xoffset());
						tile.set_y(offestY);
						offestX += frame.xadvance | 0;
						if(this._lineHeight < frame.height) {
							this._lineHeight = frame.height;
						}
					} else if(char == " ") {
						offestX += this._size * 0.8;
					}
				}
				this._maxWidth = offestX;
			} else if(((this.fntData) instanceof zygame_utils_load_TextureAtlas) || ((this.fntData) instanceof zygame_utils_load_SpineTextureAtals)) {
				var curSpriteDataGetBitmapDataFrame = null;
				if(((this.fntData) instanceof zygame_utils_load_TextureAtlas)) {
					curSpriteDataGetBitmapDataFrame = ($_=(js_Boot.__cast(this.fntData , zygame_utils_load_TextureAtlas)),$bind($_,$_.getBitmapDataFrame));
				} else {
					curSpriteDataGetBitmapDataFrame = ($_=(js_Boot.__cast(this.fntData , zygame_utils_load_SpineTextureAtals)),$bind($_,$_.getBitmapDataFrame));
				}
				var offestX = 0;
				var offestY = 0;
				this._maxHeight = 0;
				this._maxWidth = 0;
				this._lineHeight = 0;
				var req = new EReg("[\\ud04e-\\ue50e]+","");
				var _g = 0;
				var _g1 = this._texts;
				while(_g < _g1.length) {
					var char = _g1[_g];
					++_g;
					var frame = curSpriteDataGetBitmapDataFrame(this.get_fontName() + char + this.fontEnd);
					if(frame != null) {
						if(this._lineHeight < frame.height) {
							this._lineHeight = frame.height;
						}
					}
				}
				var scaleFloat = this._size > 0 ? this._size / this._lineHeight : 1;
				var emoj = "";
				var _g = 0;
				var _g1 = this._texts;
				while(_g < _g1.length) {
					var char = _g1[_g];
					++_g;
					var frame = null;
					if(req.match(char)) {
						emoj += char;
						if(emoj.length == 2) {
							frame = curSpriteDataGetBitmapDataFrame(this.get_fontName() + emoj + this.fontEnd);
							emoj = "";
						}
					} else {
						frame = curSpriteDataGetBitmapDataFrame(this.get_fontName() + char + this.fontEnd);
					}
					if(frame != null) {
						if(this.wordWrap && (offestX + frame.width) * scaleFloat > this._width) {
							offestX = 0;
							offestY += frame.height;
						}
						var tile = new zygame_display_batch_FntTile(frame);
						this._node.addChild(tile);
						tile.set_x(offestX);
						tile.set_y(offestY);
						tile.set_rotation(frame.rotate ? 90 : 0);
						if(frame.rotate) {
							var _g2 = tile;
							_g2.set_x(_g2.get_x() + tile.get_width());
						}
						if(frame.frameY > 0) {
							var _g3 = tile;
							_g3.set_y(_g3.get_y() + frame.frameY);
						}
						offestX += frame.width | 0;
						if(this._maxHeight < offestY + frame.height) {
							this._maxHeight = offestY + frame.height;
						}
						if(this._maxWidth < offestX) {
							this._maxWidth = offestX;
						}
					} else if(char == " ") {
						offestX += this._size * 0.8;
					}
				}
			}
			if(this._size > 0 && this._lineHeight != 0) {
				this._node.set_scaleX(this._size / this._lineHeight);
				this._node.set_scaleY(this._node.get_scaleX());
			}
			this.updateLayout();
		}
	}
	,clearFontSelectColor: function() {
		var _g = 0;
		var _g1 = this._node.get_numTiles();
		while(_g < _g1) {
			var i = _g++;
			var tile = this._node.getTileAt(i);
			tile.set_shader(null);
		}
	}
	,setFontSelectColor: function(startIndex,len,color) {
		var endIndex = startIndex + len;
		if(endIndex >= this._node.get_numTiles()) {
			endIndex = this._node.get_numTiles();
		}
		var _g = startIndex;
		var _g1 = endIndex;
		while(_g < _g1) {
			var i = _g++;
			var tile = this._node.getTileAt(i);
			if(((this.fntData) instanceof zygame_utils_load_TextTextureAtlas)) {
				tile.set_shader(new zygame_shader_TextColorShader(color,(js_Boot.__cast(this.fntData , zygame_utils_load_TextTextureAtlas)).textColor));
			} else {
				tile.set_shader(new zygame_shader_ColorShader(color));
			}
		}
	}
	,setFontColor: function(color) {
		this.set_shader(new zygame_shader_TextColorShader(color));
		if(((this.fntData) instanceof zygame_utils_load_TextTextureAtlas)) {
			this.set_shader(new zygame_shader_TextColorShader(color,(js_Boot.__cast(this.fntData , zygame_utils_load_TextTextureAtlas)).textColor));
		} else {
			this.set_shader(new zygame_shader_ColorShader(color));
		}
	}
	,setFontSize: function(size) {
		this._size = size;
		this.updateText(this.getText(),true);
	}
	,getText: function() {
		return this._text;
	}
	,getTextWidth: function() {
		return this._maxWidth * this._node.get_scaleX();
	}
	,getTextHeight: function() {
		return this._maxHeight * this._node.get_scaleY();
	}
	,__class__: zygame_display_batch_BLabel
	,__properties__: $extend(zygame_display_batch_BSprite.prototype.__properties__,{set_hAlign:"set_hAlign",get_hAlign:"get_hAlign",set_vAlign:"set_vAlign",get_vAlign:"get_vAlign",set_fontName:"set_fontName",get_fontName:"get_fontName"})
});
var zygame_display_batch_FntTile = function(frame) {
	openfl_display_Tile.call(this);
	this.setFrame(frame);
};
$hxClasses["zygame.display.batch.FntTile"] = zygame_display_batch_FntTile;
zygame_display_batch_FntTile.__name__ = "zygame.display.batch.FntTile";
zygame_display_batch_FntTile.__super__ = openfl_display_Tile;
zygame_display_batch_FntTile.prototype = $extend(openfl_display_Tile.prototype,{
	curFrame: null
	,setFrame: function(frame) {
		this.curFrame = frame;
		if(frame == null) {
			this.set_id(-1);
		} else {
			this.set_id(frame.id);
		}
	}
	,get_id: function() {
		if(this.curFrame == null) {
			this.set_id(-1);
			return -1;
		} else {
			this.set_id(this.curFrame.id);
			return this.curFrame.id;
		}
	}
	,__class__: zygame_display_batch_FntTile
});
var zygame_display_batch_BScale9Image = function(frame) {
	this._height = 0;
	this._setHeight = false;
	this._width = 0;
	this._setWidth = false;
	zygame_display_batch_BDisplayObjectContainer.call(this);
	this.get_width();
	this.get_height();
	this.setFrame(frame);
};
$hxClasses["zygame.display.batch.BScale9Image"] = zygame_display_batch_BScale9Image;
zygame_display_batch_BScale9Image.__name__ = "zygame.display.batch.BScale9Image";
zygame_display_batch_BScale9Image.__super__ = zygame_display_batch_BDisplayObjectContainer;
zygame_display_batch_BScale9Image.prototype = $extend(zygame_display_batch_BDisplayObjectContainer.prototype,{
	curFrame: null
	,curParent: null
	,_setWidth: null
	,_width: null
	,_setHeight: null
	,_height: null
	,setFrame: function(frame) {
		if(frame == null || frame.get_scale9frames() == null || frame == this.curFrame) {
			return;
		}
		zygame_display_batch_BDisplayObjectContainer.prototype.set_id.call(this,frame.id);
		this.curParent = frame.parent;
		this.curFrame = frame;
		this.removeTiles();
		var _g = 0;
		var _g1 = frame.get_scale9frames();
		while(_g < _g1.length) {
			var s9frame = _g1[_g];
			++_g;
			var img = new zygame_display_batch_BImage(s9frame);
			this.addTile(img);
		}
		if(!this._setWidth) {
			this._width = frame.width;
		}
		if(!this._setHeight) {
			this._height = frame.height;
		}
		this.updateScale9();
	}
	,set_width: function(value) {
		this._setWidth = true;
		this._width = value;
		this.updateScale9();
		return value;
	}
	,set_height: function(value) {
		this._setHeight = true;
		this._height = value;
		this.updateScale9();
		return value;
	}
	,updateScale9: function() {
		if(this.curFrame == null) {
			return;
		}
		var _g = 0;
		while(_g < 9) {
			var i = _g++;
			var tile = this.getTileAt(i);
			var left = this.curFrame.get_scale9rect().x;
			var right = this.curFrame.width - this.curFrame.get_scale9rect().x - this.curFrame.get_scale9rect().width;
			var bottom = this.curFrame.height - this.curFrame.get_scale9rect().y - this.curFrame.get_scale9rect().height;
			var top = this.curFrame.get_scale9rect().y;
			var cwidth = this._width - left - right;
			var cheight = this._height - top - bottom;
			var pscaleX = cwidth / this.curFrame.get_scale9frames()[i].width;
			var pscaleY = cheight / this.curFrame.get_scale9frames()[i].height;
			switch(i) {
			case 0:
				break;
			case 1:
				tile.set_x(left);
				tile.set_scaleX(pscaleX);
				break;
			case 2:
				tile.set_x(this._width - right);
				break;
			case 3:
				tile.set_y(top);
				tile.set_scaleY(pscaleY);
				break;
			case 4:
				tile.set_x(left);
				tile.set_y(top);
				tile.set_scaleX(pscaleX);
				tile.set_scaleY(pscaleY);
				break;
			case 5:
				tile.set_x(this._width - right);
				tile.set_y(top);
				tile.set_scaleY(pscaleY);
				break;
			case 6:
				tile.set_y(this._height - bottom);
				break;
			case 7:
				tile.set_x(left);
				tile.set_y(this._height - bottom);
				tile.set_scaleX(pscaleX);
				break;
			case 8:
				tile.set_x(this._width - right);
				tile.set_y(this._height - bottom);
				break;
			}
		}
	}
	,getClickBounds: function(tile) {
		if(this.curFrame != null) {
			var rect = new openfl_geom_Rectangle();
			rect.setTo(-this.get_originX(),-this.get_originY(),this._width,this._height);
			rect.__transform(rect,this.get_matrix());
			return rect;
		}
		return null;
	}
	,getBounds: function(tile) {
		var rect = null;
		if(this.parent == tile) {
			rect = this.getClickBounds(tile);
		}
		if(rect == null) {
			rect = zygame_display_batch_BDisplayObjectContainer.prototype.getBounds.call(this,tile);
		}
		return rect;
	}
	,__class__: zygame_display_batch_BScale9Image
});
var zygame_display_batch_ImageBatchs = function(batchSprites,pwidth,pheight,smoothing) {
	if(smoothing == null) {
		smoothing = true;
	}
	if(pheight == null) {
		pheight = -1;
	}
	if(pwidth == null) {
		pwidth = -1;
	}
	if(pwidth == -1) {
		pwidth = zygame_core_Start.stageWidth;
	}
	if(pheight == -1) {
		pheight = zygame_core_Start.stageHeight;
	}
	openfl_display_Tilemap.call(this,pwidth,pheight,batchSprites.getTileset(),smoothing);
	this._batchSprites = batchSprites;
	this._batch = new zygame_display_batch_BSprite();
	openfl_display_Tilemap.prototype.addTileAt.call(this,this._batch,0);
};
$hxClasses["zygame.display.batch.ImageBatchs"] = zygame_display_batch_ImageBatchs;
zygame_display_batch_ImageBatchs.__name__ = "zygame.display.batch.ImageBatchs";
zygame_display_batch_ImageBatchs.__super__ = openfl_display_Tilemap;
zygame_display_batch_ImageBatchs.prototype = $extend(openfl_display_Tilemap.prototype,{
	_batchSprites: null
	,_batch: null
	,addChild: function(display) {
		this._batch.addChild(display);
	}
	,removeTiles: function(beginIndex,endIndex) {
		if(endIndex == null) {
			endIndex = 2147483647;
		}
		if(beginIndex == null) {
			beginIndex = 0;
		}
		this._batch.removeTiles(beginIndex,endIndex);
	}
	,addChildAt: function(display,index) {
		this._batch.addChildAt(display,index);
	}
	,addTile: function(tile) {
		throw haxe_Exception.thrown("请使用addChild或者addChildAt方法");
	}
	,addTileAt: function(tile,index) {
		throw haxe_Exception.thrown("请使用addChild或者addChildAt方法");
	}
	,getBSprite: function() {
		return this._batch;
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly,hitObject) {
		if(!((this.parent) instanceof zygame_display_batch_TouchImageBatchsContainer)) {
			return openfl_display_Tilemap.prototype.__hitTest.call(this,x,y,shapeFlag,stack,interactiveOnly,hitObject);
		}
		var touchContainer = this.parent;
		if(touchContainer.getTilePosAt(touchContainer.get_mouseX(),touchContainer.get_mouseY()) != null) {
			return true;
		}
		return false;
	}
	,__class__: zygame_display_batch_ImageBatchs
});
var zygame_display_batch_TouchImageBatchsContainer = function(batchSprites,pwidth,pheight) {
	if(pheight == null) {
		pheight = -1;
	}
	if(pwidth == null) {
		pwidth = -1;
	}
	zygame_display_TouchDisplayObjectContainer.call(this);
	if(pwidth == -1) {
		pwidth = zygame_core_Start.stageWidth;
	}
	if(pheight == -1) {
		pheight = zygame_core_Start.stageHeight;
	}
	var _imageBatchs = new zygame_display_batch_ImageBatchs(batchSprites,pwidth,pheight);
	zygame_display_TouchDisplayObjectContainer.prototype.addChildAt.call(this,_imageBatchs,0);
	this.mouseChildren = false;
	this.setTouchEvent(true);
};
$hxClasses["zygame.display.batch.TouchImageBatchsContainer"] = zygame_display_batch_TouchImageBatchsContainer;
zygame_display_batch_TouchImageBatchsContainer.__name__ = "zygame.display.batch.TouchImageBatchsContainer";
zygame_display_batch_TouchImageBatchsContainer.__super__ = zygame_display_TouchDisplayObjectContainer;
zygame_display_batch_TouchImageBatchsContainer.prototype = $extend(zygame_display_TouchDisplayObjectContainer.prototype,{
	set_width: function(value) {
		var num = this.get_numChildren();
		var _g = 0;
		var _g1 = num;
		while(_g < _g1) {
			var i = _g++;
			this.getChildAt(i).set_width(value);
		}
		return value;
	}
	,set_height: function(value) {
		var num = this.get_numChildren();
		var _g = 0;
		var _g1 = num;
		while(_g < _g1) {
			var i = _g++;
			this.getChildAt(i).set_height(value);
		}
		return value;
	}
	,getBatchs: function(id) {
		if(id == null) {
			id = 0;
		}
		return this.getChildAt(id);
	}
	,addChild: function(display) {
		throw haxe_Exception.thrown("无法直接使用addChild添加，需要使用getBatchs().addChild方式添加");
	}
	,addChildAt: function(display,index) {
		throw haxe_Exception.thrown("无法直接使用addChild添加，需要使用getBatchs().addChild方式添加");
	}
	,addBatchs: function(batch) {
		zygame_display_TouchDisplayObjectContainer.prototype.addChildAt.call(this,batch,this.get_numChildren());
	}
	,onTouchBegin: function(e) {
		this.dispatchTileEvent(e);
	}
	,onTouchMove: function(e) {
		this.dispatchTileEvent(e);
	}
	,onTouchEnd: function(e) {
		if(e.target == this || e.currentTarget == this.stage) {
			this.dispatchTileEvent(e);
		}
	}
	,getTilePosAt: function(posx,posy) {
		var tile = null;
		var id = this.get_numChildren() - 1;
		while(id >= 0) {
			var batch = this.getBatchs(id);
			tile = batch.getBSprite().getTileAtPos(posx - batch.get_x(),posy - batch.get_y());
			if(tile != null) {
				break;
			}
			--id;
		}
		return tile;
	}
	,dispatchTileEvent: function(e) {
		var tile = this.getTilePosAt(this.get_mouseX(),this.get_mouseY());
		if(tile != null) {
			if(((tile) instanceof zygame_display_batch_BTouchSprite)) {
				if(e.currentTarget != this.stage) {
					var touchTile = tile;
					switch(e.type + "Tile") {
					case "touchBeginTile":
						touchTile.onTouchBegin(e);
						break;
					case "touchEndTile":
						touchTile.onTouchEnd(e);
						break;
					case "touchMoveTile":
						touchTile.onTouchMove(e);
						break;
					}
				}
				if(e.target == this) {
					this.dispatchEvent(new zygame_events_TileTouchEvent(e.type + "Tile",tile));
				}
			} else if(e.target == this) {
				this.dispatchEvent(new zygame_events_TileTouchEvent(e.type + "Tile",tile));
			}
		}
		if(e.currentTarget == this.stage) {
			var num = this.get_numChildren() - 1;
			while(num >= 0) {
				this.getBatchs(num).getBSprite().dispatchTouchEvent(e);
				--num;
			}
		}
	}
	,dispatchEvent: function(event) {
		return zygame_display_TouchDisplayObjectContainer.prototype.dispatchEvent.call(this,event);
	}
	,__class__: zygame_display_batch_TouchImageBatchsContainer
});
var zygame_events_TileTouchEvent = function(type,tile,event) {
	openfl_events_Event.call(this,type,true,false);
	this.tile = tile;
	this.event = event;
};
$hxClasses["zygame.events.TileTouchEvent"] = zygame_events_TileTouchEvent;
zygame_events_TileTouchEvent.__name__ = "zygame.events.TileTouchEvent";
zygame_events_TileTouchEvent.__super__ = openfl_events_Event;
zygame_events_TileTouchEvent.prototype = $extend(openfl_events_Event.prototype,{
	tile: null
	,event: null
	,__class__: zygame_events_TileTouchEvent
});
var zygame_events_ZEvent = function(type,data) {
	this.data = null;
	openfl_events_Event.call(this,type,true,false);
	this.data = data;
};
$hxClasses["zygame.events.ZEvent"] = zygame_events_ZEvent;
zygame_events_ZEvent.__name__ = "zygame.events.ZEvent";
zygame_events_ZEvent.__super__ = openfl_events_Event;
zygame_events_ZEvent.prototype = $extend(openfl_events_Event.prototype,{
	data: null
	,__class__: zygame_events_ZEvent
});
var zygame_macro_AutoBuilder = function() { };
$hxClasses["zygame.macro.AutoBuilder"] = zygame_macro_AutoBuilder;
zygame_macro_AutoBuilder.__name__ = "zygame.macro.AutoBuilder";
var zygame_macro_JSONData = function() { };
$hxClasses["zygame.macro.JSONData"] = zygame_macro_JSONData;
zygame_macro_JSONData.__name__ = "zygame.macro.JSONData";
zygame_macro_JSONData.getType = function(value,pos,doc) {
	if(typeof(value) == "boolean") {
		return haxe_macro_ComplexType.TPath({ pack : [], name : "Bool", params : []});
	}
	if(typeof(value) == "number" && ((value | 0) === value) || typeof(value) == "number") {
		return haxe_macro_ComplexType.TPath({ pack : [], name : "Float", params : []});
	} else if(((value) instanceof Array)) {
		var v = value[0];
		var t = zygame_macro_JSONData.getType(v,pos,doc);
		return haxe_macro_ComplexType.TPath({ pack : [], name : "Array", params : [haxe_macro_TypeParam.TPType(t)]});
	} else if(typeof(value) == "string") {
		return haxe_macro_ComplexType.TPath({ pack : [], name : "String", params : []});
	}
	var args = [];
	var keys = Reflect.fields(value);
	var _g = 0;
	while(_g < keys.length) {
		var key = keys[_g];
		++_g;
		var kvalue = Reflect.getProperty(value,key);
		args.push({ name : key, doc : doc != null ? Reflect.getProperty(doc,key) : null, meta : [], access : [haxe_macro_Access.APublic], kind : haxe_macro_FieldType.FVar(zygame_macro_JSONData.getType(kvalue,pos,doc)), pos : pos});
	}
	var t = haxe_macro_ComplexType.TAnonymous(args);
	return t;
};
var zygame_macro_ZMacroUtils = function() { };
$hxClasses["zygame.macro.ZMacroUtils"] = zygame_macro_ZMacroUtils;
zygame_macro_ZMacroUtils.__name__ = "zygame.macro.ZMacroUtils";
var zygame_media_SoundChannelManager = function() {
	this._effectAvailable = true;
	this._musicAvailable = true;
	this._effectChannel = [];
};
$hxClasses["zygame.media.SoundChannelManager"] = zygame_media_SoundChannelManager;
zygame_media_SoundChannelManager.__name__ = "zygame.media.SoundChannelManager";
zygame_media_SoundChannelManager.current = function() {
	if(zygame_media_SoundChannelManager._current == null) {
		zygame_media_SoundChannelManager._current = new zygame_media_SoundChannelManager();
	}
	return zygame_media_SoundChannelManager._current;
};
zygame_media_SoundChannelManager.prototype = {
	_music: null
	,_musicChannel: null
	,_effectChannel: null
	,_musicAvailable: null
	,_effectAvailable: null
	,playEffect: function(sound,loop) {
		var _gthis = this;
		if(sound != null) {
			try {
				if(this._effectAvailable) {
					var c = sound.play(0,loop);
					if(c == null) {
						return c;
					}
					this._effectChannel.push(c);
					(js_Boot.__cast(c , openfl_events_EventDispatcher)).addEventListener("soundComplete",function(e) {
						HxOverrides.remove(_gthis._effectChannel,c);
					});
					return c;
				}
			} catch( _g ) {
				haxe_NativeStackTrace.lastError = _g;
				var e = haxe_Exception.caught(_g).unwrap();
				haxe_Log.trace("音频播放异常：",{ fileName : "Source/zygame/media/SoundChannelManager.hx", lineNumber : 62, className : "zygame.media.SoundChannelManager", methodName : "playEffect", customParams : [e]});
			}
			return null;
		}
		return null;
	}
	,playMusic: function(sound) {
		if(this._musicChannel != null && sound == this._music) {
			haxe_Log.trace("Muisc is repat:" + sound.path,{ fileName : "Source/zygame/media/SoundChannelManager.hx", lineNumber : 75, className : "zygame.media.SoundChannelManager", methodName : "playMusic"});
			return;
		}
		this.stopMusic();
		this._music = sound;
		try {
			if(this._musicAvailable) {
				if(this._music != null) {
					this._musicChannel = this._music.play(99999);
				}
			}
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
			var e = haxe_Exception.caught(_g).unwrap();
			haxe_Log.trace("音频播放异常：",{ fileName : "Source/zygame/media/SoundChannelManager.hx", lineNumber : 86, className : "zygame.media.SoundChannelManager", methodName : "playMusic", customParams : [e]});
		}
	}
	,stopMusic: function() {
		if(this._musicChannel != null) {
			this._musicChannel.stop();
			this._musicChannel = null;
		}
	}
	,resumeMusic: function() {
		if(this._music != null) {
			this.playMusic(this._music);
		}
	}
	,stopAllEffect: function() {
		var _g = 0;
		var _g1 = this._effectChannel;
		while(_g < _g1.length) {
			var channel = _g1[_g];
			++_g;
			channel.stop();
		}
		while(this._effectChannel.length > 0) HxOverrides.remove(this._effectChannel,this._effectChannel[0]);
	}
	,stopAllEffectAndMusic: function() {
		this.stopAllEffect();
		this.stopMusic();
	}
	,setMusicAvailable: function(bool) {
		this._musicAvailable = bool;
		if(bool) {
			this.resumeMusic();
		} else {
			this.stopMusic();
		}
	}
	,setEffectAvailable: function(bool) {
		this._effectAvailable = bool;
		if(!bool) {
			this.stopAllEffect();
		}
	}
	,isEffectAvailable: function() {
		return this._effectAvailable;
	}
	,isMusicAvailable: function() {
		return this._musicAvailable;
	}
	,__class__: zygame_media_SoundChannelManager
};
var zygame_mini_MiniEngine = function() { };
$hxClasses["zygame.mini.MiniEngine"] = zygame_mini_MiniEngine;
zygame_mini_MiniEngine.__name__ = "zygame.mini.MiniEngine";
zygame_mini_MiniEngine.loadHaxeApp = function(url,call) {
	var assets = new zygame_mini_MiniEngineAssets();
	assets.path = url;
	assets.loadAssetsZip(url);
	assets.start(function(f) {
		if(f == 1) {
			call(assets);
		}
	});
};
zygame_mini_MiniEngine.parseMiniHaxe = function(haxeCode) {
	var miniHaxe = new zygame_mini_MiniEngineHaxe(haxeCode);
	var xml = Xml.createDocument();
	miniHaxe.xml = xml;
	var className = HxOverrides.substr(haxeCode,haxeCode.indexOf("extends ") + 8,null);
	className = HxOverrides.substr(className,0,className.indexOf("{"));
	className = StringTools.replace(className," ","");
	var root = Xml.createElement(className);
	xml.insertChild(root,0);
	var index = 0;
	var item = haxe_ds_StringMap.valueIterator(miniHaxe.vars.h);
	while(item.hasNext()) {
		var item1 = item.next();
		if(!item1.isStatic) {
			var xmlItem = null;
			switch(item1.type) {
			case zygame_script_ZBool:
				xmlItem = Xml.createElement("ZBool");
				break;
			case zygame_script_ZFloat:
				xmlItem = Xml.createElement("ZFloat");
				break;
			case zygame_script_ZInt:
				xmlItem = Xml.createElement("ZInt");
				break;
			case zygame_script_ZObject:
				xmlItem = Xml.createElement("ZObject");
				break;
			case zygame_script_ZString:
				xmlItem = Xml.createElement("ZString");
				break;
			}
			xmlItem.set("id",item1.name);
			if(item1.data != null) {
				xmlItem.set("value",Std.string(item1.data));
			}
			root.insertChild(xmlItem,index);
			++index;
		}
	}
	var item = haxe_ds_StringMap.valueIterator(miniHaxe.functions.h);
	while(item.hasNext()) {
		var item1 = item.next();
		if(!item1.isStatic) {
			var xmlItem = Xml.createElement("ZHaxe");
			xmlItem.insertChild(Xml.createPCData(item1.hscript),0);
			xmlItem.set("id",item1.name);
			if(item1.args != "") {
				xmlItem.set("args",item1.args);
			}
			root.insertChild(xmlItem,index);
			++index;
		}
	}
	return miniHaxe;
};
var zygame_mini_MiniEngineHaxe = function(haxeCode) {
	this.vars = new haxe_ds_StringMap();
	this.functions = new haxe_ds_StringMap();
	this.imports = new haxe_ds_StringMap();
	this.xml = null;
	var code = haxeCode.split("\n");
	var isFunc = false;
	var funcCount = -1;
	var func = null;
	var _g = 0;
	while(_g < code.length) {
		var item = code[_g];
		++_g;
		if(isFunc) {
			if(item.indexOf("var") != -1) {
				func.pushVar(item);
				continue;
			} else if(item.indexOf("super") != -1) {
				continue;
			}
			if(item.indexOf("{") != -1) {
				++funcCount;
				if(funcCount == 0) {
					item = StringTools.replace(item,"{","");
				}
			}
			if(item.indexOf("}") != -1) {
				--funcCount;
				if(funcCount == -1) {
					isFunc = false;
				}
				if(!isFunc) {
					item = StringTools.replace(item,"}","");
				}
			}
			func.pushScript(item);
			if(!isFunc) {
				this.functions.h[func.name] = func;
				func = null;
			}
		} else if(item.indexOf("var ") != -1) {
			var value = new zygame_mini_Var(item);
			this.vars.h[value.name] = value;
		} else if(item.indexOf("import ") != -1) {
			var typeName = StringTools.replace(StringTools.replace(item,"import ",""),";","");
			this.imports.h[HxOverrides.substr(typeName,typeName.lastIndexOf(".") + 1,null)] = typeName;
		} else if(item.indexOf("function ") != -1 && item.indexOf("}") == -1) {
			if(item.indexOf("{") != -1) {
				funcCount = 0;
			} else {
				funcCount = -1;
			}
			isFunc = true;
			func = new zygame_mini_Func(item);
		}
	}
	var func = haxe_ds_StringMap.valueIterator(this.functions.h);
	while(func.hasNext()) {
		var func1 = func.next();
		var hasNew = false;
		var lastAtt = "";
		var hasThis = false;
		var _g = 0;
		var _g1 = func1.attNames;
		while(_g < _g1.length) {
			var att = _g1[_g];
			++_g;
			if(att.name == "new") {
				func1.hscript = StringTools.replace(func1.hscript,att.target,"");
				hasNew = true;
				lastAtt = att.name;
				continue;
			}
			if(att.name == "this") {
				if(func1.hscript.indexOf(Std.string(att.target) + "$") == -1) {
					func1.hscript = StringTools.replace(func1.hscript,att.target,"this");
					lastAtt = "";
				} else {
					hasThis = true;
					func1.hscript = StringTools.replace(func1.hscript,att.target,"");
					lastAtt = att.name;
				}
				continue;
			}
			if(hasNew) {
				hasNew = false;
				func1.hscript = StringTools.replace(func1.hscript,att.target,"new " + Std.string(att.name));
				lastAtt = att.name;
				continue;
			}
			if(Object.prototype.hasOwnProperty.call(this.functions.h,att.name)) {
				func1.hscript = StringTools.replace(func1.hscript,att.target,att.name);
			} else if(Object.prototype.hasOwnProperty.call(this.vars.h,att.name) && !this.vars.h[att.name].isStatic) {
				if(func1.hscript.indexOf("this." + Std.string(att.target)) != -1 || func1.hscript.indexOf("." + Std.string(att.target)) == -1 || func1.hscript.indexOf(Std.string(att.target) + ".") != -1 || func1.hscript.indexOf(Std.string(att.target) + "[") != -1) {
					func1.hscript = StringTools.replace(func1.hscript,att.target,Std.string(att.name) + ".value");
				} else {
					func1.hscript = StringTools.replace(func1.hscript,att.target,att.name);
				}
			} else {
				var attName = att.name;
				if(attName.indexOf(":") != -1 && attName.length > 1) {
					var mhend = HxOverrides.substr(attName,attName.indexOf(":") + 1,null);
					var start = mhend.charAt(0);
					if(zygame_mini_Func.NAMEPIX.indexOf(start) == -1 && zygame_mini_MiniEngineHaxe.VARATTR.indexOf(start) == -1 && start == start.toUpperCase()) {
						attName = HxOverrides.substr(attName,0,attName.lastIndexOf(":"));
					}
				}
				func1.hscript = StringTools.replace(func1.hscript,att.target,(hasThis ? "this." : "") + attName);
			}
			hasThis = false;
			lastAtt = att.name;
		}
	}
};
$hxClasses["zygame.mini.MiniEngineHaxe"] = zygame_mini_MiniEngineHaxe;
zygame_mini_MiniEngineHaxe.__name__ = "zygame.mini.MiniEngineHaxe";
zygame_mini_MiniEngineHaxe.prototype = {
	xml: null
	,imports: null
	,functions: null
	,vars: null
	,__class__: zygame_mini_MiniEngineHaxe
};
var zygame_mini_Func = function(funcScript) {
	this.isStatic = false;
	this.attIndex = 0;
	this.vars = new haxe_ds_StringMap();
	this.attNames = [];
	this.hscript = "";
	var funcName = funcScript;
	this.isStatic = funcName.indexOf("static") != -1;
	funcName = HxOverrides.substr(funcName,funcName.indexOf("function ") + 8,null);
	funcName = HxOverrides.substr(funcName,0,funcName.lastIndexOf("("));
	funcName = StringTools.replace(funcName," ","");
	this.name = funcName;
	this.args = HxOverrides.substr(funcScript,funcScript.indexOf("(") + 1,null);
	this.args = HxOverrides.substr(this.args,0,this.args.lastIndexOf(")"));
	var arr = this.args.split(",");
	var _g = 0;
	var _g1 = arr.length;
	while(_g < _g1) {
		var i = _g++;
		var att = arr[i];
		if(att.indexOf(":") != -1) {
			att = HxOverrides.substr(att,0,att.lastIndexOf(":"));
		}
		arr[i] = att;
		arr[i] = StringTools.replace(arr[i]," ","");
	}
	this.args = arr.join(",");
};
$hxClasses["zygame.mini.Func"] = zygame_mini_Func;
zygame_mini_Func.__name__ = "zygame.mini.Func";
zygame_mini_Func.prototype = {
	hscript: null
	,name: null
	,attNames: null
	,vars: null
	,attIndex: null
	,args: null
	,isStatic: null
	,pushVar: function(item) {
		var varValue = new zygame_mini_Var(item);
		this.vars.h[varValue.name] = varValue;
		this.pushScript(item);
	}
	,pushScript: function(str) {
		if(str.indexOf("case ") != -1) {
			this.hscript += str + "\n";
			return;
		}
		str = StringTools.replace(str,"MiniUtils.getAssets()","assets");
		str = StringTools.replace(str,"MiniUtils.getApp()","app");
		var newstr = "";
		var attName = "";
		var hasThis = false;
		var hasString = "";
		var _g = 0;
		var _g1 = str.length;
		while(_g < _g1) {
			var i = _g++;
			var n = str.charAt(i);
			if(zygame_mini_Func.NAMEPIX.indexOf(n) != -1 || i == str.length - 1) {
				if(hasString != "") {
					if(hasString == n) {
						hasString = "";
					}
					newstr += n;
					continue;
				}
				if(n == "\"" || n == "'") {
					hasString = n;
				}
				if(attName != "") {
					hasThis = attName == "this";
					newstr += "${" + this.attIndex + "}";
					this.attNames.push({ name : attName, target : "${" + this.attIndex + "}"});
					attName = "";
					this.attIndex++;
				}
				if(!hasThis || n != ".") {
					newstr += n;
				}
				hasThis = false;
			} else if(hasString != "") {
				newstr += n;
			} else {
				attName += n;
			}
		}
		this.hscript += newstr + "\n";
	}
	,__class__: zygame_mini_Func
};
var zygame_mini_Var = function(value) {
	this.isStatic = false;
	this.type = null;
	this.data = null;
	this.name = null;
	if(value.indexOf("static") != -1) {
		this.isStatic = true;
	}
	var ptype = "Dynamic";
	if(value.indexOf(":") != -1) {
		this.name = HxOverrides.substr(value,value.indexOf("var ") + 4,null);
		this.name = HxOverrides.substr(this.name,0,this.name.indexOf(":"));
	} else if(value.indexOf("=") != -1) {
		this.name = HxOverrides.substr(value,value.indexOf("var ") + 4,null);
		this.name = HxOverrides.substr(this.name,0,this.name.indexOf("="));
	}
	this.name = StringTools.replace(this.name," ","");
	if(value.indexOf(":") != -1) {
		ptype = HxOverrides.substr(value,value.indexOf(":") + 1,null);
	}
	ptype = HxOverrides.substr(ptype,0,ptype.indexOf("="));
	ptype = StringTools.replace(ptype," ","");
	var pvalue = HxOverrides.substr(value,value.indexOf("=") + 1,null);
	pvalue = HxOverrides.substr(pvalue,0,pvalue.indexOf(";"));
	pvalue = StringTools.replace(pvalue," ","");
	if(pvalue.length == 0) {
		pvalue = null;
	}
	switch(ptype) {
	case "Bool":
		this.type = zygame_script_ZBool;
		if(pvalue != null) {
			this.data = pvalue == "true";
		}
		break;
	case "Float":
		this.type = zygame_script_ZFloat;
		if(pvalue != null) {
			this.data = parseFloat(pvalue);
		}
		break;
	case "Int":
		this.type = zygame_script_ZInt;
		if(pvalue != null) {
			this.data = Std.parseInt(pvalue);
		}
		break;
	case "String":
		this.type = zygame_script_ZString;
		if(pvalue != null) {
			pvalue = HxOverrides.substr(pvalue,1,null);
			pvalue = HxOverrides.substr(pvalue,0,pvalue.length - 1);
			this.data = pvalue;
		}
		break;
	default:
		this.type = zygame_script_ZObject;
		this.data = null;
	}
};
$hxClasses["zygame.mini.Var"] = zygame_mini_Var;
zygame_mini_Var.__name__ = "zygame.mini.Var";
zygame_mini_Var.prototype = {
	name: null
	,data: null
	,type: null
	,isStatic: null
	,__class__: zygame_mini_Var
};
var zygame_utils_ZAssets = function() {
	this.canError = false;
	this._loadedCount = 0;
	this._allLoadCount = 0;
	this._isOver = false;
	this.extPasrer = new haxe_ds_StringMap();
	this.currentLoadNumber = 0;
	this.maxLoadNumber = 5;
	this._loadPaths = [];
	this._loadTextureLoads = [];
	this._loadMusics = [];
	this._loadFntLoads = [];
	this._loadMapliveLoads = [];
	this._loadSpines = [];
	this._zipLoads = [];
	this._swfliteLoads = [];
	this._3dLoads = [];
	this._dynamicTextureLoads = [];
	this._sounds = openfl_utils_Dictionary.toStringMap(null);
	this._bitmaps = openfl_utils_Dictionary.toStringMap(null);
	this._jsons = openfl_utils_Dictionary.toStringMap(null);
	this._xmls = openfl_utils_Dictionary.toStringMap(null);
	this._textures = openfl_utils_Dictionary.toStringMap(null);
	this._musics = openfl_utils_Dictionary.toStringMap(null);
	this._fnts = openfl_utils_Dictionary.toStringMap(null);
	this._maps = openfl_utils_Dictionary.toStringMap(null);
	this._spines = openfl_utils_Dictionary.toStringMap(null);
	this._swflites = openfl_utils_Dictionary.toStringMap(null);
	this._zips = openfl_utils_Dictionary.toStringMap(null);
	this._cdbs = openfl_utils_Dictionary.toStringMap(null);
	this._strings = openfl_utils_Dictionary.toStringMap(null);
	this._textcache = openfl_utils_Dictionary.toStringMap(null);
	this._3ds = openfl_utils_Dictionary.toStringMap(null);
	this._dynamicAtlas = openfl_utils_Dictionary.toStringMap(null);
};
$hxClasses["zygame.utils.ZAssets"] = zygame_utils_ZAssets;
zygame_utils_ZAssets.__name__ = "zygame.utils.ZAssets";
zygame_utils_ZAssets.prototype = {
	maxLoadNumber: null
	,currentLoadNumber: null
	,extPasrer: null
	,_loadPaths: null
	,_loadTextureLoads: null
	,_loadMusics: null
	,_loadFntLoads: null
	,_loadMapliveLoads: null
	,_loadSpines: null
	,_swfliteLoads: null
	,_zipLoads: null
	,_3dLoads: null
	,_dynamicTextureLoads: null
	,_callBack: null
	,_errorCallBack: null
	,_bitmaps: null
	,_jsons: null
	,_xmls: null
	,_textures: null
	,_sounds: null
	,_musics: null
	,_fnts: null
	,_maps: null
	,_spines: null
	,_swflites: null
	,_zips: null
	,_cdbs: null
	,_textcache: null
	,_strings: null
	,_3ds: null
	,_dynamicAtlas: null
	,_isOver: null
	,_allLoadCount: null
	,_loadedCount: null
	,_bgid: null
	,load3DFile: function(path) {
		throw haxe_Exception.thrown("不能在未包含zygameui-3d库时直接调用load3DFile。");
	}
	,loadFiles: function(arr) {
		var _g = 0;
		var _g1 = arr.length;
		while(_g < _g1) {
			var i = _g++;
			this.loadFile(arr[i]);
		}
	}
	,loadFile: function(path) {
		if(this._loadPaths.indexOf(path) == -1) {
			this._loadPaths.push(path);
		}
	}
	,loadSwfliteFile: function(path,isZip) {
		if(isZip == null) {
			isZip = true;
		}
		this._swfliteLoads.push(new zygame_utils_load_SWFLiteLoader(path,null,isZip));
	}
	,loadDynamicTextureAtlasImage: function(atlasName,path) {
		var _g = 0;
		var _g1 = this._dynamicTextureLoads;
		while(_g < _g1.length) {
			var loader = _g1[_g];
			++_g;
			if(loader.textureAtlas.textureAtlasName == atlasName) {
				loader.loadFile(path);
				return;
			}
		}
		var atlasLoader = new zygame_utils_load_DynamicTextureLoader(atlasName);
		atlasLoader.loadFile(path);
		this._dynamicTextureLoads.push(atlasLoader);
	}
	,loadAssetsZip: function(path) {
		this._zipLoads.push(new zygame_utils_load_AssetsZipLoader(path));
	}
	,unloadAssetsZip: function(id) {
		if(Object.prototype.hasOwnProperty.call(this._zips.h,id)) {
			this._zips.h[id].unload();
			var _this = this._zips;
			if(Object.prototype.hasOwnProperty.call(_this.h,id)) {
				delete(_this.h[id]);
			}
		}
	}
	,loadTextures: function(img,xml,isAtf) {
		if(isAtf == null) {
			isAtf = false;
		}
		this._loadTextureLoads.push(new zygame_utils_load_TextureLoader(img,xml,isAtf));
	}
	,loadSpineTextAlats: function(texPaths,texJsonPath) {
		this._loadSpines.push(new zygame_utils_load_SpineTextureAtalsLoader(texJsonPath,texPaths));
	}
	,loadFnt: function(pngPath,xmlPath) {
		this._loadFntLoads.push(new zygame_utils_load_FntLoader(pngPath,xmlPath));
	}
	,loadMapliveData: function(bundlePath) {
		this._loadMapliveLoads.push(new zygame_utils_load_MapliveLoader(bundlePath));
	}
	,loadMusic: function(path) {
		this._loadMusics.push(new zygame_utils_load_MusicLoader(path));
	}
	,getNowLoadCount: function() {
		return this._loadPaths.length + this._loadTextureLoads.length + this._3dLoads.length + this._dynamicTextureLoads.length + this._loadMusics.length + this._loadFntLoads.length + this._loadMapliveLoads.length + this._loadSpines.length + this._swfliteLoads.length + this._zipLoads.length;
	}
	,canError: null
	,start: function(func,errorCall,canError) {
		if(canError == null) {
			canError = false;
		}
		this.canError = canError;
		this._isOver = false;
		this._errorCallBack = errorCall;
		this._callBack = func;
		this._allLoadCount = this.getNowLoadCount();
		this._loadedCount = 0;
		this.next();
	}
	,next: function(isLoaded) {
		if(isLoaded == null) {
			isLoaded = false;
		}
		var _gthis = this;
		if(this._isOver) {
			return;
		}
		if(this.currentLoadNumber >= this.maxLoadNumber) {
			return;
		}
		if(isLoaded) {
			this._loadedCount++;
			if(this._callBack != null) {
				var f = this._loadedCount / this._allLoadCount;
				if(f == 1) {
					this._callBack(this._loadedCount / this._allLoadCount);
					return;
				} else {
					this._callBack(this._loadedCount / this._allLoadCount);
				}
			}
		}
		if(this.getNowLoadCount() == 0) {
			return;
		}
		var _currentLoader = null;
		if(this._zipLoads.length > 0) {
			_currentLoader = this._zipLoads.shift();
		} else if(this._loadFntLoads.length > 0) {
			_currentLoader = this._loadFntLoads.shift();
		} else if(this._loadPaths.length > 0) {
			_currentLoader = this._loadPaths.shift();
		} else if(this._loadTextureLoads.length > 0) {
			_currentLoader = this._loadTextureLoads.shift();
		} else if(this._loadMusics.length > 0) {
			_currentLoader = this._loadMusics.shift();
		} else if(this._loadMapliveLoads.length > 0) {
			_currentLoader = this._loadMapliveLoads.shift();
		} else if(this._loadSpines.length > 0) {
			_currentLoader = this._loadSpines.shift();
		} else if(this._swfliteLoads.length > 0) {
			_currentLoader = this._swfliteLoads.shift();
		} else if(this._3dLoads.length > 0) {
			_currentLoader = this._3dLoads.shift();
		} else if(this._dynamicTextureLoads.length > 0) {
			_currentLoader = this._dynamicTextureLoads.shift();
		}
		if(((_currentLoader) instanceof zygame_utils_load_AssetsZipLoader)) {
			this.currentLoadNumber++;
			var ziploader = _currentLoader;
			ziploader.load($bind(this,this.onZipLoaded),$bind(this,this.onError));
			return;
		} else if(((_currentLoader) instanceof zygame_utils_load_DynamicTextureLoader)) {
			this.currentLoadNumber++;
			var dynamicLoader = _currentLoader;
			dynamicLoader.load($bind(this,this.onDynamicTextureLoaded),$bind(this,this.onError),this.canError);
		} else if(((_currentLoader) instanceof zygame_utils_load_SWFLiteLoader)) {
			this.currentLoadNumber++;
			var swfloader = _currentLoader;
			swfloader.load($bind(this,this.onSwfliteLoaded),$bind(this,this.onError));
		} else if(((_currentLoader) instanceof zygame_utils_load_SpineTextureAtalsLoader)) {
			this.currentLoadNumber++;
			var spineLoader = _currentLoader;
			spineLoader.load($bind(this,this.onSpineLoaded),$bind(this,this.onError));
		} else if(((_currentLoader) instanceof zygame_utils_load_MapliveLoader)) {
			this.currentLoadNumber++;
			var mapLoader = _currentLoader;
			mapLoader.load($bind(this,this.onMapliveLoaded),$bind(this,this.onMaplivePro),$bind(this,this.onError));
		} else if(((_currentLoader) instanceof zygame_utils_load_FntLoader)) {
			this.currentLoadNumber++;
			var fntLoader = _currentLoader;
			fntLoader.load($bind(this,this.onFntLoaded),$bind(this,this.onError));
		} else if(((_currentLoader) instanceof zygame_utils_load_MusicLoader)) {
			this.currentLoadNumber++;
			var musicLoader = _currentLoader;
			musicLoader.load($bind(this,this.onMusicLoaded),$bind(this,this.onError));
		} else if(((_currentLoader) instanceof zygame_utils_load_TextureLoader)) {
			this.currentLoadNumber++;
			var textureLoader = _currentLoader;
			var id = zygame_utils_StringUtils.getName(textureLoader.imgPath);
			if(this.existZipAssets(id,"png")) {
				this.loadZipTextureAtlas(id,function(t) {
					if(t != null) {
						t.path = textureLoader.imgPath;
						_gthis.onTexturesLoaded(t);
					}
				});
			} else {
				textureLoader.load($bind(this,this.onTexturesLoaded),$bind(this,this.onError));
			}
		} else if(typeof(_currentLoader) == "string") {
			var ext = zygame_utils_StringUtils.getExtType(_currentLoader);
			if(Object.prototype.hasOwnProperty.call(this.extPasrer.h,ext)) {
				ext = this.extPasrer.h[ext];
			}
			var id = zygame_utils_StringUtils.getName(_currentLoader);
			switch(ext) {
			case "cdb":
				var cdbLoader = new zygame_utils_load_CDBLoader(_currentLoader);
				cdbLoader.load($bind(this,this.onCDBLoader),$bind(this,this.onError));
				break;
			case "jpeg":case "jpg":case "png":
				this.currentLoadNumber++;
				if(this.existZipAssets(id,ext)) {
					this.loadZipBitmapData(id,function(bitmapData) {
						_gthis.onBitmapLoaded(_currentLoader,bitmapData);
					});
				} else {
					zygame_utils_AssetsUtils.loadBitmapData(_currentLoader,false).onCompleteAssets($bind(this,this.onBitmapLoaded)).onError($bind(this,this.onError));
				}
				break;
			case "json":
				this.currentLoadNumber++;
				if(this.existZipAssets(id,ext)) {
					this.onJSONLoaded(_currentLoader,this.getZipJson(id));
				} else {
					zygame_utils_AssetsUtils.loadText(_currentLoader).onCompleteAssets($bind(this,this.onJSONLoaded)).onError($bind(this,this.onError));
				}
				break;
			case "mp3":
				this.currentLoadNumber++;
				zygame_utils_AssetsUtils.loadSound(_currentLoader,false).onCompleteAssets($bind(this,this.onSoundLoaded)).onError($bind(this,this.onError));
				break;
			case "hx":case "txt":
				zygame_utils_AssetsUtils.loadText(_currentLoader).onCompleteAssets($bind(this,this.onTextLoaded)).onError($bind(this,this.onError));
				this.currentLoadNumber++;
				break;
			case "xml":
				this.currentLoadNumber++;
				if(this.existZipAssets(id,ext)) {
					this.onXmlLoaded(_currentLoader,haxe_xml_Printer.print(this.getZipXml(id)));
				} else {
					zygame_utils_AssetsUtils.loadText(_currentLoader).onCompleteAssets($bind(this,this.onXmlLoaded)).onError($bind(this,this.onError));
				}
				break;
			default:
				this.currentLoadNumber++;
				this.next(true);
			}
		}
		this.next();
	}
	,getZip: function(id) {
		return this._zips.h[id];
	}
	,getDynamicTextureAtlas: function(id) {
		return this._dynamicAtlas.h[id];
	}
	,existZipAssets: function(id,type) {
		var zip = haxe_ds_StringMap.keysIterator(this._zips.h);
		while(zip.hasNext()) {
			var zip1 = zip.next();
			if(this._zips.h[zip1].exist(id + "." + type)) {
				return true;
			}
		}
		return false;
	}
	,getSpineTextureAlats: function(atalsName) {
		return this._spines.h[atalsName];
	}
	,getSpineSpriteSkeletonData: function(atlasAndJson) {
		var names = atlasAndJson.split(":");
		if(this.getSpineTextureAlats(names[0]) == null) {
			return null;
		}
		return this.getSpineTextureAlats(names[0]).buildSpriteSkeletonData(names[1],JSON.stringify(this.getObject(names[1])));
	}
	,getSpineTilemapSkeletonData: function(atlasAndJson) {
		var names = atlasAndJson.split(":");
		return this.getSpineTextureAlats(names[0]).buildTilemapSkeletonData(names[1],JSON.stringify(this.getObject(names[1])));
	}
	,createSpineSpriteSkeleton: function(atalsName,skeletonJsonName) {
		return this._spines.h[atalsName].buildSpriteSkeleton(skeletonJsonName,JSON.stringify(this.getObject(skeletonJsonName)));
	}
	,createSpineTilemapSkeleton: function(atalsName,skeletonJsonName) {
		return this._spines.h[atalsName].buildTilemapSkeleton(skeletonJsonName,JSON.stringify(this.getObject(skeletonJsonName)));
	}
	,onSpineLoaded: function(data) {
		this.currentLoadNumber--;
		var pname = this.onPasingPathName(data.path);
		this._spines.h[pname] = data;
		data.id = pname;
		this.next(true);
	}
	,getMovieClip: function(id) {
		var arr = id.split(":");
		var swf = this._swflites.h[arr[0]];
		return swf.getMovieClip(arr[1]);
	}
	,unloadSwfliteFile: function(id) {
		if(Object.prototype.hasOwnProperty.call(this._swflites.h,id)) {
			this._swflites.h[id].unload();
			var _this = this._swflites;
			if(Object.prototype.hasOwnProperty.call(_this.h,id)) {
				delete(_this.h[id]);
			}
		}
	}
	,onZipLoaded: function(zip) {
		this.currentLoadNumber--;
		this._zips.h[zip.name] = zip;
		this.next(true);
	}
	,onDynamicTextureLoaded: function(atlas) {
		this.currentLoadNumber--;
		this._dynamicAtlas.h[atlas.textureAtlasName] = atlas;
		this.next(true);
	}
	,onSwfliteLoaded: function(swf) {
		this.currentLoadNumber--;
		this._swflites.h[swf.name] = swf;
		this.next(true);
	}
	,onMaplivePro: function(f) {
		this._callBack(this._loadedCount / this._allLoadCount + f * (0.99 / this._allLoadCount));
	}
	,onMapliveLoaded: function(data) {
		this.currentLoadNumber--;
		var this1 = this._maps;
		var key = data.get_name();
		this1.h[key] = data;
		this.next(true);
	}
	,onFntLoaded: function(data) {
		this.currentLoadNumber--;
		var pname = this.onPasingPathName(data.path);
		this._fnts.h[pname] = data;
		this.next(true);
	}
	,onPasingPathName: function(path) {
		return zygame_utils_StringUtils.getName(path);
	}
	,onMusicLoaded: function(music) {
		this.currentLoadNumber--;
		var pname = this.onPasingPathName(music.path);
		this._musics.h[pname] = music;
		this.next(true);
	}
	,onSoundLoaded: function(path,sound) {
		this.currentLoadNumber--;
		var pname = this.onPasingPathName(path);
		this._sounds.h[pname] = sound;
		this.next(true);
	}
	,setSound: function(id,sound) {
		this._sounds.h[id] = sound;
	}
	,loadZipTextureAtlas: function(id,call) {
		var _gthis = this;
		if(Object.prototype.hasOwnProperty.call(this._textures.h,id)) {
			call(this.getTextureAtlas(id));
			return;
		}
		var zip = haxe_ds_StringMap.keysIterator(this._zips.h);
		while(zip.hasNext()) {
			var zip1 = zip.next();
			if(this._zips.h[zip1].exist(id + ".png") && this._zips.h[zip1].exist(id + ".xml")) {
				this._zips.h[zip1].loadBitmapData(id,function(bitmapData) {
					var xml = _gthis.getZipXml(id);
					var textureAtlas = new zygame_utils_load_TextureAtlas(bitmapData,xml);
					call(textureAtlas);
				});
				break;
			}
		}
	}
	,getTextureAtlas: function(id) {
		return this._textures.h[id];
	}
	,putTextureAtlas: function(id,textureAtlas) {
		this._textures.h[id] = textureAtlas;
	}
	,onTexturesLoaded: function(atlas) {
		this.currentLoadNumber--;
		var pname = this.onPasingPathName(atlas.path);
		var textures = this.getTextureAtlas(pname);
		if(textures != null) {
			textures.dispose();
		}
		this._textures.h[pname] = atlas;
		this.next(true);
	}
	,getBitmapData: function(id,foundAtlas) {
		if(foundAtlas == null) {
			foundAtlas = false;
		}
		if(id.indexOf(":") == -1) {
			if(Object.prototype.hasOwnProperty.call(this._bitmaps.h,id)) {
				return this._bitmaps.h[id];
			} else if(foundAtlas) {
				var _g = haxe_ds_StringMap.kvIterator(this._textures.h);
				while(_g.hasNext()) {
					var _g1 = _g.next();
					var key = _g1.key;
					var atlas = _g1.value;
					var data = atlas.getBitmapDataFrame(id);
					if(data != null) {
						return data;
					}
				}
				var _g = haxe_ds_StringMap.kvIterator(this._spines.h);
				while(_g.hasNext()) {
					var _g1 = _g.next();
					var key = _g1.key;
					var value = _g1.value;
					var data = value.getBitmapDataFrame(id);
					if(data != null) {
						return data;
					}
				}
				return null;
			} else {
				return null;
			}
		} else {
			var data = this.getBitmapDataFrame(id);
			return data;
		}
	}
	,get3DMesh: function(id) {
		var arr = id.split(":");
		if(arr.length != 2) {
			throw haxe_Exception.thrown("Get3DMesh id需要使用:标示，即3D文件名:目标Mesh");
		}
		return this._3ds.h[arr[0]].getMesh(arr[1]);
	}
	,getZLoader3D: function(id) {
		return this._3ds.h[id];
	}
	,buildObject3D: function(id) {
		return null;
	}
	,setBitmapData: function(id,bitmapData) {
		if(Object.prototype.hasOwnProperty.call(this._bitmaps.h,id)) {
			zygame_utils_ZGC.disposeBitmapData(this._bitmaps.h[id]);
		}
		this._bitmaps.h[id] = bitmapData;
	}
	,loadZipBitmapData: function(id,call) {
		var zip = haxe_ds_StringMap.keysIterator(this._zips.h);
		while(zip.hasNext()) {
			var zip1 = zip.next();
			if(this._zips.h[zip1].exist(id + ".png") || this._zips.h[zip1].exist(id + ".jpg")) {
				this._zips.h[zip1].loadBitmapData(id,call);
				break;
			}
		}
	}
	,cacheText: function(id,text,fontName,size,color,autoWarp) {
		if(autoWarp == null) {
			autoWarp = false;
		}
		if(color == null) {
			color = 16777215;
		}
		autoWarp = true;
		if(fontName == null) {
			fontName = zygame_components_base_ZConfig.fontName;
		}
		var t = this._textcache.h[id];
		if(t == null) {
			haxe_Log.trace("cacheText id(" + id + ")无纹理对象",{ fileName : "Source/zygame/utils/ZAssets.hx", lineNumber : 923, className : "zygame.utils.ZAssets", methodName : "cacheText"});
			t = new zygame_components_base_ZCacheTextField(id,fontName,size,color);
			t.cacheAutoWrap = autoWarp;
			t.set_text(text);
			this._textcache.h[id] = t;
		} else {
			haxe_Log.trace("cacheText id(" + id + ")已存在旧纹理对象",{ fileName : "Source/zygame/utils/ZAssets.hx", lineNumber : 932, className : "zygame.utils.ZAssets", methodName : "cacheText"});
			t.cacheAutoWrap = autoWarp;
			t.set_text(text);
		}
	}
	,getTextAtlas: function(id) {
		if(Object.prototype.hasOwnProperty.call(this._textcache.h,id)) {
			return this._textcache.h[id].getAtlas();
		}
		return null;
	}
	,getZipXml: function(id) {
		var zip = haxe_ds_StringMap.keysIterator(this._zips.h);
		while(zip.hasNext()) {
			var zip1 = zip.next();
			var data = this._zips.h[zip1].getXml(id);
			if(data != null) {
				return data;
			}
		}
		return null;
	}
	,getZipJson: function(id) {
		var zip = haxe_ds_StringMap.keysIterator(this._zips.h);
		while(zip.hasNext()) {
			var zip1 = zip.next();
			var data = this._zips.h[zip1].getJson(id);
			if(data != null) {
				return data;
			}
		}
		return null;
	}
	,getFntData: function(id) {
		return this._fnts.h[id];
	}
	,getBitmapDataFrame: function(id) {
		if(id.indexOf(":") == -1) {
			return null;
		} else {
			var arr = id.split(":");
			if(!Object.prototype.hasOwnProperty.call(this._textures.h,arr[0])) {
				if(!Object.prototype.hasOwnProperty.call(this._dynamicAtlas.h,arr[0])) {
					return null;
				} else {
					return this.getDynamicTextureAtlas(arr[0]).getBitmapDataFrame(arr[1]);
				}
			}
			return this.getTextureAtlas(arr[0]).getBitmapDataFrame(arr[1]);
		}
	}
	,onBitmapLoaded: function(path,bitmap) {
		this.currentLoadNumber--;
		var pname = this.onPasingPathName(path);
		if(Object.prototype.hasOwnProperty.call(this._bitmaps.h,pname)) {
			this.getBitmapData(pname).dispose();
		}
		this._bitmaps.h[pname] = bitmap;
		this.next(true);
	}
	,getSound: function(id) {
		return this._sounds.h[id];
	}
	,getMusic: function(id) {
		return this._musics.h[id];
	}
	,getMapliveData: function(id) {
		return this._maps.h[id];
	}
	,getCurrentBGMusicID: function() {
		return this._bgid;
	}
	,playBGMusic: function(id) {
		this._bgid = id;
		var sound = this.getMusic(id);
		haxe_Log.trace("playBGMusic",{ fileName : "Source/zygame/utils/ZAssets.hx", lineNumber : 1074, className : "zygame.utils.ZAssets", methodName : "playBGMusic", customParams : [sound]});
		zygame_media_SoundChannelManager.current().playMusic(sound);
	}
	,stopBGMusic: function() {
		zygame_media_SoundChannelManager.current().stopMusic();
	}
	,playSound: function(id,loop) {
		if(loop == null) {
			loop = 1;
		}
		var sound = this.getSound(id);
		return zygame_media_SoundChannelManager.current().playEffect(sound,loop);
	}
	,getXml: function(id) {
		if(!Object.prototype.hasOwnProperty.call(this._xmls.h,id)) {
			var this1 = this._xmls;
			var value = this.getZipXml(id);
			this1.h[id] = value;
		}
		return this._xmls.h[id];
	}
	,setXml: function(id,xml) {
		this._xmls.h[id] = xml;
	}
	,getString: function(id) {
		return this._strings.h[id];
	}
	,getCDBData: function(id) {
		return this._cdbs.h[id];
	}
	,removeCDBData: function(id) {
		var _this = this._cdbs;
		if(Object.prototype.hasOwnProperty.call(_this.h,id)) {
			delete(_this.h[id]);
		}
	}
	,onTextLoaded: function(path,data) {
		this.currentLoadNumber--;
		var pname = this.onPasingPathName(path);
		this._strings.h[pname] = data;
		this.next(true);
	}
	,onXmlLoaded: function(path,data) {
		this.currentLoadNumber--;
		var pname = this.onPasingPathName(path);
		try {
			var xml = Xml.parse(data);
			this._xmls.h[pname] = xml;
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
			this.onError("Xml parse error!");
			return;
		}
		this.next(true);
	}
	,getObject: function(id) {
		return this._jsons.h[id];
	}
	,setObject: function(id,data) {
		var value = data;
		this._jsons.h[id] = value;
	}
	,onJSONLoaded: function(path,json) {
		this.currentLoadNumber--;
		var pname = this.onPasingPathName(path);
		var data = typeof(json) == "string" ? JSON.parse(json) : json;
		var value = data;
		this._jsons.h[pname] = value;
		this.next(true);
	}
	,onCDBLoader: function(path,cdb) {
		this.currentLoadNumber--;
		var pname = this.onPasingPathName(path);
		this._cdbs.h[pname] = cdb;
		this.next(true);
	}
	,removeMapliveData: function(id) {
		var mapliveData = this.getMapliveData(id);
		if(mapliveData != null) {
			mapliveData.unloadAll();
			var _this = this._maps;
			if(Object.prototype.hasOwnProperty.call(_this.h,id)) {
				delete(_this.h[id]);
			}
		}
	}
	,removeFnt: function(id) {
		var fnt = this._fnts.h[id];
		if(fnt != null) {
			fnt.dispose();
			var _this = this._fnts;
			if(Object.prototype.hasOwnProperty.call(_this.h,id)) {
				delete(_this.h[id]);
			}
		}
	}
	,removeSpineTextureAtlas: function(id) {
		var pspinetextureatlas = this.getSpineTextureAlats(id);
		if(pspinetextureatlas != null) {
			pspinetextureatlas.dispose();
			var _this = this._spines;
			if(Object.prototype.hasOwnProperty.call(_this.h,id)) {
				delete(_this.h[id]);
			}
		}
	}
	,removeTextureAtlas: function(id) {
		var ptextureatlas = this.getTextureAtlas(id);
		if(ptextureatlas != null) {
			ptextureatlas.dispose();
			var _this = this._textures;
			if(Object.prototype.hasOwnProperty.call(_this.h,id)) {
				delete(_this.h[id]);
			}
		}
	}
	,removeMusic: function(id) {
		var music = this._musics.h[id];
		if(music != null) {
			music.close();
			var _this = this._musics;
			if(Object.prototype.hasOwnProperty.call(_this.h,id)) {
				delete(_this.h[id]);
			}
		}
	}
	,removeSound: function(id) {
		var sound = this._sounds.h[id];
		if(sound != null) {
			sound.close();
			var _this = this._sounds;
			if(Object.prototype.hasOwnProperty.call(_this.h,id)) {
				delete(_this.h[id]);
			}
		}
	}
	,removeBitmapData: function(id) {
		var bitmap = this._bitmaps.h[id];
		if(bitmap != null) {
			zygame_utils_ZGC.disposeBitmapData(bitmap);
			var _this = this._bitmaps;
			if(Object.prototype.hasOwnProperty.call(_this.h,id)) {
				delete(_this.h[id]);
			}
		}
	}
	,unloadAll: function() {
		var s = haxe_ds_StringMap.keysIterator(this._xmls.h);
		while(s.hasNext()) {
			var s1 = s.next();
			var _this = this._xmls;
			if(Object.prototype.hasOwnProperty.call(_this.h,s1)) {
				delete(_this.h[s1]);
			}
		}
		var key = haxe_ds_StringMap.keysIterator(this._bitmaps.h);
		while(key.hasNext()) {
			var key1 = key.next();
			this.removeBitmapData(key1);
		}
		var key = haxe_ds_StringMap.keysIterator(this._textures.h);
		while(key.hasNext()) {
			var key1 = key.next();
			this.removeTextureAtlas(key1);
		}
		var key = haxe_ds_StringMap.keysIterator(this._spines.h);
		while(key.hasNext()) {
			var key1 = key.next();
			this.removeSpineTextureAtlas(key1);
		}
		var key = haxe_ds_StringMap.keysIterator(this._sounds.h);
		while(key.hasNext()) {
			var key1 = key.next();
			this.removeSound(key1);
		}
		var key = haxe_ds_StringMap.keysIterator(this._musics.h);
		while(key.hasNext()) {
			var key1 = key.next();
			this.removeMusic(key1);
		}
		var key = haxe_ds_StringMap.keysIterator(this._textcache.h);
		while(key.hasNext()) {
			var key1 = key.next();
			this.removeTextCache(key1);
		}
		var key = haxe_ds_StringMap.keysIterator(this._zips.h);
		while(key.hasNext()) {
			var key1 = key.next();
			this.unloadAssetsZip(key1);
		}
		var key = haxe_ds_StringMap.keysIterator(this._cdbs.h);
		while(key.hasNext()) {
			var key1 = key.next();
			this.removeCDBData(key1);
		}
	}
	,removeTextCache: function(id) {
		haxe_Log.trace("cacheText id(" + id + ")移除纹理缓存",{ fileName : "Source/zygame/utils/ZAssets.hx", lineNumber : 1373, className : "zygame.utils.ZAssets", methodName : "removeTextCache"});
		if(Object.prototype.hasOwnProperty.call(this._textcache.h,id)) {
			haxe_Log.trace("cacheText id(" + id + ")移除成功",{ fileName : "Source/zygame/utils/ZAssets.hx", lineNumber : 1376, className : "zygame.utils.ZAssets", methodName : "removeTextCache"});
			this._textcache.h[id].dispose();
			var _this = this._textcache;
			if(Object.prototype.hasOwnProperty.call(_this.h,id)) {
				delete(_this.h[id]);
			}
		}
	}
	,onError: function(msg) {
		zygame_cmnt_GameUtils.reportErrorLog("加载API","加载失败：" + msg,"无","API",3);
		if(this.canError) {
			this.next(true);
			return;
		}
		this._isOver = true;
		this._loadPaths = [];
		this._loadTextureLoads = [];
		this._loadMusics = [];
		this._loadFntLoads = [];
		this._loadMapliveLoads = [];
		this._loadSpines = [];
		this.currentLoadNumber = 0;
		if(this._errorCallBack != null) {
			this._callBack = null;
			this._errorCallBack(msg);
			this._errorCallBack = null;
		}
	}
	,toString: function() {
		var load = "";
		var key = haxe_ds_StringMap.keysIterator(this._spines.h);
		while(key.hasNext()) {
			var key1 = key.next();
			load += key1 + "\n";
		}
		var key = haxe_ds_StringMap.keysIterator(this._sounds.h);
		while(key.hasNext()) {
			var key1 = key.next();
			load += key1 + "\n";
		}
		var key = haxe_ds_StringMap.keysIterator(this._bitmaps.h);
		while(key.hasNext()) {
			var key1 = key.next();
			load += key1 + "\n";
		}
		var key = haxe_ds_StringMap.keysIterator(this._jsons.h);
		while(key.hasNext()) {
			var key1 = key.next();
			load += key1 + "\n";
		}
		var key = haxe_ds_StringMap.keysIterator(this._xmls.h);
		while(key.hasNext()) {
			var key1 = key.next();
			load += key1 + "\n";
		}
		var key = haxe_ds_StringMap.keysIterator(this._textures.h);
		while(key.hasNext()) {
			var key1 = key.next();
			load += key1 + "\n";
		}
		var key = haxe_ds_StringMap.keysIterator(this._fnts.h);
		while(key.hasNext()) {
			var key1 = key.next();
			load += key1 + "\n";
		}
		var key = haxe_ds_StringMap.keysIterator(this._musics.h);
		while(key.hasNext()) {
			var key1 = key.next();
			load += key1 + "\n";
		}
		var key = haxe_ds_StringMap.keysIterator(this._maps.h);
		while(key.hasNext()) {
			var key1 = key.next();
			load += key1 + "\n";
		}
		return load;
	}
	,__class__: zygame_utils_ZAssets
};
var zygame_mini_MiniEngineAssets = function() {
	this.staticData = new haxe_ds_StringMap();
	this.haxeMaps = new haxe_ds_StringMap();
	this.path = null;
	this.mainClassName = "Main";
	zygame_utils_ZAssets.call(this);
};
$hxClasses["zygame.mini.MiniEngineAssets"] = zygame_mini_MiniEngineAssets;
zygame_mini_MiniEngineAssets.__name__ = "zygame.mini.MiniEngineAssets";
zygame_mini_MiniEngineAssets.__super__ = zygame_utils_ZAssets;
zygame_mini_MiniEngineAssets.prototype = $extend(zygame_utils_ZAssets.prototype,{
	mainClassName: null
	,path: null
	,haxeMaps: null
	,entryKeys: null
	,_call: null
	,_parent: null
	,staticData: null
	,_builder: null
	,createApp: function(parent,call,mainClassName) {
		if(mainClassName == null) {
			mainClassName = "Main";
		}
		this._parent = parent;
		this._call = call;
		this.mainClassName = mainClassName;
		if(this.entryKeys == null) {
			var zip = this.getZip(zygame_utils_StringUtils.getName(this.path));
			this.entryKeys = haxe_ds_StringMap.keysIterator(zip.entrys.h);
		}
		this.nextLoad();
	}
	,onParsingHaxeData: function(name,haxeData) {
		return haxeData;
	}
	,nextLoad: function() {
		var _gthis = this;
		if(!this.entryKeys.hasNext()) {
			this.onSuccess();
			return;
		}
		var zip = this.getZip(zygame_utils_StringUtils.getName(this.path));
		var id = this.entryKeys.next();
		if(StringTools.endsWith(id,"png") || StringTools.endsWith(id,"jpg")) {
			var pngid = zygame_utils_StringUtils.getName(id);
			zip.loadBitmapData(pngid,function(bitmapData) {
				haxe_Log.trace("pngid",{ fileName : "Source/zygame/mini/MiniEngineAssets.hx", lineNumber : 80, className : "zygame.mini.MiniEngineAssets", methodName : "nextLoad", customParams : [pngid]});
				if(zip.getXml(pngid) != null) {
					_gthis.putTextureAtlas(pngid,new zygame_utils_load_TextureAtlas(bitmapData,zip.getXml(pngid)));
				} else {
					_gthis.setBitmapData(pngid,bitmapData);
				}
				_gthis.nextLoad();
			});
		} else if(StringTools.endsWith(id,"mp3") || StringTools.endsWith(id,"ogg")) {
			var sid = zygame_utils_StringUtils.getName(id);
			zip.loadSound(sid,function(sound) {
				_gthis.setSound(sid,sound);
				_gthis.nextLoad();
			});
		} else if(StringTools.endsWith(id,"hx")) {
			var hxid = zygame_utils_StringUtils.getName(id);
			var main = zip.getHScript(hxid);
			var minihaxe = zygame_mini_MiniEngine.parseMiniHaxe(main);
			this.setXml(hxid,this.onParsingHaxeData(hxid,minihaxe.xml));
			this.haxeMaps.h[hxid] = minihaxe;
			var _g = haxe_ds_StringMap.kvIterator(minihaxe.vars.h);
			while(_g.hasNext()) {
				var _g1 = _g.next();
				var key = _g1.key;
				var value = _g1.value;
				if(value.isStatic) {
					if(this.staticData.h[hxid] == null) {
						this.staticData.h[hxid] = { };
					}
					var data = Type.createInstance(value.type,[]);
					Reflect.setProperty(this.staticData.h[hxid],value.name,data.data);
				}
			}
			var _g = haxe_ds_StringMap.kvIterator(minihaxe.functions.h);
			while(_g.hasNext()) {
				var _g1 = _g.next();
				var key = _g1.key;
				var value = _g1.value;
				if(value.isStatic) {
					if(this.staticData.h[hxid] == null) {
						this.staticData.h[hxid] = { };
					}
					var data = new zygame_script_ZHaxe(value.hscript);
					data.argsName = value.args.split(",");
					Reflect.setProperty(this.staticData.h[hxid],value.name,data.get_value());
				}
			}
			this.nextLoad();
		} else {
			this.nextLoad();
		}
	}
	,onSuccess: function() {
		var builder = zygame_components_ZBuilder.buildXmlUI(this,this.mainClassName,this._parent);
		(js_Boot.__cast(builder.display , zygame_mini_MiniEngineScene)).assets = this;
		(js_Boot.__cast(builder.display , zygame_mini_MiniEngineScene)).baseBuilder = builder;
		this._builder = builder;
		zygame_mini_MiniUtils.variablesAllHaxe(this,builder,this.mainClassName);
		this._call(builder);
	}
	,getApp: function() {
		if(this._builder == null) {
			return null;
		}
		return this._builder.display;
	}
	,unloadAll: function() {
		this.entryKeys = null;
		if(this._builder != null) {
			this._builder.variablesAllHaxeBindMiniAssets(null);
		}
		if(this.getApp() != null) {
			zygame_utils_ZGC.disposeFrameEvent(this.getApp());
			this.getApp().unload();
		}
		zygame_utils_ZAssets.prototype.unloadAll.call(this);
		this._builder = null;
	}
	,__class__: zygame_mini_MiniEngineAssets
});
var zygame_mini_MiniEngineScene = function() {
	this._isPause = false;
	zygame_components_ZScene.call(this);
};
$hxClasses["zygame.mini.MiniEngineScene"] = zygame_mini_MiniEngineScene;
zygame_mini_MiniEngineScene.__name__ = "zygame.mini.MiniEngineScene";
zygame_mini_MiniEngineScene.__interfaces__ = [zygame_components_BuilderRootDisplay];
zygame_mini_MiniEngineScene.__super__ = zygame_components_ZScene;
zygame_mini_MiniEngineScene.prototype = $extend(zygame_components_ZScene.prototype,{
	builder: null
	,assets: null
	,onInitBuilder: function() {
		var _gthis = this;
		zygame_utils_Lib.nextFrameCall(function() {
			var call = _gthis.builder.getFunction("onInit");
			if(call != null) {
				call();
			}
		});
	}
	,onInit: function() {
		zygame_components_ZScene.prototype.onInit.call(this);
	}
	,unload: function() {
		if(this.builder != null) {
			var call = this.builder.getFunction("unload");
			if(call != null) {
				call();
			}
			this.builder = null;
			this.assets = null;
		}
	}
	,_isPause: null
	,isPause: function() {
		return this._isPause;
	}
	,pauseApp: function() {
		this._isPause = true;
	}
	,resumeApp: function() {
		this._isPause = false;
	}
	,postEvent: function(type,data) {
		this.dispatchEvent(new zygame_events_ZEvent(type,data));
	}
	,__class__: zygame_mini_MiniEngineScene
});
var zygame_mini_MiniEvent = function() { };
$hxClasses["zygame.mini.MiniEvent"] = zygame_mini_MiniEvent;
zygame_mini_MiniEvent.__name__ = "zygame.mini.MiniEvent";
var zygame_mini_MiniUtils = function() { };
$hxClasses["zygame.mini.MiniUtils"] = zygame_mini_MiniUtils;
zygame_mini_MiniUtils.__name__ = "zygame.mini.MiniUtils";
zygame_mini_MiniUtils.createTypeObject = function(assets,type,args) {
	var builder = zygame_components_ZBuilder.buildXmlUI(assets,type,null);
	if(js_Boot.__implements(builder.display,zygame_mini_MiniExtend)) {
		(js_Boot.__cast(builder.display , zygame_mini_MiniExtend)).baseBuilder = builder;
	} else {
		throw haxe_Exception.thrown("Mini engine Class must extend MiniExtend!");
	}
	zygame_mini_MiniUtils.variablesAllHaxe(assets,builder,type);
	if(Object.prototype.hasOwnProperty.call(builder.ids.h,"new")) {
		builder.get("new",zygame_script_ZHaxe).call(args != null ? args : []);
	}
	return builder.display;
};
zygame_mini_MiniUtils.variablesAllHaxe = function(assets,builder,type) {
	var minihaxe = assets.haxeMaps.h[type];
	var _g = haxe_ds_StringMap.kvIterator(minihaxe.imports.h);
	while(_g.hasNext()) {
		var _g1 = _g.next();
		var key = _g1.key;
		var type = _g1.value;
		builder.variablesAllHaxe(HxOverrides.substr(type,type.lastIndexOf(".") + 1,null),$hxClasses[type]);
	}
	builder.variablesAllHaxe("Math",Math);
	builder.variablesAllHaxe("miniLib",zygame_mini_MiniUtils);
	builder.variablesAllHaxe("assets",assets);
	builder.variablesAllHaxe("app",assets.getApp());
	var _g = haxe_ds_StringMap.kvIterator(assets.staticData.h);
	while(_g.hasNext()) {
		var _g1 = _g.next();
		var key = _g1.key;
		var value = _g1.value;
		builder.variablesAllHaxe(key,value);
	}
	builder.variablesAllHaxeBindMiniAssets(assets);
};
zygame_mini_MiniUtils.getAssets = function() {
	return zygame_mini_MiniUtils._assets;
};
zygame_mini_MiniUtils.getApp = function() {
	return zygame_mini_MiniUtils._assets.getApp();
};
zygame_mini_MiniUtils.removeArrayItem = function(array,item) {
	if(array != null) {
		HxOverrides.remove(array,item);
	}
};
var zygame_net_UDP = function() { };
$hxClasses["zygame.net.UDP"] = zygame_net_UDP;
zygame_net_UDP.__name__ = "zygame.net.UDP";
zygame_net_UDP.init = function() {
};
zygame_net_UDP.onUDPMessage = function(msg) {
};
zygame_net_UDP.send = function(msg,port,ip) {
	haxe_Log.trace("The platform is not support UDP!",{ fileName : "Source/zygame/net/UDP.hx", lineNumber : 50, className : "zygame.net.UDP", methodName : "send"});
};
zygame_net_UDP.isSupport = function() {
	return false;
};
var zygame_script_ZHaxe = function(script) {
	this.argsName = [];
	this._script = this.parserScript(script);
	this.parser = new hscript_Parser();
	this.program = this.parser.parseString(this._script);
	this.interp = new zygame_script_ZInterp();
	this.interp.variables.h["Std"] = Std;
	this.interp.variables.h["Lib"] = zygame_utils_Lib;
};
$hxClasses["zygame.script.ZHaxe"] = zygame_script_ZHaxe;
zygame_script_ZHaxe.__name__ = "zygame.script.ZHaxe";
zygame_script_ZHaxe.prototype = {
	_script: null
	,parser: null
	,program: null
	,interp: null
	,argsName: null
	,get_value: function() {
		var _gthis = this;
		switch(this.argsName.length) {
		case 0:
			return $bind(this,this.call);
		case 1:
			return function(a) {
				return _gthis.call([a]);
			};
		case 2:
			return function(a,b) {
				return _gthis.call([a,b]);
			};
		case 3:
			return function(a,b,c) {
				return _gthis.call([a,b,c]);
			};
		case 4:
			return function(a,b,c,d) {
				return _gthis.call([a,b,c,d]);
			};
		case 5:
			return function(a,b,c,d,e) {
				return _gthis.call([a,b,c,d,e]);
			};
		}
		throw haxe_Exception.thrown("ZHaxe传参仅支持5位参数以内。");
	}
	,parserScript: function(script) {
		script = StringTools.replace(script," gt "," > ");
		script = StringTools.replace(script," egt "," >= ");
		script = StringTools.replace(script," lt "," < ");
		script = StringTools.replace(script," elt "," <= ");
		script = StringTools.replace(script," and "," && ");
		script = StringTools.replace(script," or "," || ");
		return script;
	}
	,bindBuilder: function(builder) {
		var _g = haxe_ds_StringMap.kvIterator(builder.ids.h);
		while(_g.hasNext()) {
			var _g1 = _g.next();
			var key = _g1.key;
			var value = _g1.value;
			if(((value) instanceof zygame_script_ZHaxe)) {
				var this1 = this.interp.variables;
				var value1 = (js_Boot.__cast(value , zygame_script_ZHaxe)).get_value();
				this1.h[key] = value1;
			} else {
				this.interp.variables.h[key] = value;
			}
		}
		this.interp.variables.h["this"] = builder.display;
		var _g = haxe_ds_StringMap.kvIterator(zygame_components_ZBuilder.builderDefine.h);
		while(_g.hasNext()) {
			var _g1 = _g.next();
			var key = _g1.key;
			var value = _g1.value;
			this.interp.variables.h[key] = value;
		}
	}
	,call: function(args) {
		if(args == null && this.argsName.length > 0 || args != null && args.length != this.argsName.length) {
			throw haxe_Exception.thrown("ZHaxe args count is not match:" + Std.string(this.argsName) + " not match " + Std.string(args) + "\nSource:\n" + this._script + ("\nargs.length=" + (args != null ? args.length : 0) + "  argsName.length=" + this.argsName.length));
		}
		var _g = 0;
		var _g1 = this.argsName.length;
		while(_g < _g1) {
			var i = _g++;
			this.interp.variables.h[this.argsName[i]] = args[i];
		}
		return this.interp.execute(this.program);
	}
	,__class__: zygame_script_ZHaxe
	,__properties__: {get_value:"get_value"}
};
var zygame_script_ZInt = function(value) {
	this.value = 0;
	this.value = value;
};
$hxClasses["zygame.script.ZInt"] = zygame_script_ZInt;
zygame_script_ZInt.__name__ = "zygame.script.ZInt";
zygame_script_ZInt.prototype = {
	value: null
	,__class__: zygame_script_ZInt
};
var zygame_script_ZFloat = function(value) {
	this.value = 0;
	this.value = value;
};
$hxClasses["zygame.script.ZFloat"] = zygame_script_ZFloat;
zygame_script_ZFloat.__name__ = "zygame.script.ZFloat";
zygame_script_ZFloat.prototype = {
	value: null
	,__class__: zygame_script_ZFloat
};
var zygame_script_ZBool = function(value) {
	this.value = false;
	this.value = value;
};
$hxClasses["zygame.script.ZBool"] = zygame_script_ZBool;
zygame_script_ZBool.__name__ = "zygame.script.ZBool";
zygame_script_ZBool.prototype = {
	value: null
	,__class__: zygame_script_ZBool
};
var zygame_script_ZString = function(value) {
	this.value = null;
	this.value = value;
};
$hxClasses["zygame.script.ZString"] = zygame_script_ZString;
zygame_script_ZString.__name__ = "zygame.script.ZString";
zygame_script_ZString.prototype = {
	value: null
	,__class__: zygame_script_ZString
};
var zygame_script_ZArray = function() {
	this.value = [];
};
$hxClasses["zygame.script.ZArray"] = zygame_script_ZArray;
zygame_script_ZArray.__name__ = "zygame.script.ZArray";
zygame_script_ZArray.prototype = {
	value: null
	,__class__: zygame_script_ZArray
};
var zygame_script_ZObject = function(value) {
	this.value = null;
	this.value = value;
};
$hxClasses["zygame.script.ZObject"] = zygame_script_ZObject;
zygame_script_ZObject.__name__ = "zygame.script.ZObject";
zygame_script_ZObject.prototype = {
	value: null
	,__class__: zygame_script_ZObject
};
var zygame_script_ZInterp = function() {
	hscript_Interp.call(this);
};
$hxClasses["zygame.script.ZInterp"] = zygame_script_ZInterp;
zygame_script_ZInterp.__name__ = "zygame.script.ZInterp";
zygame_script_ZInterp.__super__ = hscript_Interp;
zygame_script_ZInterp.prototype = $extend(hscript_Interp.prototype,{
	miniAssets: null
	,get: function(o,f) {
		if(js_Boot.__implements(o,zygame_mini_MiniExtend)) {
			var c = o;
			if(c.baseBuilder != null && Object.prototype.hasOwnProperty.call(c.baseBuilder.ids.h,f)) {
				return Reflect.getProperty(c.baseBuilder.ids.h[f],"value");
			}
		}
		return hscript_Interp.prototype.get.call(this,o,f);
	}
	,set: function(o,f,v) {
		if(js_Boot.__implements(o,zygame_mini_MiniExtend)) {
			var c = o;
			if(c.baseBuilder != null && Object.prototype.hasOwnProperty.call(c.baseBuilder.ids.h,f)) {
				Reflect.setProperty(c.baseBuilder.ids.h[f],"value",v);
				return v;
			}
		}
		return hscript_Interp.prototype.set.call(this,o,f,v);
	}
	,fcall: function(o,f,args) {
		if(js_Boot.__implements(o,zygame_mini_MiniExtend)) {
			var c = o;
			if(c.baseBuilder != null && Object.prototype.hasOwnProperty.call(c.baseBuilder.ids.h,f)) {
				return this.call(o,Reflect.getProperty(c.baseBuilder.ids.h[f],"value"),args);
			} else {
				return hscript_Interp.prototype.fcall.call(this,o,f,args);
			}
		} else if(((o) instanceof zygame_script_ZHaxe)) {
			return (js_Boot.__cast(o , zygame_script_ZHaxe)).get_value().apply(o,args);
		} else {
			return hscript_Interp.prototype.fcall.call(this,o,f,args);
		}
	}
	,call: function(o,f,args) {
		return hscript_Interp.prototype.call.call(this,o,f,args);
	}
	,cnew: function(cl,args) {
		if(this.miniAssets != null && this.miniAssets.getXml(cl) != null) {
			return zygame_mini_MiniUtils.createTypeObject(this.miniAssets,cl,args);
		}
		return hscript_Interp.prototype.cnew.call(this,cl,args);
	}
	,execute: function(expr) {
		return hscript_Interp.prototype.execute.call(this,expr);
	}
	,__class__: zygame_script_ZInterp
});
var zygame_sensors_Accelerometer = function() {
	openfl_sensors_Accelerometer.call(this);
};
$hxClasses["zygame.sensors.Accelerometer"] = zygame_sensors_Accelerometer;
zygame_sensors_Accelerometer.__name__ = "zygame.sensors.Accelerometer";
zygame_sensors_Accelerometer.__super__ = openfl_sensors_Accelerometer;
zygame_sensors_Accelerometer.prototype = $extend(openfl_sensors_Accelerometer.prototype,{
	open: function() {
		if(window.openAccelerometerChange != null) {
			window.openAccelerometerChange();
		}
	}
	,close: function() {
		if(window.closeAccelerometerChange != null) {
			window.closeAccelerometerChange();
		}
	}
	,addEventListener: function(type,listener,useCapture,priority,useWeakReference) {
		if(useWeakReference == null) {
			useWeakReference = false;
		}
		if(priority == null) {
			priority = 0;
		}
		if(useCapture == null) {
			useCapture = false;
		}
		openfl_sensors_Accelerometer.prototype.addEventListener.call(this,type,listener,useCapture,priority,useWeakReference);
		if(type == "update") {
			this.open();
		}
	}
	,removeEventListener: function(type,listener,useCapture) {
		if(useCapture == null) {
			useCapture = false;
		}
		openfl_sensors_Accelerometer.prototype.removeEventListener.call(this,type,listener,useCapture);
		if(type == "update") {
			this.close();
		}
	}
	,__class__: zygame_sensors_Accelerometer
});
var zygame_shader_BitmapMaskShader = function(bitmapData) {
	if(this.__glFragmentSource == null) {
		this.__glFragmentSource = "\n\n        varying float openfl_Alphav;\n\t\tvarying vec4 openfl_ColorMultiplierv;\n\t\tvarying vec4 openfl_ColorOffsetv;\n\t\tvarying vec2 openfl_TextureCoordv;\n\n\t\tuniform bool openfl_HasColorTransform;\n\t\tuniform sampler2D openfl_Texture;\n\t\tuniform vec2 openfl_TextureSize;\n\n\n        uniform sampler2D mask_Texture;\n\t\t\t\t\n\t\tvoid main(void) {\n\t\t\t\n\t\t\tvec4 color = texture2D (openfl_Texture, openfl_TextureCoordv);\n\n\t\tif (color.a == 0.0) {\n\n\t\t\tgl_FragColor = vec4 (0.0, 0.0, 0.0, 0.0);\n\n\t\t} else if (openfl_HasColorTransform) {\n\n\t\t\tcolor = vec4 (color.rgb / color.a, color.a);\n\n\t\t\tmat4 colorMultiplier = mat4 (0);\n\t\t\tcolorMultiplier[0][0] = openfl_ColorMultiplierv.x;\n\t\t\tcolorMultiplier[1][1] = openfl_ColorMultiplierv.y;\n\t\t\tcolorMultiplier[2][2] = openfl_ColorMultiplierv.z;\n\t\t\tcolorMultiplier[3][3] = 1.0; // openfl_ColorMultiplierv.w;\n\n\t\t\tcolor = clamp (openfl_ColorOffsetv + (color * colorMultiplier), 0.0, 1.0);\n\n\t\t\tif (color.a > 0.0) {\n\n\t\t\t\tgl_FragColor = vec4 (color.rgb * color.a * openfl_Alphav, color.a * openfl_Alphav);\n\n\t\t\t} else {\n\n\t\t\t\tgl_FragColor = vec4 (0.0, 0.0, 0.0, 0.0);\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tgl_FragColor = color * openfl_Alphav;\n\n\t\t}\n\n\n            vec4 finalColor = texture2D(mask_Texture, openfl_TextureCoordv);\n            if(finalColor.a + finalColor.r + finalColor.g + finalColor.b == 0.)\n            {\n                color.r = 0.;\n                color.g = 0.;\n                color.b = 0.;\n                color.a = 0.;\n            }\n            else\n            {\n                color.r *= finalColor.a;\n                color.g *= finalColor.a;\n                color.b *= finalColor.a;\n                color.a *= finalColor.a;\n            }\n\n\t\t\tgl_FragColor = color * openfl_Alphav;\n\t\t\t\n\t\t}\n\n    ";
	}
	if(this.__glVertexSource == null) {
		this.__glVertexSource = "attribute float openfl_Alpha;\n\t\tattribute vec4 openfl_ColorMultiplier;\n\t\tattribute vec4 openfl_ColorOffset;\n\t\tattribute vec4 openfl_Position;\n\t\tattribute vec2 openfl_TextureCoord;\n\n\t\tvarying float openfl_Alphav;\n\t\tvarying vec4 openfl_ColorMultiplierv;\n\t\tvarying vec4 openfl_ColorOffsetv;\n\t\tvarying vec2 openfl_TextureCoordv;\n\n\t\tuniform mat4 openfl_Matrix;\n\t\tuniform bool openfl_HasColorTransform;\n\t\tuniform vec2 openfl_TextureSize;\n\n\n\t\tvoid main(void) {\n\n\t\t\topenfl_Alphav = openfl_Alpha;\n\t\topenfl_TextureCoordv = openfl_TextureCoord;\n\n\t\tif (openfl_HasColorTransform) {\n\n\t\t\topenfl_ColorMultiplierv = openfl_ColorMultiplier;\n\t\t\topenfl_ColorOffsetv = openfl_ColorOffset / 255.0;\n\n\t\t}\n\n\t\tgl_Position = openfl_Matrix * openfl_Position;\n\n\n\t\t}";
	}
	openfl_display_DisplayObjectShader.call(this);
	this.mask_Texture.input = bitmapData;
	this.__isGenerated = true;
	this.__initGL();
};
$hxClasses["zygame.shader.BitmapMaskShader"] = zygame_shader_BitmapMaskShader;
zygame_shader_BitmapMaskShader.__name__ = "zygame.shader.BitmapMaskShader";
zygame_shader_BitmapMaskShader.__super__ = openfl_display_DisplayObjectShader;
zygame_shader_BitmapMaskShader.prototype = $extend(openfl_display_DisplayObjectShader.prototype,{
	mask_Texture: null
	,__class__: zygame_shader_BitmapMaskShader
});
var zygame_shader_ColorShader = function(color) {
	if(color == null) {
		color = 1;
	}
	if(this.__glFragmentSource == null) {
		this.__glFragmentSource = "\n\t\t\n\t\tvarying float openfl_Alphav;\n\t\tvarying vec4 openfl_ColorMultiplierv;\n\t\tvarying vec4 openfl_ColorOffsetv;\n\t\tvarying vec2 openfl_TextureCoordv;\n\n\t\tuniform bool openfl_HasColorTransform;\n\t\tuniform sampler2D openfl_Texture;\n\t\tuniform vec2 openfl_TextureSize;\n\n\n        uniform vec3 mcolorvalue;\n\t\t\t\t\n\t\tvoid main(void) {\n\t\t\t\n\t\t\tvec4 color = texture2D (openfl_Texture, openfl_TextureCoordv);\n\n\t\tif (color.a == 0.0) {\n\n\t\t\tgl_FragColor = vec4 (0.0, 0.0, 0.0, 0.0);\n\n\t\t} else if (openfl_HasColorTransform) {\n\n\t\t\tcolor = vec4 (color.rgb / color.a, color.a);\n\n\t\t\tmat4 colorMultiplier = mat4 (0);\n\t\t\tcolorMultiplier[0][0] = openfl_ColorMultiplierv.x;\n\t\t\tcolorMultiplier[1][1] = openfl_ColorMultiplierv.y;\n\t\t\tcolorMultiplier[2][2] = openfl_ColorMultiplierv.z;\n\t\t\tcolorMultiplier[3][3] = 1.0; // openfl_ColorMultiplierv.w;\n\n\t\t\tcolor = clamp (openfl_ColorOffsetv + (color * colorMultiplier), 0.0, 1.0);\n\n\t\t\tif (color.a > 0.0) {\n\n\t\t\t\tgl_FragColor = vec4 (color.rgb * color.a * openfl_Alphav, color.a * openfl_Alphav);\n\n\t\t\t} else {\n\n\t\t\t\tgl_FragColor = vec4 (0.0, 0.0, 0.0, 0.0);\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tgl_FragColor = color * openfl_Alphav;\n\n\t\t}\n\n\t\t\t\n\t\t\tfloat a = gl_FragColor.a;\n\t\t\tgl_FragColor.rgb = mcolorvalue;\n\t\t\tgl_FragColor *= a * openfl_Alphav;\n\t\t}\n\t\t\n\t";
	}
	if(this.__glVertexSource == null) {
		this.__glVertexSource = "attribute float openfl_Alpha;\n\t\tattribute vec4 openfl_ColorMultiplier;\n\t\tattribute vec4 openfl_ColorOffset;\n\t\tattribute vec4 openfl_Position;\n\t\tattribute vec2 openfl_TextureCoord;\n\n\t\tvarying float openfl_Alphav;\n\t\tvarying vec4 openfl_ColorMultiplierv;\n\t\tvarying vec4 openfl_ColorOffsetv;\n\t\tvarying vec2 openfl_TextureCoordv;\n\n\t\tuniform mat4 openfl_Matrix;\n\t\tuniform bool openfl_HasColorTransform;\n\t\tuniform vec2 openfl_TextureSize;\n\n\n\t\tvoid main(void) {\n\n\t\t\topenfl_Alphav = openfl_Alpha;\n\t\topenfl_TextureCoordv = openfl_TextureCoord;\n\n\t\tif (openfl_HasColorTransform) {\n\n\t\t\topenfl_ColorMultiplierv = openfl_ColorMultiplier;\n\t\t\topenfl_ColorOffsetv = openfl_ColorOffset / 255.0;\n\n\t\t}\n\n\t\tgl_Position = openfl_Matrix * openfl_Position;\n\n\n\t\t}";
	}
	openfl_display_DisplayObjectShader.call(this);
	this.updateColor(color);
	this.__isGenerated = true;
	this.__initGL();
};
$hxClasses["zygame.shader.ColorShader"] = zygame_shader_ColorShader;
zygame_shader_ColorShader.__name__ = "zygame.shader.ColorShader";
zygame_shader_ColorShader.__super__ = openfl_display_DisplayObjectShader;
zygame_shader_ColorShader.prototype = $extend(openfl_display_DisplayObjectShader.prototype,{
	updateColor: function(color) {
		var r = color >>> 16 & 255;
		var g = color >>> 8 & 255;
		var b = color & 255;
		var tmp = UInt.toFloat(r) / UInt.toFloat(255);
		var tmp1 = UInt.toFloat(g) / UInt.toFloat(255);
		var tmp2 = UInt.toFloat(b) / UInt.toFloat(255);
		this.mcolorvalue.value = [tmp,tmp1,tmp2];
	}
	,mcolorvalue: null
	,__class__: zygame_shader_ColorShader
});
var zygame_shader_GeryShader = function() {
	if(this.__glFragmentSource == null) {
		this.__glFragmentSource = "\n\t\t\n\t\tvarying float openfl_Alphav;\n\t\tvarying vec4 openfl_ColorMultiplierv;\n\t\tvarying vec4 openfl_ColorOffsetv;\n\t\tvarying vec2 openfl_TextureCoordv;\n\n\t\tuniform bool openfl_HasColorTransform;\n\t\tuniform sampler2D openfl_Texture;\n\t\tuniform vec2 openfl_TextureSize;\n\n\t\t\t\t\n\t\tvoid main(void) {\n\t\t\t\n\t\t\tvec4 color = texture2D (openfl_Texture, openfl_TextureCoordv);\n\n\t\tif (color.a == 0.0) {\n\n\t\t\tgl_FragColor = vec4 (0.0, 0.0, 0.0, 0.0);\n\n\t\t} else if (openfl_HasColorTransform) {\n\n\t\t\tcolor = vec4 (color.rgb / color.a, color.a);\n\n\t\t\tmat4 colorMultiplier = mat4 (0);\n\t\t\tcolorMultiplier[0][0] = openfl_ColorMultiplierv.x;\n\t\t\tcolorMultiplier[1][1] = openfl_ColorMultiplierv.y;\n\t\t\tcolorMultiplier[2][2] = openfl_ColorMultiplierv.z;\n\t\t\tcolorMultiplier[3][3] = 1.0; // openfl_ColorMultiplierv.w;\n\n\t\t\tcolor = clamp (openfl_ColorOffsetv + (color * colorMultiplier), 0.0, 1.0);\n\n\t\t\tif (color.a > 0.0) {\n\n\t\t\t\tgl_FragColor = vec4 (color.rgb * color.a * openfl_Alphav, color.a * openfl_Alphav);\n\n\t\t\t} else {\n\n\t\t\t\tgl_FragColor = vec4 (0.0, 0.0, 0.0, 0.0);\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tgl_FragColor = color * openfl_Alphav;\n\n\t\t}\n\n\t\t\tfloat mColor = 0.0;\n\t\t\tmColor += gl_FragColor.r + gl_FragColor.g + gl_FragColor.b;\n\t\t\tmColor = mColor/3.0;\n\t\t\tgl_FragColor.r = mColor;\n\t\t\tgl_FragColor.g = mColor;\n\t\t\tgl_FragColor.b = mColor;\n\t\t\tgl_FragColor *= openfl_Alphav;\n\t\t\t\n\t\t}\n\t\t\n\t";
	}
	if(this.__glVertexSource == null) {
		this.__glVertexSource = "attribute float openfl_Alpha;\n\t\tattribute vec4 openfl_ColorMultiplier;\n\t\tattribute vec4 openfl_ColorOffset;\n\t\tattribute vec4 openfl_Position;\n\t\tattribute vec2 openfl_TextureCoord;\n\n\t\tvarying float openfl_Alphav;\n\t\tvarying vec4 openfl_ColorMultiplierv;\n\t\tvarying vec4 openfl_ColorOffsetv;\n\t\tvarying vec2 openfl_TextureCoordv;\n\n\t\tuniform mat4 openfl_Matrix;\n\t\tuniform bool openfl_HasColorTransform;\n\t\tuniform vec2 openfl_TextureSize;\n\n\n\t\tvoid main(void) {\n\n\t\t\topenfl_Alphav = openfl_Alpha;\n\t\topenfl_TextureCoordv = openfl_TextureCoord;\n\n\t\tif (openfl_HasColorTransform) {\n\n\t\t\topenfl_ColorMultiplierv = openfl_ColorMultiplier;\n\t\t\topenfl_ColorOffsetv = openfl_ColorOffset / 255.0;\n\n\t\t}\n\n\t\tgl_Position = openfl_Matrix * openfl_Position;\n\n\n\t\t}";
	}
	openfl_display_DisplayObjectShader.call(this);
	this.__isGenerated = true;
	this.__initGL();
};
$hxClasses["zygame.shader.GeryShader"] = zygame_shader_GeryShader;
zygame_shader_GeryShader.__name__ = "zygame.shader.GeryShader";
zygame_shader_GeryShader.__super__ = openfl_display_DisplayObjectShader;
zygame_shader_GeryShader.prototype = $extend(openfl_display_DisplayObjectShader.prototype,{
	__class__: zygame_shader_GeryShader
});
var zygame_shader_LayerAlphaShader = function(a) {
	if(a == null) {
		a = 1;
	}
	if(this.__glFragmentSource == null) {
		this.__glFragmentSource = "\n\t\t\n\t\tvarying float openfl_Alphav;\n\t\tvarying vec4 openfl_ColorMultiplierv;\n\t\tvarying vec4 openfl_ColorOffsetv;\n\t\tvarying vec2 openfl_TextureCoordv;\n\n\t\tuniform bool openfl_HasColorTransform;\n\t\tuniform sampler2D openfl_Texture;\n\t\tuniform vec2 openfl_TextureSize;\n\n\n        uniform float malpha;\n\t\t\t\t\n\t\tvoid main(void) {\n\t\t\t\n\t\t\tvec4 color = texture2D (openfl_Texture, openfl_TextureCoordv);\n\n\t\tif (color.a == 0.0) {\n\n\t\t\tgl_FragColor = vec4 (0.0, 0.0, 0.0, 0.0);\n\n\t\t} else if (openfl_HasColorTransform) {\n\n\t\t\tcolor = vec4 (color.rgb / color.a, color.a);\n\n\t\t\tmat4 colorMultiplier = mat4 (0);\n\t\t\tcolorMultiplier[0][0] = openfl_ColorMultiplierv.x;\n\t\t\tcolorMultiplier[1][1] = openfl_ColorMultiplierv.y;\n\t\t\tcolorMultiplier[2][2] = openfl_ColorMultiplierv.z;\n\t\t\tcolorMultiplier[3][3] = 1.0; // openfl_ColorMultiplierv.w;\n\n\t\t\tcolor = clamp (openfl_ColorOffsetv + (color * colorMultiplier), 0.0, 1.0);\n\n\t\t\tif (color.a > 0.0) {\n\n\t\t\t\tgl_FragColor = vec4 (color.rgb * color.a * openfl_Alphav, color.a * openfl_Alphav);\n\n\t\t\t} else {\n\n\t\t\t\tgl_FragColor = vec4 (0.0, 0.0, 0.0, 0.0);\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tgl_FragColor = color * openfl_Alphav;\n\n\t\t}\n\n\t\t\tgl_FragColor.r *= malpha;\n\t\t\tgl_FragColor.g *= malpha;\n\t\t\tgl_FragColor.b *= malpha;\n\t\t\tgl_FragColor.a *= malpha;\n\t\t}\n\t\t\n\t";
	}
	if(this.__glVertexSource == null) {
		this.__glVertexSource = "attribute float openfl_Alpha;\n\t\tattribute vec4 openfl_ColorMultiplier;\n\t\tattribute vec4 openfl_ColorOffset;\n\t\tattribute vec4 openfl_Position;\n\t\tattribute vec2 openfl_TextureCoord;\n\n\t\tvarying float openfl_Alphav;\n\t\tvarying vec4 openfl_ColorMultiplierv;\n\t\tvarying vec4 openfl_ColorOffsetv;\n\t\tvarying vec2 openfl_TextureCoordv;\n\n\t\tuniform mat4 openfl_Matrix;\n\t\tuniform bool openfl_HasColorTransform;\n\t\tuniform vec2 openfl_TextureSize;\n\n\n\t\tvoid main(void) {\n\n\t\t\topenfl_Alphav = openfl_Alpha;\n\t\topenfl_TextureCoordv = openfl_TextureCoord;\n\n\t\tif (openfl_HasColorTransform) {\n\n\t\t\topenfl_ColorMultiplierv = openfl_ColorMultiplier;\n\t\t\topenfl_ColorOffsetv = openfl_ColorOffset / 255.0;\n\n\t\t}\n\n\t\tgl_Position = openfl_Matrix * openfl_Position;\n\n\n\t\t}";
	}
	openfl_display_DisplayObjectShader.call(this);
	this.malpha.value = [a];
	this.__isGenerated = true;
	this.__initGL();
};
$hxClasses["zygame.shader.LayerAlphaShader"] = zygame_shader_LayerAlphaShader;
zygame_shader_LayerAlphaShader.__name__ = "zygame.shader.LayerAlphaShader";
zygame_shader_LayerAlphaShader.__super__ = openfl_display_DisplayObjectShader;
zygame_shader_LayerAlphaShader.prototype = $extend(openfl_display_DisplayObjectShader.prototype,{
	malpha: null
	,__class__: zygame_shader_LayerAlphaShader
});
var zygame_shader_MaskShader = function(mosaicWidth,mosaicHeight) {
	if(mosaicHeight == null) {
		mosaicHeight = 8;
	}
	if(mosaicWidth == null) {
		mosaicWidth = 8;
	}
	if(this.__glFragmentSource == null) {
		this.__glFragmentSource = "\n\n        varying float openfl_Alphav;\n\t\tvarying vec4 openfl_ColorMultiplierv;\n\t\tvarying vec4 openfl_ColorOffsetv;\n\t\tvarying vec2 openfl_TextureCoordv;\n\n\t\tuniform bool openfl_HasColorTransform;\n\t\tuniform sampler2D openfl_Texture;\n\t\tuniform vec2 openfl_TextureSize;\n\n\n\t\tuniform vec2 mosaicSize;\n\t\t\t\t\t\n\t\tvoid main(void) {\n\t\t\t\n\t\t\tvec4 color = texture2D (openfl_Texture, openfl_TextureCoordv);\n\n\t\tif (color.a == 0.0) {\n\n\t\t\tgl_FragColor = vec4 (0.0, 0.0, 0.0, 0.0);\n\n\t\t} else if (openfl_HasColorTransform) {\n\n\t\t\tcolor = vec4 (color.rgb / color.a, color.a);\n\n\t\t\tmat4 colorMultiplier = mat4 (0);\n\t\t\tcolorMultiplier[0][0] = openfl_ColorMultiplierv.x;\n\t\t\tcolorMultiplier[1][1] = openfl_ColorMultiplierv.y;\n\t\t\tcolorMultiplier[2][2] = openfl_ColorMultiplierv.z;\n\t\t\tcolorMultiplier[3][3] = 1.0; // openfl_ColorMultiplierv.w;\n\n\t\t\tcolor = clamp (openfl_ColorOffsetv + (color * colorMultiplier), 0.0, 1.0);\n\n\t\t\tif (color.a > 0.0) {\n\n\t\t\t\tgl_FragColor = vec4 (color.rgb * color.a * openfl_Alphav, color.a * openfl_Alphav);\n\n\t\t\t} else {\n\n\t\t\t\tgl_FragColor = vec4 (0.0, 0.0, 0.0, 0.0);\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tgl_FragColor = color * openfl_Alphav;\n\n\t\t}\n\n\n\t\t\tvec2 xy = vec2(openfl_TextureCoordv.x * openfl_TextureSize.x, openfl_TextureCoordv.y * openfl_TextureSize.y);\n\t\t\tvec2 xyMosaic = vec2(floor(xy.x / mosaicSize.x) * mosaicSize.x, \n\t\t\t\t\tfloor(xy.y / mosaicSize.y) * mosaicSize.y )\n\t\t\t\t\t+ .5*mosaicSize;\n\t\t\tvec2 delXY = xyMosaic - xy;\n\t\t\tfloat delL = length(delXY);\n\t\t\tvec2 uvMosaic = vec2(xyMosaic.x / openfl_TextureSize.x, xyMosaic.y / openfl_TextureSize.y);\n\t\t\t\n\t\t\tvec4 finalColor;\n\t\t\tif(delL<0.5*mosaicSize.x)\n\t\t\t{\n\t\t\t\tfinalColor = texture2D(openfl_Texture, uvMosaic);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tfinalColor = texture2D(openfl_Texture, uvMosaic);\n\t\t\t\t// finalColor = vec4(0., 0., 0., 1.);\n\t\t\t}\n\t\t\tgl_FragColor = finalColor * openfl_Alphav;\n\t\t\t\n\t\t}\n\t\t\n\t";
	}
	if(this.__glVertexSource == null) {
		this.__glVertexSource = "attribute float openfl_Alpha;\n\t\tattribute vec4 openfl_ColorMultiplier;\n\t\tattribute vec4 openfl_ColorOffset;\n\t\tattribute vec4 openfl_Position;\n\t\tattribute vec2 openfl_TextureCoord;\n\n\t\tvarying float openfl_Alphav;\n\t\tvarying vec4 openfl_ColorMultiplierv;\n\t\tvarying vec4 openfl_ColorOffsetv;\n\t\tvarying vec2 openfl_TextureCoordv;\n\n\t\tuniform mat4 openfl_Matrix;\n\t\tuniform bool openfl_HasColorTransform;\n\t\tuniform vec2 openfl_TextureSize;\n\n\n\t\tvoid main(void) {\n\n\t\t\topenfl_Alphav = openfl_Alpha;\n\t\topenfl_TextureCoordv = openfl_TextureCoord;\n\n\t\tif (openfl_HasColorTransform) {\n\n\t\t\topenfl_ColorMultiplierv = openfl_ColorMultiplier;\n\t\t\topenfl_ColorOffsetv = openfl_ColorOffset / 255.0;\n\n\t\t}\n\n\t\tgl_Position = openfl_Matrix * openfl_Position;\n\n\n\t\t}";
	}
	openfl_display_DisplayObjectShader.call(this);
	this.mosaicSize.value = [mosaicWidth,mosaicHeight];
	this.__isGenerated = true;
	this.__initGL();
};
$hxClasses["zygame.shader.MaskShader"] = zygame_shader_MaskShader;
zygame_shader_MaskShader.__name__ = "zygame.shader.MaskShader";
zygame_shader_MaskShader.__super__ = openfl_display_DisplayObjectShader;
zygame_shader_MaskShader.prototype = $extend(openfl_display_DisplayObjectShader.prototype,{
	mosaicSize: null
	,__class__: zygame_shader_MaskShader
});
var zygame_shader_StrokeShader = function(color,strokeNum,strokeIfAlpha) {
	if(strokeIfAlpha == null) {
		strokeIfAlpha = 0;
	}
	if(strokeNum == null) {
		strokeNum = 1;
	}
	if(this.__glFragmentSource == null) {
		this.__glFragmentSource = "\n\t\t\n\t\tvarying float openfl_Alphav;\n\t\tvarying vec4 openfl_ColorMultiplierv;\n\t\tvarying vec4 openfl_ColorOffsetv;\n\t\tvarying vec2 openfl_TextureCoordv;\n\n\t\tuniform bool openfl_HasColorTransform;\n\t\tuniform sampler2D openfl_Texture;\n\t\tuniform vec2 openfl_TextureSize;\n\n\n        uniform vec3 strokeColor;\n\n        uniform float stroke;\n\n        uniform float palpha;\n\n\t\tvoid main(void) {\n\t\t\t\n\t\t\tvec4 color = texture2D (openfl_Texture, openfl_TextureCoordv);\n\n\t\tif (color.a == 0.0) {\n\n\t\t\tgl_FragColor = vec4 (0.0, 0.0, 0.0, 0.0);\n\n\t\t} else if (openfl_HasColorTransform) {\n\n\t\t\tcolor = vec4 (color.rgb / color.a, color.a);\n\n\t\t\tmat4 colorMultiplier = mat4 (0);\n\t\t\tcolorMultiplier[0][0] = openfl_ColorMultiplierv.x;\n\t\t\tcolorMultiplier[1][1] = openfl_ColorMultiplierv.y;\n\t\t\tcolorMultiplier[2][2] = openfl_ColorMultiplierv.z;\n\t\t\tcolorMultiplier[3][3] = 1.0; // openfl_ColorMultiplierv.w;\n\n\t\t\tcolor = clamp (openfl_ColorOffsetv + (color * colorMultiplier), 0.0, 1.0);\n\n\t\t\tif (color.a > 0.0) {\n\n\t\t\t\tgl_FragColor = vec4 (color.rgb * color.a * openfl_Alphav, color.a * openfl_Alphav);\n\n\t\t\t} else {\n\n\t\t\t\tgl_FragColor = vec4 (0.0, 0.0, 0.0, 0.0);\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tgl_FragColor = color * openfl_Alphav;\n\n\t\t}\n\n            \n            if(color.a > 0.5)\n            {\n                gl_FragColor = color * openfl_Alphav;\n                return;\n            }\n\n            float isStroke = 0.0;\n            for(int i = 0;i<12;i++)\n            {\n                float agnle = 30.0 * float(i);\n                float rad = agnle * 0.01745329252;\n                vec2 unit = 1.0 / openfl_TextureSize.xy;\n                vec2 offset = vec2(stroke * cos(rad) * unit.x, stroke * sin(rad) * unit.y);\n                float a = texture2D(openfl_Texture, openfl_TextureCoordv + offset).a;\n                if(a > palpha)\n                {\n                    isStroke = 1.0;\n                    break;\n                }\n            }\n\n            if(isStroke == 1.0)\n            {\n                color.rgb = strokeColor;\n                color.a = 1.0;\n            }\n\n            gl_FragColor = color * openfl_Alphav;\n\t\t\t\n\t\t}\n\n\t\t\n\t";
	}
	if(this.__glVertexSource == null) {
		this.__glVertexSource = "attribute float openfl_Alpha;\n\t\tattribute vec4 openfl_ColorMultiplier;\n\t\tattribute vec4 openfl_ColorOffset;\n\t\tattribute vec4 openfl_Position;\n\t\tattribute vec2 openfl_TextureCoord;\n\n\t\tvarying float openfl_Alphav;\n\t\tvarying vec4 openfl_ColorMultiplierv;\n\t\tvarying vec4 openfl_ColorOffsetv;\n\t\tvarying vec2 openfl_TextureCoordv;\n\n\t\tuniform mat4 openfl_Matrix;\n\t\tuniform bool openfl_HasColorTransform;\n\t\tuniform vec2 openfl_TextureSize;\n\n\n\t\tvoid main(void) {\n\n\t\t\topenfl_Alphav = openfl_Alpha;\n\t\topenfl_TextureCoordv = openfl_TextureCoord;\n\n\t\tif (openfl_HasColorTransform) {\n\n\t\t\topenfl_ColorMultiplierv = openfl_ColorMultiplier;\n\t\t\topenfl_ColorOffsetv = openfl_ColorOffset / 255.0;\n\n\t\t}\n\n\t\tgl_Position = openfl_Matrix * openfl_Position;\n\n\n\t\t}";
	}
	openfl_display_DisplayObjectShader.call(this);
	var r = color >>> 16 & 255;
	var g = color >>> 8 & 255;
	var b = color & 255;
	var tmp = UInt.toFloat(r) / UInt.toFloat(255);
	var tmp1 = UInt.toFloat(g) / UInt.toFloat(255);
	var tmp2 = UInt.toFloat(b) / UInt.toFloat(255);
	this.strokeColor.value = [tmp,tmp1,tmp2];
	this.stroke.value = [strokeNum];
	this.palpha.value = [strokeIfAlpha];
	this.__isGenerated = true;
	this.__initGL();
};
$hxClasses["zygame.shader.StrokeShader"] = zygame_shader_StrokeShader;
zygame_shader_StrokeShader.__name__ = "zygame.shader.StrokeShader";
zygame_shader_StrokeShader.__super__ = openfl_display_DisplayObjectShader;
zygame_shader_StrokeShader.prototype = $extend(openfl_display_DisplayObjectShader.prototype,{
	strokeColor: null
	,stroke: null
	,palpha: null
	,__class__: zygame_shader_StrokeShader
});
var zygame_shader_TextColorShader = function(color,soureColor) {
	if(soureColor == null) {
		soureColor = 1;
	}
	if(color == null) {
		color = 1;
	}
	if(this.__glFragmentSource == null) {
		this.__glFragmentSource = "\n\t\t\n\t\tvarying float openfl_Alphav;\n\t\tvarying vec4 openfl_ColorMultiplierv;\n\t\tvarying vec4 openfl_ColorOffsetv;\n\t\tvarying vec2 openfl_TextureCoordv;\n\n\t\tuniform bool openfl_HasColorTransform;\n\t\tuniform sampler2D openfl_Texture;\n\t\tuniform vec2 openfl_TextureSize;\n\n\n        uniform vec3 mcolorvalue;\n        uniform vec3 msoureColor;\n\t\t\t\t\n\t\tvoid main(void) {\n\t\t\t\n\t\t\tvec4 color = texture2D (openfl_Texture, openfl_TextureCoordv);\n\n\t\tif (color.a == 0.0) {\n\n\t\t\tgl_FragColor = vec4 (0.0, 0.0, 0.0, 0.0);\n\n\t\t} else if (openfl_HasColorTransform) {\n\n\t\t\tcolor = vec4 (color.rgb / color.a, color.a);\n\n\t\t\tmat4 colorMultiplier = mat4 (0);\n\t\t\tcolorMultiplier[0][0] = openfl_ColorMultiplierv.x;\n\t\t\tcolorMultiplier[1][1] = openfl_ColorMultiplierv.y;\n\t\t\tcolorMultiplier[2][2] = openfl_ColorMultiplierv.z;\n\t\t\tcolorMultiplier[3][3] = 1.0; // openfl_ColorMultiplierv.w;\n\n\t\t\tcolor = clamp (openfl_ColorOffsetv + (color * colorMultiplier), 0.0, 1.0);\n\n\t\t\tif (color.a > 0.0) {\n\n\t\t\t\tgl_FragColor = vec4 (color.rgb * color.a * openfl_Alphav, color.a * openfl_Alphav);\n\n\t\t\t} else {\n\n\t\t\t\tgl_FragColor = vec4 (0.0, 0.0, 0.0, 0.0);\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tgl_FragColor = color * openfl_Alphav;\n\n\t\t}\n\n\t\t\t\n\t\t\tfloat a = gl_FragColor.a;\n\t\t\tif(distance(gl_FragColor.rgb, msoureColor.rgb * a) < 0.05)\n                gl_FragColor.rgb = mcolorvalue;\n\t\t\tgl_FragColor *= a * openfl_Alphav;\n\t\t}\n\t\t\n\t";
	}
	if(this.__glVertexSource == null) {
		this.__glVertexSource = "attribute float openfl_Alpha;\n\t\tattribute vec4 openfl_ColorMultiplier;\n\t\tattribute vec4 openfl_ColorOffset;\n\t\tattribute vec4 openfl_Position;\n\t\tattribute vec2 openfl_TextureCoord;\n\n\t\tvarying float openfl_Alphav;\n\t\tvarying vec4 openfl_ColorMultiplierv;\n\t\tvarying vec4 openfl_ColorOffsetv;\n\t\tvarying vec2 openfl_TextureCoordv;\n\n\t\tuniform mat4 openfl_Matrix;\n\t\tuniform bool openfl_HasColorTransform;\n\t\tuniform vec2 openfl_TextureSize;\n\n\n\t\tvoid main(void) {\n\n\t\t\topenfl_Alphav = openfl_Alpha;\n\t\topenfl_TextureCoordv = openfl_TextureCoord;\n\n\t\tif (openfl_HasColorTransform) {\n\n\t\t\topenfl_ColorMultiplierv = openfl_ColorMultiplier;\n\t\t\topenfl_ColorOffsetv = openfl_ColorOffset / 255.0;\n\n\t\t}\n\n\t\tgl_Position = openfl_Matrix * openfl_Position;\n\n\n\t\t}";
	}
	openfl_display_DisplayObjectShader.call(this);
	this.updateColor(color);
	var r = soureColor >>> 16 & 255;
	var g = soureColor >>> 8 & 255;
	var b = soureColor & 255;
	var tmp = UInt.toFloat(r) / UInt.toFloat(255);
	var tmp1 = UInt.toFloat(g) / UInt.toFloat(255);
	var tmp2 = UInt.toFloat(b) / UInt.toFloat(255);
	this.msoureColor.value = [tmp,tmp1,tmp2];
	this.__isGenerated = true;
	this.__initGL();
};
$hxClasses["zygame.shader.TextColorShader"] = zygame_shader_TextColorShader;
zygame_shader_TextColorShader.__name__ = "zygame.shader.TextColorShader";
zygame_shader_TextColorShader.__super__ = openfl_display_DisplayObjectShader;
zygame_shader_TextColorShader.prototype = $extend(openfl_display_DisplayObjectShader.prototype,{
	updateColor: function(color) {
		var r = color >>> 16 & 255;
		var g = color >>> 8 & 255;
		var b = color & 255;
		var tmp = UInt.toFloat(r) / UInt.toFloat(255);
		var tmp1 = UInt.toFloat(g) / UInt.toFloat(255);
		var tmp2 = UInt.toFloat(b) / UInt.toFloat(255);
		this.mcolorvalue.value = [tmp,tmp1,tmp2];
	}
	,mcolorvalue: null
	,msoureColor: null
	,__class__: zygame_shader_TextColorShader
});
var zygame_shader_TextFiledShader = function() {
	if(this.__glFragmentSource == null) {
		this.__glFragmentSource = "\n\t\t\n\t\tvarying float openfl_Alphav;\n\t\tvarying vec4 openfl_ColorMultiplierv;\n\t\tvarying vec4 openfl_ColorOffsetv;\n\t\tvarying vec2 openfl_TextureCoordv;\n\n\t\tuniform bool openfl_HasColorTransform;\n\t\tuniform sampler2D openfl_Texture;\n\t\tuniform vec2 openfl_TextureSize;\n\n\t\t\t\n\t\tvoid main(void) {\n\t\t\t\n\t\t\tvec4 color = texture2D (openfl_Texture, openfl_TextureCoordv);\n\n\t\tif (color.a == 0.0) {\n\n\t\t\tgl_FragColor = vec4 (0.0, 0.0, 0.0, 0.0);\n\n\t\t} else if (openfl_HasColorTransform) {\n\n\t\t\tcolor = vec4 (color.rgb / color.a, color.a);\n\n\t\t\tmat4 colorMultiplier = mat4 (0);\n\t\t\tcolorMultiplier[0][0] = openfl_ColorMultiplierv.x;\n\t\t\tcolorMultiplier[1][1] = openfl_ColorMultiplierv.y;\n\t\t\tcolorMultiplier[2][2] = openfl_ColorMultiplierv.z;\n\t\t\tcolorMultiplier[3][3] = 1.0; // openfl_ColorMultiplierv.w;\n\n\t\t\tcolor = clamp (openfl_ColorOffsetv + (color * colorMultiplier), 0.0, 1.0);\n\n\t\t\tif (color.a > 0.0) {\n\n\t\t\t\tgl_FragColor = vec4 (color.rgb * color.a * openfl_Alphav, color.a * openfl_Alphav);\n\n\t\t\t} else {\n\n\t\t\t\tgl_FragColor = vec4 (0.0, 0.0, 0.0, 0.0);\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tgl_FragColor = color * openfl_Alphav;\n\n\t\t}\n\n\t\t\t// float mColor = 0.0;\n\t\t\t// mColor += gl_FragColor.r + gl_FragColor.g + gl_FragColor.b;\n\t\t\t// mColor = mColor/3.0;\n            // if(mColor > 0)\n            // {\n            //     gl_FragColor.a = 1;\n            // }\n            // if((color.r + color.g + color.b)/3. > 0.2)\n            // {\n            //     color.r *= 1.2;\n            //     color.g *= 1.2;\n            //     color.b *= 1.2;\n            // }\n            // gl_FragColor = vec4 (color.rgb * openfl_Alphav,color.a * openfl_Alphav);\n            if(color.a < 0.8)\n                color.a = 0.;\n            else\n                color.a = 1.;\n            gl_FragColor = color;\n\t\t}\n\t\t\n\t";
	}
	if(this.__glVertexSource == null) {
		this.__glVertexSource = "attribute float openfl_Alpha;\n\t\tattribute vec4 openfl_ColorMultiplier;\n\t\tattribute vec4 openfl_ColorOffset;\n\t\tattribute vec4 openfl_Position;\n\t\tattribute vec2 openfl_TextureCoord;\n\n\t\tvarying float openfl_Alphav;\n\t\tvarying vec4 openfl_ColorMultiplierv;\n\t\tvarying vec4 openfl_ColorOffsetv;\n\t\tvarying vec2 openfl_TextureCoordv;\n\n\t\tuniform mat4 openfl_Matrix;\n\t\tuniform bool openfl_HasColorTransform;\n\t\tuniform vec2 openfl_TextureSize;\n\n\n\t\tvoid main(void) {\n\n\t\t\topenfl_Alphav = openfl_Alpha;\n\t\topenfl_TextureCoordv = openfl_TextureCoord;\n\n\t\tif (openfl_HasColorTransform) {\n\n\t\t\topenfl_ColorMultiplierv = openfl_ColorMultiplier;\n\t\t\topenfl_ColorOffsetv = openfl_ColorOffset / 255.0;\n\n\t\t}\n\n\t\tgl_Position = openfl_Matrix * openfl_Position;\n\n\n\t\t}";
	}
	openfl_display_DisplayObjectShader.call(this);
	this.__isGenerated = true;
	this.__initGL();
};
$hxClasses["zygame.shader.TextFiledShader"] = zygame_shader_TextFiledShader;
zygame_shader_TextFiledShader.__name__ = "zygame.shader.TextFiledShader";
zygame_shader_TextFiledShader.__super__ = openfl_display_DisplayObjectShader;
zygame_shader_TextFiledShader.prototype = $extend(openfl_display_DisplayObjectShader.prototype,{
	__class__: zygame_shader_TextFiledShader
});
var zygame_shader_engine_ZShader = function(xml) {
	if(this.__glFragmentSource == null) {
		this.__glFragmentSource = "varying float openfl_Alphav;\n\t\tvarying vec4 openfl_ColorMultiplierv;\n\t\tvarying vec4 openfl_ColorOffsetv;\n\t\tvarying vec2 openfl_TextureCoordv;\n\n\t\tuniform bool openfl_HasColorTransform;\n\t\tuniform sampler2D openfl_Texture;\n\t\tuniform vec2 openfl_TextureSize;\n\n\n\t\tvoid main(void) {\n\n\t\t\tvec4 color = texture2D (openfl_Texture, openfl_TextureCoordv);\n\n\t\tif (color.a == 0.0) {\n\n\t\t\tgl_FragColor = vec4 (0.0, 0.0, 0.0, 0.0);\n\n\t\t} else if (openfl_HasColorTransform) {\n\n\t\t\tcolor = vec4 (color.rgb / color.a, color.a);\n\n\t\t\tmat4 colorMultiplier = mat4 (0);\n\t\t\tcolorMultiplier[0][0] = openfl_ColorMultiplierv.x;\n\t\t\tcolorMultiplier[1][1] = openfl_ColorMultiplierv.y;\n\t\t\tcolorMultiplier[2][2] = openfl_ColorMultiplierv.z;\n\t\t\tcolorMultiplier[3][3] = 1.0; // openfl_ColorMultiplierv.w;\n\n\t\t\tcolor = clamp (openfl_ColorOffsetv + (color * colorMultiplier), 0.0, 1.0);\n\n\t\t\tif (color.a > 0.0) {\n\n\t\t\t\tgl_FragColor = vec4 (color.rgb * color.a * openfl_Alphav, color.a * openfl_Alphav);\n\n\t\t\t} else {\n\n\t\t\t\tgl_FragColor = vec4 (0.0, 0.0, 0.0, 0.0);\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tgl_FragColor = color * openfl_Alphav;\n\n\t\t}\n\n\n\t\t}";
	}
	if(this.__glVertexSource == null) {
		this.__glVertexSource = "attribute float openfl_Alpha;\n\t\tattribute vec4 openfl_ColorMultiplier;\n\t\tattribute vec4 openfl_ColorOffset;\n\t\tattribute vec4 openfl_Position;\n\t\tattribute vec2 openfl_TextureCoord;\n\n\t\tvarying float openfl_Alphav;\n\t\tvarying vec4 openfl_ColorMultiplierv;\n\t\tvarying vec4 openfl_ColorOffsetv;\n\t\tvarying vec2 openfl_TextureCoordv;\n\n\t\tuniform mat4 openfl_Matrix;\n\t\tuniform bool openfl_HasColorTransform;\n\t\tuniform vec2 openfl_TextureSize;\n\n\n\t\tvoid main(void) {\n\n\t\t\topenfl_Alphav = openfl_Alpha;\n\t\topenfl_TextureCoordv = openfl_TextureCoord;\n\n\t\tif (openfl_HasColorTransform) {\n\n\t\t\topenfl_ColorMultiplierv = openfl_ColorMultiplier;\n\t\t\topenfl_ColorOffsetv = openfl_ColorOffset / 255.0;\n\n\t\t}\n\n\t\tgl_Position = openfl_Matrix * openfl_Position;\n\n\n\t\t}";
	}
	var glVertexSource = null;
	var glFragmentSource = null;
	var xmls = xml.elements();
	var item = xmls;
	while(item.hasNext()) {
		var item1 = item.next();
		if(item1.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element but found " + (item1.nodeType == null ? "null" : XmlType.toString(item1.nodeType)));
		}
		switch(item1.nodeName) {
		case "glFragmentSource":
			if(item1.nodeType != Xml.Document && item1.nodeType != Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (item1.nodeType == null ? "null" : XmlType.toString(item1.nodeType)));
			}
			var _this = item1.children[0];
			if(_this.nodeType == Xml.Document || _this.nodeType == Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, unexpected " + (_this.nodeType == null ? "null" : XmlType.toString(_this.nodeType)));
			}
			glFragmentSource = _this.nodeValue;
			break;
		case "glVertexSource":
			if(item1.nodeType != Xml.Document && item1.nodeType != Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (item1.nodeType == null ? "null" : XmlType.toString(item1.nodeType)));
			}
			var _this1 = item1.children[0];
			if(_this1.nodeType == Xml.Document || _this1.nodeType == Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, unexpected " + (_this1.nodeType == null ? "null" : XmlType.toString(_this1.nodeType)));
			}
			glVertexSource = _this1.nodeValue;
			break;
		case "update":
			if(item1.nodeType != Xml.Document && item1.nodeType != Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (item1.nodeType == null ? "null" : XmlType.toString(item1.nodeType)));
			}
			var _this2 = item1.children[0];
			if(_this2.nodeType == Xml.Document || _this2.nodeType == Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, unexpected " + (_this2.nodeType == null ? "null" : XmlType.toString(_this2.nodeType)));
			}
			this.haxeScript = new zygame_script_ZHaxe(_this2.nodeValue);
			this.haxeScript.interp.variables.h["this"] = this;
			zygame_core_Start.current.addToUpdate(this);
			break;
		}
	}
	if(glVertexSource != null) {
		this.set_glVertexSource(glVertexSource);
	}
	if(glFragmentSource != null) {
		glFragmentSource = StringTools.replace(glFragmentSource,"#header",zygame_shader_engine_ZShader.defalutGLFragmentSourceHeader);
		glFragmentSource = StringTools.replace(glFragmentSource,"#body",zygame_shader_engine_ZShader.defalutGLFragmentSourceBody);
		glFragmentSource = StringTools.replace(glFragmentSource,"#pragma header",zygame_shader_engine_ZShader.defalutGLFragmentSourceHeader);
		glFragmentSource = StringTools.replace(glFragmentSource,"#pragma body",zygame_shader_engine_ZShader.defalutGLFragmentSourceBody);
		this.set_glFragmentSource(glFragmentSource);
	}
	openfl_display_DisplayObjectShader.call(this);
	this.__isGenerated = true;
	this.__initGL();
};
$hxClasses["zygame.shader.engine.ZShader"] = zygame_shader_engine_ZShader;
zygame_shader_engine_ZShader.__name__ = "zygame.shader.engine.ZShader";
zygame_shader_engine_ZShader.__interfaces__ = [zygame_core_Refresher];
zygame_shader_engine_ZShader.__super__ = openfl_display_DisplayObjectShader;
zygame_shader_engine_ZShader.prototype = $extend(openfl_display_DisplayObjectShader.prototype,{
	haxeScript: null
	,setValue: function(key,data) {
		var value = Reflect.getProperty(this,key);
		if(value == null) {
			haxe_Log.trace("key '" + key + "' is null",{ fileName : "Source/zygame/shader/engine/ZShader.hx", lineNumber : 114, className : "zygame.shader.engine.ZShader", methodName : "setValue"});
			return;
		}
		haxe_Log.trace("set value ",{ fileName : "Source/zygame/shader/engine/ZShader.hx", lineNumber : 117, className : "zygame.shader.engine.ZShader", methodName : "setValue", customParams : [key,data]});
		value.value = ((data) instanceof Array) ? data : [data];
	}
	,getValue: function(key) {
		return Reflect.getProperty(this,key).value;
	}
	,onFrame: function() {
		if(this.haxeScript != null) {
			this.haxeScript.call();
		}
	}
	,dipose: function() {
		zygame_core_Start.current.removeToUpdate(this);
	}
	,updateFrame: function(frame) {
		if(frame == null) {
			return;
		}
		this.setValue("frameOffest",[frame.x,frame.y]);
		this.setValue("frameSize",[frame.width,frame.height]);
	}
	,__class__: zygame_shader_engine_ZShader
});
var zygame_uicn_UICNAPI = function() { };
$hxClasses["zygame.uicn.UICNAPI"] = zygame_uicn_UICNAPI;
zygame_uicn_UICNAPI.__name__ = "zygame.uicn.UICNAPI";
zygame_uicn_UICNAPI.isGuest = function() {
	return zygame_uicn_UICNAPI._token == null;
};
zygame_uicn_UICNAPI.loginByOpenId = function(openid,call) {
	zygame_uicn_UICNAPI.post("LoginOpenID",{ openid : openid},function(data) {
		if(data.code == 0) {
			zygame_uicn_UICNAPI._token = data.obj.data.token;
		}
		if(call != null) {
			call(data);
		}
	});
};
zygame_uicn_UICNAPI.readUserData = function(apptag,call) {
	zygame_uicn_UICNAPI.post("ReadData",{ token : zygame_uicn_UICNAPI._token, save : apptag},function(data) {
		if(data.code == 0) {
			data.obj.data = JSON.parse(data.obj.data);
		}
		if(call != null) {
			call(data);
		}
	});
};
zygame_uicn_UICNAPI.saveUserData = function(apptag,data,call) {
	zygame_uicn_UICNAPI.post("SaveData",{ token : zygame_uicn_UICNAPI._token, save : apptag, data : JSON.stringify(data)},function(data) {
		if(call != null) {
			call(data);
		}
	});
};
zygame_uicn_UICNAPI.post = function(action,data,call) {
	var urlloader = new openfl_net_URLLoader();
	data.time = new Date().getTime();
	data.sign = haxe_crypto_Md5.encode(Std.string(data.time) + "_" + action + "_zygameuicn");
	var url = new openfl_net_URLRequest(zygame_uicn_UICNAPI.rootApi + action);
	var path = [];
	var keys = Reflect.fields(data);
	var _g_current = 0;
	var _g_array = keys;
	while(_g_current < _g_array.length) {
		var _g1_value = _g_array[_g_current];
		var _g1_key = _g_current++;
		var index = _g1_key;
		var value = _g1_value;
		path.push(value + "=" + Std.string(Reflect.getProperty(data,value)));
	}
	url.method = "POST";
	var v = openfl_net_URLVariables._new(path.join("&"));
	url.data = v;
	urlloader.addEventListener("complete",function(e) {
		call(new zygame_cmnt_callback_CmntCallBackData(action,0,urlloader.data));
	});
	urlloader.addEventListener("ioError",function(e) {
		call(new zygame_cmnt_callback_CmntCallBackData(action,500,urlloader.data));
	});
	urlloader.load(url);
};
var zygame_utils_Align = function() { };
$hxClasses["zygame.utils.Align"] = zygame_utils_Align;
zygame_utils_Align.__name__ = "zygame.utils.Align";
zygame_utils_Align.alignDisplay = function(display,v,h) {
	if(v == null) {
		v = "center";
	}
	if(h == null) {
		h = "center";
	}
	switch(v) {
	case "bottom":
		display.set_y(-display.get_height());
		break;
	case "center":
		display.set_y(-display.get_height() * 0.5);
		break;
	case "top":
		display.set_y(0);
		break;
	}
	switch(h) {
	case "center":
		display.set_x(-display.get_width() * 0.5);
		break;
	case "left":
		display.set_x(0);
		break;
	case "right":
		display.set_x(-display.get_width());
		break;
	}
};
var zygame_utils_AssetsUtils = $hx_exports["zygame"]["utils"]["AssetsUtils"] = function() { };
$hxClasses["zygame.utils.AssetsUtils"] = zygame_utils_AssetsUtils;
zygame_utils_AssetsUtils.__name__ = "zygame.utils.AssetsUtils";
zygame_utils_AssetsUtils.findZipData = function(list,fileName) {
	var _g_head = list.h;
	while(_g_head != null) {
		var val = _g_head.item;
		_g_head = _g_head.next;
		var entry = val;
		if(entry.fileName.indexOf(fileName) != -1) {
			return entry;
		}
	}
	return null;
};
zygame_utils_AssetsUtils.loadSound = function(id,cache) {
	if(cache == null) {
		cache = false;
	}
	return new zygame_utils_SoundLoader(zygame_utils_AssetsUtils.ofPath(id));
};
zygame_utils_AssetsUtils.loadText = function(id,cache) {
	if(cache == null) {
		cache = false;
	}
	return new zygame_utils_TextLoader(zygame_utils_AssetsUtils.ofPath(id));
};
zygame_utils_AssetsUtils.loadBitmapData = function(id,cache,isAtf) {
	if(isAtf == null) {
		isAtf = false;
	}
	if(cache == null) {
		cache = false;
	}
	return new zygame_utils_BitmapDataLoader(zygame_utils_AssetsUtils.ofPath(id),isAtf);
};
zygame_utils_AssetsUtils.loadBytes = function(id,cache) {
	if(cache == null) {
		cache = false;
	}
	return new zygame_utils_BytesLoader(zygame_utils_AssetsUtils.ofPath(id));
};
zygame_utils_AssetsUtils.ofPath = function(path) {
	if(path.indexOf("photo://") == 0) {
		return path;
	}
	if(path.indexOf("?") > -1) {
		path += "&" + lime_utils_Assets.cache.version;
	} else {
		path += "?" + lime_utils_Assets.cache.version;
	}
	if(window.webPath == null) {
		window.webPath = zygame_utils_AssetsUtils.nativePath;
	}
	var assetsVersion = lime_utils_Assets.cache.version;
	if(window.webPath != null) {
		if(path.indexOf("http") == -1) {
			path = window.webPath + "/" + path;
			if(path.indexOf("?") > -1) {
				path += "&" + Std.string(assetsVersion);
			} else {
				path += "?" + Std.string(assetsVersion);
			}
		}
	}
	return path;
};
var zygame_utils_BaseLoader = function(path) {
	this.path = null;
	this.path = path;
};
$hxClasses["zygame.utils.BaseLoader"] = zygame_utils_BaseLoader;
zygame_utils_BaseLoader.__name__ = "zygame.utils.BaseLoader";
zygame_utils_BaseLoader.prototype = {
	path: null
	,errorCallBack: null
	,onError: function(call) {
		this.errorCallBack = call;
		return this;
	}
	,callError: function(msg) {
		if(this.errorCallBack != null) {
			this.errorCallBack(msg);
		}
	}
	,__class__: zygame_utils_BaseLoader
};
var zygame_utils_BytesLoader = function(path) {
	zygame_utils_BaseLoader.call(this,path);
};
$hxClasses["zygame.utils.BytesLoader"] = zygame_utils_BytesLoader;
zygame_utils_BytesLoader.__name__ = "zygame.utils.BytesLoader";
zygame_utils_BytesLoader.__super__ = zygame_utils_BaseLoader;
zygame_utils_BytesLoader.prototype = $extend(zygame_utils_BaseLoader.prototype,{
	onCompleteAssets: function(call) {
		var _gthis = this;
		this.onComplete(function(bytes) {
			call(_gthis.path,bytes);
		});
		return this;
	}
	,onComplete: function(call) {
		var _gthis = this;
		var request = new openfl_net_URLRequest(zygame_utils_AssetsUtils.ofPath(this.path));
		var url = new openfl_net_URLLoader();
		url.dataFormat = 0;
		url.load(request);
		url.addEventListener("complete",function(e) {
			var bytes = url.data;
			call(openfl_utils_ByteArray.toBytes(bytes));
			call = null;
		});
		url.addEventListener("ioError",function(e) {
			_gthis.callError("无法加载" + _gthis.path);
			call = null;
		});
		return this;
	}
	,__class__: zygame_utils_BytesLoader
});
var zygame_utils_BitmapDataLoader = function(path,isAtf) {
	this.isAtf = false;
	zygame_utils_BaseLoader.call(this,path);
	this.isAtf = isAtf;
};
$hxClasses["zygame.utils.BitmapDataLoader"] = zygame_utils_BitmapDataLoader;
zygame_utils_BitmapDataLoader.__name__ = "zygame.utils.BitmapDataLoader";
zygame_utils_BitmapDataLoader.__super__ = zygame_utils_BaseLoader;
zygame_utils_BitmapDataLoader.prototype = $extend(zygame_utils_BaseLoader.prototype,{
	isAtf: null
	,onCompleteAssets: function(call) {
		var _gthis = this;
		this.onComplete(function(bitmapData) {
			call(_gthis.path,bitmapData);
		});
		return this;
	}
	,onComplete: function(call) {
		return this.onComplete2(call);
	}
	,onComplete2: function(call) {
		var _gthis = this;
		if(this.isAtf) {
			zygame_utils_AssetsUtils.loadBytes(this.path,false).onComplete(function(bytes) {
				var input = new haxe_io_BytesInput(bytes);
				var zip = new haxe_zip_Reader(input);
				var list = zip.read();
				var entry = zygame_utils_AssetsUtils.findZipData(list,".atf");
				if(entry != null) {
					var bytes = entry.compressed ? lime__$internal_format_Deflate.decompress(entry.data) : entry.data;
					var texture = zygame_core_Start.current.stage.context3D.createTexture(2048,2048,4,false);
					texture.uploadCompressedTextureFromByteArray(openfl_utils_ByteArray.fromBytes(bytes),0);
					var bitmapData = openfl_display_BitmapData.fromTexture(texture);
					call(bitmapData);
					call = null;
				} else {
					_gthis.callError("没有包含atf资源");
					call = null;
				}
			});
		} else {
			var img = new lime_graphics_Image();
			img.__fromFile(this.path,function(loadedImage) {
				var bitmapData = zygame_display_ZBitmapData.fromImage(loadedImage);
				bitmapData.path = _gthis.path;
				if(call != null) {
					call(bitmapData);
				}
				call = null;
			},function() {
				if(_gthis.callError != null) {
					_gthis.callError("无法加载" + _gthis.path);
				}
				call = null;
			});
		}
		return this;
	}
	,__class__: zygame_utils_BitmapDataLoader
});
var zygame_utils_TextLoader = function(path) {
	zygame_utils_BaseLoader.call(this,path);
};
$hxClasses["zygame.utils.TextLoader"] = zygame_utils_TextLoader;
zygame_utils_TextLoader.__name__ = "zygame.utils.TextLoader";
zygame_utils_TextLoader.__super__ = zygame_utils_BaseLoader;
zygame_utils_TextLoader.prototype = $extend(zygame_utils_BaseLoader.prototype,{
	onCompleteAssets: function(call) {
		var _gthis = this;
		this.onComplete(function(text) {
			call(_gthis.path,text);
		});
		return this;
	}
	,onComplete: function(call) {
		var _gthis = this;
		var url = new openfl_net_URLRequest(this.path);
		var data = new openfl_net_URLLoader();
		data.addEventListener("complete",function(_) {
			call(data.data);
		});
		data.addEventListener("ioError",function(_) {
			_gthis.callError("无法加载" + _gthis.path);
		});
		data.load(url);
		return this;
	}
	,__class__: zygame_utils_TextLoader
});
var zygame_utils_SoundLoader = function(path) {
	zygame_utils_BaseLoader.call(this,path);
};
$hxClasses["zygame.utils.SoundLoader"] = zygame_utils_SoundLoader;
zygame_utils_SoundLoader.__name__ = "zygame.utils.SoundLoader";
zygame_utils_SoundLoader.__super__ = zygame_utils_BaseLoader;
zygame_utils_SoundLoader.prototype = $extend(zygame_utils_BaseLoader.prototype,{
	onCompleteAssets: function(call) {
		var _gthis = this;
		this.onComplete(function(sound) {
			call(_gthis.path,sound);
		});
		return this;
	}
	,onComplete: function(call) {
		var _gthis = this;
		var url = new openfl_net_URLRequest(this.path);
		var sound = new openfl_media_Sound();
		sound.addEventListener("complete",function(_) {
			call(sound);
		});
		sound.addEventListener("ioError",function(_) {
			_gthis.callError("无法加载" + _gthis.path);
		});
		sound.load(url);
		return this;
	}
	,__class__: zygame_utils_SoundLoader
});
var zygame_utils_BytesSoundLoader = function(path,bytes) {
	zygame_utils_BaseLoader.call(this,path);
	this.bytes = bytes;
};
$hxClasses["zygame.utils.BytesSoundLoader"] = zygame_utils_BytesSoundLoader;
zygame_utils_BytesSoundLoader.__name__ = "zygame.utils.BytesSoundLoader";
zygame_utils_BytesSoundLoader.__super__ = zygame_utils_BaseLoader;
zygame_utils_BytesSoundLoader.prototype = $extend(zygame_utils_BaseLoader.prototype,{
	bytes: null
	,onCompleteAssets: function(call) {
		var _gthis = this;
		this.onComplete(function(sound) {
			call(_gthis.path,sound);
		});
		return this;
	}
	,onComplete: function(call) {
		var _gthis = this;
		var url = new openfl_net_URLRequest(this.path);
		var sound = new openfl_media_Sound();
		sound.addEventListener("complete",function(_) {
			call(sound);
		});
		sound.addEventListener("ioError",function(_) {
			_gthis.callError("无法加载" + _gthis.path);
		});
		var this1 = this.bytes;
		sound.loadCompressedDataFromByteArray(this.bytes,this1.length - this1.position);
		return this;
	}
	,__class__: zygame_utils_BytesSoundLoader
});
var zygame_utils_BigInteger = function(val) {
	if(val == null) {
		val = "";
	}
	this.isPositive = true;
	this._values = [];
	this.set_value(val);
};
$hxClasses["zygame.utils.BigInteger"] = zygame_utils_BigInteger;
zygame_utils_BigInteger.__name__ = "zygame.utils.BigInteger";
zygame_utils_BigInteger.prototype = {
	_values: null
	,_valStr: null
	,isPositive: null
	,set_value: function(val) {
		this._valStr = val;
		this._values = zygame_utils_MathUtils.value(val);
		return val;
	}
	,get_value: function() {
		if(this._valStr == "") {
			return "0";
		}
		return (this.isPositive ? "" : "-") + this._valStr;
	}
	,pow: function(val) {
		if(val == "0") {
			this._values = [1];
			this._valStr = "1";
			return this;
		}
		var curvalue = this.get_value();
		var value = Std.parseInt(val) - 1;
		var _g = 0;
		var _g1 = value;
		while(_g < _g1) {
			var i = _g++;
			this.mul(curvalue);
		}
		return this;
	}
	,deleteEndNumber: function(len) {
		if(this._values.length > len) {
			this._values = this._values.splice(0,this._values.length - len);
			this._valStr = this._values.join("");
		} else {
			this._values = [];
			this._valStr = "0";
		}
		return this;
	}
	,mul: function(val) {
		if(this.get_value() == "0" || val == "0") {
			this.set_value("0");
			return this;
		}
		if(val.charAt(0) == "-") {
			val = HxOverrides.substr(val,1,null);
			this.isPositive = !this.isPositive;
		}
		var big = new zygame_utils_BigInteger(val);
		var value2 = big.getValues();
		var list = [];
		var _g = 0;
		var _g1 = value2.length;
		while(_g < _g1) {
			var i = _g++;
			list.push(this.mul2(value2[i],value2.length - i - 1));
		}
		var addValues = [];
		var _g = 0;
		var _g1 = this._values.length + value2.length - 1;
		while(_g < _g1) {
			var i2 = _g++;
			var all = 0;
			var _g2 = 0;
			while(_g2 < list.length) {
				var a = list[_g2];
				++_g2;
				if(i2 < a.length) {
					all += a[i2];
				}
			}
			addValues.push(all);
		}
		var _g = 0;
		var _g1 = addValues.length;
		while(_g < _g1) {
			var up = _g++;
			var value = addValues[up];
			if(value > 0) {
				value = value / 10 | 0;
				addValues[up] -= value * 10;
				if(up == addValues.length - 1) {
					addValues.push(value);
				} else {
					addValues[up + 1] += value;
				}
			}
		}
		addValues.reverse();
		this._values = addValues;
		this.clearZero();
		this._valStr = this._values.join("");
		return this;
	}
	,mul2: function(val,py) {
		var arr = this._values.slice();
		var _g = 0;
		var _g1 = arr.length;
		while(_g < _g1) {
			var i = _g++;
			arr[i] *= val;
		}
		var _g = 0;
		var _g1 = py;
		while(_g < _g1) {
			var i2 = _g++;
			arr.push(0);
		}
		arr.reverse();
		return arr;
	}
	,add: function(val) {
		if(val.charAt(0) == "-") {
			val = HxOverrides.substr(val,1,null);
			return this.sub(val);
		}
		if(!this.isPositive) {
			this.isPositive = true;
			var big = this.sub(val);
			this.isPositive = !this.isPositive;
			return big;
		}
		var _values2 = zygame_utils_MathUtils.value(val);
		_values2.reverse();
		this._values.reverse();
		var _g = 0;
		var _g1 = _values2.length;
		while(_g < _g1) {
			var i = _g++;
			if(this._values.length <= i) {
				this._values[i] = _values2[i];
			} else {
				this.add2(i,_values2[i]);
			}
		}
		this._values.reverse();
		this._valStr = this._values.join("");
		return this;
	}
	,add2: function(index,value) {
		if(this._values.length == index) {
			this._values[index] = value;
		} else {
			this._values[index] += value;
			if(this._values[index] >= 10) {
				this._values[index] -= 10;
				this.add2(index + 1,1);
			}
		}
	}
	,sub: function(val) {
		if(val.charAt(0) == "-") {
			val = HxOverrides.substr(val,1,null);
			return this.add(val);
		}
		var value2 = new zygame_utils_BigInteger(val);
		var _values2 = value2.getValues();
		if(this.isPositive && this.cheak("<",value2)) {
			var _values3 = this._values;
			this._values = _values2;
			_values2 = _values3;
			this.isPositive = false;
		} else if(!this.isPositive) {
			this.isPositive = true;
			var big = this.add(val);
			this.isPositive = false;
			return big;
		}
		_values2.reverse();
		this._values.reverse();
		var _g = 0;
		var _g1 = _values2.length;
		while(_g < _g1) {
			var i = _g++;
			if(this._values.length <= i) {
				this._values[i] = _values2[i];
			} else {
				this.sub2(this._values,i,_values2[i]);
			}
		}
		this._values.reverse();
		this.clearZero();
		this._valStr = this._values.join("");
		return this;
	}
	,sub2: function(values,index,value) {
		values[index] -= value;
		if(values[index] < 0) {
			values[index] += 10;
			this.sub2(values,index + 1,1);
		}
	}
	,clearZero: function() {
		if(this._values.length == 0) {
			return;
		}
		while(true) if(this._values[0] == 0) {
			this._values.shift();
		} else {
			break;
		}
	}
	,getValues: function() {
		return this._values;
	}
	,cheak: function(type,big) {
		switch(type) {
		case "<":
			return !this.cheak(">",big);
		case "<=":
			if(!this.cheak("==",big)) {
				return !this.cheak(">=",big);
			} else {
				return true;
			}
			break;
		case "==":
			if(this.get_value().length != big.get_value().length) {
				return false;
			} else if(this.isPositive && big.isPositive || !this.isPositive && !big.isPositive) {
				var _g = 0;
				var _g1 = this._values.length;
				while(_g < _g1) {
					var i = _g++;
					if(this._values[i] != big.getValues()[i]) {
						return false;
					}
				}
				return true;
			} else {
				return false;
			}
			break;
		case ">":
			if(this.isPositive && !big.isPositive) {
				return true;
			} else if(!this.isPositive && big.isPositive) {
				return false;
			} else if(this.isPositive && big.isPositive) {
				if(this.get_value().length > big.get_value().length) {
					return true;
				} else if(this.get_value().length == big.get_value().length) {
					var _g = 0;
					var _g1 = this._values.length;
					while(_g < _g1) {
						var i = _g++;
						if(this._values[i] > big.getValues()[i]) {
							return true;
						} else if(this._values[i] < big.getValues()[i]) {
							return false;
						}
					}
					return false;
				}
			} else if(!this.isPositive && !big.isPositive) {
				if(this.get_value().length < big.get_value().length) {
					return true;
				} else if(this.get_value().length == big.get_value().length) {
					var _g = 0;
					var _g1 = this._values.length;
					while(_g < _g1) {
						var i = _g++;
						if(this._values[i] < big.getValues()[i]) {
							return true;
						}
					}
					return false;
				}
			}
			break;
		case ">=":
			if(!this.cheak("==",big)) {
				return this.cheak(">",big);
			} else {
				return true;
			}
			break;
		}
		return false;
	}
	,__class__: zygame_utils_BigInteger
	,__properties__: {set_value:"set_value",get_value:"get_value"}
};
var zygame_utils_UnitConversion = function(unit,digits) {
	this._digits = 0;
	this._unit = unit;
	this._digits = digits;
};
$hxClasses["zygame.utils.UnitConversion"] = zygame_utils_UnitConversion;
zygame_utils_UnitConversion.__name__ = "zygame.utils.UnitConversion";
zygame_utils_UnitConversion.prototype = {
	_unit: null
	,_digits: null
	,toNumber: function(big,retain,minMath) {
		if(minMath == null) {
			minMath = 2;
		}
		if(retain == null) {
			retain = 0;
		}
		var values = big.getValues().slice();
		if(values.length <= retain) {
			return big.get_value();
		}
		if(values.length < this._digits) {
			return big.get_value();
		}
		var len = values.length / this._digits | 0;
		if(len == values.length / this._digits) {
			--len;
		}
		var str = values.slice(0,values.length - this._digits * len).join("");
		if(str.length + minMath <= values.length) {
			str += "." + values.slice(str.length,str.length + minMath).join("");
		}
		return str + this._unit[len - 1];
	}
	,__class__: zygame_utils_UnitConversion
};
var zygame_utils_MathUtils = function() { };
$hxClasses["zygame.utils.MathUtils"] = zygame_utils_MathUtils;
zygame_utils_MathUtils.__name__ = "zygame.utils.MathUtils";
zygame_utils_MathUtils.value = function(val) {
	var _values = [];
	var len = val.length;
	var _g = 0;
	var _g1 = len;
	while(_g < _g1) {
		var i = _g++;
		var v = val.charAt(i);
		_values.push(Std.parseInt(v));
	}
	return _values;
};
var zygame_utils_DisplayObjectUtils = function() { };
$hxClasses["zygame.utils.DisplayObjectUtils"] = zygame_utils_DisplayObjectUtils;
zygame_utils_DisplayObjectUtils.__name__ = "zygame.utils.DisplayObjectUtils";
zygame_utils_DisplayObjectUtils.setDisplayObject = function(display,data,sceneData) {
	var fieldKeys = Reflect.fields(data);
	var _g = 0;
	var _g1 = fieldKeys.length;
	while(_g < _g1) {
		var i = _g++;
		var key = fieldKeys[i];
		if(key == "width" || key == "height") {
			continue;
		}
		var value = Reflect.getProperty(data,key);
		if(key.indexOf("()") != -1) {
			var strData = value;
			var func = HxOverrides.substr(key,0,key.lastIndexOf("()"));
			var array = strData.split(",");
			var call = Reflect.field(display,func);
			var _g2 = 0;
			var _g3 = array.length;
			while(_g2 < _g3) {
				var i1 = _g2++;
				array[i1] = zygame_utils_DisplayObjectUtils.getValue(array[i1],sceneData);
			}
			call.apply(display,array);
		} else {
			value = zygame_utils_DisplayObjectUtils.getValue(value,sceneData);
			if(value != null) {
				Reflect.setProperty(display,key,value);
			}
		}
	}
};
zygame_utils_DisplayObjectUtils.getValue = function(value,sceneData) {
	if(typeof(value) == "string") {
		var curData = value;
		if(curData.indexOf("0x") == 0) {
			value = Std.parseInt(curData);
		} else if(curData.indexOf("image:") == 0) {
			curData = HxOverrides.substr(curData,6,null);
			value = sceneData.getBitmapData(curData);
		} else if(curData.indexOf("bool:") == 0) {
			value = curData == "bool:ture";
		} else if(curData.indexOf("int:") == 0) {
			curData = HxOverrides.substr(curData,4,null);
			value = Std.parseInt(curData);
		} else if(curData.indexOf("spineSpriteData:") == 0) {
			curData = HxOverrides.substr(curData,16,null);
			value = sceneData.getSpineSpriteData(curData);
		}
	}
	return value;
};
zygame_utils_DisplayObjectUtils.createChildren = function(array,parent,sceneData) {
	var _g = 0;
	var _g1 = array.length;
	while(_g < _g1) {
		var i = _g++;
		var data = array[i];
		var array1 = [];
		if(data.construct != null && data.construct.length > 0) {
			array1 = data.construct;
			var _g2 = 0;
			var _g3 = array1.length;
			while(_g2 < _g3) {
				var i1 = _g2++;
				array1[i1] = zygame_utils_DisplayObjectUtils.getValue(array1[i1],sceneData);
			}
		}
		var name = data.property.bindType;
		var pClass = $hxClasses[name];
		if(pClass == null) {
			var name1 = data.type;
			pClass = $hxClasses[name1];
		}
		var display = Type.createInstance(pClass,array1);
		display.set_name(data.name);
		parent.addChild(display);
		zygame_utils_DisplayObjectUtils.setDisplayObject(display,data.property,sceneData);
		zygame_utils_DisplayObjectUtils.setDisplayObject(display,data.data,sceneData);
		if(data.children != null && ((display) instanceof openfl_display_DisplayObjectContainer)) {
			zygame_utils_DisplayObjectUtils.createChildren(data.children,display,sceneData);
		}
	}
};
var zygame_utils_FPSDebug = function(inX,inY,inCol) {
	if(inCol == null) {
		inCol = 16777215;
	}
	if(inY == null) {
		inY = 0.0;
	}
	if(inX == null) {
		inX = 0.0;
	}
	this._curDrawCall = 0;
	this._qqfps = 0;
	this.memPeak = 0;
	var _gthis = this;
	openfl_display_Sprite.call(this);
	this.times = [];
	openfl_display_BitmapData.loadFromBase64(zygame_utils_FPSAssets.assets,"image/png").onComplete(function(bitmapData) {
		var fnt = new zygame_utils_load_FntData(bitmapData,Xml.parse(zygame_utils_FPSAssets.fnt),null);
		_gthis._text = new zygame_components_ZBitmapLabel(fnt);
		_gthis._text.set_x(inX);
		_gthis.set_y(inY);
		_gthis._text.set_width(1000);
		_gthis._text.set_height(24);
		_gthis.get_graphics().beginFill(0,0.5);
		_gthis.get_graphics().drawRect(inX,inY,_gthis._text.get_width() * 2,_gthis._text.get_height());
		_gthis.addChild(_gthis._text);
		_gthis.mouseEnabled = false;
		_gthis._text.mouseEnabled = false;
		_gthis.addEventListener("enterFrame",$bind(_gthis,_gthis.onEnter));
	}).onError(function(err) {
	});
	this.set_y(150);
};
$hxClasses["zygame.utils.FPSDebug"] = zygame_utils_FPSDebug;
zygame_utils_FPSDebug.__name__ = "zygame.utils.FPSDebug";
zygame_utils_FPSDebug.__super__ = openfl_display_Sprite;
zygame_utils_FPSDebug.prototype = $extend(openfl_display_Sprite.prototype,{
	times: null
	,memPeak: null
	,_text: null
	,_qqfps: null
	,_curDrawCall: null
	,onEnter: function(_) {
		this._qqfps--;
		var now = new Date().getTime() / 1000;
		this.times.push(now);
		while(this.times[0] < now - 1) this.times.shift();
		var mem = Math.round(openfl_system_System.get_totalMemory() / 1024 / 1024 * 100) / 100;
		if(mem > this.memPeak) {
			this.memPeak = mem;
		}
		if(this.get_visible()) {
			if(openfl__$internal_renderer_context3D_stats_Context3DStats.totalDrawCalls() != 0) {
				this._curDrawCall = openfl__$internal_renderer_context3D_stats_Context3DStats.totalDrawCalls();
			}
			this._text.set_dataProvider("MODE:" + zygame_utils_Lib.getRenderMode() + "_MEM:" + mem + "MB_MaxMEN:" + this.memPeak + "MB_UPDATES:" + zygame_core_Start.current.getUpdateLength() + "_SUPDATES:" + zygame_utils_SpineManager.count() + "_FPS:" + this.getFps() + "_DrawCalls:" + (this._curDrawCall - 2) + "_Texture:" + zygame_core_Start.TEXTURE_COUNT);
		}
	}
	,getFps: function() {
		return this.times.length - 1;
	}
	,__class__: zygame_utils_FPSDebug
});
var zygame_utils_FPSAssets = function() { };
$hxClasses["zygame.utils.FPSAssets"] = zygame_utils_FPSAssets;
zygame_utils_FPSAssets.__name__ = "zygame.utils.FPSAssets";
var zygame_utils_FPSUtil = function(fps) {
	this._pause = false;
	this.set_fps(fps);
};
$hxClasses["zygame.utils.FPSUtil"] = zygame_utils_FPSUtil;
zygame_utils_FPSUtil.__name__ = "zygame.utils.FPSUtil";
zygame_utils_FPSUtil.prototype = {
	_fps: null
	,_fpsTime: null
	,_currentTime: null
	,_lastFrameTimestamp: null
	,_pause: null
	,get_fps: function() {
		return this._fps;
	}
	,set_fps: function(value) {
		this._fps = value;
		this._fpsTime = 1000 / this._fps * 0.001;
		this._currentTime = 0;
		this._lastFrameTimestamp = Math.round(new Date().getTime() / 1000 * 1000) / 1000;
		return value;
	}
	,update: function() {
		if(this._pause) {
			return false;
		}
		var now = Math.round(new Date().getTime() / 1000 * 1000) / 1000.0;
		var passedTime = now - this._lastFrameTimestamp;
		this._lastFrameTimestamp = now;
		this._currentTime += passedTime;
		if(this._currentTime >= this._fpsTime) {
			this._currentTime -= this._fpsTime;
			if(this._currentTime > this._fpsTime) {
				this._currentTime = 0;
			}
			return true;
		}
		return false;
	}
	,pause: function() {
		this._pause = true;
	}
	,resume: function() {
		this._pause = false;
	}
	,__class__: zygame_utils_FPSUtil
	,__properties__: {set_fps:"set_fps",get_fps:"get_fps"}
};
var zygame_utils_FileUtils = function() { };
$hxClasses["zygame.utils.FileUtils"] = zygame_utils_FileUtils;
zygame_utils_FileUtils.__name__ = "zygame.utils.FileUtils";
zygame_utils_FileUtils.browseDirectory = function(title,call) {
	var dialog = new lime_ui_FileDialog();
	dialog.onSelect.add(function(path) {
		if(call != null) {
			call(path);
		}
	});
	dialog.browse(lime_ui_FileDialogType.OPEN_DIRECTORY,null,null,title);
};
zygame_utils_FileUtils.exists = function(path) {
	return false;
};
var zygame_utils_FrameEngine = function() {
};
$hxClasses["zygame.utils.FrameEngine"] = zygame_utils_FrameEngine;
zygame_utils_FrameEngine.__name__ = "zygame.utils.FrameEngine";
zygame_utils_FrameEngine.__interfaces__ = [zygame_core_Refresher];
zygame_utils_FrameEngine.create = function(cb) {
	var engine = new zygame_utils_FrameEngine();
	engine.onFrameEvent = cb;
	engine.start();
	return engine;
};
zygame_utils_FrameEngine.prototype = {
	onFrame: function() {
		this.onFrameEvent(this);
	}
	,onFrameEvent: function(event) {
	}
	,start: function() {
		zygame_core_Start.current.addToUpdate(this);
	}
	,stop: function() {
		zygame_core_Start.current.removeToUpdate(this);
	}
	,__class__: zygame_utils_FrameEngine
};
var zygame_utils_LanguageUtils = function() { };
$hxClasses["zygame.utils.LanguageUtils"] = zygame_utils_LanguageUtils;
zygame_utils_LanguageUtils.__name__ = "zygame.utils.LanguageUtils";
zygame_utils_LanguageUtils.setLanguage = function(tag) {
	zygame_utils_LanguageUtils.currentLanguage = tag;
};
zygame_utils_LanguageUtils.bindLanguage = function(tag,data) {
	zygame_utils_LanguageUtils.languages.h[tag] = data;
};
zygame_utils_LanguageUtils.getText = function(id) {
	var data = zygame_utils_LanguageUtils.languages.h[zygame_utils_LanguageUtils.currentLanguage];
	if(data == null) {
		return id;
	}
	var key = HxOverrides.substr(id,1,null);
	var language = Reflect.getProperty(data,key);
	if(language != null) {
		return language;
	} else {
		return key;
	}
};
var zygame_utils_Lib = function() { };
$hxClasses["zygame.utils.Lib"] = zygame_utils_Lib;
zygame_utils_Lib.__name__ = "zygame.utils.Lib";
zygame_utils_Lib.getRenderMode = function() {
	return zygame_core_Start.current.stage.window.context.type;
};
zygame_utils_Lib.setData = function(key,data) {
	if(zygame_utils_Lib.sharedObject == null) {
		zygame_utils_Lib.sharedObject = openfl_net_SharedObject.getLocal(zygame_utils_Lib.saveName);
	}
	if(typeof(data) == "number" && ((data | 0) === data) || typeof(data) == "number") {
		data = "CE#" + haxe_crypto_Base64.encode(haxe_io_Bytes.ofString(Std.string(data)));
	}
	zygame_utils_Lib.sharedObject.data[key] = data;
	zygame_utils_Lib.sharedObject.flush();
};
zygame_utils_Lib.getSharedObject = function() {
	if(zygame_utils_Lib.sharedObject == null) {
		zygame_utils_Lib.sharedObject = openfl_net_SharedObject.getLocal(zygame_utils_Lib.saveName);
	}
	return zygame_utils_Lib.sharedObject;
};
zygame_utils_Lib.getData = function(key,defulatData) {
	if(zygame_utils_Lib.sharedObject == null) {
		zygame_utils_Lib.sharedObject = openfl_net_SharedObject.getLocal(zygame_utils_Lib.saveName);
	}
	var value = Reflect.field(zygame_utils_Lib.sharedObject.data,key);
	if(value == null) {
		return defulatData;
	}
	if(typeof(value) == "string" && (js_Boot.__cast(value , String)).indexOf("CE#") != -1) {
		value = StringTools.replace(value,"CE#","");
		var bytes = haxe_crypto_Base64.decode(value);
		value = parseFloat(bytes.getString(0,bytes.length));
	}
	return value;
};
zygame_utils_Lib.onFrame = function() {
	var runtime = haxe_ds_StringMap.valueIterator(zygame_utils_Lib._timeRuntimes.h);
	while(runtime.hasNext()) {
		var runtime1 = runtime.next();
		runtime1.onFrame();
	}
};
zygame_utils_Lib.onResume = function() {
	var runtime = haxe_ds_StringMap.valueIterator(zygame_utils_Lib._timeRuntimes.h);
	while(runtime.hasNext()) {
		var runtime1 = runtime.next();
		runtime1.onResume();
	}
};
zygame_utils_Lib.getTimeRuntime = function(tag) {
	if(tag == null) {
		tag = "defalut";
	}
	var runtime = zygame_utils_Lib._timeRuntimes.h[tag];
	if(runtime == null) {
		runtime = new zygame_utils_TimeRuntime();
		zygame_utils_Lib._timeRuntimes.h[tag] = runtime;
	}
	return runtime;
};
zygame_utils_Lib.clearAllTimeRuntime = function() {
	var runtime = haxe_ds_StringMap.valueIterator(zygame_utils_Lib._timeRuntimes.h);
	while(runtime.hasNext()) {
		var runtime1 = runtime.next();
		runtime1.clear();
	}
};
zygame_utils_Lib.clearTimeRuntime = function(tag) {
	if(tag == null) {
		tag = "defalut";
	}
	zygame_utils_Lib.getTimeRuntime(tag).clear();
};
zygame_utils_Lib.nextFrameCall = function(closure,args,runtimeTag) {
	if(runtimeTag == null) {
		runtimeTag = "defalut";
	}
	return zygame_utils_Lib.getTimeRuntime(runtimeTag).setTimeout(closure,0,args);
};
zygame_utils_Lib.setTimeout = function(closure,delay,args,runtimeTag) {
	if(runtimeTag == null) {
		runtimeTag = "defalut";
	}
	return zygame_utils_Lib.getTimeRuntime(runtimeTag).setTimeout(closure,delay,args);
};
zygame_utils_Lib.clearTimeout = function(id,runtimeTag) {
	if(runtimeTag == null) {
		runtimeTag = "defalut";
	}
	zygame_utils_Lib.getTimeRuntime(runtimeTag).clearTimeout(id);
};
zygame_utils_Lib.setInterval = function(closure,delay,args,runtimeTag) {
	if(runtimeTag == null) {
		runtimeTag = "defalut";
	}
	if(delay == null) {
		delay = 0;
	}
	return zygame_utils_Lib.getTimeRuntime(runtimeTag).setInterval(closure,delay,args);
};
zygame_utils_Lib.resetInterval = function(id,runtimeTag) {
	if(runtimeTag == null) {
		runtimeTag = "defalut";
	}
	zygame_utils_Lib.getTimeRuntime(runtimeTag).resetInterval(id);
};
zygame_utils_Lib.clearInterval = function(id,runtimeTag) {
	if(runtimeTag == null) {
		runtimeTag = "defalut";
	}
	zygame_utils_Lib.getTimeRuntime(runtimeTag).clearInterval(id);
};
zygame_utils_Lib.resumeCall = function(closure,args,runtimeTag) {
	if(runtimeTag == null) {
		runtimeTag = "defalut";
	}
	return zygame_utils_Lib.getTimeRuntime(runtimeTag).resumeCall(closure,args);
};
zygame_utils_Lib.cssRectangle = function(bitmapData,css) {
	var width = 0;
	var height = 0;
	if(((bitmapData) instanceof openfl_display_BitmapData)) {
		width = (js_Boot.__cast(bitmapData , openfl_display_BitmapData)).width;
		height = (js_Boot.__cast(bitmapData , openfl_display_BitmapData)).height;
	} else if(((bitmapData) instanceof zygame_utils_load_Frame)) {
		width = (js_Boot.__cast(bitmapData , zygame_utils_load_Frame)).width;
		height = (js_Boot.__cast(bitmapData , zygame_utils_load_Frame)).height;
	}
	if(width == 0 || height == 0) {
		return null;
	}
	var arr = css.split(" ");
	return new openfl_geom_Rectangle(parseFloat(arr[3]),parseFloat(arr[0]),width - parseFloat(arr[1]) - parseFloat(arr[3]),height - parseFloat(arr[0]) - parseFloat(arr[2]));
};
zygame_utils_Lib.getChannel = function() {
	var channel = null;
	if(channel == null) {
		channel = "default";
	}
	return channel;
};
zygame_utils_Lib.isPc = function() {
	var userAgent = $global.navigator.userAgent;
	var Agents = ["Android","iPhone","SymbianOS","Windows Phone","iPad","iPod"];
	var _g = 0;
	while(_g < Agents.length) {
		var tag = Agents[_g];
		++_g;
		if(userAgent.indexOf(tag) != -1) {
			return false;
		}
	}
	return true;
};
zygame_utils_Lib.getUUID = function() {
	if(zygame_utils_Lib.sharedObject == null) {
		zygame_utils_Lib.sharedObject = openfl_net_SharedObject.getLocal("zygame-lib");
	}
	var uuid = zygame_utils_Lib.sharedObject.data.uuid;
	if(uuid != null) {
		return uuid.toUpperCase();
	}
	var time = Std.string(new Date().getTime());
	var random = "qwertyuioplkjhgfdsazxcvbnm";
	var format = "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx";
	var len = format.length;
	var path = "";
	var _g = 0;
	var _g1 = len;
	while(_g < _g1) {
		var i = _g++;
		path += format.charAt(i) == "x" ? random.charAt(Std.random(random.length)) : "-";
	}
	path = "guest_" + haxe_crypto_Md5.encode(path);
	zygame_utils_Lib.sharedObject.data.uuid = path;
	zygame_utils_Lib.sharedObject.flush();
	return path.toUpperCase();
};
zygame_utils_Lib.getVersion = function() {
	return Std.string(window.GAME_VERSION == null ? "1001" : window.GAME_VERSION);
};
zygame_utils_Lib.angleToRadian = function(angle) {
	return angle * (Math.PI / 180);
};
zygame_utils_Lib.radianToAngle = function(radian) {
	return radian * (180 / Math.PI);
};
zygame_utils_Lib.int = function(num) {
	return num | 0;
};
var zygame_utils_Log = function() { };
$hxClasses["zygame.utils.Log"] = zygame_utils_Log;
zygame_utils_Log.__name__ = "zygame.utils.Log";
zygame_utils_Log.clear = function() {
};
zygame_utils_Log.log = function(str) {
};
var zygame_utils_MaxRectsBinPack = function(width,height,rotations) {
	if(rotations == null) {
		rotations = true;
	}
	this.score2 = 0;
	this.score1 = 0;
	this.allowRotations = false;
	this.binHeight = 0;
	this.binWidth = 0;
	this.init(width,height,rotations);
};
$hxClasses["zygame.utils.MaxRectsBinPack"] = zygame_utils_MaxRectsBinPack;
zygame_utils_MaxRectsBinPack.__name__ = "zygame.utils.MaxRectsBinPack";
zygame_utils_MaxRectsBinPack.prototype = {
	binWidth: null
	,binHeight: null
	,allowRotations: null
	,usedRectangles: null
	,freeRectangles: null
	,score1: null
	,score2: null
	,bestShortSideFit: null
	,bestLongSideFit: null
	,init: function(width,height,rotations) {
		if(rotations == null) {
			rotations = true;
		}
		this.usedRectangles = [];
		this.freeRectangles = [];
		if(this.count(width) % 1 != 0 || this.count(height) % 1 != 0) {
			throw haxe_Exception.thrown(new openfl_errors_Error("Must be 2,4,8,16,32,...512,1024,..."));
		}
		this.binWidth = width;
		this.binHeight = height;
		this.allowRotations = rotations;
		var n = new openfl_geom_Rectangle();
		n.x = 0;
		n.y = 0;
		n.width = width;
		n.height = height;
		this.freeRectangles.push(n);
	}
	,count: function(n) {
		if(n >= 2) {
			return this.count(n / 2);
		}
		return n;
	}
	,insert: function(width,height,method) {
		var newNode = new openfl_geom_Rectangle();
		this.score1 = 0;
		this.score2 = 0;
		switch(method._hx_index) {
		case 0:
			newNode = this.findPositionForNewNodeBestShortSideFit(width,height);
			break;
		case 1:
			newNode = this.findPositionForNewNodeBestLongSideFit(width,height,this.score2,this.score1);
			break;
		case 2:
			newNode = this.findPositionForNewNodeBestAreaFit(width,height,this.score1,this.score2);
			break;
		case 3:
			newNode = this.findPositionForNewNodeBottomLeft(width,height,this.score1,this.score2);
			break;
		case 4:
			newNode = this.findPositionForNewNodeContactPoint(width,height,this.score1);
			break;
		}
		if(newNode.height == 0) {
			return newNode;
		}
		this.placeRectangle(newNode);
		return newNode;
	}
	,insert2: function(Rectangles,dst,method) {
		dst.splice(0,dst.length);
		while(Rectangles.length > 0) {
			var bestScore1 = zygame_utils_MaxRectsBinPack.MAX_VALUE;
			var bestScore2 = zygame_utils_MaxRectsBinPack.MAX_VALUE;
			var bestRectangleIndex = -1;
			var bestNode = new openfl_geom_Rectangle();
			var _g = 0;
			var _g1 = Rectangles.length;
			while(_g < _g1) {
				var i = _g++;
				var score1 = 0;
				var score2 = 0;
				var newNode = this.scoreRectangle(Rectangles[i].width | 0,Rectangles[i].height | 0,method,score1,score2);
				if(score1 < bestScore1 || score1 == bestScore1 && score2 < bestScore2) {
					bestScore1 = score1;
					bestScore2 = score2;
					bestNode = newNode;
					bestRectangleIndex = i;
				}
			}
			if(bestRectangleIndex == -1) {
				return;
			}
			this.placeRectangle(bestNode);
			Rectangles.splice(bestRectangleIndex,1);
		}
	}
	,placeRectangle: function(node) {
		var numRectanglesToProcess = this.freeRectangles.length;
		var i = 0;
		while(i < numRectanglesToProcess) {
			if(this.splitFreeNode(this.freeRectangles[i],node)) {
				this.freeRectangles.splice(i,1);
				--i;
				--numRectanglesToProcess;
			}
			++i;
		}
		this.pruneFreeList();
		this.usedRectangles.push(node);
	}
	,scoreRectangle: function(width,height,method,score1,score2) {
		var newNode = new openfl_geom_Rectangle();
		score1 = zygame_utils_MaxRectsBinPack.MAX_VALUE;
		score2 = zygame_utils_MaxRectsBinPack.MAX_VALUE;
		switch(method._hx_index) {
		case 0:
			newNode = this.findPositionForNewNodeBestShortSideFit(width,height);
			break;
		case 1:
			newNode = this.findPositionForNewNodeBestLongSideFit(width,height,score2,score1);
			break;
		case 2:
			newNode = this.findPositionForNewNodeBestAreaFit(width,height,score1,score2);
			break;
		case 3:
			newNode = this.findPositionForNewNodeBottomLeft(width,height,score1,score2);
			break;
		case 4:
			newNode = this.findPositionForNewNodeContactPoint(width,height,score1);
			score1 = -score1;
			break;
		}
		if(newNode.height == 0) {
			score1 = zygame_utils_MaxRectsBinPack.MAX_VALUE;
			score2 = zygame_utils_MaxRectsBinPack.MAX_VALUE;
		}
		return newNode;
	}
	,occupancy: function() {
		var usedSurfaceArea = 0;
		var _g = 0;
		var _g1 = this.usedRectangles.length;
		while(_g < _g1) {
			var i = _g++;
			usedSurfaceArea += this.usedRectangles[i].width * this.usedRectangles[i].height;
		}
		return usedSurfaceArea / (this.binWidth * this.binHeight);
	}
	,findPositionForNewNodeBottomLeft: function(width,height,bestY,bestX) {
		var bestNode = new openfl_geom_Rectangle();
		bestY = zygame_utils_MaxRectsBinPack.MAX_VALUE;
		var rect;
		var topSideY;
		var _g = 0;
		var _g1 = this.freeRectangles.length;
		while(_g < _g1) {
			var i = _g++;
			rect = this.freeRectangles[i];
			if(rect.width >= width && rect.height >= height) {
				topSideY = (rect.y | 0) + height;
				if(topSideY < bestY || topSideY == bestY && rect.x < bestX) {
					bestNode.x = rect.x;
					bestNode.y = rect.y;
					bestNode.width = width;
					bestNode.height = height;
					bestY = topSideY;
					bestX = rect.x | 0;
				}
			}
			if(this.allowRotations && rect.width >= height && rect.height >= width) {
				topSideY = (rect.y | 0) + width;
				if(topSideY < bestY || topSideY == bestY && rect.x < bestX) {
					bestNode.x = rect.x;
					bestNode.y = rect.y;
					bestNode.width = height;
					bestNode.height = width;
					bestY = topSideY;
					bestX = rect.x | 0;
				}
			}
		}
		return bestNode;
	}
	,findPositionForNewNodeBestShortSideFit: function(width,height) {
		var bestNode = new openfl_geom_Rectangle();
		this.bestShortSideFit = zygame_utils_MaxRectsBinPack.MAX_VALUE;
		this.bestLongSideFit = this.score2;
		var rect;
		var leftoverHoriz;
		var leftoverVert;
		var shortSideFit;
		var longSideFit;
		var _g = 0;
		var _g1 = this.freeRectangles.length;
		while(_g < _g1) {
			var i = _g++;
			rect = this.freeRectangles[i];
			if(rect.width >= width && rect.height >= height) {
				leftoverHoriz = Math.abs(rect.width - width) | 0;
				leftoverVert = Math.abs(rect.height - height) | 0;
				shortSideFit = Math.min(leftoverHoriz,leftoverVert) | 0;
				longSideFit = Math.max(leftoverHoriz,leftoverVert) | 0;
				if(shortSideFit < this.bestShortSideFit || shortSideFit == this.bestShortSideFit && longSideFit < this.bestLongSideFit) {
					bestNode.x = rect.x;
					bestNode.y = rect.y;
					bestNode.width = width;
					bestNode.height = height;
					this.bestShortSideFit = shortSideFit;
					this.bestLongSideFit = longSideFit;
				}
			}
			var flippedLeftoverHoriz;
			var flippedLeftoverVert;
			var flippedShortSideFit;
			var flippedLongSideFit;
			if(this.allowRotations && rect.width >= height && rect.height >= width) {
				var flippedLeftoverHoriz1 = Math.abs(rect.width - height) | 0;
				var flippedLeftoverVert1 = Math.abs(rect.height - width) | 0;
				var flippedShortSideFit1 = Math.min(flippedLeftoverHoriz1,flippedLeftoverVert1) | 0;
				var flippedLongSideFit1 = Math.max(flippedLeftoverHoriz1,flippedLeftoverVert1) | 0;
				if(flippedShortSideFit1 < this.bestShortSideFit || flippedShortSideFit1 == this.bestShortSideFit && flippedLongSideFit1 < this.bestLongSideFit) {
					bestNode.x = rect.x;
					bestNode.y = rect.y;
					bestNode.width = height;
					bestNode.height = width;
					this.bestShortSideFit = flippedShortSideFit1;
					this.bestLongSideFit = flippedLongSideFit1;
				}
			}
		}
		return bestNode;
	}
	,findPositionForNewNodeBestLongSideFit: function(width,height,bestShortSideFit,bestLongSideFit) {
		var bestNode = new openfl_geom_Rectangle();
		bestLongSideFit = zygame_utils_MaxRectsBinPack.MAX_VALUE;
		var rect;
		var leftoverHoriz;
		var leftoverVert;
		var shortSideFit;
		var longSideFit;
		var _g = 0;
		var _g1 = this.freeRectangles.length;
		while(_g < _g1) {
			var i = _g++;
			rect = this.freeRectangles[i];
			if(rect.width >= width && rect.height >= height) {
				leftoverHoriz = Math.abs(rect.width - width) | 0;
				leftoverVert = Math.abs(rect.height - height) | 0;
				shortSideFit = Math.min(leftoverHoriz,leftoverVert) | 0;
				longSideFit = Math.max(leftoverHoriz,leftoverVert) | 0;
				if(longSideFit < bestLongSideFit || longSideFit == bestLongSideFit && shortSideFit < bestShortSideFit) {
					bestNode.x = rect.x;
					bestNode.y = rect.y;
					bestNode.width = width;
					bestNode.height = height;
					bestShortSideFit = shortSideFit;
					bestLongSideFit = longSideFit;
				}
			}
			if(this.allowRotations && rect.width >= height && rect.height >= width) {
				leftoverHoriz = Math.abs(rect.width - height) | 0;
				leftoverVert = Math.abs(rect.height - width) | 0;
				shortSideFit = Math.min(leftoverHoriz,leftoverVert) | 0;
				longSideFit = Math.max(leftoverHoriz,leftoverVert) | 0;
				if(longSideFit < bestLongSideFit || longSideFit == bestLongSideFit && shortSideFit < bestShortSideFit) {
					bestNode.x = rect.x;
					bestNode.y = rect.y;
					bestNode.width = height;
					bestNode.height = width;
					bestShortSideFit = shortSideFit;
					bestLongSideFit = longSideFit;
				}
			}
		}
		return bestNode;
	}
	,findPositionForNewNodeBestAreaFit: function(width,height,bestAreaFit,bestShortSideFit) {
		var bestNode = new openfl_geom_Rectangle();
		bestAreaFit = zygame_utils_MaxRectsBinPack.MAX_VALUE;
		var rect;
		var leftoverHoriz;
		var leftoverVert;
		var shortSideFit;
		var areaFit;
		var _g = 0;
		var _g1 = this.freeRectangles.length;
		while(_g < _g1) {
			var i = _g++;
			rect = this.freeRectangles[i];
			areaFit = (rect.width * rect.height | 0) - width * height;
			if(rect.width >= width && rect.height >= height) {
				leftoverHoriz = Math.abs(rect.width - width) | 0;
				leftoverVert = Math.abs(rect.height - height) | 0;
				shortSideFit = Math.min(leftoverHoriz,leftoverVert) | 0;
				if(areaFit < bestAreaFit || areaFit == bestAreaFit && shortSideFit < bestShortSideFit) {
					bestNode.x = rect.x;
					bestNode.y = rect.y;
					bestNode.width = width;
					bestNode.height = height;
					bestShortSideFit = shortSideFit;
					bestAreaFit = areaFit;
				}
			}
			if(this.allowRotations && rect.width >= height && rect.height >= width) {
				leftoverHoriz = Math.abs(rect.width - height) | 0;
				leftoverVert = Math.abs(rect.height - width) | 0;
				shortSideFit = Math.min(leftoverHoriz,leftoverVert) | 0;
				if(areaFit < bestAreaFit || areaFit == bestAreaFit && shortSideFit < bestShortSideFit) {
					bestNode.x = rect.x;
					bestNode.y = rect.y;
					bestNode.width = height;
					bestNode.height = width;
					bestShortSideFit = shortSideFit;
					bestAreaFit = areaFit;
				}
			}
		}
		return bestNode;
	}
	,commonIntervalLength: function(i1start,i1end,i2start,i2end) {
		if(i1end < i2start || i2end < i1start) {
			return 0;
		}
		return Math.floor(Math.min(i1end,i2end) - Math.max(i1start,i2start));
	}
	,contactPointScoreNode: function(x,y,width,height) {
		var score = 0;
		if(x == 0 || x + width == this.binWidth) {
			score += height;
		}
		if(y == 0 || y + height == this.binHeight) {
			score += width;
		}
		var rect;
		var _g = 0;
		var _g1 = this.usedRectangles.length;
		while(_g < _g1) {
			var i = _g++;
			rect = this.usedRectangles[i];
			if(rect.x == x + width || rect.x + rect.width == x) {
				score += this.commonIntervalLength(rect.y | 0,rect.y + rect.height | 0,y,y + height);
			}
			if(rect.y == y + height || rect.y + rect.height == y) {
				score += this.commonIntervalLength(rect.x | 0,rect.x + rect.width | 0,x,x + width);
			}
		}
		return score;
	}
	,findPositionForNewNodeContactPoint: function(width,height,bestContactScore) {
		var bestNode = new openfl_geom_Rectangle();
		bestContactScore = -1;
		var rect;
		var score;
		var _g = 0;
		var _g1 = this.freeRectangles.length;
		while(_g < _g1) {
			var i = _g++;
			rect = this.freeRectangles[i];
			if(rect.width >= width && rect.height >= height) {
				score = this.contactPointScoreNode(rect.x | 0,rect.y | 0,width,height);
				if(score > bestContactScore) {
					bestNode.x = rect.x;
					bestNode.y = rect.y;
					bestNode.width = width;
					bestNode.height = height;
					bestContactScore = score;
				}
			}
			if(this.allowRotations && rect.width >= height && rect.height >= width) {
				score = this.contactPointScoreNode(rect.x | 0,rect.y | 0,height,width);
				if(score > bestContactScore) {
					bestNode.x = rect.x;
					bestNode.y = rect.y;
					bestNode.width = height;
					bestNode.height = width;
					bestContactScore = score;
				}
			}
		}
		return bestNode;
	}
	,splitFreeNode: function(freeNode,usedNode) {
		if(usedNode.x >= freeNode.x + freeNode.width || usedNode.x + usedNode.width <= freeNode.x || usedNode.y >= freeNode.y + freeNode.height || usedNode.y + usedNode.height <= freeNode.y) {
			return false;
		}
		var newNode;
		if(usedNode.x < freeNode.x + freeNode.width && usedNode.x + usedNode.width > freeNode.x) {
			if(usedNode.y > freeNode.y && usedNode.y < freeNode.y + freeNode.height) {
				newNode = freeNode.clone();
				newNode.height = usedNode.y - newNode.y;
				this.freeRectangles.push(newNode);
			}
			if(usedNode.y + usedNode.height < freeNode.y + freeNode.height) {
				newNode = freeNode.clone();
				newNode.y = usedNode.y + usedNode.height;
				newNode.height = freeNode.y + freeNode.height - (usedNode.y + usedNode.height);
				this.freeRectangles.push(newNode);
			}
		}
		if(usedNode.y < freeNode.y + freeNode.height && usedNode.y + usedNode.height > freeNode.y) {
			if(usedNode.x > freeNode.x && usedNode.x < freeNode.x + freeNode.width) {
				newNode = freeNode.clone();
				newNode.width = usedNode.x - newNode.x;
				this.freeRectangles.push(newNode);
			}
			if(usedNode.x + usedNode.width < freeNode.x + freeNode.width) {
				newNode = freeNode.clone();
				newNode.x = usedNode.x + usedNode.width;
				newNode.width = freeNode.x + freeNode.width - (usedNode.x + usedNode.width);
				this.freeRectangles.push(newNode);
			}
		}
		return true;
	}
	,pruneFreeList: function() {
		var _g = 0;
		var _g1 = this.freeRectangles.length;
		while(_g < _g1) {
			var i = _g++;
			var _g2 = i + 1;
			var _g3 = this.freeRectangles.length;
			while(_g2 < _g3) {
				var j = _g2++;
				if(this.isContainedIn(this.freeRectangles[i],this.freeRectangles[j])) {
					this.freeRectangles.splice(i,1);
					break;
				}
				if(this.isContainedIn(this.freeRectangles[j],this.freeRectangles[i])) {
					this.freeRectangles.splice(j,1);
				}
			}
		}
	}
	,isContainedIn: function(a,b) {
		if(a == null || b == null) {
			return false;
		}
		if(a.x >= b.x && a.y >= b.y && a.x + a.width <= b.x + b.width) {
			return a.y + a.height <= b.y + b.height;
		} else {
			return false;
		}
	}
	,__class__: zygame_utils_MaxRectsBinPack
};
var zygame_utils_FreeRectangleChoiceHeuristic = $hxEnums["zygame.utils.FreeRectangleChoiceHeuristic"] = { __ename__ : "zygame.utils.FreeRectangleChoiceHeuristic", __constructs__ : ["BestShortSideFit","BestLongSideFit","BestAreaFit","BottomLeftRule","ContactPointRule"]
	,BestShortSideFit: {_hx_index:0,__enum__:"zygame.utils.FreeRectangleChoiceHeuristic",toString:$estr}
	,BestLongSideFit: {_hx_index:1,__enum__:"zygame.utils.FreeRectangleChoiceHeuristic",toString:$estr}
	,BestAreaFit: {_hx_index:2,__enum__:"zygame.utils.FreeRectangleChoiceHeuristic",toString:$estr}
	,BottomLeftRule: {_hx_index:3,__enum__:"zygame.utils.FreeRectangleChoiceHeuristic",toString:$estr}
	,ContactPointRule: {_hx_index:4,__enum__:"zygame.utils.FreeRectangleChoiceHeuristic",toString:$estr}
};
var zygame_utils_Rect = function(x,y,width,height) {
	openfl_events_EventDispatcher.call(this);
	this.set_x(x);
	this.set_y(y);
	this.set_width(width);
	this.set_height(height);
};
$hxClasses["zygame.utils.Rect"] = zygame_utils_Rect;
zygame_utils_Rect.__name__ = "zygame.utils.Rect";
zygame_utils_Rect.__super__ = openfl_events_EventDispatcher;
zygame_utils_Rect.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	_x: null
	,_y: null
	,_width: null
	,_height: null
	,set_x: function(value) {
		this._x = value;
		this.dispatchEvent(new openfl_events_Event("change",false,false));
		return value;
	}
	,get_x: function() {
		return this._x;
	}
	,set_y: function(value) {
		this._y = value;
		this.dispatchEvent(new openfl_events_Event("change",false,false));
		return value;
	}
	,get_y: function() {
		return this._y;
	}
	,set_width: function(value) {
		this._width = value;
		this.dispatchEvent(new openfl_events_Event("change",false,false));
		return value;
	}
	,get_width: function() {
		return this._width;
	}
	,set_height: function(value) {
		this._height = value;
		this.dispatchEvent(new openfl_events_Event("change",false,false));
		return value;
	}
	,get_height: function() {
		return this._height;
	}
	,__class__: zygame_utils_Rect
	,__properties__: {set_height:"set_height",get_height:"get_height",set_width:"set_width",get_width:"get_width",set_y:"set_y",get_y:"get_y",set_x:"set_x",get_x:"get_x"}
});
var zygame_utils_Scale9Utils = function() { };
$hxClasses["zygame.utils.Scale9Utils"] = zygame_utils_Scale9Utils;
zygame_utils_Scale9Utils.__name__ = "zygame.utils.Scale9Utils";
zygame_utils_Scale9Utils.createScale9Rects = function(x,y,width,height,rect) {
	var rects = [];
	rects.push(new openfl_geom_Rectangle(x,y,rect.x,rect.y));
	rects.push(new openfl_geom_Rectangle(x + rect.x,y,rect.width,rect.y));
	rects.push(new openfl_geom_Rectangle(x + rect.width + rect.x,y,width - rect.x - rect.width,rect.y));
	rects.push(new openfl_geom_Rectangle(x,y + rect.y,rect.x,rect.height));
	rects.push(new openfl_geom_Rectangle(x + rect.x,y + rect.y,rect.width,rect.height));
	rects.push(new openfl_geom_Rectangle(x + rect.width + rect.x,y + rect.y,width - rect.x - rect.width,rect.height));
	rects.push(new openfl_geom_Rectangle(x,y + rect.y + rect.height,rect.x,height - rect.y - rect.height));
	rects.push(new openfl_geom_Rectangle(x + rect.x,y + rect.y + rect.height,rect.width,height - rect.y - rect.height));
	rects.push(new openfl_geom_Rectangle(x + rect.x + rect.width,y + rect.y + rect.height,width - rect.x - rect.width,height - rect.y - rect.height));
	return rects;
};
var zygame_utils_SoundUtils = function() { };
$hxClasses["zygame.utils.SoundUtils"] = zygame_utils_SoundUtils;
zygame_utils_SoundUtils.__name__ = "zygame.utils.SoundUtils";
zygame_utils_SoundUtils.setVolume = function(v) {
	zygame_utils_SoundUtils._curVolume = v;
};
zygame_utils_SoundUtils.muteMusic = function() {
	openfl_media_SoundMixer.set_soundTransform(new openfl_media_SoundTransform(0,0));
};
zygame_utils_SoundUtils.livenUpMusic = function() {
	openfl_media_SoundMixer.set_soundTransform(new openfl_media_SoundTransform(zygame_utils_SoundUtils._curVolume,0));
};
var zygame_utils_SpineManager = function() { };
$hxClasses["zygame.utils.SpineManager"] = zygame_utils_SpineManager;
zygame_utils_SpineManager.__name__ = "zygame.utils.SpineManager";
zygame_utils_SpineManager.init = function(pstage,isLockFrameFps) {
	if(isLockFrameFps == null) {
		isLockFrameFps = false;
	}
	if(zygame_utils_SpineManager.stage != null) {
		return;
	}
	zygame_utils_SpineManager.stage = pstage;
	zygame_utils_SpineManager._lastFpsTime = new Date().getTime();
	zygame_utils_SpineManager.stage.addEventListener("enterFrame",zygame_utils_SpineManager.onFrame);
};
zygame_utils_SpineManager.pause = function() {
	if(zygame_utils_SpineManager.stage == null) {
		return;
	}
	zygame_utils_SpineManager.stage.removeEventListener("enterFrame",zygame_utils_SpineManager.onFrame);
};
zygame_utils_SpineManager.resume = function() {
	if(zygame_utils_SpineManager.stage == null) {
		return;
	}
	if(!zygame_utils_SpineManager.isLockFrameFps) {
		zygame_utils_SpineManager._lastFpsTime = new Date().getTime();
	}
	zygame_utils_SpineManager.stage.addEventListener("enterFrame",zygame_utils_SpineManager.onFrame);
};
zygame_utils_SpineManager.onFrame = function(event) {
	if(!zygame_utils_SpineManager.enbed) {
		return;
	}
	if(!zygame_utils_SpineManager.isLockFrameFps) {
		zygame_utils_SpineManager._newFpsTime = new Date().getTime();
		var currentFpsTime = zygame_utils_SpineManager._newFpsTime - zygame_utils_SpineManager._lastFpsTime;
		currentFpsTime /= 1000;
		zygame_utils_SpineManager._lastFpsTime = zygame_utils_SpineManager._newFpsTime;
		var _g = 0;
		var _g1 = zygame_utils_SpineManager.spineOnFrames;
		while(_g < _g1.length) {
			var display = _g1[_g];
			++_g;
			display.onSpineUpdate(currentFpsTime);
		}
	} else {
		var _g = 0;
		var _g1 = zygame_utils_SpineManager.spineOnFrames;
		while(_g < _g1.length) {
			var display = _g1[_g];
			++_g;
			display.onSpineUpdate(1 / zygame_utils_SpineManager.stage.get_frameRate());
		}
	}
};
zygame_utils_SpineManager.addOnFrame = function(spine) {
	if(zygame_utils_SpineManager.spineOnFrames.indexOf(spine) == -1) {
		zygame_utils_SpineManager.spineOnFrames.push(spine);
	}
};
zygame_utils_SpineManager.removeOnFrame = function(spine) {
	HxOverrides.remove(zygame_utils_SpineManager.spineOnFrames,spine);
};
zygame_utils_SpineManager.count = function() {
	return zygame_utils_SpineManager.spineOnFrames.length;
};
var zygame_utils_StringUtils = function() { };
$hxClasses["zygame.utils.StringUtils"] = zygame_utils_StringUtils;
zygame_utils_StringUtils.__name__ = "zygame.utils.StringUtils";
zygame_utils_StringUtils.getExtType = function(data) {
	if(data == null) {
		return data;
	}
	var index = data.lastIndexOf(".");
	if(index == -1) {
		return null;
	} else {
		return HxOverrides.substr(data,index + 1,null);
	}
};
zygame_utils_StringUtils.getName = function(source) {
	var data = source;
	if(data == null) {
		return data;
	}
	data = HxOverrides.substr(data,data.lastIndexOf("/") + 1,null);
	if(data.indexOf(".") != -1) {
		data = HxOverrides.substr(data,0,data.lastIndexOf("."));
	} else if(source.indexOf("http") == 0) {
		return source;
	}
	return data;
};
var zygame_utils_TimeRuntime = function() {
	this._id = 0;
	this._arraycall = [];
	this._interval = new haxe_ds_IntMap();
	this._timecall = new haxe_ds_IntMap();
	this._resumecall = new haxe_ds_IntMap();
};
$hxClasses["zygame.utils.TimeRuntime"] = zygame_utils_TimeRuntime;
zygame_utils_TimeRuntime.__name__ = "zygame.utils.TimeRuntime";
zygame_utils_TimeRuntime.prototype = {
	_resumecall: null
	,_timecall: null
	,_interval: null
	,_arraycall: null
	,_id: null
	,onFrame: function() {
		var keys = this._timecall.keys();
		while(keys.hasNext()) {
			var id = keys.next();
			var call = this._timecall.h[id];
			this._arraycall.push(call);
		}
		this._arraycall.sort(function(a,b) {
			if(a.id < b.id) {
				return -1;
			} else {
				return 1;
			}
		});
		var _g = 0;
		var _g1 = this._arraycall;
		while(_g < _g1.length) {
			var call = _g1[_g];
			++_g;
			if(call.call()) {
				this._timecall.remove(call.id);
			}
		}
		this._arraycall.splice(0,this._arraycall.length);
		var intervals = this._interval.iterator();
		while(intervals.hasNext()) {
			var call = intervals.next();
			call.call(true);
		}
		this.onResume();
	}
	,onResume: function() {
		var keys = this._resumecall.keys();
		while(keys.hasNext()) {
			var id = keys.next();
			var call = this._resumecall.h[id];
			if(call.call()) {
				this._resumecall.remove(id);
			}
		}
	}
	,nextFrameCall: function(closure,args) {
		return this.setTimeout(closure,0,args);
	}
	,setTimeout: function(closure,delay,args) {
		this._id++;
		if(delay <= 0) {
			delay = 1;
		}
		var this1 = this._timecall;
		var key = this._id;
		var value = new zygame_utils_Call(this._id,delay,closure,args);
		this1.h[key] = value;
		return this._id;
	}
	,clearTimeout: function(id) {
		this._timecall.remove(id);
	}
	,setInterval: function(closure,delay,args) {
		if(delay == null) {
			delay = 0;
		}
		this._id++;
		if(delay <= 0) {
			delay = 1;
		}
		var this1 = this._interval;
		var key = this._id;
		var value = new zygame_utils_Call(this._id,delay,closure,args);
		this1.h[key] = value;
		return this._id;
	}
	,resetInterval: function(id) {
		if(this._interval.h.hasOwnProperty(id)) {
			this._interval.h[id].reset();
		}
	}
	,clearInterval: function(id) {
		this._interval.remove(id);
	}
	,clear: function() {
		this._interval = new haxe_ds_IntMap();
		this._timecall = new haxe_ds_IntMap();
		this._resumecall = new haxe_ds_IntMap();
	}
	,resumeCall: function(closure,args) {
		if(zygame_core_Start.isActivate) {
			closure.apply(closure,args == null ? [] : args);
			return -1;
		}
		this._id++;
		var this1 = this._resumecall;
		var key = this._id;
		var value = new zygame_utils_Call(this._id,0,closure,args);
		this1.h[key] = value;
		return this._id;
	}
	,__class__: zygame_utils_TimeRuntime
};
var zygame_utils_Call = function(id,time,closure,args) {
	this.id = 0;
	this.maxframe = 0;
	this.frame = 0;
	this.id = id;
	this.frame = time / 1000 * 60 | 0;
	this.maxframe = this.frame;
	this.closure = closure;
	this.args = args;
};
$hxClasses["zygame.utils.Call"] = zygame_utils_Call;
zygame_utils_Call.__name__ = "zygame.utils.Call";
zygame_utils_Call.prototype = {
	closure: null
	,args: null
	,frame: null
	,maxframe: null
	,id: null
	,call: function(isInterval) {
		if(isInterval == null) {
			isInterval = false;
		}
		this.frame--;
		if(this.frame <= 0) {
			this.closure.apply(this.closure,this.args == null ? [] : this.args);
			if(!isInterval) {
				this.stop();
			} else {
				this.reset();
			}
			return true;
		}
		return false;
	}
	,stop: function() {
		this.closure = null;
		this.args = null;
	}
	,reset: function() {
		this.frame = this.maxframe;
	}
	,__class__: zygame_utils_Call
};
var zygame_utils_ZGC = function() { };
$hxClasses["zygame.utils.ZGC"] = zygame_utils_ZGC;
zygame_utils_ZGC.__name__ = "zygame.utils.ZGC";
zygame_utils_ZGC.onFrame = function() {
	if(zygame_utils_ZGC.GCLIST.length > 0) {
		zygame_utils_ZGC.disposeDisplayObject(zygame_utils_ZGC.GCLIST.shift());
	}
};
zygame_utils_ZGC.disposeDisplayObject = function(display,addGC) {
	if(addGC == null) {
		addGC = false;
	}
	if(display == null) {
		return;
	}
	if(addGC) {
		if(zygame_utils_ZGC.GCLIST.indexOf(display) == -1) {
			zygame_utils_ZGC.GCLIST.push(display);
		}
		return;
	}
	zygame_utils_ZGC.disposeBitmap(display.__cacheBitmap);
	zygame_utils_ZGC.disposeBitmapData(display.__cacheBitmapData);
	zygame_utils_ZGC.disposeBitmapData(display.__cacheBitmapData2);
	zygame_utils_ZGC.disposeBitmapData(display.__cacheBitmapData3);
	if(((display) instanceof openfl_display_MovieClip)) {
		zygame_utils_ZGC.disposeMovieClip(display);
	} else if(((display) instanceof openfl_display_Bitmap)) {
		zygame_utils_ZGC.disposeBitmap(display);
	} else if(((display) instanceof openfl_display_DisplayObjectContainer)) {
		zygame_utils_ZGC.disposeSprite(display);
	}
};
zygame_utils_ZGC.disposeBitmap = function(display) {
	if(display != null && display.get_bitmapData() != null) {
		var bitmapData = display.get_bitmapData();
		zygame_utils_ZGC.disposeBitmapData(bitmapData);
	}
};
zygame_utils_ZGC.disposeBitmapData = function(bitmapData) {
	if(bitmapData == null) {
		return;
	}
	
        if(bitmapData != null)
        {
            if(bitmapData.__vertexBuffer != null && bitmapData.__vertexBuffer.__context != null)
            {
                bitmapData.__vertexBuffer.__context.gl.deleteBuffer(bitmapData.__vertexBuffer.__id);
                bitmapData.__vertexBuffer = null;
            }
            if(bitmapData.__texture != null)
            {
                bitmapData.__texture.dispose();
                bitmapData.__texture = null;
            }
            bitmapData.dispose();
        }
        if(bitmapData != null && bitmapData.__canvas != null && bitmapData.__canvas.cleanup != null){
            bitmapData.__canvas.cleanup();
            bitmapData.__canvas = null;
        }
	if(bitmapData.image != null && bitmapData.image.get_src() != null) {
		bitmapData.image.set_src(null);
	}
	bitmapData.dispose();
	bitmapData.disposeImage();
	bitmapData = null;
};
zygame_utils_ZGC.disposeMovieClip = function(mc) {
	var iterator = mc.__activeInstancesByFrameObjectID.iterator();
	while(iterator.hasNext()) {
		var displayObject = iterator.next().displayObject;
		zygame_utils_ZGC.disposeDisplayObject(displayObject,true);
	}
};
zygame_utils_ZGC.disposeSprite = function(spr) {
	var _g = 0;
	var _g1 = spr.get_numChildren();
	while(_g < _g1) {
		var i = _g++;
		zygame_utils_ZGC.disposeDisplayObject(spr.getChildAt(i));
	}
};
zygame_utils_ZGC.disposeTileRefresher = function(spr) {
	var _g = 0;
	var _g1 = spr.get_numTiles();
	while(_g < _g1) {
		var i = _g++;
		var tile = spr.getTileAt(i);
		if(((tile) instanceof openfl_display_TileContainer)) {
			zygame_utils_ZGC.disposeTileRefresher(tile);
		} else if(js_Boot.__implements(tile,zygame_core_Refresher)) {
			zygame_core_Start.current.removeToUpdate(tile);
		}
	}
};
zygame_utils_ZGC.disposeFrameEvent = function(display) {
	if(js_Boot.__implements(display,zygame_core_Refresher)) {
		zygame_core_Start.current.removeToUpdate(display);
	}
	if(js_Boot.__implements(display,openfl_display_ITileContainer)) {
		var _g = 0;
		var _g1 = (js_Boot.__cast(display , openfl_display_ITileContainer)).get_numTiles();
		while(_g < _g1) {
			var i = _g++;
			zygame_utils_ZGC.disposeFrameEvent((js_Boot.__cast(display , openfl_display_ITileContainer)).getTileAt(i));
		}
	} else if(((display) instanceof openfl_display_DisplayObjectContainer)) {
		var _g = 0;
		var _g1 = (js_Boot.__cast(display , openfl_display_DisplayObjectContainer)).get_numChildren();
		while(_g < _g1) {
			var i = _g++;
			zygame_utils_ZGC.disposeFrameEvent((js_Boot.__cast(display , openfl_display_DisplayObjectContainer)).getChildAt(i));
		}
	}
};
var zygame_utils_ZSceneManager = function() {
	this._sceneMaps = openfl_utils_Dictionary.toUtilsObjectMap(null);
};
$hxClasses["zygame.utils.ZSceneManager"] = zygame_utils_ZSceneManager;
zygame_utils_ZSceneManager.__name__ = "zygame.utils.ZSceneManager";
zygame_utils_ZSceneManager.__properties__ = {get_current:"get_current"};
zygame_utils_ZSceneManager.get_current = function() {
	if(zygame_utils_ZSceneManager._current == null) {
		zygame_utils_ZSceneManager._scenes = [];
		zygame_utils_ZSceneManager._current = new zygame_utils_ZSceneManager();
	}
	return zygame_utils_ZSceneManager._current;
};
zygame_utils_ZSceneManager.prototype = {
	_sceneMaps: null
	,getCurrentScene: function() {
		if(zygame_utils_ZSceneManager._scenes.length == 0) {
			return null;
		}
		return zygame_utils_ZSceneManager._scenes[zygame_utils_ZSceneManager._scenes.length - 1];
	}
	,createScene: function(cName) {
		var scene = this._sceneMaps.get(cName);
		if(scene == null) {
			scene = Type.createInstance(cName,[]);
			this._sceneMaps.set(cName,scene);
			zygame_core_Start.current.addChild(scene);
		} else {
			zygame_core_Start.current.addChild(scene);
			scene.onSceneReset();
		}
		zygame_utils_ZSceneManager._scenes.push(scene);
		return scene;
	}
	,releaseScene: function(zScene) {
		zScene.onSceneRelease();
		this._sceneMaps.remove(js_Boot.getClass(zScene));
		HxOverrides.remove(zygame_utils_ZSceneManager._scenes,zScene);
		if(zScene.parent != null) {
			zScene.parent.removeChild(zScene);
		}
	}
	,releaseSceneFormClass: function(cName) {
		var classObj = this._sceneMaps.keys();
		while(classObj.hasNext()) {
			var c = classObj.next();
			if(c == cName) {
				var zscene = this._sceneMaps.get(c);
				if(js_Boot.__instanceof(zscene,cName)) {
					this.releaseScene(zscene);
				}
			}
		}
	}
	,replaceScene: function(cName,isReleaseScene) {
		if(isReleaseScene == null) {
			isReleaseScene = false;
		}
		if(this.getCurrentScene() != null && js_Boot.__instanceof(this.getCurrentScene(),cName)) {
			return this.getCurrentScene();
		}
		while(zygame_utils_ZSceneManager._scenes.length > 0) {
			var zscene = zygame_utils_ZSceneManager._scenes.shift();
			if(isReleaseScene) {
				this.releaseScene(zscene);
			} else {
				zscene.parent.removeChild(zscene);
			}
		}
		return this.createScene(cName);
	}
	,releaseSceneFormDisplay: function(scene,isReleaseScene) {
		if(isReleaseScene == null) {
			isReleaseScene = false;
		}
		while(zygame_utils_ZSceneManager._scenes.length > 0) {
			var zscene = zygame_utils_ZSceneManager._scenes.shift();
			if(isReleaseScene) {
				this.releaseScene(zscene);
			} else {
				zscene.parent.removeChild(zscene);
			}
		}
		zygame_core_Start.current.addChild(scene);
		zygame_utils_ZSceneManager._scenes.push(scene);
		return scene;
	}
	,replaceSceneFormScene: function(scene) {
		this._sceneMaps.set(js_Boot.getClass(scene),scene);
		zygame_core_Start.current.addChild(scene);
		zygame_utils_ZSceneManager._scenes.push(scene);
		return scene;
	}
	,__class__: zygame_utils_ZSceneManager
};
var zygame_utils_load_AssetsZipLoader = function(path) {
	this.path = "";
	this.path = path;
};
$hxClasses["zygame.utils.load.AssetsZipLoader"] = zygame_utils_load_AssetsZipLoader;
zygame_utils_load_AssetsZipLoader.__name__ = "zygame.utils.load.AssetsZipLoader";
zygame_utils_load_AssetsZipLoader.prototype = {
	path: null
	,load: function(call,errerCall) {
		var _gthis = this;
		zygame_utils_AssetsUtils.loadBytes(this.path,false).onComplete(function(bytes) {
			var zip = new zygame_utils_load_Zip(bytes);
			zip.name = zygame_utils_StringUtils.getName(_gthis.path);
			zip.process(function(f) {
				if(f == 1) {
					call(zip);
					call = null;
				}
			});
		}).onError(function(data) {
			errerCall(data);
			call = null;
		});
	}
	,__class__: zygame_utils_load_AssetsZipLoader
};
var zygame_utils_load_Zip = function(bytes) {
	var input = new haxe_io_BytesInput(bytes);
	this.zip = new zygame_zip_ZipReader(input);
	this.entrys = new haxe_ds_StringMap();
};
$hxClasses["zygame.utils.load.Zip"] = zygame_utils_load_Zip;
zygame_utils_load_Zip.__name__ = "zygame.utils.load.Zip";
zygame_utils_load_Zip.prototype = {
	name: null
	,zip: null
	,entrys: null
	,photosConfig: null
	,process: function(call) {
		var entry = this.zip.next();
		if(entry != null) {
			var id = zygame_utils_StringUtils.getName(entry.fileName);
			var ext = zygame_utils_StringUtils.getExtType(entry.fileName);
			this.entrys.h[id + "." + ext] = entry;
			var pro = this.zip.progress();
			call(pro);
			if(pro == 1) {
				return;
			}
		} else {
			call(1);
			return;
		}
		this.process(call);
	}
	,loadSound: function(id,call) {
		var entry = this.entrys.h[id + ".mp3"];
		if(entry == null) {
			entry = this.entrys.h[id + ".ogg"];
		}
		if(entry == null) {
			call(null);
			return;
		}
		var bytes = entry.compressed ? lime__$internal_format_Deflate.decompress(entry.data) : entry.data;
		var soundLoader = new zygame_utils_BytesSoundLoader(id,openfl_utils_ByteArray.fromBytes(bytes));
		soundLoader.onComplete(function(sound) {
			call(sound);
		});
	}
	,loadBitmapData: function(id,call) {
		var entry = this.entrys.h[id + ".png"];
		if(entry == null) {
			entry = this.entrys.h[id + ".jpg"];
		}
		if(entry == null) {
			call(null);
			return;
		}
		var bytes = entry.compressed ? lime__$internal_format_Deflate.decompress(entry.data) : entry.data;
		var bitmapData = new zygame_display_ZBitmapData(0,0,true,0);
		var rawAlpha = null;
		var _gthis = bitmapData;
		lime_graphics_Image.loadFromBytes(openfl_utils_ByteArray.toBytes(openfl_utils_ByteArray.fromBytes(bytes))).then(function(image) {
			_gthis.__fromImage(image);
			if(rawAlpha != null) {
				_gthis.__applyAlpha(rawAlpha);
			}
			return lime_app_Future.withValue(_gthis);
		}).onComplete(function(bitmapData) {
			if(call != null) {
				call(bitmapData);
			}
		});
	}
	,getXml: function(id) {
		var entry = this.entrys.h[id + ".xml"];
		if(entry == null) {
			return null;
		}
		var bytes = entry.compressed ? lime__$internal_format_Deflate.decompress(entry.data) : entry.data;
		var xmlconent = bytes.toString();
		return Xml.parse(xmlconent);
	}
	,getJson: function(id) {
		var entry = this.entrys.h[id + ".json"];
		if(entry == null) {
			return null;
		}
		var bytes = entry.compressed ? lime__$internal_format_Deflate.decompress(entry.data) : entry.data;
		return JSON.parse(bytes.toString());
	}
	,exist: function(id) {
		return Object.prototype.hasOwnProperty.call(this.entrys.h,id);
	}
	,unload: function() {
		this.zip = null;
		this.entrys = null;
	}
	,getHScript: function(id) {
		var entry = this.entrys.h[id + ".hx"];
		if(entry == null) {
			return null;
		}
		var bytes = entry.compressed ? lime__$internal_format_Deflate.decompress(entry.data) : entry.data;
		return bytes.toString();
	}
	,__class__: zygame_utils_load_Zip
};
var zygame_utils_load_Atlas = function() {
	this.isTextAtlas = false;
};
$hxClasses["zygame.utils.load.Atlas"] = zygame_utils_load_Atlas;
zygame_utils_load_Atlas.__name__ = "zygame.utils.load.Atlas";
zygame_utils_load_Atlas.prototype = {
	isTextAtlas: null
	,getTileset: function() {
		return null;
	}
	,__class__: zygame_utils_load_Atlas
};
var zygame_utils_load_BaseFrame = function() {
	this.y = 0;
	this.x = 0;
	this.id = -1;
};
$hxClasses["zygame.utils.load.BaseFrame"] = zygame_utils_load_BaseFrame;
zygame_utils_load_BaseFrame.__name__ = "zygame.utils.load.BaseFrame";
zygame_utils_load_BaseFrame.prototype = {
	id: null
	,width: null
	,height: null
	,x: null
	,y: null
	,toString: function() {
		return "[BaseFrame]";
	}
	,__class__: zygame_utils_load_BaseFrame
};
var zygame_utils_load_CDBLoader = function(path) {
	this.path = path;
};
$hxClasses["zygame.utils.load.CDBLoader"] = zygame_utils_load_CDBLoader;
zygame_utils_load_CDBLoader.__name__ = "zygame.utils.load.CDBLoader";
zygame_utils_load_CDBLoader.prototype = {
	path: null
	,load: function(onLoaded,onError) {
		var _gthis = this;
		zygame_utils_AssetsUtils.loadText(this.path).onComplete(function(data) {
			onLoaded(_gthis.path,new zygame_utils_load_CDBData(data));
		}).onError(onError);
	}
	,__class__: zygame_utils_load_CDBLoader
};
var zygame_utils_load_CDBData = function(data) {
	if(data.indexOf("{") == -1) {
		data = haxe_crypto_Base64.decode(data).toString();
	}
	this.data = cdb_Parser.parse(data);
};
$hxClasses["zygame.utils.load.CDBData"] = zygame_utils_load_CDBData;
zygame_utils_load_CDBData.__name__ = "zygame.utils.load.CDBData";
zygame_utils_load_CDBData.prototype = {
	data: null
	,getSheetByName: function(name) {
		var _g = 0;
		var _g1 = this.data.sheets;
		while(_g < _g1.length) {
			var item = _g1[_g];
			++_g;
			if(item.name == name) {
				return item;
			}
		}
		return null;
	}
	,findData: function(sheetData,key,ifvalue) {
		var _g = 0;
		var _g1 = sheetData.lines;
		while(_g < _g1.length) {
			var item = _g1[_g];
			++_g;
			var value = Reflect.getProperty(item,key);
			if(value == ifvalue) {
				return item;
			}
		}
		return null;
	}
	,findDataByName: function(name,key,ifvalue) {
		return this.findData(this.getSheetByName(name),key,ifvalue);
	}
	,__class__: zygame_utils_load_CDBData
};
var zygame_utils_load_DynamicTextureLoader = function(name) {
	this._canError = false;
	this._curLoadCount = 0;
	this._allLoadCount = 0;
	this.files = [];
	this.textureAtlas = new zygame_utils_load_DynamicTextureAtlas();
	this.textureAtlas.textureAtlasName = name;
};
$hxClasses["zygame.utils.load.DynamicTextureLoader"] = zygame_utils_load_DynamicTextureLoader;
zygame_utils_load_DynamicTextureLoader.__name__ = "zygame.utils.load.DynamicTextureLoader";
zygame_utils_load_DynamicTextureLoader.prototype = {
	textureAtlas: null
	,files: null
	,_call: null
	,_errorCall: null
	,_allLoadCount: null
	,_curLoadCount: null
	,_canError: null
	,loadFile: function(pngPath) {
		if(this.files.indexOf(pngPath) != -1) {
			return;
		}
		this._allLoadCount++;
		this.files.push(pngPath);
	}
	,load: function(func,errorCall,canError) {
		if(canError == null) {
			canError = false;
		}
		this._call = func;
		this._canError = canError;
		this._errorCall = errorCall;
		this.next();
	}
	,next: function() {
		var _gthis = this;
		if(this._curLoadCount == this._allLoadCount) {
			this._call(this.textureAtlas);
			this.textureAtlas = null;
			return;
		}
		if(this.files.length == 0) {
			return;
		}
		var path = this.files.shift();
		zygame_utils_AssetsUtils.loadBitmapData(path).onComplete(function(bitmapData) {
			_gthis.textureAtlas.putImg(zygame_utils_StringUtils.getName(path),bitmapData);
			_gthis._curLoadCount++;
			_gthis.next();
		}).onError(function(msg) {
			if(_gthis._canError) {
				_gthis._curLoadCount++;
				_gthis.next();
			} else if(_gthis._errorCall != null) {
				_gthis._errorCall(msg);
			}
		});
	}
	,__class__: zygame_utils_load_DynamicTextureLoader
};
var zygame_utils_load_TextureAtlas = function(img,xml) {
	zygame_utils_load_Atlas.call(this);
	this._rootBitmapData = img;
	this._names = [];
	this._tileRects = openfl_utils_Dictionary.toStringMap(null);
	this._tileset = new openfl_display_Tileset(img);
	if(img != null && xml != null) {
		this.updateAtlas(img,xml);
	}
};
$hxClasses["zygame.utils.load.TextureAtlas"] = zygame_utils_load_TextureAtlas;
zygame_utils_load_TextureAtlas.__name__ = "zygame.utils.load.TextureAtlas";
zygame_utils_load_TextureAtlas.createTextureAtlasByOne = function(bitmapData) {
	var xml = Xml.parse("<TextureAtlas><SubTexture name=\"img\" x=\"0\" y=\"0\" width=\"" + bitmapData.width + "\" height=\"" + bitmapData.height + "\"/></TextureAtlas>");
	var atlas = new zygame_utils_load_TextureAtlas(bitmapData,xml);
	return atlas;
};
zygame_utils_load_TextureAtlas.__super__ = zygame_utils_load_Atlas;
zygame_utils_load_TextureAtlas.prototype = $extend(zygame_utils_load_Atlas.prototype,{
	path: null
	,_names: null
	,_rootBitmapData: null
	,_rootXml: null
	,_tileset: null
	,_tileRects: null
	,updateAtlas: function(bitmapData,xml) {
		this._names = [];
		this._rootXml = xml;
		var _g = haxe_ds_StringMap.kvIterator(this._tileRects.h);
		while(_g.hasNext()) {
			var _g1 = _g.next();
			var key = _g1.key;
			var value = _g1.value;
			value.id = -1;
		}
		var xmls = null;
		try {
			xmls = xml.firstElement().elements();
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
			return null;
		}
		var rect = new openfl_geom_Rectangle();
		var pos = new openfl_geom_Point();
		var rects = [];
		while(xmls.hasNext()) {
			var txml = xmls.next();
			rect.x = parseFloat(txml.get("x"));
			rect.y = parseFloat(txml.get("y"));
			rect.width = parseFloat(txml.get("width"));
			rect.height = parseFloat(txml.get("height"));
			var trect = rect.clone();
			rects.push(trect);
			var frame = null;
			var this1 = this._tileRects;
			var key = txml.get("name");
			if(Object.prototype.hasOwnProperty.call(this1.h,key)) {
				var this2 = this._tileRects;
				var key1 = txml.get("name");
				frame = this2.h[key1];
			} else {
				frame = new zygame_utils_load_Frame();
				frame.name = txml.get("name");
				var this3 = this._tileRects;
				var key2 = txml.get("name");
				this3.h[key2] = frame;
			}
			frame.id = rects.length - 1;
			frame.x = trect.x;
			frame.y = trect.y;
			frame.width = trect.width;
			frame.height = trect.height;
			if(txml.exists("frameX")) {
				frame.frameX = -parseFloat(txml.get("frameX"));
			}
			if(txml.exists("frameY")) {
				frame.frameY = -parseFloat(txml.get("frameY"));
			}
			if(txml.exists("frameWidth")) {
				frame.frameWidth = Std.parseInt(txml.get("frameWidth"));
			}
			if(txml.exists("frameHeight")) {
				frame.frameHeight = Std.parseInt(txml.get("frameHeight"));
			}
			frame.parent = this;
			this._names.push(txml.get("name"));
			if(txml.exists("slice9")) {
				this.bindScale9(txml.get("name"),txml.get("slice9"));
			}
		}
		this._tileset.set_bitmapData(bitmapData);
		this._tileset.rectData = openfl_Vector.toFloatVector(null);
		this._tileset.__data = [];
		var _g = 0;
		var _g1 = rects.length;
		while(_g < _g1) {
			var i = _g++;
			this._tileset.addRect(rects[i]);
		}
		return rects;
	}
	,getRootBitmapData: function() {
		return this._rootBitmapData;
	}
	,getTileset: function() {
		return this._tileset;
	}
	,getBitmapDataFrame: function(id) {
		if(this._tileRects == null) {
			return null;
		}
		return this._tileRects.h[id];
	}
	,getBitmapDataFrameAt: function(id) {
		var frames = haxe_ds_StringMap.valueIterator(this._tileRects.h);
		while(frames.hasNext()) {
			var frame = frames.next();
			if(frame.id == id) {
				return frame;
			}
		}
		return null;
	}
	,getBitmapDataFrames: function(id) {
		var arr = [];
		var _g = 0;
		var _g1 = this._names.length;
		while(_g < _g1) {
			var i = _g++;
			var pname = this._names[i];
			if(pname.indexOf(id) != -1) {
				arr.push(this.getBitmapDataFrame(pname));
			}
		}
		return arr;
	}
	,dispose: function() {
		zygame_utils_ZGC.disposeBitmapData(this._rootBitmapData);
		this._rootBitmapData = null;
		if(this._tileset != null) {
			this._tileset.set_bitmapData(null);
			this._tileset.rectData = null;
			this._tileset = null;
		}
		this._rootXml = null;
		this._tileRects = null;
	}
	,bindScale9: function(id,data) {
		var curframe = this.getBitmapDataFrame(id);
		var rect = null;
		if(typeof(data) == "string") {
			rect = zygame_utils_Lib.cssRectangle(curframe,data);
		} else if(((data) instanceof openfl_geom_Rectangle)) {
			rect = data;
		}
		if(rect != null && curframe != null && (curframe.get_scale9rect() == null || curframe.get_scale9rect().x != rect.x || curframe.get_scale9rect().y != rect.y || curframe.get_scale9rect().width != rect.width || curframe.get_scale9rect().height != rect.height)) {
			curframe.set_scale9rect(rect);
		}
	}
	,__class__: zygame_utils_load_TextureAtlas
});
var zygame_utils_load_DynamicTextureAtlas = function() {
	zygame_utils_load_TextureAtlas.call(this,new openfl_display_BitmapData(2048,2048,true,0),null);
	this.pack = new zygame_utils_MaxRectsBinPack(2048,2048,false);
	this._tileset = new openfl_display_Tileset(this._rootBitmapData);
};
$hxClasses["zygame.utils.load.DynamicTextureAtlas"] = zygame_utils_load_DynamicTextureAtlas;
zygame_utils_load_DynamicTextureAtlas.__name__ = "zygame.utils.load.DynamicTextureAtlas";
zygame_utils_load_DynamicTextureAtlas.__super__ = zygame_utils_load_TextureAtlas;
zygame_utils_load_DynamicTextureAtlas.prototype = $extend(zygame_utils_load_TextureAtlas.prototype,{
	textureAtlasName: null
	,pack: null
	,putImg: function(name,bitmapData) {
		var ma = new openfl_geom_Matrix();
		var rect = this.pack.insert(bitmapData.width,bitmapData.height,zygame_utils_FreeRectangleChoiceHeuristic.BestShortSideFit);
		if(rect == null) {
			return;
		}
		rect = rect.clone();
		ma.tx = rect.x;
		ma.ty = rect.y;
		this._rootBitmapData.draw(bitmapData,ma);
		zygame_utils_ZGC.disposeBitmapData(bitmapData);
		this._names.push(name);
		var frame = new zygame_utils_load_Frame();
		frame.x = rect.x;
		frame.y = rect.y;
		frame.width = rect.width;
		frame.height = rect.height;
		frame.parent = this;
		frame.id = this._names.length - 1;
		this._tileRects.h[name] = frame;
		this._tileset.addRect(rect);
	}
	,__class__: zygame_utils_load_DynamicTextureAtlas
});
var zygame_utils_load_FntLoader = function(pngpath,xmlpath) {
	this.pngpath = pngpath;
	this.xmlpath = xmlpath;
};
$hxClasses["zygame.utils.load.FntLoader"] = zygame_utils_load_FntLoader;
zygame_utils_load_FntLoader.__name__ = "zygame.utils.load.FntLoader";
zygame_utils_load_FntLoader.prototype = {
	pngpath: null
	,xmlpath: null
	,load: function(call,errorCall) {
		var _gthis = this;
		zygame_utils_AssetsUtils.loadBitmapData(this.pngpath).onComplete(function(bitmapData) {
			zygame_utils_AssetsUtils.loadText(_gthis.xmlpath).onComplete(function(data) {
				call(new zygame_utils_load_FntData(bitmapData,Xml.parse(data),_gthis.pngpath));
			}).onError(errorCall);
		}).onError(errorCall);
	}
	,__class__: zygame_utils_load_FntLoader
};
var zygame_utils_load_FntData = function(bitmapData,xml,path) {
	zygame_utils_load_Atlas.call(this);
	this._ids = openfl_utils_Dictionary.toIntMap(null);
	this._bitmapData = bitmapData;
	this._xml = xml;
	this.path = path;
	this._tileset = new openfl_display_Tileset(bitmapData);
	var chars = xml.elementsNamed("font").next().elementsNamed("chars").next().elements();
	var minYOffect = 99999;
	while(chars.hasNext()) {
		var char = chars.next();
		var id = Std.parseInt(char.get("id"));
		var posx = parseFloat(char.get("x"));
		var posy = parseFloat(char.get("y"));
		var pwidth = parseFloat(char.get("width"));
		var pheight = parseFloat(char.get("height"));
		var xadvance = Std.parseInt(char.get("xadvance"));
		if(pwidth != 0 && pheight != 0) {
			var frame = new zygame_utils_load_FntFrame();
			frame.id = this._tileset.addRect(new openfl_geom_Rectangle(posx,posy,pwidth,pheight));
			frame.width = pwidth;
			frame.height = pheight;
			frame.xadvance = xadvance;
			frame.set_xoffset(Std.parseInt(char.get("xoffset")));
			frame.set_yoffset(Std.parseInt(char.get("yoffset")));
			this._ids.h[id] = frame;
			if(this.maxHeight < pheight) {
				this.maxHeight = pheight;
			}
			if(minYOffect > frame.get_yoffset()) {
				minYOffect = frame.get_yoffset();
			}
		}
	}
	var frames = this._ids.iterator();
	while(frames.hasNext()) {
		var fntFrame = frames.next();
		var _g = fntFrame;
		_g.set_yoffset(_g.get_yoffset() - minYOffect);
	}
};
$hxClasses["zygame.utils.load.FntData"] = zygame_utils_load_FntData;
zygame_utils_load_FntData.__name__ = "zygame.utils.load.FntData";
zygame_utils_load_FntData.__super__ = zygame_utils_load_Atlas;
zygame_utils_load_FntData.prototype = $extend(zygame_utils_load_Atlas.prototype,{
	_bitmapData: null
	,_xml: null
	,path: null
	,maxHeight: null
	,_tileset: null
	,_ids: null
	,getTileFrame: function(id) {
		return this._ids.h[id];
	}
	,getTileset: function() {
		return this._tileset;
	}
	,dispose: function() {
		zygame_utils_ZGC.disposeBitmapData(this._bitmapData);
		this._bitmapData = null;
		this._tileset.set_bitmapData(null);
		this._tileset = null;
		this._ids = null;
	}
	,__class__: zygame_utils_load_FntData
});
var zygame_utils_load_FntFrame = function() {
	zygame_utils_load_BaseFrame.call(this);
};
$hxClasses["zygame.utils.load.FntFrame"] = zygame_utils_load_FntFrame;
zygame_utils_load_FntFrame.__name__ = "zygame.utils.load.FntFrame";
zygame_utils_load_FntFrame.__super__ = zygame_utils_load_BaseFrame;
zygame_utils_load_FntFrame.prototype = $extend(zygame_utils_load_BaseFrame.prototype,{
	xadvance: null
	,set_xoffset: function(f) {
		this.x = f;
		return f;
	}
	,get_xoffset: function() {
		return this.x;
	}
	,set_yoffset: function(f) {
		this.y = f;
		return f;
	}
	,get_yoffset: function() {
		return this.y;
	}
	,__class__: zygame_utils_load_FntFrame
	,__properties__: {set_yoffset:"set_yoffset",get_yoffset:"get_yoffset",set_xoffset:"set_xoffset",get_xoffset:"get_xoffset"}
});
var zygame_utils_load_Frame = function() {
	this._rect = null;
	this.rotate = false;
	this.frameHeight = 0;
	this.frameWidth = 0;
	this.frameY = 0;
	this.frameX = 0;
	this.name = null;
	zygame_utils_load_BaseFrame.call(this);
};
$hxClasses["zygame.utils.load.Frame"] = zygame_utils_load_Frame;
zygame_utils_load_Frame.__name__ = "zygame.utils.load.Frame";
zygame_utils_load_Frame.__super__ = zygame_utils_load_BaseFrame;
zygame_utils_load_Frame.prototype = $extend(zygame_utils_load_BaseFrame.prototype,{
	name: null
	,frameX: null
	,frameY: null
	,frameWidth: null
	,frameHeight: null
	,rotate: null
	,uvs: null
	,parent: null
	,_scale9frames: null
	,_rect: null
	,get_scale9rect: function() {
		return this._rect;
	}
	,set_scale9rect: function(rect) {
		this._rect = rect;
		if(this._scale9frames != null) {
			this._scale9frames = null;
		}
		return this._rect;
	}
	,get_scale9frames: function() {
		if(this.get_scale9rect() == null) {
			return null;
		}
		if(this._scale9frames != null) {
			return this._scale9frames;
		}
		var rects = zygame_utils_Scale9Utils.createScale9Rects(this.x,this.y,this.width,this.height,this.get_scale9rect());
		this._scale9frames = [];
		var _g = 0;
		while(_g < rects.length) {
			var rect = rects[_g];
			++_g;
			this.parent._tileset.addRect(rect);
			var frame = new zygame_utils_load_Frame();
			frame.id = this.parent._tileset.get_numRects() - 1;
			frame.x = rect.x;
			frame.y = rect.y;
			frame.width = rect.width;
			frame.height = rect.height;
			frame.parent = this.parent;
			this._scale9frames.push(frame);
		}
		return this._scale9frames;
	}
	,getScale9GirdTileset: function(rect) {
		return new openfl_display_Tileset(this.parent.getRootBitmapData(),zygame_utils_Scale9Utils.createScale9Rects(this.x,this.y,this.width,this.height,rect));
	}
	,getRect: function() {
		return new openfl_geom_Rectangle(this.x,this.y,this.width,this.height);
	}
	,getUv: function() {
		if(this.uvs == null) {
			var x1 = this.x + 1;
			var y1 = this.y + 1;
			var w1 = this.width - 2;
			var h1 = this.height - 2;
			this.uvs = [];
			this.uvs.push(x1 / this.parent.getRootBitmapData().width);
			this.uvs.push(y1 / this.parent.getRootBitmapData().height);
			this.uvs.push((x1 + w1) / this.parent.getRootBitmapData().width);
			this.uvs.push(y1 / this.parent.getRootBitmapData().height);
			this.uvs.push(x1 / this.parent.getRootBitmapData().width);
			this.uvs.push((y1 + h1) / this.parent.getRootBitmapData().height);
			this.uvs.push((x1 + w1) / this.parent.getRootBitmapData().width);
			this.uvs.push((y1 + h1) / this.parent.getRootBitmapData().height);
		}
		return this.uvs;
	}
	,__class__: zygame_utils_load_Frame
	,__properties__: {set_scale9rect:"set_scale9rect",get_scale9rect:"get_scale9rect",get_scale9frames:"get_scale9frames"}
});
var zygame_utils_load_MapliveLoader = function(url) {
	this._url = url;
};
$hxClasses["zygame.utils.load.MapliveLoader"] = zygame_utils_load_MapliveLoader;
zygame_utils_load_MapliveLoader.__name__ = "zygame.utils.load.MapliveLoader";
zygame_utils_load_MapliveLoader.prototype = {
	_url: null
	,load: function(call,onPro,onError) {
		var _gthis = this;
		zygame_utils_AssetsUtils.loadText(this._url + "/main.json").onComplete(function(data) {
			var mapData = new zygame_utils_load_MapliveData(data);
			mapData.rootPath = _gthis._url;
			mapData.load(function(bool) {
				if(bool) {
					call(mapData);
				} else {
					onError("Maplive map data load fail:" + _gthis._url);
				}
			},onPro);
		}).onError(function(data) {
			onError("Path not load:" + _gthis._url);
		});
	}
	,__class__: zygame_utils_load_MapliveLoader
};
var zygame_utils_load_MapliveSceneLoader = function(path,rootPath) {
	this._url = path;
	this._rootPath = rootPath;
};
$hxClasses["zygame.utils.load.MapliveSceneLoader"] = zygame_utils_load_MapliveSceneLoader;
zygame_utils_load_MapliveSceneLoader.__name__ = "zygame.utils.load.MapliveSceneLoader";
zygame_utils_load_MapliveSceneLoader.prototype = {
	_url: null
	,_rootPath: null
	,load: function(call,onPro) {
		var _gthis = this;
		zygame_utils_AssetsUtils.loadText(this._url).onComplete(function(data) {
			var mapData = new zygame_utils_load_MapliveSceneData(data);
			mapData.rootPath = _gthis._rootPath;
			mapData.load(function(bool) {
				if(bool) {
					call(mapData);
				} else {
					call(null);
				}
			},onPro);
		});
	}
	,__class__: zygame_utils_load_MapliveSceneLoader
};
var zygame_utils_load_MapliveSceneData = function(data) {
	this._data = JSON.parse(data);
	this.curAssets = new zygame_utils_load_ZMaliveAssets();
};
$hxClasses["zygame.utils.load.MapliveSceneData"] = zygame_utils_load_MapliveSceneData;
zygame_utils_load_MapliveSceneData.__name__ = "zygame.utils.load.MapliveSceneData";
zygame_utils_load_MapliveSceneData.prototype = {
	_data: null
	,mapliveData: null
	,curAssets: null
	,rootPath: null
	,load: function(call,onPro) {
		if(this._data.files == null) {
			call(true);
		} else if(this._data.files.length == 0) {
			call(true);
		} else {
			zygame_utils_load_LoaderUtils.loadAssets(this.curAssets,this.rootPath,this._data.files);
			this.curAssets.start(function(f) {
				haxe_Log.trace("maplive load pro = ",{ fileName : "Source/zygame/utils/load/MapliveLoader.hx", lineNumber : 120, className : "zygame.utils.load.MapliveSceneData", methodName : "load", customParams : [f]});
				if(onPro != null) {
					onPro(f);
				}
				if(f == 1) {
					call(true);
				}
			},function(err) {
				haxe_Log.trace("加载失败：",{ fileName : "Source/zygame/utils/load/MapliveLoader.hx", lineNumber : 126, className : "zygame.utils.load.MapliveSceneData", methodName : "load", customParams : [err]});
				call(false);
			});
		}
	}
	,getTextureAtlas: function(id) {
		var atlas = this.curAssets.getTextureAtlas(id);
		if(atlas == null) {
			atlas = this.mapliveData.curAssets.getTextureAtlas(id);
		}
		return atlas;
	}
	,getBitmapData: function(id) {
		var bitmapData = this.curAssets.getBitmapData(id,true);
		if(bitmapData == null) {
			bitmapData = this.mapliveData.curAssets.getBitmapData(id,true);
		}
		return bitmapData;
	}
	,getSpineSpriteData: function(id) {
		var data = this.curAssets.getSpineSpriteSkeletonData(id);
		if(data == null) {
			data = this.mapliveData.curAssets.getSpineSpriteSkeletonData(id);
		}
		return data;
	}
	,getSpineTilemapData: function(id) {
		var data = this.curAssets.getSpineTilemapSkeletonData(id);
		if(data == null) {
			data = this.mapliveData.curAssets.getSpineTilemapSkeletonData(id);
		}
		return data;
	}
	,getLayers: function() {
		return this._data.data.layers;
	}
	,getWidth: function() {
		return this._data.width;
	}
	,getHeight: function() {
		return this._data.height;
	}
	,getData: function() {
		return this._data;
	}
	,getBindType: function() {
		return this._data.bindType;
	}
	,unload: function() {
		this.mapliveData = null;
		this._data = null;
		this.curAssets.unloadAll();
	}
	,__class__: zygame_utils_load_MapliveSceneData
};
var zygame_utils_load_MapliveData = function(data) {
	this.defaultSceneClass = null;
	this.rootPath = null;
	this._data = JSON.parse(data);
	this._scenes = new haxe_ds_StringMap();
	this.curAssets = new zygame_utils_load_ZMaliveAssets();
};
$hxClasses["zygame.utils.load.MapliveData"] = zygame_utils_load_MapliveData;
zygame_utils_load_MapliveData.__name__ = "zygame.utils.load.MapliveData";
zygame_utils_load_MapliveData.prototype = {
	rootPath: null
	,curAssets: null
	,_data: null
	,_scenes: null
	,defaultSceneClass: null
	,load: function(call,onPro) {
		if(this._data.files == null) {
			call(true);
		} else if(this._data.files.length == 0) {
			call(true);
		} else {
			zygame_utils_load_LoaderUtils.loadAssets(this.curAssets,this.rootPath,this._data.files);
			this.curAssets.start(function(f) {
				if(onPro != null) {
					onPro(f);
				}
				if(f == 1) {
					call(true);
				}
			});
		}
	}
	,get_name: function() {
		return this._data.name;
	}
	,loadScene: function(name,call,onPro) {
		var _gthis = this;
		var mapData = this._scenes.h[name];
		if(mapData != null) {
			call(new zygame_components_ZMapliveScene(mapData));
			return;
		}
		var path = this.rootPath + "/scenes/" + Std.string(Reflect.getProperty(this._data.scenes,name));
		var loader = new zygame_utils_load_MapliveSceneLoader(path,this.rootPath);
		var self = this;
		haxe_Log.trace("-- load scene --",{ fileName : "Source/zygame/utils/load/MapliveLoader.hx", lineNumber : 291, className : "zygame.utils.load.MapliveData", methodName : "loadScene", customParams : [name,path]});
		loader.load(function(data) {
			zygame_utils_Log.log("scene data loaded!");
			data.mapliveData = self;
			_gthis._scenes.h[name] = data;
			if(_gthis.defaultSceneClass == null && data.getBindType() == null) {
				call(new zygame_components_ZMapliveScene(data));
			} else {
				call(new zygame_components_ZMapliveScene(data));
			}
		},onPro);
	}
	,getData: function() {
		return this._data;
	}
	,unloadScene: function(id) {
		var mapData = this._scenes.h[id];
		if(mapData != null) {
			mapData.unload();
			var _this = this._scenes;
			if(Object.prototype.hasOwnProperty.call(_this.h,id)) {
				delete(_this.h[id]);
			}
		}
	}
	,unloadAll: function() {
		this.curAssets.unloadAll();
		var key = haxe_ds_StringMap.keysIterator(this._scenes.h);
		while(key.hasNext()) {
			var k = key.next();
			this._scenes.h[k].unload();
			var _this = this._scenes;
			if(Object.prototype.hasOwnProperty.call(_this.h,k)) {
				delete(_this.h[k]);
			}
		}
	}
	,__class__: zygame_utils_load_MapliveData
	,__properties__: {get_name:"get_name"}
};
var zygame_utils_load_LoaderUtils = function() { };
$hxClasses["zygame.utils.load.LoaderUtils"] = zygame_utils_load_LoaderUtils;
zygame_utils_load_LoaderUtils.__name__ = "zygame.utils.load.LoaderUtils";
zygame_utils_load_LoaderUtils.loadAssets = function(curAssets,rootPath,files) {
	var _g = 0;
	var _g1 = files.length;
	while(_g < _g1) {
		var i = _g++;
		var path = files[i];
		if(path.indexOf("textureatlas:") == 0) {
			zygame_utils_load_LoaderUtils.loadTextureAtlas(curAssets,rootPath,path);
		} else if(path.indexOf("spineatlas:") == 0) {
			zygame_utils_load_LoaderUtils.loadSpineAtlas(curAssets,rootPath,path);
		} else {
			curAssets.loadFile(rootPath + "/files/" + path);
		}
	}
};
zygame_utils_load_LoaderUtils.loadTextureAtlas = function(curAssets,rootPath,path) {
	var name = HxOverrides.substr(path,13,null);
	curAssets.loadTextures(rootPath + "/files/" + name + ".png",rootPath + "/files/" + name + ".xml");
};
zygame_utils_load_LoaderUtils.loadSpineAtlas = function(curAssets,rootPath,path) {
	var name = HxOverrides.substr(path,11,null);
	curAssets.loadSpineTextAlats([rootPath + "/files/" + name + ".png"],rootPath + "/files/" + name + ".atlas");
};
var zygame_utils_load_ZMaliveAssets = function() {
	zygame_utils_ZAssets.call(this);
};
$hxClasses["zygame.utils.load.ZMaliveAssets"] = zygame_utils_load_ZMaliveAssets;
zygame_utils_load_ZMaliveAssets.__name__ = "zygame.utils.load.ZMaliveAssets";
zygame_utils_load_ZMaliveAssets.__super__ = zygame_utils_ZAssets;
zygame_utils_load_ZMaliveAssets.prototype = $extend(zygame_utils_ZAssets.prototype,{
	getBitmapData: function(id,foundAtlas) {
		if(foundAtlas == null) {
			foundAtlas = true;
		}
		return zygame_utils_ZAssets.prototype.getBitmapData.call(this,id,foundAtlas);
	}
	,__class__: zygame_utils_load_ZMaliveAssets
});
var zygame_utils_load_Music = function(sound) {
	this._sound = sound;
};
$hxClasses["zygame.utils.load.Music"] = zygame_utils_load_Music;
zygame_utils_load_Music.__name__ = "zygame.utils.load.Music";
zygame_utils_load_Music.prototype = {
	_sound: null
	,path: null
	,play: function(loop) {
		return new zygame_utils_load_MusicChannel(this._sound.play(0,loop));
	}
	,close: function() {
		this._sound.close();
		this._sound = null;
	}
	,__class__: zygame_utils_load_Music
};
var zygame_utils_load_MusicChannel = function(channel) {
	this._channel = channel;
};
$hxClasses["zygame.utils.load.MusicChannel"] = zygame_utils_load_MusicChannel;
zygame_utils_load_MusicChannel.__name__ = "zygame.utils.load.MusicChannel";
zygame_utils_load_MusicChannel.prototype = {
	_channel: null
	,stop: function() {
		this._channel.stop();
		this._channel = null;
	}
	,__class__: zygame_utils_load_MusicChannel
};
var zygame_utils_load_MusicLoader = function(path) {
	this.path = path;
};
$hxClasses["zygame.utils.load.MusicLoader"] = zygame_utils_load_MusicLoader;
zygame_utils_load_MusicLoader.__name__ = "zygame.utils.load.MusicLoader";
zygame_utils_load_MusicLoader.prototype = {
	path: null
	,load: function(call,errorCall) {
		var _gthis = this;
		zygame_utils_AssetsUtils.loadSound(this.path,false).onComplete(function(sound) {
			var music = new zygame_utils_load_Music(sound);
			music.path = _gthis.path;
			call(music);
		}).onError(errorCall);
	}
	,__class__: zygame_utils_load_MusicLoader
};
var zygame_utils_load_SWFLiteLibrary = function(id,uuid) {
	openfl__$internal_formats_swf_SWFLiteLibrary.call(this,id,uuid);
};
$hxClasses["zygame.utils.load.SWFLiteLibrary"] = zygame_utils_load_SWFLiteLibrary;
zygame_utils_load_SWFLiteLibrary.__name__ = "zygame.utils.load.SWFLiteLibrary";
zygame_utils_load_SWFLiteLibrary.__super__ = openfl__$internal_formats_swf_SWFLiteLibrary;
zygame_utils_load_SWFLiteLibrary.prototype = $extend(openfl__$internal_formats_swf_SWFLiteLibrary.prototype,{
	name: null
	,zipList: null
	,load: function() {
		var _gthis = this;
		if(this.zipList == null) {
			return openfl__$internal_formats_swf_SWFLiteLibrary.prototype.load.call(this);
		}
		if(this.id != null) {
			this.preload.h[this.id] = true;
		}
		var promise = new lime_app_Promise();
		this.preloading = true;
		var onComplete = function(data) {
			_gthis.cachedText.h[_gthis.id] = data;
			_gthis.swf = openfl__$internal_formats_swf_SWFLite.unserialize(data);
			_gthis.swf.library = _gthis;
			var bitmapSymbol;
			var symbol = _gthis.swf.symbols.iterator();
			while(symbol.hasNext()) {
				var symbol1 = symbol.next();
				if(((symbol1) instanceof openfl__$internal_symbols_BitmapSymbol)) {
					bitmapSymbol = symbol1;
					if(bitmapSymbol.className != null) {
						_gthis.imageClassNames.h[bitmapSymbol.className] = bitmapSymbol.path;
					}
				}
			}
			openfl__$internal_formats_swf_SWFLite.instances.h[_gthis.instanceID] = _gthis.swf;
			_gthis.__load().onProgress($bind(promise,promise.progress)).onError($bind(promise,promise.error)).onComplete(function(_) {
				_gthis.preloading = false;
				promise.complete(_gthis);
			});
		};
		if(openfl_utils_Assets.exists(this.id)) {
			var id = haxe_ds_StringMap.keysIterator(this.paths.h);
			while(id.hasNext()) {
				var id1 = id.next();
				this.preload.h[id1] = true;
			}
			this.loadText(this.id).onError($bind(promise,promise.error)).onComplete(onComplete);
		} else {
			var id = haxe_ds_StringMap.keysIterator(this.paths.h);
			while(id.hasNext()) {
				var id1 = id.next();
				this.preload.h[id1] = true;
			}
			var path = null;
			if(Object.prototype.hasOwnProperty.call(this.paths.h,this.id)) {
				path = this.paths.h[this.id];
			} else {
				path = this.rootPath != null && this.rootPath != "" ? this.rootPath + "/" + this.id : this.id;
			}
			var binPath = zygame_utils_StringUtils.getName(path);
			var entry = zygame_utils_AssetsUtils.findZipData(this.zipList,binPath);
			var bytes = entry.compressed ? lime__$internal_format_Deflate.decompress(entry.data) : entry.data;
			onComplete(bytes.toString());
		}
		return promise.future;
	}
	,loadText: function(id) {
		if(this.zipList == null) {
			return openfl__$internal_formats_swf_SWFLiteLibrary.prototype.loadText.call(this,id);
		}
		var entry = zygame_utils_AssetsUtils.findZipData(this.zipList,id);
		var bytes = entry.compressed ? lime__$internal_format_Deflate.decompress(entry.data) : entry.data;
		return lime_app_Future.withValue(bytes.toString());
	}
	,loadImage: function(id) {
		if(this.zipList == null) {
			return openfl__$internal_formats_swf_SWFLiteLibrary.prototype.loadImage.call(this,id);
		}
		var entry = zygame_utils_AssetsUtils.findZipData(this.zipList,id);
		var bytes = entry.compressed ? lime__$internal_format_Deflate.decompress(entry.data) : entry.data;
		return lime_graphics_Image.loadFromBytes(bytes);
	}
	,__loadImage: function(id) {
		if(this.zipList == null) {
			return openfl__$internal_formats_swf_SWFLiteLibrary.prototype.__loadImage.call(this,id);
		}
		return openfl__$internal_formats_swf_SWFLiteLibrary.prototype.loadImage.call(this,id);
	}
	,releaseZip: function() {
		if(this.zipList != null) {
			this.zipList.clear();
			this.zipList = null;
		}
	}
	,unload: function() {
		openfl__$internal_formats_swf_SWFLiteLibrary.prototype.unload.call(this);
		var images = this.cachedImages;
		var iter = haxe_ds_StringMap.keysIterator(images.h);
		while(iter.hasNext()) {
			var key = iter.next();
			var img = images.h[key];
			if(Object.prototype.hasOwnProperty.call(images.h,key)) {
				delete(images.h[key]);
			}
		}
		this.cachedImages = null;
	}
	,__class__: zygame_utils_load_SWFLiteLibrary
});
var zygame_utils_load_SWFLiteLoader = function(path,rootPath,isZip) {
	if(isZip == null) {
		isZip = true;
	}
	this._isZip = true;
	this._isZip = isZip;
	this._path = path;
	this._rootPath = rootPath;
};
$hxClasses["zygame.utils.load.SWFLiteLoader"] = zygame_utils_load_SWFLiteLoader;
zygame_utils_load_SWFLiteLoader.__name__ = "zygame.utils.load.SWFLiteLoader";
zygame_utils_load_SWFLiteLoader.prototype = {
	_path: null
	,_rootPath: null
	,_isZip: null
	,onSwfliteParse: function(bytes,call,errorCall) {
		var _gthis = this;
		var input = new haxe_io_BytesInput(bytes);
		var zip = new haxe_zip_Reader(input);
		var list = zip.read();
		var entry = zygame_utils_AssetsUtils.findZipData(list,"library.json");
		if(entry != null) {
			var bytes = entry.compressed ? lime__$internal_format_Deflate.decompress(entry.data) : entry.data;
			lime_utils_AssetManifest.loadFromBytes(bytes,this._rootPath).onComplete(function(manifest) {
				manifest.libraryType = "zygame.utils.load.SWFLiteLibrary";
				var swf = _gthis.fromManifest(manifest,list);
				swf.name = zygame_utils_StringUtils.getName(_gthis._path);
				swf.load().onComplete(function(_) {
					swf.releaseZip();
					call(swf);
				}).onError(function(_) {
					errorCall("加载SWFLite文件失败");
				});
			}).onError(function(err) {
				errorCall("加载SWFLite文件失败");
			});
		} else {
			errorCall("非SWFLite文件");
		}
	}
	,load: function(call,errorCall) {
		var _gthis = this;
		if(this._isZip) {
			zygame_utils_AssetsUtils.loadBytes(this._path,false).onComplete(function(bytes) {
				_gthis.onSwfliteParse(bytes,call,errorCall);
			}).onError(function(data) {
				errorCall(data);
			});
		} else {
			openfl_utils_AssetLibrary.loadFromFile(zygame_utils_AssetsUtils.ofPath(this._path),"").onComplete(function(library) {
				if(((library) instanceof zygame_utils_load_SWFLiteLibrary)) {
					(js_Boot.__cast(library , zygame_utils_load_SWFLiteLibrary)).name = zygame_utils_StringUtils.getName(_gthis._path);
					call(library);
				} else {
					throw haxe_Exception.thrown("SWF is not zygame.utils.load.SWFLiteLibrary classes!");
				}
			}).onError(function(msg) {
				errorCall(msg);
			});
		}
	}
	,fromManifest: function(manifest,list) {
		if(manifest == null) {
			return null;
		}
		var library = null;
		var name = manifest.libraryType;
		var libraryClass = $hxClasses[name];
		if(libraryClass != null) {
			library = Type.createInstance(libraryClass,manifest.libraryArgs);
			library.zipList = list;
		} else {
			return null;
		}
		library.__fromManifest(manifest);
		return library;
	}
	,__class__: zygame_utils_load_SWFLiteLoader
};
var zygame_utils_load_SpineTextureAtalsLoader = function(textjson,texpath) {
	this._texPath = texpath;
	this._texJson = textjson;
	this.path = textjson;
};
$hxClasses["zygame.utils.load.SpineTextureAtalsLoader"] = zygame_utils_load_SpineTextureAtalsLoader;
zygame_utils_load_SpineTextureAtalsLoader.__name__ = "zygame.utils.load.SpineTextureAtalsLoader";
zygame_utils_load_SpineTextureAtalsLoader.prototype = {
	_texPath: null
	,_texs: null
	,_texJson: null
	,_errorCall: null
	,_call: null
	,path: null
	,load: function(call,errorCall) {
		this._errorCall = errorCall;
		this._call = call;
		this._texs = new haxe_ds_StringMap();
		this.next();
	}
	,next: function() {
		var _gthis = this;
		if(this._texPath.length > 0) {
			var path = this._texPath.shift();
			zygame_utils_AssetsUtils.loadBitmapData(path,false).onComplete(function(bitmapData) {
				var this1 = _gthis._texs;
				var key = zygame_utils_StringUtils.getName(path);
				this1.h[key] = bitmapData;
				_gthis.next();
			}).onError(this._errorCall);
		} else {
			zygame_utils_AssetsUtils.loadText(this._texJson).onComplete(function(data) {
				var spine = new zygame_utils_load_SpineTextureAtals(_gthis._texs,data);
				spine.path = _gthis.path;
				_gthis._call(spine);
			}).onError(this._errorCall);
		}
	}
	,__class__: zygame_utils_load_SpineTextureAtalsLoader
};
var zygame_utils_load_SpineTextureAtals = function(maps,data) {
	this.id = null;
	this.path = null;
	zygame_utils_load_Atlas.call(this);
	this._bitmapDatas = maps;
	this._data = data;
	this._skeletonData = new haxe_ds_StringMap();
};
$hxClasses["zygame.utils.load.SpineTextureAtals"] = zygame_utils_load_SpineTextureAtals;
zygame_utils_load_SpineTextureAtals.__name__ = "zygame.utils.load.SpineTextureAtals";
zygame_utils_load_SpineTextureAtals.__super__ = zygame_utils_load_Atlas;
zygame_utils_load_SpineTextureAtals.prototype = $extend(zygame_utils_load_Atlas.prototype,{
	_tilemapSkeletonManager: null
	,_spriteSkeletonManager: null
	,_bitmapDatas: null
	,_data: null
	,_skeletonData: null
	,path: null
	,id: null
	,loader: null
	,getTilemapSkeletonManager: function() {
		if(this._tilemapSkeletonManager == null) {
			this.loader = new spine_tilemap_BitmapDataTextureLoader(this._bitmapDatas);
			var atlas = new spine_support_graphics_TextureAtlas(this._data,this.loader);
			this._tilemapSkeletonManager = new spine_SkeletonJson(new spine_attachments_AtlasAttachmentLoader(atlas));
		}
		return this._tilemapSkeletonManager;
	}
	,getSpriteSkeletonManager: function() {
		if(this._spriteSkeletonManager == null) {
			var loader = new spine_openfl_BitmapDataTextureLoader(this._bitmapDatas);
			var atlas = new spine_support_graphics_TextureAtlas(this._data,loader);
			this._spriteSkeletonManager = new spine_SkeletonJson(new spine_attachments_AtlasAttachmentLoader(atlas));
		}
		return this._spriteSkeletonManager;
	}
	,buildSpriteSkeletonData: function(id,data) {
		if(Object.prototype.hasOwnProperty.call(this._skeletonData.h,id)) {
			return this._skeletonData.h[id];
		}
		var _this = this.getSpriteSkeletonManager();
		var file = new spine_SkeletonDataFileHandle(null,data);
		if(file == null) {
			throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("file cannot be null."));
		}
		var scale = _this.scale;
		var skeletonData = new spine_SkeletonData();
		skeletonData.name = spine_support_extensions_FileExtensions.nameWithoutExtension(file);
		var root = new spine_support_utils_JsonReader().parse(file);
		var skeletonMap = root.get("skeleton");
		if(skeletonMap != null) {
			skeletonData.hash = skeletonMap.getString("hash",null);
			skeletonData.version = skeletonMap.getString("spine",null);
			skeletonData.width = skeletonMap.getFloat("width",0);
			skeletonData.height = skeletonMap.getFloat("height",0);
			skeletonData.fps = skeletonMap.getFloat("fps",30);
			skeletonData.imagesPath = skeletonMap.getString("images",null);
		}
		var boneMap = root.getChild("bones");
		while(boneMap != null) {
			var parent = null;
			var parentName = boneMap.getString("parent",null);
			if(parentName != null) {
				parent = skeletonData.findBone(parentName);
				if(parent == null) {
					throw haxe_Exception.thrown(new spine_support_utils_SerializationException("Parent bone not found: " + parentName));
				}
			}
			var data = new spine_BoneData(skeletonData.bones.length,boneMap.getString("name"),parent);
			data.length = boneMap.getFloat("length",0) * scale;
			data.x = boneMap.getFloat("x",0) * scale;
			data.y = boneMap.getFloat("y",0) * scale;
			data.rotation = boneMap.getFloat("rotation",0);
			data.scaleX = boneMap.getFloat("scaleX",1);
			data.scaleY = boneMap.getFloat("scaleY",1);
			data.shearX = boneMap.getFloat("shearX",0);
			data.shearY = boneMap.getFloat("shearY",0);
			var tmp;
			switch(boneMap.getString("transform","normal")) {
			case "noRotationOrReflection":
				tmp = 2;
				break;
			case "noScale":
				tmp = 3;
				break;
			case "noScaleOrReflection":
				tmp = 4;
				break;
			case "normal":
				tmp = 0;
				break;
			case "onlyTranslation":
				tmp = 1;
				break;
			default:
				tmp = 0;
			}
			data.transformMode = tmp;
			var color = boneMap.getString("color",null);
			if(color != null) {
				data.color.set(spine_support_graphics_Color.valueOf(color));
			}
			skeletonData.bones.push(data);
			boneMap = boneMap.get_next();
		}
		var slotMap = root.getChild("slots");
		while(slotMap != null) {
			var slotName = slotMap.getString("name");
			var boneName = slotMap.getString("bone");
			var boneData = skeletonData.findBone(boneName);
			if(boneData == null) {
				throw haxe_Exception.thrown(new spine_support_utils_SerializationException("Slot bone not found: " + boneName));
			}
			var data = new spine_SlotData(skeletonData.slots.length,slotName,boneData);
			var color = slotMap.getString("color",null);
			if(color != null) {
				data.color.set(spine_support_graphics_Color.valueOf(color));
			}
			var dark = slotMap.getString("dark",null);
			if(dark != null) {
				data.darkColor = spine_support_graphics_Color.valueOf(dark);
			}
			data.attachmentName = slotMap.getString("attachment",null);
			var tmp;
			switch(slotMap.getString("blend","normal")) {
			case "additive":
				tmp = 1;
				break;
			case "multiply":
				tmp = 2;
				break;
			case "normal":
				tmp = 0;
				break;
			case "screen":
				tmp = 3;
				break;
			default:
				tmp = 0;
			}
			data.blendMode = tmp;
			skeletonData.slots.push(data);
			slotMap = slotMap.get_next();
		}
		var constraintMap = root.getChild("ik");
		while(constraintMap != null) {
			var data = new spine_IkConstraintData(constraintMap.getString("name"));
			data.order = constraintMap.getInt("order",0);
			var boneMap = constraintMap.getChild("bones");
			while(boneMap != null) {
				var boneName = boneMap.asString();
				var bone = skeletonData.findBone(boneName);
				if(bone == null) {
					throw haxe_Exception.thrown(new spine_support_utils_SerializationException("IK bone not found: " + boneName));
				}
				data.bones.push(bone);
				boneMap = boneMap.get_next();
			}
			var targetName = constraintMap.getString("target");
			data.target = skeletonData.findBone(targetName);
			if(data.target == null) {
				throw haxe_Exception.thrown(new spine_support_utils_SerializationException("IK target bone not found: " + targetName));
			}
			data.bendDirection = constraintMap.getBoolean("bendPositive",true) ? 1 : -1;
			data.mix = constraintMap.getFloat("mix",1);
			skeletonData.ikConstraints.push(data);
			constraintMap = constraintMap.get_next();
		}
		var constraintMap = root.getChild("transform");
		while(constraintMap != null) {
			var data = new spine_TransformConstraintData(constraintMap.getString("name"));
			data.order = constraintMap.getInt("order",0);
			var boneMap = constraintMap.getChild("bones");
			while(boneMap != null) {
				var boneName = boneMap.asString();
				var bone = skeletonData.findBone(boneName);
				if(bone == null) {
					throw haxe_Exception.thrown(new spine_support_utils_SerializationException("Transform constraint bone not found: " + boneName));
				}
				data.bones.push(bone);
				boneMap = boneMap.get_next();
			}
			var targetName = constraintMap.getString("target");
			data.target = skeletonData.findBone(targetName);
			if(data.target == null) {
				throw haxe_Exception.thrown(new spine_support_utils_SerializationException("Transform constraint target bone not found: " + targetName));
			}
			data.local = constraintMap.getBoolean("local",false);
			data.relative = constraintMap.getBoolean("relative",false);
			data.offsetRotation = constraintMap.getFloat("rotation",0);
			data.offsetX = constraintMap.getFloat("x",0) * scale;
			data.offsetY = constraintMap.getFloat("y",0) * scale;
			data.offsetScaleX = constraintMap.getFloat("scaleX",0);
			data.offsetScaleY = constraintMap.getFloat("scaleY",0);
			data.offsetShearY = constraintMap.getFloat("shearY",0);
			data.rotateMix = constraintMap.getFloat("rotateMix",1);
			data.translateMix = constraintMap.getFloat("translateMix",1);
			data.scaleMix = constraintMap.getFloat("scaleMix",1);
			data.shearMix = constraintMap.getFloat("shearMix",1);
			skeletonData.transformConstraints.push(data);
			constraintMap = constraintMap.get_next();
		}
		var constraintMap = root.getChild("path");
		while(constraintMap != null) {
			var data = new spine_PathConstraintData(constraintMap.getString("name"));
			data.order = constraintMap.getInt("order",0);
			var boneMap = constraintMap.getChild("bones");
			while(boneMap != null) {
				var boneName = boneMap.asString();
				var bone = skeletonData.findBone(boneName);
				if(bone == null) {
					throw haxe_Exception.thrown(new spine_support_utils_SerializationException("Path bone not found: " + boneName));
				}
				data.bones.push(bone);
				boneMap = boneMap.get_next();
			}
			var targetName = constraintMap.getString("target");
			data.target = skeletonData.findSlot(targetName);
			if(data.target == null) {
				throw haxe_Exception.thrown(new spine_support_utils_SerializationException("Path target slot not found: " + targetName));
			}
			var tmp;
			switch(constraintMap.getString("positionMode","percent")) {
			case "fixed":
				tmp = 0;
				break;
			case "percent":
				tmp = 1;
				break;
			default:
				tmp = 0;
			}
			data.positionMode = tmp;
			var tmp1;
			switch(constraintMap.getString("spacingMode","length")) {
			case "fixed":
				tmp1 = 1;
				break;
			case "length":
				tmp1 = 0;
				break;
			case "percent":
				tmp1 = 2;
				break;
			default:
				tmp1 = 0;
			}
			data.spacingMode = tmp1;
			var tmp2;
			switch(constraintMap.getString("rotateMode","tangent")) {
			case "chain":
				tmp2 = 1;
				break;
			case "chainScale":
				tmp2 = 2;
				break;
			case "tangent":
				tmp2 = 0;
				break;
			default:
				tmp2 = 0;
			}
			data.rotateMode = tmp2;
			data.offsetRotation = constraintMap.getFloat("rotation",0);
			data.position = constraintMap.getFloat("position",0);
			if(data.positionMode == 0) {
				data.position *= scale;
			}
			data.spacing = constraintMap.getFloat("spacing",0);
			if(data.spacingMode == 0 || data.spacingMode == 1) {
				data.spacing *= scale;
			}
			data.rotateMix = constraintMap.getFloat("rotateMix",1);
			data.translateMix = constraintMap.getFloat("translateMix",1);
			skeletonData.pathConstraints.push(data);
			constraintMap = constraintMap.get_next();
		}
		var skinMap = root.getChild("skins");
		while(skinMap != null) {
			var skin = new spine_Skin(skinMap.get_name());
			var slotEntry = skinMap.get_child();
			while(slotEntry != null) {
				var slot = skeletonData.findSlot(slotEntry.get_name());
				if(slot == null) {
					throw haxe_Exception.thrown(new spine_support_utils_SerializationException("Slot not found: " + slotEntry.get_name()));
				}
				var entry = slotEntry.get_child();
				while(entry != null) {
					try {
						var attachment = _this.readAttachment(entry,skin,slot.index,entry.get_name(),skeletonData);
						if(attachment != null) {
							var slotIndex = slot.index;
							var name = entry.get_name();
							if(attachment == null) {
								throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("attachment cannot be null."));
							}
							if(slotIndex < 0) {
								throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("slotIndex must be >= 0."));
							}
							var key = skin.keyPool.obtain();
							if(name == null) {
								throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("name cannot be null."));
							}
							key.slotIndex = slotIndex;
							key.name = name;
							var hash = 0;
							var chr;
							var tmp;
							if(name.length == 0) {
								tmp = hash;
							} else {
								var _g = 0;
								var _g1 = name.length;
								while(_g < _g1) {
									var i = _g++;
									chr = HxOverrides.cca(name,i);
									hash = (hash << 5) - hash + chr;
								}
								tmp = hash;
							}
							key.hashCode = 31 * (31 + tmp) + slotIndex;
							spine_support_utils_ObjectMap.put(skin.attachments,key,attachment);
						}
					} catch( _g2 ) {
						haxe_NativeStackTrace.lastError = _g2;
						var ex = haxe_Exception.caught(_g2).unwrap();
						throw haxe_Exception.thrown(new spine_support_utils_SerializationException("Error reading attachment: " + entry.get_name() + ", skin: " + Std.string(skin),ex));
					}
					entry = entry.get_next();
				}
				slotEntry = slotEntry.get_next();
			}
			skeletonData.skins.push(skin);
			if(skin.name == "default") {
				skeletonData.defaultSkin = skin;
			}
			skinMap = skinMap.get_next();
		}
		var i = 0;
		var n = _this.linkedMeshes.length;
		while(i < n) {
			var linkedMesh = _this.linkedMeshes[i];
			var skin = linkedMesh.skin == null ? skeletonData.getDefaultSkin() : skeletonData.findSkin(linkedMesh.skin);
			if(skin == null) {
				throw haxe_Exception.thrown(new spine_support_utils_SerializationException("Skin not found: " + linkedMesh.skin));
			}
			var slotIndex = linkedMesh.slotIndex;
			var name = linkedMesh.parent;
			if(slotIndex < 0) {
				throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("slotIndex must be >= 0."));
			}
			var _this1 = skin.lookup;
			if(name == null) {
				throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("name cannot be null."));
			}
			_this1.slotIndex = slotIndex;
			_this1.name = name;
			var hash = 0;
			var chr;
			var tmp;
			if(name.length == 0) {
				tmp = hash;
			} else {
				var _g = 0;
				var _g1 = name.length;
				while(_g < _g1) {
					var i1 = _g++;
					chr = HxOverrides.cca(name,i1);
					hash = (hash << 5) - hash + chr;
				}
				tmp = hash;
			}
			_this1.hashCode = 31 * (31 + tmp) + slotIndex;
			var parent = spine_support_utils_ObjectMap.get(skin.attachments,skin.lookup);
			if(parent == null) {
				throw haxe_Exception.thrown(new spine_support_utils_SerializationException("Parent mesh not found: " + linkedMesh.parent));
			}
			var _this2 = linkedMesh.mesh;
			var parentMesh = js_Boot.__cast(parent , spine_attachments_MeshAttachment);
			_this2.parentMesh = parentMesh;
			if(parentMesh != null) {
				_this2.bones = parentMesh.bones;
				_this2.vertices = parentMesh.vertices;
				_this2.regionUVs = parentMesh.regionUVs;
				_this2.triangles = parentMesh.triangles;
				_this2.hullLength = parentMesh.hullLength;
				_this2.worldVerticesLength = parentMesh.worldVerticesLength;
				_this2.edges = parentMesh.edges;
				_this2.width = parentMesh.width;
				_this2.height = parentMesh.height;
			}
			var _this3 = linkedMesh.mesh;
			var u = 0;
			var v = 0;
			var width = 0;
			var height = 0;
			if(_this3.region == null) {
				v = 0;
				u = v;
				height = 1;
				width = height;
			} else {
				u = _this3.region.u;
				v = _this3.region.v;
				width = _this3.region.u2 - u;
				height = _this3.region.v2 - v;
			}
			var regionUVs = _this3.regionUVs;
			if(_this3.uvs == null || _this3.uvs.length != regionUVs.length) {
				var length = regionUVs.length;
				if(length == null) {
					length = 0;
				}
				var len = length | 0;
				var capacity = len != 0 ? len : 16;
				var this1 = [];
				var array = this1;
				if(length > 0) {
					var len1 = array.length;
					if(len1 > len) {
						array.splice(len,len - len1);
					} else if(len1 < len) {
						while(len1 < len) {
							array.push(0);
							++len1;
						}
					}
				}
				_this3.uvs = array;
			}
			var uvs = _this3.uvs;
			if(((_this3.region) instanceof spine_support_graphics_AtlasRegion) && (js_Boot.__cast(_this3.region , spine_support_graphics_AtlasRegion)).rotate) {
				var i2 = 0;
				var n1 = uvs.length;
				while(i2 < n1) {
					uvs[i2] = u + regionUVs[i2 + 1] * width;
					uvs[i2 + 1] = v + height - regionUVs[i2] * height;
					i2 += 2;
				}
			} else {
				var i3 = 0;
				var n2 = uvs.length;
				while(i3 < n2) {
					uvs[i3] = u + regionUVs[i3] * width;
					uvs[i3 + 1] = v + regionUVs[i3 + 1] * height;
					i3 += 2;
				}
			}
			++i;
		}
		var this1 = _this.linkedMeshes;
		this1.splice(0,this1.length);
		var eventMap = root.getChild("events");
		while(eventMap != null) {
			var data = new spine_EventData(eventMap.get_name());
			data.intValue = eventMap.getInt("int",0);
			data.floatValue = eventMap.getFloat("float",0);
			data.stringValue = eventMap.getString("string","");
			skeletonData.events.push(data);
			eventMap = eventMap.get_next();
		}
		var animationMap = root.getChild("animations");
		while(animationMap != null) {
			try {
				var name = animationMap.get_name();
				var scale = _this.scale;
				var this1 = [];
				var timelines = this1;
				var duration = 0;
				var slotMap = animationMap.getChild("slots");
				while(slotMap != null) {
					var slot = skeletonData.findSlot(slotMap.get_name());
					if(slot == null) {
						throw haxe_Exception.thrown(new spine_support_utils_SerializationException("Slot not found: " + slotMap.get_name()));
					}
					var timelineMap = slotMap.get_child();
					while(timelineMap != null) {
						var timelineName = timelineMap.get_name();
						if(timelineName == "attachment") {
							var timeline = new spine_AttachmentTimeline(timelineMap.get_size());
							timeline.slotIndex = slot.index;
							var frameIndex = 0;
							var valueMap = timelineMap.get_child();
							while(valueMap != null) {
								var frameIndex1 = frameIndex++;
								var time = valueMap.getFloat("time");
								var attachmentName = valueMap.getString("name");
								timeline.frames[frameIndex1] = time;
								timeline.attachmentNames[frameIndex1] = attachmentName;
								valueMap = valueMap.get_next();
							}
							timelines.push(timeline);
							duration = Math.max(duration,timeline.frames[timeline.frames.length - 1]);
						} else if(timelineName == "color") {
							var timeline1 = new spine_ColorTimeline(timelineMap.get_size());
							timeline1.slotIndex = slot.index;
							var frameIndex2 = 0;
							var valueMap1 = timelineMap.get_child();
							while(valueMap1 != null) {
								var color = spine_support_graphics_Color.valueOf(valueMap1.getString("color"));
								var frameIndex3 = frameIndex2;
								var time1 = valueMap1.getFloat("time");
								frameIndex3 *= 5;
								timeline1.frames[frameIndex3] = time1;
								timeline1.frames[frameIndex3 + 1] = color.r;
								timeline1.frames[frameIndex3 + 2] = color.g;
								timeline1.frames[frameIndex3 + 3] = color.b;
								timeline1.frames[frameIndex3 + 4] = color.a;
								var curve = valueMap1.get("curve");
								if(curve != null) {
									if(curve.isString() && curve.asString() == "stepped") {
										timeline1.curves[frameIndex2 * 19] = 1;
									} else if(curve.isArray()) {
										timeline1.setCurve(frameIndex2,curve.getFloat(0),curve.getFloat(1),curve.getFloat(2),curve.getFloat(3));
									}
								}
								++frameIndex2;
								valueMap1 = valueMap1.get_next();
							}
							timelines.push(timeline1);
							duration = Math.max(duration,timeline1.frames[((timeline1.curves.length / 19 + 1 | 0) - 1) * 5]);
						} else if(timelineName == "twoColor") {
							var timeline2 = new spine_TwoColorTimeline(timelineMap.get_size());
							timeline2.slotIndex = slot.index;
							var frameIndex4 = 0;
							var valueMap2 = timelineMap.get_child();
							while(valueMap2 != null) {
								var light = spine_support_graphics_Color.valueOf(valueMap2.getString("light"));
								var dark = spine_support_graphics_Color.valueOf(valueMap2.getString("dark"));
								var frameIndex5 = frameIndex4;
								var time2 = valueMap2.getFloat("time");
								frameIndex5 *= 8;
								timeline2.frames[frameIndex5] = time2;
								timeline2.frames[frameIndex5 + 1] = light.r;
								timeline2.frames[frameIndex5 + 2] = light.g;
								timeline2.frames[frameIndex5 + 3] = light.b;
								timeline2.frames[frameIndex5 + 4] = light.a;
								timeline2.frames[frameIndex5 + 5] = dark.r;
								timeline2.frames[frameIndex5 + 6] = dark.g;
								timeline2.frames[frameIndex5 + 7] = dark.b;
								var curve1 = valueMap2.get("curve");
								if(curve1 != null) {
									if(curve1.isString() && curve1.asString() == "stepped") {
										timeline2.curves[frameIndex4 * 19] = 1;
									} else if(curve1.isArray()) {
										timeline2.setCurve(frameIndex4,curve1.getFloat(0),curve1.getFloat(1),curve1.getFloat(2),curve1.getFloat(3));
									}
								}
								++frameIndex4;
								valueMap2 = valueMap2.get_next();
							}
							timelines.push(timeline2);
							duration = Math.max(duration,timeline2.frames[((timeline2.curves.length / 19 + 1 | 0) - 1) * 8]);
						} else {
							throw haxe_Exception.thrown(new spine_support_error_RuntimeException("Invalid timeline type for a slot: " + timelineName + " (" + slotMap.get_name() + ")"));
						}
						timelineMap = timelineMap.get_next();
					}
					slotMap = slotMap.get_next();
				}
				var boneMap = animationMap.getChild("bones");
				while(boneMap != null) {
					var bone = skeletonData.findBone(boneMap.get_name());
					if(bone == null) {
						throw haxe_Exception.thrown(new spine_support_utils_SerializationException("Bone not found: " + boneMap.get_name()));
					}
					var timelineMap1 = boneMap.get_child();
					while(timelineMap1 != null) {
						var timelineName1 = timelineMap1.get_name();
						if(timelineName1 == "rotate") {
							var timeline3 = new spine_RotateTimeline(timelineMap1.get_size());
							timeline3.boneIndex = bone.index;
							var frameIndex6 = 0;
							var valueMap3 = timelineMap1.get_child();
							while(valueMap3 != null) {
								var frameIndex7 = frameIndex6;
								var time3 = valueMap3.getFloat("time");
								var degrees = valueMap3.getFloat("angle");
								frameIndex7 <<= 1;
								timeline3.frames[frameIndex7] = time3;
								timeline3.frames[frameIndex7 + 1] = degrees;
								var curve2 = valueMap3.get("curve");
								if(curve2 != null) {
									if(curve2.isString() && curve2.asString() == "stepped") {
										timeline3.curves[frameIndex6 * 19] = 1;
									} else if(curve2.isArray()) {
										timeline3.setCurve(frameIndex6,curve2.getFloat(0),curve2.getFloat(1),curve2.getFloat(2),curve2.getFloat(3));
									}
								}
								++frameIndex6;
								valueMap3 = valueMap3.get_next();
							}
							timelines.push(timeline3);
							duration = Math.max(duration,timeline3.frames[((timeline3.curves.length / 19 + 1 | 0) - 1) * 2]);
						} else if(timelineName1 == "translate" || timelineName1 == "scale" || timelineName1 == "shear") {
							var timeline4 = null;
							var timelineScale = 1;
							if(timelineName1 == "scale") {
								timeline4 = new spine_ScaleTimeline(timelineMap1.get_size());
							} else if(timelineName1 == "shear") {
								timeline4 = new spine_ShearTimeline(timelineMap1.get_size());
							} else {
								timeline4 = new spine_TranslateTimeline(timelineMap1.get_size());
								timelineScale = scale;
							}
							timeline4.boneIndex = bone.index;
							var frameIndex8 = 0;
							var valueMap4 = timelineMap1.get_child();
							while(valueMap4 != null) {
								var x = valueMap4.getFloat("x",0);
								var y = valueMap4.getFloat("y",0);
								var frameIndex9 = frameIndex8;
								var time4 = valueMap4.getFloat("time");
								frameIndex9 *= 3;
								timeline4.frames[frameIndex9] = time4;
								timeline4.frames[frameIndex9 + 1] = x * timelineScale;
								timeline4.frames[frameIndex9 + 2] = y * timelineScale;
								var curve3 = valueMap4.get("curve");
								if(curve3 != null) {
									if(curve3.isString() && curve3.asString() == "stepped") {
										timeline4.curves[frameIndex8 * 19] = 1;
									} else if(curve3.isArray()) {
										timeline4.setCurve(frameIndex8,curve3.getFloat(0),curve3.getFloat(1),curve3.getFloat(2),curve3.getFloat(3));
									}
								}
								++frameIndex8;
								valueMap4 = valueMap4.get_next();
							}
							timelines.push(timeline4);
							duration = Math.max(duration,timeline4.frames[((timeline4.curves.length / 19 + 1 | 0) - 1) * 3]);
						} else {
							throw haxe_Exception.thrown(new spine_support_error_RuntimeException("Invalid timeline type for a bone: " + timelineName1 + " (" + boneMap.get_name() + ")"));
						}
						timelineMap1 = timelineMap1.get_next();
					}
					boneMap = boneMap.get_next();
				}
				var constraintMap = animationMap.getChild("ik");
				while(constraintMap != null) {
					var constraint = skeletonData.findIkConstraint(constraintMap.get_name());
					var timeline5 = new spine_IkConstraintTimeline(constraintMap.get_size());
					timeline5.ikConstraintIndex = skeletonData.ikConstraints.indexOf(constraint);
					var frameIndex10 = 0;
					var valueMap5 = constraintMap.get_child();
					while(valueMap5 != null) {
						var frameIndex11 = frameIndex10;
						var time5 = valueMap5.getFloat("time");
						var mix = valueMap5.getFloat("mix",1);
						var bendDirection = valueMap5.getBoolean("bendPositive",true) ? 1 : -1;
						frameIndex11 *= 3;
						timeline5.frames[frameIndex11] = time5;
						timeline5.frames[frameIndex11 + 1] = mix;
						timeline5.frames[frameIndex11 + 2] = bendDirection;
						var curve4 = valueMap5.get("curve");
						if(curve4 != null) {
							if(curve4.isString() && curve4.asString() == "stepped") {
								timeline5.curves[frameIndex10 * 19] = 1;
							} else if(curve4.isArray()) {
								timeline5.setCurve(frameIndex10,curve4.getFloat(0),curve4.getFloat(1),curve4.getFloat(2),curve4.getFloat(3));
							}
						}
						++frameIndex10;
						valueMap5 = valueMap5.get_next();
					}
					timelines.push(timeline5);
					duration = Math.max(duration,timeline5.frames[((timeline5.curves.length / 19 + 1 | 0) - 1) * 3]);
					constraintMap = constraintMap.get_next();
				}
				var constraintMap1 = animationMap.getChild("transform");
				while(constraintMap1 != null) {
					var constraint1 = skeletonData.findTransformConstraint(constraintMap1.get_name());
					var timeline6 = new spine_TransformConstraintTimeline(constraintMap1.get_size());
					timeline6.transformConstraintIndex = skeletonData.transformConstraints.indexOf(constraint1);
					var frameIndex12 = 0;
					var valueMap6 = constraintMap1.get_child();
					while(valueMap6 != null) {
						var frameIndex13 = frameIndex12;
						var time6 = valueMap6.getFloat("time");
						var rotateMix = valueMap6.getFloat("rotateMix",1);
						var translateMix = valueMap6.getFloat("translateMix",1);
						var scaleMix = valueMap6.getFloat("scaleMix",1);
						var shearMix = valueMap6.getFloat("shearMix",1);
						frameIndex13 *= 5;
						timeline6.frames[frameIndex13] = time6;
						timeline6.frames[frameIndex13 + 1] = rotateMix;
						timeline6.frames[frameIndex13 + 2] = translateMix;
						timeline6.frames[frameIndex13 + 3] = scaleMix;
						timeline6.frames[frameIndex13 + 4] = shearMix;
						var curve5 = valueMap6.get("curve");
						if(curve5 != null) {
							if(curve5.isString() && curve5.asString() == "stepped") {
								timeline6.curves[frameIndex12 * 19] = 1;
							} else if(curve5.isArray()) {
								timeline6.setCurve(frameIndex12,curve5.getFloat(0),curve5.getFloat(1),curve5.getFloat(2),curve5.getFloat(3));
							}
						}
						++frameIndex12;
						valueMap6 = valueMap6.get_next();
					}
					timelines.push(timeline6);
					duration = Math.max(duration,timeline6.frames[((timeline6.curves.length / 19 + 1 | 0) - 1) * 5]);
					constraintMap1 = constraintMap1.get_next();
				}
				var constraintMap2 = animationMap.getChild("paths");
				while(constraintMap2 != null) {
					var data = skeletonData.findPathConstraint(constraintMap2.get_name());
					if(data == null) {
						throw haxe_Exception.thrown(new spine_support_utils_SerializationException("Path constraint not found: " + constraintMap2.get_name()));
					}
					var index = skeletonData.pathConstraints.indexOf(data);
					var timelineMap2 = constraintMap2.get_child();
					while(timelineMap2 != null) {
						var timelineName2 = timelineMap2.get_name();
						if(timelineName2 == "position" || timelineName2 == "spacing") {
							var timeline7 = null;
							var timelineScale1 = 1;
							if(timelineName2 == "spacing") {
								timeline7 = new spine_PathConstraintSpacingTimeline(timelineMap2.get_size());
								if(data.spacingMode == 0 || data.spacingMode == 1) {
									timelineScale1 = scale;
								}
							} else {
								timeline7 = new spine_PathConstraintPositionTimeline(timelineMap2.get_size());
								if(data.positionMode == 0) {
									timelineScale1 = scale;
								}
							}
							timeline7.pathConstraintIndex = index;
							var frameIndex14 = 0;
							var valueMap7 = timelineMap2.get_child();
							while(valueMap7 != null) {
								var frameIndex15 = frameIndex14;
								var time7 = valueMap7.getFloat("time");
								var position = valueMap7.getFloat(timelineName2,0) * timelineScale1;
								frameIndex15 *= 2;
								timeline7.frames[frameIndex15] = time7;
								timeline7.frames[frameIndex15 + 1] = position;
								var curve6 = valueMap7.get("curve");
								if(curve6 != null) {
									if(curve6.isString() && curve6.asString() == "stepped") {
										timeline7.curves[frameIndex14 * 19] = 1;
									} else if(curve6.isArray()) {
										timeline7.setCurve(frameIndex14,curve6.getFloat(0),curve6.getFloat(1),curve6.getFloat(2),curve6.getFloat(3));
									}
								}
								++frameIndex14;
								valueMap7 = valueMap7.get_next();
							}
							timelines.push(timeline7);
							duration = Math.max(duration,timeline7.frames[((timeline7.curves.length / 19 + 1 | 0) - 1) * 2]);
						} else if(timelineName2 == "mix") {
							var timeline8 = new spine_PathConstraintMixTimeline(timelineMap2.get_size());
							timeline8.pathConstraintIndex = index;
							var frameIndex16 = 0;
							var valueMap8 = timelineMap2.get_child();
							while(valueMap8 != null) {
								var frameIndex17 = frameIndex16;
								var time8 = valueMap8.getFloat("time");
								var rotateMix1 = valueMap8.getFloat("rotateMix",1);
								var translateMix1 = valueMap8.getFloat("translateMix",1);
								frameIndex17 *= 3;
								timeline8.frames[frameIndex17] = time8;
								timeline8.frames[frameIndex17 + 1] = rotateMix1;
								timeline8.frames[frameIndex17 + 2] = translateMix1;
								var curve7 = valueMap8.get("curve");
								if(curve7 != null) {
									if(curve7.isString() && curve7.asString() == "stepped") {
										timeline8.curves[frameIndex16 * 19] = 1;
									} else if(curve7.isArray()) {
										timeline8.setCurve(frameIndex16,curve7.getFloat(0),curve7.getFloat(1),curve7.getFloat(2),curve7.getFloat(3));
									}
								}
								++frameIndex16;
								valueMap8 = valueMap8.get_next();
							}
							timelines.push(timeline8);
							duration = Math.max(duration,timeline8.frames[((timeline8.curves.length / 19 + 1 | 0) - 1) * 3]);
						}
						timelineMap2 = timelineMap2.get_next();
					}
					constraintMap2 = constraintMap2.get_next();
				}
				var deformMap = animationMap.getChild("deform");
				while(deformMap != null) {
					var skin = skeletonData.findSkin(deformMap.get_name());
					if(skin == null) {
						throw haxe_Exception.thrown(new spine_support_utils_SerializationException("Skin not found: " + deformMap.get_name()));
					}
					var slotMap1 = deformMap.get_child();
					while(slotMap1 != null) {
						var slot1 = skeletonData.findSlot(slotMap1.get_name());
						if(slot1 == null) {
							throw haxe_Exception.thrown(new spine_support_utils_SerializationException("Slot not found: " + slotMap1.get_name()));
						}
						var timelineMap3 = slotMap1.get_child();
						while(timelineMap3 != null) {
							var slotIndex = slot1.index;
							var name1 = timelineMap3.get_name();
							if(slotIndex < 0) {
								throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("slotIndex must be >= 0."));
							}
							var _this1 = skin.lookup;
							if(name1 == null) {
								throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("name cannot be null."));
							}
							_this1.slotIndex = slotIndex;
							_this1.name = name1;
							var hash = 0;
							var chr;
							var attachment;
							if(name1.length == 0) {
								attachment = hash;
							} else {
								var _g = 0;
								var _g1 = name1.length;
								while(_g < _g1) {
									var i = _g++;
									chr = HxOverrides.cca(name1,i);
									hash = (hash << 5) - hash + chr;
								}
								attachment = hash;
							}
							_this1.hashCode = 31 * (31 + attachment) + slotIndex;
							var attachment1 = js_Boot.__cast(spine_support_utils_ObjectMap.get(skin.attachments,skin.lookup) , spine_attachments_VertexAttachment);
							if(attachment1 == null) {
								throw haxe_Exception.thrown(new spine_support_utils_SerializationException("Deform attachment not found: " + timelineMap3.get_name()));
							}
							var weighted = attachment1.bones != null;
							var vertices = attachment1.vertices;
							var deformLength = weighted ? vertices.length / 3 * 2 | 0 : vertices.length;
							var timeline9 = new spine_DeformTimeline(timelineMap3.get_size());
							timeline9.slotIndex = slot1.index;
							timeline9.attachment = attachment1;
							var frameIndex18 = 0;
							var valueMap9 = timelineMap3.get_child();
							while(valueMap9 != null) {
								var deform = null;
								var verticesValue = valueMap9.get("vertices");
								if(verticesValue == null) {
									if(weighted) {
										var length = deformLength;
										if(length == null) {
											length = 0;
										}
										var len = length | 0;
										var capacity = len != 0 ? len : 16;
										var this2 = [];
										var array = this2;
										if(length > 0) {
											var len1 = array.length;
											if(len1 > len) {
												array.splice(len,len - len1);
											} else if(len1 < len) {
												while(len1 < len) {
													array.push(0);
													++len1;
												}
											}
										}
										deform = array;
									} else {
										deform = vertices;
									}
								} else {
									var length1 = deformLength;
									if(length1 == null) {
										length1 = 0;
									}
									var len2 = length1 | 0;
									var capacity1 = len2 != 0 ? len2 : 16;
									var this3 = [];
									var array1 = this3;
									if(length1 > 0) {
										var len3 = array1.length;
										if(len3 > len2) {
											array1.splice(len2,len2 - len3);
										} else if(len3 < len2) {
											while(len3 < len2) {
												array1.push(0);
												++len3;
											}
										}
									}
									deform = array1;
									var start = valueMap9.getInt("offset",0);
									spine_support_utils_Array.copy(verticesValue.asFloatArray(),0,deform,start,verticesValue.get_size());
									if(scale != 1) {
										var i1 = start;
										var n = i1 + verticesValue.get_size();
										while(i1 < n) {
											deform[i1] *= scale;
											++i1;
										}
									}
									if(!weighted) {
										var i2 = 0;
										while(i2 < deformLength) {
											deform[i2] += vertices[i2];
											++i2;
										}
									}
								}
								var time9 = valueMap9.getFloat("time");
								timeline9.frames[frameIndex18] = time9;
								timeline9.frameVertices[frameIndex18] = deform;
								var curve8 = valueMap9.get("curve");
								if(curve8 != null) {
									if(curve8.isString() && curve8.asString() == "stepped") {
										timeline9.curves[frameIndex18 * 19] = 1;
									} else if(curve8.isArray()) {
										timeline9.setCurve(frameIndex18,curve8.getFloat(0),curve8.getFloat(1),curve8.getFloat(2),curve8.getFloat(3));
									}
								}
								++frameIndex18;
								valueMap9 = valueMap9.get_next();
							}
							timelines.push(timeline9);
							duration = Math.max(duration,timeline9.frames[(timeline9.curves.length / 19 + 1 | 0) - 1]);
							timelineMap3 = timelineMap3.get_next();
						}
						slotMap1 = slotMap1.get_next();
					}
					deformMap = deformMap.get_next();
				}
				var drawOrdersMap = animationMap.get("drawOrder");
				if(drawOrdersMap == null) {
					drawOrdersMap = animationMap.get("draworder");
				}
				if(drawOrdersMap != null) {
					var timeline10 = new spine_DrawOrderTimeline(drawOrdersMap.get_size());
					var slotCount = skeletonData.slots.length;
					var frameIndex19 = 0;
					var drawOrderMap = drawOrdersMap.get_child();
					while(drawOrderMap != null) {
						var drawOrder = null;
						var offsets = drawOrderMap.get("offsets");
						if(offsets != null) {
							var length2 = slotCount;
							if(length2 == null) {
								length2 = 0;
							}
							var len4 = length2 | 0;
							var capacity2 = len4 != 0 ? len4 : 16;
							var this4 = [];
							var array2 = this4;
							if(length2 != 0) {
								var len5 = array2.length;
								if(len5 > len4) {
									array2.splice(len4,len4 - len5);
								} else if(len5 < len4) {
									while(len5 < len4) {
										array2.push(0);
										++len5;
									}
								}
							}
							drawOrder = array2;
							var i3 = slotCount - 1;
							while(i3 >= 0) {
								drawOrder[i3] = -1;
								--i3;
							}
							var length3 = slotCount - offsets.get_size();
							if(length3 == null) {
								length3 = 0;
							}
							var len6 = length3 | 0;
							var capacity3 = len6 != 0 ? len6 : 16;
							var this5 = [];
							var array3 = this5;
							if(length3 != 0) {
								var len7 = array3.length;
								if(len7 > len6) {
									array3.splice(len6,len6 - len7);
								} else if(len7 < len6) {
									while(len7 < len6) {
										array3.push(0);
										++len7;
									}
								}
							}
							var unchanged = array3;
							var originalIndex = 0;
							var unchangedIndex = 0;
							var offsetMap = offsets.get_child();
							while(offsetMap != null) {
								var slot2 = skeletonData.findSlot(offsetMap.getString("slot"));
								if(slot2 == null) {
									throw haxe_Exception.thrown(new spine_support_utils_SerializationException("Slot not found: " + offsetMap.getString("slot")));
								}
								while(originalIndex != slot2.index) unchanged[unchangedIndex++] = originalIndex++;
								drawOrder[originalIndex++ + offsetMap.getInt("offset")] = originalIndex - 1;
								offsetMap = offsetMap.get_next();
							}
							while(originalIndex < slotCount) unchanged[unchangedIndex++] = originalIndex++;
							var i4 = slotCount - 1;
							while(i4 >= 0) {
								if(drawOrder[i4] == -1) {
									drawOrder[i4] = unchanged[--unchangedIndex];
								}
								--i4;
							}
						}
						var frameIndex20 = frameIndex19++;
						var time10 = drawOrderMap.getFloat("time");
						timeline10.frames[frameIndex20] = time10;
						timeline10.drawOrders[frameIndex20] = drawOrder;
						drawOrderMap = drawOrderMap.get_next();
					}
					timelines.push(timeline10);
					duration = Math.max(duration,timeline10.frames[timeline10.frames.length - 1]);
				}
				var eventsMap = animationMap.get("events");
				if(eventsMap != null) {
					var timeline11 = new spine_EventTimeline(eventsMap.get_size());
					var frameIndex21 = 0;
					var eventMap = eventsMap.get_child();
					while(eventMap != null) {
						var eventData = skeletonData.findEvent(eventMap.getString("name"));
						if(eventData == null) {
							throw haxe_Exception.thrown(new spine_support_utils_SerializationException("Event not found: " + eventMap.getString("name")));
						}
						var event = new spine_Event(eventMap.getFloat("time"),eventData);
						event.intValue = eventMap.getInt("int",eventData.intValue);
						event.floatValue = eventMap.getFloat("float",eventData.floatValue);
						event.stringValue = eventMap.getString("string",eventData.stringValue);
						var frameIndex22 = frameIndex21++;
						timeline11.frames[frameIndex22] = event.time;
						timeline11.events[frameIndex22] = event;
						eventMap = eventMap.get_next();
					}
					timelines.push(timeline11);
					duration = Math.max(duration,timeline11.frames[timeline11.frames.length - 1]);
				}
				skeletonData.animations.push(new spine_Animation(name,timelines,duration));
			} catch( _g2 ) {
				haxe_NativeStackTrace.lastError = _g2;
				var ex = haxe_Exception.caught(_g2).unwrap();
				throw haxe_Exception.thrown(new spine_support_utils_SerializationException("Error reading animation: " + animationMap.get_name(),ex));
			}
			animationMap = animationMap.get_next();
		}
		var skeletonData1 = skeletonData;
		this._skeletonData.h[id] = skeletonData1;
		return skeletonData1;
	}
	,buildTilemapSkeletonData: function(id,data) {
		if(Object.prototype.hasOwnProperty.call(this._skeletonData.h,id)) {
			return this._skeletonData.h[id];
		}
		var _this = this.getTilemapSkeletonManager();
		var file = new spine_SkeletonDataFileHandle(null,data);
		if(file == null) {
			throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("file cannot be null."));
		}
		var scale = _this.scale;
		var skeletonData = new spine_SkeletonData();
		skeletonData.name = spine_support_extensions_FileExtensions.nameWithoutExtension(file);
		var root = new spine_support_utils_JsonReader().parse(file);
		var skeletonMap = root.get("skeleton");
		if(skeletonMap != null) {
			skeletonData.hash = skeletonMap.getString("hash",null);
			skeletonData.version = skeletonMap.getString("spine",null);
			skeletonData.width = skeletonMap.getFloat("width",0);
			skeletonData.height = skeletonMap.getFloat("height",0);
			skeletonData.fps = skeletonMap.getFloat("fps",30);
			skeletonData.imagesPath = skeletonMap.getString("images",null);
		}
		var boneMap = root.getChild("bones");
		while(boneMap != null) {
			var parent = null;
			var parentName = boneMap.getString("parent",null);
			if(parentName != null) {
				parent = skeletonData.findBone(parentName);
				if(parent == null) {
					throw haxe_Exception.thrown(new spine_support_utils_SerializationException("Parent bone not found: " + parentName));
				}
			}
			var data = new spine_BoneData(skeletonData.bones.length,boneMap.getString("name"),parent);
			data.length = boneMap.getFloat("length",0) * scale;
			data.x = boneMap.getFloat("x",0) * scale;
			data.y = boneMap.getFloat("y",0) * scale;
			data.rotation = boneMap.getFloat("rotation",0);
			data.scaleX = boneMap.getFloat("scaleX",1);
			data.scaleY = boneMap.getFloat("scaleY",1);
			data.shearX = boneMap.getFloat("shearX",0);
			data.shearY = boneMap.getFloat("shearY",0);
			var tmp;
			switch(boneMap.getString("transform","normal")) {
			case "noRotationOrReflection":
				tmp = 2;
				break;
			case "noScale":
				tmp = 3;
				break;
			case "noScaleOrReflection":
				tmp = 4;
				break;
			case "normal":
				tmp = 0;
				break;
			case "onlyTranslation":
				tmp = 1;
				break;
			default:
				tmp = 0;
			}
			data.transformMode = tmp;
			var color = boneMap.getString("color",null);
			if(color != null) {
				data.color.set(spine_support_graphics_Color.valueOf(color));
			}
			skeletonData.bones.push(data);
			boneMap = boneMap.get_next();
		}
		var slotMap = root.getChild("slots");
		while(slotMap != null) {
			var slotName = slotMap.getString("name");
			var boneName = slotMap.getString("bone");
			var boneData = skeletonData.findBone(boneName);
			if(boneData == null) {
				throw haxe_Exception.thrown(new spine_support_utils_SerializationException("Slot bone not found: " + boneName));
			}
			var data = new spine_SlotData(skeletonData.slots.length,slotName,boneData);
			var color = slotMap.getString("color",null);
			if(color != null) {
				data.color.set(spine_support_graphics_Color.valueOf(color));
			}
			var dark = slotMap.getString("dark",null);
			if(dark != null) {
				data.darkColor = spine_support_graphics_Color.valueOf(dark);
			}
			data.attachmentName = slotMap.getString("attachment",null);
			var tmp;
			switch(slotMap.getString("blend","normal")) {
			case "additive":
				tmp = 1;
				break;
			case "multiply":
				tmp = 2;
				break;
			case "normal":
				tmp = 0;
				break;
			case "screen":
				tmp = 3;
				break;
			default:
				tmp = 0;
			}
			data.blendMode = tmp;
			skeletonData.slots.push(data);
			slotMap = slotMap.get_next();
		}
		var constraintMap = root.getChild("ik");
		while(constraintMap != null) {
			var data = new spine_IkConstraintData(constraintMap.getString("name"));
			data.order = constraintMap.getInt("order",0);
			var boneMap = constraintMap.getChild("bones");
			while(boneMap != null) {
				var boneName = boneMap.asString();
				var bone = skeletonData.findBone(boneName);
				if(bone == null) {
					throw haxe_Exception.thrown(new spine_support_utils_SerializationException("IK bone not found: " + boneName));
				}
				data.bones.push(bone);
				boneMap = boneMap.get_next();
			}
			var targetName = constraintMap.getString("target");
			data.target = skeletonData.findBone(targetName);
			if(data.target == null) {
				throw haxe_Exception.thrown(new spine_support_utils_SerializationException("IK target bone not found: " + targetName));
			}
			data.bendDirection = constraintMap.getBoolean("bendPositive",true) ? 1 : -1;
			data.mix = constraintMap.getFloat("mix",1);
			skeletonData.ikConstraints.push(data);
			constraintMap = constraintMap.get_next();
		}
		var constraintMap = root.getChild("transform");
		while(constraintMap != null) {
			var data = new spine_TransformConstraintData(constraintMap.getString("name"));
			data.order = constraintMap.getInt("order",0);
			var boneMap = constraintMap.getChild("bones");
			while(boneMap != null) {
				var boneName = boneMap.asString();
				var bone = skeletonData.findBone(boneName);
				if(bone == null) {
					throw haxe_Exception.thrown(new spine_support_utils_SerializationException("Transform constraint bone not found: " + boneName));
				}
				data.bones.push(bone);
				boneMap = boneMap.get_next();
			}
			var targetName = constraintMap.getString("target");
			data.target = skeletonData.findBone(targetName);
			if(data.target == null) {
				throw haxe_Exception.thrown(new spine_support_utils_SerializationException("Transform constraint target bone not found: " + targetName));
			}
			data.local = constraintMap.getBoolean("local",false);
			data.relative = constraintMap.getBoolean("relative",false);
			data.offsetRotation = constraintMap.getFloat("rotation",0);
			data.offsetX = constraintMap.getFloat("x",0) * scale;
			data.offsetY = constraintMap.getFloat("y",0) * scale;
			data.offsetScaleX = constraintMap.getFloat("scaleX",0);
			data.offsetScaleY = constraintMap.getFloat("scaleY",0);
			data.offsetShearY = constraintMap.getFloat("shearY",0);
			data.rotateMix = constraintMap.getFloat("rotateMix",1);
			data.translateMix = constraintMap.getFloat("translateMix",1);
			data.scaleMix = constraintMap.getFloat("scaleMix",1);
			data.shearMix = constraintMap.getFloat("shearMix",1);
			skeletonData.transformConstraints.push(data);
			constraintMap = constraintMap.get_next();
		}
		var constraintMap = root.getChild("path");
		while(constraintMap != null) {
			var data = new spine_PathConstraintData(constraintMap.getString("name"));
			data.order = constraintMap.getInt("order",0);
			var boneMap = constraintMap.getChild("bones");
			while(boneMap != null) {
				var boneName = boneMap.asString();
				var bone = skeletonData.findBone(boneName);
				if(bone == null) {
					throw haxe_Exception.thrown(new spine_support_utils_SerializationException("Path bone not found: " + boneName));
				}
				data.bones.push(bone);
				boneMap = boneMap.get_next();
			}
			var targetName = constraintMap.getString("target");
			data.target = skeletonData.findSlot(targetName);
			if(data.target == null) {
				throw haxe_Exception.thrown(new spine_support_utils_SerializationException("Path target slot not found: " + targetName));
			}
			var tmp;
			switch(constraintMap.getString("positionMode","percent")) {
			case "fixed":
				tmp = 0;
				break;
			case "percent":
				tmp = 1;
				break;
			default:
				tmp = 0;
			}
			data.positionMode = tmp;
			var tmp1;
			switch(constraintMap.getString("spacingMode","length")) {
			case "fixed":
				tmp1 = 1;
				break;
			case "length":
				tmp1 = 0;
				break;
			case "percent":
				tmp1 = 2;
				break;
			default:
				tmp1 = 0;
			}
			data.spacingMode = tmp1;
			var tmp2;
			switch(constraintMap.getString("rotateMode","tangent")) {
			case "chain":
				tmp2 = 1;
				break;
			case "chainScale":
				tmp2 = 2;
				break;
			case "tangent":
				tmp2 = 0;
				break;
			default:
				tmp2 = 0;
			}
			data.rotateMode = tmp2;
			data.offsetRotation = constraintMap.getFloat("rotation",0);
			data.position = constraintMap.getFloat("position",0);
			if(data.positionMode == 0) {
				data.position *= scale;
			}
			data.spacing = constraintMap.getFloat("spacing",0);
			if(data.spacingMode == 0 || data.spacingMode == 1) {
				data.spacing *= scale;
			}
			data.rotateMix = constraintMap.getFloat("rotateMix",1);
			data.translateMix = constraintMap.getFloat("translateMix",1);
			skeletonData.pathConstraints.push(data);
			constraintMap = constraintMap.get_next();
		}
		var skinMap = root.getChild("skins");
		while(skinMap != null) {
			var skin = new spine_Skin(skinMap.get_name());
			var slotEntry = skinMap.get_child();
			while(slotEntry != null) {
				var slot = skeletonData.findSlot(slotEntry.get_name());
				if(slot == null) {
					throw haxe_Exception.thrown(new spine_support_utils_SerializationException("Slot not found: " + slotEntry.get_name()));
				}
				var entry = slotEntry.get_child();
				while(entry != null) {
					try {
						var attachment = _this.readAttachment(entry,skin,slot.index,entry.get_name(),skeletonData);
						if(attachment != null) {
							var slotIndex = slot.index;
							var name = entry.get_name();
							if(attachment == null) {
								throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("attachment cannot be null."));
							}
							if(slotIndex < 0) {
								throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("slotIndex must be >= 0."));
							}
							var key = skin.keyPool.obtain();
							if(name == null) {
								throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("name cannot be null."));
							}
							key.slotIndex = slotIndex;
							key.name = name;
							var hash = 0;
							var chr;
							var tmp;
							if(name.length == 0) {
								tmp = hash;
							} else {
								var _g = 0;
								var _g1 = name.length;
								while(_g < _g1) {
									var i = _g++;
									chr = HxOverrides.cca(name,i);
									hash = (hash << 5) - hash + chr;
								}
								tmp = hash;
							}
							key.hashCode = 31 * (31 + tmp) + slotIndex;
							spine_support_utils_ObjectMap.put(skin.attachments,key,attachment);
						}
					} catch( _g2 ) {
						haxe_NativeStackTrace.lastError = _g2;
						var ex = haxe_Exception.caught(_g2).unwrap();
						throw haxe_Exception.thrown(new spine_support_utils_SerializationException("Error reading attachment: " + entry.get_name() + ", skin: " + Std.string(skin),ex));
					}
					entry = entry.get_next();
				}
				slotEntry = slotEntry.get_next();
			}
			skeletonData.skins.push(skin);
			if(skin.name == "default") {
				skeletonData.defaultSkin = skin;
			}
			skinMap = skinMap.get_next();
		}
		var i = 0;
		var n = _this.linkedMeshes.length;
		while(i < n) {
			var linkedMesh = _this.linkedMeshes[i];
			var skin = linkedMesh.skin == null ? skeletonData.getDefaultSkin() : skeletonData.findSkin(linkedMesh.skin);
			if(skin == null) {
				throw haxe_Exception.thrown(new spine_support_utils_SerializationException("Skin not found: " + linkedMesh.skin));
			}
			var slotIndex = linkedMesh.slotIndex;
			var name = linkedMesh.parent;
			if(slotIndex < 0) {
				throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("slotIndex must be >= 0."));
			}
			var _this1 = skin.lookup;
			if(name == null) {
				throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("name cannot be null."));
			}
			_this1.slotIndex = slotIndex;
			_this1.name = name;
			var hash = 0;
			var chr;
			var tmp;
			if(name.length == 0) {
				tmp = hash;
			} else {
				var _g = 0;
				var _g1 = name.length;
				while(_g < _g1) {
					var i1 = _g++;
					chr = HxOverrides.cca(name,i1);
					hash = (hash << 5) - hash + chr;
				}
				tmp = hash;
			}
			_this1.hashCode = 31 * (31 + tmp) + slotIndex;
			var parent = spine_support_utils_ObjectMap.get(skin.attachments,skin.lookup);
			if(parent == null) {
				throw haxe_Exception.thrown(new spine_support_utils_SerializationException("Parent mesh not found: " + linkedMesh.parent));
			}
			var _this2 = linkedMesh.mesh;
			var parentMesh = js_Boot.__cast(parent , spine_attachments_MeshAttachment);
			_this2.parentMesh = parentMesh;
			if(parentMesh != null) {
				_this2.bones = parentMesh.bones;
				_this2.vertices = parentMesh.vertices;
				_this2.regionUVs = parentMesh.regionUVs;
				_this2.triangles = parentMesh.triangles;
				_this2.hullLength = parentMesh.hullLength;
				_this2.worldVerticesLength = parentMesh.worldVerticesLength;
				_this2.edges = parentMesh.edges;
				_this2.width = parentMesh.width;
				_this2.height = parentMesh.height;
			}
			var _this3 = linkedMesh.mesh;
			var u = 0;
			var v = 0;
			var width = 0;
			var height = 0;
			if(_this3.region == null) {
				v = 0;
				u = v;
				height = 1;
				width = height;
			} else {
				u = _this3.region.u;
				v = _this3.region.v;
				width = _this3.region.u2 - u;
				height = _this3.region.v2 - v;
			}
			var regionUVs = _this3.regionUVs;
			if(_this3.uvs == null || _this3.uvs.length != regionUVs.length) {
				var length = regionUVs.length;
				if(length == null) {
					length = 0;
				}
				var len = length | 0;
				var capacity = len != 0 ? len : 16;
				var this1 = [];
				var array = this1;
				if(length > 0) {
					var len1 = array.length;
					if(len1 > len) {
						array.splice(len,len - len1);
					} else if(len1 < len) {
						while(len1 < len) {
							array.push(0);
							++len1;
						}
					}
				}
				_this3.uvs = array;
			}
			var uvs = _this3.uvs;
			if(((_this3.region) instanceof spine_support_graphics_AtlasRegion) && (js_Boot.__cast(_this3.region , spine_support_graphics_AtlasRegion)).rotate) {
				var i2 = 0;
				var n1 = uvs.length;
				while(i2 < n1) {
					uvs[i2] = u + regionUVs[i2 + 1] * width;
					uvs[i2 + 1] = v + height - regionUVs[i2] * height;
					i2 += 2;
				}
			} else {
				var i3 = 0;
				var n2 = uvs.length;
				while(i3 < n2) {
					uvs[i3] = u + regionUVs[i3] * width;
					uvs[i3 + 1] = v + regionUVs[i3 + 1] * height;
					i3 += 2;
				}
			}
			++i;
		}
		var this1 = _this.linkedMeshes;
		this1.splice(0,this1.length);
		var eventMap = root.getChild("events");
		while(eventMap != null) {
			var data = new spine_EventData(eventMap.get_name());
			data.intValue = eventMap.getInt("int",0);
			data.floatValue = eventMap.getFloat("float",0);
			data.stringValue = eventMap.getString("string","");
			skeletonData.events.push(data);
			eventMap = eventMap.get_next();
		}
		var animationMap = root.getChild("animations");
		while(animationMap != null) {
			try {
				var name = animationMap.get_name();
				var scale = _this.scale;
				var this1 = [];
				var timelines = this1;
				var duration = 0;
				var slotMap = animationMap.getChild("slots");
				while(slotMap != null) {
					var slot = skeletonData.findSlot(slotMap.get_name());
					if(slot == null) {
						throw haxe_Exception.thrown(new spine_support_utils_SerializationException("Slot not found: " + slotMap.get_name()));
					}
					var timelineMap = slotMap.get_child();
					while(timelineMap != null) {
						var timelineName = timelineMap.get_name();
						if(timelineName == "attachment") {
							var timeline = new spine_AttachmentTimeline(timelineMap.get_size());
							timeline.slotIndex = slot.index;
							var frameIndex = 0;
							var valueMap = timelineMap.get_child();
							while(valueMap != null) {
								var frameIndex1 = frameIndex++;
								var time = valueMap.getFloat("time");
								var attachmentName = valueMap.getString("name");
								timeline.frames[frameIndex1] = time;
								timeline.attachmentNames[frameIndex1] = attachmentName;
								valueMap = valueMap.get_next();
							}
							timelines.push(timeline);
							duration = Math.max(duration,timeline.frames[timeline.frames.length - 1]);
						} else if(timelineName == "color") {
							var timeline1 = new spine_ColorTimeline(timelineMap.get_size());
							timeline1.slotIndex = slot.index;
							var frameIndex2 = 0;
							var valueMap1 = timelineMap.get_child();
							while(valueMap1 != null) {
								var color = spine_support_graphics_Color.valueOf(valueMap1.getString("color"));
								var frameIndex3 = frameIndex2;
								var time1 = valueMap1.getFloat("time");
								frameIndex3 *= 5;
								timeline1.frames[frameIndex3] = time1;
								timeline1.frames[frameIndex3 + 1] = color.r;
								timeline1.frames[frameIndex3 + 2] = color.g;
								timeline1.frames[frameIndex3 + 3] = color.b;
								timeline1.frames[frameIndex3 + 4] = color.a;
								var curve = valueMap1.get("curve");
								if(curve != null) {
									if(curve.isString() && curve.asString() == "stepped") {
										timeline1.curves[frameIndex2 * 19] = 1;
									} else if(curve.isArray()) {
										timeline1.setCurve(frameIndex2,curve.getFloat(0),curve.getFloat(1),curve.getFloat(2),curve.getFloat(3));
									}
								}
								++frameIndex2;
								valueMap1 = valueMap1.get_next();
							}
							timelines.push(timeline1);
							duration = Math.max(duration,timeline1.frames[((timeline1.curves.length / 19 + 1 | 0) - 1) * 5]);
						} else if(timelineName == "twoColor") {
							var timeline2 = new spine_TwoColorTimeline(timelineMap.get_size());
							timeline2.slotIndex = slot.index;
							var frameIndex4 = 0;
							var valueMap2 = timelineMap.get_child();
							while(valueMap2 != null) {
								var light = spine_support_graphics_Color.valueOf(valueMap2.getString("light"));
								var dark = spine_support_graphics_Color.valueOf(valueMap2.getString("dark"));
								var frameIndex5 = frameIndex4;
								var time2 = valueMap2.getFloat("time");
								frameIndex5 *= 8;
								timeline2.frames[frameIndex5] = time2;
								timeline2.frames[frameIndex5 + 1] = light.r;
								timeline2.frames[frameIndex5 + 2] = light.g;
								timeline2.frames[frameIndex5 + 3] = light.b;
								timeline2.frames[frameIndex5 + 4] = light.a;
								timeline2.frames[frameIndex5 + 5] = dark.r;
								timeline2.frames[frameIndex5 + 6] = dark.g;
								timeline2.frames[frameIndex5 + 7] = dark.b;
								var curve1 = valueMap2.get("curve");
								if(curve1 != null) {
									if(curve1.isString() && curve1.asString() == "stepped") {
										timeline2.curves[frameIndex4 * 19] = 1;
									} else if(curve1.isArray()) {
										timeline2.setCurve(frameIndex4,curve1.getFloat(0),curve1.getFloat(1),curve1.getFloat(2),curve1.getFloat(3));
									}
								}
								++frameIndex4;
								valueMap2 = valueMap2.get_next();
							}
							timelines.push(timeline2);
							duration = Math.max(duration,timeline2.frames[((timeline2.curves.length / 19 + 1 | 0) - 1) * 8]);
						} else {
							throw haxe_Exception.thrown(new spine_support_error_RuntimeException("Invalid timeline type for a slot: " + timelineName + " (" + slotMap.get_name() + ")"));
						}
						timelineMap = timelineMap.get_next();
					}
					slotMap = slotMap.get_next();
				}
				var boneMap = animationMap.getChild("bones");
				while(boneMap != null) {
					var bone = skeletonData.findBone(boneMap.get_name());
					if(bone == null) {
						throw haxe_Exception.thrown(new spine_support_utils_SerializationException("Bone not found: " + boneMap.get_name()));
					}
					var timelineMap1 = boneMap.get_child();
					while(timelineMap1 != null) {
						var timelineName1 = timelineMap1.get_name();
						if(timelineName1 == "rotate") {
							var timeline3 = new spine_RotateTimeline(timelineMap1.get_size());
							timeline3.boneIndex = bone.index;
							var frameIndex6 = 0;
							var valueMap3 = timelineMap1.get_child();
							while(valueMap3 != null) {
								var frameIndex7 = frameIndex6;
								var time3 = valueMap3.getFloat("time");
								var degrees = valueMap3.getFloat("angle");
								frameIndex7 <<= 1;
								timeline3.frames[frameIndex7] = time3;
								timeline3.frames[frameIndex7 + 1] = degrees;
								var curve2 = valueMap3.get("curve");
								if(curve2 != null) {
									if(curve2.isString() && curve2.asString() == "stepped") {
										timeline3.curves[frameIndex6 * 19] = 1;
									} else if(curve2.isArray()) {
										timeline3.setCurve(frameIndex6,curve2.getFloat(0),curve2.getFloat(1),curve2.getFloat(2),curve2.getFloat(3));
									}
								}
								++frameIndex6;
								valueMap3 = valueMap3.get_next();
							}
							timelines.push(timeline3);
							duration = Math.max(duration,timeline3.frames[((timeline3.curves.length / 19 + 1 | 0) - 1) * 2]);
						} else if(timelineName1 == "translate" || timelineName1 == "scale" || timelineName1 == "shear") {
							var timeline4 = null;
							var timelineScale = 1;
							if(timelineName1 == "scale") {
								timeline4 = new spine_ScaleTimeline(timelineMap1.get_size());
							} else if(timelineName1 == "shear") {
								timeline4 = new spine_ShearTimeline(timelineMap1.get_size());
							} else {
								timeline4 = new spine_TranslateTimeline(timelineMap1.get_size());
								timelineScale = scale;
							}
							timeline4.boneIndex = bone.index;
							var frameIndex8 = 0;
							var valueMap4 = timelineMap1.get_child();
							while(valueMap4 != null) {
								var x = valueMap4.getFloat("x",0);
								var y = valueMap4.getFloat("y",0);
								var frameIndex9 = frameIndex8;
								var time4 = valueMap4.getFloat("time");
								frameIndex9 *= 3;
								timeline4.frames[frameIndex9] = time4;
								timeline4.frames[frameIndex9 + 1] = x * timelineScale;
								timeline4.frames[frameIndex9 + 2] = y * timelineScale;
								var curve3 = valueMap4.get("curve");
								if(curve3 != null) {
									if(curve3.isString() && curve3.asString() == "stepped") {
										timeline4.curves[frameIndex8 * 19] = 1;
									} else if(curve3.isArray()) {
										timeline4.setCurve(frameIndex8,curve3.getFloat(0),curve3.getFloat(1),curve3.getFloat(2),curve3.getFloat(3));
									}
								}
								++frameIndex8;
								valueMap4 = valueMap4.get_next();
							}
							timelines.push(timeline4);
							duration = Math.max(duration,timeline4.frames[((timeline4.curves.length / 19 + 1 | 0) - 1) * 3]);
						} else {
							throw haxe_Exception.thrown(new spine_support_error_RuntimeException("Invalid timeline type for a bone: " + timelineName1 + " (" + boneMap.get_name() + ")"));
						}
						timelineMap1 = timelineMap1.get_next();
					}
					boneMap = boneMap.get_next();
				}
				var constraintMap = animationMap.getChild("ik");
				while(constraintMap != null) {
					var constraint = skeletonData.findIkConstraint(constraintMap.get_name());
					var timeline5 = new spine_IkConstraintTimeline(constraintMap.get_size());
					timeline5.ikConstraintIndex = skeletonData.ikConstraints.indexOf(constraint);
					var frameIndex10 = 0;
					var valueMap5 = constraintMap.get_child();
					while(valueMap5 != null) {
						var frameIndex11 = frameIndex10;
						var time5 = valueMap5.getFloat("time");
						var mix = valueMap5.getFloat("mix",1);
						var bendDirection = valueMap5.getBoolean("bendPositive",true) ? 1 : -1;
						frameIndex11 *= 3;
						timeline5.frames[frameIndex11] = time5;
						timeline5.frames[frameIndex11 + 1] = mix;
						timeline5.frames[frameIndex11 + 2] = bendDirection;
						var curve4 = valueMap5.get("curve");
						if(curve4 != null) {
							if(curve4.isString() && curve4.asString() == "stepped") {
								timeline5.curves[frameIndex10 * 19] = 1;
							} else if(curve4.isArray()) {
								timeline5.setCurve(frameIndex10,curve4.getFloat(0),curve4.getFloat(1),curve4.getFloat(2),curve4.getFloat(3));
							}
						}
						++frameIndex10;
						valueMap5 = valueMap5.get_next();
					}
					timelines.push(timeline5);
					duration = Math.max(duration,timeline5.frames[((timeline5.curves.length / 19 + 1 | 0) - 1) * 3]);
					constraintMap = constraintMap.get_next();
				}
				var constraintMap1 = animationMap.getChild("transform");
				while(constraintMap1 != null) {
					var constraint1 = skeletonData.findTransformConstraint(constraintMap1.get_name());
					var timeline6 = new spine_TransformConstraintTimeline(constraintMap1.get_size());
					timeline6.transformConstraintIndex = skeletonData.transformConstraints.indexOf(constraint1);
					var frameIndex12 = 0;
					var valueMap6 = constraintMap1.get_child();
					while(valueMap6 != null) {
						var frameIndex13 = frameIndex12;
						var time6 = valueMap6.getFloat("time");
						var rotateMix = valueMap6.getFloat("rotateMix",1);
						var translateMix = valueMap6.getFloat("translateMix",1);
						var scaleMix = valueMap6.getFloat("scaleMix",1);
						var shearMix = valueMap6.getFloat("shearMix",1);
						frameIndex13 *= 5;
						timeline6.frames[frameIndex13] = time6;
						timeline6.frames[frameIndex13 + 1] = rotateMix;
						timeline6.frames[frameIndex13 + 2] = translateMix;
						timeline6.frames[frameIndex13 + 3] = scaleMix;
						timeline6.frames[frameIndex13 + 4] = shearMix;
						var curve5 = valueMap6.get("curve");
						if(curve5 != null) {
							if(curve5.isString() && curve5.asString() == "stepped") {
								timeline6.curves[frameIndex12 * 19] = 1;
							} else if(curve5.isArray()) {
								timeline6.setCurve(frameIndex12,curve5.getFloat(0),curve5.getFloat(1),curve5.getFloat(2),curve5.getFloat(3));
							}
						}
						++frameIndex12;
						valueMap6 = valueMap6.get_next();
					}
					timelines.push(timeline6);
					duration = Math.max(duration,timeline6.frames[((timeline6.curves.length / 19 + 1 | 0) - 1) * 5]);
					constraintMap1 = constraintMap1.get_next();
				}
				var constraintMap2 = animationMap.getChild("paths");
				while(constraintMap2 != null) {
					var data = skeletonData.findPathConstraint(constraintMap2.get_name());
					if(data == null) {
						throw haxe_Exception.thrown(new spine_support_utils_SerializationException("Path constraint not found: " + constraintMap2.get_name()));
					}
					var index = skeletonData.pathConstraints.indexOf(data);
					var timelineMap2 = constraintMap2.get_child();
					while(timelineMap2 != null) {
						var timelineName2 = timelineMap2.get_name();
						if(timelineName2 == "position" || timelineName2 == "spacing") {
							var timeline7 = null;
							var timelineScale1 = 1;
							if(timelineName2 == "spacing") {
								timeline7 = new spine_PathConstraintSpacingTimeline(timelineMap2.get_size());
								if(data.spacingMode == 0 || data.spacingMode == 1) {
									timelineScale1 = scale;
								}
							} else {
								timeline7 = new spine_PathConstraintPositionTimeline(timelineMap2.get_size());
								if(data.positionMode == 0) {
									timelineScale1 = scale;
								}
							}
							timeline7.pathConstraintIndex = index;
							var frameIndex14 = 0;
							var valueMap7 = timelineMap2.get_child();
							while(valueMap7 != null) {
								var frameIndex15 = frameIndex14;
								var time7 = valueMap7.getFloat("time");
								var position = valueMap7.getFloat(timelineName2,0) * timelineScale1;
								frameIndex15 *= 2;
								timeline7.frames[frameIndex15] = time7;
								timeline7.frames[frameIndex15 + 1] = position;
								var curve6 = valueMap7.get("curve");
								if(curve6 != null) {
									if(curve6.isString() && curve6.asString() == "stepped") {
										timeline7.curves[frameIndex14 * 19] = 1;
									} else if(curve6.isArray()) {
										timeline7.setCurve(frameIndex14,curve6.getFloat(0),curve6.getFloat(1),curve6.getFloat(2),curve6.getFloat(3));
									}
								}
								++frameIndex14;
								valueMap7 = valueMap7.get_next();
							}
							timelines.push(timeline7);
							duration = Math.max(duration,timeline7.frames[((timeline7.curves.length / 19 + 1 | 0) - 1) * 2]);
						} else if(timelineName2 == "mix") {
							var timeline8 = new spine_PathConstraintMixTimeline(timelineMap2.get_size());
							timeline8.pathConstraintIndex = index;
							var frameIndex16 = 0;
							var valueMap8 = timelineMap2.get_child();
							while(valueMap8 != null) {
								var frameIndex17 = frameIndex16;
								var time8 = valueMap8.getFloat("time");
								var rotateMix1 = valueMap8.getFloat("rotateMix",1);
								var translateMix1 = valueMap8.getFloat("translateMix",1);
								frameIndex17 *= 3;
								timeline8.frames[frameIndex17] = time8;
								timeline8.frames[frameIndex17 + 1] = rotateMix1;
								timeline8.frames[frameIndex17 + 2] = translateMix1;
								var curve7 = valueMap8.get("curve");
								if(curve7 != null) {
									if(curve7.isString() && curve7.asString() == "stepped") {
										timeline8.curves[frameIndex16 * 19] = 1;
									} else if(curve7.isArray()) {
										timeline8.setCurve(frameIndex16,curve7.getFloat(0),curve7.getFloat(1),curve7.getFloat(2),curve7.getFloat(3));
									}
								}
								++frameIndex16;
								valueMap8 = valueMap8.get_next();
							}
							timelines.push(timeline8);
							duration = Math.max(duration,timeline8.frames[((timeline8.curves.length / 19 + 1 | 0) - 1) * 3]);
						}
						timelineMap2 = timelineMap2.get_next();
					}
					constraintMap2 = constraintMap2.get_next();
				}
				var deformMap = animationMap.getChild("deform");
				while(deformMap != null) {
					var skin = skeletonData.findSkin(deformMap.get_name());
					if(skin == null) {
						throw haxe_Exception.thrown(new spine_support_utils_SerializationException("Skin not found: " + deformMap.get_name()));
					}
					var slotMap1 = deformMap.get_child();
					while(slotMap1 != null) {
						var slot1 = skeletonData.findSlot(slotMap1.get_name());
						if(slot1 == null) {
							throw haxe_Exception.thrown(new spine_support_utils_SerializationException("Slot not found: " + slotMap1.get_name()));
						}
						var timelineMap3 = slotMap1.get_child();
						while(timelineMap3 != null) {
							var slotIndex = slot1.index;
							var name1 = timelineMap3.get_name();
							if(slotIndex < 0) {
								throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("slotIndex must be >= 0."));
							}
							var _this1 = skin.lookup;
							if(name1 == null) {
								throw haxe_Exception.thrown(new spine_support_error_IllegalArgumentException("name cannot be null."));
							}
							_this1.slotIndex = slotIndex;
							_this1.name = name1;
							var hash = 0;
							var chr;
							var attachment;
							if(name1.length == 0) {
								attachment = hash;
							} else {
								var _g = 0;
								var _g1 = name1.length;
								while(_g < _g1) {
									var i = _g++;
									chr = HxOverrides.cca(name1,i);
									hash = (hash << 5) - hash + chr;
								}
								attachment = hash;
							}
							_this1.hashCode = 31 * (31 + attachment) + slotIndex;
							var attachment1 = js_Boot.__cast(spine_support_utils_ObjectMap.get(skin.attachments,skin.lookup) , spine_attachments_VertexAttachment);
							if(attachment1 == null) {
								throw haxe_Exception.thrown(new spine_support_utils_SerializationException("Deform attachment not found: " + timelineMap3.get_name()));
							}
							var weighted = attachment1.bones != null;
							var vertices = attachment1.vertices;
							var deformLength = weighted ? vertices.length / 3 * 2 | 0 : vertices.length;
							var timeline9 = new spine_DeformTimeline(timelineMap3.get_size());
							timeline9.slotIndex = slot1.index;
							timeline9.attachment = attachment1;
							var frameIndex18 = 0;
							var valueMap9 = timelineMap3.get_child();
							while(valueMap9 != null) {
								var deform = null;
								var verticesValue = valueMap9.get("vertices");
								if(verticesValue == null) {
									if(weighted) {
										var length = deformLength;
										if(length == null) {
											length = 0;
										}
										var len = length | 0;
										var capacity = len != 0 ? len : 16;
										var this2 = [];
										var array = this2;
										if(length > 0) {
											var len1 = array.length;
											if(len1 > len) {
												array.splice(len,len - len1);
											} else if(len1 < len) {
												while(len1 < len) {
													array.push(0);
													++len1;
												}
											}
										}
										deform = array;
									} else {
										deform = vertices;
									}
								} else {
									var length1 = deformLength;
									if(length1 == null) {
										length1 = 0;
									}
									var len2 = length1 | 0;
									var capacity1 = len2 != 0 ? len2 : 16;
									var this3 = [];
									var array1 = this3;
									if(length1 > 0) {
										var len3 = array1.length;
										if(len3 > len2) {
											array1.splice(len2,len2 - len3);
										} else if(len3 < len2) {
											while(len3 < len2) {
												array1.push(0);
												++len3;
											}
										}
									}
									deform = array1;
									var start = valueMap9.getInt("offset",0);
									spine_support_utils_Array.copy(verticesValue.asFloatArray(),0,deform,start,verticesValue.get_size());
									if(scale != 1) {
										var i1 = start;
										var n = i1 + verticesValue.get_size();
										while(i1 < n) {
											deform[i1] *= scale;
											++i1;
										}
									}
									if(!weighted) {
										var i2 = 0;
										while(i2 < deformLength) {
											deform[i2] += vertices[i2];
											++i2;
										}
									}
								}
								var time9 = valueMap9.getFloat("time");
								timeline9.frames[frameIndex18] = time9;
								timeline9.frameVertices[frameIndex18] = deform;
								var curve8 = valueMap9.get("curve");
								if(curve8 != null) {
									if(curve8.isString() && curve8.asString() == "stepped") {
										timeline9.curves[frameIndex18 * 19] = 1;
									} else if(curve8.isArray()) {
										timeline9.setCurve(frameIndex18,curve8.getFloat(0),curve8.getFloat(1),curve8.getFloat(2),curve8.getFloat(3));
									}
								}
								++frameIndex18;
								valueMap9 = valueMap9.get_next();
							}
							timelines.push(timeline9);
							duration = Math.max(duration,timeline9.frames[(timeline9.curves.length / 19 + 1 | 0) - 1]);
							timelineMap3 = timelineMap3.get_next();
						}
						slotMap1 = slotMap1.get_next();
					}
					deformMap = deformMap.get_next();
				}
				var drawOrdersMap = animationMap.get("drawOrder");
				if(drawOrdersMap == null) {
					drawOrdersMap = animationMap.get("draworder");
				}
				if(drawOrdersMap != null) {
					var timeline10 = new spine_DrawOrderTimeline(drawOrdersMap.get_size());
					var slotCount = skeletonData.slots.length;
					var frameIndex19 = 0;
					var drawOrderMap = drawOrdersMap.get_child();
					while(drawOrderMap != null) {
						var drawOrder = null;
						var offsets = drawOrderMap.get("offsets");
						if(offsets != null) {
							var length2 = slotCount;
							if(length2 == null) {
								length2 = 0;
							}
							var len4 = length2 | 0;
							var capacity2 = len4 != 0 ? len4 : 16;
							var this4 = [];
							var array2 = this4;
							if(length2 != 0) {
								var len5 = array2.length;
								if(len5 > len4) {
									array2.splice(len4,len4 - len5);
								} else if(len5 < len4) {
									while(len5 < len4) {
										array2.push(0);
										++len5;
									}
								}
							}
							drawOrder = array2;
							var i3 = slotCount - 1;
							while(i3 >= 0) {
								drawOrder[i3] = -1;
								--i3;
							}
							var length3 = slotCount - offsets.get_size();
							if(length3 == null) {
								length3 = 0;
							}
							var len6 = length3 | 0;
							var capacity3 = len6 != 0 ? len6 : 16;
							var this5 = [];
							var array3 = this5;
							if(length3 != 0) {
								var len7 = array3.length;
								if(len7 > len6) {
									array3.splice(len6,len6 - len7);
								} else if(len7 < len6) {
									while(len7 < len6) {
										array3.push(0);
										++len7;
									}
								}
							}
							var unchanged = array3;
							var originalIndex = 0;
							var unchangedIndex = 0;
							var offsetMap = offsets.get_child();
							while(offsetMap != null) {
								var slot2 = skeletonData.findSlot(offsetMap.getString("slot"));
								if(slot2 == null) {
									throw haxe_Exception.thrown(new spine_support_utils_SerializationException("Slot not found: " + offsetMap.getString("slot")));
								}
								while(originalIndex != slot2.index) unchanged[unchangedIndex++] = originalIndex++;
								drawOrder[originalIndex++ + offsetMap.getInt("offset")] = originalIndex - 1;
								offsetMap = offsetMap.get_next();
							}
							while(originalIndex < slotCount) unchanged[unchangedIndex++] = originalIndex++;
							var i4 = slotCount - 1;
							while(i4 >= 0) {
								if(drawOrder[i4] == -1) {
									drawOrder[i4] = unchanged[--unchangedIndex];
								}
								--i4;
							}
						}
						var frameIndex20 = frameIndex19++;
						var time10 = drawOrderMap.getFloat("time");
						timeline10.frames[frameIndex20] = time10;
						timeline10.drawOrders[frameIndex20] = drawOrder;
						drawOrderMap = drawOrderMap.get_next();
					}
					timelines.push(timeline10);
					duration = Math.max(duration,timeline10.frames[timeline10.frames.length - 1]);
				}
				var eventsMap = animationMap.get("events");
				if(eventsMap != null) {
					var timeline11 = new spine_EventTimeline(eventsMap.get_size());
					var frameIndex21 = 0;
					var eventMap = eventsMap.get_child();
					while(eventMap != null) {
						var eventData = skeletonData.findEvent(eventMap.getString("name"));
						if(eventData == null) {
							throw haxe_Exception.thrown(new spine_support_utils_SerializationException("Event not found: " + eventMap.getString("name")));
						}
						var event = new spine_Event(eventMap.getFloat("time"),eventData);
						event.intValue = eventMap.getInt("int",eventData.intValue);
						event.floatValue = eventMap.getFloat("float",eventData.floatValue);
						event.stringValue = eventMap.getString("string",eventData.stringValue);
						var frameIndex22 = frameIndex21++;
						timeline11.frames[frameIndex22] = event.time;
						timeline11.events[frameIndex22] = event;
						eventMap = eventMap.get_next();
					}
					timelines.push(timeline11);
					duration = Math.max(duration,timeline11.frames[timeline11.frames.length - 1]);
				}
				skeletonData.animations.push(new spine_Animation(name,timelines,duration));
			} catch( _g2 ) {
				haxe_NativeStackTrace.lastError = _g2;
				var ex = haxe_Exception.caught(_g2).unwrap();
				throw haxe_Exception.thrown(new spine_support_utils_SerializationException("Error reading animation: " + animationMap.get_name(),ex));
			}
			animationMap = animationMap.get_next();
		}
		var skeletonData1 = skeletonData;
		this._skeletonData.h[id] = skeletonData1;
		return skeletonData1;
	}
	,getSkeletonDataID: function(data) {
		var datas = haxe_ds_StringMap.keysIterator(this._skeletonData.h);
		while(datas.hasNext()) {
			var key = datas.next();
			var skeletonData = this._skeletonData.h[key];
			if(skeletonData == data) {
				return key;
			}
		}
		return null;
	}
	,buildTilemapSkeleton: function(id,data) {
		var skeletonData = this.buildTilemapSkeletonData(id,data);
		var skeleton = new spine_tilemap_SkeletonAnimation(skeletonData);
		skeleton.assetsId = this.id + ":" + id;
		return skeleton;
	}
	,buildSpriteSkeleton: function(id,data) {
		var skeletonData = this.buildSpriteSkeletonData(id,data);
		var skeleton = new spine_openfl_SkeletonAnimation(skeletonData);
		skeleton.assetsId = this.id + ":" + id;
		return skeleton;
	}
	,dispose: function() {
		var keys = haxe_ds_StringMap.keysIterator(this._bitmapDatas.h);
		var key = keys;
		while(key.hasNext()) {
			var key1 = key.next();
			zygame_utils_ZGC.disposeBitmapData(this._bitmapDatas.h[key1]);
			var _this = this._bitmapDatas;
			if(Object.prototype.hasOwnProperty.call(_this.h,key1)) {
				delete(_this.h[key1]);
			}
		}
		var datas = haxe_ds_StringMap.keysIterator(this._skeletonData.h);
		var key = datas;
		while(key.hasNext()) {
			var key1 = key.next();
			var _this = this._skeletonData;
			if(Object.prototype.hasOwnProperty.call(_this.h,key1)) {
				delete(_this.h[key1]);
			}
		}
		this._skeletonData = null;
		this._bitmapDatas = null;
	}
	,getBitmapDataFrame: function(name) {
		if(this.loader == null) {
			this.getTilemapSkeletonManager();
		}
		return this.loader.frameMaps.h[name];
	}
	,getTileset: function() {
		if(this.loader == null) {
			this.getTilemapSkeletonManager();
		}
		return this.loader.getTileset();
	}
	,__class__: zygame_utils_load_SpineTextureAtals
});
var zygame_utils_load_TextLoader = function(path) {
	this._path = path;
};
$hxClasses["zygame.utils.load.TextLoader"] = zygame_utils_load_TextLoader;
zygame_utils_load_TextLoader.__name__ = "zygame.utils.load.TextLoader";
zygame_utils_load_TextLoader.prototype = {
	_path: null
	,load: function(call,errorCall) {
		zygame_utils_AssetsUtils.loadText(this._path).onComplete(call).onError(errorCall);
	}
	,__class__: zygame_utils_load_TextLoader
};
var zygame_utils_load_TextureLoader = function(img,xml,isAtf) {
	if(isAtf == null) {
		isAtf = false;
	}
	this.isAtf = false;
	this.imgPath = img;
	this.xmlPath = xml;
	this.isAtf = isAtf;
};
$hxClasses["zygame.utils.load.TextureLoader"] = zygame_utils_load_TextureLoader;
zygame_utils_load_TextureLoader.__name__ = "zygame.utils.load.TextureLoader";
zygame_utils_load_TextureLoader.prototype = {
	imgPath: null
	,xmlPath: null
	,isAtf: null
	,load: function(func,errorCall) {
		var _gthis = this;
		zygame_utils_AssetsUtils.loadBitmapData(this.imgPath,false,this.isAtf).onComplete(function(bitmapdata) {
			zygame_utils_AssetsUtils.loadText(_gthis.xmlPath).onComplete(function(data) {
				var xml = null;
				try {
					xml = Xml.parse(data);
				} catch( _g ) {
					var e = haxe_Exception.caught(_g);
					throw haxe_Exception.thrown(data + "\n" + e.get_message() + " " + haxe_CallStack.toString(e.get_stack()));
				}
				var textureAtlas = new zygame_utils_load_TextureAtlas(bitmapdata,xml);
				textureAtlas.path = _gthis.imgPath;
				func(textureAtlas);
			}).onError(errorCall);
		}).onError(errorCall);
	}
	,__class__: zygame_utils_load_TextureLoader
};
var zygame_utils_load_TextTextureAtlas = function(img,xml,color) {
	zygame_utils_load_TextureAtlas.call(this,img,xml);
	this.textColor = color;
	this.isTextAtlas = true;
};
$hxClasses["zygame.utils.load.TextTextureAtlas"] = zygame_utils_load_TextTextureAtlas;
zygame_utils_load_TextTextureAtlas.__name__ = "zygame.utils.load.TextTextureAtlas";
zygame_utils_load_TextTextureAtlas.__super__ = zygame_utils_load_TextureAtlas;
zygame_utils_load_TextTextureAtlas.prototype = $extend(zygame_utils_load_TextureAtlas.prototype,{
	textColor: null
	,__class__: zygame_utils_load_TextTextureAtlas
});
var zygame_zip_ZipReader = function(i) {
	this.tmp = null;
	this.buf = null;
	this.i = i;
};
$hxClasses["zygame.zip.ZipReader"] = zygame_zip_ZipReader;
zygame_zip_ZipReader.__name__ = "zygame.zip.ZipReader";
zygame_zip_ZipReader.readZip = function(i) {
	var r = new haxe_zip_Reader(i);
	return r.read();
};
zygame_zip_ZipReader.unzip = function(f) {
	if(!f.compressed) {
		return f.data;
	}
	var c = new haxe_zip_Uncompress(-15);
	var s = new haxe_io_Bytes(new ArrayBuffer(f.fileSize));
	var r = c.execute(f.data,0,s,0);
	c.close();
	if(!r.done || r.read != f.data.length || r.write != f.fileSize) {
		throw haxe_Exception.thrown("Invalid compressed data for " + f.fileName);
	}
	f.compressed = false;
	f.dataSize = f.fileSize;
	f.data = s;
	return f.data;
};
zygame_zip_ZipReader.prototype = {
	i: null
	,buf: null
	,tmp: null
	,progress: function() {
		return (js_Boot.__cast(this.i , haxe_io_BytesInput)).pos / (js_Boot.__cast(this.i , haxe_io_BytesInput)).totlen;
	}
	,readZipDate: function() {
		var t = this.i.readUInt16();
		var hour = t >> 11 & 31;
		var min = t >> 5 & 63;
		var sec = t & 31;
		var d = this.i.readUInt16();
		var year = d >> 9;
		var month = d >> 5 & 15;
		var day = d & 31;
		return new Date(year + 1980,month - 1,day,hour,min,sec << 1);
	}
	,readExtraFields: function(length) {
		var fields = new haxe_ds_List();
		while(length > 0) {
			if(length < 4) {
				throw haxe_Exception.thrown("Invalid extra fields data");
			}
			var tag = this.i.readUInt16();
			var len = this.i.readUInt16();
			if(length < len) {
				throw haxe_Exception.thrown("Invalid extra fields data");
			}
			if(tag == 28789) {
				var version = this.i.readByte();
				if(version != 1) {
					var data = new haxe_io_BytesBuffer();
					data.addByte(version);
					data.add(this.i.read(len - 1));
					fields.add(haxe_zip_ExtraField.FUnknown(tag,data.getBytes()));
				} else {
					var crc = this.i.readInt32();
					var name = this.i.read(len - 5).toString();
					fields.add(haxe_zip_ExtraField.FInfoZipUnicodePath(name,crc));
				}
			} else {
				fields.add(haxe_zip_ExtraField.FUnknown(tag,this.i.read(len)));
			}
			length -= 4 + len;
		}
		return fields;
	}
	,readEntryHeader: function() {
		var i = this.i;
		var h = i.readInt32();
		if(h == 33639248 || h == 101010256) {
			return null;
		}
		if(h != 67324752) {
			throw haxe_Exception.thrown("Invalid Zip Data");
		}
		var version = i.readUInt16();
		var flags = i.readUInt16();
		var utf8 = (flags & 2048) != 0;
		if((flags & 63473) != 0) {
			throw haxe_Exception.thrown("Unsupported flags " + flags);
		}
		var compression = i.readUInt16();
		var compressed = compression != 0;
		if(compressed && compression != 8) {
			throw haxe_Exception.thrown("Unsupported compression " + compression);
		}
		var mtime = this.readZipDate();
		var crc32 = i.readInt32();
		var csize = i.readInt32();
		var usize = i.readInt32();
		var fnamelen = i.readInt16();
		var elen = i.readInt16();
		var fname = i.readString(fnamelen);
		var fields = this.readExtraFields(elen);
		if(utf8) {
			fields.push(haxe_zip_ExtraField.FUtf8);
		}
		var data = null;
		if((flags & 8) != 0) {
			crc32 = null;
		}
		return { fileName : fname, fileSize : usize, fileTime : mtime, compressed : compressed, dataSize : csize, data : data, crc32 : crc32, extraFields : fields};
	}
	,next: function() {
		var e = this.readEntryHeader();
		if(e == null) {
			return e;
		}
		if(e.crc32 == null) {
			if(e.compressed) {
				var bufSize = 65536;
				if(this.tmp == null) {
					this.tmp = new haxe_io_Bytes(new ArrayBuffer(bufSize));
				}
				var out = new haxe_io_BytesBuffer();
				var z = new haxe_zip_InflateImpl(this.i,false,false);
				while(true) {
					var n = z.readBytes(this.tmp,0,bufSize);
					out.addBytes(this.tmp,0,n);
					if(n < bufSize) {
						break;
					}
				}
				e.data = out.getBytes();
			} else {
				e.data = this.i.read(e.dataSize);
			}
			e.crc32 = this.i.readInt32();
			if(e.crc32 == 134695760) {
				e.crc32 = this.i.readInt32();
			}
			e.dataSize = this.i.readInt32();
			e.fileSize = this.i.readInt32();
			e.dataSize = e.fileSize;
			e.compressed = false;
		} else {
			e.data = this.i.read(e.dataSize);
		}
		return e;
	}
	,read: function() {
		var l = new haxe_ds_List();
		while(true) {
			var e = this.next();
			if(e != null) {
				l.add(e);
			} else {
				break;
			}
		}
		return l;
	}
	,__class__: zygame_zip_ZipReader
};
function $getIterator(o) { if( o instanceof Array ) return new haxe_iterators_ArrayIterator(o); else return o.iterator(); }
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $global.$haxeUID++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
$global.$haxeUID |= 0;
var init = lime__$internal_backend_html5_HTML5Application;
var init = lime_app_Application;
haxe_ds_ObjectMap.count = 0;
if(typeof(performance) != "undefined" ? typeof(performance.now) == "function" : false) {
	HxOverrides.now = performance.now.bind(performance);
}
$hxClasses["Math"] = Math;
if( String.fromCodePoint == null ) String.fromCodePoint = function(c) { return c < 0x10000 ? String.fromCharCode(c) : String.fromCharCode((c>>10)+0xD7C0)+String.fromCharCode((c&0x3FF)+0xDC00); }
String.prototype.__class__ = $hxClasses["String"] = String;
String.__name__ = "String";
$hxClasses["Array"] = Array;
Array.__name__ = "Array";
Date.prototype.__class__ = $hxClasses["Date"] = Date;
Date.__name__ = "Date";
var Int = { };
var Dynamic = { };
var Float = Number;
var Bool = Boolean;
var Class = { };
var Enum = { };
js_Boot.__toStr = ({ }).toString;
if(ArrayBuffer.prototype.slice == null) {
	ArrayBuffer.prototype.slice = js_lib__$ArrayBuffer_ArrayBufferCompat.sliceImpl;
}
var array = null;
var vector = null;
var view = null;
var buffer = null;
var len = null;
var this1 = new Uint32Array(256);
lime_math_RGBA.__alpha16 = this1;
var _g = 0;
while(_g < 256) {
	var i = _g++;
	lime_math_RGBA.__alpha16[i] = Math.ceil(i * 257.003921568627447);
}
var array = null;
var vector = null;
var view = null;
var buffer = null;
var len = null;
var this1 = new Uint8Array(511);
lime_math_RGBA.__clamp = this1;
var _g = 0;
while(_g < 255) {
	var i = _g++;
	lime_math_RGBA.__clamp[i] = i;
}
var _g = 255;
var _g1 = 511;
while(_g < _g1) {
	var i = _g++;
	lime_math_RGBA.__clamp[i] = 255;
}
lime_system_CFFI.available = false;
lime_system_CFFI.enabled = false;
lime_utils_Log.level = 3;
if(typeof console == "undefined") {
	console = {}
}
if(console.log == null) {
	console.log = function() {
	};
}
openfl__$internal_renderer_canvas_CanvasGraphics.hitTestCanvas = typeof(window) != "undefined" ? window.document.createElement("canvas") : null;
openfl__$internal_renderer_canvas_CanvasGraphics.hitTestContext = typeof(window) != "undefined" ? openfl__$internal_renderer_canvas_CanvasGraphics.hitTestCanvas.getContext("2d") : null;
openfl_ui_Multitouch.maxTouchPoints = 2;
openfl_ui_Multitouch.supportedGestures = null;
openfl_ui_Multitouch.supportsGestureEvents = false;
openfl_ui_Multitouch.inputMode = 2;
openfl_Vector.__meta__ = { statics : { toNullVector : { SuppressWarnings : ["checkstyle:Dynamic"]}}};
openfl_display_DisplayObject.__meta__ = { fields : { __cairo : { SuppressWarnings : ["checkstyle:Dynamic"]}, addEventListener : { SuppressWarnings : ["checkstyle:Dynamic"]}, removeEventListener : { SuppressWarnings : ["checkstyle:Dynamic"]}}};
openfl_display_DisplayObject.__broadcastEvents = new haxe_ds_StringMap();
openfl_display_DisplayObject.__instanceCount = 0;
openfl_display_DisplayObject.__tempStack = new lime_utils_ObjectPool(function() {
	return openfl_Vector.toObjectVector(null);
},function(stack) {
	stack.set_length(0);
});
zygame_core_Start.isActivate = true;
zygame_core_Start.TEXTURE_COUNT = 0;
zygame_core_Start.stageWidth = 0;
zygame_core_Start.stageHeight = 0;
R.atlas = { GameStatsAtlas : { name : "GameStatsAtlas", png : "assets/ui/GameStatsAtlas.png", xml : "assets/ui/GameStatsAtlas.xml"}, PutUpAtlas : { name : "PutUpAtlas", png : "assets/ui/PutUpAtlas.png", xml : "assets/ui/PutUpAtlas.xml"}, AdventureAtlas : { name : "AdventureAtlas", png : "assets/ui/AdventureAtlas.png", xml : "assets/ui/AdventureAtlas.xml"}, MainSceneAtlas : { name : "MainSceneAtlas", png : "assets/ui/MainSceneAtlas.png", xml : "assets/ui/MainSceneAtlas.xml"}, DiaryAtlas : { name : "DiaryAtlas", png : "assets/ui/DiaryAtlas.png", xml : "assets/ui/DiaryAtlas.xml"}, GameFontAtlas : { name : "GameFontAtlas", png : "assets/ui/GameFontAtlas.png", xml : "assets/ui/GameFontAtlas.xml"}, MailBoxAtlas : { name : "MailBoxAtlas", png : "assets/ui/MailBoxAtlas.png", xml : "assets/ui/MailBoxAtlas.xml"}, DiaryGoodsAtlas : { name : "DiaryGoodsAtlas", png : "assets/ui/DiaryGoodsAtlas.png", xml : "assets/ui/DiaryGoodsAtlas.xml"}, RankAtlas : { name : "RankAtlas", png : "assets/ui/RankAtlas.png", xml : "assets/ui/RankAtlas.xml"}, GoodLevelUpAtlas : { name : "GoodLevelUpAtlas", png : "assets/ui/GoodLevelUpAtlas.png", xml : "assets/ui/GoodLevelUpAtlas.xml"}, IconAtlas : { name : "IconAtlas", png : "assets/ui/IconAtlas.png", xml : "assets/ui/IconAtlas.xml"}, LoadSceneAtlas : { name : "LoadSceneAtlas", png : "assets/ui/LoadSceneAtlas.png", xml : "assets/ui/LoadSceneAtlas.xml"}, OverViewAtlas : { name : "OverViewAtlas", png : "assets/ui/OverViewAtlas.png", xml : "assets/ui/OverViewAtlas.xml"}};
R.xml = { GoodLevelUp : { name : "GoodLevelUp", url : "assets/views/GoodLevelUp.xml"}, GameStats : { name : "GameStats", url : "assets/views/GameStats.xml"}, GameOver : { name : "GameOver", url : "assets/views/GameOver.xml"}, LoadScene : { name : "LoadScene", url : "assets/views/LoadScene.xml"}, DiaryGoods : { name : "DiaryGoods", url : "assets/views/DiaryGoods.xml"}, AdventureItem : { name : "AdventureItem", url : "assets/views/AdventureItem.xml"}, RankItem : { name : "RankItem", url : "assets/views/RankItem.xml"}, Adventure : { name : "Adventure", url : "assets/views/Adventure.xml"}, GameExitView : { name : "GameExitView", url : "assets/views/GameExitView.xml"}, Diary : { name : "Diary", url : "assets/views/Diary.xml"}, MailBox : { name : "MailBox", url : "assets/views/MailBox.xml"}, PutUp : { name : "PutUp", url : "assets/views/PutUp.xml"}, DiaryGoodsItem : { name : "DiaryGoodsItem", url : "assets/views/DiaryGoodsItem.xml"}, MainScene : { name : "MainScene", url : "assets/views/MainScene.xml"}, Rank : { name : "Rank", url : "assets/views/Rank.xml"}, DiaryItem : { name : "DiaryItem", url : "assets/views/DiaryItem.xml"}, OverView : { name : "OverView", url : "assets/views/OverView.xml"}};
Xml.Element = 0;
Xml.PCData = 1;
Xml.CData = 2;
Xml.Comment = 3;
Xml.DocType = 4;
Xml.ProcessingInstruction = 5;
Xml.Document = 6;
cdb_TileMode.Tile = "tile";
cdb_TileMode.Ground = "ground";
cdb_TileMode.Border = "border";
cdb_TileMode.Object = "object";
cdb_TileMode.Group = "group";
haxe_Serializer.USE_CACHE = false;
haxe_Serializer.USE_ENUM_INDEX = false;
haxe_Serializer.BASE64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:";
haxe_Unserializer.DEFAULT_RESOLVER = new haxe__$Unserializer_DefaultResolver();
haxe_Unserializer.BASE64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:";
haxe_crypto_Base64.CHARS = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
haxe_crypto_Base64.BYTES = haxe_io_Bytes.ofString(haxe_crypto_Base64.CHARS);
haxe_io_FPHelper.i64tmp = (function($this) {
	var $r;
	var this1 = new haxe__$Int64__$_$_$Int64(0,0);
	$r = this1;
	return $r;
}(this));
haxe_io_FPHelper.helper = new DataView(new ArrayBuffer(8));
haxe_xml_Parser.escapes = (function($this) {
	var $r;
	var h = new haxe_ds_StringMap();
	h.h["lt"] = "<";
	h.h["gt"] = ">";
	h.h["amp"] = "&";
	h.h["quot"] = "\"";
	h.h["apos"] = "'";
	$r = h;
	return $r;
}(this));
haxe_zip_InflateImpl.LEN_EXTRA_BITS_TBL = [0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0,-1,-1];
haxe_zip_InflateImpl.LEN_BASE_VAL_TBL = [3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258];
haxe_zip_InflateImpl.DIST_EXTRA_BITS_TBL = [0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,-1,-1];
haxe_zip_InflateImpl.DIST_BASE_VAL_TBL = [1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577];
haxe_zip_InflateImpl.CODE_LENGTHS_POS = [16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];
hscript_Parser.p1 = 0;
hscript_Parser.tokenMin = 0;
hscript_Parser.tokenMax = 0;
lime__$internal_backend_html5_HTML5HTTPRequest.OPTION_REVOKE_URL = 1;
lime__$internal_backend_html5_HTML5HTTPRequest.activeRequests = 0;
lime__$internal_backend_html5_HTML5HTTPRequest.requestLimit = 17;
lime__$internal_backend_html5_HTML5HTTPRequest.requestQueue = new haxe_ds_List();
lime__$internal_backend_html5_HTML5Window.dummyCharacter = "";
lime__$internal_backend_html5_HTML5Window.windowID = 0;
lime__$internal_format_Base64.DICTIONARY = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".split("");
lime__$internal_format_Base64.EXTENDED_DICTIONARY = (function($this) {
	var $r;
	var result = [];
	{
		var _g = 0;
		var _g1 = lime__$internal_format_Base64.DICTIONARY;
		while(_g < _g1.length) {
			var a = _g1[_g];
			++_g;
			var _g2 = 0;
			var _g3 = lime__$internal_format_Base64.DICTIONARY;
			while(_g2 < _g3.length) {
				var b = _g3[_g2];
				++_g2;
				result.push(a + b);
			}
		}
	}
	$r = result;
	return $r;
}(this));
lime__$internal_graphics_StackBlur.MUL_TABLE = [1,171,205,293,57,373,79,137,241,27,391,357,41,19,283,265,497,469,443,421,25,191,365,349,335,161,155,149,9,278,269,261,505,245,475,231,449,437,213,415,405,395,193,377,369,361,353,345,169,331,325,319,313,307,301,37,145,285,281,69,271,267,263,259,509,501,493,243,479,118,465,459,113,446,55,435,429,423,209,413,51,403,199,393,97,3,379,375,371,367,363,359,355,351,347,43,85,337,333,165,327,323,5,317,157,311,77,305,303,75,297,294,73,289,287,71,141,279,277,275,68,135,67,133,33,262,260,129,511,507,503,499,495,491,61,121,481,477,237,235,467,232,115,457,227,451,7,445,221,439,218,433,215,427,425,211,419,417,207,411,409,203,202,401,399,396,197,49,389,387,385,383,95,189,47,187,93,185,23,183,91,181,45,179,89,177,11,175,87,173,345,343,341,339,337,21,167,83,331,329,327,163,81,323,321,319,159,79,315,313,39,155,309,307,153,305,303,151,75,299,149,37,295,147,73,291,145,289,287,143,285,71,141,281,35,279,139,69,275,137,273,17,271,135,269,267,133,265,33,263,131,261,130,259,129,257,1];
lime__$internal_graphics_StackBlur.SHG_TABLE = [0,9,10,11,9,12,10,11,12,9,13,13,10,9,13,13,14,14,14,14,10,13,14,14,14,13,13,13,9,14,14,14,15,14,15,14,15,15,14,15,15,15,14,15,15,15,15,15,14,15,15,15,15,15,15,12,14,15,15,13,15,15,15,15,16,16,16,15,16,14,16,16,14,16,13,16,16,16,15,16,13,16,15,16,14,9,16,16,16,16,16,16,16,16,16,13,14,16,16,15,16,16,10,16,15,16,14,16,16,14,16,16,14,16,16,14,15,16,16,16,14,15,14,15,13,16,16,15,17,17,17,17,17,17,14,15,17,17,16,16,17,16,15,17,16,17,11,17,16,17,16,17,16,17,17,16,17,17,16,17,17,16,16,17,17,17,16,14,17,17,17,17,15,16,14,16,15,16,13,16,15,16,14,16,15,16,12,16,15,16,17,17,17,17,17,13,16,15,17,17,17,16,15,17,17,17,16,15,17,17,14,16,17,17,16,17,17,16,15,17,16,14,17,16,15,17,16,17,17,16,17,15,16,17,14,17,16,15,17,16,17,13,17,16,17,17,16,17,14,17,16,17,16,17,16,17,9];
lime_graphics_cairo_CairoFTFontFace.FT_LOAD_FORCE_AUTOHINT = 32;
lime_graphics_opengl_GL.DEPTH_BUFFER_BIT = 256;
lime_graphics_opengl_GL.STENCIL_BUFFER_BIT = 1024;
lime_graphics_opengl_GL.COLOR_BUFFER_BIT = 16384;
lime_graphics_opengl_GL.POINTS = 0;
lime_graphics_opengl_GL.LINES = 1;
lime_graphics_opengl_GL.LINE_LOOP = 2;
lime_graphics_opengl_GL.LINE_STRIP = 3;
lime_graphics_opengl_GL.TRIANGLES = 4;
lime_graphics_opengl_GL.TRIANGLE_STRIP = 5;
lime_graphics_opengl_GL.TRIANGLE_FAN = 6;
lime_graphics_opengl_GL.ZERO = 0;
lime_graphics_opengl_GL.ONE = 1;
lime_graphics_opengl_GL.SRC_COLOR = 768;
lime_graphics_opengl_GL.ONE_MINUS_SRC_COLOR = 769;
lime_graphics_opengl_GL.SRC_ALPHA = 770;
lime_graphics_opengl_GL.ONE_MINUS_SRC_ALPHA = 771;
lime_graphics_opengl_GL.DST_ALPHA = 772;
lime_graphics_opengl_GL.ONE_MINUS_DST_ALPHA = 773;
lime_graphics_opengl_GL.DST_COLOR = 774;
lime_graphics_opengl_GL.ONE_MINUS_DST_COLOR = 775;
lime_graphics_opengl_GL.SRC_ALPHA_SATURATE = 776;
lime_graphics_opengl_GL.FUNC_ADD = 32774;
lime_graphics_opengl_GL.BLEND_EQUATION = 32777;
lime_graphics_opengl_GL.BLEND_EQUATION_RGB = 32777;
lime_graphics_opengl_GL.BLEND_EQUATION_ALPHA = 34877;
lime_graphics_opengl_GL.FUNC_SUBTRACT = 32778;
lime_graphics_opengl_GL.FUNC_REVERSE_SUBTRACT = 32779;
lime_graphics_opengl_GL.BLEND_DST_RGB = 32968;
lime_graphics_opengl_GL.BLEND_SRC_RGB = 32969;
lime_graphics_opengl_GL.BLEND_DST_ALPHA = 32970;
lime_graphics_opengl_GL.BLEND_SRC_ALPHA = 32971;
lime_graphics_opengl_GL.CONSTANT_COLOR = 32769;
lime_graphics_opengl_GL.ONE_MINUS_CONSTANT_COLOR = 32770;
lime_graphics_opengl_GL.CONSTANT_ALPHA = 32771;
lime_graphics_opengl_GL.ONE_MINUS_CONSTANT_ALPHA = 32772;
lime_graphics_opengl_GL.BLEND_COLOR = 32773;
lime_graphics_opengl_GL.ARRAY_BUFFER = 34962;
lime_graphics_opengl_GL.ELEMENT_ARRAY_BUFFER = 34963;
lime_graphics_opengl_GL.ARRAY_BUFFER_BINDING = 34964;
lime_graphics_opengl_GL.ELEMENT_ARRAY_BUFFER_BINDING = 34965;
lime_graphics_opengl_GL.STREAM_DRAW = 35040;
lime_graphics_opengl_GL.STATIC_DRAW = 35044;
lime_graphics_opengl_GL.DYNAMIC_DRAW = 35048;
lime_graphics_opengl_GL.BUFFER_SIZE = 34660;
lime_graphics_opengl_GL.BUFFER_USAGE = 34661;
lime_graphics_opengl_GL.CURRENT_VERTEX_ATTRIB = 34342;
lime_graphics_opengl_GL.FRONT = 1028;
lime_graphics_opengl_GL.BACK = 1029;
lime_graphics_opengl_GL.FRONT_AND_BACK = 1032;
lime_graphics_opengl_GL.CULL_FACE = 2884;
lime_graphics_opengl_GL.BLEND = 3042;
lime_graphics_opengl_GL.DITHER = 3024;
lime_graphics_opengl_GL.STENCIL_TEST = 2960;
lime_graphics_opengl_GL.DEPTH_TEST = 2929;
lime_graphics_opengl_GL.SCISSOR_TEST = 3089;
lime_graphics_opengl_GL.POLYGON_OFFSET_FILL = 32823;
lime_graphics_opengl_GL.SAMPLE_ALPHA_TO_COVERAGE = 32926;
lime_graphics_opengl_GL.SAMPLE_COVERAGE = 32928;
lime_graphics_opengl_GL.NO_ERROR = 0;
lime_graphics_opengl_GL.INVALID_ENUM = 1280;
lime_graphics_opengl_GL.INVALID_VALUE = 1281;
lime_graphics_opengl_GL.INVALID_OPERATION = 1282;
lime_graphics_opengl_GL.OUT_OF_MEMORY = 1285;
lime_graphics_opengl_GL.CW = 2304;
lime_graphics_opengl_GL.CCW = 2305;
lime_graphics_opengl_GL.LINE_WIDTH = 2849;
lime_graphics_opengl_GL.ALIASED_POINT_SIZE_RANGE = 33901;
lime_graphics_opengl_GL.ALIASED_LINE_WIDTH_RANGE = 33902;
lime_graphics_opengl_GL.CULL_FACE_MODE = 2885;
lime_graphics_opengl_GL.FRONT_FACE = 2886;
lime_graphics_opengl_GL.DEPTH_RANGE = 2928;
lime_graphics_opengl_GL.DEPTH_WRITEMASK = 2930;
lime_graphics_opengl_GL.DEPTH_CLEAR_VALUE = 2931;
lime_graphics_opengl_GL.DEPTH_FUNC = 2932;
lime_graphics_opengl_GL.STENCIL_CLEAR_VALUE = 2961;
lime_graphics_opengl_GL.STENCIL_FUNC = 2962;
lime_graphics_opengl_GL.STENCIL_FAIL = 2964;
lime_graphics_opengl_GL.STENCIL_PASS_DEPTH_FAIL = 2965;
lime_graphics_opengl_GL.STENCIL_PASS_DEPTH_PASS = 2966;
lime_graphics_opengl_GL.STENCIL_REF = 2967;
lime_graphics_opengl_GL.STENCIL_VALUE_MASK = 2963;
lime_graphics_opengl_GL.STENCIL_WRITEMASK = 2968;
lime_graphics_opengl_GL.STENCIL_BACK_FUNC = 34816;
lime_graphics_opengl_GL.STENCIL_BACK_FAIL = 34817;
lime_graphics_opengl_GL.STENCIL_BACK_PASS_DEPTH_FAIL = 34818;
lime_graphics_opengl_GL.STENCIL_BACK_PASS_DEPTH_PASS = 34819;
lime_graphics_opengl_GL.STENCIL_BACK_REF = 36003;
lime_graphics_opengl_GL.STENCIL_BACK_VALUE_MASK = 36004;
lime_graphics_opengl_GL.STENCIL_BACK_WRITEMASK = 36005;
lime_graphics_opengl_GL.VIEWPORT = 2978;
lime_graphics_opengl_GL.SCISSOR_BOX = 3088;
lime_graphics_opengl_GL.COLOR_CLEAR_VALUE = 3106;
lime_graphics_opengl_GL.COLOR_WRITEMASK = 3107;
lime_graphics_opengl_GL.UNPACK_ALIGNMENT = 3317;
lime_graphics_opengl_GL.PACK_ALIGNMENT = 3333;
lime_graphics_opengl_GL.MAX_TEXTURE_SIZE = 3379;
lime_graphics_opengl_GL.MAX_VIEWPORT_DIMS = 3386;
lime_graphics_opengl_GL.SUBPIXEL_BITS = 3408;
lime_graphics_opengl_GL.RED_BITS = 3410;
lime_graphics_opengl_GL.GREEN_BITS = 3411;
lime_graphics_opengl_GL.BLUE_BITS = 3412;
lime_graphics_opengl_GL.ALPHA_BITS = 3413;
lime_graphics_opengl_GL.DEPTH_BITS = 3414;
lime_graphics_opengl_GL.STENCIL_BITS = 3415;
lime_graphics_opengl_GL.POLYGON_OFFSET_UNITS = 10752;
lime_graphics_opengl_GL.POLYGON_OFFSET_FACTOR = 32824;
lime_graphics_opengl_GL.TEXTURE_BINDING_2D = 32873;
lime_graphics_opengl_GL.SAMPLE_BUFFERS = 32936;
lime_graphics_opengl_GL.SAMPLES = 32937;
lime_graphics_opengl_GL.SAMPLE_COVERAGE_VALUE = 32938;
lime_graphics_opengl_GL.SAMPLE_COVERAGE_INVERT = 32939;
lime_graphics_opengl_GL.NUM_COMPRESSED_TEXTURE_FORMATS = 34466;
lime_graphics_opengl_GL.COMPRESSED_TEXTURE_FORMATS = 34467;
lime_graphics_opengl_GL.DONT_CARE = 4352;
lime_graphics_opengl_GL.FASTEST = 4353;
lime_graphics_opengl_GL.NICEST = 4354;
lime_graphics_opengl_GL.GENERATE_MIPMAP_HINT = 33170;
lime_graphics_opengl_GL.BYTE = 5120;
lime_graphics_opengl_GL.UNSIGNED_BYTE = 5121;
lime_graphics_opengl_GL.SHORT = 5122;
lime_graphics_opengl_GL.UNSIGNED_SHORT = 5123;
lime_graphics_opengl_GL.INT = 5124;
lime_graphics_opengl_GL.UNSIGNED_INT = 5125;
lime_graphics_opengl_GL.FLOAT = 5126;
lime_graphics_opengl_GL.DEPTH_COMPONENT = 6402;
lime_graphics_opengl_GL.ALPHA = 6406;
lime_graphics_opengl_GL.RGB = 6407;
lime_graphics_opengl_GL.RGBA = 6408;
lime_graphics_opengl_GL.LUMINANCE = 6409;
lime_graphics_opengl_GL.LUMINANCE_ALPHA = 6410;
lime_graphics_opengl_GL.UNSIGNED_SHORT_4_4_4_4 = 32819;
lime_graphics_opengl_GL.UNSIGNED_SHORT_5_5_5_1 = 32820;
lime_graphics_opengl_GL.UNSIGNED_SHORT_5_6_5 = 33635;
lime_graphics_opengl_GL.FRAGMENT_SHADER = 35632;
lime_graphics_opengl_GL.VERTEX_SHADER = 35633;
lime_graphics_opengl_GL.MAX_VERTEX_ATTRIBS = 34921;
lime_graphics_opengl_GL.MAX_VERTEX_UNIFORM_VECTORS = 36347;
lime_graphics_opengl_GL.MAX_VARYING_VECTORS = 36348;
lime_graphics_opengl_GL.MAX_COMBINED_TEXTURE_IMAGE_UNITS = 35661;
lime_graphics_opengl_GL.MAX_VERTEX_TEXTURE_IMAGE_UNITS = 35660;
lime_graphics_opengl_GL.MAX_TEXTURE_IMAGE_UNITS = 34930;
lime_graphics_opengl_GL.MAX_FRAGMENT_UNIFORM_VECTORS = 36349;
lime_graphics_opengl_GL.SHADER_TYPE = 35663;
lime_graphics_opengl_GL.DELETE_STATUS = 35712;
lime_graphics_opengl_GL.LINK_STATUS = 35714;
lime_graphics_opengl_GL.VALIDATE_STATUS = 35715;
lime_graphics_opengl_GL.ATTACHED_SHADERS = 35717;
lime_graphics_opengl_GL.ACTIVE_UNIFORMS = 35718;
lime_graphics_opengl_GL.ACTIVE_ATTRIBUTES = 35721;
lime_graphics_opengl_GL.SHADING_LANGUAGE_VERSION = 35724;
lime_graphics_opengl_GL.CURRENT_PROGRAM = 35725;
lime_graphics_opengl_GL.NEVER = 512;
lime_graphics_opengl_GL.LESS = 513;
lime_graphics_opengl_GL.EQUAL = 514;
lime_graphics_opengl_GL.LEQUAL = 515;
lime_graphics_opengl_GL.GREATER = 516;
lime_graphics_opengl_GL.NOTEQUAL = 517;
lime_graphics_opengl_GL.GEQUAL = 518;
lime_graphics_opengl_GL.ALWAYS = 519;
lime_graphics_opengl_GL.KEEP = 7680;
lime_graphics_opengl_GL.REPLACE = 7681;
lime_graphics_opengl_GL.INCR = 7682;
lime_graphics_opengl_GL.DECR = 7683;
lime_graphics_opengl_GL.INVERT = 5386;
lime_graphics_opengl_GL.INCR_WRAP = 34055;
lime_graphics_opengl_GL.DECR_WRAP = 34056;
lime_graphics_opengl_GL.VENDOR = 7936;
lime_graphics_opengl_GL.RENDERER = 7937;
lime_graphics_opengl_GL.VERSION = 7938;
lime_graphics_opengl_GL.EXTENSIONS = 7939;
lime_graphics_opengl_GL.NEAREST = 9728;
lime_graphics_opengl_GL.LINEAR = 9729;
lime_graphics_opengl_GL.NEAREST_MIPMAP_NEAREST = 9984;
lime_graphics_opengl_GL.LINEAR_MIPMAP_NEAREST = 9985;
lime_graphics_opengl_GL.NEAREST_MIPMAP_LINEAR = 9986;
lime_graphics_opengl_GL.LINEAR_MIPMAP_LINEAR = 9987;
lime_graphics_opengl_GL.TEXTURE_MAG_FILTER = 10240;
lime_graphics_opengl_GL.TEXTURE_MIN_FILTER = 10241;
lime_graphics_opengl_GL.TEXTURE_WRAP_S = 10242;
lime_graphics_opengl_GL.TEXTURE_WRAP_T = 10243;
lime_graphics_opengl_GL.TEXTURE_2D = 3553;
lime_graphics_opengl_GL.TEXTURE = 5890;
lime_graphics_opengl_GL.TEXTURE_CUBE_MAP = 34067;
lime_graphics_opengl_GL.TEXTURE_BINDING_CUBE_MAP = 34068;
lime_graphics_opengl_GL.TEXTURE_CUBE_MAP_POSITIVE_X = 34069;
lime_graphics_opengl_GL.TEXTURE_CUBE_MAP_NEGATIVE_X = 34070;
lime_graphics_opengl_GL.TEXTURE_CUBE_MAP_POSITIVE_Y = 34071;
lime_graphics_opengl_GL.TEXTURE_CUBE_MAP_NEGATIVE_Y = 34072;
lime_graphics_opengl_GL.TEXTURE_CUBE_MAP_POSITIVE_Z = 34073;
lime_graphics_opengl_GL.TEXTURE_CUBE_MAP_NEGATIVE_Z = 34074;
lime_graphics_opengl_GL.MAX_CUBE_MAP_TEXTURE_SIZE = 34076;
lime_graphics_opengl_GL.TEXTURE0 = 33984;
lime_graphics_opengl_GL.TEXTURE1 = 33985;
lime_graphics_opengl_GL.TEXTURE2 = 33986;
lime_graphics_opengl_GL.TEXTURE3 = 33987;
lime_graphics_opengl_GL.TEXTURE4 = 33988;
lime_graphics_opengl_GL.TEXTURE5 = 33989;
lime_graphics_opengl_GL.TEXTURE6 = 33990;
lime_graphics_opengl_GL.TEXTURE7 = 33991;
lime_graphics_opengl_GL.TEXTURE8 = 33992;
lime_graphics_opengl_GL.TEXTURE9 = 33993;
lime_graphics_opengl_GL.TEXTURE10 = 33994;
lime_graphics_opengl_GL.TEXTURE11 = 33995;
lime_graphics_opengl_GL.TEXTURE12 = 33996;
lime_graphics_opengl_GL.TEXTURE13 = 33997;
lime_graphics_opengl_GL.TEXTURE14 = 33998;
lime_graphics_opengl_GL.TEXTURE15 = 33999;
lime_graphics_opengl_GL.TEXTURE16 = 34000;
lime_graphics_opengl_GL.TEXTURE17 = 34001;
lime_graphics_opengl_GL.TEXTURE18 = 34002;
lime_graphics_opengl_GL.TEXTURE19 = 34003;
lime_graphics_opengl_GL.TEXTURE20 = 34004;
lime_graphics_opengl_GL.TEXTURE21 = 34005;
lime_graphics_opengl_GL.TEXTURE22 = 34006;
lime_graphics_opengl_GL.TEXTURE23 = 34007;
lime_graphics_opengl_GL.TEXTURE24 = 34008;
lime_graphics_opengl_GL.TEXTURE25 = 34009;
lime_graphics_opengl_GL.TEXTURE26 = 34010;
lime_graphics_opengl_GL.TEXTURE27 = 34011;
lime_graphics_opengl_GL.TEXTURE28 = 34012;
lime_graphics_opengl_GL.TEXTURE29 = 34013;
lime_graphics_opengl_GL.TEXTURE30 = 34014;
lime_graphics_opengl_GL.TEXTURE31 = 34015;
lime_graphics_opengl_GL.ACTIVE_TEXTURE = 34016;
lime_graphics_opengl_GL.REPEAT = 10497;
lime_graphics_opengl_GL.CLAMP_TO_EDGE = 33071;
lime_graphics_opengl_GL.MIRRORED_REPEAT = 33648;
lime_graphics_opengl_GL.FLOAT_VEC2 = 35664;
lime_graphics_opengl_GL.FLOAT_VEC3 = 35665;
lime_graphics_opengl_GL.FLOAT_VEC4 = 35666;
lime_graphics_opengl_GL.INT_VEC2 = 35667;
lime_graphics_opengl_GL.INT_VEC3 = 35668;
lime_graphics_opengl_GL.INT_VEC4 = 35669;
lime_graphics_opengl_GL.BOOL = 35670;
lime_graphics_opengl_GL.BOOL_VEC2 = 35671;
lime_graphics_opengl_GL.BOOL_VEC3 = 35672;
lime_graphics_opengl_GL.BOOL_VEC4 = 35673;
lime_graphics_opengl_GL.FLOAT_MAT2 = 35674;
lime_graphics_opengl_GL.FLOAT_MAT3 = 35675;
lime_graphics_opengl_GL.FLOAT_MAT4 = 35676;
lime_graphics_opengl_GL.SAMPLER_2D = 35678;
lime_graphics_opengl_GL.SAMPLER_CUBE = 35680;
lime_graphics_opengl_GL.VERTEX_ATTRIB_ARRAY_ENABLED = 34338;
lime_graphics_opengl_GL.VERTEX_ATTRIB_ARRAY_SIZE = 34339;
lime_graphics_opengl_GL.VERTEX_ATTRIB_ARRAY_STRIDE = 34340;
lime_graphics_opengl_GL.VERTEX_ATTRIB_ARRAY_TYPE = 34341;
lime_graphics_opengl_GL.VERTEX_ATTRIB_ARRAY_NORMALIZED = 34922;
lime_graphics_opengl_GL.VERTEX_ATTRIB_ARRAY_POINTER = 34373;
lime_graphics_opengl_GL.VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = 34975;
lime_graphics_opengl_GL.IMPLEMENTATION_COLOR_READ_TYPE = 35738;
lime_graphics_opengl_GL.IMPLEMENTATION_COLOR_READ_FORMAT = 35739;
lime_graphics_opengl_GL.VERTEX_PROGRAM_POINT_SIZE = 34370;
lime_graphics_opengl_GL.POINT_SPRITE = 34913;
lime_graphics_opengl_GL.COMPILE_STATUS = 35713;
lime_graphics_opengl_GL.LOW_FLOAT = 36336;
lime_graphics_opengl_GL.MEDIUM_FLOAT = 36337;
lime_graphics_opengl_GL.HIGH_FLOAT = 36338;
lime_graphics_opengl_GL.LOW_INT = 36339;
lime_graphics_opengl_GL.MEDIUM_INT = 36340;
lime_graphics_opengl_GL.HIGH_INT = 36341;
lime_graphics_opengl_GL.FRAMEBUFFER = 36160;
lime_graphics_opengl_GL.RENDERBUFFER = 36161;
lime_graphics_opengl_GL.RGBA4 = 32854;
lime_graphics_opengl_GL.RGB5_A1 = 32855;
lime_graphics_opengl_GL.RGB565 = 36194;
lime_graphics_opengl_GL.DEPTH_COMPONENT16 = 33189;
lime_graphics_opengl_GL.STENCIL_INDEX = 6401;
lime_graphics_opengl_GL.STENCIL_INDEX8 = 36168;
lime_graphics_opengl_GL.DEPTH_STENCIL = 34041;
lime_graphics_opengl_GL.RENDERBUFFER_WIDTH = 36162;
lime_graphics_opengl_GL.RENDERBUFFER_HEIGHT = 36163;
lime_graphics_opengl_GL.RENDERBUFFER_INTERNAL_FORMAT = 36164;
lime_graphics_opengl_GL.RENDERBUFFER_RED_SIZE = 36176;
lime_graphics_opengl_GL.RENDERBUFFER_GREEN_SIZE = 36177;
lime_graphics_opengl_GL.RENDERBUFFER_BLUE_SIZE = 36178;
lime_graphics_opengl_GL.RENDERBUFFER_ALPHA_SIZE = 36179;
lime_graphics_opengl_GL.RENDERBUFFER_DEPTH_SIZE = 36180;
lime_graphics_opengl_GL.RENDERBUFFER_STENCIL_SIZE = 36181;
lime_graphics_opengl_GL.FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE = 36048;
lime_graphics_opengl_GL.FRAMEBUFFER_ATTACHMENT_OBJECT_NAME = 36049;
lime_graphics_opengl_GL.FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL = 36050;
lime_graphics_opengl_GL.FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = 36051;
lime_graphics_opengl_GL.COLOR_ATTACHMENT0 = 36064;
lime_graphics_opengl_GL.DEPTH_ATTACHMENT = 36096;
lime_graphics_opengl_GL.STENCIL_ATTACHMENT = 36128;
lime_graphics_opengl_GL.DEPTH_STENCIL_ATTACHMENT = 33306;
lime_graphics_opengl_GL.NONE = 0;
lime_graphics_opengl_GL.FRAMEBUFFER_COMPLETE = 36053;
lime_graphics_opengl_GL.FRAMEBUFFER_INCOMPLETE_ATTACHMENT = 36054;
lime_graphics_opengl_GL.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = 36055;
lime_graphics_opengl_GL.FRAMEBUFFER_INCOMPLETE_DIMENSIONS = 36057;
lime_graphics_opengl_GL.FRAMEBUFFER_UNSUPPORTED = 36061;
lime_graphics_opengl_GL.FRAMEBUFFER_BINDING = 36006;
lime_graphics_opengl_GL.RENDERBUFFER_BINDING = 36007;
lime_graphics_opengl_GL.MAX_RENDERBUFFER_SIZE = 34024;
lime_graphics_opengl_GL.INVALID_FRAMEBUFFER_OPERATION = 1286;
lime_graphics_opengl_GL.UNPACK_FLIP_Y_WEBGL = 37440;
lime_graphics_opengl_GL.UNPACK_PREMULTIPLY_ALPHA_WEBGL = 37441;
lime_graphics_opengl_GL.CONTEXT_LOST_WEBGL = 37442;
lime_graphics_opengl_GL.UNPACK_COLORSPACE_CONVERSION_WEBGL = 37443;
lime_graphics_opengl_GL.BROWSER_DEFAULT_WEBGL = 37444;
lime_graphics_opengl_GL.READ_BUFFER = 3074;
lime_graphics_opengl_GL.UNPACK_ROW_LENGTH = 3314;
lime_graphics_opengl_GL.UNPACK_SKIP_ROWS = 3315;
lime_graphics_opengl_GL.UNPACK_SKIP_PIXELS = 3316;
lime_graphics_opengl_GL.PACK_ROW_LENGTH = 3330;
lime_graphics_opengl_GL.PACK_SKIP_ROWS = 3331;
lime_graphics_opengl_GL.PACK_SKIP_PIXELS = 3332;
lime_graphics_opengl_GL.TEXTURE_BINDING_3D = 32874;
lime_graphics_opengl_GL.UNPACK_SKIP_IMAGES = 32877;
lime_graphics_opengl_GL.UNPACK_IMAGE_HEIGHT = 32878;
lime_graphics_opengl_GL.MAX_3D_TEXTURE_SIZE = 32883;
lime_graphics_opengl_GL.MAX_ELEMENTS_VERTICES = 33000;
lime_graphics_opengl_GL.MAX_ELEMENTS_INDICES = 33001;
lime_graphics_opengl_GL.MAX_TEXTURE_LOD_BIAS = 34045;
lime_graphics_opengl_GL.MAX_FRAGMENT_UNIFORM_COMPONENTS = 35657;
lime_graphics_opengl_GL.MAX_VERTEX_UNIFORM_COMPONENTS = 35658;
lime_graphics_opengl_GL.MAX_ARRAY_TEXTURE_LAYERS = 35071;
lime_graphics_opengl_GL.MIN_PROGRAM_TEXEL_OFFSET = 35076;
lime_graphics_opengl_GL.MAX_PROGRAM_TEXEL_OFFSET = 35077;
lime_graphics_opengl_GL.MAX_VARYING_COMPONENTS = 35659;
lime_graphics_opengl_GL.FRAGMENT_SHADER_DERIVATIVE_HINT = 35723;
lime_graphics_opengl_GL.RASTERIZER_DISCARD = 35977;
lime_graphics_opengl_GL.VERTEX_ARRAY_BINDING = 34229;
lime_graphics_opengl_GL.MAX_VERTEX_OUTPUT_COMPONENTS = 37154;
lime_graphics_opengl_GL.MAX_FRAGMENT_INPUT_COMPONENTS = 37157;
lime_graphics_opengl_GL.MAX_SERVER_WAIT_TIMEOUT = 37137;
lime_graphics_opengl_GL.MAX_ELEMENT_INDEX = 36203;
lime_graphics_opengl_GL.RED = 6403;
lime_graphics_opengl_GL.RGB8 = 32849;
lime_graphics_opengl_GL.RGBA8 = 32856;
lime_graphics_opengl_GL.RGB10_A2 = 32857;
lime_graphics_opengl_GL.TEXTURE_3D = 32879;
lime_graphics_opengl_GL.TEXTURE_WRAP_R = 32882;
lime_graphics_opengl_GL.TEXTURE_MIN_LOD = 33082;
lime_graphics_opengl_GL.TEXTURE_MAX_LOD = 33083;
lime_graphics_opengl_GL.TEXTURE_BASE_LEVEL = 33084;
lime_graphics_opengl_GL.TEXTURE_MAX_LEVEL = 33085;
lime_graphics_opengl_GL.TEXTURE_COMPARE_MODE = 34892;
lime_graphics_opengl_GL.TEXTURE_COMPARE_FUNC = 34893;
lime_graphics_opengl_GL.SRGB = 35904;
lime_graphics_opengl_GL.SRGB8 = 35905;
lime_graphics_opengl_GL.SRGB8_ALPHA8 = 35907;
lime_graphics_opengl_GL.COMPARE_REF_TO_TEXTURE = 34894;
lime_graphics_opengl_GL.RGBA32F = 34836;
lime_graphics_opengl_GL.RGB32F = 34837;
lime_graphics_opengl_GL.RGBA16F = 34842;
lime_graphics_opengl_GL.RGB16F = 34843;
lime_graphics_opengl_GL.TEXTURE_2D_ARRAY = 35866;
lime_graphics_opengl_GL.TEXTURE_BINDING_2D_ARRAY = 35869;
lime_graphics_opengl_GL.R11F_G11F_B10F = 35898;
lime_graphics_opengl_GL.RGB9_E5 = 35901;
lime_graphics_opengl_GL.RGBA32UI = 36208;
lime_graphics_opengl_GL.RGB32UI = 36209;
lime_graphics_opengl_GL.RGBA16UI = 36214;
lime_graphics_opengl_GL.RGB16UI = 36215;
lime_graphics_opengl_GL.RGBA8UI = 36220;
lime_graphics_opengl_GL.RGB8UI = 36221;
lime_graphics_opengl_GL.RGBA32I = 36226;
lime_graphics_opengl_GL.RGB32I = 36227;
lime_graphics_opengl_GL.RGBA16I = 36232;
lime_graphics_opengl_GL.RGB16I = 36233;
lime_graphics_opengl_GL.RGBA8I = 36238;
lime_graphics_opengl_GL.RGB8I = 36239;
lime_graphics_opengl_GL.RED_INTEGER = 36244;
lime_graphics_opengl_GL.RGB_INTEGER = 36248;
lime_graphics_opengl_GL.RGBA_INTEGER = 36249;
lime_graphics_opengl_GL.R8 = 33321;
lime_graphics_opengl_GL.RG8 = 33323;
lime_graphics_opengl_GL.R16F = 33325;
lime_graphics_opengl_GL.R32F = 33326;
lime_graphics_opengl_GL.RG16F = 33327;
lime_graphics_opengl_GL.RG32F = 33328;
lime_graphics_opengl_GL.R8I = 33329;
lime_graphics_opengl_GL.R8UI = 33330;
lime_graphics_opengl_GL.R16I = 33331;
lime_graphics_opengl_GL.R16UI = 33332;
lime_graphics_opengl_GL.R32I = 33333;
lime_graphics_opengl_GL.R32UI = 33334;
lime_graphics_opengl_GL.RG8I = 33335;
lime_graphics_opengl_GL.RG8UI = 33336;
lime_graphics_opengl_GL.RG16I = 33337;
lime_graphics_opengl_GL.RG16UI = 33338;
lime_graphics_opengl_GL.RG32I = 33339;
lime_graphics_opengl_GL.RG32UI = 33340;
lime_graphics_opengl_GL.R8_SNORM = 36756;
lime_graphics_opengl_GL.RG8_SNORM = 36757;
lime_graphics_opengl_GL.RGB8_SNORM = 36758;
lime_graphics_opengl_GL.RGBA8_SNORM = 36759;
lime_graphics_opengl_GL.RGB10_A2UI = 36975;
lime_graphics_opengl_GL.TEXTURE_IMMUTABLE_FORMAT = 37167;
lime_graphics_opengl_GL.TEXTURE_IMMUTABLE_LEVELS = 33503;
lime_graphics_opengl_GL.UNSIGNED_INT_2_10_10_10_REV = 33640;
lime_graphics_opengl_GL.UNSIGNED_INT_10F_11F_11F_REV = 35899;
lime_graphics_opengl_GL.UNSIGNED_INT_5_9_9_9_REV = 35902;
lime_graphics_opengl_GL.FLOAT_32_UNSIGNED_INT_24_8_REV = 36269;
lime_graphics_opengl_GL.UNSIGNED_INT_24_8 = 34042;
lime_graphics_opengl_GL.HALF_FLOAT = 5131;
lime_graphics_opengl_GL.RG = 33319;
lime_graphics_opengl_GL.RG_INTEGER = 33320;
lime_graphics_opengl_GL.INT_2_10_10_10_REV = 36255;
lime_graphics_opengl_GL.CURRENT_QUERY = 34917;
lime_graphics_opengl_GL.QUERY_RESULT = 34918;
lime_graphics_opengl_GL.QUERY_RESULT_AVAILABLE = 34919;
lime_graphics_opengl_GL.ANY_SAMPLES_PASSED = 35887;
lime_graphics_opengl_GL.ANY_SAMPLES_PASSED_CONSERVATIVE = 36202;
lime_graphics_opengl_GL.MAX_DRAW_BUFFERS = 34852;
lime_graphics_opengl_GL.DRAW_BUFFER0 = 34853;
lime_graphics_opengl_GL.DRAW_BUFFER1 = 34854;
lime_graphics_opengl_GL.DRAW_BUFFER2 = 34855;
lime_graphics_opengl_GL.DRAW_BUFFER3 = 34856;
lime_graphics_opengl_GL.DRAW_BUFFER4 = 34857;
lime_graphics_opengl_GL.DRAW_BUFFER5 = 34858;
lime_graphics_opengl_GL.DRAW_BUFFER6 = 34859;
lime_graphics_opengl_GL.DRAW_BUFFER7 = 34860;
lime_graphics_opengl_GL.DRAW_BUFFER8 = 34861;
lime_graphics_opengl_GL.DRAW_BUFFER9 = 34862;
lime_graphics_opengl_GL.DRAW_BUFFER10 = 34863;
lime_graphics_opengl_GL.DRAW_BUFFER11 = 34864;
lime_graphics_opengl_GL.DRAW_BUFFER12 = 34865;
lime_graphics_opengl_GL.DRAW_BUFFER13 = 34866;
lime_graphics_opengl_GL.DRAW_BUFFER14 = 34867;
lime_graphics_opengl_GL.DRAW_BUFFER15 = 34868;
lime_graphics_opengl_GL.MAX_COLOR_ATTACHMENTS = 36063;
lime_graphics_opengl_GL.COLOR_ATTACHMENT1 = 36065;
lime_graphics_opengl_GL.COLOR_ATTACHMENT2 = 36066;
lime_graphics_opengl_GL.COLOR_ATTACHMENT3 = 36067;
lime_graphics_opengl_GL.COLOR_ATTACHMENT4 = 36068;
lime_graphics_opengl_GL.COLOR_ATTACHMENT5 = 36069;
lime_graphics_opengl_GL.COLOR_ATTACHMENT6 = 36070;
lime_graphics_opengl_GL.COLOR_ATTACHMENT7 = 36071;
lime_graphics_opengl_GL.COLOR_ATTACHMENT8 = 36072;
lime_graphics_opengl_GL.COLOR_ATTACHMENT9 = 36073;
lime_graphics_opengl_GL.COLOR_ATTACHMENT10 = 36074;
lime_graphics_opengl_GL.COLOR_ATTACHMENT11 = 36075;
lime_graphics_opengl_GL.COLOR_ATTACHMENT12 = 36076;
lime_graphics_opengl_GL.COLOR_ATTACHMENT13 = 36077;
lime_graphics_opengl_GL.COLOR_ATTACHMENT14 = 36078;
lime_graphics_opengl_GL.COLOR_ATTACHMENT15 = 36079;
lime_graphics_opengl_GL.SAMPLER_3D = 35679;
lime_graphics_opengl_GL.SAMPLER_2D_SHADOW = 35682;
lime_graphics_opengl_GL.SAMPLER_2D_ARRAY = 36289;
lime_graphics_opengl_GL.SAMPLER_2D_ARRAY_SHADOW = 36292;
lime_graphics_opengl_GL.SAMPLER_CUBE_SHADOW = 36293;
lime_graphics_opengl_GL.INT_SAMPLER_2D = 36298;
lime_graphics_opengl_GL.INT_SAMPLER_3D = 36299;
lime_graphics_opengl_GL.INT_SAMPLER_CUBE = 36300;
lime_graphics_opengl_GL.INT_SAMPLER_2D_ARRAY = 36303;
lime_graphics_opengl_GL.UNSIGNED_INT_SAMPLER_2D = 36306;
lime_graphics_opengl_GL.UNSIGNED_INT_SAMPLER_3D = 36307;
lime_graphics_opengl_GL.UNSIGNED_INT_SAMPLER_CUBE = 36308;
lime_graphics_opengl_GL.UNSIGNED_INT_SAMPLER_2D_ARRAY = 36311;
lime_graphics_opengl_GL.MAX_SAMPLES = 36183;
lime_graphics_opengl_GL.SAMPLER_BINDING = 35097;
lime_graphics_opengl_GL.PIXEL_PACK_BUFFER = 35051;
lime_graphics_opengl_GL.PIXEL_UNPACK_BUFFER = 35052;
lime_graphics_opengl_GL.PIXEL_PACK_BUFFER_BINDING = 35053;
lime_graphics_opengl_GL.PIXEL_UNPACK_BUFFER_BINDING = 35055;
lime_graphics_opengl_GL.COPY_READ_BUFFER = 36662;
lime_graphics_opengl_GL.COPY_WRITE_BUFFER = 36663;
lime_graphics_opengl_GL.COPY_READ_BUFFER_BINDING = 36662;
lime_graphics_opengl_GL.COPY_WRITE_BUFFER_BINDING = 36663;
lime_graphics_opengl_GL.FLOAT_MAT2x3 = 35685;
lime_graphics_opengl_GL.FLOAT_MAT2x4 = 35686;
lime_graphics_opengl_GL.FLOAT_MAT3x2 = 35687;
lime_graphics_opengl_GL.FLOAT_MAT3x4 = 35688;
lime_graphics_opengl_GL.FLOAT_MAT4x2 = 35689;
lime_graphics_opengl_GL.FLOAT_MAT4x3 = 35690;
lime_graphics_opengl_GL.UNSIGNED_INT_VEC2 = 36294;
lime_graphics_opengl_GL.UNSIGNED_INT_VEC3 = 36295;
lime_graphics_opengl_GL.UNSIGNED_INT_VEC4 = 36296;
lime_graphics_opengl_GL.UNSIGNED_NORMALIZED = 35863;
lime_graphics_opengl_GL.SIGNED_NORMALIZED = 36764;
lime_graphics_opengl_GL.VERTEX_ATTRIB_ARRAY_INTEGER = 35069;
lime_graphics_opengl_GL.VERTEX_ATTRIB_ARRAY_DIVISOR = 35070;
lime_graphics_opengl_GL.TRANSFORM_FEEDBACK_BUFFER_MODE = 35967;
lime_graphics_opengl_GL.MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS = 35968;
lime_graphics_opengl_GL.TRANSFORM_FEEDBACK_VARYINGS = 35971;
lime_graphics_opengl_GL.TRANSFORM_FEEDBACK_BUFFER_START = 35972;
lime_graphics_opengl_GL.TRANSFORM_FEEDBACK_BUFFER_SIZE = 35973;
lime_graphics_opengl_GL.TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN = 35976;
lime_graphics_opengl_GL.MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS = 35978;
lime_graphics_opengl_GL.MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS = 35979;
lime_graphics_opengl_GL.INTERLEAVED_ATTRIBS = 35980;
lime_graphics_opengl_GL.SEPARATE_ATTRIBS = 35981;
lime_graphics_opengl_GL.TRANSFORM_FEEDBACK_BUFFER = 35982;
lime_graphics_opengl_GL.TRANSFORM_FEEDBACK_BUFFER_BINDING = 35983;
lime_graphics_opengl_GL.TRANSFORM_FEEDBACK = 36386;
lime_graphics_opengl_GL.TRANSFORM_FEEDBACK_PAUSED = 36387;
lime_graphics_opengl_GL.TRANSFORM_FEEDBACK_ACTIVE = 36388;
lime_graphics_opengl_GL.TRANSFORM_FEEDBACK_BINDING = 36389;
lime_graphics_opengl_GL.FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING = 33296;
lime_graphics_opengl_GL.FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE = 33297;
lime_graphics_opengl_GL.FRAMEBUFFER_ATTACHMENT_RED_SIZE = 33298;
lime_graphics_opengl_GL.FRAMEBUFFER_ATTACHMENT_GREEN_SIZE = 33299;
lime_graphics_opengl_GL.FRAMEBUFFER_ATTACHMENT_BLUE_SIZE = 33300;
lime_graphics_opengl_GL.FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE = 33301;
lime_graphics_opengl_GL.FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE = 33302;
lime_graphics_opengl_GL.FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE = 33303;
lime_graphics_opengl_GL.FRAMEBUFFER_DEFAULT = 33304;
lime_graphics_opengl_GL.DEPTH24_STENCIL8 = 35056;
lime_graphics_opengl_GL.DRAW_FRAMEBUFFER_BINDING = 36006;
lime_graphics_opengl_GL.READ_FRAMEBUFFER = 36008;
lime_graphics_opengl_GL.DRAW_FRAMEBUFFER = 36009;
lime_graphics_opengl_GL.READ_FRAMEBUFFER_BINDING = 36010;
lime_graphics_opengl_GL.RENDERBUFFER_SAMPLES = 36011;
lime_graphics_opengl_GL.FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER = 36052;
lime_graphics_opengl_GL.FRAMEBUFFER_INCOMPLETE_MULTISAMPLE = 36182;
lime_graphics_opengl_GL.UNIFORM_BUFFER = 35345;
lime_graphics_opengl_GL.UNIFORM_BUFFER_BINDING = 35368;
lime_graphics_opengl_GL.UNIFORM_BUFFER_START = 35369;
lime_graphics_opengl_GL.UNIFORM_BUFFER_SIZE = 35370;
lime_graphics_opengl_GL.MAX_VERTEX_UNIFORM_BLOCKS = 35371;
lime_graphics_opengl_GL.MAX_FRAGMENT_UNIFORM_BLOCKS = 35373;
lime_graphics_opengl_GL.MAX_COMBINED_UNIFORM_BLOCKS = 35374;
lime_graphics_opengl_GL.MAX_UNIFORM_BUFFER_BINDINGS = 35375;
lime_graphics_opengl_GL.MAX_UNIFORM_BLOCK_SIZE = 35376;
lime_graphics_opengl_GL.MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS = 35377;
lime_graphics_opengl_GL.MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS = 35379;
lime_graphics_opengl_GL.UNIFORM_BUFFER_OFFSET_ALIGNMENT = 35380;
lime_graphics_opengl_GL.ACTIVE_UNIFORM_BLOCKS = 35382;
lime_graphics_opengl_GL.UNIFORM_TYPE = 35383;
lime_graphics_opengl_GL.UNIFORM_SIZE = 35384;
lime_graphics_opengl_GL.UNIFORM_BLOCK_INDEX = 35386;
lime_graphics_opengl_GL.UNIFORM_OFFSET = 35387;
lime_graphics_opengl_GL.UNIFORM_ARRAY_STRIDE = 35388;
lime_graphics_opengl_GL.UNIFORM_MATRIX_STRIDE = 35389;
lime_graphics_opengl_GL.UNIFORM_IS_ROW_MAJOR = 35390;
lime_graphics_opengl_GL.UNIFORM_BLOCK_BINDING = 35391;
lime_graphics_opengl_GL.UNIFORM_BLOCK_DATA_SIZE = 35392;
lime_graphics_opengl_GL.UNIFORM_BLOCK_ACTIVE_UNIFORMS = 35394;
lime_graphics_opengl_GL.UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES = 35395;
lime_graphics_opengl_GL.UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER = 35396;
lime_graphics_opengl_GL.UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER = 35398;
lime_graphics_opengl_GL.OBJECT_TYPE = 37138;
lime_graphics_opengl_GL.SYNC_CONDITION = 37139;
lime_graphics_opengl_GL.SYNC_STATUS = 37140;
lime_graphics_opengl_GL.SYNC_FLAGS = 37141;
lime_graphics_opengl_GL.SYNC_FENCE = 37142;
lime_graphics_opengl_GL.SYNC_GPU_COMMANDS_COMPLETE = 37143;
lime_graphics_opengl_GL.UNSIGNALED = 37144;
lime_graphics_opengl_GL.SIGNALED = 37145;
lime_graphics_opengl_GL.ALREADY_SIGNALED = 37146;
lime_graphics_opengl_GL.TIMEOUT_EXPIRED = 37147;
lime_graphics_opengl_GL.CONDITION_SATISFIED = 37148;
lime_graphics_opengl_GL.WAIT_FAILED = 37149;
lime_graphics_opengl_GL.SYNC_FLUSH_COMMANDS_BIT = 1;
lime_graphics_opengl_GL.COLOR = 6144;
lime_graphics_opengl_GL.DEPTH = 6145;
lime_graphics_opengl_GL.STENCIL = 6146;
lime_graphics_opengl_GL.MIN = 32775;
lime_graphics_opengl_GL.MAX = 32776;
lime_graphics_opengl_GL.DEPTH_COMPONENT24 = 33190;
lime_graphics_opengl_GL.STREAM_READ = 35041;
lime_graphics_opengl_GL.STREAM_COPY = 35042;
lime_graphics_opengl_GL.STATIC_READ = 35045;
lime_graphics_opengl_GL.STATIC_COPY = 35046;
lime_graphics_opengl_GL.DYNAMIC_READ = 35049;
lime_graphics_opengl_GL.DYNAMIC_COPY = 35050;
lime_graphics_opengl_GL.DEPTH_COMPONENT32F = 36012;
lime_graphics_opengl_GL.DEPTH32F_STENCIL8 = 36013;
lime_graphics_opengl_GL.INVALID_INDEX = -1;
lime_graphics_opengl_GL.TIMEOUT_IGNORED = -1;
lime_graphics_opengl_GL.MAX_CLIENT_WAIT_TIMEOUT_WEBGL = 37447;
lime_math_ColorMatrix.__identity = [1.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0];
lime_math_Matrix3.__identity = new lime_math_Matrix3();
lime_math_Matrix4.__identity = [1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0];
lime_media_openal_AL.NONE = 0;
lime_media_openal_AL.FALSE = 0;
lime_media_openal_AL.TRUE = 1;
lime_media_openal_AL.SOURCE_RELATIVE = 514;
lime_media_openal_AL.CONE_INNER_ANGLE = 4097;
lime_media_openal_AL.CONE_OUTER_ANGLE = 4098;
lime_media_openal_AL.PITCH = 4099;
lime_media_openal_AL.POSITION = 4100;
lime_media_openal_AL.DIRECTION = 4101;
lime_media_openal_AL.VELOCITY = 4102;
lime_media_openal_AL.LOOPING = 4103;
lime_media_openal_AL.BUFFER = 4105;
lime_media_openal_AL.GAIN = 4106;
lime_media_openal_AL.MIN_GAIN = 4109;
lime_media_openal_AL.MAX_GAIN = 4110;
lime_media_openal_AL.ORIENTATION = 4111;
lime_media_openal_AL.SOURCE_STATE = 4112;
lime_media_openal_AL.INITIAL = 4113;
lime_media_openal_AL.PLAYING = 4114;
lime_media_openal_AL.PAUSED = 4115;
lime_media_openal_AL.STOPPED = 4116;
lime_media_openal_AL.BUFFERS_QUEUED = 4117;
lime_media_openal_AL.BUFFERS_PROCESSED = 4118;
lime_media_openal_AL.REFERENCE_DISTANCE = 4128;
lime_media_openal_AL.ROLLOFF_FACTOR = 4129;
lime_media_openal_AL.CONE_OUTER_GAIN = 4130;
lime_media_openal_AL.MAX_DISTANCE = 4131;
lime_media_openal_AL.SEC_OFFSET = 4132;
lime_media_openal_AL.SAMPLE_OFFSET = 4133;
lime_media_openal_AL.BYTE_OFFSET = 4134;
lime_media_openal_AL.SOURCE_TYPE = 4135;
lime_media_openal_AL.STATIC = 4136;
lime_media_openal_AL.STREAMING = 4137;
lime_media_openal_AL.UNDETERMINED = 4144;
lime_media_openal_AL.FORMAT_MONO8 = 4352;
lime_media_openal_AL.FORMAT_MONO16 = 4353;
lime_media_openal_AL.FORMAT_STEREO8 = 4354;
lime_media_openal_AL.FORMAT_STEREO16 = 4355;
lime_media_openal_AL.FREQUENCY = 8193;
lime_media_openal_AL.BITS = 8194;
lime_media_openal_AL.CHANNELS = 8195;
lime_media_openal_AL.SIZE = 8196;
lime_media_openal_AL.NO_ERROR = 0;
lime_media_openal_AL.INVALID_NAME = 40961;
lime_media_openal_AL.INVALID_ENUM = 40962;
lime_media_openal_AL.INVALID_VALUE = 40963;
lime_media_openal_AL.INVALID_OPERATION = 40964;
lime_media_openal_AL.OUT_OF_MEMORY = 40965;
lime_media_openal_AL.VENDOR = 45057;
lime_media_openal_AL.VERSION = 45058;
lime_media_openal_AL.RENDERER = 45059;
lime_media_openal_AL.EXTENSIONS = 45060;
lime_media_openal_AL.DOPPLER_FACTOR = 49152;
lime_media_openal_AL.SPEED_OF_SOUND = 49155;
lime_media_openal_AL.DOPPLER_VELOCITY = 49153;
lime_media_openal_AL.DISTANCE_MODEL = 53248;
lime_media_openal_AL.INVERSE_DISTANCE = 53249;
lime_media_openal_AL.INVERSE_DISTANCE_CLAMPED = 53250;
lime_media_openal_AL.LINEAR_DISTANCE = 53251;
lime_media_openal_AL.LINEAR_DISTANCE_CLAMPED = 53252;
lime_media_openal_AL.EXPONENT_DISTANCE = 53253;
lime_media_openal_AL.EXPONENT_DISTANCE_CLAMPED = 53254;
lime_media_openal_AL.METERS_PER_UNIT = 131076;
lime_media_openal_AL.DIRECT_FILTER = 131077;
lime_media_openal_AL.AUXILIARY_SEND_FILTER = 131078;
lime_media_openal_AL.AIR_ABSORPTION_FACTOR = 131079;
lime_media_openal_AL.ROOM_ROLLOFF_FACTOR = 131080;
lime_media_openal_AL.CONE_OUTER_GAINHF = 131081;
lime_media_openal_AL.DIRECT_FILTER_GAINHF_AUTO = 131082;
lime_media_openal_AL.AUXILIARY_SEND_FILTER_GAIN_AUTO = 131083;
lime_media_openal_AL.AUXILIARY_SEND_FILTER_GAINHF_AUTO = 131084;
lime_media_openal_AL.REVERB_DENSITY = 1;
lime_media_openal_AL.REVERB_DIFFUSION = 2;
lime_media_openal_AL.REVERB_GAIN = 3;
lime_media_openal_AL.REVERB_GAINHF = 4;
lime_media_openal_AL.REVERB_DECAY_TIME = 5;
lime_media_openal_AL.REVERB_DECAY_HFRATIO = 6;
lime_media_openal_AL.REVERB_REFLECTIONS_GAIN = 7;
lime_media_openal_AL.REVERB_REFLECTIONS_DELAY = 8;
lime_media_openal_AL.REVERB_LATE_REVERB_GAIN = 9;
lime_media_openal_AL.REVERB_LATE_REVERB_DELAY = 10;
lime_media_openal_AL.REVERB_AIR_ABSORPTION_GAINHF = 11;
lime_media_openal_AL.REVERB_ROOM_ROLLOFF_FACTOR = 12;
lime_media_openal_AL.REVERB_DECAY_HFLIMIT = 13;
lime_media_openal_AL.EAXREVERB_DENSITY = 1;
lime_media_openal_AL.EAXREVERB_DIFFUSION = 2;
lime_media_openal_AL.EAXREVERB_GAIN = 3;
lime_media_openal_AL.EAXREVERB_GAINHF = 4;
lime_media_openal_AL.EAXREVERB_GAINLF = 5;
lime_media_openal_AL.EAXREVERB_DECAY_TIME = 6;
lime_media_openal_AL.EAXREVERB_DECAY_HFRATIO = 7;
lime_media_openal_AL.EAXREVERB_DECAY_LFRATIO = 8;
lime_media_openal_AL.EAXREVERB_REFLECTIONS_GAIN = 9;
lime_media_openal_AL.EAXREVERB_REFLECTIONS_DELAY = 10;
lime_media_openal_AL.EAXREVERB_REFLECTIONS_PAN = 11;
lime_media_openal_AL.EAXREVERB_LATE_REVERB_GAIN = 12;
lime_media_openal_AL.EAXREVERB_LATE_REVERB_DELAY = 13;
lime_media_openal_AL.EAXREVERB_LATE_REVERB_PAN = 14;
lime_media_openal_AL.EAXREVERB_ECHO_TIME = 15;
lime_media_openal_AL.EAXREVERB_ECHO_DEPTH = 16;
lime_media_openal_AL.EAXREVERB_MODULATION_TIME = 17;
lime_media_openal_AL.EAXREVERB_MODULATION_DEPTH = 18;
lime_media_openal_AL.EAXREVERB_AIR_ABSORPTION_GAINHF = 19;
lime_media_openal_AL.EAXREVERB_HFREFERENCE = 20;
lime_media_openal_AL.EAXREVERB_LFREFERENCE = 21;
lime_media_openal_AL.EAXREVERB_ROOM_ROLLOFF_FACTOR = 22;
lime_media_openal_AL.EAXREVERB_DECAY_HFLIMIT = 23;
lime_media_openal_AL.CHORUS_WAVEFORM = 1;
lime_media_openal_AL.CHORUS_PHASE = 2;
lime_media_openal_AL.CHORUS_RATE = 3;
lime_media_openal_AL.CHORUS_DEPTH = 4;
lime_media_openal_AL.CHORUS_FEEDBACK = 5;
lime_media_openal_AL.CHORUS_DELAY = 6;
lime_media_openal_AL.DISTORTION_EDGE = 1;
lime_media_openal_AL.DISTORTION_GAIN = 2;
lime_media_openal_AL.DISTORTION_LOWPASS_CUTOFF = 3;
lime_media_openal_AL.DISTORTION_EQCENTER = 4;
lime_media_openal_AL.DISTORTION_EQBANDWIDTH = 5;
lime_media_openal_AL.ECHO_DELAY = 1;
lime_media_openal_AL.ECHO_LRDELAY = 2;
lime_media_openal_AL.ECHO_DAMPING = 3;
lime_media_openal_AL.ECHO_FEEDBACK = 4;
lime_media_openal_AL.ECHO_SPREAD = 5;
lime_media_openal_AL.FLANGER_WAVEFORM = 1;
lime_media_openal_AL.FLANGER_PHASE = 2;
lime_media_openal_AL.FLANGER_RATE = 3;
lime_media_openal_AL.FLANGER_DEPTH = 4;
lime_media_openal_AL.FLANGER_FEEDBACK = 5;
lime_media_openal_AL.FLANGER_DELAY = 6;
lime_media_openal_AL.FREQUENCY_SHIFTER_FREQUENCY = 1;
lime_media_openal_AL.FREQUENCY_SHIFTER_LEFT_DIRECTION = 2;
lime_media_openal_AL.FREQUENCY_SHIFTER_RIGHT_DIRECTION = 3;
lime_media_openal_AL.VOCAL_MORPHER_PHONEMEA = 1;
lime_media_openal_AL.VOCAL_MORPHER_PHONEMEA_COARSE_TUNING = 2;
lime_media_openal_AL.VOCAL_MORPHER_PHONEMEB = 3;
lime_media_openal_AL.VOCAL_MORPHER_PHONEMEB_COARSE_TUNING = 4;
lime_media_openal_AL.VOCAL_MORPHER_WAVEFORM = 5;
lime_media_openal_AL.VOCAL_MORPHER_RATE = 6;
lime_media_openal_AL.PITCH_SHIFTER_COARSE_TUNE = 1;
lime_media_openal_AL.PITCH_SHIFTER_FINE_TUNE = 2;
lime_media_openal_AL.RING_MODULATOR_FREQUENCY = 1;
lime_media_openal_AL.RING_MODULATOR_HIGHPASS_CUTOFF = 2;
lime_media_openal_AL.RING_MODULATOR_WAVEFORM = 3;
lime_media_openal_AL.AUTOWAH_ATTACK_TIME = 1;
lime_media_openal_AL.AUTOWAH_RELEASE_TIME = 2;
lime_media_openal_AL.AUTOWAH_RESONANCE = 3;
lime_media_openal_AL.AUTOWAH_PEAK_GAIN = 4;
lime_media_openal_AL.COMPRESSOR_ONOFF = 1;
lime_media_openal_AL.EQUALIZER_LOW_GAIN = 1;
lime_media_openal_AL.EQUALIZER_LOW_CUTOFF = 2;
lime_media_openal_AL.EQUALIZER_MID1_GAIN = 3;
lime_media_openal_AL.EQUALIZER_MID1_CENTER = 4;
lime_media_openal_AL.EQUALIZER_MID1_WIDTH = 5;
lime_media_openal_AL.EQUALIZER_MID2_GAIN = 6;
lime_media_openal_AL.EQUALIZER_MID2_CENTER = 7;
lime_media_openal_AL.EQUALIZER_MID2_WIDTH = 8;
lime_media_openal_AL.EQUALIZER_HIGH_GAIN = 9;
lime_media_openal_AL.EQUALIZER_HIGH_CUTOFF = 10;
lime_media_openal_AL.EFFECT_FIRST_PARAMETER = 0;
lime_media_openal_AL.EFFECT_LAST_PARAMETER = 32768;
lime_media_openal_AL.EFFECT_TYPE = 32769;
lime_media_openal_AL.EFFECT_NULL = 0;
lime_media_openal_AL.EFFECT_EAXREVERB = 32768;
lime_media_openal_AL.EFFECT_REVERB = 1;
lime_media_openal_AL.EFFECT_CHORUS = 2;
lime_media_openal_AL.EFFECT_DISTORTION = 3;
lime_media_openal_AL.EFFECT_ECHO = 4;
lime_media_openal_AL.EFFECT_FLANGER = 5;
lime_media_openal_AL.EFFECT_FREQUENCY_SHIFTER = 6;
lime_media_openal_AL.EFFECT_VOCAL_MORPHER = 7;
lime_media_openal_AL.EFFECT_PITCH_SHIFTER = 8;
lime_media_openal_AL.EFFECT_RING_MODULATOR = 9;
lime_media_openal_AL.FFECT_AUTOWAH = 10;
lime_media_openal_AL.EFFECT_COMPRESSOR = 11;
lime_media_openal_AL.EFFECT_EQUALIZER = 12;
lime_media_openal_AL.EFFECTSLOT_EFFECT = 1;
lime_media_openal_AL.EFFECTSLOT_GAIN = 2;
lime_media_openal_AL.EFFECTSLOT_AUXILIARY_SEND_AUTO = 3;
lime_media_openal_AL.LOWPASS_GAIN = 1;
lime_media_openal_AL.LOWPASS_GAINHF = 2;
lime_media_openal_AL.HIGHPASS_GAIN = 1;
lime_media_openal_AL.HIGHPASS_GAINLF = 2;
lime_media_openal_AL.BANDPASS_GAIN = 1;
lime_media_openal_AL.BANDPASS_GAINLF = 2;
lime_media_openal_AL.BANDPASS_GAINHF = 3;
lime_media_openal_AL.FILTER_FIRST_PARAMETER = 0;
lime_media_openal_AL.FILTER_LAST_PARAMETER = 32768;
lime_media_openal_AL.FILTER_TYPE = 32769;
lime_media_openal_AL.FILTER_NULL = 0;
lime_media_openal_AL.FILTER_LOWPASS = 1;
lime_media_openal_AL.FILTER_HIGHPASS = 2;
lime_media_openal_AL.FILTER_BANDPASS = 3;
lime_media_openal_ALC.FALSE = 0;
lime_media_openal_ALC.TRUE = 1;
lime_media_openal_ALC.FREQUENCY = 4103;
lime_media_openal_ALC.REFRESH = 4104;
lime_media_openal_ALC.SYNC = 4105;
lime_media_openal_ALC.MONO_SOURCES = 4112;
lime_media_openal_ALC.STEREO_SOURCES = 4113;
lime_media_openal_ALC.NO_ERROR = 0;
lime_media_openal_ALC.INVALID_DEVICE = 40961;
lime_media_openal_ALC.INVALID_CONTEXT = 40962;
lime_media_openal_ALC.INVALID_ENUM = 40963;
lime_media_openal_ALC.INVALID_VALUE = 40964;
lime_media_openal_ALC.OUT_OF_MEMORY = 40965;
lime_media_openal_ALC.ATTRIBUTES_SIZE = 4098;
lime_media_openal_ALC.ALL_ATTRIBUTES = 4099;
lime_media_openal_ALC.DEFAULT_DEVICE_SPECIFIER = 4100;
lime_media_openal_ALC.DEVICE_SPECIFIER = 4101;
lime_media_openal_ALC.EXTENSIONS = 4102;
lime_media_openal_ALC.ENUMERATE_ALL_EXT = 1;
lime_media_openal_ALC.DEFAULT_ALL_DEVICES_SPECIFIER = 4114;
lime_media_openal_ALC.ALL_DEVICES_SPECIFIER = 4115;
lime_system_BackgroundWorker.MESSAGE_COMPLETE = "__COMPLETE__";
lime_system_BackgroundWorker.MESSAGE_ERROR = "__ERROR__";
lime_system_Clipboard.onUpdate = new lime_app__$Event_$Void_$Void();
lime_system_Sensor.sensorByID = new haxe_ds_IntMap();
lime_system_Sensor.sensors = [];
lime_system_System.__directories = new haxe_ds_IntMap();
lime_ui_Gamepad.devices = new haxe_ds_IntMap();
lime_ui_Gamepad.onConnect = new lime_app__$Event_$lime_$ui_$Gamepad_$Void();
lime_ui_GamepadAxis.LEFT_X = 0;
lime_ui_GamepadAxis.LEFT_Y = 1;
lime_ui_GamepadAxis.RIGHT_X = 2;
lime_ui_GamepadAxis.RIGHT_Y = 3;
lime_ui_GamepadAxis.TRIGGER_LEFT = 4;
lime_ui_GamepadAxis.TRIGGER_RIGHT = 5;
lime_ui_GamepadButton.A = 0;
lime_ui_GamepadButton.B = 1;
lime_ui_GamepadButton.X = 2;
lime_ui_GamepadButton.Y = 3;
lime_ui_GamepadButton.BACK = 4;
lime_ui_GamepadButton.GUIDE = 5;
lime_ui_GamepadButton.START = 6;
lime_ui_GamepadButton.LEFT_STICK = 7;
lime_ui_GamepadButton.RIGHT_STICK = 8;
lime_ui_GamepadButton.LEFT_SHOULDER = 9;
lime_ui_GamepadButton.RIGHT_SHOULDER = 10;
lime_ui_GamepadButton.DPAD_UP = 11;
lime_ui_GamepadButton.DPAD_DOWN = 12;
lime_ui_GamepadButton.DPAD_LEFT = 13;
lime_ui_GamepadButton.DPAD_RIGHT = 14;
lime_ui_Joystick.devices = new haxe_ds_IntMap();
lime_ui_Joystick.onConnect = new lime_app__$Event_$lime_$ui_$Joystick_$Void();
lime_ui_JoystickHatPosition.CENTER = 0;
lime_ui_JoystickHatPosition.DOWN = 4;
lime_ui_JoystickHatPosition.LEFT = 8;
lime_ui_JoystickHatPosition.RIGHT = 2;
lime_ui_JoystickHatPosition.UP = 1;
lime_ui_JoystickHatPosition.DOWN_LEFT = 12;
lime_ui_JoystickHatPosition.DOWN_RIGHT = 6;
lime_ui_JoystickHatPosition.UP_LEFT = 9;
lime_ui_JoystickHatPosition.UP_RIGHT = 3;
lime_ui_KeyCode.UNKNOWN = 0;
lime_ui_KeyCode.BACKSPACE = 8;
lime_ui_KeyCode.TAB = 9;
lime_ui_KeyCode.RETURN = 13;
lime_ui_KeyCode.ESCAPE = 27;
lime_ui_KeyCode.SPACE = 32;
lime_ui_KeyCode.EXCLAMATION = 33;
lime_ui_KeyCode.QUOTE = 34;
lime_ui_KeyCode.HASH = 35;
lime_ui_KeyCode.DOLLAR = 36;
lime_ui_KeyCode.PERCENT = 37;
lime_ui_KeyCode.AMPERSAND = 38;
lime_ui_KeyCode.SINGLE_QUOTE = 39;
lime_ui_KeyCode.LEFT_PARENTHESIS = 40;
lime_ui_KeyCode.RIGHT_PARENTHESIS = 41;
lime_ui_KeyCode.ASTERISK = 42;
lime_ui_KeyCode.PLUS = 43;
lime_ui_KeyCode.COMMA = 44;
lime_ui_KeyCode.MINUS = 45;
lime_ui_KeyCode.PERIOD = 46;
lime_ui_KeyCode.SLASH = 47;
lime_ui_KeyCode.NUMBER_0 = 48;
lime_ui_KeyCode.NUMBER_1 = 49;
lime_ui_KeyCode.NUMBER_2 = 50;
lime_ui_KeyCode.NUMBER_3 = 51;
lime_ui_KeyCode.NUMBER_4 = 52;
lime_ui_KeyCode.NUMBER_5 = 53;
lime_ui_KeyCode.NUMBER_6 = 54;
lime_ui_KeyCode.NUMBER_7 = 55;
lime_ui_KeyCode.NUMBER_8 = 56;
lime_ui_KeyCode.NUMBER_9 = 57;
lime_ui_KeyCode.COLON = 58;
lime_ui_KeyCode.SEMICOLON = 59;
lime_ui_KeyCode.LESS_THAN = 60;
lime_ui_KeyCode.EQUALS = 61;
lime_ui_KeyCode.GREATER_THAN = 62;
lime_ui_KeyCode.QUESTION = 63;
lime_ui_KeyCode.AT = 64;
lime_ui_KeyCode.LEFT_BRACKET = 91;
lime_ui_KeyCode.BACKSLASH = 92;
lime_ui_KeyCode.RIGHT_BRACKET = 93;
lime_ui_KeyCode.CARET = 94;
lime_ui_KeyCode.UNDERSCORE = 95;
lime_ui_KeyCode.GRAVE = 96;
lime_ui_KeyCode.A = 97;
lime_ui_KeyCode.B = 98;
lime_ui_KeyCode.C = 99;
lime_ui_KeyCode.D = 100;
lime_ui_KeyCode.E = 101;
lime_ui_KeyCode.F = 102;
lime_ui_KeyCode.G = 103;
lime_ui_KeyCode.H = 104;
lime_ui_KeyCode.I = 105;
lime_ui_KeyCode.J = 106;
lime_ui_KeyCode.K = 107;
lime_ui_KeyCode.L = 108;
lime_ui_KeyCode.M = 109;
lime_ui_KeyCode.N = 110;
lime_ui_KeyCode.O = 111;
lime_ui_KeyCode.P = 112;
lime_ui_KeyCode.Q = 113;
lime_ui_KeyCode.R = 114;
lime_ui_KeyCode.S = 115;
lime_ui_KeyCode.T = 116;
lime_ui_KeyCode.U = 117;
lime_ui_KeyCode.V = 118;
lime_ui_KeyCode.W = 119;
lime_ui_KeyCode.X = 120;
lime_ui_KeyCode.Y = 121;
lime_ui_KeyCode.Z = 122;
lime_ui_KeyCode.DELETE = 127;
lime_ui_KeyCode.CAPS_LOCK = 1073741881;
lime_ui_KeyCode.F1 = 1073741882;
lime_ui_KeyCode.F2 = 1073741883;
lime_ui_KeyCode.F3 = 1073741884;
lime_ui_KeyCode.F4 = 1073741885;
lime_ui_KeyCode.F5 = 1073741886;
lime_ui_KeyCode.F6 = 1073741887;
lime_ui_KeyCode.F7 = 1073741888;
lime_ui_KeyCode.F8 = 1073741889;
lime_ui_KeyCode.F9 = 1073741890;
lime_ui_KeyCode.F10 = 1073741891;
lime_ui_KeyCode.F11 = 1073741892;
lime_ui_KeyCode.F12 = 1073741893;
lime_ui_KeyCode.PRINT_SCREEN = 1073741894;
lime_ui_KeyCode.SCROLL_LOCK = 1073741895;
lime_ui_KeyCode.PAUSE = 1073741896;
lime_ui_KeyCode.INSERT = 1073741897;
lime_ui_KeyCode.HOME = 1073741898;
lime_ui_KeyCode.PAGE_UP = 1073741899;
lime_ui_KeyCode.END = 1073741901;
lime_ui_KeyCode.PAGE_DOWN = 1073741902;
lime_ui_KeyCode.RIGHT = 1073741903;
lime_ui_KeyCode.LEFT = 1073741904;
lime_ui_KeyCode.DOWN = 1073741905;
lime_ui_KeyCode.UP = 1073741906;
lime_ui_KeyCode.NUM_LOCK = 1073741907;
lime_ui_KeyCode.NUMPAD_DIVIDE = 1073741908;
lime_ui_KeyCode.NUMPAD_MULTIPLY = 1073741909;
lime_ui_KeyCode.NUMPAD_MINUS = 1073741910;
lime_ui_KeyCode.NUMPAD_PLUS = 1073741911;
lime_ui_KeyCode.NUMPAD_ENTER = 1073741912;
lime_ui_KeyCode.NUMPAD_1 = 1073741913;
lime_ui_KeyCode.NUMPAD_2 = 1073741914;
lime_ui_KeyCode.NUMPAD_3 = 1073741915;
lime_ui_KeyCode.NUMPAD_4 = 1073741916;
lime_ui_KeyCode.NUMPAD_5 = 1073741917;
lime_ui_KeyCode.NUMPAD_6 = 1073741918;
lime_ui_KeyCode.NUMPAD_7 = 1073741919;
lime_ui_KeyCode.NUMPAD_8 = 1073741920;
lime_ui_KeyCode.NUMPAD_9 = 1073741921;
lime_ui_KeyCode.NUMPAD_0 = 1073741922;
lime_ui_KeyCode.NUMPAD_PERIOD = 1073741923;
lime_ui_KeyCode.APPLICATION = 1073741925;
lime_ui_KeyCode.POWER = 1073741926;
lime_ui_KeyCode.NUMPAD_EQUALS = 1073741927;
lime_ui_KeyCode.F13 = 1073741928;
lime_ui_KeyCode.F14 = 1073741929;
lime_ui_KeyCode.F15 = 1073741930;
lime_ui_KeyCode.F16 = 1073741931;
lime_ui_KeyCode.F17 = 1073741932;
lime_ui_KeyCode.F18 = 1073741933;
lime_ui_KeyCode.F19 = 1073741934;
lime_ui_KeyCode.F20 = 1073741935;
lime_ui_KeyCode.F21 = 1073741936;
lime_ui_KeyCode.F22 = 1073741937;
lime_ui_KeyCode.F23 = 1073741938;
lime_ui_KeyCode.F24 = 1073741939;
lime_ui_KeyCode.EXECUTE = 1073741940;
lime_ui_KeyCode.HELP = 1073741941;
lime_ui_KeyCode.MENU = 1073741942;
lime_ui_KeyCode.SELECT = 1073741943;
lime_ui_KeyCode.STOP = 1073741944;
lime_ui_KeyCode.AGAIN = 1073741945;
lime_ui_KeyCode.UNDO = 1073741946;
lime_ui_KeyCode.CUT = 1073741947;
lime_ui_KeyCode.COPY = 1073741948;
lime_ui_KeyCode.PASTE = 1073741949;
lime_ui_KeyCode.FIND = 1073741950;
lime_ui_KeyCode.MUTE = 1073741951;
lime_ui_KeyCode.VOLUME_UP = 1073741952;
lime_ui_KeyCode.VOLUME_DOWN = 1073741953;
lime_ui_KeyCode.NUMPAD_COMMA = 1073741957;
lime_ui_KeyCode.ALT_ERASE = 1073741977;
lime_ui_KeyCode.SYSTEM_REQUEST = 1073741978;
lime_ui_KeyCode.CANCEL = 1073741979;
lime_ui_KeyCode.CLEAR = 1073741980;
lime_ui_KeyCode.PRIOR = 1073741981;
lime_ui_KeyCode.RETURN2 = 1073741982;
lime_ui_KeyCode.SEPARATOR = 1073741983;
lime_ui_KeyCode.OUT = 1073741984;
lime_ui_KeyCode.OPER = 1073741985;
lime_ui_KeyCode.CLEAR_AGAIN = 1073741986;
lime_ui_KeyCode.CRSEL = 1073741987;
lime_ui_KeyCode.EXSEL = 1073741988;
lime_ui_KeyCode.NUMPAD_00 = 1073742000;
lime_ui_KeyCode.NUMPAD_000 = 1073742001;
lime_ui_KeyCode.THOUSAND_SEPARATOR = 1073742002;
lime_ui_KeyCode.DECIMAL_SEPARATOR = 1073742003;
lime_ui_KeyCode.CURRENCY_UNIT = 1073742004;
lime_ui_KeyCode.CURRENCY_SUBUNIT = 1073742005;
lime_ui_KeyCode.NUMPAD_LEFT_PARENTHESIS = 1073742006;
lime_ui_KeyCode.NUMPAD_RIGHT_PARENTHESIS = 1073742007;
lime_ui_KeyCode.NUMPAD_LEFT_BRACE = 1073742008;
lime_ui_KeyCode.NUMPAD_RIGHT_BRACE = 1073742009;
lime_ui_KeyCode.NUMPAD_TAB = 1073742010;
lime_ui_KeyCode.NUMPAD_BACKSPACE = 1073742011;
lime_ui_KeyCode.NUMPAD_A = 1073742012;
lime_ui_KeyCode.NUMPAD_B = 1073742013;
lime_ui_KeyCode.NUMPAD_C = 1073742014;
lime_ui_KeyCode.NUMPAD_D = 1073742015;
lime_ui_KeyCode.NUMPAD_E = 1073742016;
lime_ui_KeyCode.NUMPAD_F = 1073742017;
lime_ui_KeyCode.NUMPAD_XOR = 1073742018;
lime_ui_KeyCode.NUMPAD_POWER = 1073742019;
lime_ui_KeyCode.NUMPAD_PERCENT = 1073742020;
lime_ui_KeyCode.NUMPAD_LESS_THAN = 1073742021;
lime_ui_KeyCode.NUMPAD_GREATER_THAN = 1073742022;
lime_ui_KeyCode.NUMPAD_AMPERSAND = 1073742023;
lime_ui_KeyCode.NUMPAD_DOUBLE_AMPERSAND = 1073742024;
lime_ui_KeyCode.NUMPAD_VERTICAL_BAR = 1073742025;
lime_ui_KeyCode.NUMPAD_DOUBLE_VERTICAL_BAR = 1073742026;
lime_ui_KeyCode.NUMPAD_COLON = 1073742027;
lime_ui_KeyCode.NUMPAD_HASH = 1073742028;
lime_ui_KeyCode.NUMPAD_SPACE = 1073742029;
lime_ui_KeyCode.NUMPAD_AT = 1073742030;
lime_ui_KeyCode.NUMPAD_EXCLAMATION = 1073742031;
lime_ui_KeyCode.NUMPAD_MEM_STORE = 1073742032;
lime_ui_KeyCode.NUMPAD_MEM_RECALL = 1073742033;
lime_ui_KeyCode.NUMPAD_MEM_CLEAR = 1073742034;
lime_ui_KeyCode.NUMPAD_MEM_ADD = 1073742035;
lime_ui_KeyCode.NUMPAD_MEM_SUBTRACT = 1073742036;
lime_ui_KeyCode.NUMPAD_MEM_MULTIPLY = 1073742037;
lime_ui_KeyCode.NUMPAD_MEM_DIVIDE = 1073742038;
lime_ui_KeyCode.NUMPAD_PLUS_MINUS = 1073742039;
lime_ui_KeyCode.NUMPAD_CLEAR = 1073742040;
lime_ui_KeyCode.NUMPAD_CLEAR_ENTRY = 1073742041;
lime_ui_KeyCode.NUMPAD_BINARY = 1073742042;
lime_ui_KeyCode.NUMPAD_OCTAL = 1073742043;
lime_ui_KeyCode.NUMPAD_DECIMAL = 1073742044;
lime_ui_KeyCode.NUMPAD_HEXADECIMAL = 1073742045;
lime_ui_KeyCode.LEFT_CTRL = 1073742048;
lime_ui_KeyCode.LEFT_SHIFT = 1073742049;
lime_ui_KeyCode.LEFT_ALT = 1073742050;
lime_ui_KeyCode.LEFT_META = 1073742051;
lime_ui_KeyCode.RIGHT_CTRL = 1073742052;
lime_ui_KeyCode.RIGHT_SHIFT = 1073742053;
lime_ui_KeyCode.RIGHT_ALT = 1073742054;
lime_ui_KeyCode.RIGHT_META = 1073742055;
lime_ui_KeyCode.MODE = 1073742081;
lime_ui_KeyCode.AUDIO_NEXT = 1073742082;
lime_ui_KeyCode.AUDIO_PREVIOUS = 1073742083;
lime_ui_KeyCode.AUDIO_STOP = 1073742084;
lime_ui_KeyCode.AUDIO_PLAY = 1073742085;
lime_ui_KeyCode.AUDIO_MUTE = 1073742086;
lime_ui_KeyCode.MEDIA_SELECT = 1073742087;
lime_ui_KeyCode.WWW = 1073742088;
lime_ui_KeyCode.MAIL = 1073742089;
lime_ui_KeyCode.CALCULATOR = 1073742090;
lime_ui_KeyCode.COMPUTER = 1073742091;
lime_ui_KeyCode.APP_CONTROL_SEARCH = 1073742092;
lime_ui_KeyCode.APP_CONTROL_HOME = 1073742093;
lime_ui_KeyCode.APP_CONTROL_BACK = 1073742094;
lime_ui_KeyCode.APP_CONTROL_FORWARD = 1073742095;
lime_ui_KeyCode.APP_CONTROL_STOP = 1073742096;
lime_ui_KeyCode.APP_CONTROL_REFRESH = 1073742097;
lime_ui_KeyCode.APP_CONTROL_BOOKMARKS = 1073742098;
lime_ui_KeyCode.BRIGHTNESS_DOWN = 1073742099;
lime_ui_KeyCode.BRIGHTNESS_UP = 1073742100;
lime_ui_KeyCode.DISPLAY_SWITCH = 1073742101;
lime_ui_KeyCode.BACKLIGHT_TOGGLE = 1073742102;
lime_ui_KeyCode.BACKLIGHT_DOWN = 1073742103;
lime_ui_KeyCode.BACKLIGHT_UP = 1073742104;
lime_ui_KeyCode.EJECT = 1073742105;
lime_ui_KeyCode.SLEEP = 1073742106;
lime_ui_KeyModifier.NONE = 0;
lime_ui_KeyModifier.LEFT_SHIFT = 1;
lime_ui_KeyModifier.RIGHT_SHIFT = 2;
lime_ui_KeyModifier.LEFT_CTRL = 64;
lime_ui_KeyModifier.RIGHT_CTRL = 128;
lime_ui_KeyModifier.LEFT_ALT = 256;
lime_ui_KeyModifier.RIGHT_ALT = 512;
lime_ui_KeyModifier.LEFT_META = 1024;
lime_ui_KeyModifier.RIGHT_META = 2048;
lime_ui_KeyModifier.NUM_LOCK = 4096;
lime_ui_KeyModifier.CAPS_LOCK = 8192;
lime_ui_KeyModifier.MODE = 16384;
lime_ui_KeyModifier.CTRL = 192;
lime_ui_KeyModifier.SHIFT = 3;
lime_ui_KeyModifier.ALT = 768;
lime_ui_KeyModifier.META = 3072;
lime_ui_ScanCode.UNKNOWN = 0;
lime_ui_ScanCode.BACKSPACE = 42;
lime_ui_ScanCode.TAB = 43;
lime_ui_ScanCode.RETURN = 40;
lime_ui_ScanCode.ESCAPE = 41;
lime_ui_ScanCode.SPACE = 44;
lime_ui_ScanCode.SINGLE_QUOTE = 52;
lime_ui_ScanCode.COMMA = 54;
lime_ui_ScanCode.MINUS = 45;
lime_ui_ScanCode.PERIOD = 55;
lime_ui_ScanCode.SLASH = 56;
lime_ui_ScanCode.NUMBER_0 = 39;
lime_ui_ScanCode.NUMBER_1 = 30;
lime_ui_ScanCode.NUMBER_2 = 31;
lime_ui_ScanCode.NUMBER_3 = 32;
lime_ui_ScanCode.NUMBER_4 = 33;
lime_ui_ScanCode.NUMBER_5 = 34;
lime_ui_ScanCode.NUMBER_6 = 35;
lime_ui_ScanCode.NUMBER_7 = 36;
lime_ui_ScanCode.NUMBER_8 = 37;
lime_ui_ScanCode.NUMBER_9 = 38;
lime_ui_ScanCode.SEMICOLON = 51;
lime_ui_ScanCode.EQUALS = 46;
lime_ui_ScanCode.LEFT_BRACKET = 47;
lime_ui_ScanCode.BACKSLASH = 49;
lime_ui_ScanCode.RIGHT_BRACKET = 48;
lime_ui_ScanCode.GRAVE = 53;
lime_ui_ScanCode.A = 4;
lime_ui_ScanCode.B = 5;
lime_ui_ScanCode.C = 6;
lime_ui_ScanCode.D = 7;
lime_ui_ScanCode.E = 8;
lime_ui_ScanCode.F = 9;
lime_ui_ScanCode.G = 10;
lime_ui_ScanCode.H = 11;
lime_ui_ScanCode.I = 12;
lime_ui_ScanCode.J = 13;
lime_ui_ScanCode.K = 14;
lime_ui_ScanCode.L = 15;
lime_ui_ScanCode.M = 16;
lime_ui_ScanCode.N = 17;
lime_ui_ScanCode.O = 18;
lime_ui_ScanCode.P = 19;
lime_ui_ScanCode.Q = 20;
lime_ui_ScanCode.R = 21;
lime_ui_ScanCode.S = 22;
lime_ui_ScanCode.T = 23;
lime_ui_ScanCode.U = 24;
lime_ui_ScanCode.V = 25;
lime_ui_ScanCode.W = 26;
lime_ui_ScanCode.X = 27;
lime_ui_ScanCode.Y = 28;
lime_ui_ScanCode.Z = 29;
lime_ui_ScanCode.DELETE = 76;
lime_ui_ScanCode.CAPS_LOCK = 57;
lime_ui_ScanCode.F1 = 58;
lime_ui_ScanCode.F2 = 59;
lime_ui_ScanCode.F3 = 60;
lime_ui_ScanCode.F4 = 61;
lime_ui_ScanCode.F5 = 62;
lime_ui_ScanCode.F6 = 63;
lime_ui_ScanCode.F7 = 64;
lime_ui_ScanCode.F8 = 65;
lime_ui_ScanCode.F9 = 66;
lime_ui_ScanCode.F10 = 67;
lime_ui_ScanCode.F11 = 68;
lime_ui_ScanCode.F12 = 69;
lime_ui_ScanCode.PRINT_SCREEN = 70;
lime_ui_ScanCode.SCROLL_LOCK = 71;
lime_ui_ScanCode.PAUSE = 72;
lime_ui_ScanCode.INSERT = 73;
lime_ui_ScanCode.HOME = 74;
lime_ui_ScanCode.PAGE_UP = 75;
lime_ui_ScanCode.END = 77;
lime_ui_ScanCode.PAGE_DOWN = 78;
lime_ui_ScanCode.RIGHT = 79;
lime_ui_ScanCode.LEFT = 80;
lime_ui_ScanCode.DOWN = 81;
lime_ui_ScanCode.UP = 82;
lime_ui_ScanCode.NUM_LOCK = 83;
lime_ui_ScanCode.NUMPAD_DIVIDE = 84;
lime_ui_ScanCode.NUMPAD_MULTIPLY = 85;
lime_ui_ScanCode.NUMPAD_MINUS = 86;
lime_ui_ScanCode.NUMPAD_PLUS = 87;
lime_ui_ScanCode.NUMPAD_ENTER = 88;
lime_ui_ScanCode.NUMPAD_1 = 89;
lime_ui_ScanCode.NUMPAD_2 = 90;
lime_ui_ScanCode.NUMPAD_3 = 91;
lime_ui_ScanCode.NUMPAD_4 = 92;
lime_ui_ScanCode.NUMPAD_5 = 93;
lime_ui_ScanCode.NUMPAD_6 = 94;
lime_ui_ScanCode.NUMPAD_7 = 95;
lime_ui_ScanCode.NUMPAD_8 = 96;
lime_ui_ScanCode.NUMPAD_9 = 97;
lime_ui_ScanCode.NUMPAD_0 = 98;
lime_ui_ScanCode.NUMPAD_PERIOD = 99;
lime_ui_ScanCode.APPLICATION = 101;
lime_ui_ScanCode.POWER = 102;
lime_ui_ScanCode.NUMPAD_EQUALS = 103;
lime_ui_ScanCode.F13 = 104;
lime_ui_ScanCode.F14 = 105;
lime_ui_ScanCode.F15 = 106;
lime_ui_ScanCode.F16 = 107;
lime_ui_ScanCode.F17 = 108;
lime_ui_ScanCode.F18 = 109;
lime_ui_ScanCode.F19 = 110;
lime_ui_ScanCode.F20 = 111;
lime_ui_ScanCode.F21 = 112;
lime_ui_ScanCode.F22 = 113;
lime_ui_ScanCode.F23 = 114;
lime_ui_ScanCode.F24 = 115;
lime_ui_ScanCode.EXECUTE = 116;
lime_ui_ScanCode.HELP = 117;
lime_ui_ScanCode.MENU = 118;
lime_ui_ScanCode.SELECT = 119;
lime_ui_ScanCode.STOP = 120;
lime_ui_ScanCode.AGAIN = 121;
lime_ui_ScanCode.UNDO = 122;
lime_ui_ScanCode.CUT = 123;
lime_ui_ScanCode.COPY = 124;
lime_ui_ScanCode.PASTE = 125;
lime_ui_ScanCode.FIND = 126;
lime_ui_ScanCode.MUTE = 127;
lime_ui_ScanCode.VOLUME_UP = 128;
lime_ui_ScanCode.VOLUME_DOWN = 129;
lime_ui_ScanCode.NUMPAD_COMMA = 133;
lime_ui_ScanCode.ALT_ERASE = 153;
lime_ui_ScanCode.SYSTEM_REQUEST = 154;
lime_ui_ScanCode.CANCEL = 155;
lime_ui_ScanCode.CLEAR = 156;
lime_ui_ScanCode.PRIOR = 157;
lime_ui_ScanCode.RETURN2 = 158;
lime_ui_ScanCode.SEPARATOR = 159;
lime_ui_ScanCode.OUT = 160;
lime_ui_ScanCode.OPER = 161;
lime_ui_ScanCode.CLEAR_AGAIN = 162;
lime_ui_ScanCode.CRSEL = 163;
lime_ui_ScanCode.EXSEL = 164;
lime_ui_ScanCode.NUMPAD_00 = 176;
lime_ui_ScanCode.NUMPAD_000 = 177;
lime_ui_ScanCode.THOUSAND_SEPARATOR = 178;
lime_ui_ScanCode.DECIMAL_SEPARATOR = 179;
lime_ui_ScanCode.CURRENCY_UNIT = 180;
lime_ui_ScanCode.CURRENCY_SUBUNIT = 181;
lime_ui_ScanCode.NUMPAD_LEFT_PARENTHESIS = 182;
lime_ui_ScanCode.NUMPAD_RIGHT_PARENTHESIS = 183;
lime_ui_ScanCode.NUMPAD_LEFT_BRACE = 184;
lime_ui_ScanCode.NUMPAD_RIGHT_BRACE = 185;
lime_ui_ScanCode.NUMPAD_TAB = 186;
lime_ui_ScanCode.NUMPAD_BACKSPACE = 187;
lime_ui_ScanCode.NUMPAD_A = 188;
lime_ui_ScanCode.NUMPAD_B = 189;
lime_ui_ScanCode.NUMPAD_C = 190;
lime_ui_ScanCode.NUMPAD_D = 191;
lime_ui_ScanCode.NUMPAD_E = 192;
lime_ui_ScanCode.NUMPAD_F = 193;
lime_ui_ScanCode.NUMPAD_XOR = 194;
lime_ui_ScanCode.NUMPAD_POWER = 195;
lime_ui_ScanCode.NUMPAD_PERCENT = 196;
lime_ui_ScanCode.NUMPAD_LESS_THAN = 197;
lime_ui_ScanCode.NUMPAD_GREATER_THAN = 198;
lime_ui_ScanCode.NUMPAD_AMPERSAND = 199;
lime_ui_ScanCode.NUMPAD_DOUBLE_AMPERSAND = 200;
lime_ui_ScanCode.NUMPAD_VERTICAL_BAR = 201;
lime_ui_ScanCode.NUMPAD_DOUBLE_VERTICAL_BAR = 202;
lime_ui_ScanCode.NUMPAD_COLON = 203;
lime_ui_ScanCode.NUMPAD_HASH = 204;
lime_ui_ScanCode.NUMPAD_SPACE = 205;
lime_ui_ScanCode.NUMPAD_AT = 206;
lime_ui_ScanCode.NUMPAD_EXCLAMATION = 207;
lime_ui_ScanCode.NUMPAD_MEM_STORE = 208;
lime_ui_ScanCode.NUMPAD_MEM_RECALL = 209;
lime_ui_ScanCode.NUMPAD_MEM_CLEAR = 210;
lime_ui_ScanCode.NUMPAD_MEM_ADD = 211;
lime_ui_ScanCode.NUMPAD_MEM_SUBTRACT = 212;
lime_ui_ScanCode.NUMPAD_MEM_MULTIPLY = 213;
lime_ui_ScanCode.NUMPAD_MEM_DIVIDE = 214;
lime_ui_ScanCode.NUMPAD_PLUS_MINUS = 215;
lime_ui_ScanCode.NUMPAD_CLEAR = 216;
lime_ui_ScanCode.NUMPAD_CLEAR_ENTRY = 217;
lime_ui_ScanCode.NUMPAD_BINARY = 218;
lime_ui_ScanCode.NUMPAD_OCTAL = 219;
lime_ui_ScanCode.NUMPAD_DECIMAL = 220;
lime_ui_ScanCode.NUMPAD_HEXADECIMAL = 221;
lime_ui_ScanCode.LEFT_CTRL = 224;
lime_ui_ScanCode.LEFT_SHIFT = 225;
lime_ui_ScanCode.LEFT_ALT = 226;
lime_ui_ScanCode.LEFT_META = 227;
lime_ui_ScanCode.RIGHT_CTRL = 228;
lime_ui_ScanCode.RIGHT_SHIFT = 229;
lime_ui_ScanCode.RIGHT_ALT = 230;
lime_ui_ScanCode.RIGHT_META = 231;
lime_ui_ScanCode.MODE = 257;
lime_ui_ScanCode.AUDIO_NEXT = 258;
lime_ui_ScanCode.AUDIO_PREVIOUS = 259;
lime_ui_ScanCode.AUDIO_STOP = 260;
lime_ui_ScanCode.AUDIO_PLAY = 261;
lime_ui_ScanCode.AUDIO_MUTE = 262;
lime_ui_ScanCode.MEDIA_SELECT = 263;
lime_ui_ScanCode.WWW = 264;
lime_ui_ScanCode.MAIL = 265;
lime_ui_ScanCode.CALCULATOR = 266;
lime_ui_ScanCode.COMPUTER = 267;
lime_ui_ScanCode.APP_CONTROL_SEARCH = 268;
lime_ui_ScanCode.APP_CONTROL_HOME = 269;
lime_ui_ScanCode.APP_CONTROL_BACK = 270;
lime_ui_ScanCode.APP_CONTROL_FORWARD = 271;
lime_ui_ScanCode.APP_CONTROL_STOP = 272;
lime_ui_ScanCode.APP_CONTROL_REFRESH = 273;
lime_ui_ScanCode.APP_CONTROL_BOOKMARKS = 274;
lime_ui_ScanCode.BRIGHTNESS_DOWN = 275;
lime_ui_ScanCode.BRIGHTNESS_UP = 276;
lime_ui_ScanCode.DISPLAY_SWITCH = 277;
lime_ui_ScanCode.BACKLIGHT_TOGGLE = 278;
lime_ui_ScanCode.BACKLIGHT_DOWN = 279;
lime_ui_ScanCode.BACKLIGHT_UP = 280;
lime_ui_ScanCode.EJECT = 281;
lime_ui_ScanCode.SLEEP = 282;
lime_ui_Touch.onCancel = new lime_app__$Event_$lime_$ui_$Touch_$Void();
lime_ui_Touch.onEnd = new lime_app__$Event_$lime_$ui_$Touch_$Void();
lime_ui_Touch.onMove = new lime_app__$Event_$lime_$ui_$Touch_$Void();
lime_ui_Touch.onStart = new lime_app__$Event_$lime_$ui_$Touch_$Void();
lime_utils_Assets.cache = new lime_utils_AssetCache();
lime_utils_Assets.onChange = new lime_app__$Event_$Void_$Void();
lime_utils_Assets.bundlePaths = new haxe_ds_StringMap();
lime_utils_Assets.libraries = new haxe_ds_StringMap();
lime_utils_Assets.libraryPaths = new haxe_ds_StringMap();
lime_utils_Float32Array.BYTES_PER_ELEMENT = 4;
lime_utils_Float64Array.BYTES_PER_ELEMENT = 8;
lime_utils_Int16Array.BYTES_PER_ELEMENT = 2;
lime_utils_Int32Array.BYTES_PER_ELEMENT = 4;
lime_utils_Int8Array.BYTES_PER_ELEMENT = 1;
lime_utils_Log.throwErrors = true;
lime_utils_LogLevel.NONE = 0;
lime_utils_LogLevel.ERROR = 1;
lime_utils_LogLevel.WARN = 2;
lime_utils_LogLevel.INFO = 3;
lime_utils_LogLevel.DEBUG = 4;
lime_utils_LogLevel.VERBOSE = 5;
lime_utils_UInt16Array.BYTES_PER_ELEMENT = 2;
lime_utils_UInt32Array.BYTES_PER_ELEMENT = 4;
lime_utils_UInt8Array.BYTES_PER_ELEMENT = 1;
lime_utils_UInt8ClampedArray.BYTES_PER_ELEMENT = 1;
openfl_Lib.__lastTimerID = 0;
openfl_Lib.__sentWarnings = new haxe_ds_StringMap();
openfl_Lib.__timers = new haxe_ds_IntMap();
openfl__$Vector_IVector.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl__$Vector_BoolVector.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}, fields : { toJSON : { SuppressWarnings : ["checkstyle:Dynamic"]}}};
openfl__$Vector_FloatVector.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}, fields : { toJSON : { SuppressWarnings : ["checkstyle:Dynamic"]}, _ : { SuppressWarnings : ["checkstyle:Dynamic"]}}};
openfl__$Vector_FunctionVector.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}, fields : { toJSON : { SuppressWarnings : ["checkstyle:Dynamic"]}}};
openfl__$Vector_IntVector.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}, fields : { toJSON : { SuppressWarnings : ["checkstyle:Dynamic"]}}};
openfl__$Vector_ObjectVector.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}, fields : { concat : { SuppressWarnings : ["checkstyle:Dynamic"]}, toJSON : { SuppressWarnings : ["checkstyle:Dynamic"]}, _ : { SuppressWarnings : ["checkstyle:Dynamic"]}}};
openfl__$internal_Lib.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}, statics : { notImplemented : { SuppressWarnings : ["checkstyle:NullableParameter"]}}};
openfl__$internal_Lib.__sentWarnings = new haxe_ds_StringMap();
openfl__$internal_formats_agal_AGALConverter.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl__$internal_formats_agal_AGALConverter.limitedProfile = true;
openfl__$internal_formats_agal__$AGALConverter_DestRegister.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl__$internal_formats_agal_RegisterMap.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl__$internal_formats_agal__$AGALConverter_SamplerRegister.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl__$internal_formats_agal__$AGALConverter_SourceRegister.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl__$internal_formats_atf_ATFReader.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl__$internal_formats_html_HTMLParser.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl__$internal_formats_html_HTMLParser.__regexAlign = new EReg("align\\s?=\\s?(\"([^\"]+)\"|'([^']+)')","i");
openfl__$internal_formats_html_HTMLParser.__regexBreakTag = new EReg("<br\\s*/?>","gi");
openfl__$internal_formats_html_HTMLParser.__regexBlockIndent = new EReg("blockindent\\s?=\\s?(\"([^\"]+)\"|'([^']+)')","i");
openfl__$internal_formats_html_HTMLParser.__regexColor = new EReg("color\\s?=\\s?(\"#([^\"]+)\"|'#([^']+)')","i");
openfl__$internal_formats_html_HTMLParser.__regexEntities = [new EReg("&quot;","g"),new EReg("&apos;","g"),new EReg("&amp;","g"),new EReg("&lt;","g"),new EReg("&gt;","g"),new EReg("&nbsp;","g")];
openfl__$internal_formats_html_HTMLParser.__regexFace = new EReg("face\\s?=\\s?(\"([^\"]+)\"|'([^']+)')","i");
openfl__$internal_formats_html_HTMLParser.__regexHTMLTag = new EReg("<.*?>","g");
openfl__$internal_formats_html_HTMLParser.__regexHref = new EReg("href\\s?=\\s?(\"([^\"]+)\"|'([^']+)')","i");
openfl__$internal_formats_html_HTMLParser.__regexIndent = new EReg(" indent\\s?=\\s?(\"([^\"]+)\"|'([^']+)')","i");
openfl__$internal_formats_html_HTMLParser.__regexLeading = new EReg("leading\\s?=\\s?(\"([^\"]+)\"|'([^']+)')","i");
openfl__$internal_formats_html_HTMLParser.__regexLeftMargin = new EReg("leftmargin\\s?=\\s?(\"([^\"]+)\"|'([^']+)')","i");
openfl__$internal_formats_html_HTMLParser.__regexRightMargin = new EReg("rightmargin\\s?=\\s?(\"([^\"]+)\"|'([^']+)')","i");
openfl__$internal_formats_html_HTMLParser.__regexSize = new EReg("size\\s?=\\s?(\"([^\"]+)\"|'([^']+)')","i");
openfl__$internal_formats_html_HTMLParser.__regexTabStops = new EReg("tabstops\\s?=\\s?(\"([^\"]+)\"|'([^']+)')","i");
openfl__$internal_formats_swf_SWFLite.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}, statics : { resolveClass : { SuppressWarnings : ["checkstyle:Dynamic"]}, resolveEnum : { SuppressWarnings : ["checkstyle:Dynamic"]}}};
openfl__$internal_formats_swf_SWFLite.instances = new haxe_ds_StringMap();
openfl__$internal_formats_swf_SWFLiteLibrary.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl__$internal_renderer_DrawCommandBuffer.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}, fields : { o : { SuppressWarnings : ["checkstyle:Dynamic"]}}};
openfl__$internal_renderer_DrawCommandBuffer.empty = new openfl__$internal_renderer_DrawCommandBuffer();
openfl__$internal_renderer_DrawCommandReader.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}, fields : { obj : { SuppressWarnings : ["checkstyle:Dynamic"]}}};
openfl__$internal_renderer_SamplerState.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl__$internal_renderer_ShaderBuffer.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}, fields : { overrideIntValues : { SuppressWarnings : ["checkstyle:Dynamic"]}}};
openfl__$internal_renderer_cairo_CairoBitmap.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl__$internal_renderer_cairo_CairoDisplayObject.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl__$internal_renderer_cairo_CairoGraphics.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl__$internal_renderer_cairo_CairoTextField.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl__$internal_renderer_cairo_CairoTilemap.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}, statics : { renderTileContainer : { SuppressWarnings : ["checkstyle:Dynamic"]}}};
openfl__$internal_renderer_canvas_CanvasBitmap.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl__$internal_renderer_canvas_CanvasDisplayObject.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl__$internal_renderer_canvas_CanvasGraphics.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}, statics : { windingRule : { SuppressWarnings : ["checkstyle:Dynamic"]}, createBitmapFill : { SuppressWarnings : ["checkstyle:Dynamic"]}, createGradientPattern : { SuppressWarnings : ["checkstyle:Dynamic"]}}};
openfl__$internal_renderer_canvas_CanvasGraphics.SIN45 = 0.70710678118654752440084436210485;
openfl__$internal_renderer_canvas_CanvasGraphics.TAN22 = 0.4142135623730950488016887242097;
openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands = new openfl__$internal_renderer_DrawCommandBuffer();
openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands = new openfl__$internal_renderer_DrawCommandBuffer();
openfl__$internal_renderer_canvas_CanvasShape.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl__$internal_renderer_canvas_CanvasTextField.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl__$internal_renderer_canvas_CanvasTilemap.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}, statics : { renderTileContainer : { SuppressWarnings : ["checkstyle:Dynamic"]}}};
openfl__$internal_renderer_context3D_Context3DBitmap.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl__$internal_renderer_context3D_Context3DBuffer.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl__$internal_renderer_context3D_Context3DBuffer.MAX_INDEX_BUFFER_LENGTH = 65535;
openfl__$internal_renderer_context3D_Context3DBuffer.MAX_QUADS_PER_INDEX_BUFFER = 10922;
openfl__$internal_renderer_context3D_Context3DBuffer.MAX_QUAD_INDEX_BUFFER_LENGTH = 65532;
openfl__$internal_renderer_context3D_Context3DDisplayObject.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl_display_BitmapData.__meta__ = { fields : { image : { SuppressWarnings : ["checkstyle:Dynamic"]}, __framebufferContext : { SuppressWarnings : ["checkstyle:Dynamic"]}, __indexBufferContext : { SuppressWarnings : ["checkstyle:Dynamic"]}, __surface : { SuppressWarnings : ["checkstyle:Dynamic"]}, __textureContext : { SuppressWarnings : ["checkstyle:Dynamic"]}, __vertexBufferContext : { SuppressWarnings : ["checkstyle:Dynamic"]}, compare : { SuppressWarnings : ["checkstyle:Dynamic"]}, getSurface : { SuppressWarnings : ["checkstyle:Dynamic"]}, __fromImage : { SuppressWarnings : ["checkstyle:Dynamic"]}}};
openfl_display_BitmapData.VERTEX_BUFFER_STRIDE = 14;
openfl_display_BitmapData.__tempVector = new lime_math_Vector2();
openfl_geom_Rectangle.__pool = new lime_utils_ObjectPool(function() {
	return new openfl_geom_Rectangle();
},function(r) {
	r.setTo(0,0,0,0);
});
openfl_geom_Matrix.__meta__ = { fields : { equals : { SuppressWarnings : ["checkstyle:FieldDocComment"]}, to3DString : { SuppressWarnings : ["checkstyle:FieldDocComment"]}, toMozString : { SuppressWarnings : ["checkstyle:FieldDocComment"]}}};
openfl_geom_Matrix.__identity = new openfl_geom_Matrix();
openfl_geom_Matrix.__pool = new lime_utils_ObjectPool(function() {
	return new openfl_geom_Matrix();
},function(m) {
	m.identity();
});
openfl_geom_Matrix.__matrix3 = new lime_math_Matrix3();
openfl_geom_ColorTransform.__pool = new lime_utils_ObjectPool(function() {
	return new openfl_geom_ColorTransform();
},function(ct) {
	ct.__identity();
});
openfl__$internal_renderer_context3D_Context3DGraphics.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl__$internal_renderer_context3D_Context3DGraphics.blankBitmapData = new openfl_display_BitmapData(1,1,false,0);
openfl__$internal_renderer_context3D_Context3DGraphics.tempColorTransform = new openfl_geom_ColorTransform(1,1,1,1,0,0,0,0);
openfl_display_Shader.__meta__ = { fields : { glProgram : { SuppressWarnings : ["checkstyle:Dynamic"]}}};
openfl__$internal_renderer_context3D_Context3DMaskShader.opaqueBitmapData = new openfl_display_BitmapData(1,1,false,0);
openfl__$internal_renderer_context3D_Context3DShape.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl__$internal_renderer_context3D_Context3DState.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl__$internal_renderer_context3D_Context3DTextField.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl__$internal_renderer_context3D_Context3DTilemap.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl__$internal_renderer_context3D_stats_DrawCallCounter.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl__$internal_renderer_context3D_stats_Context3DStats.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl__$internal_renderer_context3D_stats_Context3DStats.drawCallsCounters = (function($this) {
	var $r;
	var _g = new haxe_ds_IntMap();
	{
		var value = new openfl__$internal_renderer_context3D_stats_DrawCallCounter();
		_g.h[0] = value;
	}
	{
		var value = new openfl__$internal_renderer_context3D_stats_DrawCallCounter();
		_g.h[1] = value;
	}
	$r = _g;
	return $r;
}(this));
openfl__$internal_renderer_dom_DOMBitmap.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl__$internal_renderer_dom_DOMDisplayObject.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl__$internal_renderer_dom_DOMShape.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl__$internal_renderer_dom_DOMTextField.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl__$internal_renderer_dom_DOMTextField.__regexColor = new EReg("color=(\"#([^\"]+)\"|'#([^']+)')","i");
openfl__$internal_renderer_dom_DOMTextField.__regexFace = new EReg("face=(\"([^\"]+)\"|'([^']+)')","i");
openfl__$internal_renderer_dom_DOMTextField.__regexFont = new EReg("<font ([^>]+)>","gi");
openfl__$internal_renderer_dom_DOMTextField.__regexCloseFont = new EReg("</font>","gi");
openfl__$internal_renderer_dom_DOMTextField.__regexSize = new EReg("size=(\"([^\"]+)\"|'([^']+)')","i");
openfl__$internal_renderer_dom_DOMTilemap.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl__$internal_renderer_flash_FlashRenderer.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl_geom_Point.__pool = new lime_utils_ObjectPool(function() {
	return new openfl_geom_Point();
},function(p) {
	p.setTo(0,0);
});
openfl__$internal_renderer_flash_FlashTilemap.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl__$internal_renderer_flash_FlashTilemap.alphaColorTransform = new openfl_geom_ColorTransform();
openfl__$internal_renderer_flash_FlashTilemap.bitmap = new openfl_display_Bitmap();
openfl__$internal_renderer_flash_FlashTilemap.destPoint = new openfl_geom_Point();
openfl__$internal_renderer_flash_FlashTilemap.sourceRect = new openfl_geom_Rectangle();
openfl__$internal_text_GlyphPosition.__meta__ = { obj : { SuppressWarnings : [["checkstyle:FieldDocComment","checkstyle:Dynamic"]]}};
openfl__$internal_text_TextEngine.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}, fields : { __cairoFont : { SuppressWarnings : ["checkstyle:Dynamic"]}}};
openfl__$internal_text_TextEngine.GUTTER = 2;
openfl__$internal_text_TextEngine.UTF8_TAB = 9;
openfl__$internal_text_TextEngine.UTF8_ENDLINE = 10;
openfl__$internal_text_TextEngine.UTF8_SPACE = 32;
openfl__$internal_text_TextEngine.UTF8_HYPHEN = 45;
openfl__$internal_text_TextEngine.__defaultFonts = new haxe_ds_StringMap();
openfl__$internal_text_TextLayout.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}, fields : { glyphs : { SuppressWarnings : ["checkstyle:Dynamic"]}, __handle : { SuppressWarnings : ["checkstyle:Dynamic"]}, __hbBuffer : { SuppressWarnings : ["checkstyle:Dynamic"]}, __hbFont : { SuppressWarnings : ["checkstyle:Dynamic"]}, get_glyphs : { SuppressWarnings : ["checkstyle:Dynamic"]}}};
openfl__$internal_text_TextLayout.FT_LOAD_DEFAULT = 0;
openfl__$internal_text_TextLayout.FT_LOAD_NO_SCALE = 1;
openfl__$internal_text_TextLayout.FT_LOAD_NO_HINTING = 2;
openfl__$internal_text_TextLayout.FT_LOAD_RENDER = 4;
openfl__$internal_text_TextLayout.FT_LOAD_NO_BITMAP = 8;
openfl__$internal_text_TextLayout.FT_LOAD_VERTICAL_LAYOUT = 16;
openfl__$internal_text_TextLayout.FT_LOAD_FORCE_AUTOHINT = 32;
openfl__$internal_text_TextLayout.FT_LOAD_CROP_BITMAP = 64;
openfl__$internal_text_TextLayout.FT_LOAD_PEDANTIC = 128;
openfl__$internal_text_TextLayout.FT_LOAD_IGNORE_GLOBAL_ADVANCE_WIDTH = 256;
openfl__$internal_text_TextLayout.FT_LOAD_NO_RECURSE = 512;
openfl__$internal_text_TextLayout.FT_LOAD_IGNORE_TRANSFORM = 1024;
openfl__$internal_text_TextLayout.FT_LOAD_MONOCHROME = 2048;
openfl__$internal_text_TextLayout.FT_LOAD_LINEAR_DESIGN = 4096;
openfl__$internal_text_TextLayout.FT_LOAD_NO_AUTOHINT = 8192;
openfl__$internal_text_TextLayout.FT_LOAD_COLOR = 16384;
openfl__$internal_text_TextLayout.FT_LOAD_COMPUTE_METRICS = 32768;
openfl__$internal_text_TextLayout.FT_LOAD_BITMAP_METRICS_ONLY = 65536;
openfl__$internal_text_TextLayout.FT_LOAD_TARGET_NORMAL = 0;
openfl__$internal_text_TextLayout.FT_LOAD_TARGET_LIGHT = 0;
openfl__$internal_text_TextDirection.INVALID = 0;
openfl__$internal_text_TextDirection.LEFT_TO_RIGHT = 4;
openfl__$internal_text_TextDirection.RIGHT_TO_LEFT = 5;
openfl__$internal_text_TextDirection.TOP_TO_BOTTOM = 6;
openfl__$internal_text_TextDirection.BOTTOM_TO_TOP = 7;
openfl__$internal_text_TextScript.COMMON = "Zyyy";
openfl__$internal_text_TextScript.INHERITED = "Zinh";
openfl__$internal_text_TextScript.UNKNOWN = "Zzzz";
openfl__$internal_text_TextScript.ARABIC = "Arab";
openfl__$internal_text_TextScript.ARMENIAN = "Armn";
openfl__$internal_text_TextScript.BENGALI = "Beng";
openfl__$internal_text_TextScript.CYRILLIC = "Cyrl";
openfl__$internal_text_TextScript.DEVANAGARI = "Deva";
openfl__$internal_text_TextScript.GEORGIAN = "Geor";
openfl__$internal_text_TextScript.GREEK = "Grek";
openfl__$internal_text_TextScript.GUJARATI = "Gujr";
openfl__$internal_text_TextScript.GURMUKHI = "Guru";
openfl__$internal_text_TextScript.HANGUL = "Hang";
openfl__$internal_text_TextScript.HAN = "Hani";
openfl__$internal_text_TextScript.HEBREW = "Hebr";
openfl__$internal_text_TextScript.HIRAGANA = "Hira";
openfl__$internal_text_TextScript.KANNADA = "Knda";
openfl__$internal_text_TextScript.KATAKANA = "Kana";
openfl__$internal_text_TextScript.LAO = "Laoo";
openfl__$internal_text_TextScript.LATIN = "Latn";
openfl__$internal_text_TextScript.MALAYALAM = "Mlym";
openfl__$internal_text_TextScript.ORIYA = "Orya";
openfl__$internal_text_TextScript.TAMIL = "Taml";
openfl__$internal_text_TextScript.TELUGA = "Telu";
openfl__$internal_text_TextScript.THAI = "Thai";
openfl__$internal_text_TextScript.TIBETAN = "Tibt";
openfl__$internal_text_TextScript.BOPOMOFO = "Bopo";
openfl__$internal_text_TextScript.BRAILLE = "Brai";
openfl__$internal_text_TextScript.CANADIAN_SYLLABICS = "Cans";
openfl__$internal_text_TextScript.CHEROKEE = "Cher";
openfl__$internal_text_TextScript.ETHIOPIC = "Ethi";
openfl__$internal_text_TextScript.KHMER = "Khmr";
openfl__$internal_text_TextScript.MONGOLIAN = "Mong";
openfl__$internal_text_TextScript.MYANMAR = "Mymr";
openfl__$internal_text_TextScript.OGHAM = "Ogam";
openfl__$internal_text_TextScript.RUNIC = "Runr";
openfl__$internal_text_TextScript.SINHALA = "Sinh";
openfl__$internal_text_TextScript.SYRIAC = "Syrc";
openfl__$internal_text_TextScript.THAANA = "Thaa";
openfl__$internal_text_TextScript.YI = "Yiii";
openfl__$internal_text_TextScript.DESERET = "Dsrt";
openfl__$internal_text_TextScript.GOTHIC = "Goth";
openfl__$internal_text_TextScript.OLD_ITALIC = "Ital";
openfl__$internal_text_TextScript.BUHID = "Buhd";
openfl__$internal_text_TextScript.HANUNOO = "Hano";
openfl__$internal_text_TextScript.TAGALOG = "Tglg";
openfl__$internal_text_TextScript.TAGBANWA = "Tagb";
openfl__$internal_text_TextScript.CYPRIOT = "Cprt";
openfl__$internal_text_TextScript.LIMBU = "Limb";
openfl__$internal_text_TextScript.LINEAR_B = "Linb";
openfl__$internal_text_TextScript.OSMANYA = "Osma";
openfl__$internal_text_TextScript.SHAVIAN = "Shaw";
openfl__$internal_text_TextScript.TAI_LE = "Tale";
openfl__$internal_text_TextScript.UGARITIC = "Ugar";
openfl__$internal_text_TextScript.BUGINESE = "Bugi";
openfl__$internal_text_TextScript.COPTIC = "Copt";
openfl__$internal_text_TextScript.GLAGOLITIC = "Glag";
openfl__$internal_text_TextScript.KHAROSHTHI = "Khar";
openfl__$internal_text_TextScript.NEW_TAI_LUE = "Talu";
openfl__$internal_text_TextScript.OLD_PERSIAN = "Xpeo";
openfl__$internal_text_TextScript.SYLOTI_NAGRI = "Sylo";
openfl__$internal_text_TextScript.TIFINAGH = "Tfng";
openfl__$internal_text_TextScript.BALINESE = "Bali";
openfl__$internal_text_TextScript.CUNEIFORM = "Xsux";
openfl__$internal_text_TextScript.NKO = "Nkoo";
openfl__$internal_text_TextScript.PHAGS_PA = "Phag";
openfl__$internal_text_TextScript.PHOENICIAN = "Phnx";
openfl__$internal_text_TextScript.CARIAN = "Cari";
openfl__$internal_text_TextScript.CHAM = "Cham";
openfl__$internal_text_TextScript.KAYAH_LI = "Kali";
openfl__$internal_text_TextScript.LEPCHA = "Lepc";
openfl__$internal_text_TextScript.LYCIAN = "Lyci";
openfl__$internal_text_TextScript.LYDIAN = "Lydi";
openfl__$internal_text_TextScript.OL_CHIKI = "Olck";
openfl__$internal_text_TextScript.REJANG = "Rjng";
openfl__$internal_text_TextScript.SAURASHTRA = "Saur";
openfl__$internal_text_TextScript.SUNDANESE = "Sund";
openfl__$internal_text_TextScript.VAI = "Vaii";
openfl__$internal_text_TextScript.AVESTAN = "Avst";
openfl__$internal_text_TextScript.BAMUM = "Bamu";
openfl__$internal_text_TextScript.EGYPTIAN_HIEROGLYPHS = "Egyp";
openfl__$internal_text_TextScript.IMPERIAL_ARAMAIC = "Armi";
openfl__$internal_text_TextScript.INSCRIPTIONAL_PAHLAVI = "Phli";
openfl__$internal_text_TextScript.INSCRIPTIONAL_PARTHIAN = "Prti";
openfl__$internal_text_TextScript.JAVANESE = "Java";
openfl__$internal_text_TextScript.KAITHI = "Kthi";
openfl__$internal_text_TextScript.LISU = "Lisu";
openfl__$internal_text_TextScript.MEETEI_MAYEK = "Mtei";
openfl__$internal_text_TextScript.OLD_SOUTH_ARABIAN = "Sarb";
openfl__$internal_text_TextScript.OLD_TURKIC = "Orkh";
openfl__$internal_text_TextScript.SAMARITAN = "Samr";
openfl__$internal_text_TextScript.TAI_THAM = "Lana";
openfl__$internal_text_TextScript.TAI_VIET = "Tavt";
openfl__$internal_text_TextScript.BATAK = "Batk";
openfl__$internal_text_TextScript.BRAHMI = "Brah";
openfl__$internal_text_TextScript.MANDAIC = "Mand";
openfl__$internal_text_TextScript.CHAKMA = "Cakm";
openfl__$internal_text_TextScript.MEROITIC_CURSIVE = "Merc";
openfl__$internal_text_TextScript.MEROITIC_HIEROGLYPHS = "Mero";
openfl__$internal_text_TextScript.MIAO = "Plrd";
openfl__$internal_text_TextScript.SHARADA = "Shrd";
openfl__$internal_text_TextScript.SORA_SOMPENG = "Sora";
openfl__$internal_text_TextScript.TAKRI = "Takr";
openfl__$internal_text_TextScript.BASSA_VAH = "Bass";
openfl__$internal_text_TextScript.CAUCASIAN_ALBANIAN = "Aghb";
openfl__$internal_text_TextScript.DUPLOYAN = "Dupl";
openfl__$internal_text_TextScript.ELBASAN = "Elba";
openfl__$internal_text_TextScript.GRANTHA = "Gran";
openfl__$internal_text_TextScript.KHOJKI = "Khoj";
openfl__$internal_text_TextScript.KHUDAWADI = "Sind";
openfl__$internal_text_TextScript.LINEAR_A = "Lina";
openfl__$internal_text_TextScript.MAHAJANI = "Mahj";
openfl__$internal_text_TextScript.MANICHAEAN = "Mani";
openfl__$internal_text_TextScript.MENDE_KIKAKUI = "Mend";
openfl__$internal_text_TextScript.MODI = "Modi";
openfl__$internal_text_TextScript.MRO = "Mroo";
openfl__$internal_text_TextScript.NABATAEAN = "Nbat";
openfl__$internal_text_TextScript.OLD_NORTH_ARABIAN = "Narb";
openfl__$internal_text_TextScript.OLD_PERMIC = "Perm";
openfl__$internal_text_TextScript.PAHAWH_HMONG = "Hmng";
openfl__$internal_text_TextScript.PALMYRENE = "Palm";
openfl__$internal_text_TextScript.PAU_CIN_HAU = "Pauc";
openfl__$internal_text_TextScript.PSALTER_PAHLAVI = "Phlp";
openfl__$internal_text_TextScript.SIDDHAM = "Sidd";
openfl__$internal_text_TextScript.TIRHUTA = "Tirh";
openfl__$internal_text_TextScript.WARANG_CITI = "Wara";
openfl__$internal_text_TextLayoutGroup.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl__$internal_utils_AbstractNoise.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl__$internal_utils_PerlinNoise.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}, statics : { P : { SuppressWarnings : ["checkstyle:ConstantName"]}}};
openfl__$internal_utils_PerlinNoise.P = [151,160,137,91,90,15,131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,8,99,37,240,21,10,23,190,6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,35,11,32,57,177,33,88,237,149,56,87,174,20,125,136,171,168,68,175,74,165,71,134,139,48,27,166,77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,55,46,245,40,244,102,143,54,65,25,63,161,1,216,80,73,209,76,132,187,208,89,18,169,200,196,135,130,116,188,159,86,164,100,109,198,173,186,3,64,52,217,226,250,124,123,5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,189,28,42,223,183,170,213,119,248,152,2,44,154,163,70,221,153,101,155,167,43,172,9,129,22,39,253,19,98,108,110,79,113,224,232,178,185,112,104,218,246,97,228,251,34,242,193,238,210,144,12,191,179,162,241,81,51,145,235,249,14,239,107,49,192,214,31,181,199,106,157,184,84,204,176,115,121,50,45,127,4,150,254,138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180,151,160,137,91,90,15,131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,8,99,37,240,21,10,23,190,6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,35,11,32,57,177,33,88,237,149,56,87,174,20,125,136,171,168,68,175,74,165,71,134,139,48,27,166,77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,55,46,245,40,244,102,143,54,65,25,63,161,1,216,80,73,209,76,132,187,208,89,18,169,200,196,135,130,116,188,159,86,164,100,109,198,173,186,3,64,52,217,226,250,124,123,5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,189,28,42,223,183,170,213,119,248,152,2,44,154,163,70,221,153,101,155,167,43,172,9,129,22,39,253,19,98,108,110,79,113,224,232,178,185,112,104,218,246,97,228,251,34,242,193,238,210,144,12,191,179,162,241,81,51,145,235,249,14,239,107,49,192,214,31,181,199,106,157,184,84,204,176,115,121,50,45,127,4,150,254,138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180];
openfl__$internal_utils_TouchData.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}, fields : { touch : { SuppressWarnings : ["checkstyle:Dynamic"]}}};
openfl__$internal_utils_TouchData.__pool = new lime_utils_ObjectPool(function() {
	return new openfl__$internal_utils_TouchData();
},function(data) {
	data.reset();
});
openfl_desktop_Clipboard.__meta__ = { fields : { setDataHandler : { SuppressWarnings : ["checkstyle:Dynamic"]}}};
openfl_desktop_ClipboardFormats.HTML_FORMAT = 0;
openfl_desktop_ClipboardFormats.RICH_TEXT_FORMAT = 1;
openfl_desktop_ClipboardFormats.TEXT_FORMAT = 2;
openfl_desktop_ClipboardTransferMode.CLONE_ONLY = 0;
openfl_desktop_ClipboardTransferMode.CLONE_PREFERRED = 1;
openfl_desktop_ClipboardTransferMode.ORIGINAL_ONLY = 2;
openfl_desktop_ClipboardTransferMode.ORIGINAL_PREFERRED = 3;
openfl_display_Application.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl_display_BlendMode.ADD = 0;
openfl_display_BlendMode.ALPHA = 1;
openfl_display_BlendMode.DARKEN = 2;
openfl_display_BlendMode.DIFFERENCE = 3;
openfl_display_BlendMode.ERASE = 4;
openfl_display_BlendMode.HARDLIGHT = 5;
openfl_display_BlendMode.INVERT = 6;
openfl_display_BlendMode.LAYER = 7;
openfl_display_BlendMode.LIGHTEN = 8;
openfl_display_BlendMode.MULTIPLY = 9;
openfl_display_BlendMode.NORMAL = 10;
openfl_display_BlendMode.OVERLAY = 11;
openfl_display_BlendMode.SCREEN = 12;
openfl_display_BlendMode.SHADER = 13;
openfl_display_BlendMode.SUBTRACT = 14;
openfl_display_DisplayObjectRenderer.__meta__ = { fields : { __context : { SuppressWarnings : ["checkstyle:Dynamic"]}, __type : { SuppressWarnings : ["checkstyle:Dynamic"]}}};
openfl_display_CairoRenderer.__meta__ = { fields : { cairo : { SuppressWarnings : ["checkstyle:Dynamic"]}, __matrix3 : { SuppressWarnings : ["checkstyle:Dynamic"]}, applyMatrix : { SuppressWarnings : ["checkstyle:Dynamic"]}, __setBlendModeCairo : { SuppressWarnings : ["checkstyle:Dynamic"]}, _ : { SuppressWarnings : ["checkstyle:Dynamic"]}}};
openfl_display_CanvasRenderer.__meta__ = { fields : { context : { SuppressWarnings : ["checkstyle:Dynamic"]}, applySmoothing : { SuppressWarnings : ["checkstyle:Dynamic"]}, setTransform : { SuppressWarnings : ["checkstyle:Dynamic"]}, __setBlendModeContext : { SuppressWarnings : ["checkstyle:Dynamic"]}, _ : { SuppressWarnings : ["checkstyle:Dynamic"]}}};
openfl_display_CapsStyle.NONE = 0;
openfl_display_CapsStyle.ROUND = 1;
openfl_display_CapsStyle.SQUARE = 2;
openfl_display_DOMRenderer.__meta__ = { fields : { element : { SuppressWarnings : ["checkstyle:Dynamic"]}, applyStyle : { SuppressWarnings : ["checkstyle:Dynamic"]}, clearStyle : { SuppressWarnings : ["checkstyle:Dynamic"]}, _ : { SuppressWarnings : ["checkstyle:Dynamic"]}}};
openfl_display_GradientType.LINEAR = 0;
openfl_display_GradientType.RADIAL = 1;
openfl_display_Graphics.__meta__ = { fields : { overrideBlendMode : { SuppressWarnings : ["checkstyle:FieldDocComment"]}}};
openfl_display_GraphicsPath.SIN45 = 0.70710678118654752440084436210485;
openfl_display_GraphicsPath.TAN22 = 0.4142135623730950488016887242097;
openfl_display_GraphicsPathWinding.EVEN_ODD = 0;
openfl_display_GraphicsPathWinding.NON_ZERO = 1;
openfl_display_InterpolationMethod.LINEAR_RGB = 0;
openfl_display_InterpolationMethod.RGB = 1;
openfl_display_JointStyle.BEVEL = 0;
openfl_display_JointStyle.MITER = 1;
openfl_display_JointStyle.ROUND = 2;
openfl_display_LineScaleMode.HORIZONTAL = 0;
openfl_display_LineScaleMode.NONE = 1;
openfl_display_LineScaleMode.NORMAL = 2;
openfl_display_LineScaleMode.VERTICAL = 3;
openfl_display_Loader.__meta__ = { fields : { BitmapData_onError : { SuppressWarnings : ["checkstyle:Dynamic"]}}};
openfl_display_LoaderInfo.__meta__ = { statics : { create : { SuppressWarnings : ["checkstyle:FieldDocComment"]}}, fields : { parameters : { SuppressWarnings : ["checkstyle:Dynamic"]}}};
openfl_display_LoaderInfo.__rootURL = typeof(window) != "undefined" ? window.document.URL : "";
openfl_display_MovieClip.__useParentFPS = false;
openfl_display_OpenGLRenderer.__meta__ = { fields : { gl : { SuppressWarnings : ["checkstyle:Dynamic"]}, __gl : { SuppressWarnings : ["checkstyle:Dynamic"]}, __matrix : { SuppressWarnings : ["checkstyle:Dynamic"]}, __projection : { SuppressWarnings : ["checkstyle:Dynamic"]}, __projectionFlipped : { SuppressWarnings : ["checkstyle:Dynamic"]}, getMatrix : { SuppressWarnings : ["checkstyle:Dynamic"]}}};
openfl_display_OpenGLRenderer.__alphaValue = [1];
openfl_display_OpenGLRenderer.__colorMultipliersValue = [0,0,0,0];
openfl_display_OpenGLRenderer.__colorOffsetsValue = [0,0,0,0];
openfl_display_OpenGLRenderer.__defaultColorMultipliersValue = [1,1,1,1];
openfl_display_OpenGLRenderer.__emptyColorValue = [0,0,0,0];
openfl_display_OpenGLRenderer.__emptyAlphaValue = [1];
openfl_display_OpenGLRenderer.__hasColorTransformValue = [false];
openfl_display_OpenGLRenderer.__scissorRectangle = new openfl_geom_Rectangle();
openfl_display_OpenGLRenderer.__textureSizeValue = [0,0];
openfl_display_PixelSnapping.ALWAYS = 0;
openfl_display_PixelSnapping.AUTO = 1;
openfl_display_PixelSnapping.NEVER = 2;
openfl_display_Preloader.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}, fields : { onComplete : { SuppressWarnings : ["checkstyle:Dynamic"]}}};
openfl_display_DefaultPreloader.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl_display_ShaderInput.__meta__ = { fields : { index : { SuppressWarnings : ["checkstyle:Dynamic"]}, name : { SuppressWarnings : ["checkstyle:FieldDocComment"]}}};
openfl_display_ShaderParameter.__meta__ = { fields : { index : { SuppressWarnings : ["checkstyle:Dynamic"]}, name : { SuppressWarnings : ["checkstyle:FieldDocComment"]}}};
openfl_display_ShaderParameterType.BOOL = 0;
openfl_display_ShaderParameterType.BOOL2 = 1;
openfl_display_ShaderParameterType.BOOL3 = 2;
openfl_display_ShaderParameterType.BOOL4 = 3;
openfl_display_ShaderParameterType.FLOAT = 4;
openfl_display_ShaderParameterType.FLOAT2 = 5;
openfl_display_ShaderParameterType.FLOAT3 = 6;
openfl_display_ShaderParameterType.FLOAT4 = 7;
openfl_display_ShaderParameterType.INT = 8;
openfl_display_ShaderParameterType.INT2 = 9;
openfl_display_ShaderParameterType.INT3 = 10;
openfl_display_ShaderParameterType.INT4 = 11;
openfl_display_ShaderParameterType.MATRIX2X2 = 12;
openfl_display_ShaderParameterType.MATRIX2X3 = 13;
openfl_display_ShaderParameterType.MATRIX2X4 = 14;
openfl_display_ShaderParameterType.MATRIX3X2 = 15;
openfl_display_ShaderParameterType.MATRIX3X3 = 16;
openfl_display_ShaderParameterType.MATRIX3X4 = 17;
openfl_display_ShaderParameterType.MATRIX4X2 = 18;
openfl_display_ShaderParameterType.MATRIX4X3 = 19;
openfl_display_ShaderParameterType.MATRIX4X4 = 20;
openfl_display_ShaderPrecision.FAST = 0;
openfl_display_ShaderPrecision.FULL = 1;
openfl_display_SpreadMethod.PAD = 0;
openfl_display_SpreadMethod.REFLECT = 1;
openfl_display_SpreadMethod.REPEAT = 2;
openfl_display_Stage.__meta__ = { fields : { __broadcastEvent : { SuppressWarnings : ["checkstyle:Dynamic"]}, __dispatchEvent : { SuppressWarnings : [["checkstyle:Dynamic","checkstyle:LeftCurly"]]}, __dispatchStack : { SuppressWarnings : [["checkstyle:Dynamic","checkstyle:LeftCurly"]]}, __dispatchTarget : { SuppressWarnings : ["checkstyle:Dynamic"]}, __handleError : { SuppressWarnings : ["checkstyle:Dynamic"]}}};
openfl_display_StageAlign.BOTTOM = 0;
openfl_display_StageAlign.BOTTOM_LEFT = 1;
openfl_display_StageAlign.BOTTOM_RIGHT = 2;
openfl_display_StageAlign.LEFT = 3;
openfl_display_StageAlign.RIGHT = 4;
openfl_display_StageAlign.TOP = 5;
openfl_display_StageAlign.TOP_LEFT = 6;
openfl_display_StageAlign.TOP_RIGHT = 7;
openfl_display_StageDisplayState.FULL_SCREEN = 0;
openfl_display_StageDisplayState.FULL_SCREEN_INTERACTIVE = 1;
openfl_display_StageDisplayState.NORMAL = 2;
openfl_display_StageQuality.BEST = 0;
openfl_display_StageQuality.HIGH = 1;
openfl_display_StageQuality.LOW = 2;
openfl_display_StageQuality.MEDIUM = 3;
openfl_display_StageScaleMode.EXACT_FIT = 0;
openfl_display_StageScaleMode.NO_BORDER = 1;
openfl_display_StageScaleMode.NO_SCALE = 2;
openfl_display_StageScaleMode.SHOW_ALL = 3;
openfl_display_Tile.__meta__ = { fields : { data : { SuppressWarnings : ["checkstyle:Dynamic"]}}};
openfl_display__$Tileset_TileData.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl_display_TriangleCulling.NEGATIVE = 0;
openfl_display_TriangleCulling.NONE = 1;
openfl_display_TriangleCulling.POSITIVE = 2;
openfl_display_Window.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}, fields : { _ : { SuppressWarnings : ["checkstyle:Dynamic"]}}};
openfl_display3D_Context3D.supportsVideoTexture = true;
openfl_display3D_Context3D.__glDepthStencil = -1;
openfl_display3D_Context3D.__glMaxTextureMaxAnisotropy = -1;
openfl_display3D_Context3D.__glMaxViewportDims = -1;
openfl_display3D_Context3D.__glMemoryCurrentAvailable = -1;
openfl_display3D_Context3D.__glMemoryTotalAvailable = -1;
openfl_display3D_Context3D.__glTextureMaxAnisotropy = -1;
openfl_display3D_Context3DBlendFactor.DESTINATION_ALPHA = 0;
openfl_display3D_Context3DBlendFactor.DESTINATION_COLOR = 1;
openfl_display3D_Context3DBlendFactor.ONE = 2;
openfl_display3D_Context3DBlendFactor.ONE_MINUS_DESTINATION_ALPHA = 3;
openfl_display3D_Context3DBlendFactor.ONE_MINUS_DESTINATION_COLOR = 4;
openfl_display3D_Context3DBlendFactor.ONE_MINUS_SOURCE_ALPHA = 5;
openfl_display3D_Context3DBlendFactor.ONE_MINUS_SOURCE_COLOR = 6;
openfl_display3D_Context3DBlendFactor.SOURCE_ALPHA = 7;
openfl_display3D_Context3DBlendFactor.SOURCE_COLOR = 8;
openfl_display3D_Context3DBlendFactor.ZERO = 9;
openfl_display3D_Context3DBufferUsage.DYNAMIC_DRAW = 0;
openfl_display3D_Context3DBufferUsage.STATIC_DRAW = 1;
openfl_display3D_Context3DCompareMode.ALWAYS = 0;
openfl_display3D_Context3DCompareMode.EQUAL = 1;
openfl_display3D_Context3DCompareMode.GREATER = 2;
openfl_display3D_Context3DCompareMode.GREATER_EQUAL = 3;
openfl_display3D_Context3DCompareMode.LESS = 4;
openfl_display3D_Context3DCompareMode.LESS_EQUAL = 5;
openfl_display3D_Context3DCompareMode.NEVER = 6;
openfl_display3D_Context3DCompareMode.NOT_EQUAL = 7;
openfl_display3D_Context3DMipFilter.MIPLINEAR = 0;
openfl_display3D_Context3DMipFilter.MIPNEAREST = 1;
openfl_display3D_Context3DMipFilter.MIPNONE = 2;
openfl_display3D_Context3DProfile.BASELINE = 0;
openfl_display3D_Context3DProfile.BASELINE_CONSTRAINED = 1;
openfl_display3D_Context3DProfile.BASELINE_EXTENDED = 2;
openfl_display3D_Context3DProfile.STANDARD = 3;
openfl_display3D_Context3DProfile.STANDARD_CONSTRAINED = 4;
openfl_display3D_Context3DProfile.STANDARD_EXTENDED = 5;
openfl_display3D_Context3DProgramFormat.AGAL = 0;
openfl_display3D_Context3DProgramFormat.GLSL = 1;
openfl_display3D_Context3DProgramType.FRAGMENT = 0;
openfl_display3D_Context3DProgramType.VERTEX = 1;
openfl_display3D_Context3DRenderMode.AUTO = 0;
openfl_display3D_Context3DRenderMode.SOFTWARE = 1;
openfl_display3D_Context3DStencilAction.DECREMENT_SATURATE = 0;
openfl_display3D_Context3DStencilAction.DECREMENT_WRAP = 1;
openfl_display3D_Context3DStencilAction.INCREMENT_SATURATE = 2;
openfl_display3D_Context3DStencilAction.INCREMENT_WRAP = 3;
openfl_display3D_Context3DStencilAction.INVERT = 4;
openfl_display3D_Context3DStencilAction.KEEP = 5;
openfl_display3D_Context3DStencilAction.SET = 6;
openfl_display3D_Context3DStencilAction.ZERO = 7;
openfl_display3D_Context3DTextureFilter.ANISOTROPIC16X = 0;
openfl_display3D_Context3DTextureFilter.ANISOTROPIC2X = 1;
openfl_display3D_Context3DTextureFilter.ANISOTROPIC4X = 2;
openfl_display3D_Context3DTextureFilter.ANISOTROPIC8X = 3;
openfl_display3D_Context3DTextureFilter.LINEAR = 4;
openfl_display3D_Context3DTextureFilter.NEAREST = 5;
openfl_display3D_Context3DTextureFormat.BGR_PACKED = 0;
openfl_display3D_Context3DTextureFormat.BGRA = 1;
openfl_display3D_Context3DTextureFormat.BGRA_PACKED = 2;
openfl_display3D_Context3DTextureFormat.COMPRESSED = 3;
openfl_display3D_Context3DTextureFormat.COMPRESSED_ALPHA = 4;
openfl_display3D_Context3DTextureFormat.RGBA_HALF_FLOAT = 5;
openfl_display3D_Context3DTriangleFace.BACK = 0;
openfl_display3D_Context3DTriangleFace.FRONT = 1;
openfl_display3D_Context3DTriangleFace.FRONT_AND_BACK = 2;
openfl_display3D_Context3DTriangleFace.NONE = 3;
openfl_display3D_Context3DVertexBufferFormat.BYTES_4 = 0;
openfl_display3D_Context3DVertexBufferFormat.FLOAT_1 = 1;
openfl_display3D_Context3DVertexBufferFormat.FLOAT_2 = 2;
openfl_display3D_Context3DVertexBufferFormat.FLOAT_3 = 3;
openfl_display3D_Context3DVertexBufferFormat.FLOAT_4 = 4;
openfl_display3D_Context3DWrapMode.CLAMP = 0;
openfl_display3D_Context3DWrapMode.CLAMP_U_REPEAT_V = 1;
openfl_display3D_Context3DWrapMode.REPEAT = 2;
openfl_display3D_Context3DWrapMode.REPEAT_U_CLAMP_V = 3;
openfl_display3D_Uniform.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl_display3D_UniformMap.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl_display3D_textures_TextureBase.__meta__ = { fields : { __textureContext : { SuppressWarnings : ["checkstyle:Dynamic"]}, __getGLFramebuffer : { SuppressWarnings : ["checkstyle:Dynamic"]}}};
openfl_display3D_textures_Texture.__lowMemoryMode = false;
openfl_errors_Error.DEFAULT_TO_STRING = "Error";
openfl_events_Event.ACTIVATE = "activate";
openfl_events_Event.ADDED = "added";
openfl_events_Event.ADDED_TO_STAGE = "addedToStage";
openfl_events_Event.CANCEL = "cancel";
openfl_events_Event.CHANGE = "change";
openfl_events_Event.CLEAR = "clear";
openfl_events_Event.CLOSE = "close";
openfl_events_Event.COMPLETE = "complete";
openfl_events_Event.CONNECT = "connect";
openfl_events_Event.CONTEXT3D_CREATE = "context3DCreate";
openfl_events_Event.COPY = "copy";
openfl_events_Event.CUT = "cut";
openfl_events_Event.DEACTIVATE = "deactivate";
openfl_events_Event.ENTER_FRAME = "enterFrame";
openfl_events_Event.EXIT_FRAME = "exitFrame";
openfl_events_Event.FRAME_CONSTRUCTED = "frameConstructed";
openfl_events_Event.FRAME_LABEL = "frameLabel";
openfl_events_Event.FULLSCREEN = "fullScreen";
openfl_events_Event.ID3 = "id3";
openfl_events_Event.INIT = "init";
openfl_events_Event.MOUSE_LEAVE = "mouseLeave";
openfl_events_Event.OPEN = "open";
openfl_events_Event.PASTE = "paste";
openfl_events_Event.REMOVED = "removed";
openfl_events_Event.REMOVED_FROM_STAGE = "removedFromStage";
openfl_events_Event.RENDER = "render";
openfl_events_Event.RESIZE = "resize";
openfl_events_Event.SCROLL = "scroll";
openfl_events_Event.SELECT = "select";
openfl_events_Event.SELECT_ALL = "selectAll";
openfl_events_Event.SOUND_COMPLETE = "soundComplete";
openfl_events_Event.TAB_CHILDREN_CHANGE = "tabChildrenChange";
openfl_events_Event.TAB_ENABLED_CHANGE = "tabEnabledChange";
openfl_events_Event.TAB_INDEX_CHANGE = "tabIndexChange";
openfl_events_Event.TEXTURE_READY = "textureReady";
openfl_events_Event.UNLOAD = "unload";
openfl_events_Event.__pool = new lime_utils_ObjectPool(function() {
	return new openfl_events_Event(null);
},function(event) {
	event.__init();
});
openfl_events_AccelerometerEvent.UPDATE = "update";
openfl_events_AccelerometerEvent.__pool = new lime_utils_ObjectPool(function() {
	return new openfl_events_AccelerometerEvent(null);
},function(event) {
	event.__init();
});
openfl_events_ActivityEvent.ACTIVITY = "activity";
openfl_events_ActivityEvent.__pool = new lime_utils_ObjectPool(function() {
	return new openfl_events_ActivityEvent(null);
},function(event) {
	event.__init();
});
openfl_events_TextEvent.LINK = "link";
openfl_events_TextEvent.TEXT_INPUT = "textInput";
openfl_events_TextEvent.__pool = new lime_utils_ObjectPool(function() {
	return new openfl_events_TextEvent(null);
},function(event) {
	event.__init();
});
openfl_events_ErrorEvent.ERROR = "error";
openfl_events_ErrorEvent.__pool = new lime_utils_ObjectPool(function() {
	return new openfl_events_ErrorEvent(null);
},function(event) {
	event.__init();
});
openfl_events__$EventDispatcher_DispatchIterator.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl_events__$EventDispatcher_Listener.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl_events_FocusEvent.FOCUS_IN = "focusIn";
openfl_events_FocusEvent.FOCUS_OUT = "focusOut";
openfl_events_FocusEvent.KEY_FOCUS_CHANGE = "keyFocusChange";
openfl_events_FocusEvent.MOUSE_FOCUS_CHANGE = "mouseFocusChange";
openfl_events_FocusEvent.__pool = new lime_utils_ObjectPool(function() {
	return new openfl_events_FocusEvent(null);
},function(event) {
	event.__init();
});
openfl_events_FullScreenEvent.FULL_SCREEN = "fullScreen";
openfl_events_FullScreenEvent.FULL_SCREEN_INTERACTIVE_ACCEPTED = "fullScreenInteractiveAccepted";
openfl_events_FullScreenEvent.__pool = new lime_utils_ObjectPool(function() {
	return new openfl_events_FullScreenEvent(null);
},function(event) {
	event.__init();
});
openfl_events_GameInputEvent.DEVICE_ADDED = "deviceAdded";
openfl_events_GameInputEvent.DEVICE_REMOVED = "deviceRemoved";
openfl_events_GameInputEvent.DEVICE_UNUSABLE = "deviceUnusable";
openfl_events_GameInputEvent.__pool = new lime_utils_ObjectPool(function() {
	return new openfl_events_GameInputEvent(null);
},function(event) {
	event.__init();
});
openfl_events_HTTPStatusEvent.HTTP_RESPONSE_STATUS = "httpResponseStatus";
openfl_events_HTTPStatusEvent.HTTP_STATUS = "httpStatus";
openfl_events_HTTPStatusEvent.__pool = new lime_utils_ObjectPool(function() {
	return new openfl_events_HTTPStatusEvent(null);
},function(event) {
	event.__init();
});
openfl_events_IOErrorEvent.IO_ERROR = "ioError";
openfl_events_IOErrorEvent.__pool = new lime_utils_ObjectPool(function() {
	return new openfl_events_IOErrorEvent(null);
},function(event) {
	event.__init();
});
openfl_events_KeyboardEvent.KEY_DOWN = "keyDown";
openfl_events_KeyboardEvent.KEY_UP = "keyUp";
openfl_events_KeyboardEvent.__pool = new lime_utils_ObjectPool(function() {
	return new openfl_events_KeyboardEvent(null);
},function(event) {
	event.__init();
});
openfl_events_MouseEvent.CLICK = "click";
openfl_events_MouseEvent.DOUBLE_CLICK = "doubleClick";
openfl_events_MouseEvent.MIDDLE_CLICK = "middleClick";
openfl_events_MouseEvent.MIDDLE_MOUSE_DOWN = "middleMouseDown";
openfl_events_MouseEvent.MIDDLE_MOUSE_UP = "middleMouseUp";
openfl_events_MouseEvent.MOUSE_DOWN = "mouseDown";
openfl_events_MouseEvent.MOUSE_MOVE = "mouseMove";
openfl_events_MouseEvent.MOUSE_OUT = "mouseOut";
openfl_events_MouseEvent.MOUSE_OVER = "mouseOver";
openfl_events_MouseEvent.MOUSE_UP = "mouseUp";
openfl_events_MouseEvent.MOUSE_WHEEL = "mouseWheel";
openfl_events_MouseEvent.RELEASE_OUTSIDE = "releaseOutside";
openfl_events_MouseEvent.RIGHT_CLICK = "rightClick";
openfl_events_MouseEvent.RIGHT_MOUSE_DOWN = "rightMouseDown";
openfl_events_MouseEvent.RIGHT_MOUSE_UP = "rightMouseUp";
openfl_events_MouseEvent.ROLL_OUT = "rollOut";
openfl_events_MouseEvent.ROLL_OVER = "rollOver";
openfl_events_MouseEvent.__pool = new lime_utils_ObjectPool(function() {
	return new openfl_events_MouseEvent(null);
},function(event) {
	event.__init();
});
openfl_events_NetStatusEvent.NET_STATUS = "netStatus";
openfl_events_NetStatusEvent.__pool = new lime_utils_ObjectPool(function() {
	return new openfl_events_NetStatusEvent(null);
},function(event) {
	event.__init();
});
openfl_events_ProgressEvent.PROGRESS = "progress";
openfl_events_ProgressEvent.SOCKET_DATA = "socketData";
openfl_events_ProgressEvent.__pool = new lime_utils_ObjectPool(function() {
	return new openfl_events_ProgressEvent(null);
},function(event) {
	event.__init();
});
openfl_events_RenderEvent.CLEAR_DOM = "clearDOM";
openfl_events_RenderEvent.RENDER_CAIRO = "renderCairo";
openfl_events_RenderEvent.RENDER_CANVAS = "renderCanvas";
openfl_events_RenderEvent.RENDER_DOM = "renderDOM";
openfl_events_RenderEvent.RENDER_OPENGL = "renderOpenGL";
openfl_events_RenderEvent.__pool = new lime_utils_ObjectPool(function() {
	return new openfl_events_RenderEvent(null);
},function(event) {
	event.__init();
});
openfl_events_SecurityErrorEvent.SECURITY_ERROR = "securityError";
openfl_events_SecurityErrorEvent.__pool = new lime_utils_ObjectPool(function() {
	return new openfl_events_SecurityErrorEvent(null);
},function(event) {
	event.__init();
});
openfl_events_TouchEvent.__meta__ = { fields : { delta : { SuppressWarnings : ["checkstyle:FieldDocComment"]}}};
openfl_events_TouchEvent.TOUCH_BEGIN = "touchBegin";
openfl_events_TouchEvent.TOUCH_END = "touchEnd";
openfl_events_TouchEvent.TOUCH_MOVE = "touchMove";
openfl_events_TouchEvent.TOUCH_OUT = "touchOut";
openfl_events_TouchEvent.TOUCH_OVER = "touchOver";
openfl_events_TouchEvent.TOUCH_ROLL_OUT = "touchRollOut";
openfl_events_TouchEvent.TOUCH_ROLL_OVER = "touchRollOver";
openfl_events_TouchEvent.TOUCH_TAP = "touchTap";
openfl_events_TouchEvent.__pool = new lime_utils_ObjectPool(function() {
	return new openfl_events_TouchEvent(null);
},function(event) {
	event.__init();
});
openfl_events_UncaughtErrorEvent.UNCAUGHT_ERROR = "uncaughtError";
openfl_events_UncaughtErrorEvent.__pool = new lime_utils_ObjectPool(function() {
	return new openfl_events_UncaughtErrorEvent(null);
},function(event) {
	event.__init();
});
openfl_filters_BlurFilter.__blurShader = new openfl_filters__$BlurFilter_BlurShader();
openfl_filters__$ColorMatrixFilter_ColorMatrixShader.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl_filters_ColorMatrixFilter.__colorMatrixShader = new openfl_filters__$ColorMatrixFilter_ColorMatrixShader();
openfl_filters_ConvolutionFilter.__convolutionShader = new openfl_filters__$ConvolutionFilter_ConvolutionShader();
openfl_filters_DisplacementMapFilter.__displacementMapShader = new openfl_filters__$DisplacementMapFilter_DisplacementMapShader();
openfl_filters_DisplacementMapFilter.__matrixData = [0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0];
openfl_filters_DisplacementMapFilter.__offset = [0.5,0.5,0.0,0.0];
openfl_filters_GlowFilter.__glowShader = new openfl_filters__$GlowFilter_GlowShader();
openfl_filters_ShaderFilter.__meta__ = { fields : { blendMode : { SuppressWarnings : ["checkstyle:FieldDocComment"]}}};
openfl_geom_Matrix3D.__meta__ = { statics : { create2D : { SuppressWarnings : ["checkstyle:FieldDocComment"]}, createABCD : { SuppressWarnings : ["checkstyle:FieldDocComment"]}, createOrtho : { SuppressWarnings : ["checkstyle:FieldDocComment"]}}};
openfl_geom_Orientation3D.AXIS_ANGLE = 0;
openfl_geom_Orientation3D.EULER_ANGLES = 1;
openfl_geom_Orientation3D.QUATERNION = 2;
openfl_media_SoundTransform.__meta__ = { fields : { clone : { SuppressWarnings : ["checkstyle:FieldDocComment"]}}};
openfl_media_SoundMixer.MAX_ACTIVE_CHANNELS = 32;
openfl_media_SoundMixer.__soundChannels = [];
openfl_media_SoundMixer.__soundTransform = new openfl_media_SoundTransform();
openfl_net_NetConnection.__meta__ = { statics : { CONNECT_SUCCESS : { SuppressWarnings : ["checkstyle:FieldDocComment"]}}};
openfl_net_NetConnection.CONNECT_SUCCESS = "NetConnection.Connect.Success";
openfl_net_NetStream.__meta__ = { fields : { audioCodec : { SuppressWarnings : ["checkstyle:FieldDocComment"]}, decodedFrames : { SuppressWarnings : ["checkstyle:FieldDocComment"]}, speed : { SuppressWarnings : ["checkstyle:FieldDocComment"]}, requestVideoStatus : { SuppressWarnings : ["checkstyle:FieldDocComment"]}}};
openfl_net_SharedObject.defaultObjectEncoding = 10;
openfl_net_SharedObjectFlushStatus.FLUSHED = 0;
openfl_net_SharedObjectFlushStatus.PENDING = 1;
openfl_net_URLLoaderDataFormat.BINARY = 0;
openfl_net_URLLoaderDataFormat.TEXT = 1;
openfl_net_URLLoaderDataFormat.VARIABLES = 2;
openfl_net_URLRequestDefaults.followRedirects = true;
openfl_net_URLRequestDefaults.idleTimeout = 0;
openfl_net_URLRequestDefaults.manageCookies = false;
openfl_sensors_Accelerometer.currentX = 0.0;
openfl_sensors_Accelerometer.currentY = 1.0;
openfl_sensors_Accelerometer.currentZ = 0.0;
openfl_sensors_Accelerometer.defaultInterval = 34;
openfl_sensors_Accelerometer.initialized = false;
openfl_sensors_Accelerometer.supported = false;
openfl_system_ApplicationDomain.currentDomain = new openfl_system_ApplicationDomain(null);
openfl_system_SecurityDomain.__meta__ = { obj : { SuppressWarnings : ["checkstyle:UnnecessaryConstructor"]}};
openfl_system_SecurityDomain.currentDomain = new openfl_system_SecurityDomain();
openfl_system_System.useCodePage = false;
openfl_text_AntiAliasType.ADVANCED = 0;
openfl_text_AntiAliasType.NORMAL = 1;
openfl_text_Font.__fontByName = new haxe_ds_StringMap();
openfl_text_Font.__registeredFonts = [];
openfl_text_FontStyle.BOLD = 0;
openfl_text_FontStyle.BOLD_ITALIC = 1;
openfl_text_FontStyle.ITALIC = 2;
openfl_text_FontStyle.REGULAR = 3;
openfl_text_FontType.DEVICE = 0;
openfl_text_FontType.EMBEDDED = 1;
openfl_text_FontType.EMBEDDED_CFF = 2;
openfl_text_GridFitType.NONE = 0;
openfl_text_GridFitType.PIXEL = 1;
openfl_text_GridFitType.SUBPIXEL = 2;
openfl_text_TextField.__missingFontWarning = new haxe_ds_StringMap();
openfl_text_TextFieldAutoSize.CENTER = 0;
openfl_text_TextFieldAutoSize.LEFT = 1;
openfl_text_TextFieldAutoSize.NONE = 2;
openfl_text_TextFieldAutoSize.RIGHT = 3;
openfl_text_TextFieldType.DYNAMIC = 0;
openfl_text_TextFieldType.INPUT = 1;
openfl_text_TextFormat.__meta__ = { fields : { clone : { SuppressWarnings : ["checkstyle:FieldDocComment"]}}};
openfl_text_TextFormatAlign.CENTER = 0;
openfl_text_TextFormatAlign.END = 1;
openfl_text_TextFormatAlign.JUSTIFY = 2;
openfl_text_TextFormatAlign.LEFT = 3;
openfl_text_TextFormatAlign.RIGHT = 4;
openfl_text_TextFormatAlign.START = 5;
openfl_ui_GameInput.__meta__ = { fields : { addEventListener : { SuppressWarnings : ["checkstyle:Dynamic"]}}};
openfl_ui_GameInput.isSupported = true;
openfl_ui_GameInput.numDevices = 0;
openfl_ui_GameInput.__deviceList = [];
openfl_ui_GameInput.__instances = [];
openfl_ui_GameInput.__devices = new haxe_ds_ObjectMap();
openfl_ui_GameInputDevice.MAX_BUFFER_SIZE = 32000;
openfl_ui_Keyboard.__meta__ = { statics : { BREAK : { SuppressWarnings : ["checkstyle:FieldDocComment"]}, NUMLOCK : { SuppressWarnings : ["checkstyle:FieldDocComment"]}}};
openfl_ui_Keyboard.NUMBER_0 = 48;
openfl_ui_Keyboard.NUMBER_1 = 49;
openfl_ui_Keyboard.NUMBER_2 = 50;
openfl_ui_Keyboard.NUMBER_3 = 51;
openfl_ui_Keyboard.NUMBER_4 = 52;
openfl_ui_Keyboard.NUMBER_5 = 53;
openfl_ui_Keyboard.NUMBER_6 = 54;
openfl_ui_Keyboard.NUMBER_7 = 55;
openfl_ui_Keyboard.NUMBER_8 = 56;
openfl_ui_Keyboard.NUMBER_9 = 57;
openfl_ui_Keyboard.A = 65;
openfl_ui_Keyboard.B = 66;
openfl_ui_Keyboard.C = 67;
openfl_ui_Keyboard.D = 68;
openfl_ui_Keyboard.E = 69;
openfl_ui_Keyboard.F = 70;
openfl_ui_Keyboard.G = 71;
openfl_ui_Keyboard.H = 72;
openfl_ui_Keyboard.I = 73;
openfl_ui_Keyboard.J = 74;
openfl_ui_Keyboard.K = 75;
openfl_ui_Keyboard.L = 76;
openfl_ui_Keyboard.M = 77;
openfl_ui_Keyboard.N = 78;
openfl_ui_Keyboard.O = 79;
openfl_ui_Keyboard.P = 80;
openfl_ui_Keyboard.Q = 81;
openfl_ui_Keyboard.R = 82;
openfl_ui_Keyboard.S = 83;
openfl_ui_Keyboard.T = 84;
openfl_ui_Keyboard.U = 85;
openfl_ui_Keyboard.V = 86;
openfl_ui_Keyboard.W = 87;
openfl_ui_Keyboard.X = 88;
openfl_ui_Keyboard.Y = 89;
openfl_ui_Keyboard.Z = 90;
openfl_ui_Keyboard.NUMPAD_0 = 96;
openfl_ui_Keyboard.NUMPAD_1 = 97;
openfl_ui_Keyboard.NUMPAD_2 = 98;
openfl_ui_Keyboard.NUMPAD_3 = 99;
openfl_ui_Keyboard.NUMPAD_4 = 100;
openfl_ui_Keyboard.NUMPAD_5 = 101;
openfl_ui_Keyboard.NUMPAD_6 = 102;
openfl_ui_Keyboard.NUMPAD_7 = 103;
openfl_ui_Keyboard.NUMPAD_8 = 104;
openfl_ui_Keyboard.NUMPAD_9 = 105;
openfl_ui_Keyboard.NUMPAD_MULTIPLY = 106;
openfl_ui_Keyboard.NUMPAD_ADD = 107;
openfl_ui_Keyboard.NUMPAD_ENTER = 108;
openfl_ui_Keyboard.NUMPAD_SUBTRACT = 109;
openfl_ui_Keyboard.NUMPAD_DECIMAL = 110;
openfl_ui_Keyboard.NUMPAD_DIVIDE = 111;
openfl_ui_Keyboard.F1 = 112;
openfl_ui_Keyboard.F2 = 113;
openfl_ui_Keyboard.F3 = 114;
openfl_ui_Keyboard.F4 = 115;
openfl_ui_Keyboard.F5 = 116;
openfl_ui_Keyboard.F6 = 117;
openfl_ui_Keyboard.F7 = 118;
openfl_ui_Keyboard.F8 = 119;
openfl_ui_Keyboard.F9 = 120;
openfl_ui_Keyboard.F10 = 121;
openfl_ui_Keyboard.F11 = 122;
openfl_ui_Keyboard.F12 = 123;
openfl_ui_Keyboard.F13 = 124;
openfl_ui_Keyboard.F14 = 125;
openfl_ui_Keyboard.F15 = 126;
openfl_ui_Keyboard.BACKSPACE = 8;
openfl_ui_Keyboard.TAB = 9;
openfl_ui_Keyboard.ALTERNATE = 18;
openfl_ui_Keyboard.ENTER = 13;
openfl_ui_Keyboard.COMMAND = 15;
openfl_ui_Keyboard.SHIFT = 16;
openfl_ui_Keyboard.CONTROL = 17;
openfl_ui_Keyboard.BREAK = 19;
openfl_ui_Keyboard.CAPS_LOCK = 20;
openfl_ui_Keyboard.NUMPAD = 21;
openfl_ui_Keyboard.ESCAPE = 27;
openfl_ui_Keyboard.SPACE = 32;
openfl_ui_Keyboard.PAGE_UP = 33;
openfl_ui_Keyboard.PAGE_DOWN = 34;
openfl_ui_Keyboard.END = 35;
openfl_ui_Keyboard.HOME = 36;
openfl_ui_Keyboard.LEFT = 37;
openfl_ui_Keyboard.RIGHT = 39;
openfl_ui_Keyboard.UP = 38;
openfl_ui_Keyboard.DOWN = 40;
openfl_ui_Keyboard.INSERT = 45;
openfl_ui_Keyboard.DELETE = 46;
openfl_ui_Keyboard.NUMLOCK = 144;
openfl_ui_Keyboard.SEMICOLON = 186;
openfl_ui_Keyboard.EQUAL = 187;
openfl_ui_Keyboard.COMMA = 188;
openfl_ui_Keyboard.MINUS = 189;
openfl_ui_Keyboard.PERIOD = 190;
openfl_ui_Keyboard.SLASH = 191;
openfl_ui_Keyboard.BACKQUOTE = 192;
openfl_ui_Keyboard.LEFTBRACKET = 219;
openfl_ui_Keyboard.BACKSLASH = 220;
openfl_ui_Keyboard.RIGHTBRACKET = 221;
openfl_ui_Keyboard.QUOTE = 222;
openfl_ui_Mouse.supportsCursor = true;
openfl_ui_Mouse.supportsNativeCursor = true;
openfl_ui_Mouse.__cursor = "auto";
openfl_ui_MouseCursor.ARROW = "arrow";
openfl_ui_MouseCursor.AUTO = "auto";
openfl_ui_MouseCursor.BUTTON = "button";
openfl_ui_MouseCursor.HAND = "hand";
openfl_ui_MouseCursor.IBEAM = "ibeam";
openfl_ui_MouseCursor.__CROSSHAIR = "crosshair";
openfl_ui_MouseCursor.__CUSTOM = "custom";
openfl_ui_MouseCursor.__MOVE = "move";
openfl_ui_MouseCursor.__RESIZE_NESW = "resize_nesw";
openfl_ui_MouseCursor.__RESIZE_NS = "resize_ns";
openfl_ui_MouseCursor.__RESIZE_NWSE = "resize_nwse";
openfl_ui_MouseCursor.__RESIZE_WE = "resize_we";
openfl_ui_MouseCursor.__WAIT = "wait";
openfl_ui_MouseCursor.__WAIT_ARROW = "waitarrow";
openfl_ui_MultitouchInputMode.GESTURE = 0;
openfl_ui_MultitouchInputMode.NONE = 1;
openfl_ui_MultitouchInputMode.TOUCH_POINT = 2;
openfl_utils_AGALMiniAssembler.__meta__ = { obj : { SuppressWarnings : [["checkstyle:ConstantName","checkstyle:FieldDocComment"]]}};
openfl_utils_AGALMiniAssembler.OPMAP = new haxe_ds_StringMap();
openfl_utils_AGALMiniAssembler.REGMAP = new haxe_ds_StringMap();
openfl_utils_AGALMiniAssembler.SAMPLEMAP = new haxe_ds_StringMap();
openfl_utils_AGALMiniAssembler.MAX_NESTING = 4;
openfl_utils_AGALMiniAssembler.MAX_OPCODES = 4096;
openfl_utils_AGALMiniAssembler.FRAGMENT = "fragment";
openfl_utils_AGALMiniAssembler.VERTEX = "vertex";
openfl_utils_AGALMiniAssembler.SAMPLER_TYPE_SHIFT = 8;
openfl_utils_AGALMiniAssembler.SAMPLER_DIM_SHIFT = 12;
openfl_utils_AGALMiniAssembler.SAMPLER_SPECIAL_SHIFT = 16;
openfl_utils_AGALMiniAssembler.SAMPLER_REPEAT_SHIFT = 20;
openfl_utils_AGALMiniAssembler.SAMPLER_MIPMAP_SHIFT = 24;
openfl_utils_AGALMiniAssembler.SAMPLER_FILTER_SHIFT = 28;
openfl_utils_AGALMiniAssembler.REG_WRITE = 1;
openfl_utils_AGALMiniAssembler.REG_READ = 2;
openfl_utils_AGALMiniAssembler.REG_FRAG = 32;
openfl_utils_AGALMiniAssembler.REG_VERT = 64;
openfl_utils_AGALMiniAssembler.OP_SCALAR = 1;
openfl_utils_AGALMiniAssembler.OP_SPECIAL_TEX = 8;
openfl_utils_AGALMiniAssembler.OP_SPECIAL_MATRIX = 16;
openfl_utils_AGALMiniAssembler.OP_FRAG_ONLY = 32;
openfl_utils_AGALMiniAssembler.OP_VERT_ONLY = 64;
openfl_utils_AGALMiniAssembler.OP_NO_DEST = 128;
openfl_utils_AGALMiniAssembler.OP_VERSION2 = 256;
openfl_utils_AGALMiniAssembler.OP_INCNEST = 512;
openfl_utils_AGALMiniAssembler.OP_DECNEST = 1024;
openfl_utils_AGALMiniAssembler.MOV = "mov";
openfl_utils_AGALMiniAssembler.ADD = "add";
openfl_utils_AGALMiniAssembler.SUB = "sub";
openfl_utils_AGALMiniAssembler.MUL = "mul";
openfl_utils_AGALMiniAssembler.DIV = "div";
openfl_utils_AGALMiniAssembler.RCP = "rcp";
openfl_utils_AGALMiniAssembler.MIN = "min";
openfl_utils_AGALMiniAssembler.MAX = "max";
openfl_utils_AGALMiniAssembler.FRC = "frc";
openfl_utils_AGALMiniAssembler.SQT = "sqt";
openfl_utils_AGALMiniAssembler.RSQ = "rsq";
openfl_utils_AGALMiniAssembler.POW = "pow";
openfl_utils_AGALMiniAssembler.LOG = "log";
openfl_utils_AGALMiniAssembler.EXP = "exp";
openfl_utils_AGALMiniAssembler.NRM = "nrm";
openfl_utils_AGALMiniAssembler.SIN = "sin";
openfl_utils_AGALMiniAssembler.COS = "cos";
openfl_utils_AGALMiniAssembler.CRS = "crs";
openfl_utils_AGALMiniAssembler.DP3 = "dp3";
openfl_utils_AGALMiniAssembler.DP4 = "dp4";
openfl_utils_AGALMiniAssembler.ABS = "abs";
openfl_utils_AGALMiniAssembler.NEG = "neg";
openfl_utils_AGALMiniAssembler.SAT = "sat";
openfl_utils_AGALMiniAssembler.M33 = "m33";
openfl_utils_AGALMiniAssembler.M44 = "m44";
openfl_utils_AGALMiniAssembler.M34 = "m34";
openfl_utils_AGALMiniAssembler.DDX = "ddx";
openfl_utils_AGALMiniAssembler.DDY = "ddy";
openfl_utils_AGALMiniAssembler.IFE = "ife";
openfl_utils_AGALMiniAssembler.INE = "ine";
openfl_utils_AGALMiniAssembler.IFG = "ifg";
openfl_utils_AGALMiniAssembler.IFL = "ifl";
openfl_utils_AGALMiniAssembler.IEG = "ieg";
openfl_utils_AGALMiniAssembler.IEL = "iel";
openfl_utils_AGALMiniAssembler.ELS = "els";
openfl_utils_AGALMiniAssembler.EIF = "eif";
openfl_utils_AGALMiniAssembler.TED = "ted";
openfl_utils_AGALMiniAssembler.KIL = "kil";
openfl_utils_AGALMiniAssembler.TEX = "tex";
openfl_utils_AGALMiniAssembler.SGE = "sge";
openfl_utils_AGALMiniAssembler.SLT = "slt";
openfl_utils_AGALMiniAssembler.SGN = "sgn";
openfl_utils_AGALMiniAssembler.SEQ = "seq";
openfl_utils_AGALMiniAssembler.SNE = "sne";
openfl_utils_AGALMiniAssembler.VA = "va";
openfl_utils_AGALMiniAssembler.VC = "vc";
openfl_utils_AGALMiniAssembler.VT = "vt";
openfl_utils_AGALMiniAssembler.VO = "vo";
openfl_utils_AGALMiniAssembler.VI = "vi";
openfl_utils_AGALMiniAssembler.FC = "fc";
openfl_utils_AGALMiniAssembler.FT = "ft";
openfl_utils_AGALMiniAssembler.FS = "fs";
openfl_utils_AGALMiniAssembler.FO = "fo";
openfl_utils_AGALMiniAssembler.FD = "fd";
openfl_utils_AGALMiniAssembler.IID = "iid";
openfl_utils_AGALMiniAssembler.D2 = "2d";
openfl_utils_AGALMiniAssembler.D3 = "3d";
openfl_utils_AGALMiniAssembler.CUBE = "cube";
openfl_utils_AGALMiniAssembler.MIPNEAREST = "mipnearest";
openfl_utils_AGALMiniAssembler.MIPLINEAR = "miplinear";
openfl_utils_AGALMiniAssembler.MIPNONE = "mipnone";
openfl_utils_AGALMiniAssembler.NOMIP = "nomip";
openfl_utils_AGALMiniAssembler.NEAREST = "nearest";
openfl_utils_AGALMiniAssembler.LINEAR = "linear";
openfl_utils_AGALMiniAssembler.ANISOTROPIC2X = "anisotropic2x";
openfl_utils_AGALMiniAssembler.ANISOTROPIC4X = "anisotropic4x";
openfl_utils_AGALMiniAssembler.ANISOTROPIC8X = "anisotropic8x";
openfl_utils_AGALMiniAssembler.ANISOTROPIC16X = "anisotropic16x";
openfl_utils_AGALMiniAssembler.CENTROID = "centroid";
openfl_utils_AGALMiniAssembler.SINGLE = "single";
openfl_utils_AGALMiniAssembler.IGNORESAMPLER = "ignoresampler";
openfl_utils_AGALMiniAssembler.REPEAT = "repeat";
openfl_utils_AGALMiniAssembler.WRAP = "wrap";
openfl_utils_AGALMiniAssembler.CLAMP = "clamp";
openfl_utils_AGALMiniAssembler.REPEAT_U_CLAMP_V = "repeat_u_clamp_v";
openfl_utils_AGALMiniAssembler.CLAMP_U_REPEAT_V = "clamp_u_repeat_v";
openfl_utils_AGALMiniAssembler.RGBA = "rgba";
openfl_utils_AGALMiniAssembler.COMPRESSED = "compressed";
openfl_utils_AGALMiniAssembler.COMPRESSEDALPHA = "compressedalpha";
openfl_utils_AGALMiniAssembler.DXT1 = "dxt1";
openfl_utils_AGALMiniAssembler.DXT5 = "dxt5";
openfl_utils_AGALMiniAssembler.VIDEO = "video";
openfl_utils_AGALMiniAssembler.initialized = false;
openfl_utils__$AGALMiniAssembler_OpCode.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl_utils__$AGALMiniAssembler_Register.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl_utils__$AGALMiniAssembler_Sampler.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl_utils_Assets.cache = new openfl_utils_AssetCache();
openfl_utils_Assets.dispatcher = new openfl_events_EventDispatcher();
openfl_utils_ByteArray.__bytePointer = (function($this) {
	var $r;
	var this1 = new lime_utils_BytePointerData(null,0);
	$r = this1;
	return $r;
}(this));
openfl_utils_ByteArrayData.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl_utils_ByteArrayData.defaultObjectEncoding = 10;
openfl_utils_CompressionAlgorithm.DEFLATE = 0;
openfl_utils_CompressionAlgorithm.LZMA = 1;
openfl_utils_CompressionAlgorithm.ZLIB = 2;
openfl_utils__$Dictionary_ClassMap.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl_utils__$Dictionary_FloatMap.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl_utils__$Dictionary_UtilsObjectMap.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl_utils_Endian.BIG_ENDIAN = 0;
openfl_utils_Endian.LITTLE_ENDIAN = 1;
openfl_utils_Object.__meta__ = { statics : { iterator : { SuppressWarnings : ["checkstyle:FieldDocComment"]}, __get : { SuppressWarnings : ["checkstyle:FieldDocComment"]}, __set : { SuppressWarnings : ["checkstyle:FieldDocComment"]}}};
haxe_lang_Iterator.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
haxe_lang_Iterable.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
spine_CurveTimeline.LINEAR = 0;
spine_CurveTimeline.STEPPED = 1;
spine_CurveTimeline.BEZIER = 2;
spine_CurveTimeline.BEZIER_SIZE = 19;
spine_RotateTimeline.ENTRIES = 2;
spine_RotateTimeline.PREV_TIME = -2;
spine_RotateTimeline.PREV_ROTATION = -1;
spine_RotateTimeline.ROTATION = 1;
spine_RotateTimeline.LINEAR = 0;
spine_RotateTimeline.STEPPED = 1;
spine_RotateTimeline.BEZIER = 2;
spine_RotateTimeline.BEZIER_SIZE = 19;
spine_TranslateTimeline.ENTRIES = 3;
spine_TranslateTimeline.PREV_TIME = -3;
spine_TranslateTimeline.PREV_X = -2;
spine_TranslateTimeline.PREV_Y = -1;
spine_TranslateTimeline.X = 1;
spine_TranslateTimeline.Y = 2;
spine_TranslateTimeline.LINEAR = 0;
spine_TranslateTimeline.STEPPED = 1;
spine_TranslateTimeline.BEZIER = 2;
spine_TranslateTimeline.BEZIER_SIZE = 19;
spine_ScaleTimeline.ENTRIES = 3;
spine_ScaleTimeline.PREV_TIME = -3;
spine_ScaleTimeline.PREV_X = -2;
spine_ScaleTimeline.PREV_Y = -1;
spine_ScaleTimeline.X = 1;
spine_ScaleTimeline.Y = 2;
spine_ScaleTimeline.LINEAR = 0;
spine_ScaleTimeline.STEPPED = 1;
spine_ScaleTimeline.BEZIER = 2;
spine_ScaleTimeline.BEZIER_SIZE = 19;
spine_ShearTimeline.ENTRIES = 3;
spine_ShearTimeline.PREV_TIME = -3;
spine_ShearTimeline.PREV_X = -2;
spine_ShearTimeline.PREV_Y = -1;
spine_ShearTimeline.X = 1;
spine_ShearTimeline.Y = 2;
spine_ShearTimeline.LINEAR = 0;
spine_ShearTimeline.STEPPED = 1;
spine_ShearTimeline.BEZIER = 2;
spine_ShearTimeline.BEZIER_SIZE = 19;
spine_ColorTimeline.ENTRIES = 5;
spine_ColorTimeline.PREV_TIME = -5;
spine_ColorTimeline.PREV_R = -4;
spine_ColorTimeline.PREV_G = -3;
spine_ColorTimeline.PREV_B = -2;
spine_ColorTimeline.PREV_A = -1;
spine_ColorTimeline.R = 1;
spine_ColorTimeline.G = 2;
spine_ColorTimeline.B = 3;
spine_ColorTimeline.A = 4;
spine_ColorTimeline.LINEAR = 0;
spine_ColorTimeline.STEPPED = 1;
spine_ColorTimeline.BEZIER = 2;
spine_ColorTimeline.BEZIER_SIZE = 19;
spine_TwoColorTimeline.ENTRIES = 8;
spine_TwoColorTimeline.PREV_TIME = -8;
spine_TwoColorTimeline.PREV_R = -7;
spine_TwoColorTimeline.PREV_G = -6;
spine_TwoColorTimeline.PREV_B = -5;
spine_TwoColorTimeline.PREV_A = -4;
spine_TwoColorTimeline.PREV_R2 = -3;
spine_TwoColorTimeline.PREV_G2 = -2;
spine_TwoColorTimeline.PREV_B2 = -1;
spine_TwoColorTimeline.R = 1;
spine_TwoColorTimeline.G = 2;
spine_TwoColorTimeline.B = 3;
spine_TwoColorTimeline.A = 4;
spine_TwoColorTimeline.R2 = 5;
spine_TwoColorTimeline.G2 = 6;
spine_TwoColorTimeline.B2 = 7;
spine_TwoColorTimeline.LINEAR = 0;
spine_TwoColorTimeline.STEPPED = 1;
spine_TwoColorTimeline.BEZIER = 2;
spine_TwoColorTimeline.BEZIER_SIZE = 19;
spine_DeformTimeline.LINEAR = 0;
spine_DeformTimeline.STEPPED = 1;
spine_DeformTimeline.BEZIER = 2;
spine_DeformTimeline.BEZIER_SIZE = 19;
spine_IkConstraintTimeline.ENTRIES = 3;
spine_IkConstraintTimeline.PREV_TIME = -3;
spine_IkConstraintTimeline.PREV_MIX = -2;
spine_IkConstraintTimeline.PREV_BEND_DIRECTION = -1;
spine_IkConstraintTimeline.MIX = 1;
spine_IkConstraintTimeline.BEND_DIRECTION = 2;
spine_IkConstraintTimeline.LINEAR = 0;
spine_IkConstraintTimeline.STEPPED = 1;
spine_IkConstraintTimeline.BEZIER = 2;
spine_IkConstraintTimeline.BEZIER_SIZE = 19;
spine_TransformConstraintTimeline.ENTRIES = 5;
spine_TransformConstraintTimeline.PREV_TIME = -5;
spine_TransformConstraintTimeline.PREV_ROTATE = -4;
spine_TransformConstraintTimeline.PREV_TRANSLATE = -3;
spine_TransformConstraintTimeline.PREV_SCALE = -2;
spine_TransformConstraintTimeline.PREV_SHEAR = -1;
spine_TransformConstraintTimeline.ROTATE = 1;
spine_TransformConstraintTimeline.TRANSLATE = 2;
spine_TransformConstraintTimeline.SCALE = 3;
spine_TransformConstraintTimeline.SHEAR = 4;
spine_TransformConstraintTimeline.LINEAR = 0;
spine_TransformConstraintTimeline.STEPPED = 1;
spine_TransformConstraintTimeline.BEZIER = 2;
spine_TransformConstraintTimeline.BEZIER_SIZE = 19;
spine_PathConstraintPositionTimeline.ENTRIES = 2;
spine_PathConstraintPositionTimeline.PREV_TIME = -2;
spine_PathConstraintPositionTimeline.PREV_VALUE = -1;
spine_PathConstraintPositionTimeline.VALUE = 1;
spine_PathConstraintPositionTimeline.LINEAR = 0;
spine_PathConstraintPositionTimeline.STEPPED = 1;
spine_PathConstraintPositionTimeline.BEZIER = 2;
spine_PathConstraintPositionTimeline.BEZIER_SIZE = 19;
spine_PathConstraintSpacingTimeline.ENTRIES = 2;
spine_PathConstraintSpacingTimeline.PREV_TIME = -2;
spine_PathConstraintSpacingTimeline.PREV_VALUE = -1;
spine_PathConstraintSpacingTimeline.VALUE = 1;
spine_PathConstraintSpacingTimeline.LINEAR = 0;
spine_PathConstraintSpacingTimeline.STEPPED = 1;
spine_PathConstraintSpacingTimeline.BEZIER = 2;
spine_PathConstraintSpacingTimeline.BEZIER_SIZE = 19;
spine_PathConstraintMixTimeline.ENTRIES = 3;
spine_PathConstraintMixTimeline.PREV_TIME = -3;
spine_PathConstraintMixTimeline.PREV_ROTATE = -2;
spine_PathConstraintMixTimeline.PREV_TRANSLATE = -1;
spine_PathConstraintMixTimeline.ROTATE = 1;
spine_PathConstraintMixTimeline.TRANSLATE = 2;
spine_PathConstraintMixTimeline.LINEAR = 0;
spine_PathConstraintMixTimeline.STEPPED = 1;
spine_PathConstraintMixTimeline.BEZIER = 2;
spine_PathConstraintMixTimeline.BEZIER_SIZE = 19;
spine_MixPose_$enum.setup_value = 0;
spine_MixPose_$enum.current_value = 1;
spine_MixPose_$enum.currentLayered_value = 2;
spine_MixPose_$enum.setup_name = "setup";
spine_MixPose_$enum.current_name = "current";
spine_MixPose_$enum.currentLayered_name = "currentLayered";
spine_MixDirection_$enum.directionIn_value = 0;
spine_MixDirection_$enum.directionOut_value = 1;
spine_MixDirection_$enum.directionIn_name = "directionIn";
spine_MixDirection_$enum.directionOut_name = "directionOut";
spine_TimelineType_$enum.rotate_value = 0;
spine_TimelineType_$enum.translate_value = 1;
spine_TimelineType_$enum.scale_value = 2;
spine_TimelineType_$enum.shear_value = 3;
spine_TimelineType_$enum.attachment_value = 4;
spine_TimelineType_$enum.color_value = 5;
spine_TimelineType_$enum.deform_value = 6;
spine_TimelineType_$enum.event_value = 7;
spine_TimelineType_$enum.drawOrder_value = 8;
spine_TimelineType_$enum.ikConstraint_value = 9;
spine_TimelineType_$enum.transformConstraint_value = 10;
spine_TimelineType_$enum.pathConstraintPosition_value = 11;
spine_TimelineType_$enum.pathConstraintSpacing_value = 12;
spine_TimelineType_$enum.pathConstraintMix_value = 13;
spine_TimelineType_$enum.twoColor_value = 14;
spine_TimelineType_$enum.rotate_name = "rotate";
spine_TimelineType_$enum.translate_name = "translate";
spine_TimelineType_$enum.scale_name = "scale";
spine_TimelineType_$enum.shear_name = "shear";
spine_TimelineType_$enum.attachment_name = "attachment";
spine_TimelineType_$enum.color_name = "color";
spine_TimelineType_$enum.deform_name = "deform";
spine_TimelineType_$enum.event_name = "event";
spine_TimelineType_$enum.drawOrder_name = "drawOrder";
spine_TimelineType_$enum.ikConstraint_name = "ikConstraint";
spine_TimelineType_$enum.transformConstraint_name = "transformConstraint";
spine_TimelineType_$enum.pathConstraintPosition_name = "pathConstraintPosition";
spine_TimelineType_$enum.pathConstraintSpacing_name = "pathConstraintSpacing";
spine_TimelineType_$enum.pathConstraintMix_name = "pathConstraintMix";
spine_TimelineType_$enum.twoColor_name = "twoColor";
spine_support_error_Error.DEFAULT_TO_STRING = "Error";
spine_AnimationState.emptyAnimation = (function($this) {
	var $r;
	var this1 = [];
	$r = new spine_Animation("<empty>",this1,0);
	return $r;
}(this));
spine_AnimationState.SUBSEQUENT = 0;
spine_AnimationState.FIRST = 1;
spine_AnimationState.DIP = 2;
spine_AnimationState.DIP_MIX = 3;
spine_EventType_$enum.start_value = 0;
spine_EventType_$enum.interrupt_value = 1;
spine_EventType_$enum.end_value = 2;
spine_EventType_$enum.dispose_value = 3;
spine_EventType_$enum.complete_value = 4;
spine_EventType_$enum.event_value = 5;
spine_EventType_$enum.start_name = "start";
spine_EventType_$enum.interrupt_name = "interrupt";
spine_EventType_$enum.end_name = "end";
spine_EventType_$enum.dispose_name = "dispose";
spine_EventType_$enum.complete_name = "complete";
spine_EventType_$enum.event_name = "event";
spine_BlendMode_$enum.normal_value = 0;
spine_BlendMode_$enum.additive_value = 1;
spine_BlendMode_$enum.multiply_value = 2;
spine_BlendMode_$enum.screen_value = 3;
spine_BlendMode_$enum.normal_name = "normal";
spine_BlendMode_$enum.additive_name = "additive";
spine_BlendMode_$enum.multiply_name = "multiply";
spine_BlendMode_$enum.screen_name = "screen";
spine_TransformMode_$enum.normal_value = 0;
spine_TransformMode_$enum.onlyTranslation_value = 1;
spine_TransformMode_$enum.noRotationOrReflection_value = 2;
spine_TransformMode_$enum.noScale_value = 3;
spine_TransformMode_$enum.noScaleOrReflection_value = 4;
spine_TransformMode_$enum.normal_name = "normal";
spine_TransformMode_$enum.onlyTranslation_name = "onlyTranslation";
spine_TransformMode_$enum.noRotationOrReflection_name = "noRotationOrReflection";
spine_TransformMode_$enum.noScale_name = "noScale";
spine_TransformMode_$enum.noScaleOrReflection_name = "noScaleOrReflection";
spine_PathConstraint.__meta__ = { fields : { update : { SuppressWarnings : ["null"]}}};
spine_PathConstraint.NONE = -1;
spine_PathConstraint.BEFORE = -2;
spine_PathConstraint.AFTER = -3;
spine_PathConstraint.epsilon = 0.00001;
spine_PositionMode_$enum.fixed_value = 0;
spine_PositionMode_$enum.percent_value = 1;
spine_PositionMode_$enum.fixed_name = "fixed";
spine_PositionMode_$enum.percent_name = "percent";
spine_SpacingMode_$enum.length_value = 0;
spine_SpacingMode_$enum.fixed_value = 1;
spine_SpacingMode_$enum.percent_value = 2;
spine_SpacingMode_$enum.length_name = "length";
spine_SpacingMode_$enum.fixed_name = "fixed";
spine_SpacingMode_$enum.percent_name = "percent";
spine_RotateMode_$enum.tangent_value = 0;
spine_RotateMode_$enum.chain_value = 1;
spine_RotateMode_$enum.chainScale_value = 2;
spine_RotateMode_$enum.tangent_name = "tangent";
spine_RotateMode_$enum.chain_name = "chain";
spine_RotateMode_$enum.chainScale_name = "chainScale";
spine_attachments_AtlasAttachmentLoader.__meta__ = { obj : { SuppressWarnings : ["javadoc"]}};
spine_attachments_AttachmentType_$enum.region_value = 0;
spine_attachments_AttachmentType_$enum.boundingbox_value = 1;
spine_attachments_AttachmentType_$enum.mesh_value = 2;
spine_attachments_AttachmentType_$enum.linkedmesh_value = 3;
spine_attachments_AttachmentType_$enum.path_value = 4;
spine_attachments_AttachmentType_$enum.point_value = 5;
spine_attachments_AttachmentType_$enum.clipping_value = 6;
spine_attachments_AttachmentType_$enum.region_name = "region";
spine_attachments_AttachmentType_$enum.boundingbox_name = "boundingbox";
spine_attachments_AttachmentType_$enum.mesh_name = "mesh";
spine_attachments_AttachmentType_$enum.linkedmesh_name = "linkedmesh";
spine_attachments_AttachmentType_$enum.path_name = "path";
spine_attachments_AttachmentType_$enum.point_name = "point";
spine_attachments_AttachmentType_$enum.clipping_name = "clipping";
spine_attachments_VertexAttachment.nextID = (function($this) {
	var $r;
	var this1 = 0;
	$r = this1;
	return $r;
}(this));
spine_attachments_RegionAttachment.BLX = 0;
spine_attachments_RegionAttachment.BLY = 1;
spine_attachments_RegionAttachment.ULX = 2;
spine_attachments_RegionAttachment.ULY = 3;
spine_attachments_RegionAttachment.URX = 4;
spine_attachments_RegionAttachment.URY = 5;
spine_attachments_RegionAttachment.BRX = 6;
spine_attachments_RegionAttachment.BRY = 7;
spine_events_SpineEvent.END = "end";
spine_events_SpineEvent.COMPLETE = "complete";
spine_events_SpineEvent.DISPOSE = "dispose";
spine_events_SpineEvent.INTERRUPT = "interrupt";
spine_events_SpineEvent.START = "start";
spine_events_SpineEvent.EVENT = "event";
spine_openfl_SkeletonSprite.clipper = new spine_utils_SkeletonClipping();
spine_support_graphics_Color.CLEAR = new spine_support_graphics_Color(0,0,0,0);
spine_support_graphics_Color.BLACK = new spine_support_graphics_Color(0,0,0,1);
spine_support_graphics_Color.WHITE = (function($this) {
	var $r;
	var _this = new spine_support_graphics_Color();
	_this.r = 1.;
	_this.g = 1.;
	_this.b = 1.;
	_this.a = 1.;
	$r = _this;
	return $r;
}(this));
spine_support_graphics_Color.LIGHT_GRAY = (function($this) {
	var $r;
	var _this = new spine_support_graphics_Color();
	_this.r = 0.749019607843137258;
	_this.g = 0.749019607843137258;
	_this.b = 0.749019607843137258;
	_this.a = 1.;
	$r = _this;
	return $r;
}(this));
spine_support_graphics_Color.GRAY = (function($this) {
	var $r;
	var _this = new spine_support_graphics_Color();
	_this.r = 0.498039215686274517;
	_this.g = 0.498039215686274517;
	_this.b = 0.498039215686274517;
	_this.a = 1.;
	$r = _this;
	return $r;
}(this));
spine_support_graphics_Color.DARK_GRAY = (function($this) {
	var $r;
	var _this = new spine_support_graphics_Color();
	_this.r = 0.247058823529411775;
	_this.g = 0.247058823529411775;
	_this.b = 0.247058823529411775;
	_this.a = 1.;
	$r = _this;
	return $r;
}(this));
spine_support_graphics_Color.BLUE = new spine_support_graphics_Color(0,0,1,1);
spine_support_graphics_Color.NAVY = new spine_support_graphics_Color(0,0,0.5,1);
spine_support_graphics_Color.ROYAL = (function($this) {
	var $r;
	var _this = new spine_support_graphics_Color();
	_this.r = 0.254901960784313708;
	_this.g = 0.411764705882352922;
	_this.b = 0.882352941176470562;
	_this.a = 1.;
	$r = _this;
	return $r;
}(this));
spine_support_graphics_Color.SLATE = (function($this) {
	var $r;
	var _this = new spine_support_graphics_Color();
	_this.r = 0.439215686274509798;
	_this.g = 0.501960784313725483;
	_this.b = 0.564705882352941169;
	_this.a = 1.;
	$r = _this;
	return $r;
}(this));
spine_support_graphics_Color.SKY = (function($this) {
	var $r;
	var _this = new spine_support_graphics_Color();
	_this.r = 0.529411764705882359;
	_this.g = 0.807843137254902;
	_this.b = 0.921568627450980338;
	_this.a = 1.;
	$r = _this;
	return $r;
}(this));
spine_support_graphics_Color.CYAN = new spine_support_graphics_Color(0,1,1,1);
spine_support_graphics_Color.TEAL = new spine_support_graphics_Color(0,0.5,0.5,1);
spine_support_graphics_Color.GREEN = (function($this) {
	var $r;
	var _this = new spine_support_graphics_Color();
	_this.r = 0.;
	_this.g = 1.;
	_this.b = 0.;
	_this.a = 1.;
	$r = _this;
	return $r;
}(this));
spine_support_graphics_Color.CHARTREUSE = (function($this) {
	var $r;
	var _this = new spine_support_graphics_Color();
	_this.r = 0.498039215686274517;
	_this.g = 1.;
	_this.b = 0.;
	_this.a = 1.;
	$r = _this;
	return $r;
}(this));
spine_support_graphics_Color.LIME = (function($this) {
	var $r;
	var _this = new spine_support_graphics_Color();
	_this.r = 0.196078431372549017;
	_this.g = 0.803921568627451;
	_this.b = 0.196078431372549017;
	_this.a = 1.;
	$r = _this;
	return $r;
}(this));
spine_support_graphics_Color.FOREST = (function($this) {
	var $r;
	var _this = new spine_support_graphics_Color();
	_this.r = 0.133333333333333331;
	_this.g = 0.545098039215686225;
	_this.b = 0.133333333333333331;
	_this.a = 1.;
	$r = _this;
	return $r;
}(this));
spine_support_graphics_Color.OLIVE = (function($this) {
	var $r;
	var _this = new spine_support_graphics_Color();
	_this.r = 0.41960784313725491;
	_this.g = 0.556862745098039236;
	_this.b = 0.137254901960784326;
	_this.a = 1.;
	$r = _this;
	return $r;
}(this));
spine_support_graphics_Color.YELLOW = (function($this) {
	var $r;
	var _this = new spine_support_graphics_Color();
	_this.r = 1.;
	_this.g = 1.;
	_this.b = 0.;
	_this.a = 1.;
	$r = _this;
	return $r;
}(this));
spine_support_graphics_Color.GOLD = (function($this) {
	var $r;
	var _this = new spine_support_graphics_Color();
	_this.r = 1.;
	_this.g = 0.843137254901960786;
	_this.b = 0.;
	_this.a = 1.;
	$r = _this;
	return $r;
}(this));
spine_support_graphics_Color.GOLDENROD = (function($this) {
	var $r;
	var _this = new spine_support_graphics_Color();
	_this.r = 0.854901960784313686;
	_this.g = 0.647058823529411797;
	_this.b = 0.125490196078431371;
	_this.a = 1.;
	$r = _this;
	return $r;
}(this));
spine_support_graphics_Color.ORANGE = (function($this) {
	var $r;
	var _this = new spine_support_graphics_Color();
	_this.r = 1.;
	_this.g = 0.647058823529411797;
	_this.b = 0.;
	_this.a = 1.;
	$r = _this;
	return $r;
}(this));
spine_support_graphics_Color.BROWN = (function($this) {
	var $r;
	var _this = new spine_support_graphics_Color();
	_this.r = 0.545098039215686225;
	_this.g = 0.270588235294117629;
	_this.b = 0.0745098039215686264;
	_this.a = 1.;
	$r = _this;
	return $r;
}(this));
spine_support_graphics_Color.TAN = (function($this) {
	var $r;
	var _this = new spine_support_graphics_Color();
	_this.r = 0.823529411764705843;
	_this.g = 0.705882352941176516;
	_this.b = 0.549019607843137303;
	_this.a = 1.;
	$r = _this;
	return $r;
}(this));
spine_support_graphics_Color.FIREBRICK = (function($this) {
	var $r;
	var _this = new spine_support_graphics_Color();
	_this.r = 0.698039215686274472;
	_this.g = 0.133333333333333331;
	_this.b = 0.133333333333333331;
	_this.a = 1.;
	$r = _this;
	return $r;
}(this));
spine_support_graphics_Color.RED = (function($this) {
	var $r;
	var _this = new spine_support_graphics_Color();
	_this.r = 1.;
	_this.g = 0.;
	_this.b = 0.;
	_this.a = 1.;
	$r = _this;
	return $r;
}(this));
spine_support_graphics_Color.SCARLET = (function($this) {
	var $r;
	var _this = new spine_support_graphics_Color();
	_this.r = 1.;
	_this.g = 0.203921568627450978;
	_this.b = 0.109803921568627449;
	_this.a = 1.;
	$r = _this;
	return $r;
}(this));
spine_support_graphics_Color.CORAL = (function($this) {
	var $r;
	var _this = new spine_support_graphics_Color();
	_this.r = 1.;
	_this.g = 0.498039215686274517;
	_this.b = 0.313725490196078427;
	_this.a = 1.;
	$r = _this;
	return $r;
}(this));
spine_support_graphics_Color.SALMON = (function($this) {
	var $r;
	var _this = new spine_support_graphics_Color();
	_this.r = 0.980392156862745057;
	_this.g = 0.501960784313725483;
	_this.b = 0.447058823529411786;
	_this.a = 1.;
	$r = _this;
	return $r;
}(this));
spine_support_graphics_Color.PINK = (function($this) {
	var $r;
	var _this = new spine_support_graphics_Color();
	_this.r = 1.;
	_this.g = 0.411764705882352922;
	_this.b = 0.705882352941176516;
	_this.a = 1.;
	$r = _this;
	return $r;
}(this));
spine_support_graphics_Color.MAGENTA = new spine_support_graphics_Color(1,0,1,1);
spine_support_graphics_Color.PURPLE = (function($this) {
	var $r;
	var _this = new spine_support_graphics_Color();
	_this.r = 0.627450980392156854;
	_this.g = 0.125490196078431371;
	_this.b = 0.941176470588235281;
	_this.a = 1.;
	$r = _this;
	return $r;
}(this));
spine_support_graphics_Color.VIOLET = (function($this) {
	var $r;
	var _this = new spine_support_graphics_Color();
	_this.r = 0.933333333333333348;
	_this.g = 0.509803921568627416;
	_this.b = 0.933333333333333348;
	_this.a = 1.;
	$r = _this;
	return $r;
}(this));
spine_support_graphics_Color.MAROON = (function($this) {
	var $r;
	var _this = new spine_support_graphics_Color();
	_this.r = 0.690196078431372539;
	_this.g = 0.188235294117647056;
	_this.b = 0.376470588235294112;
	_this.a = 1.;
	$r = _this;
	return $r;
}(this));
spine_support_graphics_TextureWrap.mirroredRepeat = new spine_support_graphics_TextureWrap(0,"mirroredRepeat");
spine_support_graphics_TextureWrap.clampToEdge = new spine_support_graphics_TextureWrap(1,"clampToEdge");
spine_support_graphics_TextureWrap.repeat = new spine_support_graphics_TextureWrap(2,"repeat");
spine_support_math_MathUtils.degRad = Math.PI / 180.0;
spine_support_math_MathUtils.radDeg = 180.0 / Math.PI;
spine_support_math_Matrix3.M00 = 0;
spine_support_math_Matrix3.M01 = 3;
spine_support_math_Matrix3.M02 = 6;
spine_support_math_Matrix3.M10 = 1;
spine_support_math_Matrix3.M11 = 4;
spine_support_math_Matrix3.M12 = 7;
spine_support_math_Matrix3.M20 = 2;
spine_support_math_Matrix3.M21 = 5;
spine_support_math_Matrix3.M22 = 8;
spine_utils_SpineUtils.PI = 3.1415927;
spine_utils_SpineUtils.PI2 = 6.2831854;
spine_utils_SpineUtils.radiansToDegrees = 57.2957786666616613;
spine_utils_SpineUtils.radDeg = spine_utils_SpineUtils.radiansToDegrees;
spine_utils_SpineUtils.degreesToRadians = 0.0174532927777777784;
spine_utils_SpineUtils.degRad = spine_utils_SpineUtils.degreesToRadians;
tweenxcore_Easing.PI = 3.1415926535897932384626433832795;
tweenxcore_Easing.PI_H = 1.57079632679489656;
tweenxcore_Easing.LN_2 = 0.6931471805599453;
tweenxcore_Easing.LN_2_10 = 6.931471805599453;
tweenxcore_Easing.overshoot = 1.70158;
tweenxcore_Easing.amplitude = 1;
tweenxcore_Easing.period = 0.0003;
zygame_cmnt_API.root = "https://api.cmnt.kdyx.cn/";
zygame_cmnt_API.v2root = "https://api.kdyx.cn/";
zygame_cmnt_API.SIGNATURE = "signature";
zygame_cmnt_API.ACCESS_TOKEN = "accessToken";
zygame_cmnt_API.SIGN_METHOD = "signMethod";
zygame_cmnt_API.QSTRING_EQUAL = "=";
zygame_cmnt_API.QSTRING_SPLIT = "&";
zygame_cmnt_Cmnt.isInit = false;
zygame_cmnt_Cmnt._saveTime = 0;
zygame_cmnt_GameUtils._loadtime = 0;
zygame_cmnt_GameUtils._start = false;
zygame_cmnt_GameUtils._loaded = false;
zygame_cmnt_MessageSystem._interval = 0;
zygame_cmnt_v2_Sign.SIGNATURE = "signature";
zygame_cmnt_v2_Sign.ACCESS_TOKEN = "accessToken";
zygame_cmnt_v2_Sign.SIGN_METHOD = "signMethod";
zygame_cmnt_v2_Sign.QSTRING_EQUAL = "=";
zygame_cmnt_v2_Sign.QSTRING_SPLIT = "&";
zygame_components_ZBuilder.igone = ["left","right","top","bottom","centerX","centerY"];
zygame_components_ZBuilder.baseAssetsList = [];
zygame_components_ZBuilder.builderDefine = new haxe_ds_StringMap();
zygame_components_ZBuilder.useDefault = false;
zygame_components_base_ToggleButton.DOWN = "down";
zygame_components_base_ToggleButton.UP = "up";
zygame_components_base_ToggleButton.OVER = "over";
zygame_components_base_ToggleButton.OUT = "out";
zygame_components_base_ToggleButton.COMPONENT_IMAGE = "image";
zygame_components_ZScroll.VIEW = "view";
zygame_components_ZScroll.OFF = "off";
zygame_components_ZScroll.NO = "no";
zygame_components_ZScroll.AUTO = "auto";
zygame_components_ZModel.fontSize = 32;
zygame_components_ZModel.currentCallTime = -1;
zygame_components_ZModel._modelBase64 = "iVBORw0KGgoAAAANSUhEUgAAABsAAAAVCAYAAAC33pUlAAAAmUlEQVR42mNgwA70gbgeiPcj4fdA/B8Lfo+mrh6qnyCwB+L7OAwlFd+HmocVxFPJEnQcj26RP40sgmF/mEX8eOKDWvg91B6aBR/W4FxPJ8tA9tA8CJGDki4WwfCoZUPQsv10sghkD8N8Olk2nx7lIkb5eJ/GFt0fkFIfBvJpZFE+vgr0PRXLwnhCTQN+qGvOk2nJeah+fnSDAXa48kWy1Qi2AAAALXRFWHRTb2Z0d2FyZQBieS5ibG9vZGR5LmNyeXB0by5pbWFnZS5QTkcyNEVuY29kZXKoBn/uAAAAAElFTkSuQmCC";
zygame_components_base_ZTextField.initTextFieldWindow = false;
zygame_components_base_ZTextField.compositionstart = false;
zygame_components_layout_FlowLayout.HORIZONTAL = "horizontal";
zygame_components_layout_FlowLayout.VERTICAL = "vertical";
zygame_components_layout_ListLayout.HORIZONTAL = "horizontal";
zygame_components_layout_ListLayout.VERTICAL = "vertical";
zygame_events_TileTouchEvent.TOUCH_BEGIN_TILE = "touchBeginTile";
zygame_events_TileTouchEvent.TOUCH_END_TILE = "touchEndTile";
zygame_events_TileTouchEvent.TOUCH_MOVE_TILE = "touchMoveTile";
zygame_events_TileTouchEvent.TOUCH_THROUGH = "touchThrough";
zygame_mini_MiniEngineHaxe.IGONEATTR = ["x","y","alpha","width","height","scaleX","scaleY","dataProvider"];
zygame_mini_MiniEngineHaxe.VARATTR = ["1","2","3","4","5","6","7","8","9","0","-"];
zygame_mini_Func.NAMEPIX = "!{}/*%+-<>=;(),.\"[]'  \t\t";
zygame_mini_MiniEvent.GAME_OVER = "gameOver";
zygame_mini_MiniEvent.GAME_WIN = "gameWin";
zygame_mini_MiniEvent.ADD_SCORE = "addScore";
zygame_shader_GeryShader.shader = new zygame_shader_GeryShader();
zygame_shader_engine_ZShader.defalutGLFragmentSourceBody = "vec4 color = texture2D (openfl_Texture, openfl_TextureCoordv);\n\n\t\tif (color.a == 0.0) {\n\n\t\t\tgl_FragColor = vec4 (0.0, 0.0, 0.0, 0.0);\n\n\t\t} else if (openfl_HasColorTransform) {\n\n\t\t\tcolor = vec4 (color.rgb / color.a, color.a);\n\n\t\t\tmat4 colorMultiplier = mat4 (0);\n\t\t\tcolorMultiplier[0][0] = openfl_ColorMultiplierv.x;\n\t\t\tcolorMultiplier[1][1] = openfl_ColorMultiplierv.y;\n\t\t\tcolorMultiplier[2][2] = openfl_ColorMultiplierv.z;\n\t\t\tcolorMultiplier[3][3] = 1.0; // openfl_ColorMultiplierv.w;\n\n\t\t\tcolor = clamp (openfl_ColorOffsetv + (color * colorMultiplier), 0.0, 1.0);\n\n\t\t\tif (color.a > 0.0) {\n\n\t\t\t\tgl_FragColor = vec4 (color.rgb * color.a * openfl_Alphav, color.a * openfl_Alphav);\n\n\t\t\t} else {\n\n\t\t\t\tgl_FragColor = vec4 (0.0, 0.0, 0.0, 0.0);\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tgl_FragColor = color * openfl_Alphav;\n\n\t\t}";
zygame_shader_engine_ZShader.defalutGLFragmentSourceHeader = "varying float openfl_Alphav;\n        varying vec4 openfl_ColorMultiplierv;\n\t\tvarying vec4 openfl_ColorOffsetv;\n \t\tvarying vec2 openfl_TextureCoordv;\n\n \t\tuniform bool openfl_HasColorTransform;\n        uniform sampler2D openfl_Texture;\n        uniform vec2 openfl_TextureSize;\n        \n        uniform vec2 frameOffest;\n        uniform vec2 frameSize;\n        vec2 getFrameCoordv(){\n            return vec2(\n                (openfl_TextureSize.x * openfl_TextureCoordv.x - frameOffest.x) / frameSize.x,\n                (openfl_TextureSize.y * openfl_TextureCoordv.y - frameOffest.y) / frameSize.y\n            );\n        }";
zygame_uicn_UICNAPI.rootApi = "https://zygameui.cn/phptest/api/index.php?action=";
zygame_utils_Align.LEFT = "left";
zygame_utils_Align.RIGHT = "right";
zygame_utils_Align.TOP = "top";
zygame_utils_Align.BOTTOM = "bottom";
zygame_utils_Align.CENTER = "center";
zygame_utils_FPSAssets.assets = "";
zygame_utils_FPSAssets.fnt = "12<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!--Created using Glyph Designer - http://71squared.com/glyphdesigner-->\n<font>\n    <info face=\"Adobe Heiti Std\" size=\"12\" bold=\"0\" italic=\"0\" charset=\"\" unicode=\"0\" stretchH=\"100\" smooth=\"1\" aa=\"1\" padding=\"0,0,0,0\" spacing=\"2,2\"/>\n    <common lineHeight=\"15\" base=\"23\" scaleW=\"85\" scaleH=\"140\" pages=\"1\" packed=\"0\"/>\n    <pages>\n        <page id=\"0\" file=\"zygameui-font.png\"/>\n    </pages>\n    <chars count=\"95\">\n        <char id=\"32\" x=\"52\" y=\"130\" width=\"0\" height=\"0\" xoffset=\"0\" yoffset=\"14\" xadvance=\"3\" page=\"0\" chnl=\"0\" letter=\"space\"/>\n        <char id=\"33\" x=\"9\" y=\"97\" width=\"3\" height=\"11\" xoffset=\"1\" yoffset=\"3\" xadvance=\"3\" page=\"0\" chnl=\"0\" letter=\"!\"/>\n        <char id=\"34\" x=\"76\" y=\"120\" width=\"5\" height=\"5\" xoffset=\"1\" yoffset=\"3\" xadvance=\"5\" page=\"0\" chnl=\"0\" letter=\"&quot;\"/>\n        <char id=\"35\" x=\"22\" y=\"58\" width=\"7\" height=\"11\" xoffset=\"0\" yoffset=\"3\" xadvance=\"7\" page=\"0\" chnl=\"0\" letter=\"#\"/>\n        <char id=\"36\" x=\"14\" y=\"2\" width=\"7\" height=\"13\" xoffset=\"1\" yoffset=\"2\" xadvance=\"7\" page=\"0\" chnl=\"0\" letter=\"$\"/>\n        <char id=\"37\" x=\"16\" y=\"19\" width=\"11\" height=\"11\" xoffset=\"0\" yoffset=\"3\" xadvance=\"11\" page=\"0\" chnl=\"0\" letter=\"%\"/>\n        <char id=\"38\" x=\"54\" y=\"19\" width=\"9\" height=\"11\" xoffset=\"0\" yoffset=\"3\" xadvance=\"8\" page=\"0\" chnl=\"0\" letter=\"&amp;\"/>\n        <char id=\"39\" x=\"2\" y=\"130\" width=\"4\" height=\"5\" xoffset=\"0\" yoffset=\"3\" xadvance=\"3\" page=\"0\" chnl=\"0\" letter=\"'\"/>\n        <char id=\"40\" x=\"23\" y=\"2\" width=\"4\" height=\"13\" xoffset=\"1\" yoffset=\"3\" xadvance=\"4\" page=\"0\" chnl=\"0\" letter=\"(\"/>\n        <char id=\"41\" x=\"29\" y=\"2\" width=\"4\" height=\"13\" xoffset=\"0\" yoffset=\"3\" xadvance=\"4\" page=\"0\" chnl=\"0\" letter=\")\"/>\n        <char id=\"42\" x=\"57\" y=\"120\" width=\"6\" height=\"6\" xoffset=\"0\" yoffset=\"4\" xadvance=\"6\" page=\"0\" chnl=\"0\" letter=\"*\"/>\n        <char id=\"43\" x=\"42\" y=\"97\" width=\"9\" height=\"9\" xoffset=\"1\" yoffset=\"5\" xadvance=\"8\" page=\"0\" chnl=\"0\" letter=\"+\"/>\n        <char id=\"44\" x=\"8\" y=\"130\" width=\"4\" height=\"5\" xoffset=\"0\" yoffset=\"11\" xadvance=\"3\" page=\"0\" chnl=\"0\" letter=\",\"/>\n        <char id=\"45\" x=\"30\" y=\"130\" width=\"5\" height=\"3\" xoffset=\"0\" yoffset=\"8\" xadvance=\"4\" page=\"0\" chnl=\"0\" letter=\"-\"/>\n        <char id=\"46\" x=\"37\" y=\"130\" width=\"3\" height=\"3\" xoffset=\"1\" yoffset=\"11\" xadvance=\"3\" page=\"0\" chnl=\"0\" letter=\".\"/>\n        <char id=\"47\" x=\"29\" y=\"84\" width=\"6\" height=\"11\" xoffset=\"0\" yoffset=\"4\" xadvance=\"4\" page=\"0\" chnl=\"0\" letter=\"/\"/>\n        <char id=\"48\" x=\"31\" y=\"58\" width=\"7\" height=\"11\" xoffset=\"0\" yoffset=\"3\" xadvance=\"7\" page=\"0\" chnl=\"0\" letter=\"0\"/>\n        <char id=\"49\" x=\"77\" y=\"84\" width=\"5\" height=\"11\" xoffset=\"1\" yoffset=\"3\" xadvance=\"7\" page=\"0\" chnl=\"0\" letter=\"1\"/>\n        <char id=\"50\" x=\"40\" y=\"58\" width=\"7\" height=\"11\" xoffset=\"1\" yoffset=\"3\" xadvance=\"7\" page=\"0\" chnl=\"0\" letter=\"2\"/>\n        <char id=\"51\" x=\"49\" y=\"58\" width=\"7\" height=\"11\" xoffset=\"1\" yoffset=\"3\" xadvance=\"7\" page=\"0\" chnl=\"0\" letter=\"3\"/>\n        <char id=\"52\" x=\"46\" y=\"32\" width=\"8\" height=\"11\" xoffset=\"0\" yoffset=\"3\" xadvance=\"7\" page=\"0\" chnl=\"0\" letter=\"4\"/>\n        <char id=\"53\" x=\"58\" y=\"58\" width=\"7\" height=\"11\" xoffset=\"1\" yoffset=\"3\" xadvance=\"7\" page=\"0\" chnl=\"0\" letter=\"5\"/>\n        <char id=\"54\" x=\"67\" y=\"58\" width=\"7\" height=\"11\" xoffset=\"0\" yoffset=\"3\" xadvance=\"7\" page=\"0\" chnl=\"0\" letter=\"6\"/>\n        <char id=\"55\" x=\"76\" y=\"58\" width=\"7\" height=\"11\" xoffset=\"1\" yoffset=\"3\" xadvance=\"7\" page=\"0\" chnl=\"0\" letter=\"7\"/>\n        <char id=\"56\" x=\"2\" y=\"71\" width=\"7\" height=\"11\" xoffset=\"0\" yoffset=\"3\" xadvance=\"7\" page=\"0\" chnl=\"0\" letter=\"8\"/>\n        <char id=\"57\" x=\"11\" y=\"71\" width=\"7\" height=\"11\" xoffset=\"0\" yoffset=\"3\" xadvance=\"7\" page=\"0\" chnl=\"0\" letter=\"9\"/>\n        <char id=\"58\" x=\"52\" y=\"120\" width=\"3\" height=\"8\" xoffset=\"1\" yoffset=\"6\" xadvance=\"3\" page=\"0\" chnl=\"0\" letter=\":\"/>\n        <char id=\"59\" x=\"36\" y=\"97\" width=\"4\" height=\"10\" xoffset=\"0\" yoffset=\"6\" xadvance=\"3\" page=\"0\" chnl=\"0\" letter=\";\"/>\n        <char id=\"60\" x=\"53\" y=\"97\" width=\"8\" height=\"9\" xoffset=\"1\" yoffset=\"5\" xadvance=\"8\" page=\"0\" chnl=\"0\" letter=\"&lt;\"/>\n        <char id=\"61\" x=\"65\" y=\"120\" width=\"9\" height=\"5\" xoffset=\"1\" yoffset=\"7\" xadvance=\"8\" page=\"0\" chnl=\"0\" letter=\"=\"/>\n        <char id=\"62\" x=\"63\" y=\"97\" width=\"8\" height=\"9\" xoffset=\"1\" yoffset=\"5\" xadvance=\"8\" page=\"0\" chnl=\"0\" letter=\"&gt;\"/>\n        <char id=\"63\" x=\"37\" y=\"84\" width=\"6\" height=\"11\" xoffset=\"1\" yoffset=\"3\" xadvance=\"5\" page=\"0\" chnl=\"0\" letter=\"?\"/>\n        <char id=\"64\" x=\"42\" y=\"19\" width=\"10\" height=\"11\" xoffset=\"1\" yoffset=\"4\" xadvance=\"10\" page=\"0\" chnl=\"0\" letter=\"@\"/>\n        <char id=\"65\" x=\"65\" y=\"19\" width=\"9\" height=\"11\" xoffset=\"0\" yoffset=\"3\" xadvance=\"8\" page=\"0\" chnl=\"0\" letter=\"A\"/>\n        <char id=\"66\" x=\"20\" y=\"71\" width=\"7\" height=\"11\" xoffset=\"1\" yoffset=\"3\" xadvance=\"7\" page=\"0\" chnl=\"0\" letter=\"B\"/>\n        <char id=\"67\" x=\"56\" y=\"32\" width=\"8\" height=\"11\" xoffset=\"0\" yoffset=\"3\" xadvance=\"7\" page=\"0\" chnl=\"0\" letter=\"C\"/>\n        <char id=\"68\" x=\"2\" y=\"32\" width=\"9\" height=\"11\" xoffset=\"1\" yoffset=\"3\" xadvance=\"8\" page=\"0\" chnl=\"0\" letter=\"D\"/>\n        <char id=\"69\" x=\"29\" y=\"71\" width=\"7\" height=\"11\" xoffset=\"1\" yoffset=\"3\" xadvance=\"6\" page=\"0\" chnl=\"0\" letter=\"E\"/>\n        <char id=\"70\" x=\"45\" y=\"84\" width=\"6\" height=\"11\" xoffset=\"1\" yoffset=\"3\" xadvance=\"6\" page=\"0\" chnl=\"0\" letter=\"F\"/>\n        <char id=\"71\" x=\"13\" y=\"32\" width=\"9\" height=\"11\" xoffset=\"0\" yoffset=\"3\" xadvance=\"8\" page=\"0\" chnl=\"0\" letter=\"G\"/>\n        <char id=\"72\" x=\"66\" y=\"32\" width=\"8\" height=\"11\" xoffset=\"1\" yoffset=\"3\" xadvance=\"8\" page=\"0\" chnl=\"0\" letter=\"H\"/>\n        <char id=\"73\" x=\"14\" y=\"97\" width=\"3\" height=\"11\" xoffset=\"1\" yoffset=\"3\" xadvance=\"3\" page=\"0\" chnl=\"0\" letter=\"I\"/>\n        <char id=\"74\" x=\"2\" y=\"97\" width=\"5\" height=\"11\" xoffset=\"0\" yoffset=\"3\" xadvance=\"5\" page=\"0\" chnl=\"0\" letter=\"J\"/>\n        <char id=\"75\" x=\"2\" y=\"45\" width=\"8\" height=\"11\" xoffset=\"1\" yoffset=\"3\" xadvance=\"7\" page=\"0\" chnl=\"0\" letter=\"K\"/>\n        <char id=\"76\" x=\"53\" y=\"84\" width=\"6\" height=\"11\" xoffset=\"1\" yoffset=\"3\" xadvance=\"6\" page=\"0\" chnl=\"0\" letter=\"L\"/>\n        <char id=\"77\" x=\"29\" y=\"19\" width=\"11\" height=\"11\" xoffset=\"1\" yoffset=\"3\" xadvance=\"10\" page=\"0\" chnl=\"0\" letter=\"M\"/>\n        <char id=\"78\" x=\"12\" y=\"45\" width=\"8\" height=\"11\" xoffset=\"1\" yoffset=\"3\" xadvance=\"8\" page=\"0\" chnl=\"0\" letter=\"N\"/>\n        <char id=\"79\" x=\"24\" y=\"32\" width=\"9\" height=\"11\" xoffset=\"0\" yoffset=\"3\" xadvance=\"9\" page=\"0\" chnl=\"0\" letter=\"O\"/>\n        <char id=\"80\" x=\"38\" y=\"71\" width=\"7\" height=\"11\" xoffset=\"1\" yoffset=\"3\" xadvance=\"7\" page=\"0\" chnl=\"0\" letter=\"P\"/>\n        <char id=\"81\" x=\"35\" y=\"2\" width=\"9\" height=\"12\" xoffset=\"0\" yoffset=\"3\" xadvance=\"9\" page=\"0\" chnl=\"0\" letter=\"Q\"/>\n        <char id=\"82\" x=\"47\" y=\"71\" width=\"7\" height=\"11\" xoffset=\"1\" yoffset=\"3\" xadvance=\"7\" page=\"0\" chnl=\"0\" letter=\"R\"/>\n        <char id=\"83\" x=\"56\" y=\"71\" width=\"7\" height=\"11\" xoffset=\"1\" yoffset=\"3\" xadvance=\"6\" page=\"0\" chnl=\"0\" letter=\"S\"/>\n        <char id=\"84\" x=\"22\" y=\"45\" width=\"8\" height=\"11\" xoffset=\"0\" yoffset=\"3\" xadvance=\"6\" page=\"0\" chnl=\"0\" letter=\"T\"/>\n        <char id=\"85\" x=\"32\" y=\"45\" width=\"8\" height=\"11\" xoffset=\"1\" yoffset=\"3\" xadvance=\"8\" page=\"0\" chnl=\"0\" letter=\"U\"/>\n        <char id=\"86\" x=\"35\" y=\"32\" width=\"9\" height=\"11\" xoffset=\"0\" yoffset=\"3\" xadvance=\"7\" page=\"0\" chnl=\"0\" letter=\"V\"/>\n        <char id=\"87\" x=\"2\" y=\"19\" width=\"12\" height=\"11\" xoffset=\"0\" yoffset=\"3\" xadvance=\"11\" page=\"0\" chnl=\"0\" letter=\"W\"/>\n        <char id=\"88\" x=\"42\" y=\"45\" width=\"8\" height=\"11\" xoffset=\"0\" yoffset=\"3\" xadvance=\"7\" page=\"0\" chnl=\"0\" letter=\"X\"/>\n        <char id=\"89\" x=\"52\" y=\"45\" width=\"8\" height=\"11\" xoffset=\"0\" yoffset=\"3\" xadvance=\"7\" page=\"0\" chnl=\"0\" letter=\"Y\"/>\n        <char id=\"90\" x=\"62\" y=\"45\" width=\"8\" height=\"11\" xoffset=\"0\" yoffset=\"3\" xadvance=\"7\" page=\"0\" chnl=\"0\" letter=\"Z\"/>\n        <char id=\"91\" x=\"60\" y=\"2\" width=\"4\" height=\"12\" xoffset=\"1\" yoffset=\"4\" xadvance=\"4\" page=\"0\" chnl=\"0\" letter=\"[\"/>\n        <char id=\"92\" x=\"61\" y=\"84\" width=\"6\" height=\"11\" xoffset=\"0\" yoffset=\"4\" xadvance=\"4\" page=\"0\" chnl=\"0\" letter=\"\"/>\n        <char id=\"93\" x=\"66\" y=\"2\" width=\"4\" height=\"12\" xoffset=\"0\" yoffset=\"4\" xadvance=\"4\" page=\"0\" chnl=\"0\" letter=\"]\"/>\n        <char id=\"94\" x=\"28\" y=\"110\" width=\"8\" height=\"8\" xoffset=\"1\" yoffset=\"3\" xadvance=\"8\" page=\"0\" chnl=\"0\" letter=\"^\"/>\n        <char id=\"95\" x=\"42\" y=\"130\" width=\"8\" height=\"2\" xoffset=\"0\" yoffset=\"14\" xadvance=\"7\" page=\"0\" chnl=\"0\" letter=\"_\"/>\n        <char id=\"96\" x=\"14\" y=\"130\" width=\"4\" height=\"5\" xoffset=\"0\" yoffset=\"3\" xadvance=\"3\" page=\"0\" chnl=\"0\" letter=\"`\"/>\n        <char id=\"97\" x=\"58\" y=\"110\" width=\"7\" height=\"8\" xoffset=\"0\" yoffset=\"6\" xadvance=\"6\" page=\"0\" chnl=\"0\" letter=\"a\"/>\n        <char id=\"98\" x=\"72\" y=\"45\" width=\"8\" height=\"11\" xoffset=\"1\" yoffset=\"3\" xadvance=\"7\" page=\"0\" chnl=\"0\" letter=\"b\"/>\n        <char id=\"99\" x=\"29\" y=\"120\" width=\"6\" height=\"8\" xoffset=\"0\" yoffset=\"6\" xadvance=\"6\" page=\"0\" chnl=\"0\" letter=\"c\"/>\n        <char id=\"100\" x=\"65\" y=\"71\" width=\"7\" height=\"11\" xoffset=\"0\" yoffset=\"3\" xadvance=\"7\" page=\"0\" chnl=\"0\" letter=\"d\"/>\n        <char id=\"101\" x=\"67\" y=\"110\" width=\"7\" height=\"8\" xoffset=\"0\" yoffset=\"6\" xadvance=\"7\" page=\"0\" chnl=\"0\" letter=\"e\"/>\n        <char id=\"102\" x=\"69\" y=\"84\" width=\"6\" height=\"11\" xoffset=\"0\" yoffset=\"3\" xadvance=\"4\" page=\"0\" chnl=\"0\" letter=\"f\"/>\n        <char id=\"103\" x=\"74\" y=\"71\" width=\"7\" height=\"11\" xoffset=\"0\" yoffset=\"6\" xadvance=\"7\" page=\"0\" chnl=\"0\" letter=\"g\"/>\n        <char id=\"104\" x=\"2\" y=\"84\" width=\"7\" height=\"11\" xoffset=\"1\" yoffset=\"3\" xadvance=\"7\" page=\"0\" chnl=\"0\" letter=\"h\"/>\n        <char id=\"105\" x=\"19\" y=\"97\" width=\"3\" height=\"11\" xoffset=\"1\" yoffset=\"3\" xadvance=\"3\" page=\"0\" chnl=\"0\" letter=\"i\"/>\n        <char id=\"106\" x=\"7\" y=\"2\" width=\"5\" height=\"14\" xoffset=\"-1\" yoffset=\"3\" xadvance=\"3\" page=\"0\" chnl=\"0\" letter=\"j\"/>\n        <char id=\"107\" x=\"11\" y=\"84\" width=\"7\" height=\"11\" xoffset=\"1\" yoffset=\"3\" xadvance=\"6\" page=\"0\" chnl=\"0\" letter=\"k\"/>\n        <char id=\"108\" x=\"24\" y=\"97\" width=\"3\" height=\"11\" xoffset=\"1\" yoffset=\"3\" xadvance=\"3\" page=\"0\" chnl=\"0\" letter=\"l\"/>\n        <char id=\"109\" x=\"2\" y=\"110\" width=\"11\" height=\"8\" xoffset=\"1\" yoffset=\"6\" xadvance=\"11\" page=\"0\" chnl=\"0\" letter=\"m\"/>\n        <char id=\"110\" x=\"76\" y=\"110\" width=\"7\" height=\"8\" xoffset=\"1\" yoffset=\"6\" xadvance=\"7\" page=\"0\" chnl=\"0\" letter=\"n\"/>\n        <char id=\"111\" x=\"38\" y=\"110\" width=\"8\" height=\"8\" xoffset=\"0\" yoffset=\"6\" xadvance=\"7\" page=\"0\" chnl=\"0\" letter=\"o\"/>\n        <char id=\"112\" x=\"2\" y=\"58\" width=\"8\" height=\"11\" xoffset=\"1\" yoffset=\"6\" xadvance=\"7\" page=\"0\" chnl=\"0\" letter=\"p\"/>\n        <char id=\"113\" x=\"20\" y=\"84\" width=\"7\" height=\"11\" xoffset=\"0\" yoffset=\"6\" xadvance=\"7\" page=\"0\" chnl=\"0\" letter=\"q\"/>\n        <char id=\"114\" x=\"45\" y=\"120\" width=\"5\" height=\"8\" xoffset=\"1\" yoffset=\"6\" xadvance=\"4\" page=\"0\" chnl=\"0\" letter=\"r\"/>\n        <char id=\"115\" x=\"37\" y=\"120\" width=\"6\" height=\"8\" xoffset=\"0\" yoffset=\"6\" xadvance=\"5\" page=\"0\" chnl=\"0\" letter=\"s\"/>\n        <char id=\"116\" x=\"29\" y=\"97\" width=\"5\" height=\"10\" xoffset=\"0\" yoffset=\"4\" xadvance=\"4\" page=\"0\" chnl=\"0\" letter=\"t\"/>\n        <char id=\"117\" x=\"2\" y=\"120\" width=\"7\" height=\"8\" xoffset=\"1\" yoffset=\"6\" xadvance=\"7\" page=\"0\" chnl=\"0\" letter=\"u\"/>\n        <char id=\"118\" x=\"48\" y=\"110\" width=\"8\" height=\"8\" xoffset=\"0\" yoffset=\"6\" xadvance=\"6\" page=\"0\" chnl=\"0\" letter=\"v\"/>\n        <char id=\"119\" x=\"15\" y=\"110\" width=\"11\" height=\"8\" xoffset=\"0\" yoffset=\"6\" xadvance=\"10\" page=\"0\" chnl=\"0\" letter=\"w\"/>\n        <char id=\"120\" x=\"11\" y=\"120\" width=\"7\" height=\"8\" xoffset=\"0\" yoffset=\"6\" xadvance=\"6\" page=\"0\" chnl=\"0\" letter=\"x\"/>\n        <char id=\"121\" x=\"12\" y=\"58\" width=\"8\" height=\"11\" xoffset=\"0\" yoffset=\"6\" xadvance=\"6\" page=\"0\" chnl=\"0\" letter=\"y\"/>\n        <char id=\"122\" x=\"20\" y=\"120\" width=\"7\" height=\"8\" xoffset=\"0\" yoffset=\"6\" xadvance=\"6\" page=\"0\" chnl=\"0\" letter=\"z\"/>\n        <char id=\"123\" x=\"46\" y=\"2\" width=\"5\" height=\"12\" xoffset=\"0\" yoffset=\"4\" xadvance=\"4\" page=\"0\" chnl=\"0\" letter=\"{\"/>\n        <char id=\"124\" x=\"2\" y=\"2\" width=\"3\" height=\"15\" xoffset=\"1\" yoffset=\"2\" xadvance=\"3\" page=\"0\" chnl=\"0\" letter=\"|\"/>\n        <char id=\"125\" x=\"53\" y=\"2\" width=\"5\" height=\"12\" xoffset=\"0\" yoffset=\"4\" xadvance=\"4\" page=\"0\" chnl=\"0\" letter=\"}\"/>\n        <char id=\"126\" x=\"20\" y=\"130\" width=\"8\" height=\"4\" xoffset=\"1\" yoffset=\"7\" xadvance=\"8\" page=\"0\" chnl=\"0\" letter=\"~\"/>\n    </chars>\n    <kernings count=\"0\"/>\n</font>";
zygame_utils_LanguageUtils.currentLanguage = "zh";
zygame_utils_LanguageUtils.languages = new haxe_ds_StringMap();
zygame_utils_Lib.saveName = "zygame-lib";
zygame_utils_Lib._timeRuntimes = new haxe_ds_StringMap();
zygame_utils_MaxRectsBinPack.MAX_VALUE = 16777215;
zygame_utils_SoundUtils._curVolume = 1;
zygame_utils_SpineManager.spineOnFrames = [];
zygame_utils_SpineManager.isLockFrameFps = false;
zygame_utils_SpineManager.enbed = true;
zygame_utils_ZGC.GCLIST = [];
zygame_utils_load_AssetsZipLoader.count = 0;
ApplicationMain.main();
})(typeof exports != "undefined" ? exports : typeof window != "undefined" ? window : typeof self != "undefined" ? self : this, typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
